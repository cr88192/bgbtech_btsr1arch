.section .text

__text_start:

__memcpy64_320_ua:

__memcpy64_320:

__memcpy8_320:
  MOV.Q        (R11, 288), R28
  MOV.Q        (R11, 304), R30
  MOV.Q        (R11, 296), R29
  MOV.Q        (R11, 312), R31
  MOV.Q        R28, (R10, 288)
  MOV.Q        R30, (R10, 304)
  MOV.Q        R29, (R10, 296)
  MOV.Q        R31, (R10, 312)

__memcpy64_288_ua:

__memcpy64_288:

__memcpy8_288:
  MOV.Q        (R11, 256), R28
  MOV.Q        (R11, 272), R30
  MOV.Q        (R11, 264), R29
  MOV.Q        (R11, 280), R31
  MOV.Q        R28, (R10, 256)
  MOV.Q        R30, (R10, 272)
  MOV.Q        R29, (R10, 264)
  MOV.Q        R31, (R10, 280)

__memcpy64_256_ua:

__memcpy64_256:

__memcpy8_256:
  MOV.Q        (R11, 224), R28
  MOV.Q        (R11, 240), R30
  MOV.Q        (R11, 232), R29
  MOV.Q        (R11, 248), R31
  MOV.Q        R28, (R10, 224)
  MOV.Q        R30, (R10, 240)
  MOV.Q        R29, (R10, 232)
  MOV.Q        R31, (R10, 248)

__memcpy64_224_ua:

__memcpy64_224:

__memcpy8_224:
  MOV.Q        (R11, 192), R28
  MOV.Q        (R11, 208), R30
  MOV.Q        (R11, 200), R29
  MOV.Q        (R11, 216), R31
  MOV.Q        R28, (R10, 192)
  MOV.Q        R30, (R10, 208)
  MOV.Q        R29, (R10, 200)
  MOV.Q        R31, (R10, 216)

__memcpy64_192_ua:

__memcpy64_192:

__memcpy8_192:
  MOV.Q        (R11, 160), R28
  MOV.Q        (R11, 176), R30
  MOV.Q        (R11, 168), R29
  MOV.Q        (R11, 184), R31
  MOV.Q        R28, (R10, 160)
  MOV.Q        R30, (R10, 176)
  MOV.Q        R29, (R10, 168)
  MOV.Q        R31, (R10, 184)

__memcpy64_160_ua:

__memcpy64_160:

__memcpy8_160:
  MOV.Q        (R11, 128), R28
  MOV.Q        (R11, 144), R30
  MOV.Q        (R11, 136), R29
  MOV.Q        (R11, 152), R31
  MOV.Q        R28, (R10, 128)
  MOV.Q        R30, (R10, 144)
  MOV.Q        R29, (R10, 136)
  MOV.Q        R31, (R10, 152)

__memcpy64_128_ua:

__memcpy64_128:

__memcpy8_128:
  MOV.Q        (R11, 96), R28
  MOV.Q        (R11, 112), R30
  MOV.Q        (R11, 104), R29
  MOV.Q        (R11, 120), R31
  MOV.Q        R28, (R10, 96)
  MOV.Q        R30, (R10, 112)
  MOV.Q        R29, (R10, 104)
  MOV.Q        R31, (R10, 120)

__memcpy64_96_ua:

__memcpy64_96:

__memcpy8_96:
  MOV.Q        (R11, 64), R28
  MOV.Q        (R11, 80), R30
  MOV.Q        (R11, 72), R29
  MOV.Q        (R11, 88), R31
  MOV.Q        R28, (R10, 64)
  MOV.Q        R30, (R10, 80)
  MOV.Q        R29, (R10, 72)
  MOV.Q        R31, (R10, 88)

__memcpy64_64_ua:

__memcpy64_64:

__memcpy8_64:
  MOV.Q        (R11, 32), R28
  MOV.Q        (R11, 48), R30
  MOV.Q        (R11, 40), R29
  MOV.Q        (R11, 56), R31
  MOV.Q        R28, (R10, 32)
  MOV.Q        R30, (R10, 48)
  MOV.Q        R29, (R10, 40)
  MOV.Q        R31, (R10, 56)

__memcpy64_32_ua:

__memcpy64_32:

__memcpy8_32:
  MOV.Q        (R11, 0), R28
  MOV.Q        (R11, 16), R30
  MOV.Q        (R11, 8), R29
  MOV.Q        (R11, 24), R31
  MOV.Q        R28, (R10, 0)
  MOV.Q        R30, (R10, 16)
  MOV.Q        R29, (R10, 8)
  MOV.Q        R31, (R10, 24)
  JSR          R1, 0, R0

__memcpy64_72:
  MOV.Q        (R11, 64), R28
  MOV.Q        R28, (R10, 64)
  BSR          __memcpy64_64_ua, R0

__memcpy64_104:
  MOV.Q        (R11, 96), R28
  MOV.Q        R28, (R10, 96)
  BSR          __memcpy64_96_ua, R0

__memcpy64_200:
  MOV.Q        (R11, 192), R28
  MOV.Q        R28, (R10, 192)
  BSR          __memcpy64_192_ua, R0

__memcpy64_232:
  MOV.Q        (R11, 224), R28
  MOV.Q        R28, (R10, 224)
  BSR          __memcpy64_224_ua, R0

__va64_saveargs:
  MOV.Q        RQ10, (RQ6, 0)
  MOV.Q        RQ11, (RQ6, 8)
  MOV.Q        RQ12, (RQ6, 16)
  MOV.Q        RQ13, (RQ6, 24)
  MOV.Q        RQ14, (RQ6, 32)
  MOV.Q        RQ15, (RQ6, 40)
  MOV.Q        RQ16, (RQ6, 48)
  MOV.Q        RQ17, (RQ6, 56)
  MOV.Q        RQ7, (RQ6, 128)
  MOV.Q        RQ0, (RQ6, 136)
  MOV.Q        RQ2, (RQ6, 144)
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__va64_arg_i:

__va64_arg_l:
  MOV.L        (RQ10, 128), RQ28
  ADD          R0, 64, RQ29
  BRGE.Q       RQ29, RQ28, __va64_arg_i.L0
  ADD          RQ10, RQ28, RQ29
  MOV.Q        (RQ29, 0), RQ30
  ADD          RQ28, 8, RQ28
  MOV.L        RQ28, (RQ10, 128)
  ADD          RQ30, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__va64_arg_i.L0:
  MOV.Q        (RQ10, 144), RQ31
  MOV.Q        (RQ31, 0), RQ30
  ADD          RQ31, 8, RQ31
  MOV.Q        RQ31, (RQ10, 144)
  ADD          RQ30, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__va64_arg_x:
  MOV.L        (RQ10, 128), RQ28
  ADD          R0, 56, RQ29
  BRGE.Q       RQ29, RQ28, __va64_arg_x.L0
  ADD          RQ10, RQ28, RQ29
  MOV.Q        (RQ29, 0), RQ30
  MOV.Q        (RQ29, 8), RQ31
  ADD          RQ28, 16, RQ28
  MOV.L        RQ28, (RQ10, 128)
  ADD          RQ30, 0, RQ10
  ADD          RQ31, 0, RQ11
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__va64_arg_x.L0:
  MOV.Q        (RQ4, 144), RQ29
  ADD          RQ29, 7, RQ29
  AND          RQ29, -8, RQ29
  MOV.Q        (RQ29, 0), RQ30
  MOV.Q        (RQ29, 8), RQ31
  ADD          RQ29, 16, RQ29
  MOV.Q        RQ29, (RQ10, 144)
  ADD          RQ30, 0, RQ10
  ADD          RQ31, 0, RQ11
  JSR          R1, 0, R0
  ADD          R0, 0, R0

_arch_gettbr:
  ADD          RQ4, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__fpu_fdiv:

__fpu_fdiv_s:
  FDIV         RQ10, RQ11, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xlf_todbl:
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__ldhf16:
  BREQ.Q       RQ10, RQ0, __ldhf16.zero
  LUI          0x0003F000, RQ12
  ADD          R0, 0x0000000080000000, RQ13
  SHAD.L       RQ10, 16, RQ14
  ADDU.L       RQ14, R0, RQ14
  AND          RQ13, RQ14, RQ13
  SHAD.L       RQ10, 17, RQ11
  ADDU.L       RQ11, R0, RQ11
  SHLR         RQ11, 7, RQ10
  ADD          RQ10, RQ12, RQ10
  OR           RQ10, RQ13, RQ10
  SHLD.Q       RQ10, 32, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__ldhf16.zero:
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__sthf16:
  BREQ.Q       RQ10, RQ0, __sthf16.zero
  LUI          0x0003F000, RQ12
  ADD          R0, 0x0000000080000000, RQ13
  XOR          RQ13, -1, RQ14
  SHLR.Q       RQ10, 32, RQ10
  AND          RQ10, RQ13, RQ13
  AND          RQ10, RQ14, RQ14
  SUB          RQ14, RQ12, RQ14
  BRLT.Q       RQ14, RQ0, __sthf16.zero
  SHLR         RQ13, 16, RQ11
  SHLR         RQ14, 10, RQ10
  OR           RQ10, RQ11, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__sthf16.zero:
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

_start:
  BSR          __start, R1
  BSR          _exit, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0

_exit:
  BRK         
  ADD          R0, 0, RQ4
  LDIZ         4099, RQ5
  ADD          R0, 0, RQ6
  ADD          R2, 0, RQ7
  SYSCALL     
  BRK         

__setj:
  MOV.Q        RQ1, (RQ10, 8)
  MOV.Q        RQ2, (RQ10, 16)
  MOV.Q        RQ3, (RQ10, 24)
  MOV.Q        RQ8, (RQ10, 64)
  MOV.Q        RQ9, (RQ10, 72)
  MOV.Q        RQ18, (RQ10, 144)
  MOV.Q        RQ19, (RQ10, 152)
  MOV.Q        RQ20, (RQ10, 160)
  MOV.Q        RQ21, (RQ10, 168)
  MOV.Q        RQ22, (RQ10, 176)
  MOV.Q        RQ23, (RQ10, 184)
  MOV.Q        RQ24, (RQ10, 192)
  MOV.Q        RQ25, (RQ10, 200)
  MOV.Q        RQ26, (RQ10, 208)
  MOV.Q        RQ27, (RQ10, 216)
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0

__longj:
  MOV.Q        (RQ10, 8), RQ1
  MOV.Q        (RQ10, 16), RQ2
  MOV.Q        (RQ10, 24), RQ3
  MOV.Q        (RQ10, 64), RQ8
  MOV.Q        (RQ10, 72), RQ9
  MOV.Q        (RQ10, 144), RQ18
  MOV.Q        (RQ10, 152), RQ19
  MOV.Q        (RQ10, 160), RQ20
  MOV.Q        (RQ10, 168), RQ21
  MOV.Q        (RQ10, 176), RQ22
  MOV.Q        (RQ10, 184), RQ23
  MOV.Q        (RQ10, 192), RQ24
  MOV.Q        (RQ10, 200), RQ25
  MOV.Q        (RQ10, 208), RQ26
  MOV.Q        (RQ10, 216), RQ27
  ADD          RQ11, 0, RQ10
  JSR          R1, 0, R0

__xli_add:
  ADD          RQ10, RQ12, RQ14
  ADD          RQ11, RQ13, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_sub:
  XOR          RQ12, -1, RQ12
  XOR          RQ13, -1, RQ13
  BSR          __xli_add, R0

__xli_neg:
  XOR          RQ10, -1, RQ10
  XOR          RQ11, -1, RQ11
  JSR          R1, 0, R0

__xli_and:
  AND          RQ10, RQ12, RQ14
  AND          RQ11, RQ13, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_or:
  OR           RQ10, RQ12, RQ14
  OR           RQ11, RQ13, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_xor:
  XOR          RQ10, RQ12, RQ14
  XOR          RQ11, RQ13, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_shl:
  SHLD.Q       RQ10, RQ12, RQ14
  SHLD.Q       RQ11, RQ12, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_shlr:
  SHLR.Q       RQ10, RQ12, RQ14
  SHLR.Q       RQ11, RQ12, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_shar:
  SHAR.Q       RQ10, RQ12, RQ14
  SHAR.Q       RQ11, RQ12, RQ15
  ADD          RQ14, 0, RQ10
  ADD          RQ15, 0, RQ11
  JSR          R1, 0, R0

__xli_smul:
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_umul:
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_sdiv:
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_smod:
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_rt_T:
  ADD          R0, 1, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_rt_F:
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_eq:
  BRNE.Q       RQ11, RQ13, __xli_cmp_rt_F
  BRNE.Q       RQ10, RQ12, __xli_cmp_rt_F
  ADD          R0, 1, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_ne:
  BRNE.Q       RQ11, RQ13, __xli_cmp_rt_T
  BRNE.Q       RQ10, RQ12, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_gt:
  BRGT.Q       RQ11, RQ13, __xli_cmp_rt_T
  BRGT.Q       RQ10, RQ12, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_ge:
  BRGT.Q       RQ11, RQ13, __xli_cmp_rt_T
  BRGE.Q       RQ10, RQ12, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_hi:
  BRGTU.Q      RQ11, RQ13, __xli_cmp_rt_T
  BRGTU.Q      RQ10, RQ12, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_he:
  BRGTU.Q      RQ11, RQ13, __xli_cmp_rt_T
  BRGEU.Q      RQ10, RQ12, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_tst:
  AND          RQ10, RQ12, RQ14
  AND          RQ11, RQ13, RQ15
  BRNE.Q       RQ11, RQ0, __xli_cmp_rt_T
  BRNE.Q       RQ10, RQ0, __xli_cmp_rt_T
  ADD          R0, 0, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

__xli_cmp_ntst:
  AND          RQ10, RQ12, RQ14
  AND          RQ11, RQ13, RQ15
  BRNE.Q       RQ11, RQ0, __xli_cmp_rt_F
  BRNE.Q       RQ10, RQ0, __xli_cmp_rt_F
  ADD          R0, 1, RQ10
  JSR          R1, 0, R0
  ADD          R0, 0, R0

TK_GetTimeUs:
  CSRRS        R0, 4060, RQ10
  JSR          R1, 0, R0

P_AcsRun_Pop:
// p_acspec.c:770   {
  MOVU.B       (RQ10, 1064), RQ13
  ADDS.L       RQ13, -1, RQ12
  MOVU.B       RQ12, (RQ10, 1064)
// p_acspec.c:772   return(run->stack[run->stackpos]);
  ADD          RQ10, 40, RQ11
  MOVU.B       (RQ10, 1064), RQ13
  MOV.L        (RQ11, RQ13), RQ12
  ADDS.L       RQ12, 0, RD10

.L00C011C8:
  JSR          R1, 0, R0

FixedMul:
// m_fixed.c:69   c = __int32_dmuls(a, b) >> FRACBITS;
  DMULS.L      RD10, RD11, RQ13
  SHAR.Q       RQ13, 16, RQ12
  ADDS.L       RQ12, 0, RD17
// m_fixed.c:70   c = (int)c;
// m_fixed.c:77   return(c);
  ADD          RD17, 0, RD10

.L00C011C9:
  JSR          R1, 0, R0
  .balign 4

getc:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdio.c:3479   
  ADD          RQ9, 0, RQ10
  BSR          fgetc, R1

.L00C011CF:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

W_CachePatchName:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 84)
// r_data.c:1618   lump=W_GetNumForName (name);
  ADD          RQ8, 0, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RD18
// r_data.c:1619   return(W_CachePatchNum(lump, tag));
  ADD          RD18, 0, RD10
  MOV.L        (R2, 84), RD11
  BSR          W_CachePatchNum, R1

.L00C011D5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_Random:
// m_random.c:59   {
  MOV.L        prndindex, RD13
  ADDS.L       RD13, 1, RQ12
  AND          RQ12, 255, RD13
// m_random.c:62   return(rndtable[prndindex]&255);
  MOV          rndtable, RQ11
  MOVU.B       (RQ11, RD13), RQ12
  AND          RQ12, 255, RQ10
  MOV.L        RD13, prndindex

.L00C011D6:
  JSR          R1, 0, R0

S_StartSound:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
  ADDS.L       RD11, 0, RD9
// s_sound.c:422   S_StartSoundAtVolume(origin, sfx_id, snd_SfxVolume);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  MOV.L        snd_SfxVolume, RD12
  BSR          S_StartSoundAtVolume, R1

.L00C011DC:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

printf:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -1640, R2
  ADD          RQ10, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
  ADD          R2, 1152, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R0, 8, RQ7
  BSR          __va64_saveargs, R1
// pdpc201/stdio.c:231   
// pdpc201/stdio.c:236   
// pdpc201/stdio.c:238   
  ADD          R2, 112, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 1152, RQ12
  BSR          vsprintf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:239   
// pdpc201/stdio.c:241   
  ADD          R2, 112, RQ10
  BSR          tk_puts, R1
// pdpc201/stdio.c:243   
  ADD          RD18, 0, RD10

.L00C011E2:
  ADD          R2, 1640, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

isspace:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// pdpc201/ctype.c:381   
  BSR          _ctype_init, R1
// pdpc201/ctype.c:383   
  BRGE.L       R0, RD18, .L0080084E
// pdpc201/ctype.c:384   
  ADD          R0, -1, RD18

.L0080084E:
// pdpc201/ctype.c:385   
  BRGT.L       255, RD18, .L0080084F
// pdpc201/ctype.c:386   
  MOV.Q        _ctype_isbuf, RQ13
  MOVU.W       (RQ13, RD18), RQ9
  ADDU.L       RQ9, R0, RQ8
  AND          RQ8, 256, RQ23
  ADDS.L       RQ23, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C011E8, R0

.L0080084F:
// pdpc201/ctype.c:387   
  ADD          R0, 0, RD10

.L00C011E8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

strlen:
// pdpc201/string.c:1603   
  ADD          RQ10, 0, RQ13
// pdpc201/string.c:1604   
  ADDS.L       RD0, 0, RD12
// pdpc201/string.c:1608   
  MOV.Q        (RQ13, 0), RQ11
// pdpc201/string.c:1609   
  ADD          R0, 0x7F7F7F7F, RQ17
  LDSH32       RQ17, 0x7F7F7F7F, RQ17
  ADD          RQ11, RQ17, RQ16
  OR           RQ11, RQ16, RQ15
  ADD          R0, 0xFFFFFFFF80808080, RQ14
  LDSH32       RQ14, 0x0000000080808080, RQ14
  AND          RQ15, RQ14, RQ31
// pdpc201/string.c:1610   
  BSR          .L00800697, R0

.L00800698:
// pdpc201/string.c:1611   
  ADD          RQ13, 8, RQ13
// pdpc201/string.c:1612   
  ADDS.L       RD12, 8, RD12
// pdpc201/string.c:1613   
  MOV.Q        (RQ13, 0), RQ11
// pdpc201/string.c:1614   
  ADD          R0, 0x7F7F7F7F, RQ17
  LDSH32       RQ17, 0x7F7F7F7F, RQ17
  ADD          RQ11, RQ17, RQ16
  OR           RQ11, RQ16, RQ15
  ADD          R0, 0xFFFFFFFF80808080, RQ14
  LDSH32       RQ14, 0x0000000080808080, RQ14
  AND          RQ15, RQ14, RQ31

.L00800697:
  ADD          R0, 0xFFFFFFFF80808080, RQ17
  LDSH32       RQ17, 0x0000000080808080, RQ17
  BREQ.Q       RQ17, RQ31, .L00800698

.L00800699:
// pdpc201/string.c:1617   
  ADDU.L       RQ31, R0, RQ17
  ADDU.L       RQ17, R0, RQ16
  ADD          R0, 0x0000000080808080, RQ14
  BRNE.Q       RQ14, RQ16, .L0080069A
// pdpc201/string.c:1618   
  ADD          RQ13, 4, RQ13
// pdpc201/string.c:1619   
  ADDS.L       RD12, 4, RD12

.L0080069A:
// pdpc201/string.c:1625   
  BSR          .L0080069B, R0

.L0080069C:
  ADD          RQ13, 1, RQ13
  ADDS.L       RD12, 1, RD12

.L0080069B:
  MOV.B        (RQ13, 0), RQ17
  BRNE.L       R0, RQ17, .L0080069C

.L0080069D:
// pdpc201/string.c:1627   
  ADDS.L       RD12, 0, RQ16
  ADD          RQ16, 0, RQ10

.L00C011E9:
  JSR          R1, 0, R0

Z_Malloc:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD21
  MOV.L        RD11, (R2, 120)
  MOV.Q        RQ12, (R2, 112)
// z_zone.c:275   size = (size + 31) & (~15);
  ADDS.L       RD21, 31, RQ23
  AND          RQ23, -16, RD21
// z_zone.c:277   size1 = size;
  MOV.L        RD21, (R2, 104)
// z_zone.c:279   if(((long)size)&15)
  ADD          R0, 15, RQ13
  BTST.Q       RQ13, RD21, .L00802D99
// z_zone.c:280   __debugbreak();

Z_Malloc.debugbreak_L0107:
  BRK          263

.L00802D99:
// z_zone.c:288   size += sizeof(memblock_t);
  ADDS.L       RD21, 48, RD21
// z_zone.c:292   base = mainzone->rover;
  MOV.Q        mainzone, RQ13
  MOV.Q        (RQ13, 56), RQ18
// z_zone.c:294   if (!base->prev->user)
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ9, 16), RQ20
  BRNE.Q       R0, RQ20, .L00802D9A
// z_zone.c:295   base = base->prev;
  MOV.Q        (RQ18, 40), RQ18

.L00802D9A:
// z_zone.c:297   rover = base;
  ADD          RQ18, 0, RQ8
// z_zone.c:298   start = base->prev;
  MOV.Q        (RQ18, 40), RQ13
  MOV.Q        RQ13, (R2, 96)
// z_zone.c:300   do

.L00802D9B:
// z_zone.c:301   {
  MOV.Q        (R2, 96), RQ13
  BRNE.Q       RQ13, RQ8, .L00802D9E
// z_zone.c:305   I_Error ("Z_Malloc: failed on allocation of %i bytes", size);
  MOV          .L00C01200, RQ10
  ADD          RD21, 0, RD11
  BSR          I_Error, R1

.L00802D9E:
// z_zone.c:309   if (rover->id && (rover->id != ZONEID))		//BGB
  MOV.L        (RQ8, 0), RQ23
  BREQ.L       R0, RQ23, .L00802D9F
  MOV.L        (RQ8, 0), RQ23
  ADD          R0, 0x001D4A11, RD13
  BREQ.Q       RD13, RQ23, .L00802D9F

.L00802DA0:
// z_zone.c:310   {
  ADD          R0, 0, RD10
  ADD          R0, 127, RD11
  BSR          Z_DumpHeap, R1
// z_zone.c:312   __debugbreak();

Z_Malloc.debugbreak_L0108:
  BRK          264

.L00802D9F:
// z_zone.c:316   if (rover->user)
  MOV.Q        (RQ8, 16), RQ9
  BREQ.Q       R0, RQ9, .L00802DA2
  MOV.L        (RQ8, 8), RQ23
  BRGE.L       100, RQ23, .L00802DA3
// z_zone.c:322   base = rover = rover->next;
  MOV.Q        (RQ8, 32), RQ9
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 0, RQ18
  BSR          .L00802DA4, R0

.L00802DA3:
// z_zone.c:329   base = base->prev;
  MOV.Q        (RQ18, 40), RQ18
// z_zone.c:330   Z_Free ((byte *)rover+sizeof(memblock_t));
  ADD          RQ8, 48, RQ20
  ADD          RQ20, 0, RQ10
  BSR          Z_Free, R1
// z_zone.c:331   base = base->next;
  MOV.Q        (RQ18, 32), RQ18
// z_zone.c:332   rover = base->next;
  MOV.Q        (RQ18, 32), RQ8

.L00802DA4:
  BSR          .L00802DA5, R0

.L00802DA2:
// z_zone.c:336   rover = rover->next;
  MOV.Q        (RQ8, 32), RQ8

.L00802DA5:
  MOV.Q        (RQ18, 16), RQ9
  BRNE.Q       R0, RQ9, .L00802D9B
  MOV.L        (RQ18, 4), RQ23
  BRLT.L       RD21, RQ23, .L00802D9B

.L00802DA6:
// z_zone.c:341   extra = base->size - size;
  MOV.L        (RQ18, 4), RQ23
  SUBS.L       RQ23, RD21, RD13
// z_zone.c:343   if (extra >  MINFRAGMENT)
  MOV.L        RD13, (R2, 108)
  BRLE.L       64, RD13, .L00802DA8
// z_zone.c:346   newblock = (memblock_t *) ((byte *)base + size );
  ADD          RQ18, RD21, RQ9
  ADD          RQ9, 0, RQ22
// z_zone.c:347   newblock->size = extra;
  MOV.L        (R2, 108), RD13
  MOV.L        RD13, (RQ22, 4)
// z_zone.c:350   newblock->user = NULL;	
  MOV.Q        RQ0, (RQ22, 16)
// z_zone.c:351   newblock->tag = 0;
  MOV.L        RD0, (RQ22, 8)
// z_zone.c:352   newblock->prev = base;
  MOV.Q        RQ18, (RQ22, 40)
// z_zone.c:353   newblock->next = base->next;
  MOV.Q        (RQ18, 32), RQ20
  MOV.Q        RQ20, (RQ22, 32)
// z_zone.c:354   newblock->next->prev = newblock;
  MOV.Q        (RQ22, 32), RQ9
  MOV.Q        RQ22, (RQ9, 40)
// z_zone.c:355   newblock->id = 0;
  MOV.L        RD0, (RQ22, 0)
// z_zone.c:357   base->next = newblock;
  MOV.Q        RQ22, (RQ18, 32)
// z_zone.c:358   base->size = size;
  MOV.L        RD21, (RQ18, 4)

.L00802DA8:
// z_zone.c:361   if (user)
  MOV.Q        (R2, 112), RQ13
  BREQ.Q       R0, RQ13, .L00802DA9
// z_zone.c:364   base->user = user;			
  MOV.Q        (R2, 112), RQ13
  MOV.Q        RQ13, (RQ18, 16)
// z_zone.c:365   *(void **)user = (void *) ((byte *)base + sizeof(memblock_t));
  ADD          RQ18, 48, RQ20
  MOV.Q        RQ20, (RQ13, 0)
  BSR          .L00802DAA, R0

.L00802DA9:
  MOV.L        (R2, 120), RD13
  BRLT.L       100, RD13, .L00802DAB
// z_zone.c:370   I_Error ("Z_Malloc: an owner is required for purgable blocks");
  MOV          .L00C01202, RQ10
  BSR          I_Error, R1

.L00802DAB:
// z_zone.c:373   base->user = (void *)2;		
  ADD          R0, 2, RQ13
  MOV.Q        RQ13, (RQ18, 16)

.L00802DAA:
// z_zone.c:374   }
  MOV.L        (R2, 120), RD13
  MOV.L        RD13, (RQ18, 8)
// z_zone.c:378   mainzone->rover = base->next;	
  MOV.Q        (RQ18, 32), RQ9
  MOV.Q        mainzone, RQ12
  MOV.Q        RQ9, (RQ12, 56)
// z_zone.c:380   base->id = ZONEID;
  ADD          R0, 0x001D4A11, RD12
  MOV.L        RD12, (RQ18, 0)
// z_zone.c:382   if(((long)base)&15)
  ADD          R0, 15, RQ11
  BTST.Q       RQ11, RQ18, .L00802DAC
// z_zone.c:383   __debugbreak();

Z_Malloc.debugbreak_L0109:
  BRK          265

.L00802DAC:
// z_zone.c:385   __setmemtrap(base, 3);
  ADD          R0, 3, RD13
// z_zone.c:387   ptr = (void *) ((byte *)base + sizeof(memblock_t));
  ADD          RQ18, 48, RQ20
  ADD          RQ20, 0, RQ12
// z_zone.c:389   return ptr;
  MOV.Q        RQ12, (R2, 88)
  ADD          RQ12, 0, RQ10

.L00C011FE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

I_Error:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -560, R2
  ADD          RQ10, 0, RQ8
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R0, 8, RQ7
  BSR          __va64_saveargs, R1
// i_btesh4.c:318   va_start (argptr,error);
// i_btesh4.c:319   fprintf (stderr, "Error: ");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  MOV          .L00C0120F, RQ11
  BSR          fprintf, R1
// i_btesh4.c:320   vfprintf (stderr,error,argptr);
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R2, 96, RQ12
  BSR          vfprintf, R1
// i_btesh4.c:321   fprintf (stderr, "\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  MOV          .L00C01210, RQ11
  BSR          fprintf, R1
// i_btesh4.c:322   va_end (argptr);
// i_btesh4.c:324   __debugbreak();

I_Error.debugbreak_L010F:
  BRK          271
// i_btesh4.c:326   fflush( stderr );
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  BSR          fflush, R1
// i_btesh4.c:328   I_ShutdownGraphics();
  BSR          I_ShutdownGraphics, R1
// i_btesh4.c:330   exit(-1);
  ADD          R0, -1, RD10
  BSR          exit, R1

.L00C0120E:
  ADD          R2, 560, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

sprintf:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -568, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          RQ11, 0, RQ9
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
  ADD          R0, 16, RQ7
  BSR          __va64_saveargs, R1
// pdpc201/stdio.c:2237   
// pdpc201/stdio.c:2238   
  MOV.Q        (R2, 88), RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 96, RQ12
  BSR          vsprintf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:2239   
// pdpc201/stdio.c:2240   
  ADD          RD18, 0, RD10

.L00C01217:
  ADD          R2, 568, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

FixedDiv:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD8
  MOV.L        RD11, (R2, 88)
// m_fixed.c:92   {
  SHAR.Q       RD8, 63, RQ6
  SUB          R0, RD8, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RD8, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  SHAR         RQ18, 14, RQ9
  MOV.L        (R2, 88), RD23
  SHAR.Q       RD23, 63, RQ6
  SUB          R0, RD23, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RD23, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  BRLT.L       RQ18, RQ9, .L00801748
// m_fixed.c:94   return ((a^b)<0) ? MININT : MAXINT;
  MOV.L        (R2, 88), RD23
  XOR          RD8, RD23, RQ18
  BRGE.L       R0, RQ18, .L00801749
  LUI          0xFFFFFFFFFFF80000, RQ9
  BSR          .L0080174A, R0

.L00801749:
  ADD          R0, 0x7FFFFFFF, RQ9

.L0080174A:
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0121D, R0

.L00801748:
// m_fixed.c:95   return FixedDiv2 (a,b);
  ADDS.L       RD8, 0, RD10
  MOV.L        (R2, 88), RD11
  BSR          FixedDiv2, R1

.L00C0121D:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

__stdio_chkmagic:
// pdpc201/stdio.c:148   
  MOV.L        (RQ10, 4), RQ13
  ADD          R0, 0x01414237, RD12
  BREQ.Q       RD12, RQ13, .L008002C6
// pdpc201/stdio.c:149   

__stdio_chkmagic.debugbreak_L014C:
  BRK          332

.L008002C6:
// pdpc201/stdio.c:150   
  MOV.L        (RQ10, 108), RQ13
  ADD          R0, 0x01414237, RD12
  BREQ.Q       RD12, RQ13, .L008002C7
// pdpc201/stdio.c:151   

__stdio_chkmagic.debugbreak_L014D:
  BRK          333

.L008002C7:
// pdpc201/stdio.c:155   
  MOV.Q        (RQ10, 72), RQ12
// pdpc201/stdio.c:158   
  MOV.Q        (RQ10, 32), RQ11
  ADD          RQ11, 8, RQ17
  ADD          RQ12, RQ17, RQ16
  MOV.Q        (RQ10, 32), RQ11
  LUI          256, RQ15
  BRLEU.Q      RQ15, RQ11, .L008002C8
// pdpc201/stdio.c:161   

__stdio_chkmagic.debugbreak_L014E:
  BRK          334

.L008002C8:
  BRGT.Q       RQ12, RQ16, .L008002C9
// pdpc201/stdio.c:164   

__stdio_chkmagic.debugbreak_L014F:
  BRK          335

.L008002C9:
  MOV.Q        (RQ10, 24), RQ15
  BRGE.Q       RQ12, RQ15, .L008002CA
// pdpc201/stdio.c:167   

__stdio_chkmagic.debugbreak_L0150:
  BRK          336

.L008002CA:
  MOV.Q        (RQ10, 24), RQ15
  BRLE.Q       RQ16, RQ15, .L008002CB
// pdpc201/stdio.c:169   

__stdio_chkmagic.debugbreak_L0151:
  BRK          337

.L008002CB:
  MOV.Q        (RQ10, 40), RQ15
  BRGE.Q       RQ12, RQ15, .L008002CC
// pdpc201/stdio.c:172   

__stdio_chkmagic.debugbreak_L0152:
  BRK          338

.L008002CC:
  MOV.Q        (RQ10, 40), RQ15
  BRLE.Q       RQ16, RQ15, .L008002CD
// pdpc201/stdio.c:174   

__stdio_chkmagic.debugbreak_L0153:
  BRK          339

.L008002CD:
  MOV.Q        (RQ10, 48), RQ15
  BRGE.Q       RQ12, RQ15, .L008002CE
// pdpc201/stdio.c:177   

__stdio_chkmagic.debugbreak_L0154:
  BRK          340

.L008002CE:
  MOV.Q        (RQ10, 48), RQ15
  BRLE.Q       RQ16, RQ15, .L008002CF
// pdpc201/stdio.c:179   

__stdio_chkmagic.debugbreak_L0155:
  BRK          341

.L008002CF:
  MOVU.W       (RQ12, 0), RQ13
  LDIZ         4660, RD14
  BREQ.Q       RD14, RQ13, .L008002D0
// pdpc201/stdio.c:182   

__stdio_chkmagic.debugbreak_L0156:
  BRK          342

.L008002D0:
  ADD          RQ16, -2, RQ15
  MOVU.W       (RQ15, 0), RQ13
  LDIZ         17185, RD14
  BREQ.Q       RD14, RQ13, .L008002D1
// pdpc201/stdio.c:184   

__stdio_chkmagic.debugbreak_L0157:
  BRK          343

.L008002D1:

.L00C0121E:
  JSR          R1, 0, R0

P_BlockThingsIterator:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD22
  ADD          RD11, 0, RD23
  MOV.Q        RQ12, (R2, 96)
// p_maputl.c:550   if(!R_BlkMapCheckOversizeP(x, y))
  ADD          RD22, 0, RD10
  ADD          RD23, 0, RD11
  BSR          R_BlkMapCheckOversizeP, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00801DED
// p_maputl.c:551   {
  ADD          RD22, 0, RD10
  ADD          RD23, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  BSR          .L00C0126C, R0

.L00801DED:
// p_maputl.c:555   if(!P_BlockThingsIterator2(x  , y  , func))
  ADD          RD22, 0, RD10
  ADD          RD23, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C003CC
// p_maputl.c:557   if(!P_BlockThingsIterator2(x+1, y  , func))
  ADDS.L       RD22, 1, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C003CC
// p_maputl.c:559   if(!P_BlockThingsIterator2(x-1, y  , func))
  ADDS.L       RD22, -1, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C003CC
// p_maputl.c:561   if(!P_BlockThingsIterator2(x  , y+1, func))
  ADDS.L       RD23, 1, RQ18
  ADD          RD22, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C003CC
// p_maputl.c:563   if(!P_BlockThingsIterator2(x  , y-1, func))
  ADDS.L       RD23, -1, RQ18
  ADD          RD22, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C003CC
// p_maputl.c:565   if(!P_BlockThingsIterator2(x+1, y+1, func))
  ADDS.L       RD23, 1, RQ18
  ADDS.L       RD22, 1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C003CC
// p_maputl.c:567   if(!P_BlockThingsIterator2(x-1, y+1, func))
  ADDS.L       RD23, 1, RQ18
  ADDS.L       RD22, -1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C003CC
// p_maputl.c:569   if(!P_BlockThingsIterator2(x+1, y-1, func))
  ADDS.L       RD23, -1, RQ18
  ADDS.L       RD22, 1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C003CC
// p_maputl.c:571   if(!P_BlockThingsIterator2(x-1, y-1, func))
  ADDS.L       RD23, -1, RQ18
  ADDS.L       RD22, -1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  MOV.Q        (R2, 96), RQ12
  BSR          P_BlockThingsIterator2, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C003CC
// p_maputl.c:573   return(true);
  ADD          R0, 1, RD10
  BSR          .L00C0126C, R0

.L00C003CC:
  ADD          R0, 0, RQ10

.L00C0126C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_SpawnMobj:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.L        RD12, (R2, 132)
  MOV.L        RD13, (R2, 128)
// p_mobj.c:524   mobj = Z_Malloc (sizeof(*mobj), PU_LEVELMOBJ, NULL);
  ADD          R0, 232, RD10
  ADD          R0, 52, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_mobj.c:525   memset (mobj, 0, sizeof (*mobj));
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 232, RQ12
  BSR          memset, R1
// p_mobj.c:526   info = &mobjinfo[type];
  MOV          mobjinfo, RQ27
  MOV.L        (R2, 128), RD26
  ADD          R0, 92, R5
  MUL.L        RD26, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// p_mobj.c:528   mobj->type = type;
  MOV.L        RD26, (RQ18, 128)
// p_mobj.c:529   mobj->info = info;
  MOV.Q        RQ23, (RQ18, 136)
// p_mobj.c:530   mobj->x = x;
  MOV.L        (R2, 140), RD27
  MOV.L        RD27, (RQ18, 24)
// p_mobj.c:531   mobj->y = y;
  MOV.L        (R2, 136), RD13
  MOV.L        RD13, (RQ18, 28)
// p_mobj.c:532   mobj->radius = info->radius;
  MOV.L        (RQ23, 64), RQ9
  MOV.L        RQ9, (RQ18, 104)
// p_mobj.c:533   mobj->height = info->height;
  MOV.L        (RQ23, 68), RQ9
  MOV.L        RQ9, (RQ18, 108)
// p_mobj.c:534   mobj->flags = info->flags;
  MOV.L        (RQ23, 84), RQ9
  MOV.L        RQ9, (RQ18, 160)
// p_mobj.c:535   mobj->health = info->spawnhealth;
  MOV.L        (RQ23, 8), RQ9
  MOV.L        RQ9, (RQ18, 164)
// p_mobj.c:537   if (gameskill != sk_nightmare)
  MOV.L        gameskill, RD12
  BREQ.Q       4, RD12, .L0080229F
// p_mobj.c:538   mobj->reactiontime = info->reactiontime;
  MOV.L        (RQ23, 20), RQ9
  MOV.L        RQ9, (RQ18, 184)

.L0080229F:
// p_mobj.c:540   mobj->lastlook = P_Random () % MAXPLAYERS;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RQ8
  ADD          R0, 4, RD27
  MODS.L       RQ8, RD27, RQ8
  MOV.L        RQ8, (RQ18, 200)
// p_mobj.c:543   st = &states[info->spawnstate];
  MOV.L        (RQ23, 4), RQ9
  MOV          states, RQ26
  ADD          R0, 40, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ26, RQ21, RQ21
// p_mobj.c:545   mobj->state = st;
  MOV.Q        RQ21, (RQ18, 152)
// p_mobj.c:546   mobj->tics = st->tics;
  MOV.L        (RQ21, 8), RQ8
  MOV.L        RQ8, (RQ18, 144)
// p_mobj.c:547   mobj->sprite = st->sprite;
  MOV.L        (RQ21, 0), RQ9
  MOV.L        RQ9, (RQ18, 60)
// p_mobj.c:548   mobj->frame = st->frame;
  MOV.L        (RQ21, 4), RQ8
  MOV.L        RQ8, (RQ18, 64)
// p_mobj.c:551   P_SetThingPosition (mobj);
  ADD          RQ18, 0, RQ10
  BSR          P_SetThingPosition, R1
// p_mobj.c:553   mobj->floorz = mobj->subsector->sector->floorheight;
  MOV.Q        (RQ18, 88), RQ22
  MOV.Q        (RQ22, 0), RQ20
  MOV.L        (RQ20, 0), RQ9
  MOV.L        RQ9, (RQ18, 96)
// p_mobj.c:554   mobj->ceilingz = mobj->subsector->sector->ceilingheight;
  MOV.L        (RQ20, 4), RQ8
  MOV.L        RQ8, (RQ18, 100)
// p_mobj.c:556   if (z == ONFLOORZ)
  MOV.L        (R2, 132), RD26
  LUI          0xFFFFFFFFFFF80000, RD13
  BRNE.Q       RD13, RD26, .L008022A0
// p_mobj.c:557   mobj->z = mobj->floorz;
  MOV.L        (RQ18, 96), RQ9
  MOV.L        RQ9, (RQ18, 32)
  BSR          .L008022A1, R0

.L008022A0:
  MOV.L        (R2, 132), RD27
  ADD          R0, 0x7FFFFFFF, RD26
  BRNE.Q       RD26, RD27, .L008022A2
// p_mobj.c:559   mobj->z = mobj->ceilingz - mobj->info->height;
  MOV.L        (RQ18, 100), RQ8
  MOV.Q        (RQ18, 136), RQ22
  MOV.L        (RQ22, 68), RQ9
  SUBS.L       RQ8, RQ9, RQ27
  MOV.L        RQ27, (RQ18, 32)
  BSR          .L008022A3, R0

.L008022A2:
// p_mobj.c:561   mobj->z = z;
  MOV.L        (R2, 132), RD27
  MOV.L        RD27, (RQ18, 32)

.L008022A3:

.L008022A1:
// p_mobj.c:563   mobj->thinker.function.acp1 = (actionf_p1)P_MobjThinker;
  MOV          P_MobjThinker, RQ22
  ADD          RQ18, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        RQ22, (RQ26, 0)
// p_mobj.c:565   P_AddThinker (&mobj->thinker);
  ADD          RQ18, 0, RQ22
  ADD          RQ22, 0, RQ10
  BSR          P_AddThinker, R1
// p_mobj.c:567   Z_ChangeTag (mobj, PU_LEVELMOBJ);  //BGB: Debug
  ADD          RQ18, 0, RQ10
  ADD          R0, 52, RD11
  BSR          Z_ChangeTag2, R1
// p_mobj.c:569   return mobj;
  ADD          RQ18, 0, RQ10

.L00C01272:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

__get_stderr:
// pdpc201/stdio.c:142   
  MOV          __stderr, RQ13
  ADD          RQ13, 0, RQ10

.L00C01273:
  JSR          R1, 0, R0
  .balign 4

toupper:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
// pdpc201/ctype.c:544   
  ADDS.L       RD9, 0, RD10
  BSR          _toupper_gen, R1

.L00C01279:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

getNextSector:
// p_spec.c:265   {
  MOV.W        (RQ10, 24), RQ13
  ADD          R0, 4, RD12
  BTSTN.L      RD12, RQ13, .L00802088
// p_spec.c:267   return NULL;
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L00802088:
// p_spec.c:269   if (line->frontsector == sec)
  MOV.Q        (RQ10, 64), RQ12
  BRNE.Q       RQ11, RQ12, .L00802089
// p_spec.c:270   return line->backsector;
  MOV.Q        (RQ10, 72), RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L00802089:
// p_spec.c:272   return line->frontsector;
  MOV.Q        (RQ10, 64), RQ12
  ADD          RQ12, 0, RQ10

.L00C0127A:
  JSR          R1, 0, R0
  .balign 4

P_AcsRun_Push:
// p_acspec.c:765   {
  ADD          RQ10, 40, RQ13
  MOVU.B       (RQ10, 1064), RQ12
  ADD          RQ12, 0, RQ17
  ADDS.L       RQ12, 1, RQ16
  MOVU.B       RQ16, (RQ10, 1064)
  MOV.L        RD11, (RQ13, RQ17)

.L00C0127B:
  JSR          R1, 0, R0
  .balign 4

P_AddThinker:
// p_tick.c:68   {
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 0), RQ12
  MOV.Q        RQ10, (RQ12, 8)
// p_tick.c:70   thinker->next = &thinkercap;
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, (RQ10, 8)
// p_tick.c:71   thinker->prev = thinkercap.prev;
  MOV.Q        (RQ13, 0), RQ12
  MOV.Q        RQ12, (RQ10, 0)
// p_tick.c:72   thinkercap.prev = thinker;
  MOV.Q        RQ10, (RQ13, 0)

.L00C0127C:
  JSR          R1, 0, R0
  .balign 4

strcmp:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// pdpc201/string.c:437   
  MOV.Q        (R2, 104), RQ18
// pdpc201/string.c:438   
  MOV.Q        (R2, 96), RQ9
// pdpc201/string.c:440   
  ADD          R0, 0xFFFFFFFF80808080, RQ12
  LDSH32       RQ12, 0x0000000080808080, RQ12
  ADD          RQ12, 0, RQ13
// pdpc201/string.c:441   
  ADD          R0, 0x7F7F7F7F, RQ10
  LDSH32       RQ10, 0x7F7F7F7F, RQ10
  ADD          RQ10, 0, RQ11
// pdpc201/string.c:443   
  MOV.Q        (RQ18, 0), RQ8
// pdpc201/string.c:444   
  MOV.Q        (RQ9, 0), RQ17
  MOV.Q        RQ17, (R2, 72)
// pdpc201/string.c:445   
  ADD          RQ8, RQ11, RQ20
  MOV.Q        RQ11, (R2, 80)
  OR           RQ8, RQ20, RQ16
  AND          RQ16, RQ13, RQ15
  MOV.Q        RQ15, (R2, 64)
  MOV.Q        RQ13, (R2, 88)
// pdpc201/string.c:447   
  BSR          .L00800631, R0

.L00800632:
// pdpc201/string.c:448   
  ADD          RQ18, 8, RQ18
// pdpc201/string.c:449   
  ADD          RQ9, 8, RQ9
// pdpc201/string.c:450   
  MOV.Q        (RQ18, 0), RQ8
// pdpc201/string.c:451   
  MOV.Q        (RQ9, 0), RQ13
  MOV.Q        RQ13, (R2, 72)
// pdpc201/string.c:452   
  MOV.Q        (R2, 80), RQ12
  ADD          RQ8, RQ12, RQ20
  OR           RQ8, RQ20, RQ11
  MOV.Q        (R2, 88), RQ10
  AND          RQ11, RQ10, RQ17
  MOV.Q        RQ17, (R2, 64)

.L00800631:
  MOV.Q        (R2, 72), RQ13
  CMPEQ.Q      RQ8, RQ13, RQ21
  MOV.Q        (R2, 64), RQ12
  MOV.Q        (R2, 88), RQ11
  CMPEQ.Q      RQ12, RQ11, RQ10
  BTSTN.L      RQ10, RQ21, .L00800632

.L00800633:
// pdpc201/string.c:455   
  ADDU.L       RQ8, R0, RQ21
  MOV.Q        (R2, 72), RQ13
  ADDU.L       RQ13, R0, RQ12
  CMPEQ.Q      RQ21, RQ12, RQ11
  MOV.Q        (R2, 64), RQ10
  ADDU.L       RQ10, R0, RQ21
  ADDU.L       RQ21, R0, RQ20
  ADD          R0, 0x0000000080808080, RQ17
  CMPEQ.Q      RQ20, RQ17, RQ12
  BTST.L       RQ12, RQ11, .L00800634
// pdpc201/string.c:456   
  ADD          RQ18, 4, RQ18
  ADD          RQ9, 4, RQ9

.L00800634:
// pdpc201/string.c:459   
  ADD          RQ18, 0, RQ23
  MOVU.B       (RQ18, 0), RD22
  ADD          RQ23, 1, RQ18
  ADD          RQ9, 0, RQ23
  MOVU.B       (RQ9, 0), RD13
  MOV.L        RD13, (R2, 56)
  ADD          RQ23, 1, RQ9
// pdpc201/string.c:460   
  BSR          .L00800635, R0

.L00800636:
// pdpc201/string.c:461   
  ADD          RQ18, 0, RQ23
  MOVU.B       (RQ18, 0), RD22
  ADD          RQ23, 1, RQ18
  ADD          RQ9, 0, RQ23
  MOVU.B       (RQ9, 0), RD13
  MOV.L        RD13, (R2, 56)
  ADD          RQ23, 1, RQ9

.L00800635:
  BREQ.L       R0, RD22, .L00800637
  MOV.L        (R2, 56), RD13
  BRNE.Q       RD13, RD22, .L00800637
  BSR          .L00800636, R0

.L00800637:

.L00800638:
  MOV.L        RD0, (R2, 60)
// pdpc201/string.c:463   
  MOV.L        (R2, 56), RD13
  BRGE.L       RD13, RD22, .L00800639
  ADD          R0, -1, RD13
  MOV.L        RD13, (R2, 60)

.L00800639:
// pdpc201/string.c:464   
  MOV.L        (R2, 56), RD13
  BRLE.L       RD13, RD22, .L0080063A
  ADD          R0, 1, RD13
  MOV.L        RD13, (R2, 60)

.L0080063A:
// pdpc201/string.c:465   
  MOV.L        (R2, 60), RD10

.L00C01282:
  ADD          R2, 344, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

__get_errno:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -304, R2
  MOV.L        __errno, RD9
// pdpc201/errno.c:20   
  MOV          __errno, RQ18
  ADD          RQ18, 0, RQ10

.L00C01283:
  ADD          R2, 304, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0
  .balign 4

getSide:
// p_spec.c:219   {
  MOV.Q        sectors, RQ13
  SHAD.L       RD10, 7, RQ17
  ADD          RQ13, RQ17, RQ17
  MOV.Q        (RQ17, 120), RQ16
  MOV.Q        (RQ16, RD11), RQ15
  ADD          RQ15, 36, RQ16
  MOV.W        (RQ16, RD12), RQ14
  MOV.Q        sides, RQ31
  ADD          R0, 24, R5
  MUL.L        RQ14, R5, RQ16
  ADD          RQ31, RQ16, RQ16
  ADD          RQ16, 0, RQ10

.L00C01284:
  JSR          R1, 0, R0

tk_putc:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// tk_core/tk_puts.c:283   
  ADD          RD18, 0, RD10
  BSR          tk_putc_v, R1

.L00C0128A:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

memcpy:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -312, R2
  MOV.Q        RQ10, (R2, 72)
  MOV.Q        RQ11, (R2, 64)
  MOV.Q        RQ12, (R2, 56)
// pdpc201/string.c:2084   
  MOV.Q        (R2, 72), RQ13
  ADD          RQ13, 0, RQ18
// pdpc201/string.c:2086   
  MOV.Q        (R2, 64), RQ12
  ADD          RQ12, 0, RQ9
// pdpc201/string.c:2098   
  SUB          RQ13, RQ12, RQ22
// pdpc201/string.c:2099   
  BRGE.Q       R0, RQ22, .L008006CB
// pdpc201/string.c:2100   
  SUB          R0, RQ22, RQ22

.L008006CB:
// pdpc201/string.c:2101   
  MOV.Q        (R2, 56), RQ13
  BRGEU.Q      RQ13, RQ22, .L008006CC
// pdpc201/string.c:2102   

memcpy.debugbreak_L0167:
  BRK          359

.L008006CC:
// pdpc201/string.c:2106   
  MOV.Q        (R2, 56), RQ13
  BRGTU.Q      16, RQ13, .L008006CD
  MOV.Q        (R2, 56), RQ13
  ADD          R0, 7, RQ12
  BTSTN.Q      RQ12, RQ13, .L008006CE
  MOV.Q        (R2, 56), RQ13
  BRNE.Q       8, RQ13, .L008006CF
// pdpc201/string.c:2111   
  MOV.Q        (RQ9, 0), RQ22
// pdpc201/string.c:2113   
  MOV.Q        RQ22, (RQ18, 0)
// pdpc201/string.c:2114   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006CF:
  MOV.Q        (R2, 56), RQ13
  BRNE.Q       16, RQ13, .L008006D0
// pdpc201/string.c:2118   
  MOV.Q        (RQ9, 0), RQ22
// pdpc201/string.c:2120   
  MOV.Q        (RQ9, 8), RQ13
// pdpc201/string.c:2121   
  MOV.Q        RQ22, (RQ18, 0)
// pdpc201/string.c:2122   
  MOV.Q        RQ13, (RQ18, 8)
  MOV.Q        RQ13, (R2, 48)
// pdpc201/string.c:2123   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006D0:
  BSR          .L008006D1, R0

.L008006CE:
  MOV.Q        (R2, 56), RQ13
  ADD          R0, 3, RQ12
  BTSTN.Q      RQ12, RQ13, .L008006D2
  MOV.Q        (R2, 56), RQ13
  BRNE.Q       4, RQ13, .L008006D3
// pdpc201/string.c:2129   
  MOVU.L       (RQ9, 0), RQ8
  ADDU.L       RQ8, R0, RQ22
// pdpc201/string.c:2131   
  ADDU.L       RQ22, R0, RQ8
  MOVU.L       RQ8, (RQ18, 0)
// pdpc201/string.c:2132   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006D3:
  MOV.Q        (R2, 56), RQ13
  BRNE.Q       12, RQ13, .L008006D4
// pdpc201/string.c:2136   
  MOV.Q        (RQ9, 0), RQ22
// pdpc201/string.c:2138   
  MOVU.L       (RQ9, 8), RQ8
  ADDU.L       RQ8, R0, RQ13
// pdpc201/string.c:2139   
  MOV.Q        RQ22, (RQ18, 0)
// pdpc201/string.c:2140   
  ADDU.L       RQ13, R0, RQ8
  MOV.Q        RQ13, (R2, 48)
  MOVU.L       RQ8, (RQ18, 8)
// pdpc201/string.c:2141   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006D4:

.L008006D2:

.L008006D1:
  MOV.Q        (R2, 56), RQ13
  BRNE.Q       R0, RQ13, .L008006D5
// pdpc201/string.c:2146   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006D5:

.L008006CD:
// pdpc201/string.c:2150   
  MOV.Q        (R2, 56), RQ13
  AND          RQ13, -8, RQ12
// pdpc201/string.c:2152   
  MOV.Q        RQ12, (R2, 24)
  BRLEU.Q      RQ13, RQ12, .L008006D6
// pdpc201/string.c:2153   

memcpy.debugbreak_L0168:
  BRK          360

.L008006D6:
// pdpc201/string.c:2156   
  MOV.Q        (R2, 24), RQ13
  ADD          RQ18, RQ13, RQ20
  ADD          RQ20, 0, RQ23
// pdpc201/string.c:2159   
  BSR          .L008006D7, R0

.L008006D8:
// pdpc201/string.c:2160   
  MOV.Q        (RQ9, 0), RQ22
// pdpc201/string.c:2161   
  MOV.Q        (RQ9, 8), RQ13
// pdpc201/string.c:2162   
  MOV.Q        (RQ9, 16), RQ12
  MOV.Q        (RQ9, 24), RQ11
// pdpc201/string.c:2163   
  MOV.Q        RQ22, (RQ18, 0)
  MOV.Q        RQ13, (RQ18, 8)
  MOV.Q        RQ13, (R2, 48)
// pdpc201/string.c:2164   
  MOV.Q        RQ12, (RQ18, 16)
  MOV.Q        RQ12, (R2, 40)
  MOV.Q        RQ11, (RQ18, 24)
  MOV.Q        RQ11, (R2, 32)
// pdpc201/string.c:2165   
  ADD          RQ9, 32, RQ9
// pdpc201/string.c:2166   
  ADD          RQ18, 32, RQ18

.L008006D7:
  ADD          RQ18, 32, RQ20
  BRLE.Q       RQ23, RQ20, .L008006D8

.L008006D9:
// pdpc201/string.c:2169   
  BSR          .L008006DA, R0

.L008006DB:
// pdpc201/string.c:2170   
  MOV.Q        (RQ9, 0), RQ21
  ADD          RQ9, 8, RQ9
  ADD          RQ18, 0, RQ20
  ADD          RQ18, 8, RQ18
  MOV.Q        RQ21, (RQ20, 0)

.L008006DA:
  BRLT.Q       RQ23, RQ18, .L008006DB

.L008006DC:
// pdpc201/string.c:2175   
  BRLE.Q       RQ23, RQ18, .L008006DD
// pdpc201/string.c:2176   

memcpy.debugbreak_L0169:
  BRK          361

.L008006DD:
// pdpc201/string.c:2178   
  MOV.Q        (R2, 56), RQ13
  ADD          R0, 7, RQ12
  BTSTN.Q      RQ12, RQ13, .L008006DE
// pdpc201/string.c:2179   
  MOV.Q        (R2, 72), RQ10
  BSR          .L00C0129F, R0

.L008006DE:
// pdpc201/string.c:2181   
  MOV.Q        (R2, 56), RQ13
  AND          RQ13, 7, RQ21
  BRGEU.Q      4, RQ21, .L008006DF
  BREQ.Q       R0, RQ21, .L008006E0
  BREQ.Q       1, RQ21, .L008006E1
  BREQ.Q       2, RQ21, .L008006E2
  BREQ.Q       3, RQ21, .L008006E3

.L008006DF:
  BREQ.Q       4, RQ21, .L008006E4
  BREQ.Q       5, RQ21, .L008006E5
  BREQ.Q       6, RQ21, .L008006E6
  BREQ.Q       7, RQ21, .L008006E7
  BSR          .L008006E8, R0

.L008006E0:
// pdpc201/string.c:2183   
  BSR          .L008006E9, R0

.L008006E1:
// pdpc201/string.c:2185   
  MOV.B        (RQ9, 0), RQ8
  MOV.B        RQ8, (RQ18, 0)
// pdpc201/string.c:2187   
  BSR          .L008006E9, R0

.L008006E2:
// pdpc201/string.c:2188   
  MOV.W        (RQ9, 0), RQ8
  MOV.W        RQ8, (RQ18, 0)
// pdpc201/string.c:2190   
  BSR          .L008006E9, R0

.L008006E3:
// pdpc201/string.c:2191   
  MOV.W        (RQ9, 0), RQ8
  MOV.W        RQ8, (RQ18, 0)
// pdpc201/string.c:2193   
  MOV.B        (RQ9, 2), RQ8
  MOV.B        RQ8, (RQ18, 2)
// pdpc201/string.c:2194   
  BSR          .L008006E9, R0

.L008006E4:
// pdpc201/string.c:2195   
  MOV.L        (RQ9, 0), RQ8
  MOV.L        RQ8, (RQ18, 0)
// pdpc201/string.c:2197   
  BSR          .L008006E9, R0

.L008006E5:
// pdpc201/string.c:2198   
  MOV.L        (RQ9, 0), RQ8
  MOV.L        RQ8, (RQ18, 0)
// pdpc201/string.c:2200   
  MOV.B        (RQ9, 4), RQ8
  MOV.B        RQ8, (RQ18, 4)
// pdpc201/string.c:2201   
  BSR          .L008006E9, R0

.L008006E6:
// pdpc201/string.c:2202   
  MOV.L        (RQ9, 0), RQ8
  MOV.L        RQ8, (RQ18, 0)
// pdpc201/string.c:2204   
  MOV.W        (RQ9, 4), RQ8
  MOV.W        RQ8, (RQ18, 4)
// pdpc201/string.c:2205   
  BSR          .L008006E9, R0

.L008006E7:
// pdpc201/string.c:2206   
  MOV.L        (RQ9, 0), RQ8
  MOV.L        RQ8, (RQ18, 0)
// pdpc201/string.c:2208   
  MOV.W        (RQ9, 4), RQ8
  MOV.W        RQ8, (RQ18, 4)
// pdpc201/string.c:2209   
  MOV.B        (RQ9, 6), RQ8
  MOV.B        RQ8, (RQ18, 6)
// pdpc201/string.c:2210   
  BSR          .L008006E9, R0

.L008006E8:
// pdpc201/string.c:2211   

.L008006E9:
// pdpc201/string.c:2213   
  MOV.Q        (R2, 72), RQ10

.L00C0129F:
  ADD          R2, 312, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

malloc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R23, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdlib.c:200   
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  MOV.Q        _malloc_fptr, RQ23
  JSR          RQ23, 0, R1

.L00C012A8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R23
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

V_DrawPatch:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD23
  ADD          RQ13, 0, RQ18
// v_video.c:395   {
  BREQ.Q       R0, RQ18, .L00C012AE
// v_video.c:402   V_DrawPatchDirect(x, y,
  ADDS.L       RD9, 0, RD10
  ADDS.L       RD8, 0, RD11
  ADD          RD23, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatchDirect, R1

.L00C012AE:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

A_FaceTarget:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:815   {	
  MOV.Q        (RQ18, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C012B4
// p_enemy.c:819   actor->flags &= ~MF_AMBUSH;
  MOV.L        (RQ18, 160), RQ9
  AND          RQ9, -33, RQ22
  MOV.L        RQ22, (RQ18, 160)
// p_enemy.c:821   actor->angle = R_PointToAngle2 (
  MOV.Q        (RQ18, 176), RQ8
  MOV.L        (RQ8, 28), RQ9
  MOV.L        (RQ8, 24), RQ22
  MOV.L        (RQ18, 28), RQ23
  MOV.L        (RQ18, 24), RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ23, 0, RD11
  ADD          RQ22, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RQ20
  MOVU.L       RQ20, (RQ18, 56)
// p_enemy.c:827   if (actor->target->flags & MF_SHADOW)
  MOV.Q        (RQ18, 176), RQ8
  MOV.L        (RQ8, 160), RQ9
  LUI          64, RD27
  BTST.L       RD27, RQ9, .L00801B4C
// p_enemy.c:828   actor->angle += (P_Random()-P_Random())<<21;
  MOVU.L       (RQ18, 56), RQ22
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ21
  SUBS.L       RQ23, RQ21, RQ20
  SHAD.L       RQ20, 21, RQ9
  ADDU.L       RQ22, RQ9, RQ23
  MOVU.L       RQ23, (RQ18, 56)

.L00801B4C:

.L00C012B4:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

W_CacheLumpNum:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD18
  ADD          RD11, 0, RD22
// w_wad.c:2060   if(lump < 0)
  BRGE.L       R0, RD18, .L00802981
// w_wad.c:2061   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C012BA, R0

.L00802981:
// w_wad.c:2063   if(tag == PU_CACHE)		//BGB
  BRNE.Q       101, RD22, .L00802982
// w_wad.c:2064   tag = PU_CACHELUMP;
  ADD          R0, 102, RD22

.L00802982:
// w_wad.c:2068   if ((unsigned)lump >= numlumps)
  ADDU.L       RD18, R0, RQ8
  MOV.L        numlumps, RD20
  BRLTU.L      RD20, RQ8, .L00802983
// w_wad.c:2069   I_Error ("W_CacheLumpNum: %i >= numlumps",lump);
  MOV          .L00C012BB, RQ10
  ADD          RD18, 0, RD11
  BSR          I_Error, R1

.L00802983:
// w_wad.c:2071   if (!lumpcache[lump])
  MOV.Q        lumpcache, RQ20
  MOV.Q        (RQ20, RD18), RQ9
  BRNE.Q       R0, RQ9, .L00802984
// w_wad.c:2076   sz = W_LumpLength (lump);
  ADD          RD18, 0, RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD21
// w_wad.c:2077   ptr = Z_Malloc (sz+256, tag, &lumpcache[lump]);
  MOV.Q        lumpcache, RQ20
  LEA.Q        RQ20, RD18, RQ9
  ADDS.L       RD21, 256, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RQ9, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ23
// w_wad.c:2081   W_ReadLump (lump, lumpcache[lump]);
  MOV.Q        lumpcache, RQ20
  MOV.Q        (RQ20, RD18), RQ9
  ADD          RD18, 0, RD10
  ADD          RQ9, 0, RQ11
  BSR          W_ReadLump, R1
  BSR          .L00802985, R0

.L00802984:
// w_wad.c:2084   {
  MOV.Q        lumpcache, RQ20
  MOV.Q        (RQ20, RD18), RQ23
// w_wad.c:2086   W_CheckZonePointerSane(ptr);
  ADD          RQ23, 0, RQ10
  BSR          W_CheckZonePointerSane, R1
// w_wad.c:2089   Z_ChangeTag (lumpcache[lump],tag);
  MOV.Q        lumpcache, RQ20
  MOV.Q        (RQ20, RD18), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          Z_ChangeTag2, R1

.L00802985:
// w_wad.c:2092   return lumpcache[lump];
  MOV.Q        lumpcache, RQ20
  MOV.Q        (RQ20, RD18), RQ9
  ADD          RQ9, 0, RQ10

.L00C012BA:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

abs:
// pdpc201/stdlib.c:1389   
  BRGE.L       R0, RD10, .L008007A6
// pdpc201/stdlib.c:1391   
  SUBS.L       R0, RD10, RD10

.L008007A6:
// pdpc201/stdlib.c:1393   

.L00C012BC:
  JSR          R1, 0, R0

fprintf:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -560, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ23
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R0, 16, RQ7
  BSR          __va64_saveargs, R1
// pdpc201/stdio.c:264   
  ADD          RQ8, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:266   
// pdpc201/stdio.c:268   
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  BRNE.Q       RQ22, RQ8, .L008002D2
// pdpc201/stdio.c:269   
  ADD          RQ23, 0, RQ10
  ADD          R2, 112, RQ11
  BSR          vprintf, R1
  ADD          RQ10, 0, RD18
  BSR          .L008002D3, R0

.L008002D2:
// pdpc201/stdio.c:271   
  ADD          RQ8, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R2, 112, RQ12
  BSR          vfprintf, R1
  ADD          RQ10, 0, RD18

.L008002D3:
// pdpc201/stdio.c:273   
  ADD          RD18, 0, RD10

.L00C012C2:
  ADD          R2, 560, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

I_GetTime:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
// i_btesh4.c:199   t = TK_GetTimeMs();
  BSR          TK_GetTimeMs, R1
  ADDU.L       RQ10, R0, RQ8
  ADDS.L       RQ8, 0, RD9
// i_btesh4.c:202   t=(t*35LL)>>10;
  ADDS.L       RD9, 0, RQ18
  SHAD.Q       RQ18, 1, RQ6
  SHAD.Q       RQ18, 5, RQ7
  ADD          RQ18, RQ6, RQ23
  ADD          RQ23, RQ7, RQ23
  SHAR.Q       RQ23, 10, RQ18
  ADDS.L       RQ18, 0, RD9
// i_btesh4.c:203   return(t);
  ADDS.L       RD9, 0, RD10

.L00C012C8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

Z_ChangeTag2:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
  ADD          RD11, 0, RD21
// z_zone.c:541   {
  BREQ.Q       R0, RQ22, .L00C012E2
// z_zone.c:548   block = (memblock_t *) ( (byte *)ptr - sizeof(memblock_t));
  ADD          RQ22, -48, RQ8
  ADD          RQ8, 0, RQ18
// z_zone.c:550   if(((long)block)&15)
  ADD          R0, 15, RQ13
  BTST.Q       RQ13, RQ18, .L00802DD1
// z_zone.c:551   __debugbreak();

Z_ChangeTag2.debugbreak_L017E:
  BRK          382

.L00802DD1:
// z_zone.c:553   if (block->id != ZONEID)
  MOV.L        (RQ18, 0), RQ9
  ADD          R0, 0x001D4A11, RD13
  BREQ.Q       RD13, RQ9, .L00802DD2
// z_zone.c:554   {

Z_ChangeTag2.debugbreak_L017F:
  BRK          383
// z_zone.c:556   I_Error ("Z_ChangeTag: freed a pointer without ZONEID");
  MOV          .L00C012E5, RQ10
  BSR          I_Error, R1

.L00802DD2:
// z_zone.c:559   other = block->next;
  MOV.Q        (RQ18, 32), RQ23
// z_zone.c:562   if ( other->prev != block)
  MOV.Q        (RQ23, 40), RQ8
  BREQ.Q       RQ18, RQ8, .L00802DD3
// z_zone.c:563   {

Z_ChangeTag2.debugbreak_L0180:
  BRK          384

.L00802DD3:
// z_zone.c:568   if ( other->id && (other->id != ZONEID))
  MOV.L        (RQ23, 0), RQ9
  BREQ.L       R0, RQ9, .L00802DD4
  MOV.L        (RQ23, 0), RQ9
  ADD          R0, 0x001D4A11, RD13
  BREQ.Q       RD13, RQ9, .L00802DD4

.L00802DD5:
// z_zone.c:569   {

Z_ChangeTag2.debugbreak_L0181:
  BRK          385

.L00802DD4:
// z_zone.c:576   if (tag >= PU_PURGELEVEL && ((nlint)block->user) < 0x100)
  BRLT.L       100, RD21, .L00802DD7
  MOV.Q        (RQ18, 16), RQ8
  BRGE.Q       256, RQ8, .L00802DD7

.L00802DD8:
// z_zone.c:577   I_Error ("Z_ChangeTag: an owner is required for purgable blocks");
  MOV          .L00C012E8, RQ10
  BSR          I_Error, R1

.L00802DD7:
// z_zone.c:579   __setmemtrap(block, 2);
  ADD          R0, 2, RD13
// z_zone.c:581   block->tag = tag;
  MOV.L        RD21, (RQ18, 8)
// z_zone.c:583   __setmemtrap(block, 3);
  ADD          R0, 3, RD12

.L00C012E2:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

strncmp:
// pdpc201/string.c:598   
  ADD          RQ0, 0, RQ13
// pdpc201/string.c:600   
  ADD          RQ10, 0, RQ17
// pdpc201/string.c:601   
  ADD          RQ11, 0, RQ16
// pdpc201/string.c:602   
  BSR          .L0080063B, R0

.L0080063C:
// pdpc201/string.c:603   
  MOVU.B       (RQ17, RQ13), RQ15
  MOVU.B       (RQ16, RQ13), RQ14
  BRGE.L       RQ14, RQ15, .L0080063D
// pdpc201/string.c:604   
  ADD          R0, -1, RD10
  JSR          R1, 0, R0
  BSR          .L0080063E, R0

.L0080063D:
  MOVU.B       (RQ17, RQ13), RQ15
  MOVU.B       (RQ16, RQ13), RQ14
  BRLE.L       RQ14, RQ15, .L0080063F
// pdpc201/string.c:605   
  ADD          R0, 1, RD10
  JSR          R1, 0, R0
  BSR          .L00800640, R0

.L0080063F:
  MOVU.B       (RQ17, RQ13), RQ15
  BREQ.L       R0, RQ15, .L00C0040B

.L00800640:

.L0080063E:
// pdpc201/string.c:607   
  ADD          RQ13, 1, RQ13

.L0080063B:
  BRLTU.Q      RQ12, RQ13, .L0080063C

.L00800641:
// pdpc201/string.c:608   
  ADD          R0, 0, RD10
  JSR          R1, 0, R0

.L00C0040B:
  ADD          R0, 0, RQ10

.L00C012E9:
  JSR          R1, 0, R0
  .balign 4

R_TextureNumForName:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 72)
  ADD          R2, 80, RQ6
  MOV.Q        RQ6, (R2, 64)
// r_data.c:2147   {
// r_data.c:2151   memcpy(tname, name, 8);
  ADD          R2, 80, RQ9
  MOV.Q        (R2, 72), RQ8
  MOV.Q        (RQ8, 0), RQ10
  MOV.Q        RQ10, (RQ9, 0)
// r_data.c:2152   tname[8]=0;
  MOV.B        RD0, (RQ9, 8)
// r_data.c:2154   i = R_CheckTextureNumForName (tname);
  ADD          RQ9, 0, RQ10
  BSR          R_CheckTextureNumForName, R1
  ADD          RQ10, 0, RD18
// r_data.c:2156   if (i==-1)
  BRNE.Q       -1, RD18, .L00802584
// r_data.c:2160   printf("R_TextureNumForName: %s not found\n", tname);
  MOV          .L00C012F0, RQ10
  ADD          R2, 80, RQ11
  BSR          printf, R1
// r_data.c:2161   return(0);
  ADD          R0, 0, RD10
  BSR          .L00C012EF, R0

.L00802584:
// r_data.c:2162   }
  ADD          RD18, 0, RD10

.L00C012EF:
  ADD          R2, 376, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

NetDivTicdup:
// d_net.c:87   {
  MOV.L        ticdup, RD13
  BRNE.Q       1, RD13, .L00801431
// d_net.c:89   return(x);
  JSR          R1, 0, R0

.L00801431:
// d_net.c:90   return(x/ticdup);
  MOV.L        ticdup, RD13
  DIVS.L       RD10, RD13, RQ12
  ADDS.L       RQ12, 0, RD10

.L00C012F1:
  JSR          R1, 0, R0

P_SetMobjState:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
  ADD          RD11, 0, RD21
// p_mobj.c:74   n=256;
  ADD          R0, 256, RD22
// p_mobj.c:75   do

.L0080223B:
// p_mobj.c:76   {
  BRNE.L       R0, RD21, .L0080223E
// p_mobj.c:78   {
  MOV.Q        RQ0, (RQ8, 152)
// p_mobj.c:80   P_RemoveMobj (mobj);
  ADD          RQ8, 0, RQ10
  BSR          P_RemoveMobj, R1
// p_mobj.c:81   return false;
  ADD          R0, 0, RD10
  BSR          .L00C012F7, R0

.L0080223E:
// p_mobj.c:84   st = &states[state];
  MOV          states, RQ20
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ9
  ADD          RQ20, RQ9, RQ9
// p_mobj.c:85   mobj->state = st;
  MOV.Q        RQ9, (RQ8, 152)
// p_mobj.c:86   mobj->tics = st->tics;
  MOV.L        (RQ9, 8), RQ18
  MOV.L        RQ18, (RQ8, 144)
// p_mobj.c:87   mobj->sprite = st->sprite;
  MOV.L        (RQ9, 0), RQ18
  MOV.L        RQ18, (RQ8, 60)
// p_mobj.c:88   mobj->frame = st->frame;
  MOV.L        (RQ9, 4), RQ18
  MOV.L        RQ18, (RQ8, 64)
// p_mobj.c:92   if (st->action.acp1)
  ADD          RQ9, 16, RQ20
  MOV.Q        (RQ20, 0), RQ23
  BREQ.Q       R0, RQ23, .L0080223F
// p_mobj.c:94   {	
  ADD          RQ9, 16, RQ20
  MOV.Q        RQ20, (R2, 80)
  MOV.Q        (RQ20, 0), RQ23
  ADD          RQ8, 0, RQ10
  ADD          R2, 80, RQ29
  JSR          RQ23, 0, R1

.L0080223F:
// p_mobj.c:98   state = st->nextstate;
  MOV.L        (RQ9, 24), RD21
  MOV.L        (RQ8, 144), RQ18
  BRNE.L       R0, RQ18, .L00802240
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, -1, RD22
  BRLE.L       R0, RQ18, .L00802240
  BSR          .L0080223B, R0

.L00802240:
// p_mobj.c:102   return true;
  ADD          R0, 1, RD10

.L00C012F7:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

twoSided:
// p_spec.c:249   {
  MOV.Q        sectors, RQ13
  SHAD.L       RD10, 7, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 120), RQ17
  MOV.Q        (RQ17, RD11), RQ16
  MOV.W        (RQ16, 24), RQ15
  AND          RQ15, 4, RQ14
  ADDS.L       RQ14, 0, RD10

.L00C012F8:
  JSR          R1, 0, R0

__read:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD21
  ADD          RQ11, 0, RQ22
  ADD          RQ12, 0, RQ23
  ADD          RQ13, 0, RQ20
// pdpc201/btshx_supa.c:299   
  BRGE.L       3, RD21, .L00800F98
// pdpc201/btshx_supa.c:300   
  ADD          R0, 0, RD18
  ADDS.L       RD18, 0, RQ8
  BRGEU.Q      RQ23, RQ8, .L00800F99

.L00800F9A:
// pdpc201/btshx_supa.c:302   
  BSR          tk_getch, R1
  ADDS.L       RQ10, 0, RD9
// pdpc201/btshx_supa.c:304   
  MOV.B        RD9, (RQ22, RD18)
// pdpc201/btshx_supa.c:305   
  BRLT.L       R0, RD9, .L00800F99
  ADDS.L       RD18, 1, RD18
  ADDS.L       RD18, 0, RQ8
  BRLTU.Q      RQ23, RQ8, .L00800F9A

.L00800F99:
// pdpc201/btshx_supa.c:307   
  ADD          RD18, 0, RD10
  BSR          .L00C01308, R0

.L00800F98:
// pdpc201/btshx_supa.c:314   
  BRLT.L       256, RD21, .L00800F9B
// pdpc201/btshx_supa.c:315   

__read.debugbreak_L018C:
  BRK          396

.L00800F9B:
  MOV          btshx_tk_handles, RQ27
  MOV.Q        (RQ27, RD21), RQ13
// pdpc201/btshx_supa.c:317   
  MOV.Q        RQ13, (R2, 88)
  BRNE.Q       R0, RQ13, .L00800F9C
// pdpc201/btshx_supa.c:318   

__read.debugbreak_L018D:
  BRK          397

.L00800F9C:
// pdpc201/btshx_supa.c:320   
  BREQ.Q       R0, RQ20, .L00800F9D
  MOV.L        RD0, (RQ20, 0)

.L00800F9D:
// pdpc201/btshx_supa.c:321   
  MOV          btshx_tk_handles, RQ27
  MOV.Q        (RQ27, RD21), RQ13
  ADDS.L       RQ23, 0, RQ12
  ADD          RQ22, 0, RQ10
  ADD          R0, 1, RD11
  BSR          tk_fread, R1
  ADD          RQ10, 0, RD18
// pdpc201/btshx_supa.c:322   
  BRGE.L       R0, RD18, .L00800F9E
// pdpc201/btshx_supa.c:323   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ20, 0)

.L00800F9E:
// pdpc201/btshx_supa.c:325   
  ADD          RD18, 0, RD10

.L00C01308:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_AcsRun_GetLocalVar:
// p_acspec.c:795   {
  ADD          RQ10, 40, RQ13
  MOV.L        (RQ13, RD11), RQ12
  ADDS.L       RQ12, 0, RD10

.L00C0130B:
  JSR          R1, 0, R0

R_GetColumn:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADDS.L       RD10, 0, RD9
  ADD          RD11, 0, RD22
// r_data.c:608   if(!texturecolumnlump[tex])
  MOV.Q        texturecolumnlump, RQ13
  MOV.Q        (RQ13, RD9), RQ18
  BRNE.Q       R0, RQ18, .L00802449
// r_data.c:609   { R_GenerateLookupLazy(tex); }
  ADDS.L       RD9, 0, RD10
  BSR          R_GenerateLookupLazy, R1

.L00802449:
// r_data.c:611   col &= texturewidthmask[tex];
  MOV.Q        texturewidthmask, RQ13
  MOV.L        (RQ13, RD9), RQ12
  AND          RD22, RQ12, RD22
// r_data.c:612   lump = texturecolumnlump[tex][col];
  MOV.Q        texturecolumnlump, RQ13
  MOV.Q        (RQ13, RD9), RQ18
  MOV.W        (RQ18, RD22), RD21
// r_data.c:613   ofs = texturecolumnofs[tex][col];
  MOV.Q        texturecolumnofs, RQ13
  MOV.Q        (RQ13, RD9), RQ18
  MOVU.W       (RQ18, RD22), RD23
// r_data.c:615   if (lump > 0)
  BRLE.L       R0, RD21, .L0080244A
// r_data.c:616   {
  MOV.Q        patchcache, RQ13
  MOV.Q        (RQ13, RD21), RQ8
  BREQ.Q       R0, RQ8, .L0080244B
// r_data.c:619   return(src+ofs);
  ADD          RQ8, RD23, RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C01311, R0

.L0080244B:
// r_data.c:622   return (byte *)W_CachePatchNum(lump,PU_CACHE)+ofs;
  ADD          RD21, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, RD23, RQ20
  ADD          RQ20, 0, RQ10
  BSR          .L00C01311, R0

.L0080244A:
// r_data.c:625   src = texturecomposite[tex];
  MOV.Q        texturecomposite, RQ13
  MOV.Q        (RQ13, RD9), RQ8
// r_data.c:626   if (src)
  BREQ.Q       R0, RQ8, .L0080244C
// r_data.c:627   return(src + ofs);
  ADD          RQ8, RD23, RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C01311, R0

.L0080244C:
// r_data.c:628   R_GenerateComposite (tex);
  ADDS.L       RD9, 0, RD10
  BSR          R_GenerateComposite, R1
// r_data.c:629   return texturecomposite[tex] + ofs;
  MOV.Q        texturecomposite, RQ13
  MOV.Q        (RQ13, RD9), RQ20
  ADD          RQ20, RD23, RQ18
  ADD          RQ18, 0, RQ10

.L00C01311:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_GetWorldVar:
// p_acspec.c:805   {
  MOV          p_acsvm_wrlvar, RQ13
  MOV.L        (RQ13, RD11), RQ12
  ADDS.L       RQ12, 0, RD10

.L00C01312:
  JSR          R1, 0, R0

P_FindSectorFromLineTag:
// p_spec.c:451   if(line->tag<=0)
  MOV.W        (RQ10, 28), RQ13
  BRGT.L       R0, RQ13, .L008020A4
// p_spec.c:452   return(-1);
  ADD          R0, -1, RD10
  JSR          R1, 0, R0

.L008020A4:
// p_spec.c:454   for (i=start+1;i<numsectors;i++)
  ADDS.L       RD11, 1, RD12
  MOV.L        numsectors, RD17
  BRGE.L       RD17, RD12, .L008020A7

.L008020A5:
// p_spec.c:455   if (sectors[i].tag == line->tag)
  MOV.Q        sectors, RQ17
  SHAD.L       RD12, 7, RQ16
  ADD          RQ17, RQ16, RQ16
  MOV.W        (RQ16, 16), RQ13
  MOV.W        (RQ10, 28), RQ15
  BRNE.Q       RQ15, RQ13, .L008020A8
// p_spec.c:456   return i;
  ADDS.L       RD12, 0, RD10
  JSR          R1, 0, R0

.L008020A8:
  ADDS.L       RD12, 1, RD12
  MOV.L        numsectors, RD17
  BRLT.L       RD17, RD12, .L008020A5

.L008020A7:
// p_spec.c:458   return -1;
  ADD          R0, -1, RD10

.L00C01313:
  JSR          R1, 0, R0
  .balign 4

isdigit:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// pdpc201/ctype.c:329   
  BSR          _ctype_init, R1
// pdpc201/ctype.c:331   
  BRGE.L       R0, RD18, .L00800842
// pdpc201/ctype.c:332   
  ADD          R0, -1, RD18

.L00800842:
// pdpc201/ctype.c:333   
  BRGT.L       255, RD18, .L00800843
// pdpc201/ctype.c:334   
  MOV.Q        _ctype_isbuf, RQ13
  MOVU.W       (RQ13, RD18), RQ9
  ADDU.L       RQ9, R0, RQ8
  AND          RQ8, 8, RQ23
  ADDS.L       RQ23, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01319, R0

.L00800843:
// pdpc201/ctype.c:335   
  ADD          R0, 0, RD10

.L00C01319:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

P_AcsRun_GetMapVar:
// p_acspec.c:800   {
  MOV          p_acsvm_mapvar, RQ13
  MOV.L        (RQ13, RD11), RQ12
  ADDS.L       RQ12, 0, RD10

.L00C0131A:
  JSR          R1, 0, R0

T_MoveFloor:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ18
// p_floor.c:214   res = T_MovePlane(floor->sector,
  MOV.L        (RQ18, 40), RQ8
  MOV.L        (RQ18, 28), RQ23
  MOV.L        (RQ18, 52), RQ22
  MOV.L        (RQ18, 56), RQ21
  MOV.Q        (RQ18, 32), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ21, 0, RD11
  ADD          RQ22, 0, RD12
  ADD          RQ23, 0, RD13
  ADD          R0, 0, RD14
  ADDS.L       RQ8, 0, RD15
  BSR          T_MovePlane, R1
  MOV.L        RD10, (R2, 148)
// p_floor.c:219   if (!(leveltime&7))
  MOV.L        leveltime, RD27
  ADD          R0, 7, RD26
  BTSTN.L      RD26, RD27, .L00801BF1
// p_floor.c:220   S_StartSound((mobj_t *)&floor->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ9
  ADD          RQ9, 48, RQ20
  ADD          RQ20, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1

.L00801BF1:
// p_floor.c:223   if (res == pastdest)
  MOV.L        (R2, 148), RD27
  BRNE.Q       2, RD27, .L00801BF2
// p_floor.c:224   {
  MOV.Q        (RQ18, 32), RQ9
  MOV.Q        RQ0, (RQ9, 104)
  MOV.L        (RQ18, 40), RQ8
  BRNE.Q       1, RQ8, .L00801BF3
// p_floor.c:228   {
  MOV.L        (RQ18, 24), RQ23
  BREQ.Q       11, RQ23, .L00801BF5
  BSR          .L00801BF6, R0

.L00801BF5:
// p_floor.c:231   case donutRaise:
  MOV.L        (RQ18, 44), RQ22
  MOV.Q        (RQ18, 32), RQ9
  MOV.W        RQ22, (RQ9, 14)
// p_floor.c:233   floor->sector->floorpic = floor->texture;
  MOV.W        (RQ18, 48), RQ8
  MOV.W        RQ8, (RQ9, 8)

.L00801BF6:
// p_floor.c:234   default:

.L00801BF4:
  BSR          .L00801BF7, R0

.L00801BF3:
  MOV.L        (RQ18, 40), RQ23
  BRNE.Q       -1, RQ23, .L00801BF8
// p_floor.c:239   {
  MOV.L        (RQ18, 24), RQ22
  BREQ.Q       6, RQ22, .L00801BFA
  BSR          .L00801BFB, R0

.L00801BFA:
// p_floor.c:242   case lowerAndChange:
  MOV.L        (RQ18, 44), RQ21
  MOV.Q        (RQ18, 32), RQ9
  MOV.W        RQ21, (RQ9, 14)
// p_floor.c:244   floor->sector->floorpic = floor->texture;
  MOV.W        (RQ18, 48), RQ8
  MOV.W        RQ8, (RQ9, 8)

.L00801BFB:
// p_floor.c:245   default:

.L00801BF9:

.L00801BF8:

.L00801BF7:
// p_floor.c:248   }
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_floor.c:251   S_StartSound((mobj_t *)&floor->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ20
  ADD          RQ20, 48, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1

.L00801BF2:

.L00C01320:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

HGetPacket:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
// d_net.c:212   {		
  MOV.L        reboundpacket, RD27
  BREQ.L       R0, RD27, .L00801442
// d_net.c:214   {
  MOV.Q        netbuffer, RQ27
  MOV          reboundstore, RQ26
  ADD          RQ27, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          __memcpy64_104, R1
// d_net.c:216   doomcom->remotenode = 0;
  MOV.Q        doomcom, RQ27
  MOV.W        RD0, (RQ27, 12)
// d_net.c:217   reboundpacket = false;
  MOV.L        RD0, reboundpacket
// d_net.c:218   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01326, R0

.L00801442:
// d_net.c:221   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00C00431
// d_net.c:224   if (demoplayback)
  MOV.L        demoplayback, RD27
  BRNE.L       R0, RD27, .L00C00431
// d_net.c:227   doomcom->command = CMD_GET;
  ADD          R0, 2, RD27
  MOV.Q        doomcom, RQ26
  MOV.W        RD27, (RQ26, 10)
// d_net.c:228   I_NetCmd ();
  BSR          I_NetCmd, R1
// d_net.c:230   if (doomcom->remotenode == -1)
  MOV.Q        doomcom, RQ26
  MOV.W        (RQ26, 12), RQ18
  BREQ.Q       -1, RQ18, .L00C00431
// d_net.c:233   if (doomcom->datalength != NetbufferSize ())
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ18
  BSR          NetbufferSize, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.Q       RQ9, RQ18, .L00801443
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L00801444
// d_net.c:236   fprintf (debugfile,"bad packet length %i\n",doomcom->datalength);
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ18
  MOV.Q        debugfile, RQ10
  MOV          .L00C01327, RQ11
  ADD          RQ18, 0, RD12
  BSR          fprintf, R1

.L00801444:
// d_net.c:237   return false;
  ADD          R0, 0, RD10
  BSR          .L00C01326, R0

.L00801443:
// d_net.c:240   if (NetbufferChecksum () != (netbuffer->checksum&NCMD_CHECKSUM) )
  BSR          NetbufferChecksum, R1
  ADDU.L       RQ10, R0, RQ9
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  AND          RQ18, 0x0FFFFFFF, RQ23
  BREQ.Q       RQ23, RQ9, .L00801445
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L00801446
// d_net.c:243   fprintf (debugfile,"bad packet checksum\n");
  MOV.Q        debugfile, RQ10
  MOV          .L00C01328, RQ11
  BSR          fprintf, R1

.L00801446:
// d_net.c:244   return false;
  ADD          R0, 0, RD10
  BSR          .L00C01326, R0

.L00801445:
// d_net.c:247   if (debugfile)
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L00801447
// d_net.c:252   if (netbuffer->checksum & NCMD_SETUP)
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  LUI          0x00020000, RD27
  BTST.L       RD27, RQ18, .L00801448
// d_net.c:253   fprintf (debugfile,"setup packet\n");
  MOV.Q        debugfile, RQ10
  MOV          .L00C01329, RQ11
  BSR          fprintf, R1
  BSR          .L00801449, R0

.L00801448:
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ9
  LUI          0x00040000, RD27
  BTST.L       RD27, RQ9, .L0080144A
// d_net.c:257   realretrans = ExpandTics (netbuffer->retransmitfrom);
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ23
  ADD          RQ23, 0, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RD20
  BSR          .L0080144B, R0

.L0080144A:
// d_net.c:259   realretrans = -1;
  ADD          R0, -1, RD20

.L0080144B:
// d_net.c:261   fprintf (debugfile,"get %i = (%i + %i, R %i)[%i] ",
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ18
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 7), RQ9
  MOVU.B       (RQ27, 5), RQ23
  ADD          RQ23, 0, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RQ21
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 12), RQ23
  MOV.Q        debugfile, RQ10
  MOV          .L00C0132A, RQ11
  ADD          RQ23, 0, RD12
  ADD          RQ21, 0, RD13
  AND          RQ9, 255, RD14
  ADD          RD20, 0, RD15
  ADD          RQ18, 0, RD16
  BSR          fprintf, R1
// d_net.c:266   for (i=0 ; i<doomcom->datalength ; i++)
  ADD          R0, 0, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ21
  BRGE.L       RQ21, RD8, .L0080144E

.L0080144C:
// d_net.c:267   fprintf (debugfile,"%i ",((byte *)netbuffer)[i]);
  MOV.Q        netbuffer, RQ22
  MOVU.B       (RQ22, RD8), RQ18
  MOV.Q        debugfile, RQ10
  MOV          .L00C0132B, RQ11
  ADD          RQ18, 0, RD12
  BSR          fprintf, R1
  ADDS.L       RD8, 1, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ9
  BRLT.L       RQ9, RD8, .L0080144C

.L0080144E:
// d_net.c:268   fprintf (debugfile,"\n");
  MOV.Q        debugfile, RQ10
  MOV          .L00C01210, RQ11
  BSR          fprintf, R1

.L00801449:

.L00801447:
// d_net.c:270   }
  ADD          R0, 1, RD10
  BSR          .L00C01326, R0

.L00C00431:
  ADD          R0, 0, RQ10

.L00C01326:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

memset:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.Q        RQ10, (R2, 56)
  MOV.L        RD11, (R2, 52)
  MOV.Q        RQ12, (R2, 40)
// pdpc201/string.c:1027   
  MOV.L        (R2, 52), RD23
  SHAD.L       RD23, 8, RQ20
  OR           RD23, RQ20, RD23
  SHAD.L       RD23, 16, RQ20
  OR           RD23, RQ20, RD23
// pdpc201/string.c:1028   
  MOV.Q        (R2, 56), RQ13
  ADD          RQ13, 0, RQ18
  MOV.Q        (R2, 40), RQ12
  ADD          RQ13, RQ12, RQ22
// pdpc201/string.c:1030   
  BRLE.Q       RQ22, RQ18, .L00800672
// pdpc201/string.c:1031   

memset.debugbreak_L0193:
  BRK          403

.L00800672:
// pdpc201/string.c:1040   
  ADDS.L       RD23, 0, RQ13
  SHLD.Q       RQ13, 32, RQ12
  ADDU.L       RD23, R0, RQ20
  ADDU.L       RQ20, R0, RQ13
  OR           RQ12, RQ13, RQ9
// pdpc201/string.c:1042   
  ADD          RQ22, -64, RQ8
// pdpc201/string.c:1043   
  BSR          .L00800673, R0

.L00800674:
// pdpc201/string.c:1044   
  MOV.Q        RQ9, (RQ18, 0)
// pdpc201/string.c:1046   
  MOV.Q        RQ9, (RQ18, 8)
// pdpc201/string.c:1047   
  MOV.Q        RQ9, (RQ18, 16)
// pdpc201/string.c:1048   
  MOV.Q        RQ9, (RQ18, 24)
// pdpc201/string.c:1049   
  MOV.Q        RQ9, (RQ18, 32)
// pdpc201/string.c:1050   
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/string.c:1051   
  MOV.Q        RQ9, (RQ18, 48)
// pdpc201/string.c:1052   
  MOV.Q        RQ9, (RQ18, 56)
// pdpc201/string.c:1053   
  ADD          RQ18, 64, RQ18

.L00800673:
  BRLE.Q       RQ8, RQ18, .L00800674

.L00800675:
// pdpc201/string.c:1056   
  ADD          RQ22, -16, RQ8
// pdpc201/string.c:1057   
  BSR          .L00800676, R0

.L00800677:
// pdpc201/string.c:1058   
  MOV.Q        RQ9, (RQ18, 0)
// pdpc201/string.c:1060   
  MOV.Q        RQ9, (RQ18, 8)
// pdpc201/string.c:1061   
  ADD          RQ18, 16, RQ18

.L00800676:
  BRLE.Q       RQ8, RQ18, .L00800677

.L00800678:
// pdpc201/string.c:1084   
  ADD          RQ22, -4, RQ8
// pdpc201/string.c:1085   
  BSR          .L00800679, R0

.L0080067A:
// pdpc201/string.c:1086   
  MOV.L        RD23, (RQ18, 0)
  ADD          RQ18, 4, RQ18

.L00800679:
  BRLE.Q       RQ8, RQ18, .L0080067A

.L0080067B:
// pdpc201/string.c:1092   
  BRGE.Q       RQ22, RQ18, .L0080067C
  BRGE.Q       RQ22, RQ18, .L0080067D
// pdpc201/string.c:1095   
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 1, RQ18
  MOV.L        (R2, 52), RD13
  MOVU.B       RD13, (RQ21, 0)

.L0080067D:
  BRGE.Q       RQ22, RQ18, .L0080067E
// pdpc201/string.c:1097   
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 1, RQ18
  MOV.L        (R2, 52), RD13
  MOVU.B       RD13, (RQ21, 0)

.L0080067E:
  BRGE.Q       RQ22, RQ18, .L0080067F
// pdpc201/string.c:1099   
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 1, RQ18
  MOV.L        (R2, 52), RD13
  MOVU.B       RD13, (RQ21, 0)

.L0080067F:
  BRGE.Q       RQ22, RQ18, .L00800680
// pdpc201/string.c:1101   
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 1, RQ18
  MOV.L        (R2, 52), RD13
  MOVU.B       RD13, (RQ21, 0)

.L00800680:

.L0080067C:
// pdpc201/string.c:1104   
  MOV.Q        (R2, 56), RQ10

.L00C01336:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

A_Chase:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:705   if (actor->reactiontime)
  MOV.L        (RQ18, 184), RQ9
  BREQ.L       R0, RQ9, .L00801B29
// p_enemy.c:706   actor->reactiontime--;
  MOV.L        (RQ18, 184), RQ9
  ADDS.L       RQ9, -1, RQ22
  MOV.L        RQ22, (RQ18, 184)

.L00801B29:
// p_enemy.c:710   if  (actor->threshold)
  MOV.L        (RQ18, 188), RQ9
  BREQ.L       R0, RQ9, .L00801B2A
  MOV.Q        (RQ18, 176), RQ23
  BREQ.Q       R0, RQ23, .L00801B2C
  MOV.Q        (RQ18, 176), RQ23
  MOV.L        (RQ23, 164), RQ9
  BRLE.L       R0, RQ9, .L00801B2C
  BSR          .L00801B2B, R0

.L00801B2C:
// p_enemy.c:714   {
  MOV.L        RD0, (RQ18, 188)
  BSR          .L00801B2E, R0

.L00801B2B:
// p_enemy.c:718   actor->threshold--;
  MOV.L        (RQ18, 188), RQ22
  ADDS.L       RQ22, -1, RQ9
  MOV.L        RQ9, (RQ18, 188)

.L00801B2E:

.L00801B2A:
// p_enemy.c:722   if (actor->movedir < 8)
  MOV.L        (RQ18, 168), RQ22
  BRGE.L       8, RQ22, .L00801B2F
// p_enemy.c:723   {
  MOVU.L       (RQ18, 56), RQ9
  ADD          R0, 0x00000000E0000000, RD21
  AND          RQ9, RD21, RQ22
  MOVU.L       RQ22, (RQ18, 56)
// p_enemy.c:725   delta = actor->angle - (actor->movedir << 29);
  MOVU.L       (RQ18, 56), RQ9
  MOV.L        (RQ18, 168), RQ22
  SHAD.L       RQ22, 29, RQ8
  SUBS.L       RQ9, RQ8, RD13
  MOV.L        RD13, (R2, 100)
  BRLE.L       R0, RD13, .L00801B30
// p_enemy.c:728   actor->angle -= ANG90/2;
  MOVU.L       (RQ18, 56), RQ9
  LUI          0xFFFFFFFFFFFE0000, R5
  ADDU.L       R5, RQ9, RQ22
  MOVU.L       RQ22, (RQ18, 56)
  BSR          .L00801B31, R0

.L00801B30:
  MOV.L        (R2, 100), RD21
  BRGE.L       R0, RD21, .L00801B32
// p_enemy.c:730   actor->angle += ANG90/2;
  MOVU.L       (RQ18, 56), RQ8
  LUI          0x00020000, R5
  ADDU.L       R5, RQ8, RQ9
  MOVU.L       RQ9, (RQ18, 56)

.L00801B32:

.L00801B31:

.L00801B2F:
// p_enemy.c:733   if (!actor->target
  MOV.Q        (RQ18, 176), RQ23
  BREQ.Q       R0, RQ23, .L00801B34
  MOV.Q        (RQ18, 176), RQ23
  MOV.L        (RQ23, 160), RQ8
  ADD          R0, 4, RD21
  BTST.L       RD21, RQ8, .L00801B34
  BSR          .L00801B33, R0

.L00801B34:
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_LookForPlayers, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00C0133D
// p_enemy.c:740   P_SetMobjState (actor, actor->info->spawnstate);
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 4), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:741   return;
  BSR          .L00C0133D, R0

.L00801B33:
// p_enemy.c:745   if (actor->flags & MF_JUSTATTACKED)
  MOV.L        (RQ18, 160), RQ9
  ADD          R0, 128, RD21
  BTST.L       RD21, RQ9, .L00801B36
// p_enemy.c:746   {
  MOV.L        (RQ18, 160), RQ22
  AND          RQ22, -129, RQ8
  MOV.L        RQ8, (RQ18, 160)
  MOV.L        gameskill, RD21
  ADD          R0, 4, R5
  CMPNE.Q      RD21, R5, RQ9
  MOV.L        fastparm, RD21
  CMPEQ.Q      RD21, R0, RQ22
  BTST.L       RQ22, RQ9, .L00801B37
// p_enemy.c:749   P_NewChaseDir (actor);
  ADD          RQ18, 0, RQ10
  BSR          P_NewChaseDir, R1

.L00801B37:
// p_enemy.c:750   return;
  BSR          .L00C0133D, R0

.L00801B36:
// p_enemy.c:754   if (actor->info->meleestate
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 40), RQ8
  BREQ.L       R0, RQ8, .L00801B38
  ADD          RQ18, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801B38

.L00801B39:
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 24), RQ8
  BREQ.L       R0, RQ8, .L00801B3B
// p_enemy.c:758   S_StartSound (actor, actor->info->attacksound);
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 24), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          S_StartSound, R1

.L00801B3B:
// p_enemy.c:760   P_SetMobjState (actor, actor->info->meleestate);
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 40), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:761   return;
  BSR          .L00C0133D, R0

.L00801B38:
// p_enemy.c:765   if (actor->info->missilestate)
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 44), RQ8
  BREQ.L       R0, RQ8, .L00801B3C
  MOV.L        gameskill, RD21
  ADD          R0, 4, R5
  CMPLT.Q      RD21, R5, RQ9
  MOV.L        fastparm, RD21
  CMPEQ.Q      RD21, R0, RQ22
  BTST.L       RQ22, RQ9, .L00801B3D
  MOV.L        (RQ18, 172), RQ8
  BREQ.L       R0, RQ8, .L00801B3D

.L00801B3E:
// p_enemy.c:769   {
  BSR          .L00801B40, R0

.L00801B3D:
  ADD          RQ18, 0, RQ10
  BSR          P_CheckMissileRange, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00801B41
// p_enemy.c:774   goto nomissile;
  BSR          .L00801B40, R0

.L00801B41:
// p_enemy.c:776   P_SetMobjState (actor, actor->info->missilestate);
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 44), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:777   actor->flags |= MF_JUSTATTACKED;
  MOV.L        (RQ18, 160), RQ9
  OR           RQ9, 128, RQ22
  MOV.L        RQ22, (RQ18, 160)
// p_enemy.c:778   return;
  BSR          .L00C0133D, R0

.L00801B3C:
// p_enemy.c:782   nomissile:

.L00801B40:
// p_enemy.c:784   if (netgame
  MOV.L        netgame, RD21
  BREQ.L       R0, RD21, .L00801B42
  MOV.L        (RQ18, 188), RQ8
  BRNE.L       R0, RQ8, .L00801B42

.L00801B44:
  MOV.Q        (RQ18, 176), RQ23
  ADD          RQ18, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          P_CheckSight, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00801B42

.L00801B43:
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_LookForPlayers, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00C0133D

.L00801B42:
// p_enemy.c:793   actor->movecount--;
  MOV.L        (RQ18, 172), RQ22
  ADDS.L       RQ22, -1, RQ8
  MOV.L        RQ8, (RQ18, 172)
// p_enemy.c:794   if ((actor->movecount<0)
  MOV.L        (RQ18, 172), RQ9
  BRLT.L       R0, RQ9, .L00801B47
  ADD          RQ18, 0, RQ10
  BSR          P_Move, R1
  ADD          RQ10, 0, RQ22
  BREQ.L       R0, RQ22, .L00801B47
  BSR          .L00801B46, R0

.L00801B47:
// p_enemy.c:798   {
  ADD          RQ18, 0, RQ10
  BSR          P_NewChaseDir, R1

.L00801B46:
// p_enemy.c:803   if (actor->info->activesound
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 80), RQ8
  BREQ.L       R0, RQ8, .L00801B49
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BRGE.L       3, RQ9, .L00801B49

.L00801B4A:
// p_enemy.c:805   {
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 80), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          S_StartSound, R1

.L00801B49:

.L00C0133D:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

putc:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADDS.L       RD10, 0, RD9
  MOV.Q        RQ11, (R2, 80)
// pdpc201/stdio.c:3484   
  ADDS.L       RD9, 0, RD10
  MOV.Q        (R2, 80), RQ11
  BSR          fputc, R1

.L00C01343:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

M_CheckParm:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
// m_argv.c:46   for (i = 1;i<myargc;i++)
  ADD          R0, 1, RD18
  MOV.L        myargc, RD23
  BRGE.L       RD23, RD18, .L00801742

.L00801740:
// m_argv.c:49   if ( !strcmp(check, myargv[i]) )
  MOV.Q        myargv, RQ23
  MOV.Q        (RQ23, RD18), RQ8
  MOV.Q        (R2, 88), RQ10
  ADD          RQ8, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00801743
// m_argv.c:50   return i;
  ADD          RD18, 0, RD10
  BSR          .L00C01349, R0

.L00801743:
  ADDS.L       RD18, 1, RD18
  MOV.L        myargc, RD23
  BRLT.L       RD23, RD18, .L00801740

.L00801742:
// m_argv.c:53   return 0;
  ADD          R0, 0, RD10

.L00C01349:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

getSector:
// p_spec.c:235   {
  MOV.Q        sectors, RQ13
  SHAD.L       RD10, 7, RQ17
  ADD          RQ13, RQ17, RQ17
  MOV.Q        (RQ17, 120), RQ16
  MOV.Q        (RQ16, RD11), RQ15
  ADD          RQ15, 36, RQ16
  MOV.W        (RQ16, RD12), RQ14
  MOV.Q        sides, RQ31
  ADD          R0, 24, R5
  MUL.L        RQ14, R5, RQ30
  ADD          RQ31, RQ30, RQ30
  MOV.Q        (RQ30, 16), RQ16
  ADD          RQ16, 0, RQ10

.L00C0134A:
  JSR          R1, 0, R0

W_GetNumForName:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ18
// w_wad.c:1744   if(!name || (*name<' '))
  BREQ.Q       R0, RQ18, .L00802949
  MOV.B        (RQ18, 0), RQ8
  BRLT.L       32, RQ8, .L00802949
  BSR          .L00802948, R0

.L00802949:
// w_wad.c:1745   __debugbreak();

W_GetNumForName.debugbreak_L0199:
  BRK          409

.L00802948:
// w_wad.c:1747   i = W_CheckNumForName (name);
  ADD          RQ18, 0, RQ10
  BSR          W_CheckNumForName, R1
  ADDS.L       RQ10, 0, RD9
// w_wad.c:1750   if(i < 0)
  BRGE.L       R0, RD9, .L0080294B
// w_wad.c:1753   printf("W_GetNumForName: %s not found!\n", name);
  MOV          .L00C01357, RQ10
  ADD          RQ18, 0, RQ11
  BSR          printf, R1
// w_wad.c:1758   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C01355, R0

.L0080294B:
// w_wad.c:1761   return i;
  ADDS.L       RD9, 0, RD10

.L00C01355:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

W_LumpHandle:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD18
// w_wad.c:1798   {
  BRGE.L       R0, RD18, .L0080294F
// w_wad.c:1800   __debugbreak();

W_LumpHandle.debugbreak_L019F:
  BRK          415

.L0080294F:
// w_wad.c:1802   if (lump >= numlumps)
  MOV.L        numlumps, RD13
  BRLT.L       RD13, RD18, .L00802950
// w_wad.c:1803   I_Error ("W_LumpLength: %i >= numlumps",lump);
  MOV          .L00C01364, RQ10
  ADD          RD18, 0, RD11
  BSR          I_Error, R1

.L00802950:
// w_wad.c:1805   return lumpinfo[lump].handle;
  MOV.Q        lumpinfo, RQ13
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 16), RQ9
  ADDS.L       RQ9, 0, RD10

.L00C01362:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

strcpy:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -280, R2
  MOV.Q        RQ10, (R2, 40)
  MOV.Q        RQ11, (R2, 32)
// pdpc201/string.c:134   
  MOV.Q        (R2, 40), RQ18
// pdpc201/string.c:135   
  MOV.Q        (R2, 32), RQ9
// pdpc201/string.c:137   
  MOV.Q        (RQ9, 0), RQ8
// pdpc201/string.c:138   
  ADD          R0, 0x7F7F7F7F, RQ13
  LDSH32       RQ13, 0x7F7F7F7F, RQ13
  ADD          RQ8, RQ13, RQ22
  OR           RQ8, RQ22, RQ21
  ADD          R0, 0xFFFFFFFF80808080, RQ12
  LDSH32       RQ12, 0x0000000080808080, RQ12
  AND          RQ21, RQ12, RQ20
// pdpc201/string.c:139   
  BSR          .L00800605, R0

.L00800606:
// pdpc201/string.c:140   
  MOV.Q        RQ8, (RQ18, 0)
// pdpc201/string.c:142   
  ADD          RQ9, 8, RQ9
  ADD          RQ18, 8, RQ18
// pdpc201/string.c:143   
  MOV.Q        (RQ9, 0), RQ8
// pdpc201/string.c:144   
  ADD          R0, 0x7F7F7F7F, RQ13
  LDSH32       RQ13, 0x7F7F7F7F, RQ13
  ADD          RQ8, RQ13, RQ22
  OR           RQ8, RQ22, RQ21
  ADD          R0, 0xFFFFFFFF80808080, RQ12
  LDSH32       RQ12, 0x0000000080808080, RQ12
  AND          RQ21, RQ12, RQ20

.L00800605:
  ADD          R0, 0xFFFFFFFF80808080, RQ13
  LDSH32       RQ13, 0x0000000080808080, RQ13
  BREQ.Q       RQ13, RQ20, .L00800606

.L00800607:
// pdpc201/string.c:147   
  ADDU.L       RQ20, R0, RQ13
  ADDU.L       RQ13, R0, RQ22
  ADD          R0, 0x0000000080808080, RQ12
  BRNE.Q       RQ12, RQ22, .L00800608
// pdpc201/string.c:148   
  ADDU.L       RQ8, R0, RQ13
  MOVU.L       RQ13, (RQ18, 0)
// pdpc201/string.c:150   
  ADD          RQ9, 4, RQ9
  ADD          RQ18, 4, RQ18

.L00800608:
// pdpc201/string.c:153   
  MOV.B        (RQ9, 0), RD23
// pdpc201/string.c:154   
  BSR          .L00800609, R0

.L0080060A:
// pdpc201/string.c:155   
  ADD          RQ9, 1, RQ9
  ADD          RQ18, 0, RQ13
  ADD          RQ18, 1, RQ18
  MOV.B        RD23, (RQ13, 0)
  MOV.B        (RQ9, 0), RD23

.L00800609:
  BRNE.L       R0, RD23, .L0080060A

.L0080060B:
  ADD          RQ18, 0, RQ13
  ADD          RQ18, 1, RQ18
  MOV.B        RD0, (RQ13, 0)
// pdpc201/string.c:158   
  MOV.Q        (R2, 40), RQ10

.L00C0136A:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

tk_getch:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
// tk_core/tk_puts.c:713   
  BSR          tk_getch_v, R1

.L00C01370:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

P_AcsRun_LpSec:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RD11, 0, RD18
  ADDS.L       RD12, 0, RD9
  ADDS.L       RD13, 0, RD8
  ADD          RD14, 0, RD23
  ADD          RD15, 0, RD22
  ADD          RD16, 0, RD21
// p_acspec.c:815   P_AcsDoSpecialCmd(sp, a1, a2, a3, a4, a5);
  ADD          RD18, 0, RD10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD23, 0, RD13
  ADD          RD22, 0, RD14
  ADD          RD21, 0, RD15
  BSR          P_AcsDoSpecialCmd, R1

.L00C01376:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_CheckThinkerIsMObjP:
// p_telept.c:46   if (thinker->function.acp1 != (actionf_p1)P_MobjThinker)
  ADD          RQ10, 16, RQ13
  MOV.Q        (RQ13, 0), RQ12
  MOV          P_MobjThinker, RQ11
  ADD          RQ11, 0, RQ17
  BREQ.Q       RQ17, RQ12, .L008022E4
// p_telept.c:47   {
  ADD          RQ10, 16, RQ13
  MOV.Q        (RQ13, 0), RQ12
  ADD          RQ12, 0, RQ11
// p_telept.c:49   lv1=(long)((actionf_p1)P_MobjThinker);
  MOV          P_MobjThinker, RQ16
  ADD          RQ16, 0, RQ17
  ADD          RQ17, 0, RQ15
// p_telept.c:50   lv0&=0x0000FFFFFFFFFFFEULL;
  ADD          R0, 0x0000FFFF, RQ14
  LDSH32       RQ14, 0x00000000FFFFFFFE, RQ14
  AND          RQ11, RQ14, RQ11
// p_telept.c:51   lv1&=0x0000FFFFFFFFFFFEULL;
  AND          RQ15, RQ14, RQ15
  BRNE.Q       RQ15, RQ11, .L008022E5
// p_telept.c:53   {

EV_CheckThinkerIsMObjP.debugbreak_L01A5:
  BRK          421
// p_telept.c:55   return(1);
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L008022E5:
// p_telept.c:58   return(0);
  ADD          R0, 0, RD10
  JSR          R1, 0, R0

.L008022E4:
// p_telept.c:59   }
  ADD          R0, 1, RD10

.L00C01377:
  JSR          R1, 0, R0

AM_drawMline:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.L        RD11, (R2, 84)
// am_map.c:1076   if (AM_clipMline(ml, &fl))
  MOV          AM_drawMline/fl!57, RQ18
  MOV.Q        (R2, 88), RQ10
  ADD          RQ18, 0, RQ11
  BSR          AM_clipMline, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801843
// am_map.c:1077   AM_drawFline(&fl, color); // draws it on frame buffer using fb coords
  MOV          AM_drawMline/fl!57, RQ18
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 84), RD11
  BSR          AM_drawFline, R1

.L00801843:

.L00C01383:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

EV_FindMObjForTid2:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ22
  MOV.L        RD11, (R2, 100)
// p_telept.c:89   thinker = *rptr;
  MOV.Q        (RQ22, 0), RQ18
// p_telept.c:90   if(!thinker)
  BRNE.Q       R0, RQ18, .L008022EA
// p_telept.c:91   thinker = thinkercap.next;
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 8), RQ18

.L008022EA:
// p_telept.c:92   for ( ;
  MOV          thinkercap, RQ8
  BREQ.Q       RQ8, RQ18, .L008022ED

.L008022EB:
// p_telept.c:97   if (!EV_CheckThinkerIsMObjP(thinker))
  ADD          RQ18, 0, RQ10
  BSR          EV_CheckThinkerIsMObjP, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008022EC
// p_telept.c:100   m = (mobj_t *)thinker;
  ADD          RQ18, 0, RQ23
// p_telept.c:101   if (m->spawnpoint.tid == tid)
  ADD          RQ23, 204, RQ13
  MOV.W        (RQ13, 0), RQ9
  MOV.L        (R2, 100), RD12
  BRNE.Q       RD12, RQ9, .L008022EE
// p_telept.c:102   {
  MOV.Q        (RQ18, 8), RQ8
  MOV.Q        RQ8, (RQ22, 0)
// p_telept.c:104   return(m);
  ADD          RQ23, 0, RQ10
  BSR          .L00C01389, R0

.L008022EE:

.L008022EC:
  MOV.Q        (RQ18, 8), RQ18
  MOV          thinkercap, RQ8
  BRNE.Q       RQ8, RQ18, .L008022EB

.L008022ED:
// p_telept.c:106   }
  ADD          RQ0, 0, RQ10

.L00C01389:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

M_Random:
// m_random.c:66   {
  MOV.L        rndindex, RD13
  ADDS.L       RD13, 1, RQ12
  AND          RQ12, 255, RD13
// m_random.c:69   return(rndtable[rndindex]&255);
  MOV          rndtable, RQ11
  MOVU.B       (RQ11, RD13), RQ12
  AND          RQ12, 255, RQ10
  MOV.L        RD13, rndindex

.L00C0138A:
  JSR          R1, 0, R0

WI_fragSum:
// wi_stuff.c:849   int		frags = 0;
  ADD          RD0, 0, RD13
// wi_stuff.c:851   for (i=0 ; i<MAXPLAYERS ; i++)
  ADDS.L       RD0, 0, RD12

.L008029E9:
// wi_stuff.c:852   {
  MOV          playeringame, RQ11
  MOV.L        (RQ11, RD12), RQ17
  BREQ.L       R0, RQ17, .L008029EC
  BREQ.Q       RD10, RD12, .L008029EC

.L008029ED:
// wi_stuff.c:855   {
  MOV.Q        TU7A00CB85/plrs, RQ11
  ADD          R0, 40, R5
  MUL.L        RD10, R5, RQ16
  ADD          RQ11, RQ16, RQ16
  ADD          RQ16, 20, RQ15
  MOV.L        (RQ15, RD12), RQ17
  ADDS.L       RD13, RQ17, RD13

.L008029EC:
  ADDS.L       RD12, 1, RD12
  BRLT.L       4, RD12, .L008029E9

.L008029EB:
// wi_stuff.c:862   frags -= plrs[playernum].frags[playernum];
  MOV.Q        TU7A00CB85/plrs, RQ11
  ADD          R0, 40, R5
  MUL.L        RD10, R5, RQ16
  ADD          RQ11, RQ16, RQ16
  ADD          RQ16, 20, RQ15
  MOV.L        (RQ15, RD10), RQ17
  SUBS.L       RD13, RQ17, RD13
// wi_stuff.c:866   return frags;
  ADDS.L       RD13, 0, RD10

.L00C0138B:
  JSR          R1, 0, R0
  .balign 4

P_AcsRun_SetMapVar:
// p_acspec.c:782   {
  MOV          p_acsvm_mapvar, RQ13
  MOV.L        RD12, (RQ13, RD11)
// p_acspec.c:784   return(0);
  ADD          R0, 0, RD10

.L00C0138C:
  JSR          R1, 0, R0

r_int_min:
// r_draw.h:44   {
  BRGT.L       RD11, RD10, .L00802D24
  ADDS.L       RD10, 0, RQ13
  BSR          .L00802D25, R0

.L00802D24:
  ADDS.L       RD11, 0, RQ13

.L00802D25:
  ADDS.L       RQ13, 0, RD10

.L00C0138D:
  JSR          R1, 0, R0

P_AcsRun_SetLocalVar:
// p_acspec.c:776   {
  ADD          RQ10, 40, RQ13
  MOV.L        RD12, (RQ13, RD11)
// p_acspec.c:778   return(0);
  ADD          R0, 0, RD10

.L00C0138E:
  JSR          R1, 0, R0

R_FlatNumForName:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -392, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// r_data.c:2048   char	namet[9];
// r_data.c:2050   memcpy (namet, name, 8);
  ADD          R2, 96, RQ8
  MOV.Q        (R2, 88), RQ23
  MOV.Q        (RQ23, 0), RQ10
  MOV.Q        RQ10, (RQ8, 0)
// r_data.c:2051   namet[8] = 0;
  MOV.B        RD0, (RQ8, 8)
// r_data.c:2054   if(!strcmp(namet, "F_SKY"))
  ADD          RQ8, 0, RQ10
  MOV          .L00C01395, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00802576
// r_data.c:2055   return(skyflatnum);
  MOV.L        skyflatnum, RD10
  BSR          .L00C01394, R0

.L00802576:
// r_data.c:2058   i = W_CheckNumForName (namet);
  ADD          R2, 96, RQ10
  BSR          W_CheckNumForName, R1
  ADDS.L       RQ10, 0, RD9
// r_data.c:2060   if (i == -1)
  BRNE.Q       -1, RD9, .L00802577
// r_data.c:2065   return(skyflatnum);	//BGB: debug
  MOV.L        skyflatnum, RD10
  BSR          .L00C01394, R0

.L00802577:
// r_data.c:2066   }
  MOV.L        firstflat, RD8
  SUBS.L       RD9, RD8, RQ18
  ADD          RQ18, 0, RD10

.L00C01394:
  ADD          R2, 392, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

tk_syscall:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 136)
  MOV.L        RD11, (R2, 132)
  ADD          RQ12, 0, RQ9
  ADD          RQ13, 0, RQ8
// tk_core/tk_mmpage.c:592   
  BSR          _arch_gettbr, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ22
// tk_core/tk_mmpage.c:593   
  BRNE.Q       R0, RQ22, .L00800989
// tk_core/tk_mmpage.c:594   

tk_syscall.debugbreak_L01B0:
  BRK          432

.L00800989:
// tk_core/tk_mmpage.c:603   
  ADD          RQ9, 0, RQ10
  BSR          tk_ptrstriptag, R1
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmpage.c:604   
  ADD          RQ8, 0, RQ10
  BSR          tk_ptrstriptag, R1
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmpage.c:608   
  MOV.Q        (RQ22, 64), RQ18
  ADD          RQ18, 0, RQ27
// tk_core/tk_mmpage.c:609   
  ADD          RQ27, 512, RQ26
  MOV.Q        RQ27, (R2, 104)
  MOV.Q        RQ26, (R2, 96)
// tk_core/tk_mmpage.c:611   
  ADD          R0, 0, RQ23
// tk_core/tk_mmpage.c:612   
  ADD          R0, 0, RQ21
// tk_core/tk_mmpage.c:613   
  BREQ.Q       R0, RQ9, .L0080098A
// tk_core/tk_mmpage.c:614   
  MOV.Q        (R2, 96), RQ23
// tk_core/tk_mmpage.c:617   
  MOV.Q        (RQ9, 0), RQ10
  MOV.Q        RQ10, (RQ23, 0)

.L0080098A:
// tk_core/tk_mmpage.c:620   
  BREQ.Q       R0, RQ8, .L0080098B
// tk_core/tk_mmpage.c:621   
  MOV.Q        (R2, 96), RQ27
  ADD          RQ27, 32, RQ21
// tk_core/tk_mmpage.c:623   
  ADD          RQ21, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          __memcpy64_256, R1

.L0080098B:
// tk_core/tk_mmpage.c:630   
  MOV.Q        (RQ22, 16), RQ18
  ADD          RQ18, 0, RQ20
// tk_core/tk_mmpage.c:631   
  BRNE.Q       R0, RQ20, .L0080098C
// tk_core/tk_mmpage.c:646   

tk_syscall.debugbreak_L01B1:
  BRK          433

.L0080098C:
// tk_core/tk_mmpage.c:653   
  MOV.Q        (R2, 136), RQ10
  MOV.L        (R2, 132), RD11
  ADD          RQ23, 0, RQ12
  ADD          RQ21, 0, RQ13
  JSR          RQ20, 0, R1
  MOV.L        RD10, (R2, 92)
// tk_core/tk_mmpage.c:654   
  BREQ.Q       R0, RQ9, .L0080098D
// tk_core/tk_mmpage.c:657   
  MOV.Q        (RQ23, 0), RQ10
  MOV.Q        RQ10, (RQ9, 0)

.L0080098D:
// tk_core/tk_mmpage.c:664   
  MOV.L        (R2, 92), RD10

.L00C013A5:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_FindLowestCeilingSurrounding:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
// p_spec.c:398   fixed_t		height = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD22
// p_spec.c:400   for (i=0 ;i < sec->linecount ; i++)
  ADD          R0, 0, RD9
  MOV.L        (RQ23, 112), RQ8
  BRGE.L       RQ8, RD9, .L0080209E

.L0080209C:
// p_spec.c:401   {
  MOV.Q        (RQ23, 120), RQ21
  MOV.Q        (RQ21, RD9), RQ20
  MOV.Q        RQ20, (R2, 80)
// p_spec.c:403   other = getNextSector(check,sec);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:405   if (!other)
  BREQ.Q       R0, RQ18, .L0080209D
// p_spec.c:408   if (other->ceilingheight < height)
  MOV.L        (RQ18, 4), RQ8
  BRGE.L       RD22, RQ8, .L0080209F
// p_spec.c:409   height = other->ceilingheight;
  MOV.L        (RQ18, 4), RD22

.L0080209F:

.L0080209D:
  ADDS.L       RD9, 1, RD9
  MOV.L        (RQ23, 112), RQ8
  BRLT.L       RQ8, RD9, .L0080209C

.L0080209E:
// p_spec.c:410   }
  ADD          RD22, 0, RD10

.L00C013AD:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

tolower:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
// pdpc201/ctype.c:533   
  ADDS.L       RD9, 0, RD10
  BSR          _tolower_gen, R1

.L00C013B3:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

TKMM_LVA_GetTagIndexForName:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 72)
// tk_core/lva_tagobj.c:108   
  MOV.Q        (R2, 72), RQ10
  BSR          TKMM_LVA_GetTagInfoForName, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagobj.c:109   
  MOV.W        (RQ18, 8), RQ9
  SHAD.Q       RQ9, 48, RD10
  SHAR.Q       RD10, 48, RD10

.L00C013B9:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_MobjThinker:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
// p_mobj.c:445   if (mobj->momx
  MOV.L        (RQ9, 112), RQ18
  BRNE.L       R0, RQ18, .L00802296
  MOV.L        (RQ9, 116), RQ18
  BRNE.L       R0, RQ18, .L00802296

.L00802297:
  MOV.L        (RQ9, 160), RQ18
  LUI          4096, RD22
  BTSTN.L      RD22, RQ18, .L00802296
  BSR          .L00802295, R0

.L00802296:
// p_mobj.c:448   {
  ADD          RQ9, 0, RQ10
  BSR          P_XYMovement, R1
  ADD          RQ9, 0, RQ22
  ADD          RQ22, 16, RQ13
  MOV.Q        (RQ13, 0), RQ23
  ADD          R0, -1, RQ12
  BREQ.Q       RQ12, RQ23, .L00C013BF

.L00802295:
// p_mobj.c:457   if ( (mobj->z != mobj->floorz)
  MOV.L        (RQ9, 32), RQ18
  MOV.L        (RQ9, 96), RQ8
  BRNE.Q       RQ8, RQ18, .L0080229A
  MOV.L        (RQ9, 120), RQ18
  BRNE.L       R0, RQ18, .L0080229A
  BSR          .L00802299, R0

.L0080229A:
// p_mobj.c:459   {
  ADD          RQ9, 0, RQ10
  BSR          P_ZMovement, R1
  ADD          RQ9, 0, RQ22
  ADD          RQ22, 16, RQ13
  MOV.Q        (RQ13, 0), RQ23
  ADD          R0, -1, RQ12
  BREQ.Q       RQ12, RQ23, .L00C013BF

.L00802299:
// p_mobj.c:471   if (mobj->tics != -1)
  MOV.L        (RQ9, 144), RQ8
  BREQ.Q       -1, RQ8, .L0080229C
// p_mobj.c:472   {
  MOV.L        (RQ9, 144), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV.L        RQ8, (RQ9, 144)
  MOV.L        (RQ9, 144), RQ18
  BRNE.L       R0, RQ18, .L0080229D
  MOV.Q        (RQ9, 152), RQ23
  MOV.L        (RQ23, 24), RQ8
  ADD          RQ9, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_SetMobjState, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C013BF

.L0080229D:
  BSR          .L0080229E, R0

.L0080229C:
  MOV.L        (RQ9, 160), RQ8
  LUI          1024, RD22
  BTST.L       RD22, RQ8, .L00C013BF
  MOV.L        respawnmonsters, RD22
  BREQ.L       R0, RD22, .L00C013BF
// p_mobj.c:489   mobj->movecount++;
  MOV.L        (RQ9, 172), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ9, 172)
  MOV.L        (RQ9, 172), RQ18
  ADD          R0, 420, RD22
  BRLT.L       RD22, RQ18, .L00C013BF
  MOV.L        leveltime, RD22
  ADD          R0, 31, RD13
  BTSTN.L      RD13, RD22, .L00C013BF
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ8
  ADD          R0, 4, RD22
  BRGT.L       RD22, RQ8, .L00C013BF
// p_mobj.c:500   P_NightmareRespawn (mobj);
  ADD          RQ9, 0, RQ10
  BSR          P_NightmareRespawn, R1

.L0080229E:

.L00C013BF:
  ADD          R2, 384, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_AcsRun_SetWorldVar:
// p_acspec.c:788   {
  MOV          p_acsvm_wrlvar, RQ13
  MOV.L        RD12, (RQ13, RD11)
// p_acspec.c:790   return(0);
  ADD          R0, 0, RD10

.L00C013C0:
  JSR          R1, 0, R0

SMus_SetFmRegisterData:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  MOV.L        RD12, (R2, 100)
// i_bgb_mus_btsh.c:590   {
// i_bgb_mus_btsh.c:598   mcmd=&t_mcmd;
  ADD          R2, 80, RQ9
  ADD          RQ9, 0, RQ18
// i_bgb_mus_btsh.c:599   mcmd->op=16;
  ADD          R0, 16, RD8
  MOVU.B       RD8, (RQ18, 0)
// i_bgb_mus_btsh.c:601   mcmd->d0=prg;
  MOV.L        (R2, 108), RD23
  MOVU.B       RD23, (RQ18, 2)
// i_bgb_mus_btsh.c:602   mcmd->d1=idx;
  MOV.L        (R2, 104), RD22
  MOVU.B       RD22, (RQ18, 3)
// i_bgb_mus_btsh.c:603   mcmd->u0=val;
  MOVU.L       (R2, 100), RD8
  MOVU.L       RD8, (RQ18, 4)
// i_bgb_mus_btsh.c:606   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ18, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:607   return(0);
  ADD          R0, 0, RD10

.L00C013C6:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_ChangeSwitchTexture:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ23
  ADD          RD11, 0, RD21
// p_switch.c:223   if (!useAgain)
  BRNE.L       R0, RD21, .L00802197
// p_switch.c:224   line->special = 0;
  MOV.W        RD0, (RQ23, 26)

.L00802197:
// p_switch.c:226   texTop = sides[line->sidenum[0]].toptexture;
  ADD          RQ23, 36, RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        (RQ12, 8), RD20
// p_switch.c:227   texMid = sides[line->sidenum[0]].midtexture;
  MOV.W        (RQ27, 0), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        (RQ12, 12), RD11
  MOV.L        RD11, (R2, 112)
// p_switch.c:228   texBot = sides[line->sidenum[0]].bottomtexture;
  MOV.W        (RQ27, 0), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        (RQ12, 10), RD13
  MOV.L        RD13, (R2, 108)
// p_switch.c:230   sound = sfx_swtchn;
  ADD          R0, 23, RD22
// p_switch.c:233   if (line->special == 11)				
  MOV.W        (RQ23, 26), RQ18
  MOV.Q        RQ27, (R2, 96)
  BRNE.Q       11, RQ18, .L00802198
// p_switch.c:234   sound = sfx_swtchx;
  ADD          R0, 24, RD22

.L00802198:
// p_switch.c:236   for (i = 0;i < numswitches*2;i++)
  ADD          R0, 0, RD9
  MOV.L        numswitches, RD27
  SHAD.L       RD27, 1, RQ18
  BRGE.L       RQ18, RD9, .L0080219B

.L00802199:
// p_switch.c:237   {
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BRNE.Q       RD20, RQ18, .L0080219C
// p_switch.c:239   {
  MOV          buttonlist, RQ27
  MOV.Q        (RQ27, 24), RQ10
  ADD          RD22, 0, RD11
  BSR          S_StartSound, R1
// p_switch.c:241   sides[line->sidenum[0]].toptexture = switchlist[i^1];
  XOR          RD9, 1, RQ18
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RQ18), RQ8
  ADD          RQ23, 36, RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        RQ8, (RQ12, 8)
  MOV.Q        RQ27, (R2, 96)
  BREQ.L       R0, RD21, .L0080219D
// p_switch.c:244   P_StartButton(line,top,switchlist[i],BUTTONTIME);
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ8
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 35, RD13
  BSR          P_StartButton, R1

.L0080219D:
// p_switch.c:246   return;
  BSR          .L00C013CC, R0
  BSR          .L0080219E, R0

.L0080219C:
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ18
  MOV.L        (R2, 112), RD27
  BRNE.Q       RD27, RQ18, .L0080219F
// p_switch.c:251   {
  MOV          buttonlist, RQ27
  MOV.Q        (RQ27, 24), RQ10
  ADD          RD22, 0, RD11
  BSR          S_StartSound, R1
// p_switch.c:253   sides[line->sidenum[0]].midtexture = switchlist[i^1];
  XOR          RD9, 1, RQ18
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RQ18), RQ8
  ADD          RQ23, 36, RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        RQ8, (RQ12, 12)
  MOV.Q        RQ27, (R2, 96)
  BREQ.L       R0, RD21, .L008021A0
// p_switch.c:256   P_StartButton(line, middle,switchlist[i],BUTTONTIME);
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ8
  ADD          RQ23, 0, RQ10
  ADD          R0, 1, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 35, RD13
  BSR          P_StartButton, R1

.L008021A0:
// p_switch.c:258   return;
  BSR          .L00C013CC, R0
  BSR          .L008021A1, R0

.L0080219F:
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ18
  MOV.L        (R2, 108), RD27
  BRNE.Q       RD27, RQ18, .L008021A2
// p_switch.c:263   {
  MOV          buttonlist, RQ27
  MOV.Q        (RQ27, 24), RQ10
  ADD          RD22, 0, RD11
  BSR          S_StartSound, R1
// p_switch.c:265   sides[line->sidenum[0]].bottomtexture = switchlist[i^1];
  XOR          RD9, 1, RQ18
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RQ18), RQ8
  ADD          RQ23, 36, RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        RQ8, (RQ12, 10)
  MOV.Q        RQ27, (R2, 96)
  BREQ.L       R0, RD21, .L008021A3
// p_switch.c:268   P_StartButton(line, bottom,switchlist[i],BUTTONTIME);
  MOV          switchlist, RQ27
  MOV.L        (RQ27, RD9), RQ8
  ADD          RQ23, 0, RQ10
  ADD          R0, 2, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 35, RD13
  BSR          P_StartButton, R1

.L008021A3:
// p_switch.c:270   return;
  BSR          .L00C013CC, R0

.L008021A2:

.L008021A1:

.L0080219E:
  ADDS.L       RD9, 1, RD9
  MOV.L        numswitches, RD27
  SHAD.L       RD27, 1, RQ18
  BRLT.L       RQ18, RD9, .L00802199

.L0080219B:

.L00C013CC:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_DivlineSide:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -280, R2
  ADD          RD10, 0, RD23
  ADD          RD11, 0, RD20
  ADD          RQ12, 0, RQ8
// p_sight.c:66   if (!node->dx)
  MOV.L        (RQ8, 8), RQ18
  BRNE.L       R0, RQ18, .L0080205F
  MOV.L        (RQ8, 0), RQ18
  BRNE.Q       RQ18, RD23, .L00802060
// p_sight.c:69   return 2;
  ADD          R0, 2, RD10
  BSR          .L00C013D2, R0

.L00802060:
  MOV.L        (RQ8, 0), RQ18
  BRGT.L       RQ18, RD23, .L00802061
// p_sight.c:72   return node->dy > 0;
  MOV.L        (RQ8, 12), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C013D2, R0

.L00802061:
// p_sight.c:74   return node->dy < 0;
  MOV.L        (RQ8, 12), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C013D2, R0

.L0080205F:
// p_sight.c:77   if (!node->dy)
  MOV.L        (RQ8, 12), RQ18
  BRNE.L       R0, RQ18, .L00802062
  MOV.L        (RQ8, 4), RQ9
  BRNE.Q       RQ9, RD23, .L00802063
// p_sight.c:80   return 2;
  ADD          R0, 2, RD10
  BSR          .L00C013D2, R0

.L00802063:
  MOV.L        (RQ8, 4), RQ18
  BRGT.L       RQ18, RD20, .L00802064
// p_sight.c:83   return node->dx < 0;
  MOV.L        (RQ8, 8), RQ9
  CMPLT.Q      RQ9, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C013D2, R0

.L00802064:
// p_sight.c:85   return node->dx > 0;
  MOV.L        (RQ8, 8), RQ9
  CMPGT.Q      RQ9, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C013D2, R0

.L00802062:
// p_sight.c:88   dx = (x - node->x);
  MOV.L        (RQ8, 0), RQ9
  SUBS.L       RD23, RQ9, RD13
// p_sight.c:89   dy = (y - node->y);
  MOV.L        (RQ8, 4), RQ18
  SUBS.L       RD20, RQ18, RD12
// p_sight.c:91   left =  (node->dy>>FRACBITS) * (dx>>FRACBITS);
  MOV.L        (RQ8, 12), RQ9
  SHAR         RQ9, 16, RQ18
  SHAR         RD13, 16, RQ9
  MOV.L        RD13, (R2, 28)
  MULS.L       RQ18, RQ9, RD22
// p_sight.c:92   right = (dy>>FRACBITS) * (node->dx>>FRACBITS);
  SHAR         RD12, 16, RQ18
  MOV.L        RD12, (R2, 24)
  MOV.L        (RQ8, 8), RQ9
  SHAR         RQ9, 16, RQ11
  MULS.L       RQ18, RQ11, RD21
// p_sight.c:94   if (right < left)
  BRLT.L       RD22, RD21, .L00C00487
// p_sight.c:97   if (left == right)
  BRNE.Q       RD21, RD22, .L00802065
// p_sight.c:98   return 2;
  ADD          R0, 2, RD10
  BSR          .L00C013D2, R0

.L00802065:
// p_sight.c:100   return 1;		// back side
  ADD          R0, 1, RD10
  BSR          .L00C013D2, R0

.L00C00487:
  ADD          R0, 0, RQ10

.L00C013D2:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

W_CheckNumForName:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 72)
// w_wad.c:1727   {
  MOV.L        numlumps, RD10
  MOV.Q        (R2, 72), RQ11
  BSR          W_CheckNumForNameBase, R1

.L00C013D8:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

A_Fire:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ23
// p_enemy.c:1295   dest = actor->tracer;
  MOV.Q        (RQ23, 224), RQ8
// p_enemy.c:1296   if (!dest)
  BREQ.Q       R0, RQ8, .L00C013DE
// p_enemy.c:1300   if (!P_CheckSight (actor->target, dest) )
  MOV.Q        (RQ23, 176), RQ20
  ADD          RQ20, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C013DE
// p_enemy.c:1303   an = dest->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ8, 56), RQ18
  SHLR         RQ18, 19, RD21
// p_enemy.c:1305   P_UnsetThingPosition (actor);
  ADD          RQ23, 0, RQ10
  BSR          P_UnsetThingPosition, R1
// p_enemy.c:1306   actor->x = dest->x + FixedMul (24*FRACUNIT, finecosine[an]);
  MOV.L        (RQ8, 24), RQ18
  MOV.Q        finecosine, RQ20
  MOV.L        (RQ20, RD21), RQ9
  LUI          384, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ22
  ADDS.L       RQ18, RQ22, RQ9
  MOV.L        RQ9, (RQ23, 24)
// p_enemy.c:1307   actor->y = dest->y + FixedMul (24*FRACUNIT, finesine[an]);
  MOV.L        (RQ8, 28), RQ22
  MOV          finesine, RQ20
  MOV.L        (RQ20, RD21), RQ18
  LUI          384, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ22, RQ9, RQ18
  MOV.L        RQ18, (RQ23, 28)
// p_enemy.c:1308   actor->z = dest->z;
  MOV.L        (RQ8, 32), RQ9
  MOV.L        RQ9, (RQ23, 32)
// p_enemy.c:1309   P_SetThingPosition (actor);
  ADD          RQ23, 0, RQ10
  BSR          P_SetThingPosition, R1

.L00C013DE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_FindLowestFloorSurrounding:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
// p_spec.c:286   fixed_t		floor = sec->floorheight;
  MOV.L        (RQ23, 0), RQ18
  ADD          RQ18, 0, RD22
// p_spec.c:288   for (i=0 ;i < sec->linecount ; i++)
  ADD          R0, 0, RD8
  MOV.L        (RQ23, 112), RQ18
  BRGE.L       RQ18, RD8, .L0080208C

.L0080208A:
// p_spec.c:289   {
  MOV.Q        (RQ23, 120), RQ21
  MOV.Q        (RQ21, RD8), RQ20
  MOV.Q        RQ20, (R2, 80)
// p_spec.c:291   other = getNextSector(check,sec);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ9
// p_spec.c:293   if (!other)
  BREQ.Q       R0, RQ9, .L0080208B
// p_spec.c:296   if (other->floorheight < floor)
  MOV.L        (RQ9, 0), RQ18
  BRGE.L       RD22, RQ18, .L0080208D
// p_spec.c:297   floor = other->floorheight;
  MOV.L        (RQ9, 0), RD22

.L0080208D:

.L0080208B:
  ADDS.L       RD8, 1, RD8
  MOV.L        (RQ23, 112), RQ18
  BRLT.L       RQ18, RD8, .L0080208A

.L0080208C:
// p_spec.c:298   }
  ADD          RD22, 0, RD10

.L00C013E4:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

r_int_max:
// r_draw.h:49   {
  BRLE.L       RD11, RD10, .L00802D26
  ADDS.L       RD10, 0, RQ13
  BSR          .L00802D27, R0

.L00802D26:
  ADDS.L       RD11, 0, RQ13

.L00802D27:
  ADDS.L       RQ13, 0, RD10

.L00C013E5:
  JSR          R1, 0, R0

isalpha:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// pdpc201/ctype.c:309   
  BSR          _ctype_init, R1
// pdpc201/ctype.c:311   
  BRGE.L       R0, RD18, .L0080083E
// pdpc201/ctype.c:312   
  ADD          R0, -1, RD18

.L0080083E:
// pdpc201/ctype.c:313   
  BRGT.L       255, RD18, .L0080083F
// pdpc201/ctype.c:314   
  MOV.Q        _ctype_isbuf, RQ13
  MOVU.W       (RQ13, RD18), RQ9
  ADDU.L       RQ9, R0, RQ8
  AND          RQ8, 2, RQ23
  ADDS.L       RQ23, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C013EB, R0

.L0080083F:
// pdpc201/ctype.c:315   
  ADD          R0, 0, RD10

.L00C013EB:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

P_AcsQueryLine:
// p_acspec.c:842   for (i=*ridx ; i<numlines ; i++)
  MOV.L        (RQ10, 0), RD13
  MOV.L        numlines, RD12
  BRGE.L       RD12, RD13, .L00801935

.L00801933:
// p_acspec.c:843   {
  MOV.Q        lines, RQ12
  ADD          R0, 96, R5
  MUL.L        RD13, R5, RQ17
  ADD          RQ12, RQ17, RQ17
// p_acspec.c:845   if(ld->acs_spec!=121)
  MOVU.B       (RQ17, 30), RQ16
  BRNE.Q       121, RQ16, .L00801934
// p_acspec.c:847   if(ld->arg1==lineid)
  MOVU.B       (RQ17, 31), RQ16
  BRNE.Q       RD11, RQ16, .L00801936
// p_acspec.c:848   {
  ADDS.L       RD13, 1, RQ16
  MOV.L        RQ16, (RQ10, 0)
// p_acspec.c:850   return(ld);
  ADD          RQ17, 0, RQ10
  JSR          R1, 0, R0

.L00801936:

.L00801934:
  ADDS.L       RD13, 1, RD13
  MOV.L        numlines, RD12
  BRLT.L       RD12, RD13, .L00801933

.L00801935:
// p_acspec.c:854   return(NULL);
  ADD          RQ0, 0, RQ10

.L00C013EC:
  JSR          R1, 0, R0

W_LumpLength:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD18
// w_wad.c:1786   {
  BRGE.L       R0, RD18, .L0080294D
// w_wad.c:1788   __debugbreak();

W_LumpLength.debugbreak_L01B7:
  BRK          439

.L0080294D:
// w_wad.c:1790   if (lump >= numlumps)
  MOV.L        numlumps, RD13
  BRLT.L       RD13, RD18, .L0080294E
// w_wad.c:1791   I_Error ("W_LumpLength: %i >= numlumps",lump);
  MOV          .L00C01364, RQ10
  ADD          RD18, 0, RD11
  BSR          I_Error, R1

.L0080294E:
// w_wad.c:1793   return lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ13
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 24), RQ9
  ADDS.L       RQ9, 0, RD10

.L00C013F7:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

fopen:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ21
// pdpc201/stdio.c:296   
  MOV.B        (RQ22, 0), RQ18
  ADD          R0, 36, R5
  CMPEQ.Q      RQ18, R5, RQ23
  CMPEQ.Q      RQ21, R0, RQ18
  BTST.L       RQ18, RQ23, .L008002D6
  ADD          RQ22, 0, RQ10
  MOV          .L00C013FF, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L008002D7
// pdpc201/stdio.c:300   
  BSR          __get_stdin, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  BSR          .L00C013FE, R0

.L008002D7:
  ADD          RQ22, 0, RQ10
  MOV          .L00C01400, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008002D8
// pdpc201/stdio.c:302   
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  BSR          .L00C013FE, R0

.L008002D8:
  ADD          RQ22, 0, RQ10
  MOV          .L00C01401, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008002D9
// pdpc201/stdio.c:304   
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  BSR          .L00C013FE, R0

.L008002D9:

.L008002D6:
// pdpc201/stdio.c:307   
  MOV.Q        RQ22, TU61F874B9/fnm
// pdpc201/stdio.c:308   
  MOV.Q        RQ21, TU61F874B9/modus
// pdpc201/stdio.c:309   
  MOV.L        RD0, TU61F874B9/err
// pdpc201/stdio.c:310   
  BSR          findSpareSpot, R1
// pdpc201/stdio.c:311   
  MOV.L        TU61F874B9/err, RD20
  BRNE.L       R0, RD20, .L008002DA
// pdpc201/stdio.c:312   
  ADD          R0, 112, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, TU61F874B9/myfile
// pdpc201/stdio.c:314   
  MOV.Q        TU61F874B9/myfile, RQ20
  MOV.Q        RQ0, (RQ20, 0)
  MOV.Q        RQ0, (RQ20, 8)
  MOV.Q        RQ0, (RQ20, 16)
  MOV.Q        RQ0, (RQ20, 24)
  MOV.Q        RQ0, (RQ20, 32)
  MOV.Q        RQ0, (RQ20, 40)
  MOV.Q        RQ0, (RQ20, 48)
  MOV.Q        RQ0, (RQ20, 56)
  MOV.Q        RQ0, (RQ20, 64)
  MOV.Q        RQ0, (RQ20, 72)
  MOV.Q        RQ0, (RQ20, 80)
  MOV.Q        RQ0, (RQ20, 88)
  MOV.Q        RQ0, (RQ20, 96)
  MOV.Q        RQ0, (RQ20, 104)
// pdpc201/stdio.c:315   
  ADD          R0, 0x01414237, RD20
  MOV.Q        TU61F874B9/myfile, RQ13
  MOV.L        RD20, (RQ13, 4)
// pdpc201/stdio.c:316   
  MOV.L        RD20, (RQ13, 108)
  BRNE.Q       RQ0, RQ13, .L008002DB
// pdpc201/stdio.c:319   
  MOV          .L00C01402, RQ10
  BSR          tk_puts, R1
// pdpc201/stdio.c:321   
  ADD          R0, 1, RD20
  MOV.L        RD20, TU61F874B9/err
  BSR          .L008002DC, R0

.L008002DB:
// pdpc201/stdio.c:324   
  BSR          fopen2, R1
  MOV.L        TU61F874B9/err, RD20
  BREQ.L       R0, RD20, .L008002DD
// pdpc201/stdio.c:327   
  MOV.Q        TU61F874B9/myfile, RQ10
  BSR          free, R1

.L008002DD:

.L008002DC:

.L008002DA:
// pdpc201/stdio.c:331   
  MOV.L        TU61F874B9/err, RD20
  BREQ.L       R0, RD20, .L008002DE
// pdpc201/stdio.c:333   
  MOV.Q        RQ0, TU61F874B9/myfile

.L008002DE:
// pdpc201/stdio.c:335   
  MOV.Q        TU61F874B9/myfile, RQ10

.L00C013FE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_PointOnLineSide:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  ADD          RD10, 0, RD20
  MOV.L        RD11, (R2, 104)
  ADD          RQ12, 0, RQ8
// p_maputl.c:77   if (!line->dx)
  MOV.L        (RQ8, 16), RQ18
  BRNE.L       R0, RQ18, .L00801DBF
  MOV.Q        (RQ8, 0), RQ23
  MOV.L        (RQ23, 0), RQ18
  BRGT.L       RQ18, RD20, .L00801DC0
// p_maputl.c:80   return line->dy > 0;
  MOV.L        (RQ8, 20), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01408, R0

.L00801DC0:
// p_maputl.c:82   return line->dy < 0;
  MOV.L        (RQ8, 20), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01408, R0

.L00801DBF:
// p_maputl.c:83   }
  MOV.L        (RQ8, 20), RQ18
  BRNE.L       R0, RQ18, .L00801DC1
  MOV.Q        (RQ8, 0), RQ23
  MOV.L        (RQ23, 4), RQ9
  MOV.L        (R2, 104), RD27
  BRGT.L       RQ9, RD27, .L00801DC2
// p_maputl.c:87   return line->dx < 0;
  MOV.L        (RQ8, 16), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01408, R0

.L00801DC2:
// p_maputl.c:89   return line->dx > 0;
  MOV.L        (RQ8, 16), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01408, R0

.L00801DC1:
// p_maputl.c:92   dx = (x - line->v1->x);
  MOV.Q        (RQ8, 0), RQ23
  MOV.L        (RQ23, 0), RQ9
  SUBS.L       RD20, RQ9, RD27
  MOV.L        RD27, (R2, 92)
// p_maputl.c:93   dy = (y - line->v1->y);
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (R2, 104), RD25
  SUBS.L       RD25, RQ18, RD26
  MOV.L        RD26, (R2, 88)
// p_maputl.c:95   left = FixedMul ( line->dy>>FRACBITS , dx );
  MOV.L        (RQ8, 20), RQ9
  SHAR         RQ9, 16, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD27, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD21
// p_maputl.c:96   right = FixedMul ( dy , line->dx>>FRACBITS );
  MOV.L        (RQ8, 16), RQ9
  SHAR         RQ9, 16, RQ18
  ADD          RD26, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD22
// p_maputl.c:98   if (right < left)
  BRLT.L       RD21, RD22, .L00C004A0
// p_maputl.c:100   return 1;			// back side
  ADD          R0, 1, RD10
  BSR          .L00C01408, R0

.L00C004A0:
  ADD          R0, 0, RQ10

.L00C01408:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

WI_drawNum:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD23
  MOV.L        RD11, (R2, 104)
  ADDS.L       RD12, 0, RD8
  ADD          RD13, 0, RD18
// wi_stuff.c:642   int		fontwidth = SHORT(num[0]->width);
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, 0), RQ21
  MOV.W        (RQ21, 0), RQ9
  ADD          RQ9, 0, RD20
// wi_stuff.c:646   if (digits < 0)
  BRGE.L       R0, RD18, .L008029C5
  BRNE.L       R0, RD8, .L008029C6
// wi_stuff.c:651   digits = 1;
  ADD          R0, 1, RD18
  BSR          .L008029C7, R0

.L008029C6:
// wi_stuff.c:656   digits = 0;
  ADD          R0, 0, RD18
// wi_stuff.c:657   temp = n;
  ADD          RD8, 0, RD22
// wi_stuff.c:659   while (temp)
  BSR          .L008029CA, R0

.L008029C8:
// wi_stuff.c:660   {
  ADD          R0, 10, RD27
  DIVS.L       RD22, RD27, RD22
// wi_stuff.c:662   digits++;
  ADDS.L       RD18, 1, RD18

.L008029CA:
  BRNE.L       R0, RD22, .L008029C8

.L008029C9:

.L008029C7:

.L008029C5:
// wi_stuff.c:667   neg = n < 0;
  CMPLT.Q      RD8, R0, RD27
// wi_stuff.c:668   if (neg)
  MOV.L        RD27, (R2, 92)
  BREQ.L       R0, RD27, .L008029CB
// wi_stuff.c:669   n = -n;
  SUBS.L       R0, RD8, RD8

.L008029CB:
// wi_stuff.c:672   if (n == 1994)
  ADD          R0, 1994, RD27
  BREQ.Q       RD27, RD8, .L00C004A3
// wi_stuff.c:676   while (digits--)
  BSR          .L008029CE, R0

.L008029CC:
// wi_stuff.c:677   {
  SUBS.L       RD23, RD20, RD23
// wi_stuff.c:679   V_DrawPatch(x, y, FB, num[ n % 10 ]);
  ADDS.L       RD8, 0, RQ9
  ADD          R0, 10, RD27
  MODS.L       RQ9, RD27, RQ9
  MOV          TU7A00CB85/num, RQ26
  MOV.Q        (RQ26, RQ9), RQ21
  ADD          RD23, 0, RD10
  MOV.L        (R2, 104), RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:680   n /= 10;
  DIVS.L       RD8, RD27, RD8

.L008029CE:
  ADD          RD18, 0, RQ9
  ADDS.L       RD18, -1, RD18
  BRNE.L       R0, RQ9, .L008029CC

.L008029CD:
// wi_stuff.c:684   if (neg)
  MOV.L        (R2, 92), RD27
  BREQ.L       R0, RD27, .L008029CF
// wi_stuff.c:685   V_DrawPatch(x-=8, y, FB, wiminus);
  ADDS.L       RD23, -8, RQ9
  ADD          RQ9, 0, RD23
  ADDS.L       RQ9, 0, RD10
  MOV.L        (R2, 104), RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/wiminus, RQ13
  BSR          V_DrawPatch, R1

.L008029CF:
// wi_stuff.c:687   return x;
  ADD          RD23, 0, RD10
  BSR          .L00C0140E, R0

.L00C004A3:
  ADD          R0, 0, RQ10

.L00C0140E:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

cht_CheckCheat:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 52)
// m_cheat.c:49   int rc = 0;
  MOV.L        RD0, (R2, 48)
// m_cheat.c:51   if (firsttime)
  MOV.L        TU7A00C419/firsttime, RD13
  BREQ.L       R0, RD13, .L00801768
// m_cheat.c:52   {
  MOV.L        RD0, TU7A00C419/firsttime
// m_cheat.c:54   for (i=0;i<256;i++) cheat_xlate_table[i] = SCRAMBLE(i);
  ADD          R0, 0, RD23

.L00801769:
  AND          RD23, 1, RQ18
  SHAD.L       RQ18, 7, RQ9
  AND          RD23, 2, RQ18
  SHAD.L       RQ18, 5, RQ8
  ADDS.L       RQ9, RQ8, RQ18
  AND          RD23, 4, RQ9
  ADDS.L       RQ18, RQ9, RQ8
  AND          RD23, 8, RQ18
  SHAD.L       RQ18, 1, RQ9
  ADDS.L       RQ8, RQ9, RQ18
  AND          RD23, 16, RQ9
  SHAR         RQ9, 1, RQ8
  ADDS.L       RQ18, RQ8, RQ9
  AND          RD23, 32, RQ8
  ADDS.L       RQ9, RQ8, RQ18
  AND          RD23, 64, RQ9
  SHAR         RQ9, 5, RQ8
  ADDS.L       RQ18, RQ8, RQ9
  AND          RD23, 128, RQ8
  SHAR         RQ8, 7, RQ18
  ADDS.L       RQ9, RQ18, RQ8
  MOV          TU7A00C419/cheat_xlate_table, RQ13
  MOVU.B       RQ8, (RQ13, RD23)
  ADDS.L       RD23, 1, RD23
  BRLT.L       256, RD23, .L00801769

.L0080176B:

.L00801768:
// m_cheat.c:57   if(!cht->sequence)
  MOV.Q        (RQ21, 0), RQ22
  BREQ.Q       R0, RQ22, .L00C004A6
// m_cheat.c:60   if (!cht->p)
  MOV.Q        (RQ21, 8), RQ22
  BRNE.Q       R0, RQ22, .L0080176C
// m_cheat.c:61   cht->p = cht->sequence; // initialize if first time
  MOV.Q        (RQ21, 0), RQ22
  MOV.Q        RQ22, (RQ21, 8)

.L0080176C:
// m_cheat.c:63   if (*cht->p == 0)
  MOV.Q        (RQ21, 8), RQ22
  MOVU.B       (RQ22, 0), RQ18
  BRNE.L       R0, RQ18, .L0080176D
// m_cheat.c:64   *(cht->p++) = key;
  MOV.Q        (RQ21, 8), RQ22
  ADD          RQ22, 0, RQ20
  ADD          RQ22, 1, RQ13
  MOV.Q        RQ13, (RQ21, 8)
  MOV.L        (R2, 52), RD12
  MOVU.B       RD12, (RQ20, 0)
  BSR          .L0080176E, R0

.L0080176D:
  MOV.L        (R2, 52), RD13
  AND          RD13, 255, RQ18
  MOV          TU7A00C419/cheat_xlate_table, RQ12
  MOVU.B       (RQ12, RQ18), RQ9
  MOV.Q        (RQ21, 8), RQ22
  MOVU.B       (RQ22, 0), RQ18
  BRNE.Q       RQ18, RQ9, .L0080176F
// m_cheat.c:66   (cheat_xlate_table[(unsigned char)key] == *cht->p) cht->p++;
  MOV.Q        (RQ21, 8), RQ22
  ADD          RQ22, 1, RQ20
  MOV.Q        RQ20, (RQ21, 8)
  BSR          .L00801770, R0

.L0080176F:
// m_cheat.c:68   cht->p = cht->sequence;
  MOV.Q        (RQ21, 0), RQ13
  MOV.Q        RQ13, (RQ21, 8)

.L00801770:

.L0080176E:
// m_cheat.c:70   if (*cht->p == 1)
  MOV.Q        (RQ21, 8), RQ22
  MOVU.B       (RQ22, 0), RQ18
  BRNE.Q       1, RQ18, .L00801771
// m_cheat.c:71   cht->p++;
  MOV.Q        (RQ21, 8), RQ22
  ADD          RQ22, 1, RQ20
  MOV.Q        RQ20, (RQ21, 8)
  BSR          .L00801772, R0

.L00801771:
  MOV.Q        (RQ21, 8), RQ13
  MOVU.B       (RQ13, 0), RQ18
  BRNE.Q       255, RQ18, .L00801773
// m_cheat.c:73   {
  MOV.Q        (RQ21, 0), RQ22
  MOV.Q        RQ22, (RQ21, 8)
// m_cheat.c:75   rc = 1;
  ADD          R0, 1, RD13
  MOV.L        RD13, (R2, 48)

.L00801773:

.L00801772:
// m_cheat.c:78   return rc;
  MOV.L        (R2, 48), RD10
  BSR          .L00C01414, R0

.L00C004A6:
  ADD          R0, 0, RQ10

.L00C01414:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

M_AddToBox:
// m_bbox.c:62   if (x<box[BOXLEFT])
  MOV.L        (RQ10, 8), RQ13
  BRGE.L       RQ13, RD11, .L00801744
// m_bbox.c:63   box[BOXLEFT] = x;
  MOV.L        RD11, (RQ10, 8)

.L00801744:
// m_bbox.c:64   if (x>box[BOXRIGHT])
  MOV.L        (RQ10, 12), RQ13
  BRLE.L       RQ13, RD11, .L00801745
// m_bbox.c:65   box[BOXRIGHT] = x;
  MOV.L        RD11, (RQ10, 12)

.L00801745:
// m_bbox.c:66   if (y<box[BOXBOTTOM])
  MOV.L        (RQ10, 4), RQ13
  BRGE.L       RQ13, RD12, .L00801746
// m_bbox.c:67   box[BOXBOTTOM] = y;
  MOV.L        RD12, (RQ10, 4)

.L00801746:
// m_bbox.c:68   if (y>box[BOXTOP])
  MOV.L        (RQ10, 0), RQ13
  BRLE.L       RQ13, RD12, .L00801747
// m_bbox.c:69   box[BOXTOP] = y;
  MOV.L        RD12, (RQ10, 0)

.L00801747:

.L00C01415:
  JSR          R1, 0, R0

memchr:
// pdpc201/string.c:635   
  ADD          RQ0, 0, RQ13
// pdpc201/string.c:637   
  ADD          RQ10, 0, RQ17
// pdpc201/string.c:638   
  BSR          .L00800643, R0

.L00800644:
// pdpc201/string.c:639   
  MOVU.B       (RQ17, 0), RQ16
  AND          RD11, 255, RQ15
  BRNE.Q       RQ15, RQ16, .L00800645
// pdpc201/string.c:640   
  ADD          RQ17, 0, RQ10
  JSR          R1, 0, R0

.L00800645:
// pdpc201/string.c:641   
  ADD          RQ17, 1, RQ17
// pdpc201/string.c:642   
  ADD          RQ13, 1, RQ13

.L00800643:
  BRLTU.Q      RQ12, RQ13, .L00800644

.L00800646:
// pdpc201/string.c:643   
  ADD          RQ0, 0, RQ10

.L00C01416:
  JSR          R1, 0, R0

strchr:
// pdpc201/string.c:651   
  BSR          .L00800647, R0

.L00800648:
// pdpc201/string.c:653   
  MOV.B        (RQ10, 0), RQ13
  SHAD.Q       RD11, 56, RQ12
  SHAR.Q       RQ12, 56, RQ12
  BRNE.Q       RQ12, RQ13, .L00800649
// pdpc201/string.c:654   
  JSR          R1, 0, R0

.L00800649:
// pdpc201/string.c:655   
  ADD          RQ10, 1, RQ10

.L00800647:
  MOV.B        (RQ10, 0), RQ13
  BRNE.L       R0, RQ13, .L00800648

.L0080064A:
// pdpc201/string.c:656   
  BRNE.L       R0, RD11, .L0080064B
// pdpc201/string.c:657   
  JSR          R1, 0, R0

.L0080064B:
// pdpc201/string.c:658   
  ADD          RQ0, 0, RQ10

.L00C01417:
  JSR          R1, 0, R0

R_PointToAngle2:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
  MOV.L        RD12, (R2, 84)
  MOV.L        RD13, (R2, 80)
// r_main.c:387   {	
  MOV.L        (R2, 92), RD9
  ADDS.L       RD9, 0, RD8
  MOV.L        RD8, viewx
// r_main.c:389   viewy = y1;
  MOV.L        (R2, 88), RD8
  ADD          RD8, 0, RD23
  MOV.L        RD23, viewy
// r_main.c:391   return R_PointToAngle (x2, y2);
  MOV.L        (R2, 84), RD10
  MOV.L        (R2, 80), RD11
  BSR          R_PointToAngle, R1

.L00C0141D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

V_DrawPatchDirect:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD23
  ADD          RD11, 0, RD22
  ADD          RD12, 0, RD21
  ADD          RQ13, 0, RQ18
// v_video.c:506   if(n_colormaps_alt<=1)
  MOV.L        n_colormaps_alt, RD13
  BRGT.L       1, RD13, .L00802B24
// v_video.c:507   {
  ADD          RD23, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RD21, 0, RD12
  ADD          RQ18, 0, RQ13
  MOV.Q        colormaps, RQ14
  BSR          V_DrawPatchCmap, R1
// v_video.c:511   return;
  BSR          .L00C01423, R0

.L00802B24:
// v_video.c:514   if(!patch)
  BREQ.Q       R0, RQ18, .L00C01423
// v_video.c:517   lump = W_GetNumForCache(patch);
  ADD          RQ18, 0, RQ10
  BSR          W_GetNumForCache, R1
  ADDS.L       RQ10, 0, RD8
// v_video.c:518   tcol = R_ColormapForLump (lump, 0);
  ADDS.L       RD8, 0, RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ9
// v_video.c:520   if(tcol)
  BREQ.Q       R0, RQ9, .L00802B25
// v_video.c:521   {
  ADD          RD23, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RD21, 0, RD12
  ADD          RQ18, 0, RQ13
  ADD          RQ9, 0, RQ14
  BSR          V_DrawPatchCmap, R1
  BSR          .L00802B26, R0

.L00802B25:
// v_video.c:526   V_DrawPatchCmap(x, y,
  ADD          RD23, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RD21, 0, RD12
  ADD          RQ18, 0, RQ13
  MOV.Q        colormaps, RQ14
  BSR          V_DrawPatchCmap, R1

.L00802B26:

.L00C01423:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_ScreenWipe:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 124)
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
  ADD          RD13, 0, RD22
  ADD          RD14, 0, RD21
  MOV.L        RD15, (R2, 104)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// f_wipe.c:273   static int (*wipes[])(int, int, int) =
  MOV          wipe_initColorXForm, RQ18
  ADD          R2, 128, RQ27
  MOV.Q        RQ18, (RQ27, 0)
  MOV          wipe_doColorXForm, RQ18
  MOV.Q        RQ18, (RQ27, 8)
  MOV          wipe_exitColorXForm, RQ18
  MOV.Q        RQ18, (RQ27, 16)
  MOV          wipe_initMelt, RQ18
  MOV.Q        RQ18, (RQ27, 24)
  MOV          wipe_doMelt, RQ18
  MOV.Q        RQ18, (RQ27, 32)
  MOV          wipe_exitMelt, RQ18
  MOV.Q        RQ18, (RQ27, 40)
// f_wipe.c:282   if (!go)
  MOV.L        TU7A00C589/go, RD26
  BRNE.L       R0, RD26, .L0080135B
// f_wipe.c:283   {
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00C589/go
// f_wipe.c:286   wipe_scr = screens[0];
  MOV          screens, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.Q        RQ26, TU7A00C589/wipe_scr
// f_wipe.c:287   (*wipes[wipeno*3])(width, height, ticks);
  MOV.L        (R2, 124), RD27
  ADD          R0, 3, R5
  MULS.L       RD27, R5, RQ8
  ADD          R2, 128, RQ26
  MOV.Q        (RQ26, RQ8), RQ18
  ADD          RQ18, 0, RQ9
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  MOV.L        (R2, 104), RD12
  JSR          RQ9, 0, R1

.L0080135B:
// f_wipe.c:291   V_MarkRect(0, 0, width, height);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          RD22, 0, RD12
  ADD          RD21, 0, RD13
  BSR          V_MarkRect, R1
// f_wipe.c:292   rc = (*wipes[wipeno*3+1])(width, height, ticks);
  MOV.L        (R2, 124), RD27
  ADD          R0, 3, R5
  MULS.L       RD27, R5, RQ8
  ADDS.L       RQ8, 1, RQ23
  ADD          R2, 128, RQ26
  MOV.Q        (RQ26, RQ23), RQ18
  ADD          RQ18, 0, RQ9
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  MOV.L        (R2, 104), RD12
  JSR          RQ9, 0, R1
  ADD          RQ10, 0, RD20
// f_wipe.c:296   if (rc)
  BREQ.L       R0, RD20, .L0080135C
// f_wipe.c:297   {
  MOV.L        RD0, TU7A00C589/go
// f_wipe.c:299   (*wipes[wipeno*3+2])(width, height, ticks);
  MOV.L        (R2, 124), RD27
  ADD          R0, 3, R5
  MULS.L       RD27, R5, RQ23
  ADDS.L       RQ23, 2, RQ8
  ADD          R2, 128, RQ26
  MOV.Q        (RQ26, RQ8), RQ18
  ADD          RQ18, 0, RQ9
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  MOV.L        (R2, 104), RD12
  JSR          RQ9, 0, R1

.L0080135C:
// f_wipe.c:302   return !go;
  MOV.L        TU7A00C589/go, RD27
  CMPEQ.Q      RD27, R0, RQ23
  ADD          RQ23, 0, RD10

.L00C01429:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

R_ColormapRemapForBlend:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ20
// r_data.c:1987   if(!vid_flashblend)
  MOV.L        vid_flashblend, RD27
  BRNE.L       R0, RD27, .L0080256F
// r_data.c:1988   {
  ADD          RQ20, 0, RQ10
  BSR          .L00C0142F, R0

.L0080256F:
// r_data.c:1992   ofs=cmap-colormaps;
  MOV.Q        colormaps, RQ27
  SUB          RQ20, RQ27, RQ23
  SHAR.Q       RQ23, 1, RQ23
  ADDS.L       RQ23, 0, RD21
// r_data.c:1993   if((ofs>=0) && (ofs<colormaps_blend_len))
  CMPGE.Q      RD21, R0, RQ27
  MOV.L        colormaps_blend_len, RD13
  CMPGT.Q      RD13, RD21, RQ12
  BTST.L       RQ12, RQ27, .L00802570
// r_data.c:1994   {
  MOV.Q        colormaps, RQ22
  MOV.Q        colormaps_blend_base, RQ27
  BRNE.Q       RQ22, RQ27, .L00802571
  MOV.L        vid_flashblend, RD27
  MOV.L        colormaps_blend_flash, RD13
  BRNE.Q       RD13, RD27, .L00802572
// r_data.c:2000   return(colormaps_blend+ofs);
  MOV.Q        colormaps_blend, RQ27
  LEA.W        RQ27, RD21, RQ9
  ADD          RQ9, 0, RQ10
  BSR          .L00C0142F, R0

.L00802572:

.L00802571:
// r_data.c:2003   colormaps_blend_base=basecm;
  MOV.Q        RQ22, colormaps_blend_base
// r_data.c:2004   colormaps_blend_flash=vid_flashblend;
  MOV.L        vid_flashblend, RD27
  ADD          RD27, 0, RD13
  MOV.L        RD13, colormaps_blend_flash
// r_data.c:2006   for(i=0; i<colormaps_blend_len; i+=4)
  ADD          R0, 0, RD18
  MOV.L        colormaps_blend_len, RD27
  BRGE.L       RD27, RD18, .L00802575

.L00802573:
// r_data.c:2007   {
  LEA.W        RQ22, RD18, RQ9
  MOV.Q        (RQ9, 0), RQ23
  ADD          RQ23, 0, RQ10
  MOV.L        vid_flashblend, RD11
  BSR          VID_BlendFlash4x, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        colormaps_blend, RQ27
  LEA.W        RQ27, RD18, RQ9
  MOV.Q        RQ8, (RQ9, 0)
  ADDS.L       RD18, 4, RD18
  MOV.L        colormaps_blend_len, RD27
  BRLT.L       RD27, RD18, .L00802573

.L00802575:
// r_data.c:2012   return(colormaps_blend+ofs);
  MOV.Q        colormaps_blend, RQ27
  LEA.W        RQ27, RD21, RQ9
  ADD          RQ9, 0, RQ10
  BSR          .L00C0142F, R0

.L00802570:
// r_data.c:2015   return(cmap);
  ADD          RQ20, 0, RQ10

.L00C0142F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

Z_Free:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 104)
// z_zone.c:145   if(!ptr)
  MOV.Q        (R2, 104), RQ13
  BREQ.Q       R0, RQ13, .L00C0143F
// z_zone.c:148   block = (memblock_t *) ( (byte *)ptr - sizeof(memblock_t));
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, -48, RQ8
  ADD          RQ8, 0, RQ18
// z_zone.c:150   if(((long)block)&15)
  ADD          R0, 15, RQ12
  BTST.Q       RQ12, RQ18, .L00802D92
// z_zone.c:151   __debugbreak();

Z_Free.debugbreak_L01C2:
  BRK          450

.L00802D92:
// z_zone.c:153   __setmemtrap(block, 2);
  ADD          R0, 2, RD13
// z_zone.c:155   if (block->id != ZONEID)
  MOV.L        (RQ18, 0), RQ23
  ADD          R0, 0x001D4A11, RD12
  BREQ.Q       RD12, RQ23, .L00802D93
// z_zone.c:156   {

Z_Free.debugbreak_L01C3:
  BRK          451
// z_zone.c:158   I_Error ("Z_Free: freed a pointer without ZONEID");
  MOV          .L00C01442, RQ10
  BSR          I_Error, R1

.L00802D93:
// z_zone.c:161   if (block->user > (void **)0x100)
  MOV.Q        (RQ18, 16), RQ8
  ADD          R0, 256, RQ22
  BRLE.Q       RQ22, RQ8, .L00802D94
// z_zone.c:168   *(void **)(block->user) = NULL;
  MOV.Q        (RQ18, 16), RQ8
  MOV.Q        RQ0, (RQ8, 0)

.L00802D94:
// z_zone.c:173   block->user = NULL;	
  MOV.Q        RQ0, (RQ18, 16)
// z_zone.c:174   block->tag = 0;
  MOV.L        RD0, (RQ18, 8)
// z_zone.c:175   block->id = 0;
  MOV.L        RD0, (RQ18, 0)
// z_zone.c:177   other = block->prev;
  MOV.Q        (RQ18, 40), RQ9
// z_zone.c:180   if (other->id == 0)
  MOV.L        (RQ9, 0), RQ23
  BRNE.L       R0, RQ23, .L00802D95
// z_zone.c:181   {
  ADD          R0, 2, RD13
// z_zone.c:185   other->size += block->size;
  MOV.L        (RQ9, 4), RQ23
  MOV.L        (RQ18, 4), RQ21
  ADDS.L       RQ23, RQ21, RQ20
  MOV.L        RQ20, (RQ9, 4)
// z_zone.c:186   other->next = block->next;
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        RQ8, (RQ9, 32)
// z_zone.c:187   other->next->prev = other;
  MOV.Q        (RQ9, 32), RQ22
  MOV.Q        RQ9, (RQ22, 40)
  MOV.Q        mainzone, RQ12
  MOV.Q        (RQ12, 56), RQ8
  BRNE.Q       RQ8, RQ18, .L00802D96
// z_zone.c:190   mainzone->rover = other;
  MOV.Q        mainzone, RQ13
  MOV.Q        RQ9, (RQ13, 56)

.L00802D96:
// z_zone.c:192   block = other;
  ADD          RQ9, 0, RQ18

.L00802D95:
// z_zone.c:195   other = block->next;
  MOV.Q        (RQ18, 32), RQ9
// z_zone.c:212   if (other->id == 0)
  MOV.L        (RQ9, 0), RQ23
  BRNE.L       R0, RQ23, .L00802D97
// z_zone.c:213   {
  ADD          R0, 2, RD13
// z_zone.c:217   block->size += other->size;
  MOV.L        (RQ18, 4), RQ21
  MOV.L        (RQ9, 4), RQ20
  ADDS.L       RQ21, RQ20, RQ23
  MOV.L        RQ23, (RQ18, 4)
// z_zone.c:218   block->next = other->next;
  MOV.Q        (RQ9, 32), RQ22
  MOV.Q        RQ22, (RQ18, 32)
// z_zone.c:219   block->next->prev = block;
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        RQ18, (RQ8, 40)
  MOV.Q        mainzone, RQ12
  MOV.Q        (RQ12, 56), RQ22
  BRNE.Q       RQ22, RQ9, .L00802D98
// z_zone.c:222   mainzone->rover = block;
  MOV.Q        mainzone, RQ13
  MOV.Q        RQ18, (RQ13, 56)

.L00802D98:

.L00802D97:

.L00C0143F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_FindNextHighestFloor:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -472, R2
  ADD          RQ10, 0, RQ20
  MOV.L        RD11, (R2, 132)
  ADD          R2, 144, RQ6
  MOV.Q        RQ6, (R2, 104)
// p_spec.c:349   fixed_t		height = currentheight;
  MOV.L        (R2, 132), RD27
  ADD          RD27, 0, RD13
  MOV.L        RD13, (R2, 116)
// p_spec.c:352   fixed_t		heightlist[MAX_ADJOINING_SECTORS];		
// p_spec.c:354   for (i=0, h=0 ;i < sec->linecount ; i++)
  ADD          RD0, 0, RD18
  ADD          R0, 0, RD8
  MOV.L        (RQ20, 112), RQ9
  BRGE.L       RQ9, RD18, .L00802094

.L00802092:
// p_spec.c:355   {
  MOV.Q        (RQ20, 120), RQ22
  MOV.Q        (RQ22, RD18), RQ27
  MOV.Q        RQ27, (R2, 120)
// p_spec.c:357   other = getNextSector(check,sec);
  ADD          RQ27, 0, RQ10
  ADD          RQ20, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ23
// p_spec.c:359   if (!other)
  BREQ.Q       R0, RQ23, .L00802093
// p_spec.c:362   if (other->floorheight > height)
  MOV.L        (RQ23, 0), RQ9
  MOV.L        (R2, 116), RD27
  BRLE.L       RD27, RQ9, .L00802095
// p_spec.c:363   heightlist[h++] = other->floorheight;
  MOV.L        (RQ23, 0), RQ9
  ADD          RD8, 0, RQ21
  ADDS.L       RD8, 1, RD8
  ADD          R2, 144, RQ27
  MOV.L        RQ9, (RQ27, RQ21)

.L00802095:
// p_spec.c:366   if ( h >= MAX_ADJOINING_SECTORS )
  BRLT.L       20, RD8, .L00802096
// p_spec.c:367   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ22
  MOV.Q        (RQ22, 0), RQ10
  MOV          .L00C01449, RQ11
  BSR          fprintf, R1
// p_spec.c:370   break;
  BSR          .L00802094, R0

.L00802096:

.L00802093:
  ADDS.L       RD18, 1, RD18
  MOV.L        (RQ20, 112), RQ9
  BRLT.L       RQ9, RD18, .L00802092

.L00802094:
// p_spec.c:375   if (!h)
  BRNE.L       R0, RD8, .L00802097
// p_spec.c:376   return currentheight;
  MOV.L        (R2, 132), RD10
  BSR          .L00C01448, R0

.L00802097:
// p_spec.c:378   min = heightlist[0];
  ADD          R2, 144, RQ27
  MOV.L        (RQ27, 0), RD13
  MOV.L        RD13, (R2, 128)
// p_spec.c:381   for (i = 1;i < h;i++)
  ADD          R0, 1, RD18
  BRGE.L       RD8, RD18, .L0080209A

.L00802098:
// p_spec.c:382   if (heightlist[i] < min)
  ADD          R2, 144, RQ27
  MOV.L        (RQ27, RD18), RQ21
  MOV.L        (R2, 128), RD13
  BRGE.L       RD13, RQ21, .L0080209B
// p_spec.c:383   min = heightlist[i];
  ADD          R2, 144, RQ27
  MOV.L        (RQ27, RD18), RD13
  MOV.L        RD13, (R2, 128)

.L0080209B:
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD8, RD18, .L00802098

.L0080209A:
// p_spec.c:385   return min;
  MOV.L        (R2, 128), RD10

.L00C01448:
  ADD          R2, 472, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_TryWalk:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:356   {	
  ADD          RQ9, 0, RQ10
  BSR          P_Move, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C004C7
// p_enemy.c:362   actor->movecount = P_Random()&15;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 15, RQ8
  MOV.L        RQ8, (RQ9, 172)
// p_enemy.c:363   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0144F, R0

.L00C004C7:
  ADD          R0, 0, RQ10

.L00C0144F:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

ExpandTics:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD23
// d_net.c:131   delta = low - (maketic&0xff);
  MOV.L        maketic, RD13
  AND          RD13, 255, RQ18
  SUBS.L       RD23, RQ18, RD8
// d_net.c:133   if (delta >= -64 && delta <= 64)
  ADD          R0, -64, R5
  CMPGE.Q      RD8, R5, RQ18
  ADD          R0, 64, R5
  CMPLE.Q      RD8, R5, RQ9
  BTST.L       RQ9, RQ18, .L00801435
// d_net.c:136   return (maketic&~0xff) + low;
  MOV.L        maketic, RD13
  AND          RD13, -256, RQ18
  ADDS.L       RQ18, RD23, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0145A, R0

.L00801435:
// d_net.c:139   if (delta >= -64)
  BRLT.L       -64, RD8, .L00801436
  BRGT.L       64, RD8, .L00801437
// d_net.c:142   {

ExpandTics.debugbreak_L01C9:
  BRK          457

.L00801437:

.L00801436:
// d_net.c:147   if (delta > 64)
  BRLE.L       64, RD8, .L00801438
// d_net.c:148   return (maketic&~0xff) - 256 + low;
  MOV.L        maketic, RD13
  AND          RD13, -256, RQ18
  ADDS.L       RQ18, -256, RQ9
  ADDS.L       RQ9, RD23, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C0145A, R0

.L00801438:
// d_net.c:149   if (delta < -64)
  BRGE.L       -64, RD8, .L00801439
// d_net.c:150   return (maketic&~0xff) + 256 + low;
  MOV.L        maketic, RD13
  AND          RD13, -256, RQ9
  ADDS.L       RQ9, 256, RQ18
  ADDS.L       RQ18, RD23, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0145A, R0

.L00801439:
// d_net.c:152   I_Error ("ExpandTics: strange value %i at maketic %i",low,maketic);
  MOV          .L00C0145C, RQ10
  ADD          RD23, 0, RD11
  MOV.L        maketic, RD12
  BSR          I_Error, R1
// d_net.c:153   return 0;
  ADD          R0, 0, RD10

.L00C0145A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_dbg_printf:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -864, R2
  ADD          RQ10, 0, RQ18
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 368, RQ6
  MOV.Q        RQ6, (R2, 72)
  ADD          R0, 8, RQ7
  BSR          __va64_saveargs, R1
// tk_core/tk_puts.c:1618   
// tk_core/tk_puts.c:1621   
// tk_core/tk_puts.c:1625   
  ADD          R2, 96, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R2, 368, RQ12
  BSR          tk_vsprintf, R1
// tk_core/tk_puts.c:1626   
  ADD          R2, 96, RQ10
  BSR          tk_dbg_puts, R1
// tk_core/tk_puts.c:1627   

.L00C01462:
  ADD          R2, 864, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

V_DrawPatchDirectName:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD21
  ADD          RD11, 0, RD20
  ADD          RD12, 0, RD23
  MOV.Q        RQ13, (R2, 120)
// v_video.c:597   lump = W_GetNumForName (name);
  MOV.Q        (R2, 120), RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RD18
// v_video.c:599   if(lump < 0)
  BRLT.L       R0, RD18, .L00C01468
// v_video.c:603   patch = W_CachePatchNum (lump, PU_CACHE);
  ADD          RD18, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ8
// v_video.c:604   tcol = R_ColormapForLump (lump, 0);
  ADD          RD18, 0, RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ9
// v_video.c:607   size = W_LumpLength(lump);
  ADD          RD18, 0, RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD22
// v_video.c:609   if(size == 64000)
  LDIZ         0x0000FA00, RD27
  BRNE.Q       RD27, RD22, .L00802B27
  BREQ.Q       R0, RQ9, .L00802B28
// v_video.c:612   V_DrawBlockCmap(0, 0, scrn, 320, 200, (byte *)patch, tcol);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          RD23, 0, RD12
  ADD          R0, 320, RD13
  ADD          R0, 200, RD14
  ADD          RQ8, 0, RQ15
  ADD          RQ9, 0, RQ16
  BSR          V_DrawBlockCmap, R1
  BSR          .L00802B29, R0

.L00802B28:
// v_video.c:614   V_DrawBlockCmap(0, 0, scrn, 320, 200, (byte *)patch, colormaps);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          RD23, 0, RD12
  ADD          R0, 320, RD13
  ADD          R0, 200, RD14
  ADD          RQ8, 0, RQ15
  MOV.Q        colormaps, RQ16
  BSR          V_DrawBlockCmap, R1

.L00802B29:
// v_video.c:616   return;
  BSR          .L00C01468, R0

.L00802B27:
// v_video.c:619   if(tcol)
  BREQ.Q       R0, RQ9, .L00802B2A
// v_video.c:620   V_DrawPatchCmap(x, y, scrn, patch, tcol);
  ADD          RD21, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RD23, 0, RD12
  ADD          RQ8, 0, RQ13
  ADD          RQ9, 0, RQ14
  BSR          V_DrawPatchCmap, R1
  BSR          .L00802B2B, R0

.L00802B2A:
// v_video.c:622   V_DrawPatchDirect(x, y, scrn, patch);
  ADD          RD21, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RD23, 0, RD12
  ADD          RQ8, 0, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802B2B:

.L00C01468:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_FindHighestFloorSurrounding:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
// p_spec.c:313   fixed_t		floor = -500*FRACUNIT;
  LUI          -8000, RD22
// p_spec.c:315   for (i=0 ;i < sec->linecount ; i++)
  ADD          R0, 0, RD9
  MOV.L        (RQ23, 112), RQ8
  BRGE.L       RQ8, RD9, .L00802090

.L0080208E:
// p_spec.c:316   {
  MOV.Q        (RQ23, 120), RQ21
  MOV.Q        (RQ21, RD9), RQ20
  MOV.Q        RQ20, (R2, 80)
// p_spec.c:318   other = getNextSector(check,sec);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:320   if (!other)
  BREQ.Q       R0, RQ18, .L0080208F
// p_spec.c:323   if (other->floorheight > floor)
  MOV.L        (RQ18, 0), RQ8
  BRLE.L       RD22, RQ8, .L00802091
// p_spec.c:324   floor = other->floorheight;
  MOV.L        (RQ18, 0), RD22

.L00802091:

.L0080208F:
  ADDS.L       RD9, 1, RD9
  MOV.L        (RQ23, 112), RQ8
  BRLT.L       RQ8, RD9, .L0080208E

.L00802090:
// p_spec.c:325   }
  ADD          RD22, 0, RD10

.L00C0146E:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_BlockLinesIterator:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RQ12, 0, RQ21
// p_maputl.c:485   if (x<0
  MOV.L        (R2, 108), RD27
  CMPLT.Q      RD27, R0, RQ9
  MOV.L        (R2, 104), RD13
  CMPLT.Q      RD13, R0, RQ18
  OR           RQ9, RQ18, RQ22
  MOV.L        bmapwidth, RD12
  CMPGE.Q      RD27, RD12, RQ9
  OR           RQ22, RQ9, RQ18
  MOV.L        bmapheight, RD12
  CMPGE.Q      RD13, RD12, RQ22
  OR           RQ18, RQ22, RQ9
  BREQ.L       R0, RQ9, .L00801DE5
// p_maputl.c:489   {
  ADD          R0, 1, RD10
  BSR          .L00C01474, R0

.L00801DE5:
// p_maputl.c:493   offset = y*bmapwidth+x;
  MOV.L        (R2, 104), RD27
  MOV.L        bmapwidth, RD13
  MULS.L       RD27, RD13, RQ18
  MOV.L        (R2, 108), RD13
  ADDS.L       RQ18, RD13, RD20
// p_maputl.c:495   offset = *(blockmap+offset);
  MOV.Q        blockmap, RQ12
  LEA.W        RQ12, RD20, RQ11
  MOV.W        (RQ11, 0), RD20
// p_maputl.c:497   for ( list = blockmaplump+offset ; *list != -1 ; list++)
  MOV.Q        blockmaplump, RQ12
  LEA.W        RQ12, RD20, RQ8
  MOV.W        (RQ8, 0), RQ9
  BREQ.Q       -1, RQ9, .L00801DE8

.L00801DE6:
// p_maputl.c:498   {
  MOV.W        (RQ8, 0), RQ18
  MOV.Q        lines, RQ27
  ADD          R0, 96, R5
  MUL.L        RQ18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// p_maputl.c:501   if (ld->validcount == validcount)
  MOV.L        (RQ23, 80), RQ22
  MOV.L        validcount, RD27
  BREQ.Q       RD27, RQ22, .L00801DE7
// p_maputl.c:504   ld->validcount = validcount;
  MOV.L        validcount, RD27
  MOV.L        RD27, (RQ23, 80)
// p_maputl.c:506   if ( !func(ld) )
  ADD          RQ23, 0, RQ10
  JSR          RQ21, 0, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C004D5

.L00801DE7:
  ADD          RQ8, 2, RQ8
  MOV.W        (RQ8, 0), RQ18
  BRNE.Q       -1, RQ18, .L00801DE6

.L00801DE8:
// p_maputl.c:508   }
  ADD          R0, 1, RD10
  BSR          .L00C01474, R0

.L00C004D5:
  ADD          R0, 0, RQ10

.L00C01474:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_TeleportMove:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ20
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
// p_map.c:132   tmthing = thing;
  ADD          RQ20, 0, RQ27
// p_map.c:133   tmflags = thing->flags;
  MOV.L        (RQ20, 160), RD26
  MOV.L        RD26, tmflags
// p_map.c:135   tmx = x;
  MOV.L        (R2, 116), RD26
  MOV.L        RD26, tmx
// p_map.c:136   tmy = y;
  MOV.L        (R2, 112), RD25
  MOV.L        RD25, tmy
// p_map.c:138   tmbbox[BOXTOP] = y + tmthing->radius;
  MOV.L        (RQ27, 104), RQ8
  ADDS.L       RD25, RQ8, RQ18
  MOV          tmbbox, RQ24
  MOV.L        RQ18, (RQ24, 0)
// p_map.c:139   tmbbox[BOXBOTTOM] = y - tmthing->radius;
  MOV.L        (RQ27, 104), RQ8
  SUBS.L       RD25, RQ8, RQ18
  MOV.L        RQ18, (RQ24, 4)
// p_map.c:140   tmbbox[BOXRIGHT] = x + tmthing->radius;
  MOV.L        (RQ27, 104), RQ8
  ADDS.L       RD26, RQ8, RQ18
  MOV.L        RQ18, (RQ24, 12)
// p_map.c:141   tmbbox[BOXLEFT] = x - tmthing->radius;
  MOV.L        (RQ27, 104), RQ8
  MOV.Q        RQ27, tmthing
  SUBS.L       RD26, RQ8, RQ18
  MOV.L        RQ18, (RQ24, 8)
// p_map.c:143   newsubsec = R_PointInSubsector (x,y);
  ADD          RD26, 0, RD10
  ADD          RD25, 0, RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ27
// p_map.c:144   ceilingline = NULL;
  MOV.Q        RQ0, ceilingline
// p_map.c:150   tmfloorz = tmdropoffz = newsubsec->sector->floorheight;
  MOV.Q        (RQ27, 0), RQ22
  MOV.Q        RQ27, (R2, 88)
  MOV.L        (RQ22, 0), RQ8
  MOV.L        RQ8, tmdropoffz
  MOV.L        RQ8, tmfloorz
// p_map.c:151   tmceilingz = newsubsec->sector->ceilingheight;
  MOV.L        (RQ22, 4), RD24
  MOV.L        RD24, tmceilingz
// p_map.c:153   validcount++;
  MOV.L        validcount, RD24
  ADDS.L       RD24, 1, RD24
  MOV.L        RD24, validcount
// p_map.c:154   numspechit = 0;
  MOV.L        RD0, numspechit
// p_map.c:157   xl = (tmbbox[BOXLEFT] - bmaporgx - MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV          tmbbox, RQ24
  MOV.L        (RQ24, 8), RQ18
  MOV.L        bmaporgx, RD19
  SUBS.L       RQ18, RD19, RQ8
  ADD          RQ8, 0, RQ18
  LUI          2048, RD25
  SUBS.L       RQ18, RD25, RQ18
  SHAR         RQ18, 23, RD26
// p_map.c:158   xh = (tmbbox[BOXRIGHT] - bmaporgx + MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ24, 12), RQ8
  SUBS.L       RQ8, RD19, RQ18
  ADD          RQ18, 0, RQ8
  ADDS.L       RQ8, RD25, RQ8
  SHAR         RQ8, 23, RD19
// p_map.c:159   yl = (tmbbox[BOXBOTTOM] - bmaporgy - MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ24, 4), RQ18
  MOV.L        bmaporgy, RD27
  SUBS.L       RQ18, RD27, RQ8
  ADD          RQ8, 0, RQ18
  SUBS.L       RQ18, RD25, RQ18
  SHAR         RQ18, 23, RD27
  MOV.L        RD27, (R2, 100)
// p_map.c:160   yh = (tmbbox[BOXTOP] - bmaporgy + MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ24, 0), RQ8
  MOV.L        bmaporgy, RD24
  SUBS.L       RQ8, RD24, RQ18
  ADD          RQ18, 0, RQ8
  ADDS.L       RQ8, RD25, RQ8
  SHAR         RQ8, 23, RD21
// p_map.c:162   for (bx=xl ; bx<=xh ; bx++)
  ADD          RD26, 0, RD23
  MOV.L        RD26, (R2, 108)
  MOV.L        RD19, (R2, 104)
  BRGT.L       RD19, RD23, .L00801D1F

.L00801D1D:
// p_map.c:163   for (by=yl ; by<=yh ; by++)
  MOV.L        (R2, 100), RD9
  BRGT.L       RD21, RD9, .L00801D22

.L00801D20:
// p_map.c:164   {
  MOV          PIT_StompThing, RQ22
  ADD          RD23, 0, RD10
  ADDS.L       RD9, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          P_BlockThingsIterator, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C004D8
  ADDS.L       RD9, 1, RD9
  BRLE.L       RD21, RD9, .L00801D20

.L00801D22:
  ADDS.L       RD23, 1, RD23
  MOV.L        (R2, 104), RD27
  BRLE.L       RD27, RD23, .L00801D1D

.L00801D1F:
// p_map.c:171   P_UnsetThingPosition (thing);
  ADD          RQ20, 0, RQ10
  BSR          P_UnsetThingPosition, R1
// p_map.c:173   thing->floorz = tmfloorz;
  MOV.L        tmfloorz, RD27
  MOV.L        RD27, (RQ20, 96)
// p_map.c:174   thing->ceilingz = tmceilingz;	
  MOV.L        tmceilingz, RD27
  MOV.L        RD27, (RQ20, 100)
// p_map.c:175   thing->x = x;
  MOV.L        (R2, 116), RD27
  MOV.L        RD27, (RQ20, 24)
// p_map.c:176   thing->y = y;
  MOV.L        (R2, 112), RD26
  MOV.L        RD26, (RQ20, 28)
// p_map.c:178   P_SetThingPosition (thing);
  ADD          RQ20, 0, RQ10
  BSR          P_SetThingPosition, R1
// p_map.c:180   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0147A, R0

.L00C004D8:
  ADD          R0, 0, RQ10

.L00C0147A:
  ADD          R2, 312, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AimLineAttack:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  ADD          RD11, 0, RD21
  ADD          RD12, 0, RD20
// p_map.c:1066   angle >>= ANGLETOFINESHIFT;
  SHLR         RD21, 19, RD21
// p_map.c:1067   shootthing = t1;
  MOV.Q        RQ8, shootthing
// p_map.c:1069   x2 = t1->x + (distance>>FRACBITS)*finecosine[angle];
  MOV.L        (RQ8, 24), RQ9
  SHAR         RD20, 16, RQ18
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD21), RQ23
  MULS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ9, RQ22, RD27
  MOV.L        RD27, (R2, 140)
// p_map.c:1070   y2 = t1->y + (distance>>FRACBITS)*finesine[angle];
  MOV.L        (RQ8, 28), RQ9
  SHAR         RD20, 16, RQ18
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD21), RQ23
  MULS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ9, RQ22, RD26
  MOV.L        RD26, (R2, 136)
// p_map.c:1071   shootz = t1->z + (t1->height>>1) + 8*FRACUNIT;
  MOV.L        (RQ8, 32), RQ9
  MOV.L        (RQ8, 108), RQ18
  SHAR         RQ18, 1, RQ23
  ADDS.L       RQ9, RQ23, RQ22
  ADDS.L       RQ22, 0x00080000, RD25
  MOV.L        RD25, shootz
// p_map.c:1074   topslope = 100*FRACUNIT/160;	
  LUI          10, RD25
  MOV.L        RD25, topslope
// p_map.c:1075   bottomslope = -100*FRACUNIT/160;
  LUI          -10, RD25
  MOV.L        RD25, bottomslope
// p_map.c:1077   attackrange = distance;
  MOV.L        RD20, attackrange
// p_map.c:1078   linetarget = NULL;
  MOV.Q        RQ0, linetarget
// p_map.c:1080   P_PathTraverse ( t1->x, t1->y,
  MOV.L        (RQ8, 28), RQ9
  MOV.L        (RQ8, 24), RQ18
  MOV          PTR_AimTraverse, RQ25
  ADD          RQ25, 0, RQ15
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RD27, 0, RD12
  ADD          RD26, 0, RD13
  ADD          R0, 3, RD14
  BSR          P_PathTraverse, R1
// p_map.c:1085   if (linetarget)
  MOV.Q        linetarget, RQ25
  BREQ.Q       R0, RQ25, .L00801D98
// p_map.c:1086   return aimslope;
  MOV.L        aimslope, RD10
  BSR          .L00C01480, R0

.L00801D98:
// p_map.c:1088   return 0;
  ADD          R0, 0, RD10

.L00C01480:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

P_ChangeSector:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 100)
// p_map.c:1364   nofit = false;
  MOV.L        RD0, nofit
// p_map.c:1365   crushchange = crunch;
  MOV.L        (R2, 100), RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, crushchange
// p_map.c:1367   n=4096;
  LUI          1, RD9
// p_map.c:1370   for (x=sector->blockbox[BOXLEFT] ;
  ADD          RQ21, 32, RQ12
  MOV.L        (RQ12, 8), RD22
  MOV.L        (RQ12, 12), RQ18
  CMPGE.Q      RQ18, RD22, RQ23
  CMPGT.Q      RD9, R0, RQ18
  BTST.L       RQ18, RQ23, .L00801DB4

.L00801DB2:
// p_map.c:1372   for (y=sector->blockbox[BOXBOTTOM];
  ADD          RQ21, 32, RQ13
  MOV.L        (RQ13, 4), RD8
  MOV.L        (RQ13, 0), RQ18
  CMPGE.Q      RQ18, RD8, RQ23
  CMPGT.Q      RD9, R0, RQ18
  BTST.L       RQ18, RQ23, .L00801DB7

.L00801DB5:
// p_map.c:1374   {
  MOV          PIT_ChangeSector, RQ12
  ADD          RD22, 0, RD10
  ADDS.L       RD8, 0, RD11
  BSR          P_BlockThingsIterator, R1
  ADD          RD8, 0, RQ18
  ADDS.L       RD8, 1, RD8
  ADD          RD9, 0, RQ23
  ADDS.L       RD9, -1, RD9
  ADD          RQ21, 32, RQ13
  MOV.L        (RQ13, 0), RQ18
  CMPGE.Q      RQ18, RD8, RQ23
  CMPGT.Q      RD9, R0, RQ18
  BTSTN.L      RQ18, RQ23, .L00801DB5

.L00801DB7:
  ADD          RD22, 0, RQ23
  ADDS.L       RD22, 1, RD22
  ADD          RD9, 0, RQ18
  ADDS.L       RD9, -1, RD9
  ADD          RQ21, 32, RQ13
  MOV.L        (RQ13, 12), RQ18
  CMPGE.Q      RQ18, RD22, RQ23
  CMPGT.Q      RD9, R0, RQ18
  BTSTN.L      RQ18, RQ23, .L00801DB2

.L00801DB4:
// p_map.c:1379   return nofit;
  MOV.L        nofit, RD10

.L00C01486:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

strcat:
// pdpc201/string.c:253   
  ADD          RQ10, 0, RQ13
// pdpc201/string.c:256   
  BSR          .L00800619, R0

.L0080061A:
  ADD          RQ13, 1, RQ13

.L00800619:
  MOV.B        (RQ13, 0), RQ12
  BRNE.L       R0, RQ12, .L0080061A

.L0080061B:
// pdpc201/string.c:257   
  BSR          .L0080061C, R0

.L0080061D:
// pdpc201/string.c:258   
  ADD          RQ13, 1, RQ13
// pdpc201/string.c:260   
  ADD          RQ11, 1, RQ11

.L0080061C:
  MOV.B        (RQ11, 0), RQ12
  MOV.B        RQ12, (RQ13, 0)
  BRNE.L       R0, RQ12, .L0080061D

.L0080061E:
// pdpc201/string.c:261   

.L00C01487:
  JSR          R1, 0, R0

__get_stdout:
// pdpc201/stdio.c:140   
  MOV          __stdout, RQ13
  ADD          RQ13, 0, RQ10

.L00C01488:
  JSR          R1, 0, R0
  .balign 4

R_InstallSpriteLump:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD20
  ADDU.L       RD11, R0, RD9
  ADD          RD12, 0, RD22
  MOV.L        RD13, (R2, 112)
// r_things.c:115   if (frame >= 29 || rotation > 8)
  ADD          R0, 29, RQ23
  CMPGE.Q      RD9, RQ23, RQ18
  ADD          R0, 8, RQ21
  CMPGT.Q      RD22, RQ21, RQ23
  OR           RQ18, RQ23, RQ21
  BREQ.L       R0, RQ21, .L008027A9
// r_things.c:116   I_Error("R_InstallSpriteLump: "
  MOV          .L00C0148F, RQ10
  ADD          RD20, 0, RD11
  BSR          I_Error, R1

.L008027A9:
// r_things.c:119   if ((int)frame > maxframe)
  ADDS.L       RD9, 0, RQ18
  MOV.L        maxframe, RD13
  BRLE.L       RD13, RQ18, .L008027AA
// r_things.c:120   maxframe = frame;
  ADDS.L       RD9, 0, RD13
  MOV.L        RD13, maxframe

.L008027AA:
// r_things.c:122   if (rotation == 0)
  BRNE.L       R0, RD22, .L008027AB
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 0), RQ18
  BRNE.L       R0, RQ18, .L008027AC
// r_things.c:126   I_Error ("R_InitSprites: Sprite %s frame %c has "
  ADDS.L       RD9, 65, RQ23
  ADDU.L       RQ23, R0, RQ23
  MOV          .L00C01490, RQ10
  MOV.Q        spritename, RQ11
  ADD          RQ23, 0, RD12
  BSR          I_Error, R1

.L008027AC:
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 0), RQ18
  BRNE.Q       1, RQ18, .L008027AD
// r_things.c:130   I_Error ("R_InitSprites: Sprite %s frame %c has rotations "
  ADDS.L       RD9, 65, RQ23
  ADDU.L       RQ23, R0, RQ23
  MOV          .L00C01491, RQ10
  MOV.Q        spritename, RQ11
  ADD          RQ23, 0, RD12
  BSR          I_Error, R1

.L008027AD:
// r_things.c:133   sprtemp[frame].rotate = false;
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        RD0, (RQ12, 0)
// r_things.c:134   for (r=0 ; r<8 ; r++)
  ADD          R0, 0, RD8

.L008027AE:
// r_things.c:135   {
  MOV.L        firstspritelump, RD13
  SUBS.L       RD20, RD13, RQ18
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 4, RQ11
  MOV.W        RQ18, (RQ11, RD8)
// r_things.c:137   sprtemp[frame].flip[r] = (byte)flipped;
  MOV.L        (R2, 112), RD10
  AND          RD10, 255, RQ18
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 20, RQ11
  MOVU.B       RQ18, (RQ11, RD8)
  ADDS.L       RD8, 1, RD8
  BRLT.L       8, RD8, .L008027AE

.L008027B0:
// r_things.c:138   }
  BSR          .L00C0148E, R0

.L008027AB:
// r_things.c:143   if (sprtemp[frame].rotate == false)
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 0), RQ18
  BRNE.L       R0, RQ18, .L008027B1
// r_things.c:144   I_Error ("R_InitSprites: Sprite %s frame %c has rotations "
  ADDS.L       RD9, 65, RQ23
  ADDU.L       RQ23, R0, RQ23
  MOV          .L00C01491, RQ10
  MOV.Q        spritename, RQ11
  ADD          RQ23, 0, RD12
  BSR          I_Error, R1

.L008027B1:
// r_things.c:147   sprtemp[frame].rotate = true;
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          R0, 1, RD11
  MOV.L        RD11, (RQ12, 0)
// r_things.c:150   rotation--;		
  ADDS.L       RD22, -1, RD22
  ADDU.L       RD22, R0, RD22
  ADDU.L       RD22, R0, RD22
// r_things.c:151   if (sprtemp[frame].lump[rotation] != -1)
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 4, RQ13
  MOV.W        (RQ13, RD22), RQ18
  BREQ.Q       -1, RQ18, .L008027B2
// r_things.c:152   I_Error ("R_InitSprites: Sprite %s : %c : %c "
  ADDS.L       RD22, 49, RQ23
  ADDU.L       RQ23, R0, RQ23
  ADDS.L       RD9, 65, RQ21
  ADDU.L       RQ21, R0, RQ21
  MOV          .L00C01492, RQ10
  MOV.Q        spritename, RQ11
  ADD          RQ21, 0, RD12
  ADD          RQ23, 0, RD13
  BSR          I_Error, R1

.L008027B2:
// r_things.c:156   sprtemp[frame].lump[rotation] = lump - firstspritelump;
  MOV.L        firstspritelump, RD13
  SUBS.L       RD20, RD13, RQ18
  MOV          sprtemp, RQ13
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 4, RQ11
  MOV.W        RQ18, (RQ11, RD22)
// r_things.c:157   sprtemp[frame].flip[rotation] = (byte)flipped;
  MOV.L        (R2, 112), RD10
  AND          RD10, 255, RQ18
  ADD          R0, 28, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 20, RQ11
  MOVU.B       RQ18, (RQ11, RD22)

.L00C0148E:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_RemoveMobj:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
// p_mobj.c:584   {
  MOV.L        (RQ9, 160), RQ18
  ADD          R0, 1, RD8
  BTST.L       RD8, RQ18, .L008022A4
  MOV.L        (RQ9, 160), RQ18
  LUI          32, RD8
  BTSTN.L      RD8, RQ18, .L008022A4

.L008022A7:
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       56, RQ18, .L008022A4

.L008022A6:
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       58, RQ18, .L008022A4

.L008022A5:
// p_mobj.c:589   {
  ADD          RQ9, 204, RQ8
  MOV          itemrespawnque, RQ23
  MOV.L        iquehead, RD22
  ADD          R0, 20, R5
  MUL.L        RD22, R5, RQ10
  ADD          RQ23, RQ10, RQ10
  MOV.Q        (RQ8, 0), RQ11
  MOV.Q        (RQ8, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.L        (RQ8, 16), RQ11
  MOV.L        RQ11, (RQ10, 16)
// p_mobj.c:591   itemrespawntime[iquehead] = leveltime;
  MOV          itemrespawntime, RQ23
  MOV.L        leveltime, RD8
  MOV.L        RD8, (RQ23, RD22)
// p_mobj.c:592   iquehead = (iquehead+1)&(ITEMQUESIZE-1);
  ADDS.L       RD22, 1, RQ18
  AND          RQ18, 127, RD22
  MOV.L        RD22, iquehead
  MOV.L        iquetail, RD8
  BRNE.Q       RD8, RD22, .L008022A9
// p_mobj.c:596   iquetail = (iquetail+1)&(ITEMQUESIZE-1);
  MOV.L        iquetail, RD8
  ADDS.L       RD8, 1, RQ18
  AND          RQ18, 127, RD8
  MOV.L        RD8, iquetail

.L008022A9:

.L008022A4:
// p_mobj.c:600   P_UnsetThingPosition (mobj);
  ADD          RQ9, 0, RQ10
  BSR          P_UnsetThingPosition, R1
// p_mobj.c:603   S_StopSound (mobj);
  ADD          RQ9, 0, RQ10
  BSR          S_StopSound, R1
// p_mobj.c:606   P_RemoveThinker ((thinker_t*)mobj);
  ADD          RQ9, 0, RQ10
  BSR          P_RemoveThinker, R1

.L00C01498:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_AproxDistance:
  ADD          R2, -32, R2
  MOV.Q        R23, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
  ADDS.L       RD11, 0, RD9
// p_maputl.c:53   {
  SHAR.Q       RD18, 63, RQ7
  SUB          R0, RD18, RQ6
  SHAR.Q       RQ6, 63, RQ10
  AND          RQ6, RQ7, RQ7
  AND          RD18, RQ10, RQ10
  OR           RQ7, RQ10, RD18
// p_maputl.c:55   dy = abs(dy);
  SHAR.Q       RD9, 63, RQ7
  SUB          R0, RD9, RQ6
  SHAR.Q       RQ6, 63, RQ10
  AND          RQ6, RQ7, RQ7
  AND          RD9, RQ10, RQ10
  OR           RQ7, RQ10, RD9
// p_maputl.c:56   if (dx < dy)
  BRGE.L       RD9, RD18, .L00801DBE
// p_maputl.c:57   return dx+dy-(dx>>1);
  ADDS.L       RD18, RD9, RQ8
  SHAR         RD18, 1, RQ23
  SUBS.L       RQ8, RQ23, RQ13
  ADDS.L       RQ13, 0, RD10
  BSR          .L00C0149E, R0

.L00801DBE:
// p_maputl.c:58   return dx+dy-(dy>>1);
  ADDS.L       RD18, RD9, RQ8
  SHAR         RD9, 1, RQ23
  SUBS.L       RQ8, RQ23, RQ13
  ADDS.L       RQ13, 0, RD10

.L00C0149E:
  ADD          R2, 352, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 32, R2
  JSR          R1, 0, R0
  .balign 4

TKMM_LVA_RegisterBinOp:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  MOV.L        RD10, (R2, 124)
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
  MOV.Q        RQ13, (R2, 104)
// tk_core/lva_tagopr.c:14   
  MOV.L        (R2, 124), RD27
  ADDS.L       RD27, 0, RQ23
  MOV.L        (R2, 120), RD26
  ADDS.L       RD26, 0, RQ9
  SHLD.Q       RQ9, 16, RQ8
  OR           RQ23, RQ8, RQ9
  MOV.L        (R2, 116), RD25
  ADDS.L       RD25, 0, RQ8
  SHLD.Q       RQ8, 32, RQ23
  OR           RQ9, RQ23, RQ22
// tk_core/lva_tagopr.c:15   
  ADD          R0, 0x0000FFD3, RQ24
  LDSH32       RQ24, 0x02A2F2D1, RQ24
  MULU.Q       RQ22, RQ24, RQ9
  SHLR.Q       RQ9, 48, RQ8
  AND          RQ8, 63, RQ23
  ADDS.L       RQ23, 0, RD21
// tk_core/lva_tagopr.c:19   
  ADD          R0, 32, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagopr.c:20   
  MOV.Q        (R2, 104), RQ27
  MOV.Q        RQ27, (RQ18, 16)
// tk_core/lva_tagopr.c:21   
  MOV.Q        RQ22, (RQ18, 24)
// tk_core/lva_tagopr.c:26   
  MOV.Q        tkmm_lva_tagbinop, RQ26
  MOV.Q        RQ26, (RQ18, 0)
// tk_core/lva_tagopr.c:27   
  ADD          RQ18, 0, RQ26
  MOV.Q        RQ26, tkmm_lva_tagbinop
// tk_core/lva_tagopr.c:28   
  MOV          tkmm_lva_tagbinop_hash, RQ26
  MOV.Q        (RQ26, RD21), RQ20
  MOV.Q        RQ20, (RQ18, 8)
// tk_core/lva_tagopr.c:29   
  MOV.Q        RQ18, (RQ26, RD21)

.L00C014A4:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

P_CheckSight:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ22
// p_sight.c:333   s1 = (t1->subsector->sector - sectors);
  MOV.Q        (RQ23, 88), RQ21
  MOV.Q        (RQ21, 0), RQ20
  MOV.Q        sectors, RQ27
  SUB          RQ20, RQ27, RQ26
  SHAR.Q       RQ26, 7, RQ26
  ADDS.L       RQ26, 0, RD25
// p_sight.c:334   s2 = (t2->subsector->sector - sectors);
  MOV.Q        (RQ22, 88), RQ21
  MOV.Q        (RQ21, 0), RQ20
  SUB          RQ20, RQ27, RQ26
  SHAR.Q       RQ26, 7, RQ26
  ADDS.L       RQ26, 0, RD27
// p_sight.c:335   pnum = s1*numsectors + s2;
  MOV.L        numsectors, RD13
  MULS.L       RD25, RD13, RQ18
  MOV.L        RD25, (R2, 140)
  ADDS.L       RQ18, RD27, RD13
  MOV.L        RD27, (R2, 136)
// p_sight.c:336   bytenum = pnum>>3;
  SHAR         RD13, 3, RD12
// p_sight.c:337   bitnum = 1 << (pnum&7);
  AND          RD13, 7, RQ18
  MOV.L        RD13, (R2, 132)
  ADD          R0, 1, RD10
  SHAD.L       RD10, RQ18, RD11
// p_sight.c:340   if (rejectmatrix[bytenum]&bitnum)
  MOV.Q        rejectmatrix, RQ17
  MOVU.B       (RQ17, RD12), RQ18
  MOV.L        RD12, (R2, 128)
  MOV.L        RD11, (R2, 124)
  BTST.L       RD11, RQ18, .L0080207A
// p_sight.c:341   {
  MOV          sightcounts, RQ27
  MOV.L        (RQ27, 0), RQ18
  ADDS.L       RQ18, 1, RQ9
  MOV.L        RQ9, (RQ27, 0)
// p_sight.c:345   return false;	
  ADD          R0, 0, RD10
  BSR          .L00C014AA, R0

.L0080207A:
// p_sight.c:350   sightcounts[1]++;
  MOV          sightcounts, RQ27
  MOV.L        (RQ27, 4), RQ18
  ADDS.L       RQ18, 1, RQ9
  MOV.L        RQ9, (RQ27, 4)
// p_sight.c:352   validcount++;
  MOV.L        validcount, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, validcount
// p_sight.c:354   sightzstart = t1->z + t1->height - (t1->height>>2);
  MOV.L        (RQ23, 32), RQ18
  MOV.L        (RQ23, 108), RQ9
  ADDS.L       RQ18, RQ9, RQ8
  SHAR         RQ9, 2, RQ18
  SUBS.L       RQ8, RQ18, RD27
// p_sight.c:355   topslope = (t2->z+t2->height) - sightzstart;
  MOV.L        (RQ22, 32), RQ9
  MOV.L        (RQ22, 108), RQ8
  ADDS.L       RQ9, RQ8, RQ18
  SUBS.L       RQ18, RD27, RD26
  MOV.L        RD26, topslope
// p_sight.c:356   bottomslope = (t2->z) - sightzstart;
  SUBS.L       RQ9, RD27, RD26
  MOV.L        RD26, bottomslope
  MOV.L        RD27, sightzstart
// p_sight.c:358   strace.x = t1->x;
  MOV.L        (RQ23, 24), RQ9
  MOV          strace, RQ27
  MOV.L        RQ9, (RQ27, 0)
// p_sight.c:359   strace.y = t1->y;
  MOV.L        (RQ23, 28), RQ8
  MOV.L        RQ8, (RQ27, 4)
// p_sight.c:360   t2x = t2->x;
  MOV.L        (RQ22, 24), RD26
// p_sight.c:361   t2y = t2->y;
  MOV.L        (RQ22, 28), RD25
// p_sight.c:362   strace.dx = t2->x - t1->x;
  SUBS.L       RD26, RQ9, RQ18
  MOV.L        RD26, t2x
  MOV.L        RQ18, (RQ27, 8)
// p_sight.c:363   strace.dy = t2->y - t1->y;
  SUBS.L       RD25, RQ8, RQ9
  MOV.L        RD25, t2y
  MOV.L        RQ9, (RQ27, 12)
// p_sight.c:366   return P_CrossBSPNode (numnodes-1);	
  MOV.L        numnodes, RD27
  ADDS.L       RD27, -1, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          P_CrossBSPNode, R1
  BSR          .L00C014AA, R0
// p_sight.c:368   if(!P_CrossBSPNode (numnodes-1))
  MOV.L        numnodes, RD27
  ADDS.L       RD27, -1, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          P_CrossBSPNode, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C004F2
// p_sight.c:380   return(true);
  ADD          R0, 1, RD10
  BSR          .L00C014AA, R0

.L00C004F2:
  ADD          R0, 0, RQ10

.L00C014AA:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

ftell:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2633   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2635   
  MOV.Q        (RQ18, 16), RQ22
  MOV.Q        (RQ18, 40), RQ8
  MOV.Q        (RQ18, 24), RQ23
  SUB          RQ8, RQ23, RQ21
  ADD          RQ22, RQ21, RQ9
// pdpc201/stdio.c:2636   
  ADDS.L       RQ9, 0, RQ20
  ADDS.L       RQ20, 0, RQ9
// pdpc201/stdio.c:2638   
  ADD          RQ9, 0, RQ10

.L00C014B0:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TKDFS_UtfCheckMerge:
  ADD          R2, -88, R2
  MOV.X        R20, (R2, 24)
  MOV.X        R26, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R24, (R2, 56)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -264, R2
  MOV.L        RD10, (R2, 60)
  MOV.L        RD11, (R2, 56)
  MOV.Q        RQ12, (R2, 48)
  MOV.L        RD13, (R2, 44)
// tk_core/tk_rwad.c:1478   
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 40)
// tk_core/tk_rwad.c:1480   
  MOV.L        (R2, 60), RD25
  MOV.L        (R2, 56), RD24
  XOR          RD25, RD24, RD26
// tk_core/tk_rwad.c:1481   
  SHAR         RD26, 7, RQ9
  XOR          RD26, RQ9, RD26
// tk_core/tk_rwad.c:1482   
  AND          RD26, 255, RD26
// tk_core/tk_rwad.c:1484   
  MOV          tkdfs_utf_combhash, RQ27
  MOV.W        (RQ27, RD26), RD18
  MOV.L        RD26, (R2, 36)
// tk_core/tk_rwad.c:1485   
  BSR          .L00800F73, R0

.L00800F74:
// tk_core/tk_rwad.c:1486   
  MOV          tkdfs_utf_combarr, RQ27
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 0), RD8
// tk_core/tk_rwad.c:1488   
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 2), RD23
// tk_core/tk_rwad.c:1489   
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 6), RD21
// tk_core/tk_rwad.c:1490   
  MOV.L        (R2, 60), RD27
  CMPEQ.Q      RD8, RD27, RQ9
  MOV.L        (R2, 56), RD25
  CMPEQ.Q      RD23, RD25, RQ22
  AND          RQ9, RQ22, RQ20
  ADD          R0, 1, R5
  TSTN         RD21, R5, RQ9
  BTST.L       RQ9, RQ20, .L00800F75
// tk_core/tk_rwad.c:1491   
  MOV          tkdfs_utf_combarr, RQ27
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 4), RD27
  MOV.L        RD27, (R2, 40)
// tk_core/tk_rwad.c:1493   
  BSR          .L00800F76, R0

.L00800F75:
// tk_core/tk_rwad.c:1494   
  MOV.Q        tkdfs_utf_combchn, RQ27
  MOV.W        (RQ27, RD18), RD18

.L00800F73:
  BRGE.L       R0, RD18, .L00800F74

.L00800F76:
// tk_core/tk_rwad.c:1498   
  MOV.L        (R2, 40), RD27
  BRLE.L       R0, RD27, .L00800F77
// tk_core/tk_rwad.c:1499   
  MOV.Q        (R2, 48), RQ27
  MOV.L        (R2, 40), RD26
  MOV.L        RD26, (RQ27, 0)
// tk_core/tk_rwad.c:1501   
  ADD          R0, 1, RD10
  BSR          .L00C014B6, R0

.L00800F77:
// tk_core/tk_rwad.c:1504   
  MOV.Q        (R2, 48), RQ27
  MOV.L        (R2, 60), RD26
  MOV.L        RD26, (RQ27, 0)
// tk_core/tk_rwad.c:1505   
  ADD          R0, 0, RD10

.L00C014B6:
  ADD          R2, 264, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 88, R2
  JSR          R1, 0, R0
  .balign 4

M_Ticker:
// m_menu.c:1906   {
  MOV.W        skullAnimCounter, RD13
  ADDS.L       RD13, -1, RD13
  SHAD.Q       RD13, 48, RD13
  SHAR.Q       RD13, 48, RD13
  MOV.W        RD13, skullAnimCounter
  BRGT.L       R0, RD13, .L0080170A
// m_menu.c:1908   {
  MOV.W        whichSkull, RD13
  XOR          RD13, 1, RQ12
  SHAD.Q       RQ12, 48, RD13
  SHAR.Q       RD13, 48, RD13
// m_menu.c:1910   skullAnimCounter = 8;
  ADD          R0, 8, RD11
  MOV.W        RD13, whichSkull
  MOV.W        RD11, skullAnimCounter

.L0080170A:

.L00C014B7:
  JSR          R1, 0, R0
  .balign 4

A_Look:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:628   actor->threshold = 0;	// any shot will wake up
  MOV.L        RD0, (RQ9, 188)
// p_enemy.c:629   targ = actor->subsector->sector->soundtarget;
  MOV.Q        (RQ9, 88), RQ8
  MOV.Q        (RQ8, 0), RQ20
  MOV.Q        (RQ20, 24), RQ21
// p_enemy.c:634   if(1)
  MOV.L        (RQ9, 160), RQ18
  LUI          0x00010000, RD13
  BTSTN.L      RD13, RQ18, .L00C014BD
// p_enemy.c:640   if (targ
  BREQ.Q       R0, RQ21, .L00801B16
  MOV.L        (RQ21, 160), RQ18
  ADD          R0, 4, RD20
  BTST.L       RD20, RQ18, .L00801B16

.L00801B17:
// p_enemy.c:642   {
  MOV.Q        RQ21, (RQ9, 176)
  MOV.L        (RQ9, 160), RQ18
  ADD          R0, 32, RD20
  BTST.L       RD20, RQ18, .L00801B19
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B1A
// p_enemy.c:648   goto seeyou;
  BSR          .L00801B1B, R0

.L00801B1A:
  BSR          .L00801B1C, R0

.L00801B19:
// p_enemy.c:651   goto seeyou;
  BSR          .L00801B1B, R0

.L00801B1C:

.L00801B16:
// p_enemy.c:655   if (!P_LookForPlayers (actor, false) )
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_LookForPlayers, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C014BD
// p_enemy.c:659   seeyou:

.L00801B1B:
  MOV.Q        (RQ9, 136), RQ8
  MOV.L        (RQ8, 16), RQ18
  BREQ.L       R0, RQ18, .L00801B1D
// p_enemy.c:664   switch (actor->info->seesound)
  MOV.Q        (RQ9, 136), RQ8
  MOV.L        (RQ8, 16), RQ18
  BREQ.Q       36, RQ18, .L00801B1F
  BREQ.Q       37, RQ18, .L00801B20
  BREQ.Q       38, RQ18, .L00801B21
  BREQ.Q       39, RQ18, .L00801B22
  BREQ.Q       40, RQ18, .L00801B23
  BSR          .L00801B24, R0

.L00801B1F:

.L00801B20:

.L00801B21:
// p_enemy.c:668   case sfx_posit3:
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 3, RD20
  MODS.L       RQ23, RD20, RQ23
  ADDS.L       RQ23, 36, RD22
// p_enemy.c:670   break;
  BSR          .L00801B1E, R0

.L00801B22:

.L00801B23:
// p_enemy.c:673   case sfx_bgsit2:
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 2, RD20
  MODS.L       RQ23, RD20, RQ23
  ADDS.L       RQ23, 39, RD22
// p_enemy.c:675   break;
  BSR          .L00801B1E, R0

.L00801B24:
// p_enemy.c:677   default:
  MOV.Q        (RQ9, 136), RQ8
  MOV.L        (RQ8, 16), RD22
// p_enemy.c:679   break;

.L00801B1E:
// p_enemy.c:682   if (actor->type==MT_SPIDER
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       19, RQ18, .L00801B26
  MOV.L        (RQ9, 128), RQ23
  BREQ.Q       21, RQ23, .L00801B26
  BSR          .L00801B25, R0

.L00801B26:
// p_enemy.c:686   S_StartSound (NULL, sound);
  ADD          RQ0, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          S_StartSound, R1
  BSR          .L00801B28, R0

.L00801B25:
// p_enemy.c:689   S_StartSound (actor, sound);
  ADD          RQ9, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          S_StartSound, R1

.L00801B28:

.L00801B1D:
// p_enemy.c:692   P_SetMobjState (actor, actor->info->seestate);
  MOV.Q        (RQ9, 136), RQ8
  MOV.L        (RQ8, 12), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1

.L00C014BD:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

S_StopChannel:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD21
// s_sound.c:727   if((cnum<0) || (cnum>=8))
  CMPLT.Q      RD21, R0, RQ20
  ADD          R0, 8, R5
  CMPGE.Q      RD21, R5, RQ22
  OR           RQ20, RQ22, RQ27
  BRNE.L       R0, RQ27, .L00C014C3
// s_sound.c:730   channel_t*	c = &s_channels[cnum];
  MOV.Q        TU7A00CA3E/s_channels, RQ27
  ADD          R0, 24, R5
  MUL.L        RD21, R5, RQ9
  ADD          RQ27, RQ9, RQ9
  ADD          RQ9, 0, RQ8
// s_sound.c:732   if (c->sfxinfo)
  MOV.Q        (RQ8, 0), RQ9
  BREQ.Q       R0, RQ9, .L00802D73
  MOV.L        (RQ8, 16), RQ20
  ADD          RQ20, 0, RD10
  BSR          I_SoundIsPlaying, R1
  ADD          RQ10, 0, RQ22
  BREQ.L       R0, RQ22, .L00802D74
// s_sound.c:741   I_StopSound(c->handle);
  MOV.L        (RQ8, 16), RQ27
  ADD          RQ27, 0, RD10
  BSR          I_StopSound, R1

.L00802D74:
// s_sound.c:746   for (i=0 ; i<numChannels ; i++)
  ADD          R0, 0, RD18
  MOV.L        numChannels, RD27
  BRGE.L       RD27, RD18, .L00802D77

.L00802D75:
// s_sound.c:747   {
  BREQ.Q       RD18, RD21, .L00802D78
  MOV.Q        (RQ8, 0), RQ9
  MOV.Q        TU7A00CA3E/s_channels, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        (RQ13, 0), RQ23
  BRNE.Q       RQ23, RQ9, .L00802D78
  BSR          .L00802D77, R0

.L00802D78:
  ADDS.L       RD18, 1, RD18
  MOV.L        numChannels, RD27
  BRLT.L       RD27, RD18, .L00802D75

.L00802D77:
// s_sound.c:756   c->sfxinfo->usefulness--;
  MOV.Q        (RQ8, 0), RQ9
  MOV.L        (RQ9, 40), RQ20
  ADDS.L       RQ20, -1, RQ22
  MOV.L        RQ22, (RQ9, 40)
// s_sound.c:758   c->sfxinfo = 0;
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (RQ8, 0)

.L00802D73:

.L00C014C3:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

W_HashIndexForName:
// w_wad.c:1360   j = (((int *)(s))[0])+(((int *)(s))[1]);
  MOV.L        (RQ10, 0), RQ13
  MOV.L        (RQ10, 4), RQ12
  ADDS.L       RQ13, RQ12, RD11
// w_wad.c:1363   h = ((j*0xF14A83)>>24)&63;
  ADD          R0, 0x00F14A83, R5
  MULS.L       RD11, R5, RQ13
  SHAR         RQ13, 24, RQ12
  AND          RQ12, 63, RD17
// w_wad.c:1364   return(h);
  ADD          RD17, 0, RD10

.L00C014C4:
  JSR          R1, 0, R0
  .balign 4

P_SpawnStrobeFlash:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.Q        R20, (R2, 24)
  MOV.X        R26, (R2, 64)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 48)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  ADD          R0, 56, RD20
// p_lights.c:189   flash = Z_Malloc ( sizeof(*flash), PU_LEVSPEC, 0);
  ADD          R0, 56, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_lights.c:191   P_AddThinker (&flash->thinker);
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_AddThinker, R1
// p_lights.c:193   flash->sector = sector;
  MOV.Q        RQ22, (RQ18, 24)
// p_lights.c:194   flash->darktime = fastOrSlow;
  MOV.L        (R2, 116), RD27
  MOV.L        RD27, (RQ18, 44)
// p_lights.c:195   flash->brighttime = STROBEBRIGHT;
  ADD          R0, 5, RD26
  MOV.L        RD26, (RQ18, 48)
// p_lights.c:196   flash->thinker.function.acp1 = (actionf_p1) T_StrobeFlash;
  MOV          T_StrobeFlash, RQ23
  ADD          RQ18, 0, RQ25
  ADD          RQ25, 16, RQ24
  MOV.Q        RQ23, (RQ24, 0)
// p_lights.c:197   flash->maxlight = sector->lightlevel;
  MOV.W        (RQ22, 12), RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_lights.c:198   flash->minlight = P_FindMinSurroundingLight(sector, sector->lightlevel);
  ADD          RQ22, 0, RQ10
  SHAD.Q       RQ9, 48, RD11
  SHAR.Q       RD11, 48, RD11
  BSR          P_FindMinSurroundingLight, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 36)
// p_lights.c:200   if (flash->minlight == flash->maxlight)
  MOV.L        (RQ18, 36), RQ9
  MOV.L        (RQ18, 40), RQ8
  BRNE.Q       RQ8, RQ9, .L00801CF6
// p_lights.c:201   flash->minlight = 0;
  MOV.L        RD0, (RQ18, 36)

.L00801CF6:
// p_lights.c:204   sector->special = 0;	
  MOV.W        RD0, (RQ22, 14)
// p_lights.c:206   if (!inSync)
  MOV.L        (R2, 112), RD27
  BRNE.L       R0, RD27, .L00801CF7
// p_lights.c:207   flash->count = (P_Random()&7)+1;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 7, RQ8
  ADDS.L       RQ8, 1, RQ9
  MOV.L        RQ9, (RQ18, 32)
  BSR          .L00801CF8, R0

.L00801CF7:
// p_lights.c:209   flash->count = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 32)

.L00801CF8:

.L00C014CA:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R24
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

D_AddFile:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ21
// d_main.c:679   for (numwadfiles = 0 ; wadfiles[numwadfiles] ; numwadfiles++)
  ADD          R0, 0, RD18
  MOV          wadfiles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
  BREQ.Q       R0, RQ9, .L008013B5

.L008013B3:
  ADDS.L       RD18, 1, RD18
  MOV          wadfiles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
  BRNE.Q       R0, RQ9, .L008013B3

.L008013B5:
// d_main.c:682   newfile = malloc (strlen(file)+1);
  ADD          RQ21, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 1, RQ22
  ADD          RQ22, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ8
// d_main.c:683   strcpy (newfile, file);
  ADD          RQ8, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strcpy, R1
// d_main.c:685   wadfiles[numwadfiles] = newfile;
  MOV          wadfiles, RQ13
  MOV.Q        RQ8, (RQ13, RD18)
// d_main.c:686   wadfiles[numwadfiles+1] = NULL;
  ADDS.L       RD18, 1, RQ12
  MOV.Q        RQ0, (RQ13, RQ12)

.L00C014D0:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

fflush:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2802   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2804   
  MOV.L        RD0, (R2, 132)
// pdpc201/stdio.c:2806   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ18, 24), RQ8
  BREQ.Q       RQ8, RQ9, .L008004C5
  MOV.L        (RQ18, 84), RQ23
  BRNE.Q       1, RQ23, .L008004C5

.L008004C6:
// pdpc201/stdio.c:2807   
  ADD          R2, 132, RQ9
  MOV.Q        (RQ18, 40), RQ8
  MOV.Q        (RQ18, 24), RQ27
  SUB          RQ8, RQ27, RQ22
  MOV.Q        (RQ18, 24), RQ8
  MOV.L        (RQ18, 0), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ8, 0, RQ11
  ADD          RQ22, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __write, R1
  ADD          RQ10, 0, RQ21
  ADDS.L       RQ21, 0, RQ20
  MOV.L        (R2, 132), RD26
  BREQ.L       R0, RD26, .L008004C7
// pdpc201/stdio.c:2813   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// pdpc201/stdio.c:2815   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ20, 0, RQ23
  MOV.L        RQ23, (RQ9, 0)
// pdpc201/stdio.c:2816   
  ADD          R0, -1, RD10
  BSR          .L00C014D6, R0

.L008004C7:
// pdpc201/stdio.c:2819   
  MOV.Q        (RQ18, 16), RQ22
  ADD          RQ22, RQ20, RQ27
  MOV.Q        RQ27, (RQ18, 16)
// pdpc201/stdio.c:2820   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)

.L008004C5:
// pdpc201/stdio.c:2821   
  ADD          R0, 0, RD10

.L00C014D6:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

W_CheckNumForNameBase:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 124)
  MOV.Q        RQ11, (R2, 112)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// w_wad.c:1623   {
// w_wad.c:1636   if(base <= 0)
  MOV.L        (R2, 124), RD27
  BRGT.L       R0, RD27, .L00802936
// w_wad.c:1637   {

W_CheckNumForNameBase.debugbreak_L01CF:
  BRK          463
// w_wad.c:1639   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C014E1, R0

.L00802936:
// w_wad.c:1644   w_strupr_n(name8.s, name, 16);
  ADD          R2, 128, RQ27
  ADD          RQ27, 0, RQ10
  MOV.Q        (R2, 112), RQ11
  ADD          R0, 16, RD12
  BSR          w_strupr_n, R1
// w_wad.c:1652   v1 = name8.x[0];
  ADD          RQ27, 0, RQ26
  MOV.Q        (RQ26, 0), RQ21
// w_wad.c:1653   v2 = name8.x[1];
  MOV.Q        (RQ26, 8), RQ20
// w_wad.c:1656   h = W_HashIndexForName(name8.s);
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 0, RQ10
  BSR          W_HashIndexForName, R1
  ADD          RQ10, 0, RD25
// w_wad.c:1658   i=lumphash[h];
  MOV          lumphash, RQ24
  MOV.L        (RQ24, RD25), RD8
  MOV.L        RD25, (R2, 100)
// w_wad.c:1661   while(i >= base)
  BSR          .L00802939, R0

.L00802937:
// w_wad.c:1662   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD8, R5, RQ18
  ADD          RQ27, RQ18, RQ18
// w_wad.c:1664   i = lump_p->chain;
  MOV.L        (RQ18, 28), RD8
// w_wad.c:1665   continue;

.L00802939:
  MOV.L        (R2, 124), RD27
  BRGE.L       RD27, RD8, .L00802937

.L00802938:
// w_wad.c:1669   while(i >= 0)
  BSR          .L0080293C, R0

.L0080293A:
// w_wad.c:1670   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD8, R5, RQ18
  ADD          RQ27, RQ18, RQ18
// w_wad.c:1673   s=lump_p->name;
  ADD          RQ18, 0, RQ23
// w_wad.c:1674   if (	(*(u64 *)(s  ) == v1) &&
  MOV.Q        (RQ23, 0), RQ9
  BRNE.Q       RQ21, RQ9, .L0080293D
  ADD          RQ23, 8, RQ27
  MOV.Q        (RQ27, 0), RQ9
  BRNE.Q       RQ20, RQ9, .L0080293D
  BSR          .L0080293B, R0

.L0080293D:
// w_wad.c:1684   }
  MOV.L        (RQ18, 28), RD22
// w_wad.c:1686   if(j>=i)
  BRLT.L       RD8, RD22, .L0080293F
// w_wad.c:1687   { i=-999; break; }
  ADD          R0, -999, RD8
  BSR          .L0080293B, R0

.L0080293F:
  ADD          RD22, 0, RD8

.L0080293C:
  BRGE.L       R0, RD8, .L0080293A

.L0080293B:
// w_wad.c:1689   }
  BRLT.L       R0, RD8, .L00802940
// w_wad.c:1691   return(i);
  ADDS.L       RD8, 0, RD10
  BSR          .L00C014E1, R0

.L00802940:
// w_wad.c:1696   if(i == -999)
  BRNE.Q       -999, RD8, .L00802941
// w_wad.c:1697   {
  MOV          .L00C014E3, RQ10
  BSR          printf, R1
// w_wad.c:1704   lump_p = lumpinfo + base;
  MOV.Q        lumpinfo, RQ27
  MOV.L        (R2, 124), RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ18
  ADD          RQ27, RQ18, RQ18
// w_wad.c:1707   while (lump_p-- > lumpinfo)
  BSR          .L00802944, R0

.L00802942:
// w_wad.c:1708   {
  ADD          RQ18, 0, RQ23
// w_wad.c:1710   if (	(*(u64 *)(s  ) == v1) &&
  MOV.Q        (RQ23, 0), RQ9
  BRNE.Q       RQ21, RQ9, .L00802945
  ADD          RQ23, 8, RQ27
  MOV.Q        (RQ27, 0), RQ9
  BRNE.Q       RQ20, RQ9, .L00802945

.L00802946:
// w_wad.c:1714   {
  MOV.Q        lumpinfo, RQ27
  ADD          RQ18, 0, RQ9
  SUB          RQ9, RQ27, RQ9
  ADD          R0, 40, RD27
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 0, RQ26
  ADD          RQ26, 0, RD10
  BSR          .L00C014E1, R0

.L00802945:

.L00802944:
  ADD          RQ18, 0, RQ27
  ADD          RQ18, -40, RQ18
  MOV.Q        lumpinfo, RQ26
  BRGT.Q       RQ26, RQ27, .L00802942

.L00802943:

.L00802941:
// w_wad.c:1722   return -1;
  ADD          R0, -1, RD10

.L00C014E1:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

fseek:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
// pdpc201/stdio.c:2571   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2573   
  MOV.Q        (RQ18, 16), RQ20
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ18, 24), RQ21
  SUB          RQ9, RQ21, RQ8
  ADD          RQ20, RQ8, RQ27
  MOV.Q        RQ27, (R2, 112)
// pdpc201/stdio.c:2574   
  MOV.L        (RQ18, 84), RQ23
  BRNE.Q       1, RQ23, .L008004AD
// pdpc201/stdio.c:2575   
  ADD          RQ18, 0, RQ10
  BSR          fflush, R1

.L008004AD:
// pdpc201/stdio.c:2577   
  MOV.L        (R2, 124), RD27
  BRNE.L       R0, RD27, .L008004AE
// pdpc201/stdio.c:2579   
  MOV.Q        (R2, 128), RQ27
  ADD          RQ27, 0, RQ22
  BSR          .L008004AF, R0

.L008004AE:
  MOV.L        (R2, 124), RD27
  BRNE.Q       1, RD27, .L008004B0
// pdpc201/stdio.c:2583   
  MOV.Q        (R2, 112), RQ27
  MOV.Q        (R2, 128), RQ13
  ADD          RQ27, RQ13, RQ22

.L008004B0:

.L008004AF:
// pdpc201/stdio.c:2587   
  MOV.L        (R2, 124), RD27
  BRNE.Q       2, RD27, .L008004B1
// pdpc201/stdio.c:2588   
  MOV.L        (RQ18, 0), RQ23
  ADD          RQ23, 0, RD10
  MOV.Q        (R2, 128), RQ11
  ADD          R0, 2, RD12
  BSR          __seek, R1
// pdpc201/stdio.c:2590   
  MOV.L        (RQ18, 0), RQ23
  ADD          RQ23, 0, RD10
  BSR          __tell, R1
  ADD          RQ10, 0, RQ22
// pdpc201/stdio.c:2592   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ9, RQ8, RQ21
  MOV.Q        RQ21, (RQ18, 48)
// pdpc201/stdio.c:2593   
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:2594   
  MOV.Q        (RQ18, 32), RQ8
  SUB          RQ22, RQ8, RQ20
  MOV.Q        RQ20, (RQ18, 16)
  BSR          .L008004B2, R0

.L008004B1:
// pdpc201/stdio.c:2615   
  MOV.L        (RQ18, 0), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ22, 0, RQ11
  MOV.L        (R2, 124), RD12
  BSR          __seek, R1
// pdpc201/stdio.c:2617   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ9, RQ8, RQ21
  MOV.Q        RQ21, (RQ18, 48)
// pdpc201/stdio.c:2618   
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:2619   
  MOV.Q        (RQ18, 32), RQ8
  SUB          RQ22, RQ8, RQ20
  MOV.Q        RQ20, (RQ18, 16)

.L008004B2:
// pdpc201/stdio.c:2622   
  MOV.B        RD0, (RQ18, 8)
// pdpc201/stdio.c:2623   
  MOV.B        RD0, (RQ18, 9)
// pdpc201/stdio.c:2624   
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 64)
// pdpc201/stdio.c:2625   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2626   
  ADD          R0, 0, RD10

.L00C014E9:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Scream:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
  ADD          R0, 59, RD21
// p_enemy.c:1572   switch (actor->info->deathsound)
  MOV.Q        (RQ8, 136), RQ22
  MOV.L        (RQ22, 56), RQ18
  BREQ.L       R0, RQ18, .L00801B80
  BREQ.Q       59, RQ18, .L00801B81
  BREQ.Q       60, RQ18, .L00801B82
  BREQ.Q       61, RQ18, .L00801B83
  BREQ.Q       62, RQ18, .L00801B84
  BREQ.Q       63, RQ18, .L00801B85
  BSR          .L00801B86, R0

.L00801B80:
// p_enemy.c:1574   case 0:
  BSR          .L00C014EF, R0

.L00801B81:

.L00801B82:

.L00801B83:
// p_enemy.c:1579   case sfx_podth3:
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 3, RD20
  MODS.L       RQ9, RD20, RQ9
  ADDS.L       RQ9, 59, RD23
// p_enemy.c:1581   break;
  BSR          .L00801B7F, R0

.L00801B84:

.L00801B85:
// p_enemy.c:1584   case sfx_bgdth2:
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 2, RD20
  MODS.L       RQ9, RD20, RQ9
  ADDS.L       RQ9, 62, RD23
// p_enemy.c:1586   break;
  BSR          .L00801B7F, R0

.L00801B86:
// p_enemy.c:1588   default:
  MOV.Q        (RQ8, 136), RQ22
  MOV.L        (RQ22, 56), RD23
// p_enemy.c:1590   break;

.L00801B7F:
// p_enemy.c:1594   if (actor->type==MT_SPIDER
  MOV.L        (RQ8, 128), RQ18
  BREQ.Q       19, RQ18, .L00801B88
  MOV.L        (RQ8, 128), RQ9
  BREQ.Q       21, RQ9, .L00801B88
  BSR          .L00801B87, R0

.L00801B88:
// p_enemy.c:1598   S_StartSound (NULL, sound);
  ADD          RQ0, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          S_StartSound, R1
  BSR          .L00801B8A, R0

.L00801B87:
// p_enemy.c:1601   S_StartSound (actor, sound);
  ADD          RQ8, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          S_StartSound, R1

.L00801B8A:

.L00C014EF:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

R_VideoErase:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADDU.L       RD10, R0, RD9
  MOV.L        RD11, (R2, 104)
// r_draw.c:1983   memcpy (screens[0]+ofs, screens[1]+ofs, count*sizeof(dt_scrpix));
  MOV.L        (R2, 104), RD20
  SHAD.L       RD20, 1, RQ8
  MOV          screens, RQ27
  MOV.Q        (RQ27, 8), RQ18
  LEA.W        RQ18, RD9, RQ22
  MOV.Q        (RQ27, 0), RQ18
  LEA.W        RQ18, RD9, RQ23
  ADDS.L       RQ8, 0, RQ21
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RQ11
  ADD          RQ21, 0, RQ12
  BSR          memcpy, R1

.L00C014F5:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

fclose:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:635   
  BRNE.Q       R0, RQ18, .L00800328
// pdpc201/stdio.c:637   
  ADD          R0, -1, RD10
  BSR          .L00C014FB, R0

.L00800328:
// pdpc201/stdio.c:639   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:641   
  MOV.L        (RQ18, 100), RQ9
  BRNE.L       R0, RQ9, .L00800329
// pdpc201/stdio.c:642   
  ADD          R0, -1, RD10
  BSR          .L00C014FB, R0

.L00800329:
// pdpc201/stdio.c:644   
  ADD          RQ18, 0, RQ10
  BSR          fflush, R1
// pdpc201/stdio.c:646   
  MOV.L        (RQ18, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          __close, R1
// pdpc201/stdio.c:647   
  ADD          R0, 0, RD10

.L00C014FB:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_CheckTextureNumForName:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ21
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// r_data.c:2078   {
// r_data.c:2083   if (name[0] == '-')		
  MOV.B        (RQ21, 0), RQ9
  BREQ.Q       45, RQ9, .L00C0051D
// r_data.c:2086   w_strupr_n(tname, name, 8);
  ADD          R2, 112, RQ10
  ADD          RQ21, 0, RQ11
  ADD          R0, 8, RD12
  BSR          w_strupr_n, R1
// r_data.c:2087   tname[8]=0;
  ADD          R2, 112, RQ20
  MOV.B        RD0, (RQ20, 8)
// r_data.c:2089   h = W_HashIndexForName(tname);
  ADD          RQ20, 0, RQ10
  BSR          W_HashIndexForName, R1
  ADD          RQ10, 0, RD22
// r_data.c:2090   n = numtextures;
  MOV.L        numtextures, RD23
// r_data.c:2093   i = texturehash[h];
  MOV          texturehash, RQ27
  MOV.W        (RQ27, RD22), RD18
// r_data.c:2094   while(i>=0)
  BSR          .L0080257A, R0

.L00802578:
// r_data.c:2096   {
  MOV.Q        textures, RQ20
  MOV.Q        (RQ20, RD18), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R2, 112, RQ11
  ADD          R0, 8, RQ12
  BSR          memcmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L0080257B
  BRGE.L       R0, RD18, .L0080257C
// r_data.c:2100   {

R_CheckTextureNumForName.debugbreak_L01DA:
  BRK          474

.L0080257C:
// r_data.c:2102   }
  ADD          RD18, 0, RD10
  BSR          .L00C0150B, R0

.L0080257B:
// r_data.c:2104   }
  MOV.Q        textures, RQ20
  MOV.Q        (RQ20, RD18), RQ8
  MOV.W        (RQ8, 20), RD18
// r_data.c:2107   if(n<0)
  BRLT.L       R0, RD23, .L00802579
// r_data.c:2109   n--;
  ADDS.L       RD23, -1, RD23

.L0080257A:
  BRGE.L       R0, RD18, .L00802578

.L00802579:
// r_data.c:2115   if(i<0)
  BRGE.L       R0, RD18, .L0080257D
  MOV.L        numtextures, RD20
  BRNE.L       R0, RD20, .L0080257E
// r_data.c:2118   {
  MOV          .L00C0150D, RQ10
  BSR          printf, R1

.L0080257E:
// r_data.c:2122   for (i=0 ; i<numtextures ; i++)
  ADD          R0, 0, RD18
  MOV.L        numtextures, RD20
  BRGE.L       RD20, RD18, .L00802581

.L0080257F:
// r_data.c:2123   {
  MOV.Q        textures, RQ20
  MOV.Q        (RQ20, RD18), RQ27
  MOV.L        (RQ27, 12), RQ9
  ADD          R0, 0x00123456, RD20
  BREQ.Q       RD20, RQ9, .L00802582
// r_data.c:2125   { __debugbreak(); }

R_CheckTextureNumForName.debugbreak_L01DB:
  BRK          475

.L00802582:
// r_data.c:2130   if (!memcmp (textures[i]->name, tname, 8) )
  MOV.Q        textures, RQ20
  MOV.Q        (RQ20, RD18), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R2, 112, RQ11
  ADD          R0, 8, RQ12
  BSR          memcmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00802583
// r_data.c:2131   return i;
  ADD          RD18, 0, RD10
  BSR          .L00C0150B, R0

.L00802583:
  ADDS.L       RD18, 1, RD18
  MOV.L        numtextures, RD20
  BRLT.L       RD20, RD18, .L0080257F

.L00802581:

.L0080257D:
// r_data.c:2136   return -1;
  ADD          R0, -1, RD10
  BSR          .L00C0150B, R0

.L00C0051D:
  ADD          R0, 0, RQ10

.L00C0150B:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_puts:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_puts.c:822   
  ADD          RQ9, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RQ8
  ADD          RQ9, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          tk_puts_n, R1

.L00C01514:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TKDFS_UtfCheckSplit:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  ADD          RD10, 0, RD20
  MOV.Q        RQ11, (R2, 48)
  MOV.Q        RQ12, (R2, 40)
  MOV.L        RD13, (R2, 36)
// tk_core/tk_rwad.c:1441   
  ADD          R0, -1, RD13
  ADD          RD13, 0, RD22
  ADD          RD13, 0, RD21
// tk_core/tk_rwad.c:1442   
  SHAR         RD20, 7, RQ12
  XOR          RD20, RQ12, RQ11
  AND          RQ11, 255, RD10
// tk_core/tk_rwad.c:1443   
  MOV          tkdfs_utf_splithash, RQ17
  MOV.W        (RQ17, RD10), RD18
  MOV.L        RD10, (R2, 32)
// tk_core/tk_rwad.c:1444   
  BSR          .L00800F6E, R0

.L00800F6F:
// tk_core/tk_rwad.c:1445   
  MOV          tkdfs_utf_combarr, RQ13
  LEA.Q        RQ13, RD18, RQ12
  MOVU.W       (RQ12, 0), RD8
// tk_core/tk_rwad.c:1447   
  LEA.Q        RQ13, RD18, RQ12
  MOVU.W       (RQ12, 2), RD23
// tk_core/tk_rwad.c:1448   
  LEA.Q        RQ13, RD18, RQ12
  MOVU.W       (RQ12, 4), RD9
// tk_core/tk_rwad.c:1451   
  BRNE.Q       RD20, RD9, .L00800F70
// tk_core/tk_rwad.c:1452   
  ADD          RD8, 0, RD22
// tk_core/tk_rwad.c:1454   
  ADD          RD23, 0, RD21
// tk_core/tk_rwad.c:1455   
  BSR          .L00800F71, R0

.L00800F70:
// tk_core/tk_rwad.c:1458   
  MOV.Q        tkdfs_utf_splitchn, RQ13
  MOV.W        (RQ13, RD18), RD18

.L00800F6E:
  BRGE.L       R0, RD18, .L00800F6F

.L00800F71:
// tk_core/tk_rwad.c:1461   
  CMPGT.Q      RD22, R0, RQ13
  CMPGT.Q      RD21, R0, RQ12
  BTST.L       RQ12, RQ13, .L00800F72
// tk_core/tk_rwad.c:1462   
  MOV.Q        (R2, 48), RQ13
  MOV.L        RD22, (RQ13, 0)
// tk_core/tk_rwad.c:1464   
  MOV.Q        (R2, 40), RQ12
  MOV.L        RD21, (RQ12, 0)
// tk_core/tk_rwad.c:1465   
  ADD          R0, 1, RD10
  BSR          .L00C0151A, R0

.L00800F72:
// tk_core/tk_rwad.c:1468   
  MOV.Q        (R2, 48), RQ13
  MOV.L        RD20, (RQ13, 0)
// tk_core/tk_rwad.c:1469   
  MOV.Q        (R2, 40), RQ12
  ADD          R0, -1, RD11
  MOV.L        RD11, (RQ12, 0)
// tk_core/tk_rwad.c:1470   
  ADD          R0, 0, RD10

.L00C0151A:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

V_MarkRect:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD8
  ADDS.L       RD11, 0, RD9
  MOV.L        RD12, (R2, 100)
  MOV.L        RD13, (R2, 96)
// v_video.c:153   { 
  MOV          dirtybox, RQ10
  ADDS.L       RD8, 0, RD11
  ADDS.L       RD9, 0, RD12
  BSR          M_AddToBox, R1
// v_video.c:155   M_AddToBox (dirtybox, x+width-1, y+height-1); 
  MOV.L        (R2, 96), RD21
  ADDS.L       RD9, RD21, RQ18
  ADDS.L       RQ18, -1, RQ22
  MOV.L        (R2, 100), RD20
  ADDS.L       RD8, RD20, RQ18
  ADDS.L       RQ18, -1, RQ23
  MOV          dirtybox, RQ10
  ADD          RQ23, 0, RD11
  ADD          RQ22, 0, RD12
  BSR          M_AddToBox, R1

.L00C01520:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_BlockThingsIterator2:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 108)
  ADD          RD11, 0, RD21
  ADD          RQ12, 0, RQ8
// p_maputl.c:524   if ( x<0
  MOV.L        (R2, 108), RD13
  CMPLT.Q      RD13, R0, RQ18
  CMPLT.Q      RD21, R0, RQ23
  OR           RQ18, RQ23, RQ22
  MOV.L        bmapwidth, RD12
  CMPGE.Q      RD13, RD12, RQ18
  OR           RQ22, RQ18, RQ23
  MOV.L        bmapheight, RD12
  CMPGE.Q      RD21, RD12, RQ22
  OR           RQ23, RQ22, RQ18
  BREQ.L       R0, RQ18, .L00801DE9
// p_maputl.c:528   {
  ADD          R0, 1, RD10
  BSR          .L00C01526, R0

.L00801DE9:
// p_maputl.c:533   for (mobj = blocklinks[y*bmapwidth+x] ;
  MOV.L        bmapwidth, RD13
  MULS.L       RD21, RD13, RQ23
  MOV.L        (R2, 108), RD13
  ADDS.L       RQ23, RD13, RQ22
  MOV.Q        blocklinks, RQ12
  MOV.Q        (RQ12, RQ22), RQ9
  BREQ.Q       R0, RQ9, .L00801DEC

.L00801DEA:
// p_maputl.c:536   {
  ADD          RQ9, 0, RQ10
  JSR          RQ8, 0, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00528
  MOV.Q        (RQ9, 72), RQ9
  BRNE.Q       R0, RQ9, .L00801DEA

.L00801DEC:
// p_maputl.c:539   }
  ADD          R0, 1, RD10
  BSR          .L00C01526, R0

.L00C00528:
  ADD          R0, 0, RQ10

.L00C01526:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

VID_BlendEven4x16:
// i_btesh4.c:1844   pix=((pixa&0x7BDE7BDE7BDE7BDEULL)>>1)+
  ADD          R0, 0x7BDE7BDE, RQ13
  LDSH32       RQ13, 0x7BDE7BDE, RQ13
  AND          RQ10, RQ13, RQ12
  SHLR.Q       RQ12, 1, RQ17
  AND          RQ11, RQ13, RQ12
  SHLR.Q       RQ12, 1, RQ16
  ADD          RQ17, RQ16, RQ15
// i_btesh4.c:1846   return(pix);
  ADD          RQ15, 0, RQ10

.L00C01527:
  JSR          R1, 0, R0
  .balign 4

P_AcsRun_ThingCount:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 72)
  ADD          RD11, 0, RD18
  ADDS.L       RD12, 0, RD9
// p_acspec.c:982   printf("P_AcsRun_ThingCount: a1=%d a2=%d\n",
  MOV          .L00C0152E, RQ10
  ADD          RD18, 0, RD11
  ADDS.L       RD9, 0, RD12
  BSR          printf, R1
// p_acspec.c:985   a1 = P_SetupRemapThingType(a1);
  ADD          RD18, 0, RD10
  BSR          P_SetupRemapThingType, R1
  ADD          RQ10, 0, RD18
// p_acspec.c:987   v = EV_CountMObjForTid (a1, a2);
  ADD          RD18, 0, RD10
  ADDS.L       RD9, 0, RD11
  BSR          EV_CountMObjForTid, R1
// p_acspec.c:989   return(v);

.L00C0152D:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

HSendPacket:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
// d_net.c:165   {
  BSR          NetbufferChecksum, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (R2, 136), RD27
  ADDU.L       RD27, R0, RQ22
  OR           RQ18, RQ22, RQ8
  MOV.Q        netbuffer, RQ26
  MOVU.L       RQ8, (RQ26, 0)
// d_net.c:168   if (!node)
  MOV.L        (R2, 140), RD26
  BRNE.L       R0, RD26, .L0080143A
// d_net.c:169   {
  MOV.Q        netbuffer, RQ27
  ADD          RQ27, 0, RQ26
  MOV          reboundstore, RQ10
  ADD          RQ10, 0, RQ13
  ADD          RQ26, 0, RQ14
  ADD          R0, 13, RQ12

.L00C80011:
  MOV.Q        (RQ14, 0), RQ11
  MOV.Q        RQ11, (RQ13, 0)
  ADD          RQ14, 8, RQ14
  ADD          RQ13, 8, RQ13
  ADD          RQ12, -1, RQ12
  BRNE.Q       RQ12, R0, .L00C80011
// d_net.c:171   reboundpacket = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, reboundpacket
// d_net.c:172   return;
  BSR          .L00C01534, R0

.L0080143A:
// d_net.c:175   if (demoplayback)
  MOV.L        demoplayback, RD27
  BRNE.L       R0, RD27, .L00C01534
// d_net.c:178   if (!netgame)
  MOV.L        netgame, RD27
  BRNE.L       R0, RD27, .L0080143B
// d_net.c:179   I_Error ("Tried to transmit to another node");
  MOV          .L00C01535, RQ10
  BSR          I_Error, R1

.L0080143B:
// d_net.c:181   doomcom->command = CMD_SEND;
  ADD          R0, 1, RD27
  MOV.Q        doomcom, RQ26
  MOV.W        RD27, (RQ26, 10)
// d_net.c:182   doomcom->remotenode = node;
  MOV.L        (R2, 140), RD25
  MOV.W        RD25, (RQ26, 12)
// d_net.c:183   doomcom->datalength = NetbufferSize ();
  BSR          NetbufferSize, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        doomcom, RQ26
  MOV.W        RQ18, (RQ26, 14)
// d_net.c:185   if (debugfile)
  MOV.Q        debugfile, RQ26
  BREQ.Q       R0, RQ26, .L0080143C
// d_net.c:189   if (netbuffer->checksum & NCMD_RETRANSMIT)
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ8
  LUI          0x00040000, RD27
  BTST.L       RD27, RQ8, .L0080143D
// d_net.c:190   realretrans = ExpandTics (netbuffer->retransmitfrom);
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ22
  ADD          RQ22, 0, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RD21
  BSR          .L0080143E, R0

.L0080143D:
// d_net.c:192   realretrans = -1;
  ADD          R0, -1, RD21

.L0080143E:
// d_net.c:194   fprintf (debugfile,"send (%i + %i, R %i) [%i] ",
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ18
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 7), RQ8
  MOVU.B       (RQ27, 5), RQ22
  ADD          RQ22, 0, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RQ20
  MOV.Q        debugfile, RQ10
  MOV          .L00C01536, RQ11
  ADD          RQ20, 0, RD12
  AND          RQ8, 255, RD13
  ADD          RD21, 0, RD14
  ADD          RQ18, 0, RD15
  BSR          fprintf, R1
// d_net.c:198   for (i=0 ; i<doomcom->datalength ; i++)
  ADD          R0, 0, RD9
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ18
  BRGE.L       RQ18, RD9, .L00801441

.L0080143F:
// d_net.c:199   fprintf (debugfile,"%i ",((byte *)netbuffer)[i]);
  MOV.Q        netbuffer, RQ23
  MOVU.B       (RQ23, RD9), RQ18
  MOV.Q        debugfile, RQ10
  MOV          .L00C0132B, RQ11
  ADD          RQ18, 0, RD12
  BSR          fprintf, R1
  ADDS.L       RD9, 1, RD9
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 14), RQ8
  BRLT.L       RQ8, RD9, .L0080143F

.L00801441:
// d_net.c:201   fprintf (debugfile,"\n");
  MOV.Q        debugfile, RQ10
  MOV          .L00C01210, RQ11
  BSR          fprintf, R1

.L0080143C:
// d_net.c:204   I_NetCmd ();
  BSR          I_NetCmd, R1

.L00C01534:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

P_TryMove:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
// p_map.c:491   floatok = false;
  MOV.L        RD0, floatok
// p_map.c:492   if (!P_CheckPosition (thing, x, y))
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 116), RD11
  MOV.L        (R2, 112), RD12
  BSR          P_CheckPosition, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00534
// p_map.c:495   if ( !(thing->flags & MF_NOCLIP) )
  MOV.L        (RQ9, 160), RQ18
  LUI          1, RD27
  BTSTN.L      RD27, RQ18, .L00801D53
  MOV.L        tmceilingz, RD27
  MOV.L        tmfloorz, RD26
  SUBS.L       RD27, RD26, RQ18
  MOV.L        (RQ9, 108), RQ8
  BRLT.L       RQ8, RQ18, .L00C00534
// p_map.c:500   floatok = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, floatok
  MOV.L        (RQ9, 160), RQ18
  LUI          8, RD27
  BTSTN.L      RD27, RQ18, .L00801D54
  MOV.L        (RQ9, 32), RQ8
  MOV.L        tmceilingz, RD27
  SUBS.L       RD27, RQ8, RQ18
  MOV.L        (RQ9, 108), RQ8
  BRGE.L       RQ8, RQ18, .L00801D54
  BSR          .L00C00534, R0

.L00801D54:
  MOV.L        (RQ9, 160), RQ18
  LUI          8, RD27
  BTSTN.L      RD27, RQ18, .L00801D56
  MOV.L        (RQ9, 32), RQ8
  MOV.L        tmfloorz, RD27
  SUBS.L       RD27, RQ8, RQ18
  LUI          384, RD27
  BRLE.L       RD27, RQ18, .L00801D56
  BSR          .L00C00534, R0

.L00801D56:
  MOV.L        (RQ9, 160), RQ8
  LDIZ         17408, RD27
  TSTN         RQ8, RD27, RQ18
  MOV.L        tmfloorz, RD26
  MOV.L        tmdropoffz, RD25
  SUBS.L       RD26, RD25, RQ8
  LUI          384, RD26
  CMPGT.Q      RQ8, RD26, RQ20
  BTSTN.L      RQ20, RQ18, .L00C00534

.L00801D53:
// p_map.c:517   P_UnsetThingPosition (thing);
  ADD          RQ9, 0, RQ10
  BSR          P_UnsetThingPosition, R1
// p_map.c:519   oldx = thing->x;
  MOV.L        (RQ9, 24), RD27
  MOV.L        RD27, (R2, 108)
// p_map.c:520   oldy = thing->y;
  MOV.L        (RQ9, 28), RD26
  MOV.L        RD26, (R2, 104)
// p_map.c:521   thing->floorz = tmfloorz;
  MOV.L        tmfloorz, RD25
  MOV.L        RD25, (RQ9, 96)
// p_map.c:522   thing->ceilingz = tmceilingz;	
  MOV.L        tmceilingz, RD25
  MOV.L        RD25, (RQ9, 100)
// p_map.c:523   thing->x = x;
  MOV.L        (R2, 116), RD25
  MOV.L        RD25, (RQ9, 24)
// p_map.c:524   thing->y = y;
  MOV.L        (R2, 112), RD27
  MOV.L        RD27, (RQ9, 28)
// p_map.c:526   P_SetThingPosition (thing);
  ADD          RQ9, 0, RQ10
  BSR          P_SetThingPosition, R1
// p_map.c:528   if(numspechit<0)
  MOV.L        numspechit, RD13
  BRGE.L       R0, RD13, .L00801D58
// p_map.c:529   {

P_TryMove.debugbreak_L01E1:
  BRK          481
// p_map.c:531   numspechit = 0;	//BGB debug
  MOV.L        RD0, numspechit

.L00801D58:
// p_map.c:535   if (! (thing->flags&(MF_TELEPORT|MF_NOCLIP)) )
  MOV.L        (RQ9, 160), RQ18
  LUI          9, RD27
  BTSTN.L      RD27, RQ18, .L00801D59
// p_map.c:536   {
  BSR          .L00801D5C, R0

.L00801D5A:
// p_map.c:540   ld = spechit[numspechit];
  MOV          spechit, RQ27
  MOV.L        numspechit, RD26
  MOV.Q        (RQ27, RD26), RQ23
// p_map.c:541   side = P_PointOnLineSide (thing->x, thing->y, ld);
  MOV.L        (RQ9, 28), RQ8
  MOV.L        (RQ9, 24), RQ20
  ADD          RQ20, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD21
// p_map.c:542   oldside = P_PointOnLineSide (oldx, oldy, ld);
  MOV.L        (R2, 108), RD10
  MOV.L        (R2, 104), RD11
  ADD          RQ23, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD22
// p_map.c:543   if (side != oldside)
  BREQ.Q       RD22, RD21, .L00801D5D
  MOV.W        (RQ23, 26), RQ18
  BREQ.L       R0, RQ18, .L00801D5E
// p_map.c:546   P_CrossSpecialLine (ld-lines, oldside, thing);
  MOV.Q        lines, RQ27
  ADD          RQ23, 0, RQ26
  SUB          RQ26, RQ27, RQ26
  ADD          R0, 96, RD27
  DIVS.L       RQ26, RD27, RQ26
  ADDS.L       RQ26, 0, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RQ9, 0, RQ12
  BSR          P_CrossSpecialLine, R1

.L00801D5E:

.L00801D5D:

.L00801D5C:
  MOV.L        numspechit, RD27
  ADD          RD27, 0, RQ8
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, numspechit
  BRNE.L       R0, RQ8, .L00801D5A

.L00801D5B:

.L00801D59:
// p_map.c:551   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01541, R0

.L00C00534:
  ADD          R0, 0, RQ10

.L00C01541:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

G_CheckSpot:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD20
  ADD          RQ11, 0, RQ21
// g_game.c:878   if (!players[playernum].mo)
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ8
  BRNE.Q       R0, RQ8, .L00801593
// g_game.c:881   for (i=0 ; i<playernum ; i++)
  ADD          R0, 0, RD22
  BRGE.L       RD20, RD22, .L00801596

.L00801594:
// g_game.c:882   if (players[i].mo->x == (mthing->x << FRACBITS)
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ8
  MOV.L        (RQ8, 24), RQ18
  MOV.W        (RQ21, 2), RQ9
  SHAD.L       RQ9, 16, RQ23
  BRNE.Q       RQ23, RQ18, .L00801597
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ8
  MOV.L        (RQ8, 28), RQ18
  MOV.W        (RQ21, 4), RQ9
  SHAD.L       RQ9, 16, RQ23
  BRNE.Q       RQ23, RQ18, .L00801597
  BSR          .L00C0053A, R0

.L00801597:
  ADDS.L       RD22, 1, RD22
  BRLT.L       RD20, RD22, .L00801594

.L00801596:
// g_game.c:885   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01548, R0

.L00801593:
// g_game.c:888   x = mthing->x << FRACBITS;
  MOV.W        (RQ21, 2), RQ18
  SHAD.L       RQ18, 16, RD27
  MOV.L        RD27, (R2, 140)
// g_game.c:889   y = mthing->y << FRACBITS;
  MOV.W        (RQ21, 4), RQ9
  SHAD.L       RQ9, 16, RD26
  MOV.L        RD26, (R2, 136)
// g_game.c:891   if (!P_CheckPosition (players[playernum].mo, x, y) )
  MOV          players, RQ25
  ADD          R0, 320, R5
  MUL.L        RD20, R5, RQ24
  ADD          RQ25, RQ24, RQ24
  MOV.Q        (RQ24, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RD27, 0, RD11
  ADD          RD26, 0, RD12
  BSR          P_CheckPosition, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C0053A
// g_game.c:895   if (bodyqueslot >= BODYQUESIZE)
  MOV.L        bodyqueslot, RD27
  BRLT.L       32, RD27, .L00801599
// g_game.c:896   P_RemoveMobj (bodyque[bodyqueslot%BODYQUESIZE]);
  MOV.L        bodyqueslot, RQ9
  ADD          R0, 32, RD27
  MODS.L       RQ9, RD27, RQ9
  MOV          bodyque, RQ26
  MOV.Q        (RQ26, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_RemoveMobj, R1

.L00801599:
// g_game.c:897   bodyque[bodyqueslot%BODYQUESIZE] = players[playernum].mo;
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ8
  MOV.L        bodyqueslot, RD27
  ADD          RD27, 0, RQ18
  ADD          R0, 32, RD25
  MODS.L       RQ18, RD25, RQ18
  MOV          bodyque, RQ24
  MOV.Q        RQ8, (RQ24, RQ18)
// g_game.c:898   bodyqueslot++;
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, bodyqueslot
// g_game.c:901   ss = R_PointInSubsector (x,y);
  MOV.L        (R2, 140), RD10
  MOV.L        (R2, 136), RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ27
// g_game.c:902   an = ( ANG45 * (mthing->angle/45) ) >> ANGLETOFINESHIFT;
  MOV.W        (RQ21, 8), RQ9
  ADD          R0, 45, R5
  DIVS.L       RQ9, R5, RQ23
  SHAD.L       RQ23, 29, RQ18
  SHAR         RQ18, 19, RQ9
  ADDU.L       RQ9, R0, RD24
// g_game.c:904   mo = P_SpawnMobj (x+20*finecosine[an], y+20*finesine[an]
  MOV.Q        (RQ27, 0), RQ8
  MOV.Q        RQ27, (R2, 128)
  MOV.L        (RQ8, 0), RQ18
  MOV          finesine, RQ19
  MOV.L        (RQ19, RD24), RQ9
  ADD          R0, 20, R5
  MULS.L       RQ9, R5, RQ23
  MOV.L        (R2, 136), RD19
  ADDS.L       RD19, RQ23, RQ9
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD24), RQ23
  MOV.L        RD24, (R2, 124)
  ADD          R0, 20, R5
  MULS.L       RQ23, R5, RQ27
  MOV.L        (R2, 140), RD26
  ADDS.L       RD26, RQ27, RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 112)
// g_game.c:908   if (players[consoleplayer].viewz != 1)
  MOV          players, RQ25
  MOV.L        consoleplayer, RD27
  ADD          R0, 320, R5
  MUL.L        RD27, R5, RQ19
  ADD          RQ25, RQ19, RQ19
  MOV.L        (RQ19, 20), RQ18
  BREQ.Q       1, RQ18, .L0080159A
// g_game.c:909   S_StartSound (mo, sfx_telept);	// don't start sound on first frame
  MOV.Q        (R2, 112), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1

.L0080159A:
// g_game.c:911   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01548, R0

.L00C0053A:
  ADD          R0, 0, RQ10

.L00C01548:
  ADD          R2, 344, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Pain:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:1611   {
  MOV.Q        (RQ8, 136), RQ18
  MOV.L        (RQ18, 36), RQ9
  BREQ.L       R0, RQ9, .L00801B8B
// p_enemy.c:1613   S_StartSound (actor, actor->info->painsound);	
  MOV.Q        (RQ8, 136), RQ18
  MOV.L        (RQ18, 36), RQ9
  ADD          RQ8, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          S_StartSound, R1

.L00801B8B:

.L00C0154E:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

W_CacheLumpName:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 84)
// w_wad.c:2157   {
  ADD          RQ8, 0, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        (R2, 84), RD11
  BSR          W_CacheLumpNum, R1

.L00C01554:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

PIT_CheckLine:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
// p_map.c:194   {
  MOV          tmbbox, RQ23
  MOV.L        (RQ23, 12), RQ18
  MOV.L        (RQ8, 48), RQ9
  BRLE.L       RQ9, RQ18, .L00801D24
  MOV          tmbbox, RQ23
  MOV.L        (RQ23, 8), RQ18
  MOV.L        (RQ8, 52), RQ9
  BRGE.L       RQ9, RQ18, .L00801D24

.L00801D26:
  MOV          tmbbox, RQ23
  MOV.L        (RQ23, 0), RQ18
  MOV.L        (RQ8, 44), RQ9
  BRLE.L       RQ9, RQ18, .L00801D24

.L00801D25:
  MOV          tmbbox, RQ23
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (RQ8, 40), RQ9
  BRGE.L       RQ9, RQ18, .L00801D24
  BSR          .L00801D23, R0

.L00801D24:
// p_map.c:199   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01564, R0

.L00801D23:
// p_map.c:201   if (P_BoxOnLineSide (tmbbox, ld) != -1)
  MOV          tmbbox, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_BoxOnLineSide, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       -1, RQ18, .L00801D28
// p_map.c:202   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01564, R0

.L00801D28:
// p_map.c:215   if (!ld->backsector)
  MOV.Q        (RQ8, 72), RQ23
  BREQ.Q       R0, RQ23, .L00C00542
// p_map.c:218   if (!(tmthing->flags & MF_MISSILE) )
  MOV.Q        tmthing, RQ23
  MOV.L        (RQ23, 160), RQ9
  LUI          16, RD23
  BTSTN.L      RD23, RQ9, .L00801D29
  MOV.W        (RQ8, 24), RQ18
  ADD          R0, 1, RD23
  BTSTN.L      RD23, RQ18, .L00C00542
  MOV.Q        tmthing, RQ23
  MOV.Q        (RQ23, 192), RQ13
  BRNE.Q       R0, RQ13, .L00801D2A
  MOV.W        (RQ8, 24), RQ9
  ADD          R0, 2, RD23
  BTST.L       RD23, RQ9, .L00801D2A
  BSR          .L00C00542, R0

.L00801D2A:

.L00801D29:
// p_map.c:228   P_LineOpening (ld);	
  ADD          RQ8, 0, RQ10
  BSR          P_LineOpening, R1
// p_map.c:231   if (opentop < tmceilingz)
  MOV.L        opentop, RD23
  MOV.L        tmceilingz, RD13
  BRGE.L       RD13, RD23, .L00801D2C
// p_map.c:232   {
  MOV.L        opentop, RD23
  ADD          RD23, 0, RD13
  MOV.L        RD13, tmceilingz
// p_map.c:234   ceilingline = ld;
  MOV.Q        RQ8, ceilingline

.L00801D2C:
// p_map.c:237   if (openbottom > tmfloorz)
  MOV.L        openbottom, RD23
  MOV.L        tmfloorz, RD13
  BRLE.L       RD13, RD23, .L00801D2D
// p_map.c:238   tmfloorz = openbottom;	
  MOV.L        openbottom, RD23
  ADD          RD23, 0, RD13
  MOV.L        RD13, tmfloorz

.L00801D2D:
// p_map.c:240   if (lowfloor < tmdropoffz)
  MOV.L        lowfloor, RD23
  MOV.L        tmdropoffz, RD13
  BRGE.L       RD13, RD23, .L00801D2E
// p_map.c:241   tmdropoffz = lowfloor;
  MOV.L        lowfloor, RD23
  ADD          RD23, 0, RD13
  MOV.L        RD13, tmdropoffz

.L00801D2E:
// p_map.c:243   if(numspechit < 0)
  MOV.L        numspechit, RD23
  BRGE.L       R0, RD23, .L00801D2F
// p_map.c:244   { __debugbreak(); }

PIT_CheckLine.debugbreak_L01EC:
  BRK          492

.L00801D2F:
// p_map.c:247   if (ld->special)
  MOV.W        (RQ8, 26), RQ18
  BREQ.L       R0, RQ18, .L00801D30
// p_map.c:248   {
  MOV          spechit, RQ23
  MOV.L        numspechit, RD13
  MOV.Q        RQ8, (RQ23, RD13)
// p_map.c:250   numspechit++;
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, numspechit
  BRLT.L       8, RD13, .L00801D31
// p_map.c:253   { __debugbreak(); }

PIT_CheckLine.debugbreak_L01ED:
  BRK          493

.L00801D31:

.L00801D30:
// p_map.c:256   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01564, R0

.L00C00542:
  ADD          R0, 0, RQ10

.L00C01564:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

NetUpdate:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// d_net.c:396   I_MusicFineTick();
  BSR          I_MusicFineTick, R1
// d_net.c:397   D_UpdateSound();
  BSR          D_UpdateSound, R1
// d_net.c:401   nowtime = NetDivTicdup(I_GetTime ());
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD10
  BSR          NetDivTicdup, R1
  ADD          RQ10, 0, RD27
// d_net.c:402   newtics = nowtime - gametime;
  MOV.L        gametime, RD26
  SUBS.L       RD27, RD26, RD21
// d_net.c:403   gametime = nowtime;
  ADD          RD27, 0, RD26
  MOV.L        RD26, gametime
  MOV.L        RD27, (R2, 108)
// d_net.c:405   if (newtics <= 0)		 // nothing new to update
  BRGT.L       R0, RD21, .L00801461
// d_net.c:406   goto listen; 
  BSR          .L00801462, R0

.L00801461:
// d_net.c:408   if (skiptics <= newtics)
  MOV.L        skiptics, RD27
  BRGT.L       RD21, RD27, .L00801463
// d_net.c:409   {
  MOV.L        skiptics, RD27
  SUBS.L       RD21, RD27, RD21
// d_net.c:411   skiptics = 0;
  ADD          R0, 0, RD27
  MOV.L        RD27, skiptics
  BSR          .L00801464, R0

.L00801463:
// d_net.c:414   {
  MOV.L        skiptics, RD27
  SUBS.L       RD27, RD21, RD27
  MOV.L        RD27, skiptics
// d_net.c:416   newtics = 0;
  ADD          R0, 0, RD21

.L00801464:
// d_net.c:420   netbuffer->player = consoleplayer;
  MOV.L        consoleplayer, RD27
  MOV.Q        netbuffer, RQ26
  MOVU.B       RD27, (RQ26, 6)
// d_net.c:424   gameticdiv = NetDivTicdup(gametic);
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADD          RQ10, 0, RD20
// d_net.c:425   for (i=0 ; i<newtics ; i++)
  ADD          R0, 0, RD9
  BRGE.L       RD21, RD9, .L00801467

.L00801465:
// d_net.c:426   {
  BSR          I_StartTic, R1
// d_net.c:428   D_ProcessEvents ();
  BSR          D_ProcessEvents, R1
// d_net.c:429   if (maketic - gameticdiv >= BACKUPTICS/2-1)
  MOV.L        maketic, RD27
  SUBS.L       RD27, RD20, RQ18
  BRGE.L       5, RQ18, .L00801467
// d_net.c:433   G_BuildTiccmd (&localcmds[maketic%BACKUPTICS]);
  MOV.L        maketic, RQ18
  ADD          R0, 12, RD27
  MODS.L       RQ18, RD27, RQ18
  MOV          localcmds, RQ26
  LEA.Q        RQ26, RQ18, RQ10
  BSR          G_BuildTiccmd, R1
// d_net.c:434   maketic++;
  MOV.L        maketic, RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, maketic
  ADDS.L       RD9, 1, RD9
  BRLT.L       RD21, RD9, .L00801465

.L00801467:
// d_net.c:438   if (singletics)
  MOV.L        singletics, RD27
  BRNE.L       R0, RD27, .L00C0156C
// d_net.c:442   for (i=0 ; i<doomcom->numnodes ; i++)
  ADD          R0, 0, RD9
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ18
  BRGE.L       RQ18, RD9, .L0080146A

.L00801468:
// d_net.c:443   if (nodeingame[i])
  MOV          nodeingame, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L0080146B
// d_net.c:444   {
  MOV          resendto, RQ27
  MOV.L        (RQ27, RD9), RQ18
  ADD          RQ18, 0, RD22
  MOV.Q        netbuffer, RQ27
  MOVU.B       RQ18, (RQ27, 5)
// d_net.c:446   netbuffer->numtics = maketic - realstart;
  MOV.L        maketic, RD26
  SUBS.L       RD26, RD22, RQ18
  MOVU.B       RQ18, (RQ27, 7)
  MOVU.B       (RQ27, 7), RQ18
  BRLE.L       12, RQ18, .L0080146C
// d_net.c:448   I_Error ("NetUpdate: netbuffer->numtics > BACKUPTICS");
  MOV          .L00C0156D, RQ10
  BSR          I_Error, R1

.L0080146C:
// d_net.c:450   resendto[i] = maketic - doomcom->extratics;
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 20), RQ18
  MOV.L        maketic, RD27
  SUBS.L       RD27, RQ18, RQ23
  MOV          resendto, RQ27
  MOV.L        RQ23, (RQ27, RD9)
// d_net.c:452   for (j=0 ; j< netbuffer->numtics ; j++)
  ADD          R0, 0, RD8
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 7), RQ18
  BRGE.L       RQ18, RD8, .L0080146F

.L0080146D:
// d_net.c:453   netbuffer->cmds[j] = 
  ADDS.L       RD22, RD8, RQ23
  ADD          RQ23, 0, RQ18
  ADD          R0, 12, RD27
  MODS.L       RQ18, RD27, RQ18
  MOV          localcmds, RQ26
  LEA.Q        RQ26, RQ18, RQ25
  MOV.Q        netbuffer, RQ26
  ADD          RQ26, 8, RQ27
  LEA.Q        RQ27, RD8, RQ10
  MOV.Q        (RQ25, 0), RQ11
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ25, (R2, 72)
  ADDS.L       RD8, 1, RD8
  MOVU.B       (RQ26, 7), RQ23
  BRLT.L       RQ23, RD8, .L0080146D

.L0080146F:
  MOV          remoteresend, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L00801470
// d_net.c:457   {
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD9), RQ23
  MOV.Q        netbuffer, RQ27
  MOVU.B       RQ23, (RQ27, 4)
// d_net.c:459   HSendPacket (i, NCMD_RETRANSMIT);
  ADDS.L       RD9, 0, RD10
  LUI          0x00040000, RD11
  BSR          HSendPacket, R1
  BSR          .L00801471, R0

.L00801470:
// d_net.c:462   {
  MOV.Q        netbuffer, RQ27
  MOVU.B       RD0, (RQ27, 4)
// d_net.c:464   HSendPacket (i, 0);
  ADDS.L       RD9, 0, RD10
  ADD          R0, 0, RD11
  BSR          HSendPacket, R1

.L00801471:

.L0080146B:
  ADDS.L       RD9, 1, RD9
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ18
  BRLT.L       RQ18, RD9, .L00801468

.L0080146A:
// d_net.c:469   listen:

.L00801462:
  BSR          GetPackets, R1

.L00C0156C:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

strncpy:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.Q        RQ10, (R2, 56)
  ADD          RQ11, 0, RQ23
  MOV.Q        RQ12, (R2, 40)
// pdpc201/string.c:177   
  MOV.Q        (R2, 56), RQ18
// pdpc201/string.c:179   
  ADD          RQ0, 0, RQ9
  MOV.Q        (R2, 40), RQ13
  BRGEU.Q      RQ13, RQ9, .L0080060C

.L0080060D:
// pdpc201/string.c:182   
  MOV.Q        (RQ23, 0), RQ20
// pdpc201/string.c:183   
  MOV.Q        (R2, 40), RQ13
  SUB          RQ13, RQ9, RQ22
// pdpc201/string.c:184   
  ADD          R0, 0x7F7F7F7F, RQ12
  LDSH32       RQ12, 0x7F7F7F7F, RQ12
  ADD          RQ20, RQ12, RQ11
// pdpc201/string.c:185   
  OR           RQ20, RQ11, RQ10
  MOV.Q        RQ11, (R2, 32)
// pdpc201/string.c:186   
  ADD          R0, 0xFFFFFFFF80808080, RQ17
  LDSH32       RQ17, 0x0000000080808080, RQ17
  AND          RQ10, RQ17, RQ8
  MOV.Q        RQ10, (R2, 24)
  BRNE.Q       RQ17, RQ8, .L0080060E
  BRLTU.Q      8, RQ22, .L0080060F
// pdpc201/string.c:189   
  MOV.Q        RQ20, (RQ18, 0)
// pdpc201/string.c:191   
  ADD          RQ18, 8, RQ18
  ADD          RQ23, 8, RQ23
// pdpc201/string.c:192   
  ADD          RQ9, 7, RQ9
// pdpc201/string.c:193   
  BSR          .L00800610, R0

.L0080060F:

.L0080060E:
// pdpc201/string.c:197   
  MOV.Q        (R2, 24), RQ13
  ADD          R0, 0x0000000080808080, RQ12
  AND          RQ13, RQ12, RQ8
  BRNE.Q       RQ12, RQ8, .L00800611
  BRLTU.Q      4, RQ22, .L00800612
// pdpc201/string.c:200   
  ADDU.L       RQ20, R0, RQ21
  MOVU.L       RQ21, (RQ18, 0)
// pdpc201/string.c:202   
  ADD          RQ18, 4, RQ18
  ADD          RQ23, 4, RQ23
// pdpc201/string.c:203   
  ADD          RQ9, 3, RQ9
// pdpc201/string.c:204   
  BSR          .L00800610, R0

.L00800612:

.L00800611:
// pdpc201/string.c:209   
  MOV.B        (RQ23, 0), RQ21
  MOV.B        RQ21, (RQ18, 0)
// pdpc201/string.c:210   
  MOV.B        (RQ23, 0), RQ21
  BREQ.L       R0, RQ21, .L0080060C
// pdpc201/string.c:211   
  ADD          RQ18, 1, RQ18
// pdpc201/string.c:212   
  ADD          RQ23, 1, RQ23

.L00800610:
  ADD          RQ9, 1, RQ9
  MOV.Q        (R2, 40), RQ13
  BRLTU.Q      RQ13, RQ9, .L0080060D

.L0080060C:
// pdpc201/string.c:213   
  MOV.Q        (R2, 40), RQ13
  BRGEU.Q      RQ13, RQ9, .L00800613

.L00800614:
// pdpc201/string.c:217   
  MOV.Q        (R2, 40), RQ13
  SUB          RQ13, RQ9, RQ22
// pdpc201/string.c:219   
  BRLTU.Q      16, RQ22, .L00800615
// pdpc201/string.c:220   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (RQ18, 0)
// pdpc201/string.c:222   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (RQ18, 8)
// pdpc201/string.c:223   
  ADD          RQ18, 16, RQ18
  ADD          RQ9, 15, RQ9
// pdpc201/string.c:224   
  BSR          .L00800616, R0

.L00800615:
// pdpc201/string.c:225   
  BRLTU.Q      8, RQ22, .L00800617
// pdpc201/string.c:227   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (RQ18, 0)
// pdpc201/string.c:229   
  ADD          RQ18, 8, RQ18
  ADD          RQ9, 7, RQ9
// pdpc201/string.c:230   
  BSR          .L00800616, R0

.L00800617:
// pdpc201/string.c:231   
  BRLTU.Q      4, RQ22, .L00800618
// pdpc201/string.c:233   
  MOVU.L       RD0, (RQ18, 0)
// pdpc201/string.c:235   
  ADD          RQ18, 4, RQ18
  ADD          RQ9, 3, RQ9
// pdpc201/string.c:236   
  BSR          .L00800616, R0

.L00800618:
// pdpc201/string.c:239   
  ADD          RQ18, 0, RQ13
  ADD          RQ18, 1, RQ18
  MOV.B        RD0, (RQ13, 0)

.L00800616:
  ADD          RQ9, 1, RQ9
  MOV.Q        (R2, 40), RQ13
  BRLTU.Q      RQ13, RQ9, .L00800614

.L00800613:
// pdpc201/string.c:240   
  MOV.Q        (R2, 56), RQ10

.L00C01573:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

TK_ReadCharUtf8:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -280, R2
  ADD          RQ10, 0, RQ20
// tk_core/tk_puts.c:747   
  MOV.Q        (RQ20, 0), RQ9
// tk_core/tk_puts.c:748   
  ADD          RQ9, 0, RQ13
  MOVU.B       (RQ9, 0), RD23
  ADD          RQ13, 1, RQ9
// tk_core/tk_puts.c:749   
  ADD          R0, 128, RD12
  BTSTN.L      RD12, RD23, .L00800BF3
// tk_core/tk_puts.c:750   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:752   
  ADD          RD23, 0, RD10
  BSR          .L00C01579, R0
  BSR          .L00800BF4, R0

.L00800BF3:
  ADD          R0, 64, RD13
  BTSTN.L      RD13, RD23, .L00800BF5
// tk_core/tk_puts.c:756   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:758   
  ADD          RD23, 0, RD10
  BSR          .L00C01579, R0
  BSR          .L00800BF6, R0

.L00800BF5:
  ADD          R0, 32, RD13
  BTSTN.L      RD13, RD23, .L00800BF7
// tk_core/tk_puts.c:761   
  MOVU.B       (RQ9, 0), RD21
  AND          RD21, 192, RQ18
  BRNE.Q       128, RQ18, .L00800BF8
// tk_core/tk_puts.c:764   
  ADD          RQ9, 1, RQ9
// tk_core/tk_puts.c:766   
  AND          RD23, 31, RQ18
  SHAD.L       RQ18, 6, RQ8
  AND          RD21, 63, RQ18
  OR           RQ8, RQ18, RD23
// tk_core/tk_puts.c:767   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:768   
  ADD          RD23, 0, RD10
  BSR          .L00C01579, R0

.L00800BF8:
  BSR          .L00800BF9, R0

.L00800BF7:
  ADD          R0, 16, RD13
  BTSTN.L      RD13, RD23, .L00800BFA
// tk_core/tk_puts.c:772   
  MOVU.B       (RQ9, 0), RD21
// tk_core/tk_puts.c:774   
  MOVU.B       (RQ9, 1), RD13
  AND          RD21, 192, RQ8
  ADD          R0, 128, R5
  CMPEQ.Q      RQ8, R5, RQ18
  AND          RD13, 192, RQ8
  MOV.L        RD13, (R2, 36)
  ADD          R0, 128, R5
  CMPEQ.Q      RQ8, R5, RQ22
  BTST.L       RQ22, RQ18, .L00800BFB
// tk_core/tk_puts.c:776   
  ADD          RQ9, 2, RQ9
// tk_core/tk_puts.c:778   
  AND          RD23, 15, RQ18
  SHAD.L       RQ18, 12, RQ8
  AND          RD21, 63, RQ22
  SHAD.L       RQ22, 6, RQ18
  OR           RQ8, RQ18, RQ22
  MOV.L        (R2, 36), RD13
  AND          RD13, 63, RQ18
  OR           RQ22, RQ18, RD23
// tk_core/tk_puts.c:779   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:780   
  ADD          RD23, 0, RD10
  BSR          .L00C01579, R0

.L00800BFB:
  BSR          .L00800BFC, R0

.L00800BFA:
  ADD          R0, 8, RD13
  BTSTN.L      RD13, RD23, .L00800BFD
// tk_core/tk_puts.c:784   
  MOVU.B       (RQ9, 0), RD21
// tk_core/tk_puts.c:786   
  MOVU.B       (RQ9, 1), RD13
// tk_core/tk_puts.c:787   
  MOVU.B       (RQ9, 2), RD12
  AND          RD21, 192, RQ8
  ADD          R0, 128, R5
  CMPEQ.Q      RQ8, R5, RQ22
  AND          RD13, 192, RQ18
  MOV.L        RD13, (R2, 36)
  ADD          R0, 128, R5
  CMPEQ.Q      RQ18, R5, RQ8
  AND          RQ22, RQ8, RQ18
  AND          RD12, 192, RQ8
  MOV.L        RD12, (R2, 32)
  ADD          R0, 128, R5
  CMPEQ.Q      RQ8, R5, RQ22
  BTST.L       RQ22, RQ18, .L00800BFE
// tk_core/tk_puts.c:789   
  ADD          RQ9, 3, RQ9
// tk_core/tk_puts.c:791   
  AND          RD23, 7, RQ18
  SHAD.L       RQ18, 18, RQ8
  AND          RD21, 63, RQ22
  SHAD.L       RQ22, 12, RQ18
  OR           RQ8, RQ18, RQ22
  MOV.L        (R2, 36), RD13
  AND          RD13, 63, RQ18
  SHAD.L       RQ18, 6, RQ8
  OR           RQ22, RQ8, RQ18
  MOV.L        (R2, 32), RD12
  AND          RD12, 63, RQ8
  OR           RQ18, RQ8, RD23
// tk_core/tk_puts.c:792   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:793   
  ADD          RD23, 0, RD10
  BSR          .L00C01579, R0

.L00800BFE:

.L00800BFD:

.L00800BFC:

.L00800BF9:

.L00800BF6:

.L00800BF4:
// tk_core/tk_puts.c:797   
  MOV.Q        RQ9, (RQ20, 0)
// tk_core/tk_puts.c:798   
  ADD          RD23, 0, RD10

.L00C01579:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

I_FinishUpdate:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// i_btesh4.c:2089   I_InitTkGdi();
  BSR          I_InitTkGdi, R1
// i_btesh4.c:2091   I_DrawFramerate();
  BSR          I_DrawFramerate, R1
// i_btesh4.c:2093   if(!screen)
  MOV.Q        screen, RQ23
  BRNE.Q       R0, RQ23, .L00801199
// i_btesh4.c:2094   {
  MOV          .L00C01580, RQ10
  BSR          printf, R1
// i_btesh4.c:2096   return;
  BSR          .L00C0157F, R0

.L00801199:
// i_btesh4.c:2099   st_oddframe = !st_oddframe;
  MOVU.B       st_oddframe, RD23
  CMPEQ.Q      RD23, R0, RD23
  MOV.B        RD23, st_oddframe
// i_btesh4.c:2102   if(0)
  MOV.Q        screen_fbuf, RQ23
  BREQ.Q       R0, RQ23, .L0080119A
// i_btesh4.c:2120   tkgMapReleaseFrameBuffer(i_hDc, i_dibinfo, screen_fbuf);
  MOV.L        i_hDc, RD10
  MOV.Q        i_dibinfo, RQ11
  MOV.Q        screen_fbuf, RQ12
  BSR          tkgMapReleaseFrameBuffer, R1
// i_btesh4.c:2121   tkgMapFlipFrame(i_hDc);
  MOV.L        i_hDc, RD10
  BSR          tkgMapFlipFrame, R1
// i_btesh4.c:2123   screen_fbuf=tkgTryMapFrameBuffer(i_hDc, i_dibinfo);
  MOV.L        i_hDc, RD10
  MOV.Q        i_dibinfo, RQ11
  BSR          tkgTryMapFrameBuffer, R1
  ADD          RQ10, 0, RQ23
  MOV.Q        RQ23, screen_fbuf
  BREQ.Q       R0, RQ23, .L0080119B
// i_btesh4.c:2125   {
  MOV.Q        screen_fbuf, RQ23
  MOV.Q        RQ23, screen
// i_btesh4.c:2127   screens[0] = screen_fbuf;
  MOV          screens, RQ22
  MOV.Q        RQ23, (RQ22, 0)
// i_btesh4.c:2128   R_InitBuffer(BASEWIDTH, BASEHEIGHT);
  ADD          R0, 320, RD10
  ADD          R0, 200, RD11
  BSR          R_InitBuffer, R1
  BSR          .L0080119C, R0

.L0080119B:
// i_btesh4.c:2131   {
  MOV.Q        screens_base, RQ23
  MOV.Q        RQ23, screen
// i_btesh4.c:2133   screens[0] = screens_base;
  MOV          screens, RQ22
  MOV.Q        RQ23, (RQ22, 0)

.L0080119C:
  BSR          .L0080119D, R0

.L0080119A:
// i_btesh4.c:2136   {
  MOV.L        i_hDc, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        i_dibinfo, RQ13
  MOV.Q        screen, RQ14
  BSR          tkgBlitImage, R1

.L0080119D:
// i_btesh4.c:2143   IN_Commands();
  BSR          IN_Commands, R1
// i_btesh4.c:2145   M_ClearBox(dirtybox);
  MOV          dirtybox, RQ10
  BSR          M_ClearBox, R1
// i_btesh4.c:2146   R_ClearCZBuf();
  BSR          R_ClearCZBuf, R1
// i_btesh4.c:2148   for(i=0; i<25; i++)
  ADD          RD0, 0, RD18

.L0080119E:
// i_btesh4.c:2149   r_colmask[i]=0;
  ADD          R0, 0, RQ9
  MOV          r_colmask, RQ23
  MOV.Q        RQ9, (RQ23, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       25, RD18, .L0080119E

.L008011A0:

.L00C0157F:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

rand:
// pdpc201/stdlib.c:728   
  MOV.Q        TU61F874B9/myseed, RQ13
  ADD          R0, 0x0000FC4B, RQ12
  LDSH32       RQ12, 0x00000000A2F7ACAB, RQ12
  MULU.Q       RQ13, RQ12, RQ11
  ADD          RQ11, 1, RQ13
// pdpc201/stdlib.c:731   
  SHLR.Q       RQ13, 48, RQ11
  AND          RQ11, 32767, RQ11
  ADDS.L       RQ11, 0, RD10
// pdpc201/stdlib.c:732   
  MOV.Q        RQ13, TU61F874B9/myseed

.L00C01581:
  JSR          R1, 0, R0

tk_malloc:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
// tk_core/tk_mmllist.c:959   
  ADDS.L       RD9, 0, RD10
  BSR          TKMM_Malloc, R1

.L00C01587:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

P_AcsNextSectorForTag:
// p_acspec.c:32   for (i = *ridx; i < numsectors; i++)
  MOV.L        (RQ10, 0), RD13
  MOV.L        numsectors, RD12
  BRGE.L       RD12, RD13, .L0080188D

.L0080188B:
// p_acspec.c:33   {
  MOV.Q        sectors, RQ12
  SHAD.L       RD13, 7, RQ17
  ADD          RQ12, RQ17, RQ17
  MOV.W        (RQ17, 16), RQ16
  BRNE.Q       RD11, RQ16, .L0080188E
// p_acspec.c:35   {
  ADDS.L       RD13, 1, RQ16
  MOV.L        RQ16, (RQ10, 0)
// p_acspec.c:37   return(sectors+i);
  MOV.Q        sectors, RQ12
  SHAD.L       RD13, 7, RQ15
  ADD          RQ12, RQ15, RQ15
  ADD          RQ15, 0, RQ10
  JSR          R1, 0, R0

.L0080188E:
  ADDS.L       RD13, 1, RD13
  MOV.L        numsectors, RD12
  BRLT.L       RD12, RD13, .L0080188B

.L0080188D:
// p_acspec.c:39   }
  ADD          RQ0, 0, RQ10

.L00C01588:
  JSR          R1, 0, R0

TKMM_MMCell_GetChunkBmpIndex:
// tk_core/tk_mmcell.c:54   
  SHAR         RD11, 4, RD13
  AND          RD11, 15, RD12
// tk_core/tk_mmcell.c:55   
  ADD          RQ10, 0x0000F704, RQ17
  MOVU.L       (RQ17, RD13), RD16
// tk_core/tk_mmcell.c:56   
  SHAD.L       RD12, 1, RQ15
  ADDS.L       RQ15, 0, RQ14
  SHLR         RD16, RQ14, RQ31
  AND          RQ31, 3, RD16
// tk_core/tk_mmcell.c:57   
  ADDS.L       RD16, 0, RQ15
  ADDS.L       RQ15, 0, RD10

.L00C01589:
  JSR          R1, 0, R0

EV_DoDoor:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 136)
  ADD          RD11, 0, RD20
// p_doors.c:273   secnum = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 128)
// p_doors.c:274   rtn = 0;
  MOV.L        RD0, (R2, 124)
// p_doors.c:276   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801A81, R0

.L00801A7F:
// p_doors.c:277   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 128), RD26
  SHAD.L       RD26, 7, RQ22
  ADD          RQ27, RQ22, RQ22
// p_doors.c:279   if (sec->specialdata)
  MOV.Q        (RQ22, 104), RQ8
  BRNE.Q       R0, RQ8, .L00801A81
// p_doors.c:284   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 124)
// p_doors.c:285   door = Z_Malloc (sizeof(*door), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_doors.c:286   P_AddThinker (&door->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_doors.c:287   sec->specialdata = door;
  MOV.Q        RQ18, (RQ22, 104)
// p_doors.c:289   door->thinker.function.acp1 = (actionf_p1) T_VerticalDoor;
  MOV          T_VerticalDoor, RQ8
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ13
  MOV.Q        RQ8, (RQ13, 0)
// p_doors.c:290   door->sector = sec;
  MOV.Q        RQ22, (RQ18, 32)
// p_doors.c:291   door->type = type;
  MOV.L        RD20, (RQ18, 24)
// p_doors.c:292   door->topwait = VDOORWAIT;
  ADD          R0, 150, RD12
  MOV.L        RD12, (RQ18, 52)
// p_doors.c:293   door->speed = VDOORSPEED;
  LUI          32, RD11
  MOV.L        RD11, (RQ18, 44)
// p_doors.c:295   switch(type)
  BREQ.Q       7, RD20, .L00801A83
  BREQ.Q       2, RD20, .L00801A84
  BREQ.Q       1, RD20, .L00801A85
  BREQ.Q       5, RD20, .L00801A86
  BREQ.Q       6, RD20, .L00801A87
  BREQ.L       R0, RD20, .L00801A88
  BREQ.Q       3, RD20, .L00801A89
  BSR          .L00801A8A, R0

.L00801A83:
// p_doors.c:297   case blazeClose:
  ADD          RQ22, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:299   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ18, 40), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ23
  MOV.L        RQ23, (RQ18, 40)
// p_doors.c:300   door->direction = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:301   door->speed = VDOORSPEED * 4;
  LUI          128, RD26
  MOV.L        RD26, (RQ18, 44)
// p_doors.c:302   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ21
  ADD          RQ21, 0, RQ10
  ADD          R0, 89, RD11
  BSR          S_StartSound, R1
// p_doors.c:304   break;
  BSR          .L00801A82, R0

.L00801A84:
// p_doors.c:306   case vld_close:
  ADD          RQ22, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:308   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ18, 40), RQ23
  ADDS.L       RQ23, 0xFFFFFFFFFFFC0000, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:309   door->direction = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:310   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ21
  ADD          RQ21, 48, RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 21, RD11
  BSR          S_StartSound, R1
// p_doors.c:312   break;
  BSR          .L00801A82, R0

.L00801A85:
// p_doors.c:314   case close30ThenOpen:
  MOV.L        (RQ22, 4), RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:316   door->direction = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:317   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ21
  ADD          RQ21, 48, RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 21, RD11
  BSR          S_StartSound, R1
// p_doors.c:319   break;
  BSR          .L00801A82, R0

.L00801A86:

.L00801A87:
// p_doors.c:322   case blazeOpen:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:324   door->topheight = P_FindLowestCeilingSurrounding(sec);
  ADD          RQ22, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:325   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ18, 40), RQ23
  ADDS.L       RQ23, 0xFFFFFFFFFFFC0000, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:326   door->speed = VDOORSPEED * 4;
  LUI          128, RD26
  MOV.L        RD26, (RQ18, 44)
// p_doors.c:327   if (door->topheight != sec->ceilingheight)
  MOV.L        (RQ18, 40), RQ23
  MOV.L        (RQ22, 4), RQ9
  BREQ.Q       RQ9, RQ23, .L00801A8B
// p_doors.c:328   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ21
  ADD          RQ21, 48, RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 88, RD11
  BSR          S_StartSound, R1

.L00801A8B:
// p_doors.c:330   break;
  BSR          .L00801A82, R0

.L00801A88:

.L00801A89:
// p_doors.c:333   case vld_open:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:335   door->topheight = P_FindLowestCeilingSurrounding(sec);
  ADD          RQ22, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:336   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ18, 40), RQ23
  ADDS.L       RQ23, 0xFFFFFFFFFFFC0000, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:337   if (door->topheight != sec->ceilingheight)
  MOV.L        (RQ18, 40), RQ23
  MOV.L        (RQ22, 4), RQ9
  BREQ.Q       RQ9, RQ23, .L00801A8C
// p_doors.c:338   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ21
  ADD          RQ21, 48, RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1

.L00801A8C:
// p_doors.c:340   break;
  BSR          .L00801A82, R0

.L00801A8A:
// p_doors.c:342   default:

.L00801A82:

.L00801A81:
  MOV.Q        (R2, 136), RQ10
  MOV.L        (R2, 128), RD11
  BSR          P_FindSectorFromLineTag, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RD9, (R2, 128)
  BRGE.L       R0, RQ9, .L00801A7F

.L00801A80:
// p_doors.c:346   }
  MOV.L        (R2, 124), RD10

.L00C0158F:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

HUlib_addCharToTextLine:
// hu_lib.c:75   if (t->len == HU_MAXLINELENGTH)
  MOV.L        (RQ10, 104), RQ13
  BRNE.Q       80, RQ13, .L00802CDC
// hu_lib.c:76   return false;
  ADD          R0, 0, RD10
  JSR          R1, 0, R0
  BSR          .L00802CDD, R0

.L00802CDC:
// hu_lib.c:78   {
  ADD          RQ10, 20, RQ12
  MOV.L        (RQ10, 104), RQ13
  ADD          RQ13, 0, RQ17
  ADDS.L       RQ13, 1, RQ16
  MOV.L        RQ16, (RQ10, 104)
  MOV.B        RD11, (RQ12, RQ17)
// hu_lib.c:80   t->l[t->len] = 0;
  MOV.L        (RQ10, 104), RQ13
  MOV.B        RD0, (RQ12, RQ13)
// hu_lib.c:81   t->needsupdate = 4;
  ADD          R0, 4, RD15
  MOV.L        RD15, (RQ10, 108)
// hu_lib.c:82   return true;
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00802CDD:

.L00C01590:
  JSR          R1, 0, R0
  .balign 4

tkgGetCurrentContext:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
  ADD          R0, 0x12345678, RQ23
// tk_gdi/tkg_display.c:15   
  MOV.Q        TU1EAB6C11/tkgdi_current_context, RQ18
// tk_gdi/tkg_display.c:19   
  BREQ.Q       R0, RQ18, .L00800102
  MOV.Q        (RQ18, 0), RQ9
  MOV.Q        (RQ9, 16), RQ8
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ8, .L00800103
// tk_gdi/tkg_display.c:25   

tkgGetCurrentContext.debugbreak_L0211:
  BRK          529

.L00800103:
  MOV.Q        (RQ18, 0), RQ9
  MOV.Q        (RQ9, 72), RQ8
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ8, .L00800104
// tk_gdi/tkg_display.c:27   

tkgGetCurrentContext.debugbreak_L0212:
  BRK          530

.L00800104:
  MOV.Q        (RQ18, 0), RQ9
  MOV.Q        (RQ9, 120), RQ8
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ8, .L00800105
// tk_gdi/tkg_display.c:29   

tkgGetCurrentContext.debugbreak_L0213:
  BRK          531

.L00800105:
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  BRNE.Q       R0, RQ13, .L00800106
// tk_gdi/tkg_display.c:32   
  LUI          1, RQ10
  BSR          tkgGlobalAlloc, R1
  MOV.Q        RQ10, TU1EAB6C11/tkgdi_smallbuf_ifmt
// tk_gdi/tkg_display.c:34   
  LUI          1, RQ10
  BSR          tkgGlobalAlloc, R1
  MOV.Q        RQ10, TU1EAB6C11/tkgdi_smallbuf_ofmt

.L00800106:
// tk_gdi/tkg_display.c:37   
  ADD          RQ18, 0, RQ10
  BSR          .L00C015B9, R0

.L00800102:
// tk_gdi/tkg_display.c:43   
  ADD          R0, 0x20494447, RQ10
  ADD          R0, 0x20494447, RQ11
  BSR          TK_DlGetApiContextA, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:44   
  MOV.Q        RQ18, TU1EAB6C11/tkgdi_current_context
// tk_gdi/tkg_display.c:46   
  LUI          1, RQ10
  BSR          tkgGlobalAlloc, R1
  MOV.Q        RQ10, TU1EAB6C11/tkgdi_smallbuf_ifmt
// tk_gdi/tkg_display.c:47   
  LUI          1, RQ10
  BSR          tkgGlobalAlloc, R1
  MOV.Q        RQ10, TU1EAB6C11/tkgdi_smallbuf_ofmt
// tk_gdi/tkg_display.c:51   
  BREQ.Q       R0, RQ18, .L00800107
  MOV.Q        (RQ18, 0), RQ9
  BREQ.Q       R0, RQ9, .L00800107
  BSR          .L00800108, R0

.L00800107:
// tk_gdi/tkg_display.c:52   

tkgGetCurrentContext.debugbreak_L0214:
  BRK          532

.L00800108:
  MOV.Q        (RQ18, 0), RQ8
  MOV.Q        (RQ8, 16), RQ9
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ9, .L00800109
// tk_gdi/tkg_display.c:54   

tkgGetCurrentContext.debugbreak_L0215:
  BRK          533

.L00800109:
  MOV.Q        (RQ18, 0), RQ8
  MOV.Q        (RQ8, 72), RQ9
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ9, .L0080010A
// tk_gdi/tkg_display.c:56   

tkgGetCurrentContext.debugbreak_L0216:
  BRK          534

.L0080010A:
  MOV.Q        (RQ18, 0), RQ8
  MOV.Q        (RQ8, 120), RQ9
  ADD          R0, 0x12345678, RQ13
  BREQ.Q       RQ13, RQ9, .L0080010B
// tk_gdi/tkg_display.c:58   

tkgGetCurrentContext.debugbreak_L0217:
  BRK          535

.L0080010B:
// tk_gdi/tkg_display.c:60   
  ADD          RQ18, 0, RQ10

.L00C015B9:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

SlopeDiv:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 92)
  ADDU.L       RD11, R0, RD8
  LDIZ         2048, RD22
  ADD          R0, 512, RD21
  ADD          R0, 8, RD20
// tables.c:57   if (den < 512)
  BRGEU.L      512, RD8, .L008012A7
// tables.c:58   return SLOPERANGE;
  LDIZ         2048, RD10
  BSR          .L00C015C6, R0

.L008012A7:
// tables.c:62   ans = M_SoftDivU2((num<<3), (den>>8));
  SHLR         RD8, 8, RQ9
  MOVU.L       (R2, 92), RD27
  SHAD.L       RD27, 3, RQ23
  ADDU.L       RQ23, R0, RQ23
  ADD          RQ23, 0, RD10
  ADDU.L       RQ9, R0, RD11
  BSR          M_SoftDivU2, R1
  ADD          RQ10, 0, RD18
// tables.c:64   if(ans > SLOPERANGE)
  BRLEU.L      RD22, RD18, .L008012A8
// tables.c:65   return(SLOPERANGE);
  LDIZ         2048, RD10
  BSR          .L00C015C6, R0

.L008012A8:
// tables.c:66   return(ans);
  ADDS.L       RD18, 0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C015C6:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

M_SoftDivRcp:
// m_fixed.c:352   if(b<1024)
  ADD          R0, 1024, RD13
  BRGEU.L      RD13, RD10, .L00801760
// m_fixed.c:353   {
  MOV          TU7A00C408/m_softdiv_rcptab, RQ13
  MOVU.L       (RQ13, RD10), RD12
// m_fixed.c:355   return(c);
  ADDU.L       RD12, R0, RD10
  JSR          R1, 0, R0

.L00801760:
// m_fixed.c:358   ix=b; shr=0;
  ADDU.L       RD10, R0, RD13
  ADDU.L       RD0, R0, RD11
// m_fixed.c:360   while(ix>=16384)
  BSR          .L00801763, R0

.L00801761:
// m_fixed.c:361   { ix>>=4; shr+=4; }
  SHLR         RD13, 4, RD13
  ADDS.L       RD11, 4, RD11
  ADDU.L       RD11, R0, RD11

.L00801763:
  LUI          4, RD17
  BRGEU.L      RD17, RD13, .L00801761

.L00801762:
// m_fixed.c:363   while(ix>=1024)
  BSR          .L00801766, R0

.L00801764:
// m_fixed.c:364   { ix>>=1; shr++; }
  SHLR         RD13, 1, RD13
  ADDS.L       RD11, 1, RD11
  ADDU.L       RD11, R0, RD11
  ADDU.L       RD11, R0, RD11

.L00801766:
  ADD          R0, 1024, RD17
  BRGEU.L      RD17, RD13, .L00801764

.L00801765:
  MOV          TU7A00C408/m_softdiv_rcptab, RQ17
  MOVU.L       (RQ17, RD13), RQ16
  SHLR         RQ16, RD11, RD12
// m_fixed.c:366   return(c);
  ADDU.L       RD12, R0, RD10

.L00C015C7:
  JSR          R1, 0, R0
  .balign 4

R_DecodeColorCell8:
// r_data.c:962   ca=cs[0];	cb=cs[1];
  MOVU.B       (RQ10, 0), RD13
  MOVU.B       (RQ10, 1), RD17
// r_data.c:963   px=((u16 *)cs)[1];
  MOVU.W       (RQ10, 2), RD16
// r_data.c:969   ct[0]=(px&0x0001)?ca:cb;
  ADD          R0, 1, RD15
  BTST.L       RD15, RD16, .L00802471
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802472, R0

.L00802471:
  ADD          RD17, 0, RQ15

.L00802472:
  MOVU.B       RQ15, (RQ11, 0)
// r_data.c:970   ct[1]=(px&0x0002)?ca:cb;
  ADD          R0, 2, RD14
  BTST.L       RD14, RD16, .L00802473
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802474, R0

.L00802473:
  ADD          RD17, 0, RQ15

.L00802474:
  MOVU.B       RQ15, (RQ11, 1)
// r_data.c:971   ct[2]=(px&0x0004)?ca:cb;
  ADD          R0, 4, RD14
  BTST.L       RD14, RD16, .L00802475
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802476, R0

.L00802475:
  ADD          RD17, 0, RQ15

.L00802476:
  MOVU.B       RQ15, (RQ11, 2)
// r_data.c:972   ct[3]=(px&0x0008)?ca:cb;
  ADD          R0, 8, RD14
  BTST.L       RD14, RD16, .L00802477
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802478, R0

.L00802477:
  ADD          RD17, 0, RQ15

.L00802478:
  MOVU.B       RQ15, (RQ11, 3)
// r_data.c:973   ct+=xs;
  ADD          RQ11, RD12, RQ11
// r_data.c:974   ct[0]=(px&0x0010)?ca:cb;
  ADD          R0, 16, RD14
  BTST.L       RD14, RD16, .L00802479
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080247A, R0

.L00802479:
  ADD          RD17, 0, RQ15

.L0080247A:
  MOVU.B       RQ15, (RQ11, 0)
// r_data.c:975   ct[1]=(px&0x0020)?ca:cb;
  ADD          R0, 32, RD14
  BTST.L       RD14, RD16, .L0080247B
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080247C, R0

.L0080247B:
  ADD          RD17, 0, RQ15

.L0080247C:
  MOVU.B       RQ15, (RQ11, 1)
// r_data.c:976   ct[2]=(px&0x0040)?ca:cb;
  ADD          R0, 64, RD14
  BTST.L       RD14, RD16, .L0080247D
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080247E, R0

.L0080247D:
  ADD          RD17, 0, RQ15

.L0080247E:
  MOVU.B       RQ15, (RQ11, 2)
// r_data.c:977   ct[3]=(px&0x0080)?ca:cb;
  ADD          R0, 128, RD14
  BTST.L       RD14, RD16, .L0080247F
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802480, R0

.L0080247F:
  ADD          RD17, 0, RQ15

.L00802480:
  MOVU.B       RQ15, (RQ11, 3)
// r_data.c:978   ct+=xs;
  ADD          RQ11, RD12, RQ11
// r_data.c:979   ct[0]=(px&0x0100)?ca:cb;
  ADD          R0, 256, RD14
  BTST.L       RD14, RD16, .L00802481
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802482, R0

.L00802481:
  ADD          RD17, 0, RQ15

.L00802482:
  MOVU.B       RQ15, (RQ11, 0)
// r_data.c:980   ct[1]=(px&0x0200)?ca:cb;
  ADD          R0, 512, RD14
  BTST.L       RD14, RD16, .L00802483
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802484, R0

.L00802483:
  ADD          RD17, 0, RQ15

.L00802484:
  MOVU.B       RQ15, (RQ11, 1)
// r_data.c:981   ct[2]=(px&0x0400)?ca:cb;
  ADD          R0, 1024, RD14
  BTST.L       RD14, RD16, .L00802485
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802486, R0

.L00802485:
  ADD          RD17, 0, RQ15

.L00802486:
  MOVU.B       RQ15, (RQ11, 2)
// r_data.c:982   ct[3]=(px&0x0800)?ca:cb;
  LDIZ         2048, RD14
  BTST.L       RD14, RD16, .L00802487
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802488, R0

.L00802487:
  ADD          RD17, 0, RQ15

.L00802488:
  MOVU.B       RQ15, (RQ11, 3)
// r_data.c:983   ct+=xs;
  ADD          RQ11, RD12, RQ11
// r_data.c:984   ct[0]=(px&0x1000)?ca:cb;
  LUI          1, RD14
  BTST.L       RD14, RD16, .L00802489
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080248A, R0

.L00802489:
  ADD          RD17, 0, RQ15

.L0080248A:
  MOVU.B       RQ15, (RQ11, 0)
// r_data.c:985   ct[1]=(px&0x2000)?ca:cb;
  LUI          2, RD14
  BTST.L       RD14, RD16, .L0080248B
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080248C, R0

.L0080248B:
  ADD          RD17, 0, RQ15

.L0080248C:
  MOVU.B       RQ15, (RQ11, 1)
// r_data.c:986   ct[2]=(px&0x4000)?ca:cb;
  LUI          4, RD14
  BTST.L       RD14, RD16, .L0080248D
  ADDS.L       RD13, 0, RQ15
  BSR          .L0080248E, R0

.L0080248D:
  ADD          RD17, 0, RQ15

.L0080248E:
  MOVU.B       RQ15, (RQ11, 2)
// r_data.c:987   ct[3]=(px&0x8000)?ca:cb;
  LUI          8, RD14
  BTST.L       RD14, RD16, .L0080248F
  ADDS.L       RD13, 0, RQ15
  BSR          .L00802490, R0

.L0080248F:
  ADD          RD17, 0, RQ15

.L00802490:
  MOVU.B       RQ15, (RQ11, 3)
// r_data.c:988   ct+=xs;
  ADD          RQ11, RD12, RQ11

.L00C015C8:
  JSR          R1, 0, R0
  .balign 4

I_UpdateNoBlit:
// i_btesh4.c:488   void I_UpdateNoBlit (void)

.L00C015C9:
  JSR          R1, 0, R0

AM_drawLineCharacter:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 164)
  ADD          RD12, 0, RD23
  MOV.L        RD13, (R2, 156)
  MOV.L        RD14, (R2, 152)
  MOV.L        RD15, (R2, 148)
  MOV.L        RD16, (R2, 144)
// am_map.c:1216   mline_t	l;
// am_map.c:1218   for (i=0;i<lineguylines;i++)
  ADD          R0, 0, RD8
  MOV.L        (R2, 164), RD27
  BRGE.L       RD27, RD8, .L00801866

.L00801864:
// am_map.c:1219   {
  SHAD.L       RD8, 4, RQ27
  ADD          RQ21, RQ27, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          R2, 128, RQ25
  ADD          RQ25, 0, RQ26
  MOV.L        RQ18, (RQ26, 0)
// am_map.c:1221   l.a.y = lineguy[i].a.y;
  SHAD.L       RD8, 4, RQ27
  ADD          RQ21, RQ27, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 4), RQ18
  ADD          RQ25, 0, RQ26
  MOV.L        RQ18, (RQ26, 4)
// am_map.c:1223   if (scale)
  BREQ.L       R0, RD23, .L00801867
// am_map.c:1224   {
  ADD          R2, 128, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ27, 0, RQ26
  MOV.L        RQ9, (RQ26, 0)
// am_map.c:1226   l.a.y = FixedMul(scale, l.a.y);
  MOV.L        (RQ26, 4), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ27, 0, RQ26
  MOV.L        RQ9, (RQ26, 4)

.L00801867:
// am_map.c:1229   if (angle)
  MOVU.L       (R2, 156), RD27
  BREQ.L       R0, RD27, .L00801868
// am_map.c:1230   AM_rotate(&l.a.x, &l.a.y, angle);
  ADD          R2, 128, RQ27
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 4, RQ22
  ADD          RQ26, 0, RQ20
  ADD          RQ20, 0, RQ10
  ADD          RQ22, 0, RQ11
  MOVU.L       (R2, 156), RD12
  BSR          AM_rotate, R1

.L00801868:
// am_map.c:1232   l.a.x += x;
  ADD          R2, 128, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        (R2, 148), RD25
  ADDS.L       RQ18, RD25, RQ9
  MOV.L        RQ9, (RQ26, 0)
// am_map.c:1233   l.a.y += y;
  MOV.L        (RQ26, 4), RQ18
  MOV.L        (R2, 144), RD24
  ADDS.L       RQ18, RD24, RQ9
  MOV.L        RQ9, (RQ26, 4)
// am_map.c:1235   l.b.x = lineguy[i].b.x;
  SHAD.L       RD8, 4, RQ13
  ADD          RQ21, RQ13, RQ13
  ADD          RQ13, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RQ27, 8, RQ26
  MOV.L        RQ18, (RQ26, 0)
// am_map.c:1236   l.b.y = lineguy[i].b.y;
  SHAD.L       RD8, 4, RQ13
  ADD          RQ21, RQ13, RQ13
  ADD          RQ13, 8, RQ26
  MOV.L        (RQ26, 4), RQ18
  ADD          RQ27, 8, RQ26
  MOV.L        RQ18, (RQ26, 4)
// am_map.c:1238   if (scale)
  BREQ.L       R0, RD23, .L00801869
// am_map.c:1239   {
  ADD          R2, 128, RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ27, 8, RQ26
  MOV.L        RQ9, (RQ26, 0)
// am_map.c:1241   l.b.y = FixedMul(scale, l.b.y);
  MOV.L        (RQ26, 4), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ27, 8, RQ26
  MOV.L        RQ9, (RQ26, 4)

.L00801869:
// am_map.c:1244   if (angle)
  MOVU.L       (R2, 156), RD27
  BREQ.L       R0, RD27, .L0080186A
// am_map.c:1245   AM_rotate(&l.b.x, &l.b.y, angle);
  ADD          R2, 128, RQ27
  ADD          RQ27, 8, RQ26
  ADD          RQ26, 4, RQ22
  ADD          RQ26, 0, RQ20
  ADD          RQ20, 0, RQ10
  ADD          RQ22, 0, RQ11
  MOVU.L       (R2, 156), RD12
  BSR          AM_rotate, R1

.L0080186A:
// am_map.c:1247   l.b.x += x;
  ADD          R2, 128, RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        (R2, 148), RD25
  ADDS.L       RQ18, RD25, RQ9
  MOV.L        RQ9, (RQ26, 0)
// am_map.c:1248   l.b.y += y;
  MOV.L        (RQ26, 4), RQ18
  MOV.L        (R2, 144), RD24
  ADDS.L       RQ18, RD24, RQ9
  MOV.L        RQ9, (RQ26, 4)
// am_map.c:1250   AM_drawMline(&l, color);
  ADD          RQ27, 0, RQ22
  ADD          RQ22, 0, RQ10
  MOV.L        (R2, 152), RD11
  BSR          AM_drawMline, R1
  ADDS.L       RD8, 1, RD8
  MOV.L        (R2, 164), RD13
  BRLT.L       RD13, RD8, .L00801864

.L00801866:

.L00C015CF:
  ADD          R2, 368, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

R_MakeSpans:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD23
  ADD          RD13, 0, RD21
  ADD          RD14, 0, RD22
// r_plane.c:377   {
  BSR          .L008026C9, R0

.L008026C7:
// r_plane.c:379   {
  MOV.L        (R2, 108), RD20
  ADDS.L       RD20, -1, RQ18
  MOV          spanstart, RQ27
  MOV.L        (RQ27, RD8), RQ9
  ADDS.L       RD8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          R_MapPlane, R1
// r_plane.c:381   t1++;
  ADDS.L       RD8, 1, RD8

.L008026C9:
  CMPGT.Q      RD21, RD8, RQ18
  CMPGE.Q      RD23, RD8, RQ9
  BTSTN.L      RQ9, RQ18, .L008026C7

.L008026C8:
// r_plane.c:382   }
  BSR          .L008026CC, R0

.L008026CA:
// r_plane.c:384   {
  MOV.L        (R2, 108), RD20
  ADDS.L       RD20, -1, RQ18
  MOV          spanstart, RQ27
  MOV.L        (RQ27, RD23), RQ9
  ADD          RD23, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          R_MapPlane, R1
// r_plane.c:386   b1--;
  ADDS.L       RD23, -1, RD23

.L008026CC:
  CMPGT.Q      RD23, RD22, RQ18
  CMPGE.Q      RD23, RD8, RQ9
  BTSTN.L      RQ9, RQ18, .L008026CA

.L008026CB:
// r_plane.c:389   while ((t2 < t1) && (t2<=b2))
  BSR          .L008026CF, R0

.L008026CD:
// r_plane.c:390   {
  MOV          spanstart, RQ20
  MOV.L        (R2, 108), RD27
  MOV.L        RD27, (RQ20, RD21)
// r_plane.c:392   t2++;
  ADDS.L       RD21, 1, RD21

.L008026CF:
  CMPGT.Q      RD8, RD21, RQ18
  CMPGE.Q      RD22, RD21, RQ9
  BTSTN.L      RQ9, RQ18, .L008026CD

.L008026CE:
// r_plane.c:393   }
  BSR          .L008026D2, R0

.L008026D0:
// r_plane.c:395   {
  MOV          spanstart, RQ20
  MOV.L        (R2, 108), RD27
  MOV.L        RD27, (RQ20, RD22)
// r_plane.c:397   b2--;
  ADDS.L       RD22, -1, RD22

.L008026D2:
  CMPGT.Q      RD22, RD23, RQ18
  CMPGE.Q      RD22, RD21, RQ9
  BTSTN.L      RQ9, RQ18, .L008026D0

.L008026D1:

.L00C015D5:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_print_hex_genw:
// tk_core/tk_puts.c:1214   
  ADD          RQ10, 0, RQ13
  ADD          R0, 1, RD12
// tk_core/tk_puts.c:1215   
  BSR          .L00800C3E, R0

.L00800C3F:
// tk_core/tk_puts.c:1216   
  SHLR.Q       RQ13, 4, RQ13
  ADDS.L       RD12, 1, RD12

.L00800C3E:
  BRGEU.Q      16, RQ13, .L00800C3F

.L00800C40:
// tk_core/tk_puts.c:1218   
  BRGE.L       16, RD12, .L00800C41
  SHAD.L       RD12, 2, RQ11
  ADD          RQ11, 0, RQ17
  SHLR.Q       RQ10, RQ17, RQ16
  BREQ.Q       R0, RQ16, .L00800C42
// tk_core/tk_puts.c:1221   

tk_print_hex_genw.debugbreak_L021D:
  BRK          541

.L00800C42:

.L00800C41:
// tk_core/tk_puts.c:1237   
  ADDS.L       RD12, 0, RD10

.L00C015D6:
  JSR          R1, 0, R0
  .balign 4

WI_drawPercent:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD18
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
// wi_stuff.c:696   {
  BRLT.L       R0, RD8, .L00C015E2
// wi_stuff.c:700   V_DrawPatch(x, y, FB, percent);
  ADD          RD18, 0, RD10
  ADDS.L       RD9, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/percent, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:701   WI_drawNum(x, y, p, -1);
  ADD          RD18, 0, RD10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          R0, -1, RD13
  BSR          WI_drawNum, R1

.L00C015E2:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

memcmp:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.Q        RQ11, (R2, 80)
  MOV.Q        RQ12, (R2, 72)
// pdpc201/string.c:359   
  MOV.Q        (R2, 88), RQ18
// pdpc201/string.c:360   
  MOV.Q        (R2, 80), RQ9
// pdpc201/string.c:363   
  MOV.Q        (R2, 72), RQ13
  AND          RQ13, -16, RQ12
  ADD          RQ18, RQ12, RQ11
  MOV.Q        RQ11, (R2, 64)
// pdpc201/string.c:364   
  ADD          RQ18, RQ13, RQ10
  MOV.Q        RQ10, (R2, 56)
// pdpc201/string.c:367   
  BSR          .L00800625, R0

.L00800626:
// pdpc201/string.c:368   
  MOV.Q        (RQ18, 0), RQ21
// pdpc201/string.c:370   
  MOV.Q        (RQ9, 0), RQ20
// pdpc201/string.c:371   
  MOV.Q        (RQ18, 8), RQ13
  MOV.Q        RQ13, (R2, 48)
// pdpc201/string.c:372   
  MOV.Q        (RQ9, 8), RQ12
  MOV.Q        RQ12, (R2, 40)
// pdpc201/string.c:373   
  BRNE.Q       RQ20, RQ21, .L00800627
// pdpc201/string.c:375   
  MOV.Q        (R2, 48), RQ13
  MOV.Q        (R2, 40), RQ12
  BREQ.Q       RQ12, RQ13, .L00800628
// pdpc201/string.c:376   
  ADD          RQ18, 8, RQ18
  ADD          RQ9, 8, RQ9
  BSR          .L00800627, R0

.L00800628:
  ADD          RQ18, 16, RQ18
// pdpc201/string.c:377   
  ADD          RQ9, 16, RQ9

.L00800625:
  MOV.Q        (R2, 64), RQ13
  BRLE.Q       RQ13, RQ18, .L00800626

.L00800627:
// pdpc201/string.c:381   
  MOV.Q        (R2, 56), RQ13
  BRGE.Q       RQ13, RQ18, .L00C0058F
// pdpc201/string.c:384   
  ADD          RQ18, 8, RQ8
  MOV.Q        (R2, 56), RQ13
  BRGT.Q       RQ13, RQ8, .L00800629
// pdpc201/string.c:385   
  MOV.Q        (RQ18, 0), RQ21
// pdpc201/string.c:387   
  MOV.Q        (RQ9, 0), RQ20
  BRNE.Q       RQ20, RQ21, .L0080062A
// pdpc201/string.c:389   
  ADD          RQ18, 8, RQ18
// pdpc201/string.c:390   
  ADD          RQ9, 8, RQ9
  MOV.Q        (R2, 56), RQ13
  BRGE.Q       RQ13, RQ18, .L00C0058F

.L0080062A:

.L00800629:
// pdpc201/string.c:396   
  ADD          RQ18, 4, RQ8
  MOV.Q        (R2, 56), RQ13
  BRGT.Q       RQ13, RQ8, .L0080062B
// pdpc201/string.c:397   
  MOVU.L       (RQ18, 0), RQ23
  ADDU.L       RQ23, R0, RQ21
// pdpc201/string.c:399   
  MOVU.L       (RQ9, 0), RQ23
  ADDU.L       RQ23, R0, RQ20
  BRNE.Q       RQ20, RQ21, .L0080062C
// pdpc201/string.c:401   
  ADD          RQ18, 4, RQ18
// pdpc201/string.c:402   
  ADD          RQ9, 4, RQ9
  MOV.Q        (R2, 56), RQ13
  BRGE.Q       RQ13, RQ18, .L00C0058F

.L0080062C:

.L0080062B:
// pdpc201/string.c:408   
  BSR          .L0080062D, R0

.L0080062E:
// pdpc201/string.c:409   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD13
  ADD          RQ8, 1, RQ18
// pdpc201/string.c:410   
  ADD          RQ9, 0, RQ8
  MOVU.B       (RQ9, 0), RD12
  ADD          RQ8, 1, RQ9
// pdpc201/string.c:411   
  MOV.L        RD13, (R2, 36)
  MOV.L        RD12, (R2, 32)
  BREQ.Q       RD12, RD13, .L0080062F
// pdpc201/string.c:412   
  MOV.L        (R2, 36), RD13
  MOV.L        (R2, 32), RD12
  SUBS.L       RD13, RD12, RQ23
  SHAR         RQ23, 31, RQ22
  SHAD.L       RQ22, 1, RQ23
  ADDS.L       RQ23, 1, RQ22
  ADD          RQ22, 0, RD10
  BSR          .L00C015E8, R0

.L0080062F:

.L0080062D:
  MOV.Q        (R2, 56), RQ13
  BRLT.Q       RQ13, RQ18, .L0080062E

.L00800630:
// pdpc201/string.c:413   
  ADD          R0, 0, RD10
  BSR          .L00C015E8, R0

.L00C0058F:
  ADD          R0, 0, RQ10

.L00C015E8:
  ADD          R2, 328, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

R_ColormapForLump:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 72)
// r_data.c:1950   return(R_ColormapForLumpI(lump, lvl));
  ADDS.L       RD9, 0, RD10
  MOV.L        (R2, 72), RD11
  BSR          R_ColormapForLumpI, R1

.L00C015EE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

PIT_ChangeSector:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R27, (R2, 48)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 1, RD21
// p_map.c:1296   if (P_ThingHeightClip (thing))
  ADD          RQ9, 0, RQ10
  BSR          P_ThingHeightClip, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801DAB
// p_map.c:1299   return true;
  ADD          R0, 1, RD10
  BSR          .L00C015F4, R0

.L00801DAB:
// p_map.c:1304   if (thing->health <= 0)
  MOV.L        (RQ9, 164), RQ18
  BRGT.L       R0, RQ18, .L00801DAC
// p_map.c:1305   {
  ADD          RQ9, 0, RQ10
  ADD          R0, 895, RD11
  BSR          P_SetMobjState, R1
// p_map.c:1308   thing->flags &= ~MF_SOLID;
  MOV.L        (RQ9, 160), RQ18
  AND          RQ18, -3, RQ8
  MOV.L        RQ8, (RQ9, 160)
// p_map.c:1309   thing->height = 0;
  MOV.L        RD0, (RQ9, 108)
// p_map.c:1310   thing->radius = 0;
  MOV.L        RD0, (RQ9, 104)
// p_map.c:1313   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C015F4, R0

.L00801DAC:
// p_map.c:1317   if (thing->flags & MF_DROPPED)
  MOV.L        (RQ9, 160), RQ18
  LUI          32, RD27
  BTST.L       RD27, RQ18, .L00801DAD
// p_map.c:1318   {
  ADD          RQ9, 0, RQ10
  BSR          P_RemoveMobj, R1
// p_map.c:1322   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C015F4, R0

.L00801DAD:
// p_map.c:1325   if (! (thing->flags & MF_SHOOTABLE) )
  MOV.L        (RQ9, 160), RQ8
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ8, .L00801DAE
// p_map.c:1328   return true;			
  ADD          R0, 1, RD10
  BSR          .L00C015F4, R0

.L00801DAE:
// p_map.c:1331   nofit = true;
  MOV.L        RD21, nofit
// p_map.c:1333   if (crushchange && !(leveltime&3) )
  MOV.L        crushchange, RD27
  BREQ.L       R0, RD27, .L00801DAF
  MOV.L        leveltime, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00801DAF

.L00801DB0:
// p_map.c:1334   {
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADD          R0, 10, RD13
  BSR          P_DamageMobj, R1
// p_map.c:1338   mo = P_SpawnMobj (thing->x,
  MOV.L        (RQ9, 32), RQ18
  MOV.L        (RQ9, 108), RQ8
  ADD          RQ8, 0, RQ23
  ADD          R0, 2, RD27
  DIVS.L       RQ23, RD27, RQ23
  ADDS.L       RQ18, RQ23, RQ8
  MOV.L        (RQ9, 28), RQ23
  MOV.L        (RQ9, 24), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 38, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ22
// p_map.c:1342   mo->momx = (P_Random() - P_Random ())<<12;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ8
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ8, RQ23, RQ18
  SHAD.L       RQ18, 12, RQ8
  MOV.L        RQ8, (RQ22, 112)
// p_map.c:1343   mo->momy = (P_Random() - P_Random ())<<12;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ23, RQ18, RQ8
  SHAD.L       RQ8, 12, RQ23
  MOV.L        RQ23, (RQ22, 116)

.L00801DAF:
// p_map.c:1347   return true;	
  ADD          R0, 1, RD10

.L00C015F4:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

fputs:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 64)
  ADD          R0, 1, RQ23
// pdpc201/stdio.c:2209   
  ADD          RQ8, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2210   
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 1, RQ12
  MOV.Q        (R2, 64), RQ13
  BSR          fwrite, R1
  ADD          RQ10, 0, RQ9
// pdpc201/stdio.c:2211   
  BREQ.Q       1, RQ9, .L0080048F
  ADD          R0, -1, RD10
  BSR          .L00C015FA, R0
  BSR          .L00800490, R0

.L0080048F:
// pdpc201/stdio.c:2212   
  ADD          R0, 0, RD10
  BSR          .L00C015FA, R0

.L00800490:

.L00C015FA:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_LineAttack:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ8
  ADD          RD11, 0, RD21
  ADD          RD12, 0, RD20
  MOV.L        RD13, (R2, 156)
  MOV.L        RD14, (R2, 152)
// p_map.c:1108   angle >>= ANGLETOFINESHIFT;
  SHLR         RD21, 19, RD21
// p_map.c:1109   shootthing = t1;
  MOV.Q        RQ8, shootthing
// p_map.c:1110   la_damage = damage;
  MOV.L        (R2, 152), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, la_damage
// p_map.c:1111   x2 = t1->x + (distance>>FRACBITS)*finecosine[angle];
  MOV.L        (RQ8, 24), RQ9
  SHAR         RD20, 16, RQ18
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD21), RQ23
  MULS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ9, RQ22, RD26
  MOV.L        RD26, (R2, 148)
// p_map.c:1112   y2 = t1->y + (distance>>FRACBITS)*finesine[angle];
  MOV.L        (RQ8, 28), RQ9
  SHAR         RD20, 16, RQ18
  MOV          finesine, RQ25
  MOV.L        (RQ25, RD21), RQ23
  MULS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ9, RQ22, RD25
  MOV.L        RD25, (R2, 144)
// p_map.c:1113   shootz = t1->z + (t1->height>>1) + 8*FRACUNIT;
  MOV.L        (RQ8, 32), RQ9
  MOV.L        (RQ8, 108), RQ18
  SHAR         RQ18, 1, RQ23
  ADDS.L       RQ9, RQ23, RQ22
  ADDS.L       RQ22, 0x00080000, RD27
  MOV.L        RD27, shootz
// p_map.c:1114   attackrange = distance;
  MOV.L        RD20, attackrange
// p_map.c:1115   aimslope = slope;
  MOV.L        (R2, 156), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, aimslope
// p_map.c:1117   P_PathTraverse ( t1->x, t1->y,
  MOV.L        (RQ8, 28), RQ9
  MOV.L        (RQ8, 24), RQ18
  MOV          PTR_ShootTraverse, RQ26
  ADD          RQ26, 0, RQ15
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  MOV.L        (R2, 148), RD12
  ADD          RD25, 0, RD13
  ADD          R0, 3, RD14
  BSR          P_PathTraverse, R1

.L00C01600:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

w_chkaccess:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  MOV          .L00C01607, RQ8
// w_wad.c:104   fd=fopen(name, "rb");
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ18
// w_wad.c:105   if(fd)
  BREQ.Q       R0, RQ18, .L0080287B
// w_wad.c:106   {
  ADD          RQ18, 0, RQ10
  BSR          fclose, R1
// w_wad.c:108   return(0);
  ADD          R0, 0, RD10
  BSR          .L00C01606, R0

.L0080287B:
// w_wad.c:109   }
  ADD          R0, -1, RD10

.L00C01606:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_GivePower:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RD11, 0, RD18
// p_inter.c:295   {
  BRNE.L       R0, RD18, .L00801C5D
// p_inter.c:297   {
  ADD          RQ9, 48, RQ13
  ADD          R0, 1050, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:299   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00801C5D:
// p_inter.c:302   if (power == pw_invisibility)
  BRNE.Q       2, RD18, .L00801C5E
// p_inter.c:303   {
  ADD          RQ9, 48, RQ13
  LDIZ         2100, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:305   player->mo->flags |= MF_SHADOW;
  MOV.Q        (RQ9, 0), RQ13
  MOV.L        (RQ13, 160), RQ8
  OR           RQ8, 0x00040000, RQ23
  MOV.L        RQ23, (RQ13, 160)
// p_inter.c:306   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00801C5E:
// p_inter.c:309   if (power == pw_infrared)
  BRNE.Q       5, RD18, .L00801C5F
// p_inter.c:310   {
  ADD          RQ9, 48, RQ13
  LDIZ         4200, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:312   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00801C5F:
// p_inter.c:315   if (power == pw_ironfeet)
  BRNE.Q       3, RD18, .L00801C60
// p_inter.c:316   {
  ADD          RQ9, 48, RQ13
  LDIZ         2100, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:318   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00801C60:
// p_inter.c:321   if (power == pw_strength)
  BRNE.Q       1, RD18, .L00801C61
// p_inter.c:322   {
  ADD          RQ9, 0, RQ10
  ADD          R0, 100, RD11
  BSR          P_GiveBody, R1
// p_inter.c:324   player->powers[power] = 1;
  ADD          RQ9, 48, RQ13
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:325   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00801C61:
// p_inter.c:328   if (player->powers[power])
  ADD          RQ9, 48, RQ13
  MOV.L        (RQ13, RD18), RQ8
  BRNE.L       R0, RQ8, .L00C0059F
// p_inter.c:331   player->powers[power] = 1;
  ADD          RQ9, 48, RQ13
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ13, RD18)
// p_inter.c:332   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0160D, R0

.L00C0059F:
  ADD          R0, 0, RQ10

.L00C0160D:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnMissile:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
// p_mobj.c:958   th = P_SpawnMobj (source->x,
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 32), RQ18
  ADDS.L       RQ18, 0x00200000, RQ9
  MOV.L        (RQ27, 28), RQ18
  MOV.L        (RQ27, 24), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ9, 0, RD12
  MOV.L        (R2, 108), RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ8
// p_mobj.c:962   if (th->info->seesound)
  MOV.Q        (RQ8, 136), RQ21
  MOV.L        (RQ21, 16), RQ18
  BREQ.L       R0, RQ18, .L008022D7
// p_mobj.c:963   S_StartSound (th, th->info->seesound);
  MOV.Q        (RQ8, 136), RQ21
  MOV.L        (RQ21, 16), RQ18
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          S_StartSound, R1

.L008022D7:
// p_mobj.c:965   th->target = source;	// where it came from
  MOV.Q        (R2, 120), RQ27
  MOV.Q        RQ27, (RQ8, 176)
// p_mobj.c:966   an = R_PointToAngle2 (source->x, source->y, dest->x, dest->y);	
  MOV.Q        (R2, 112), RQ26
  MOV.L        (RQ26, 28), RQ9
  MOV.L        (RQ26, 24), RQ22
  MOV.L        (RQ27, 28), RQ18
  MOV.L        (RQ27, 24), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ22, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD20
// p_mobj.c:969   if (dest->flags & MF_SHADOW)
  MOV.L        (RQ26, 160), RQ18
  LUI          64, RD25
  BTST.L       RD25, RQ18, .L008022D8
// p_mobj.c:970   an += (P_Random()-P_Random())<<20;	
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ22
  SUBS.L       RQ9, RQ22, RQ23
  SHAD.L       RQ23, 20, RQ18
  ADDU.L       RD20, RQ18, RD20

.L008022D8:
// p_mobj.c:972   th->angle = an;
  MOVU.L       RD20, (RQ8, 56)
// p_mobj.c:973   an >>= ANGLETOFINESHIFT;
  SHLR         RD20, 19, RD20
// p_mobj.c:974   th->momx = FixedMul (th->info->speed, finecosine[an]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD20), RQ9
  MOV.Q        (RQ8, 136), RQ21
  MOV.L        (RQ21, 60), RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ8, 112)
// p_mobj.c:975   th->momy = FixedMul (th->info->speed, finesine[an]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD20), RQ9
  MOV.Q        (RQ8, 136), RQ21
  MOV.L        (RQ21, 60), RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ8, 116)
// p_mobj.c:977   dist = P_AproxDistance (dest->x - source->x, dest->y - source->y);
  MOV.Q        (R2, 112), RQ27
  MOV.L        (RQ27, 28), RQ9
  MOV.Q        (R2, 120), RQ26
  MOV.L        (RQ26, 28), RQ22
  SUBS.L       RQ9, RQ22, RQ23
  MOV.L        (RQ27, 24), RQ18
  MOV.L        (RQ26, 24), RQ9
  SUBS.L       RQ18, RQ9, RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD25
// p_mobj.c:978   dist = dist / th->info->speed;
  MOV.Q        (RQ8, 136), RQ21
  MOV.L        (RQ21, 60), RQ23
  DIVS.L       RD25, RQ23, RD25
// p_mobj.c:980   if (dist < 1)
  MOV.L        RD25, (R2, 104)
  BRGE.L       1, RD25, .L008022D9
// p_mobj.c:981   dist = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 104)

.L008022D9:
// p_mobj.c:983   th->momz = (dest->z - source->z) / dist;
  MOV.Q        (R2, 112), RQ27
  MOV.L        (RQ27, 32), RQ18
  MOV.Q        (R2, 120), RQ26
  MOV.L        (RQ26, 32), RQ9
  SUBS.L       RQ18, RQ9, RQ22
  MOV.L        (R2, 104), RD25
  DIVS.L       RQ22, RD25, RQ23
  MOV.L        RQ23, (RQ8, 120)
// p_mobj.c:984   P_CheckMissileSpawn (th);
  ADD          RQ8, 0, RQ10
  BSR          P_CheckMissileSpawn, R1
// p_mobj.c:986   return th;
  ADD          RQ8, 0, RQ10

.L00C01613:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

A_Fall:
// p_enemy.c:1621   actor->flags &= ~MF_SOLID;
  MOV.L        (RQ10, 160), RQ13
  AND          RQ13, -3, RQ12
  MOV.L        RQ12, (RQ10, 160)

.L00C01614:
  JSR          R1, 0, R0

R_ColorCellPostDecodeC8:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  ADD          RD12, 0, RD23
  ADD          R0, 8, RD22
// r_data.c:1226   l=len;
  ADD          RD23, 0, RD18
// r_data.c:1227   while(l>0)
  BSR          .L008024CE, R0

.L008024CC:
// r_data.c:1228   {
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          R_ColorCellPostDecode8, R1
// r_data.c:1230   cs+=3;	ct+=8;	l-=8;
  ADD          RQ9, 3, RQ9
  ADD          RQ8, 8, RQ8
  ADDS.L       RD18, -8, RD18

.L008024CE:
  BRGT.L       R0, RD18, .L008024CC

.L008024CD:
// r_data.c:1231   }
  ADD          R0, 0, RD10

.L00C0161A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_SetPsprite:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R20, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  ADD          RD12, 0, RD22
// p_pspr.c:68   psp = &player->psprites[position];
  MOV.Q        (R2, 120), RQ20
  ADD          RQ20, 264, RQ27
  MOV.L        (R2, 116), RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ9
  ADD          RQ27, RQ9, RQ9
// p_pspr.c:70   do

.L00801E65:
// p_pspr.c:71   {
  BRNE.L       R0, RD22, .L00801E68
// p_pspr.c:75   psp->state = NULL;
  MOV.Q        RQ0, (RQ9, 0)
// p_pspr.c:76   break;	
  BSR          .L00801E66, R0

.L00801E68:
// p_pspr.c:79   state = &states[stnum];
  MOV          states, RQ20
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ8
  ADD          RQ20, RQ8, RQ8
// p_pspr.c:80   psp->state = state;
  MOV.Q        RQ8, (RQ9, 0)
// p_pspr.c:81   psp->tics = state->tics;	// could be 0
  MOV.L        (RQ8, 8), RQ18
  MOV.L        RQ18, (RQ9, 8)
// p_pspr.c:83   if (state->misc1)
  MOV.L        (RQ8, 28), RQ18
  BREQ.L       R0, RQ18, .L00801E69
// p_pspr.c:86   psp->sx = state->misc1 << FRACBITS;
  MOV.L        (RQ8, 28), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ9, 12)
// p_pspr.c:87   psp->sy = state->misc2 << FRACBITS;
  MOV.L        (RQ8, 32), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ9, 16)

.L00801E69:
// p_pspr.c:92   if (state->action.acp2)
  ADD          RQ8, 16, RQ20
  MOV.Q        (RQ20, 0), RQ27
  BREQ.Q       R0, RQ27, .L00801E6A
// p_pspr.c:94   {
  ADD          RQ8, 16, RQ20
  ADD          RQ20, 0, RQ27
  MOV.Q        (RQ20, 0), RQ26
  MOV.Q        RQ27, (R2, 72)
  MOV.Q        (R2, 120), RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1
  MOV.Q        (RQ9, 0), RQ26
  BREQ.Q       R0, RQ26, .L00801E66

.L00801E6A:
// p_pspr.c:100   stnum = psp->state->nextstate;
  MOV.Q        (RQ9, 0), RQ20
  MOV.L        (RQ20, 24), RD22
  MOV.L        (RQ9, 8), RQ18
  BREQ.L       R0, RQ18, .L00801E65

.L00801E66:

.L00C01620:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

I_StartTic:
// i_btesh4.c:278   void I_StartTic (void)

.L00C01621:
  JSR          R1, 0, R0

w_strupr_n:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 96)
  ADD          RD12, 0, RD21
// w_wad.c:82   if(n<8)
  BRGE.L       8, RD21, .L0080286C
// w_wad.c:83   { __debugbreak(); }

w_strupr_n.debugbreak_L0237:
  BRK          567

.L0080286C:
  ADD          R0, 97, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       65, RQ18, .L0080286D
// w_wad.c:85   { __debugbreak(); }

w_strupr_n.debugbreak_L0238:
  BRK          568

.L0080286D:
  ADD          R0, 122, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       90, RQ18, .L0080286E
// w_wad.c:87   { __debugbreak(); }

w_strupr_n.debugbreak_L0239:
  BRK          569

.L0080286E:
  ADD          R0, 65, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       65, RQ18, .L0080286F
// w_wad.c:89   { __debugbreak(); }

w_strupr_n.debugbreak_L023A:
  BRK          570

.L0080286F:
  ADD          R0, 90, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       90, RQ18, .L00802870
// w_wad.c:91   { __debugbreak(); }

w_strupr_n.debugbreak_L023B:
  BRK          571

.L00802870:
// w_wad.c:93   for(i=0; *s && (i<n); i++)
  ADD          R0, 0, RD9
  MOV.Q        (R2, 96), RQ20
  MOV.B        (RQ20, 0), RQ18
  BREQ.L       R0, RQ18, .L00802873
  BRGE.L       RD21, RD9, .L00802873

.L00802874:

.L00802871:
// w_wad.c:94   { *t++ = toupper(*s++); }
  MOV.Q        (R2, 96), RQ20
  MOV.B        (RQ20, 0), RQ18
  ADD          RQ20, 1, RQ20
  MOV.Q        RQ20, (R2, 96)
  ADD          RQ18, 0, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ22
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RQ22, (RQ23, 0)
  ADDS.L       RD9, 1, RD9
  MOV.B        (RQ20, 0), RQ18
  BREQ.L       R0, RQ18, .L00802876
  BRGE.L       RD21, RD9, .L00802876
  BSR          .L00802871, R0

.L00802876:

.L00802873:
  BRGE.L       RD21, RD9, .L0080287A

.L00802878:
// w_wad.c:96   *t++=0;
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RD0, (RQ23, 0)
  ADDS.L       RD9, 1, RD9
  BRLT.L       RD21, RD9, .L00802878

.L0080287A:

.L00C01640:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

M_SetupNextMenu:
// m_menu.c:1896   {
  ADD          RQ10, 0, RQ13
// m_menu.c:1898   itemOn = currentMenu->lastOn;
  MOV.W        (RQ13, 36), RD12
  MOV.Q        RQ13, currentMenu
  MOV.W        RD12, itemOn

.L00C01646:
  JSR          R1, 0, R0
  .balign 4

HUlib_resetIText:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
// hu_lib.c:309   {
  MOV.L        RD0, (RQ18, 112)
// hu_lib.c:311   HUlib_clearTextLine(&it->l);
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          HUlib_clearTextLine, R1

.L00C0164C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

T_PlatRaise:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
// p_plats.c:57   switch(plat->status)
  MOV.L        (RQ18, 52), RQ9
  BREQ.L       R0, RQ9, .L00801E22
  BREQ.Q       1, RQ9, .L00801E23
  BREQ.Q       2, RQ9, .L00801E24
  BREQ.Q       3, RQ9, .L00801E25
  BSR          .L00801E21, R0

.L00801E22:
// p_plats.c:59   case up:
  MOV.L        (RQ18, 60), RQ9
  MOV.L        (RQ18, 40), RQ23
  MOV.L        (RQ18, 32), RQ20
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ20, 0, RD11
  ADD          RQ23, 0, RD12
  ADDS.L       RQ9, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, 1, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD21
// p_plats.c:65   if (plat->type == raiseAndChange
  MOV.L        (RQ18, 68), RQ9
  BREQ.Q       2, RQ9, .L00801E27
  MOV.L        (RQ18, 68), RQ23
  BREQ.Q       3, RQ23, .L00801E27
  BSR          .L00801E26, R0

.L00801E27:
  MOV.L        leveltime, RD20
  ADD          R0, 7, RD27
  BTSTN.L      RD27, RD20, .L00801E29
// p_plats.c:69   S_StartSound((mobj_t *)&plat->sector->soundorg,
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1

.L00801E29:

.L00801E26:
// p_plats.c:74   if (res == crushed && (!plat->crush))
  BRNE.Q       1, RD21, .L00801E2A
  MOV.L        (RQ18, 60), RQ9
  BRNE.L       R0, RQ9, .L00801E2A

.L00801E2B:
// p_plats.c:75   {
  MOV.L        (RQ18, 44), RQ23
  MOV.L        RQ23, (RQ18, 48)
// p_plats.c:77   plat->status = down;
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ18, 52)
// p_plats.c:78   S_StartSound((mobj_t *)&plat->sector->soundorg,
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 18, RD11
  BSR          S_StartSound, R1
  BSR          .L00801E2D, R0

.L00801E2A:
  BRNE.Q       2, RD21, .L00801E2E
// p_plats.c:84   {
  MOV.L        (RQ18, 44), RQ9
  MOV.L        RQ9, (RQ18, 48)
// p_plats.c:86   plat->status = waiting;
  ADD          R0, 2, RD20
  MOV.L        RD20, (RQ18, 52)
// p_plats.c:87   S_StartSound((mobj_t *)&plat->sector->soundorg,
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1
// p_plats.c:90   switch(plat->type)
  MOV.L        (RQ18, 68), RQ9
  BREQ.Q       4, RQ9, .L00801E30
  BREQ.Q       1, RQ9, .L00801E31
  BREQ.Q       2, RQ9, .L00801E32
  BREQ.Q       3, RQ9, .L00801E33
  BSR          .L00801E34, R0

.L00801E30:

.L00801E31:
// p_plats.c:93   case downWaitUpStay:
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveActivePlat, R1
// p_plats.c:95   break;
  BSR          .L00801E2F, R0

.L00801E32:

.L00801E33:
// p_plats.c:98   case raiseToNearestAndChange:
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveActivePlat, R1
// p_plats.c:100   break;
  BSR          .L00801E2F, R0

.L00801E34:
// p_plats.c:102   default:

.L00801E2F:

.L00801E2E:

.L00801E2D:
// p_plats.c:106   }
  BSR          .L00801E21, R0

.L00801E23:
// p_plats.c:109   case	down:
  MOV.L        (RQ18, 36), RQ23
  MOV.L        (RQ18, 32), RQ20
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ20, 0, RD11
  ADD          RQ23, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, -1, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD21
// p_plats.c:112   if (res == pastdest)
  BRNE.Q       2, RD21, .L00801E35
// p_plats.c:113   {
  MOV.L        (RQ18, 44), RQ9
  MOV.L        RQ9, (RQ18, 48)
// p_plats.c:115   plat->status = waiting;
  ADD          R0, 2, RD20
  MOV.L        RD20, (RQ18, 52)
// p_plats.c:116   S_StartSound((mobj_t *)&plat->sector->soundorg,sfx_pstop);
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1

.L00801E35:
// p_plats.c:117   }
  BSR          .L00801E21, R0

.L00801E24:
// p_plats.c:120   case	waiting:
  MOV.L        (RQ18, 48), RQ9
  ADDS.L       RQ9, -1, RQ23
  MOV.L        RQ23, (RQ18, 48)
  BRNE.L       R0, RQ23, .L00801E36
  MOV.Q        (RQ18, 24), RQ8
  MOV.L        (RQ8, 0), RQ9
  MOV.L        (RQ18, 36), RQ23
  BRNE.Q       RQ23, RQ9, .L00801E37
// p_plats.c:124   plat->status = up;
  MOV.L        RD0, (RQ18, 52)
  BSR          .L00801E38, R0

.L00801E37:
// p_plats.c:126   plat->status = down;
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ18, 52)

.L00801E38:
// p_plats.c:127   S_StartSound((mobj_t *)&plat->sector->soundorg,sfx_pstart);
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 18, RD11
  BSR          S_StartSound, R1

.L00801E36:

.L00801E25:
// p_plats.c:129   case	in_stasis:

.L00801E21:

.L00C01652:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

VID_BlendFlash4x:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
  ADD          RD11, 0, RD21
// i_btesh4.c:1896   fpix=(u16)flash;
  AND          RD21, 0x0000FFFF, RQ8
  AND          RQ8, 0x0000FFFF, RQ9
// i_btesh4.c:1897   fpix|=(fpix<<16);
  SHLD.Q       RQ9, 16, RQ22
  OR           RQ9, RQ22, RQ9
// i_btesh4.c:1898   fpix|=(fpix<<32);
  SHLD.Q       RQ9, 32, RQ22
  OR           RQ9, RQ22, RQ9
// i_btesh4.c:1900   switch((flash>>16)&7)
  SHLR.Q       RD21, 16, RQ8
  AND          RQ8, 7, RQ8
  AND          RQ8, -1, RQ20
  BRGE.L       4, RQ20, .L00801198
  BREQ.L       R0, RQ8, .L0080118F
  BREQ.Q       1, RQ8, .L00801190
  BREQ.Q       2, RQ8, .L00801191
  BREQ.Q       3, RQ8, .L00801192

.L00801198:
  BREQ.Q       4, RQ8, .L00801193
  BREQ.Q       5, RQ8, .L00801194
  BREQ.Q       6, RQ8, .L00801195
  BREQ.Q       7, RQ8, .L00801196
  BSR          .L00801197, R0

.L0080118F:
// i_btesh4.c:1902   case 0:
  ADD          RQ23, 0, RQ18
// i_btesh4.c:1904   break;
  BSR          .L0080118E, R0

.L00801190:
// i_btesh4.c:1905   case 1:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1907   pix1=VID_BlendEven4x16(pix, pix1);
  ADD          RQ23, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1908   pix1=VID_BlendEven4x16(pix, pix1);
  ADD          RQ23, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1909   break;
  BSR          .L0080118E, R0

.L00801191:
// i_btesh4.c:1910   case 2:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1912   pix1=VID_BlendEven4x16(pix, pix1);
  ADD          RQ23, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1913   break;
  BSR          .L0080118E, R0

.L00801192:
// i_btesh4.c:1914   case 3:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1916   pix1=VID_BlendEven4x16(pix1, fpix);
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1917   pix1=VID_BlendEven4x16(pix, pix1);
  ADD          RQ23, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1918   break;
  BSR          .L0080118E, R0

.L00801193:
// i_btesh4.c:1919   case 4:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1921   break;
  BSR          .L0080118E, R0

.L00801194:
// i_btesh4.c:1922   case 5:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1924   pix1=VID_BlendEven4x16(pix1, fpix);
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1925   break;
  BSR          .L0080118E, R0

.L00801195:
// i_btesh4.c:1926   case 6:
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1928   pix1=VID_BlendEven4x16(pix1, fpix);
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1929   pix1=VID_BlendEven4x16(pix1, fpix);
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          VID_BlendEven4x16, R1
  ADD          RQ10, 0, RQ18
// i_btesh4.c:1930   break;
  BSR          .L0080118E, R0

.L00801196:
// i_btesh4.c:1931   case 7:
  ADD          RQ9, 0, RQ18
// i_btesh4.c:1933   break;
  BSR          .L0080118E, R0

.L00801197:

.L0080118E:
// i_btesh4.c:1934   }
  ADD          RQ18, 0, RQ10

.L00C01658:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

tk_iskernel:
// tk_core/tk_mmpage.c:677   
  ADD          R0, 0, RQ13
  SHAD.Q       RQ13, 56, RD10
  SHAR.Q       RD10, 56, RD10

.L00C01659:
  JSR          R1, 0, R0
  .balign 4

W_GetNumForNameBase:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD9
  MOV.Q        RQ11, (R2, 64)
// w_wad.c:1768   i = W_CheckNumForNameBase (base, name);
  ADDS.L       RD9, 0, RD10
  MOV.Q        (R2, 64), RQ11
  BSR          W_CheckNumForNameBase, R1
  ADD          RQ10, 0, RD18
// w_wad.c:1770   if (i == -1)
  BRNE.Q       -1, RD18, .L0080294C
// w_wad.c:1774   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C0165F, R0

.L0080294C:
// w_wad.c:1777   return i;
  ADD          RD18, 0, RD10

.L00C0165F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

M_SoftDivU:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 92)
  ADD          RD11, 0, RD21
  ADD          R0, 1024, RD20
// m_fixed.c:191   if(b<1024)
  BRGEU.L      RD20, RD21, .L00801752
// m_fixed.c:192   {
  MOVU.L       (R2, 92), RD27
  ADDU.L       RD27, R0, RQ13
  MOV.Q        RQ13, (R2, 80)
// m_fixed.c:194   tb=m_softdiv_rcptab[b];
  MOV          TU7A00C408/m_softdiv_rcptab, RQ12
  MOVU.L       (RQ12, RD21), RQ18
  ADDU.L       RQ18, R0, RQ9
// m_fixed.c:196   tc = __int32_dmulu(a, tb);
  ADDU.L       RQ9, R0, RQ18
  DMULU.L      RD27, RQ18, RQ8
// m_fixed.c:197   c=(u32)(tc>>32);
  SHLR.Q       RQ8, 32, RQ23
  ADDU.L       RQ23, R0, RD22
// m_fixed.c:199   return(c);
  ADD          RD22, 0, RD10
  BSR          .L00C01665, R0

.L00801752:
// m_fixed.c:202   tb=M_SoftDivRcp(b);
  ADD          RD21, 0, RD10
  BSR          M_SoftDivRcp, R1
  ADD          RQ10, 0, RQ18
  ADDU.L       RQ18, R0, RQ9
// m_fixed.c:203   tc = __int32_dmulu(a, tb);
  ADDU.L       RQ9, R0, RQ18
  MOVU.L       (R2, 92), RD27
  DMULU.L      RD27, RQ18, RQ8
// m_fixed.c:204   c=(u32)(tc>>32);
  SHLR.Q       RQ8, 32, RQ23
  ADDU.L       RQ23, R0, RD22
// m_fixed.c:205   return(c);
  ADD          RD22, 0, RD10

.L00C01665:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_InterceptVector2:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
  ADD          RQ11, 0, RQ22
// p_sight.c:119   den = FixedMul (v1->dy>>8,v2->dx) - FixedMul(v1->dx>>8,v2->dy);
  MOV.L        (RQ21, 8), RQ8
  MOV.L        (RQ22, 12), RQ9
  SHAR         RQ9, 8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        (RQ21, 12), RQ18
  MOV.L        (RQ22, 8), RQ8
  SHAR         RQ8, 8, RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  SUBS.L       RQ9, RQ8, RD20
// p_sight.c:121   if (den == 0)
  BREQ.L       R0, RD20, .L00C005C4
// p_sight.c:125   num = FixedMul ( (v1->x - v2->x)>>8 ,v1->dy) + 
  MOV.L        (RQ22, 12), RQ9
  MOV.L        (RQ22, 0), RQ18
  MOV.L        (RQ21, 0), RQ23
  SUBS.L       RQ18, RQ23, RQ8
  SHAR         RQ8, 8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  MOV.L        (RQ22, 8), RQ8
  MOV.L        (RQ21, 4), RQ9
  MOV.L        (RQ22, 4), RQ18
  SUBS.L       RQ9, RQ18, RQ27
  SHAR         RQ27, 8, RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ23, RQ18, RD26
  MOV.L        RD26, (R2, 108)
// p_sight.c:127   frac = FixedDiv (num , den);
  ADD          RD26, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedDiv, R1
  BSR          .L00C0166B, R0
// p_sight.c:129   return frac;

.L00C005C4:
  ADD          R0, 0, RQ10

.L00C0166B:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

fread:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -392, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          RQ11, 0, RQ23
  MOV.Q        RQ12, (R2, 152)
  ADD          RQ13, 0, RQ18
// pdpc201/stdio.c:661   
  MOV.L        RD0, (R2, 132)
// pdpc201/stdio.c:662   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 136)
// pdpc201/stdio.c:664   
  BRNE.Q       R0, RQ18, .L0080032A
// pdpc201/stdio.c:665   
  ADD          R0, -1, RQ10
  BSR          .L00C01671, R0

.L0080032A:
// pdpc201/stdio.c:667   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:669   
  MOV.Q        (R2, 152), RQ27
  BRNE.Q       1, RQ27, .L0080032B
// pdpc201/stdio.c:670   
  ADD          RQ23, 0, RQ22
  BSR          .L0080032C, R0

.L0080032B:
  BRNE.Q       1, RQ23, .L0080032D
// pdpc201/stdio.c:674   
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ22
  BSR          .L0080032E, R0

.L0080032D:
// pdpc201/stdio.c:678   
  MOV.Q        (R2, 152), RQ27
  MULU.Q       RQ23, RQ27, RQ22

.L0080032E:

.L0080032C:
// pdpc201/stdio.c:680   
  MOV.Q        (RQ18, 32), RQ27
  BRGEU.Q      RQ27, RQ22, .L0080032F
// pdpc201/stdio.c:682   
  MOV.B        RD0, (RQ18, 8)

.L0080032F:
// pdpc201/stdio.c:689   
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 8)
// pdpc201/stdio.c:691   
  MOV.L        (RQ18, 64), RQ21
  BREQ.Q       -1, RQ21, .L00800330
// pdpc201/stdio.c:692   
  MOV.L        (RQ18, 64), RQ21
  SHAD.Q       RQ21, 56, RQ27
  SHAR.Q       RQ27, 56, RQ27
  MOV.Q        (RQ18, 40), RQ9
  ADD          RQ9, -1, RQ20
  MOV.Q        RQ20, (RQ18, 40)
  MOV.B        RQ27, (RQ20, 0)
// pdpc201/stdio.c:694   
  ADD          R0, -1, RD26
  MOV.L        RD26, (RQ18, 64)

.L00800330:
// pdpc201/stdio.c:695   
  MOV.B        (RQ18, 8), RQ21
  BRNE.L       R0, RQ21, .L00800331
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 40), RQ20
  SUB          RQ9, RQ20, RQ27
  BRGTU.Q      RQ27, RQ22, .L00800332
// pdpc201/stdio.c:706   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (R2, 168), RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ22, 0, RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:708   
  ADD          RQ22, 0, RQ27
  MOV.Q        RQ27, (R2, 136)
// pdpc201/stdio.c:709   
  MOV.Q        (RQ18, 40), RQ20
  ADD          RQ20, RQ22, RQ9
  MOV.Q        RQ9, (RQ18, 40)
  BSR          .L00800333, R0

.L00800332:
// pdpc201/stdio.c:712   
  ADD          R2, 136, RQ20
  MOV.Q        (R2, 168), RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ22, 0, RQ12
  ADD          RQ20, 0, RQ13
  BSR          freadSlowB, R1

.L00800333:
  MOV.Q        (R2, 152), RQ27
  BRNE.Q       1, RQ27, .L00800334
  MOV.Q        (R2, 136), RQ27
  BRNE.Q       RQ23, RQ27, .L00800335
// pdpc201/stdio.c:719   
  ADD          R0, 1, RQ27
  ADD          RQ27, 0, RQ8
  BSR          .L00800336, R0

.L00800335:
// pdpc201/stdio.c:723   
  ADD          RQ0, 0, RQ8

.L00800336:
  BSR          .L00800337, R0

.L00800334:
  BRNE.Q       1, RQ23, .L00800338
// pdpc201/stdio.c:728   
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ8
  BSR          .L00800339, R0

.L00800338:
  BRNE.Q       R0, RQ23, .L0080033A
// pdpc201/stdio.c:734   
  ADD          RQ0, 0, RQ8
  BSR          .L0080033B, R0

.L0080033A:
// pdpc201/stdio.c:738   
  MOV.Q        (R2, 136), RQ27
  DIVU.Q       RQ27, RQ23, RQ8

.L0080033B:

.L00800339:

.L00800337:
// pdpc201/stdio.c:741   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:743   
  ADD          RQ8, 0, RQ10
  BSR          .L00C01671, R0
  BSR          .L0080033C, R0

.L00800331:
// pdpc201/stdio.c:746   
  ADD          R2, 132, RQ9
  MOV.L        (RQ18, 0), RQ21
  ADD          RQ21, 0, RD10
  MOV.Q        (R2, 168), RQ11
  ADD          RQ22, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __read, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 120)
  MOV.L        (R2, 132), RD25
  BREQ.L       R0, RD25, .L0080033D
// pdpc201/stdio.c:749   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (R2, 120), RQ27
  ADDS.L       RQ27, 0, RQ21
  MOV.L        RQ21, (RQ9, 0)
// pdpc201/stdio.c:751   
  ADD          RQ0, 0, RQ26
  MOV.Q        RQ26, (R2, 136)
// pdpc201/stdio.c:752   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 56)
  BSR          .L0080033E, R0

.L0080033D:
// pdpc201/stdio.c:755   
  MOV.Q        (R2, 120), RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 136)

.L0080033E:
  MOV.Q        (R2, 152), RQ27
  BRNE.Q       1, RQ27, .L0080033F
  MOV.Q        (R2, 136), RQ27
  BRNE.Q       RQ23, RQ27, .L00800340
// pdpc201/stdio.c:762   
  ADD          R0, 1, RQ27
  ADD          RQ27, 0, RQ8
  BSR          .L00800341, R0

.L00800340:
// pdpc201/stdio.c:766   
  ADD          RQ0, 0, RQ8
// pdpc201/stdio.c:768   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)

.L00800341:
  BSR          .L00800342, R0

.L0080033F:
  BRNE.Q       1, RQ23, .L00800343
// pdpc201/stdio.c:772   
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ8
  MOV.Q        (R2, 152), RQ26
  BREQ.Q       RQ27, RQ26, .L00800344
// pdpc201/stdio.c:775   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)

.L00800344:
  BSR          .L00800345, R0

.L00800343:
  BRNE.Q       R0, RQ23, .L00800346
// pdpc201/stdio.c:782   
  ADD          RQ0, 0, RQ8
  BSR          .L00800347, R0

.L00800346:
// pdpc201/stdio.c:786   
  MOV.Q        (R2, 136), RQ27
  DIVU.Q       RQ27, RQ23, RQ8

.L00800347:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       RQ27, RQ22, .L00800348
// pdpc201/stdio.c:790   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)

.L00800348:

.L00800345:

.L00800342:
// pdpc201/stdio.c:793   
  MOV.Q        (RQ18, 16), RQ27
  MOV.Q        (R2, 136), RQ26
  ADD          RQ27, RQ26, RQ25
  MOV.Q        RQ25, (RQ18, 16)
// pdpc201/stdio.c:796   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:797   
  ADD          RQ8, 0, RQ10
  BSR          .L00C01671, R0

.L0080033C:

.L00C01671:
  ADD          R2, 392, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

tkdfs_readutf8:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.Q        RQ10, (R2, 56)
// tk_core/tk_rwad.c:969   
  MOV.Q        (R2, 56), RQ13
  MOV.Q        (RQ13, 0), RQ18
// tk_core/tk_rwad.c:970   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD22
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:971   
  BRGE.L       128, RD22, .L00800F34
// tk_core/tk_rwad.c:972   
  MOV.L        RD22, (R2, 44)
  BSR          .L00800F35, R0

.L00800F34:
  BRLT.L       192, RD22, .L00800F36
  BRGE.L       224, RD22, .L00800F37
// tk_core/tk_rwad.c:978   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD21
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:980   
  AND          RD22, 31, RQ9
  SHAD.L       RQ9, 6, RQ23
  AND          RD21, 63, RQ9
  OR           RQ23, RQ9, RD13
  MOV.L        RD13, (R2, 44)
  BSR          .L00800F38, R0

.L00800F37:
  BRGE.L       240, RD22, .L00800F39
// tk_core/tk_rwad.c:982   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD21
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:984   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD13
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:985   
  AND          RD22, 15, RQ9
  SHAD.L       RQ9, 12, RQ23
  AND          RD21, 63, RQ9
  SHAD.L       RQ9, 6, RQ20
  OR           RQ23, RQ20, RQ9
  AND          RD13, 63, RQ23
  MOV.L        RD13, (R2, 52)
  OR           RQ9, RQ23, RD12
  MOV.L        RD12, (R2, 44)
  BSR          .L00800F3A, R0

.L00800F39:
  BRGE.L       248, RD22, .L00800F3B
// tk_core/tk_rwad.c:987   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD21
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:988   
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD13
  ADD          RQ8, 1, RQ18
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD12
  ADD          RQ8, 1, RQ18
// tk_core/tk_rwad.c:989   
  AND          RD22, 7, RQ9
  SHAD.L       RQ9, 18, RQ23
  AND          RD21, 63, RQ20
  SHAD.L       RQ20, 12, RQ9
  OR           RQ23, RQ9, RQ20
  AND          RD13, 63, RQ9
  MOV.L        RD13, (R2, 52)
  SHAD.L       RQ9, 6, RQ23
  OR           RQ20, RQ23, RQ9
  AND          RD12, 63, RQ23
  MOV.L        RD12, (R2, 48)
  OR           RQ9, RQ23, RD11
  MOV.L        RD11, (R2, 44)

.L00800F3B:

.L00800F3A:

.L00800F38:

.L00800F36:

.L00800F35:
// tk_core/tk_rwad.c:992   
  MOV.Q        (R2, 56), RQ13
  MOV.Q        RQ18, (RQ13, 0)
// tk_core/tk_rwad.c:994   
  MOV.L        (R2, 44), RD10

.L00C01677:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

_tolower_gen:
// pdpc201/ctype.c:412   
  BRGT.L       127, RD10, .L00800854
  ADD          R0, 65, R5
  CMPGE.Q      RD10, R5, RQ13
  ADD          R0, 90, R5
  CMPLE.Q      RD10, R5, RQ12
  BTST.L       RQ12, RQ13, .L00800855
// pdpc201/ctype.c:416   
  ADDS.L       RD10, 32, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L00800855:
// pdpc201/ctype.c:417   
  JSR          R1, 0, R0

.L00800854:
// pdpc201/ctype.c:420   
  ADD          R0, 160, R5
  CMPGE.Q      RD10, R5, RQ12
  ADD          R0, 214, R5
  CMPLE.Q      RD10, R5, RQ13
  BTST.L       RQ13, RQ12, .L00800856
// pdpc201/ctype.c:421   
  ADDS.L       RD10, 32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L00800856:
// pdpc201/ctype.c:425   
  ADD          R0, 216, R5
  CMPGE.Q      RD10, R5, RQ13
  ADD          R0, 222, R5
  CMPLE.Q      RD10, R5, RQ12
  BTST.L       RQ12, RQ13, .L00800857
// pdpc201/ctype.c:426   
  ADDS.L       RD10, 32, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L00800857:
// pdpc201/ctype.c:431   
  MOV.L        locale_flags, RD11
  ADD          R0, 2, RD17
  BTST.L       RD17, RD11, .L00800858
  BRNE.Q       138, RD10, .L00800859
// pdpc201/ctype.c:434   
  ADD          R0, 154, RD10
  JSR          R1, 0, R0

.L00800859:
  BRNE.Q       140, RD10, .L0080085A
// pdpc201/ctype.c:436   
  ADD          R0, 156, RD10
  JSR          R1, 0, R0

.L0080085A:
  BRNE.Q       142, RD10, .L0080085B
// pdpc201/ctype.c:438   
  ADD          R0, 158, RD10
  JSR          R1, 0, R0

.L0080085B:
  BRNE.Q       159, RD10, .L0080085C
// pdpc201/ctype.c:440   
  ADD          R0, 255, RD10
  JSR          R1, 0, R0

.L0080085C:

.L00800858:
// pdpc201/ctype.c:443   
  ADD          R0, 913, R5
  CMPGE.Q      RD10, R5, RQ12
  ADD          R0, 938, R5
  CMPLE.Q      RD10, R5, RQ13
  BTST.L       RQ13, RQ12, .L0080085D
// pdpc201/ctype.c:444   
  ADDS.L       RD10, 32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L0080085D:
// pdpc201/ctype.c:446   
  ADD          R0, 1024, RD11
  CMPGE.Q      RD10, RD11, RQ13
  ADD          R0, 1039, RD17
  CMPGE.Q      RD17, RD10, RQ12
  BTST.L       RQ12, RQ13, .L0080085E
// pdpc201/ctype.c:447   
  ADDS.L       RD10, 80, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L0080085E:
// pdpc201/ctype.c:448   
  ADD          R0, 1040, RD11
  CMPGE.Q      RD10, RD11, RQ12
  ADD          R0, 1071, RD17
  CMPGE.Q      RD17, RD10, RQ13
  BTST.L       RQ13, RQ12, .L0080085F
// pdpc201/ctype.c:449   
  ADDS.L       RD10, 32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L0080085F:
// pdpc201/ctype.c:451   

.L00C01678:
  JSR          R1, 0, R0
  .balign 4

PIT_RadiusAttack:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
// p_map.c:1205   if (!(thing->flags & MF_SHOOTABLE) )
  MOV.L        (RQ9, 160), RQ18
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ18, .L00801D9C
// p_map.c:1206   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0167E, R0

.L00801D9C:
// p_map.c:1210   if (thing->type == MT_CYBORG
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       21, RQ18, .L00801D9E
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       19, RQ18, .L00801D9E
  BSR          .L00801D9D, R0

.L00801D9E:
// p_map.c:1212   return true;	
  ADD          R0, 1, RD10
  BSR          .L00C0167E, R0

.L00801D9D:
// p_map.c:1214   dx = abs(thing->x - bombspot->x);
  MOV.L        (RQ9, 24), RQ18
  MOV.Q        bombspot, RQ27
  MOV.L        (RQ27, 24), RQ8
  SUBS.L       RQ18, RQ8, RQ22
  SHAR.Q       RQ22, 63, RQ6
  SUB          R0, RQ22, RD21
  SHAR.Q       RD21, 63, RQ7
  AND          RD21, RQ6, RQ6
  AND          RQ22, RQ7, RQ7
  OR           RQ6, RQ7, RD21
// p_map.c:1215   dy = abs(thing->y - bombspot->y);
  MOV.L        (RQ9, 28), RQ18
  MOV.Q        bombspot, RQ27
  MOV.L        (RQ27, 28), RQ8
  SUBS.L       RQ18, RQ8, RQ22
  SHAR.Q       RQ22, 63, RQ6
  SUB          R0, RQ22, RD20
  SHAR.Q       RD20, 63, RQ7
  AND          RD20, RQ6, RQ6
  AND          RQ22, RQ7, RQ7
  OR           RQ6, RQ7, RD20
// p_map.c:1217   dist = dx>dy ? dx : dy;
  BRLE.L       RD20, RD21, .L00801DA0
  ADD          RD21, 0, RQ18
  BSR          .L00801DA1, R0

.L00801DA0:
  ADD          RD20, 0, RQ18

.L00801DA1:
  ADD          RQ18, 0, RD23
// p_map.c:1218   dist = (dist - thing->radius) >> FRACBITS;
  MOV.L        (RQ9, 104), RQ8
  SUBS.L       RD23, RQ8, RQ22
  SHAR         RQ22, 16, RD23
// p_map.c:1220   if (dist < 0)
  BRGE.L       R0, RD23, .L00801DA2
// p_map.c:1221   dist = 0;
  ADD          R0, 0, RD23

.L00801DA2:
// p_map.c:1223   if (dist >= bombdamage)
  MOV.L        bombdamage, RD27
  BRLT.L       RD27, RD23, .L00801DA3
// p_map.c:1224   return true;	// out of range
  ADD          R0, 1, RD10
  BSR          .L00C0167E, R0

.L00801DA3:
// p_map.c:1226   if ( P_CheckSight (thing, bombspot) )
  ADD          RQ9, 0, RQ10
  MOV.Q        bombspot, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801DA4
// p_map.c:1229   P_DamageMobj (thing, bombspot, bombsource, bombdamage - dist);
  MOV.L        bombdamage, RD27
  SUBS.L       RD27, RD23, RQ8
  ADD          RQ9, 0, RQ10
  MOV.Q        bombspot, RQ11
  MOV.Q        bombsource, RQ12
  ADDS.L       RQ8, 0, RD13
  BSR          P_DamageMobj, R1

.L00801DA4:
// p_map.c:1232   return true;
  ADD          R0, 1, RD10

.L00C0167E:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

HUlib_eraseTextLine:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ21
// hu_lib.c:155   if (!automapactive &&
  MOV.L        automapactive, RD27
  BRNE.L       R0, RD27, .L00802CEB
  MOV.L        viewwindowx, RD27
  BREQ.L       R0, RD27, .L00802CEB

.L00802CED:
  MOV.L        (RQ21, 108), RQ18
  BREQ.L       R0, RQ18, .L00802CEB

.L00802CEC:
// hu_lib.c:157   {
  MOV.Q        (RQ21, 8), RQ27
  MOV.Q        (RQ27, 0), RQ13
  MOV.W        (RQ13, 2), RQ18
  ADDS.L       RQ18, 1, RD20
// hu_lib.c:159   for (y=l->y,yoffset=y*SCREENWIDTH ; y<l->y+lh ; y++,yoffset+=SCREENWIDTH)
  MOV.L        (RQ21, 4), RQ18
  ADD          RQ18, 0, RD8
  ADD          R0, 320, R5
  MULS.L       RD8, R5, RQ18
  ADD          RQ18, 0, RD22
  MOV.L        (RQ21, 4), RQ18
  ADDS.L       RQ18, RD20, RQ9
  BRGE.L       RQ9, RD8, .L00802CF1

.L00802CEF:
// hu_lib.c:160   {
  MOV.L        viewwindowy, RD27
  CMPGT.Q      RD27, RD8, RQ18
  MOV.L        viewheight, RD13
  ADDS.L       RD27, RD13, RQ9
  CMPGE.Q      RD8, RQ9, RQ23
  OR           RQ18, RQ23, RQ9
  BREQ.L       R0, RQ9, .L00802CF2
// hu_lib.c:162   R_VideoErase(yoffset, SCREENWIDTH); // erase entire line
  ADDU.L       RD22, R0, RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 320, RD11
  BSR          R_VideoErase, R1
  BSR          .L00802CF3, R0

.L00802CF2:
// hu_lib.c:164   {
  ADDU.L       RD22, R0, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        viewwindowx, RD11
  BSR          R_VideoErase, R1
// hu_lib.c:166   R_VideoErase(yoffset + viewwindowx + viewwidth, viewwindowx);
  MOV.L        viewwindowx, RD27
  ADDS.L       RD22, RD27, RQ9
  MOV.L        viewwidth, RD27
  ADDS.L       RQ9, RD27, RQ23
  ADDU.L       RQ23, R0, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        viewwindowx, RD11
  BSR          R_VideoErase, R1

.L00802CF3:
  ADDS.L       RD8, 0, RQ9
  ADDS.L       RD8, 1, RD8
  ADDS.L       RD22, 320, RQ18
  ADD          RQ18, 0, RD22
  MOV.L        (RQ21, 4), RQ9
  ADDS.L       RQ9, RD20, RQ18
  BRLT.L       RQ18, RD8, .L00802CEF

.L00802CF1:

.L00802CEB:
// hu_lib.c:172   lastautomapactive = automapactive;
  MOV.L        automapactive, RD27
  ADD          RD27, 0, RD13
  MOV.L        RD13, HUlib_eraseTextLine/lastautomapactive!19
// hu_lib.c:173   if (l->needsupdate) l->needsupdate--;
  MOV.L        (RQ21, 108), RQ9
  BREQ.L       R0, RQ9, .L00802CF4
  MOV.L        (RQ21, 108), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV.L        RQ9, (RQ21, 108)

.L00802CF4:

.L00C01684:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

M_WriteText:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 124)
  MOV.L        RD11, (R2, 120)
  MOV.Q        RQ12, (R2, 112)
// m_menu.c:1370   ch = string;
  MOV.Q        (R2, 112), RQ27
  ADD          RQ27, 0, RQ13
  MOV.Q        RQ13, (R2, 104)
// m_menu.c:1371   cx = x;
  MOV.L        (R2, 124), RD9
// m_menu.c:1372   cy = y;
  MOV.L        (R2, 120), RD22
// m_menu.c:1374   while(1)

.L0080168A:
// m_menu.c:1375   {
  MOV.Q        (R2, 104), RQ27
  MOV.B        (RQ27, 0), RD18
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 104)
// m_menu.c:1377   if (!c)
  BREQ.L       R0, RD18, .L0080168B
// m_menu.c:1379   if (c == '\n')
  BRNE.Q       10, RD18, .L0080168D
// m_menu.c:1380   {
  MOV.L        (R2, 124), RD9
// m_menu.c:1382   cy += 12;
  ADDS.L       RD22, 12, RD22
// m_menu.c:1383   continue;
  BSR          .L0080168A, R0

.L0080168D:
// m_menu.c:1386   c = toupper(c) - HU_FONTSTART;
  ADD          RD18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, -33, RD18
// m_menu.c:1387   if (c < 0 || c>= HU_FONTSIZE)
  CMPLT.Q      RD18, R0, RQ8
  ADD          R0, 63, R5
  CMPGE.Q      RD18, R5, RQ20
  OR           RQ8, RQ20, RQ27
  BREQ.L       R0, RQ27, .L0080168E
// m_menu.c:1388   {
  ADDS.L       RD9, 4, RD9
// m_menu.c:1390   continue;
  BSR          .L0080168A, R0

.L0080168E:
// m_menu.c:1393   w = SHORT (hu_font[c]->width);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD18), RQ23
  MOV.W        (RQ23, 0), RD21
// m_menu.c:1394   if (cx+w > SCREENWIDTH)
  ADDS.L       RD9, RD21, RQ8
  BRGT.L       320, RQ8, .L0080168B
// m_menu.c:1396   V_DrawPatchDirect(cx, cy, 0, hu_font[c]);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD18), RQ23
  ADDS.L       RD9, 0, RD10
  ADD          RD22, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatchDirect, R1
// m_menu.c:1397   cx+=w;
  ADDS.L       RD9, RD21, RD9
  BSR          .L0080168A, R0

.L0080168B:

.L00C0168A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sprint_hex_n:
// pdpc201/btshx_supa.c:1693   
  ADD          RQ10, 0, RQ13
// pdpc201/btshx_supa.c:1694   
  BRLE.L       15, RD12, .L00800FD3
  SHLR.Q       RQ11, 60, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD3:
// pdpc201/btshx_supa.c:1695   
  BRLE.L       14, RD12, .L00800FD4
  SHLR.Q       RQ11, 56, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD4:
// pdpc201/btshx_supa.c:1696   
  BRLE.L       13, RD12, .L00800FD5
  SHLR.Q       RQ11, 52, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD5:
// pdpc201/btshx_supa.c:1697   
  BRLE.L       12, RD12, .L00800FD6
  SHLR.Q       RQ11, 48, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD6:
// pdpc201/btshx_supa.c:1698   
  BRLE.L       11, RD12, .L00800FD7
  SHLR.Q       RQ11, 44, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD7:
// pdpc201/btshx_supa.c:1699   
  BRLE.L       10, RD12, .L00800FD8
  SHLR.Q       RQ11, 40, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD8:
// pdpc201/btshx_supa.c:1700   
  BRLE.L       9, RD12, .L00800FD9
  SHLR.Q       RQ11, 36, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FD9:
// pdpc201/btshx_supa.c:1701   
  BRLE.L       8, RD12, .L00800FDA
  SHLR.Q       RQ11, 32, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDA:
// pdpc201/btshx_supa.c:1702   
  BRLE.L       7, RD12, .L00800FDB
  SHLR.Q       RQ11, 28, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDB:
// pdpc201/btshx_supa.c:1703   
  BRLE.L       6, RD12, .L00800FDC
  SHLR.Q       RQ11, 24, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDC:
// pdpc201/btshx_supa.c:1704   
  BRLE.L       5, RD12, .L00800FDD
  SHLR.Q       RQ11, 20, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDD:
// pdpc201/btshx_supa.c:1705   
  BRLE.L       4, RD12, .L00800FDE
  SHLR.Q       RQ11, 16, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDE:
// pdpc201/btshx_supa.c:1706   
  BRLE.L       3, RD12, .L00800FDF
  SHLR.Q       RQ11, 12, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FDF:
// pdpc201/btshx_supa.c:1707   
  BRLE.L       2, RD12, .L00800FE0
  SHLR.Q       RQ11, 8, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FE0:
// pdpc201/btshx_supa.c:1708   
  BRLE.L       1, RD12, .L00800FE1
  SHLR.Q       RQ11, 4, RQ17
  AND          RQ17, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FE1:
// pdpc201/btshx_supa.c:1709   
  BRLE.L       R0, RD12, .L00800FE2
  AND          RQ11, 15, RQ17
  MOV.Q        tk_sprint_hex_n/chrs!2604, RQ16
  MOV.B        (RQ16, RQ17), RQ15
  ADD          RQ10, 0, RQ14
  ADD          RQ10, 1, RQ10
  MOV.B        RQ15, (RQ14, 0)

.L00800FE2:
// pdpc201/btshx_supa.c:1711   
  SUB          RQ10, RQ13, RQ17
  ADDS.L       RD12, 0, RQ16
  BREQ.Q       RQ16, RQ17, .L00800FE3
// pdpc201/btshx_supa.c:1712   

tk_sprint_hex_n.debugbreak_L0241:
  BRK          577

.L00800FE3:
// pdpc201/btshx_supa.c:1716   

.L00C0168B:
  JSR          R1, 0, R0
  .balign 4

P_GunShot:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ22
  MOV.L        RD11, (R2, 116)
// p_pspr.c:635   damage = 5*(P_Random ()%3+1);
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 3, RD20
  MODS.L       RQ9, RD20, RQ9
  ADDS.L       RQ9, 1, RQ18
  ADD          R0, 5, R5
  MULS.L       RQ18, R5, RD21
// p_pspr.c:636   angle = mo->angle;
  MOVU.L       (RQ22, 56), RD8
// p_pspr.c:638   if (!accurate)
  MOV.L        (R2, 116), RD27
  BRNE.L       R0, RD27, .L00801EB7
// p_pspr.c:639   angle += (P_Random()-P_Random())<<18;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ9, RQ18, RQ23
  SHAD.L       RQ23, 18, RQ18
  ADDU.L       RD8, RQ18, RD8

.L00801EB7:
// p_pspr.c:641   P_LineAttack (mo, angle, MISSILERANGE, bulletslope, damage);
  ADD          RQ22, 0, RQ10
  ADDU.L       RD8, R0, RD11
  LUI          0x00008000, RD12
  MOV.L        bulletslope, RD13
  ADD          RD21, 0, RD14
  BSR          P_LineAttack, R1

.L00C01697:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

tk_sprint_decimal:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -568, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 36)
  ADD          R2, 48, RQ6
  MOV.Q        RQ6, (R2, 24)
// pdpc201/btshx_supa.c:1720   
// pdpc201/btshx_supa.c:1725   
  MOV.L        (R2, 36), RD13
  BRNE.L       R0, RD13, .L00800FE4
// pdpc201/btshx_supa.c:1726   
  ADD          RQ23, 0, RQ8
  ADD          RQ23, 1, RQ23
  ADD          R0, 48, RD13
  MOV.B        RD13, (RQ8, 0)
// pdpc201/btshx_supa.c:1728   
  ADD          RQ23, 0, RQ10
  BSR          .L00C0169D, R0

.L00800FE4:
// pdpc201/btshx_supa.c:1731   
  MOV.L        (R2, 36), RD9
  ADD          R0, 0, RD20
// pdpc201/btshx_supa.c:1732   
  BRGE.L       R0, RD9, .L00800FE5
// pdpc201/btshx_supa.c:1733   
  SUBS.L       R0, RD9, RD9
  ADD          R0, 1, RD20

.L00800FE5:
// pdpc201/btshx_supa.c:1735   
  ADD          R2, 48, RQ18
// pdpc201/btshx_supa.c:1738   
  BSR          .L00800FE6, R0

.L00800FE7:
// pdpc201/btshx_supa.c:1739   
  ADD          RD9, 0, RD21
  ADD          R0, 10, RD13
  MODS.L       RD21, RD13, RD21
// pdpc201/btshx_supa.c:1741   
  ADDS.L       RD21, 48, RQ22
  ADD          RQ18, 0, RQ8
  ADD          RQ18, 1, RQ18
  MOV.B        RQ22, (RQ8, 0)
// pdpc201/btshx_supa.c:1742   
  DIVS.L       RD9, RD13, RD9

.L00800FE6:
  BRGT.L       R0, RD9, .L00800FE7

.L00800FE8:
// pdpc201/btshx_supa.c:1743   
  BREQ.L       R0, RD20, .L00800FE9
// pdpc201/btshx_supa.c:1744   
  ADD          RQ18, 0, RQ8
  ADD          RQ18, 1, RQ18
  ADD          R0, 45, RD13
  MOV.B        RD13, (RQ8, 0)

.L00800FE9:
// pdpc201/btshx_supa.c:1746   
  BSR          .L00800FEA, R0

.L00800FEB:
// pdpc201/btshx_supa.c:1747   
  ADD          RQ18, -1, RQ18
  MOV.B        (RQ18, 0), RQ22
  ADD          RQ23, 0, RQ8
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ8, 0)

.L00800FEA:
  ADD          R2, 48, RQ13
  BRGT.Q       RQ13, RQ18, .L00800FEB

.L00800FEC:
  ADD          RQ23, 0, RQ10

.L00C0169D:
  ADD          R2, 568, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

R_ColorCellPostDecodeC16:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  ADD          RD12, 0, RD23
  ADD          R0, 4, RD22
  ADD          R0, 16, RD21
// r_data.c:1239   l=len;
  ADD          RD23, 0, RD18
// r_data.c:1240   while(l>0)
  BSR          .L008024D1, R0

.L008024CF:
// r_data.c:1241   {
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 4, RD12
  BSR          R_DecodeColorCell8, R1
// r_data.c:1243   cs+=4;	ct+=16;	l-=16;
  ADD          RQ9, 4, RQ9
  ADD          RQ8, 16, RQ8
  ADDS.L       RD18, -16, RD18

.L008024D1:
  BRGT.L       R0, RD18, .L008024CF

.L008024D0:
// r_data.c:1244   }
  ADD          R0, 0, RD10

.L00C016A3:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

w_read:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD18
  MOV.Q        RQ11, (R2, 96)
  MOV.L        RD12, (R2, 92)
  ADD          R0, 32, RD21
// w_wad.c:207   if(hdl<0)
  BRGE.L       R0, RD18, .L0080288D
// w_wad.c:208   __debugbreak();

w_read.debugbreak_L0251:
  BRK          593

.L0080288D:
// w_wad.c:210   if(hdl>=32)
  BRLT.L       32, RD18, .L0080288E
// w_wad.c:211   __debugbreak();

w_read.debugbreak_L0252:
  BRK          594

.L0080288E:
// w_wad.c:214   fd=w_openfiles[hdl];
  MOV          w_openfiles, RQ20
  MOV.Q        (RQ20, RD18), RQ9
// w_wad.c:215   if(!fd)
  BRNE.Q       R0, RQ9, .L0080288F
// w_wad.c:216   __debugbreak();

w_read.debugbreak_L0253:
  BRK          595

.L0080288F:
// w_wad.c:219   i=fread(buf, 1, sz, fd);
  MOV.L        (R2, 92), RD20
  ADDS.L       RD20, 0, RQ23
  MOV.Q        (R2, 96), RQ10
  ADD          R0, 1, RQ11
  ADD          RQ23, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          fread, R1
  ADD          RQ10, 0, RQ8
  ADDS.L       RQ8, 0, RD22
// w_wad.c:220   return(i);
  ADD          RD22, 0, RD10

.L00C016B8:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

W_CacheFlatNum:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  ADD          RD11, 0, RD20
// r_data.c:997   if(flat<=0)
  MOV.L        (R2, 108), RD27
  BRGT.L       R0, RD27, .L00802491
// r_data.c:998   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C016C6, R0

.L00802491:
// r_data.c:999   if(flat>=numlumps)
  MOV.L        (R2, 108), RD27
  MOV.L        numlumps, RD13
  BRLT.L       RD13, RD27, .L00802492
// r_data.c:1000   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C016C6, R0

.L00802492:
// r_data.c:1002   flat2 = flattranslation[flat];
  MOV.Q        flattranslation, RQ27
  MOV.L        (R2, 108), RD13
  MOV.L        (RQ27, RD13), RD12
// r_data.c:1004   lump = firstflat + flat2;
  MOV.L        firstflat, RD27
  ADDS.L       RD27, RD12, RD22
  MOV.L        RD12, (R2, 88)
// r_data.c:1006   if(lump<=0)
  BRGT.L       R0, RD22, .L00802493
// r_data.c:1007   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C016C6, R0

.L00802493:
// r_data.c:1008   if(lump>=numlumps)
  MOV.L        numlumps, RD27
  BRLT.L       RD27, RD22, .L00802494
// r_data.c:1009   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C016C6, R0

.L00802494:
// r_data.c:1013   src = patchcache[lump];
  MOV.Q        patchcache, RQ27
  MOV.Q        (RQ27, RD22), RQ8
// r_data.c:1014   if(src)
  BREQ.Q       R0, RQ8, .L00802495
// r_data.c:1015   return(src);
  ADD          RQ8, 0, RQ10
  BSR          .L00C016C6, R0

.L00802495:
// r_data.c:1017   if(tag == PU_STATIC)
  BRNE.Q       1, RD20, .L00802496
// r_data.c:1018   tag = PU_FLAT;
  ADD          R0, 9, RD20

.L00802496:
// r_data.c:1020   size = lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 24), RD27
// r_data.c:1022   if(size == 1024)
  MOV.L        RD27, (R2, 92)
  ADD          R0, 1024, RD12
  BRNE.Q       RD12, RD27, .L00802497
  BRNE.Q       R0, RQ8, .L00802498
// r_data.c:1026   src = Z_Malloc (4096, tag, &patchcache[lump]);
  MOV.Q        patchcache, RQ27
  LEA.Q        RQ27, RD22, RQ12
  LUI          1, RD10
  ADD          RD20, 0, RD11
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ8

.L00802498:
// r_data.c:1027   buf = W_CacheLumpNum(lump, PU_CACHE);
  ADD          RD22, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ21
// r_data.c:1030   cs = buf;	ct = src;	cse = cs + 1024;
  ADD          RQ21, 0, RQ18
  ADD          RQ8, 0, RQ9
  ADD          RQ18, 1024, RQ27
  MOV.Q        RQ27, (R2, 96)
// r_data.c:1031   while(cs < cse)
  BSR          .L0080249B, R0

.L00802499:
// r_data.c:1032   {
  ADD          RQ18, 64, RQ23
// r_data.c:1034   while(cs<cs1e)
  BSR          .L0080249E, R0

.L0080249C:
// r_data.c:1035   {
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 64, RD12
  BSR          R_DecodeColorCell8, R1
// r_data.c:1037   cs+=4;
  ADD          RQ18, 4, RQ18
// r_data.c:1038   ct+=4;
  ADD          RQ9, 4, RQ9

.L0080249E:
  BRLT.Q       RQ23, RQ18, .L0080249C

.L0080249D:
// r_data.c:1039   }
  ADD          RQ9, 192, RQ9

.L0080249B:
  MOV.Q        (R2, 96), RQ27
  BRLT.Q       RQ27, RQ18, .L00802499

.L0080249A:
// r_data.c:1043   return(src);
  ADD          RQ8, 0, RQ10
  BSR          .L00C016C6, R0

.L00802497:
// r_data.c:1046   if(size == 4096)
  MOV.L        (R2, 92), RD27
  LUI          1, RD13
  BRNE.Q       RD13, RD27, .L0080249F
  BRNE.Q       R0, RQ8, .L008024A0
// r_data.c:1050   src = Z_Malloc (4096, tag, &patchcache[lump]);
  MOV.Q        patchcache, RQ27
  LEA.Q        RQ27, RD22, RQ12
  LUI          1, RD10
  ADD          RD20, 0, RD11
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ8

.L008024A0:
// r_data.c:1051   buf = W_CacheLumpNum(lump, PU_CACHE);
  ADD          RD22, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ21
// r_data.c:1052   memcpy(src, buf, 4096);
  ADD          RQ8, 0, RQ10
  ADD          RQ21, 0, RQ11
  LUI          1, RQ12
  BSR          __memcpy128, R1
// r_data.c:1053   return(src);
  ADD          RQ8, 0, RQ10
  BSR          .L00C016C6, R0

.L0080249F:
// r_data.c:1056   __debugbreak();

W_CacheFlatNum.debugbreak_L0259:
  BRK          601
// r_data.c:1057   src = W_CacheLumpNum(lump, tag);
  ADD          RD22, 0, RD10
  ADD          RD20, 0, RD11
  BSR          W_CacheLumpNum, R1
// r_data.c:1058   return(src);

.L00C016C6:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_AcsRun_ScriptWait:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
  ADDS.L       RD11, 0, RD9
  MOV          .L00C016CE, RQ18
  ADD          R0, 4, RD23
// p_acspec.c:1019   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          printf, R1
// p_acspec.c:1021   run->status=4;
  MOV.B        RD23, (RQ8, 1065)

.L00C016CD:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

HUlib_initTextLine:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ18
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  ADD          RQ13, 0, RQ23
  ADD          RD14, 0, RD22
// hu_lib.c:61   {
  MOV.L        RD9, (RQ18, 0)
// hu_lib.c:63   t->y = y;
  MOV.L        RD8, (RQ18, 4)
// hu_lib.c:64   t->f = f;
  MOV.Q        RQ23, (RQ18, 8)
// hu_lib.c:65   t->sc = sc;
  MOV.L        RD22, (RQ18, 16)
// hu_lib.c:66   HUlib_clearTextLine(t);
  ADD          RQ18, 0, RQ10
  BSR          HUlib_clearTextLine, R1

.L00C016D4:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

I_GetTimeMs:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// i_btesh4.c:209   t = TK_GetTimeMs();
  BSR          TK_GetTimeMs, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RD9
// i_btesh4.c:210   return(t);
  MOV.L        RD9, (R2, 76)
  ADDS.L       RD9, 0, RD10

.L00C016DA:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

sscanf:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -568, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          RQ11, 0, RQ9
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
  ADD          R0, 16, RQ7
  BSR          __va64_saveargs, R1
// pdpc201/stdio.c:2885   
// pdpc201/stdio.c:2886   
  ADD          RQ9, 0, RQ10
  ADD          R2, 96, RQ11
  ADD          RQ0, 0, RQ12
  MOV.Q        (R2, 88), RQ13
  BSR          vvscanf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:2887   
// pdpc201/stdio.c:2888   
  ADD          RD18, 0, RD10

.L00C016E0:
  ADD          R2, 568, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

G_DoLoadLevel:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R27, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          R0, 2, RD21
// g_game.c:463   mousebuttons = &mousearray[1];		// allow [-1]
  MOV          mousearray, RQ20
  ADD          RQ20, 4, RQ27
  MOV.Q        RQ27, mousebuttons
// g_game.c:464   joybuttons = &joyarray[1];		// allow [-1]
  MOV          joyarray, RQ20
  ADD          RQ20, 4, RQ27
  MOV.Q        RQ27, joybuttons
// g_game.c:471   skyflatnum = R_FlatNumForName ( SKYFLATNAME );
  MOV          .L00C016E7, RQ10
  BSR          R_FlatNumForName, R1
  MOV.L        RQ10, skyflatnum
// g_game.c:475   if ( (gamemode == commercial)
  MOV.L        gamemode, RD20
  ADD          R0, 2, R5
  CMPEQ.Q      RD20, R5, RQ9
  ADD          R0, 2, R5
  CMPEQ.Q      RD20, R5, RQ23
  OR           RQ9, RQ23, RQ8
  ADD          R0, 3, R5
  CMPEQ.Q      RD20, R5, RQ9
  OR           RQ8, RQ9, RQ23
  BREQ.L       R0, RQ23, .L0080152A
// g_game.c:478   {
  MOV          .L00C016E8, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
  MOV.L        gamemap, RD20
  BRGE.L       12, RD20, .L0080152B
// g_game.c:481   skytexture = R_TextureNumForName ("SKY1");
  MOV          .L00C016E9, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
  BSR          .L0080152C, R0

.L0080152B:
  MOV.L        gamemap, RD20
  BRGE.L       21, RD20, .L0080152D
// g_game.c:484   skytexture = R_TextureNumForName ("SKY2");
  MOV          .L00C016EA, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture

.L0080152D:

.L0080152C:

.L0080152A:
// g_game.c:487   levelstarttic = gametic;		// for time calculation
  MOV.L        gametic, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, levelstarttic
// g_game.c:489   if (wipegamestate == GS_LEVEL)
  MOV.L        wipegamestate, RD20
  BRNE.L       R0, RD20, .L0080152E
// g_game.c:490   wipegamestate = -1;				// force a wipe
  ADD          R0, -1, RD20
  MOV.L        RD20, wipegamestate

.L0080152E:
// g_game.c:492   gamestate = GS_LEVEL;
  MOV.L        RD0, gamestate
// g_game.c:494   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          RD0, 0, RD18

.L0080152F:
// g_game.c:495   {
  MOV          playeringame, RQ20
  MOV.L        (RQ20, RD18), RQ8
  BREQ.L       R0, RQ8, .L00801532
  MOV          players, RQ20
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        (RQ27, 8), RQ9
  BRNE.Q       1, RQ9, .L00801532

.L00801533:
// g_game.c:497   players[i].playerstate = PST_REBORN;
  MOV          players, RQ20
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        RD21, (RQ27, 8)

.L00801532:
// g_game.c:498   memset (players[i].frags,0,sizeof(players[i].frags));
  MOV          players, RQ20
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 100, RQ20
  MOV.Q        RQ0, (RQ20, 0)
  MOV.Q        RQ0, (RQ20, 8)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L0080152F

.L00801531:
// g_game.c:501   P_SetupLevel (gameepisode, gamemap, 0, gameskill);
  MOV.L        gameepisode, RD10
  MOV.L        gamemap, RD11
  ADD          R0, 0, RD12
  MOV.L        gameskill, RD13
  BSR          P_SetupLevel, R1
// g_game.c:502   displayplayer = consoleplayer;		// view the guy you are playing
  MOV.L        consoleplayer, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, displayplayer
// g_game.c:503   starttime = I_GetTime ();
  BSR          I_GetTime, R1
  MOV.L        RQ10, starttime
// g_game.c:504   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:505   Z_CheckHeap ();
  BSR          Z_CheckHeap, R1
// g_game.c:508   memset (gamekeydown, 0, sizeof(gamekeydown));
  MOV          gamekeydown, RQ20
  ADD          RQ20, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 1024, RQ12
  BSR          memset, R1
// g_game.c:509   joyxmove = joyymove = 0;
  MOV.L        RD0, joyymove
  MOV.L        RD0, joyxmove
// g_game.c:510   mousex = mousey = 0;
  MOV.L        RD0, mousey
  MOV.L        RD0, mousex
// g_game.c:511   sendpause = sendsave = paused = false;
  MOV.L        RD0, paused
  MOV.L        RD0, sendsave
  MOV.L        RD0, sendpause
// g_game.c:513   memset (mousebuttons, 0, 3*sizeof(boolean));
  MOV.Q        mousebuttons, RQ20
  MOV.L        RQ0, (RQ20, 0)
  MOV.L        RQ0, (RQ20, 4)
  MOV.L        RQ0, (RQ20, 8)
// g_game.c:515   memset (joybuttons, 0, 4*sizeof(boolean));
  MOV.Q        joybuttons, RQ20
  MOV.Q        RQ0, (RQ20, 0)
  MOV.Q        RQ0, (RQ20, 8)

.L00C016E6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

STlib_updateNum:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          RD11, 0, RD23
// st_lib.c:161   {
  MOV.Q        (RQ9, 24), RQ18
  BREQ.Q       R0, RQ18, .L00802B66
  MOV.Q        (RQ9, 24), RQ18
  MOV.L        (RQ18, 0), RQ8
  BREQ.L       R0, RQ8, .L00802B66

.L00802B67:
// st_lib.c:163   STlib_drawNum(n, refresh);
  ADD          RQ9, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          STlib_drawNum, R1

.L00802B66:

.L00C016F0:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

FixedDivSoft:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD23
  ADDS.L       RD11, 0, RD8
// m_fixed.c:106   if ( (abs(a)>>14) >= abs(b))
  SHAR.Q       RD23, 63, RQ6
  SUB          R0, RD23, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RD23, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  SHAR         RQ18, 14, RQ9
  SHAR.Q       RD8, 63, RQ6
  SUB          R0, RD8, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RD8, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  BRLT.L       RQ18, RQ9, .L0080174B
// m_fixed.c:107   return ((a^b)<0) ? MININT : MAXINT;
  XOR          RD23, RD8, RQ18
  BRGE.L       R0, RQ18, .L0080174C
  LUI          0xFFFFFFFFFFF80000, RQ9
  BSR          .L0080174D, R0

.L0080174C:
  ADD          R0, 0x7FFFFFFF, RQ9

.L0080174D:
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C016F6, R0

.L0080174B:
// m_fixed.c:110   r=M_SoftDivRcpS(b);
  ADDS.L       RD8, 0, RD10
  BSR          M_SoftDivRcpS, R1
  ADD          RQ10, 0, RD22
// m_fixed.c:114   c = __int32_dmuls(a, r);
  DMULS.L      RD23, RD22, RQ21
// m_fixed.c:118   return (fixed_t)(c>>16);
  SHAR.Q       RQ21, 16, RQ20
  ADDS.L       RQ20, 0, RQ18
  ADD          RQ18, 0, RD10

.L00C016F6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_DoCeiling:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RD11, 0, RD23
// p_ceilng.c:182   secnum = -1;
  ADD          R0, -1, RD20
// p_ceilng.c:183   rtn = 0;
  MOV.L        RD0, (R2, 112)
// p_ceilng.c:186   switch(type)
  BREQ.Q       4, RD23, .L00801A1F
  BREQ.Q       5, RD23, .L00801A20
  BREQ.Q       3, RD23, .L00801A21
  BSR          .L00801A22, R0

.L00801A1F:

.L00801A20:

.L00801A21:
// p_ceilng.c:190   case crushAndRaise:
  MOV.Q        (R2, 120), RQ10
  BSR          P_ActivateInStasisCeiling, R1

.L00801A22:
// p_ceilng.c:192   default:

.L00801A1E:
// p_ceilng.c:196   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801A25, R0

.L00801A23:
// p_ceilng.c:197   {
  MOV.Q        sectors, RQ27
  SHAD.L       RD20, 7, RQ8
  ADD          RQ27, RQ8, RQ8
// p_ceilng.c:199   if (sec->specialdata)
  MOV.Q        (RQ8, 104), RQ21
  BRNE.Q       R0, RQ21, .L00801A25
// p_ceilng.c:203   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 112)
// p_ceilng.c:204   ceiling = Z_Malloc (sizeof(*ceiling), PU_LEVSPEC, 0);
  ADD          R0, 72, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_ceilng.c:205   P_AddThinker (&ceiling->thinker);
  ADD          RQ18, 0, RQ21
  ADD          RQ21, 0, RQ10
  BSR          P_AddThinker, R1
// p_ceilng.c:206   sec->specialdata = ceiling;
  MOV.Q        RQ18, (RQ8, 104)
// p_ceilng.c:207   ceiling->thinker.function.acp1 = (actionf_p1)T_MoveCeiling;
  MOV          T_MoveCeiling, RQ21
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ13
  MOV.Q        RQ21, (RQ13, 0)
// p_ceilng.c:208   ceiling->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_ceilng.c:209   ceiling->crush = false;
  MOV.L        RD0, (RQ18, 52)
// p_ceilng.c:211   switch(type)
  BREQ.Q       4, RD23, .L00801A27
  BREQ.Q       5, RD23, .L00801A28
  BREQ.Q       3, RD23, .L00801A29
  BREQ.Q       2, RD23, .L00801A2A
  BREQ.L       R0, RD23, .L00801A2B
  BREQ.Q       1, RD23, .L00801A2C
  BSR          .L00801A26, R0

.L00801A27:
// p_ceilng.c:213   case fastCrushAndRaise:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 52)
// p_ceilng.c:215   ceiling->topheight = sec->ceilingheight;
  MOV.L        (RQ8, 4), RQ9
  MOV.L        RQ9, (RQ18, 44)
// p_ceilng.c:216   ceiling->bottomheight = sec->floorheight + (8*FRACUNIT);
  MOV.L        (RQ8, 0), RQ9
  ADDS.L       RQ9, 0x00080000, RQ22
  MOV.L        RQ22, (RQ18, 40)
// p_ceilng.c:217   ceiling->direction = -1;
  ADD          R0, -1, RD26
  MOV.L        RD26, (RQ18, 56)
// p_ceilng.c:218   ceiling->speed = CEILSPEED * 2;
  LUI          32, RD13
  MOV.L        RD13, (RQ18, 48)
// p_ceilng.c:219   break;
  BSR          .L00801A26, R0

.L00801A28:

.L00801A29:
// p_ceilng.c:222   case crushAndRaise:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 52)
// p_ceilng.c:224   ceiling->topheight = sec->ceilingheight;
  MOV.L        (RQ8, 4), RQ9
  MOV.L        RQ9, (RQ18, 44)

.L00801A2A:

.L00801A2B:
// p_ceilng.c:226   case lowerToFloor:
  MOV.L        (RQ8, 0), RQ22
  MOV.L        RQ22, (RQ18, 40)
// p_ceilng.c:228   if (type != lowerToFloor)
  BREQ.L       R0, RD23, .L00801A2D
// p_ceilng.c:229   ceiling->bottomheight += 8*FRACUNIT;
  MOV.L        (RQ18, 40), RQ9
  ADDS.L       RQ9, 0x00080000, RQ22
  MOV.L        RQ22, (RQ18, 40)

.L00801A2D:
// p_ceilng.c:230   ceiling->direction = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 56)
// p_ceilng.c:231   ceiling->speed = CEILSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 48)
// p_ceilng.c:232   break;
  BSR          .L00801A26, R0

.L00801A2C:
// p_ceilng.c:234   case raiseToHighest:
  ADD          RQ8, 0, RQ10
  BSR          P_FindHighestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 44)
// p_ceilng.c:236   ceiling->direction = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// p_ceilng.c:237   ceiling->speed = CEILSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 48)
// p_ceilng.c:238   break;

.L00801A26:
// p_ceilng.c:241   ceiling->tag = sec->tag;
  MOV.W        (RQ8, 16), RQ22
  MOV.L        RQ22, (RQ18, 60)
// p_ceilng.c:242   ceiling->type = type;
  MOV.L        RD23, (RQ18, 24)
// p_ceilng.c:243   P_AddActiveCeiling(ceiling);
  ADD          RQ18, 0, RQ10
  BSR          P_AddActiveCeiling, R1

.L00801A25:
  MOV.Q        (R2, 120), RQ10
  ADD          RD20, 0, RD11
  BSR          P_FindSectorFromLineTag, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RD20
  BRGE.L       R0, RQ9, .L00801A23

.L00801A24:
// p_ceilng.c:244   }
  MOV.L        (R2, 112), RD10

.L00C016FC:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

atoi:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// pdpc201/stdlib.c:846   
  ADD          RQ8, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 10, RD12
  BSR          strtol, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C01702:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

R_PointToAngle:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 92)
  ADD          RD11, 0, RD23
// r_main.c:299   {	
  MOV.L        viewx, RD22
  MOV.L        (R2, 92), RD21
  SUBS.L       RD21, RD22, RD21
// r_main.c:301   y -= viewy;
  MOV.L        viewy, RD22
  SUBS.L       RD23, RD22, RD23
// r_main.c:303   if ( (!x) && (!y) )
  CMPEQ.Q      RD21, R0, RQ9
  MOV.L        RD21, (R2, 92)
  CMPEQ.Q      RD23, R0, RQ18
  BTSTN.L      RQ18, RQ9, .L00C00601
// r_main.c:306   if (x>= 0)
  MOV.L        (R2, 92), RD22
  BRLT.L       R0, RD22, .L00802652
  BRLT.L       R0, RD23, .L00802653
  MOV.L        (R2, 92), RD22
  BRLE.L       RD23, RD22, .L00802654
// r_main.c:316   return tantoangle[ SlopeDiv(y,x)];
  ADDU.L       RD23, R0, RQ18
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ8
  ADD          RQ18, 0, RD10
  ADDU.L       RQ8, R0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ9
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0
  BSR          .L00802655, R0

.L00802654:
// r_main.c:321   return ANG90-1-tantoangle[ SlopeDiv(x,y)];
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ9
  ADDU.L       RD23, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  ADD          R0, 0x3FFFFFFF, R5
  SUBU.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0

.L00802655:
  BSR          .L00802656, R0

.L00802653:
// r_main.c:327   y = -y;
  SUBS.L       R0, RD23, RD23
  MOV.L        (R2, 92), RD22
  BRLE.L       RD23, RD22, .L00802657
// r_main.c:332   return -tantoangle[SlopeDiv(y,x)];
  ADDU.L       RD23, R0, RQ9
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  SUBU.L       R0, RQ9, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0
  BSR          .L00802658, R0

.L00802657:
// r_main.c:337   return ANG270+tantoangle[ SlopeDiv(x,y)];
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ9
  ADDU.L       RD23, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  ADD          R0, 0x00000000C0000000, RD21
  ADDU.L       RQ9, RD21, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0

.L00802658:

.L00802656:
  BSR          .L00802659, R0

.L00802652:
// r_main.c:344   x = -x;
  MOV.L        (R2, 92), RD22
  SUBS.L       R0, RD22, RD22
  MOV.L        RD22, (R2, 92)
  BRLT.L       R0, RD23, .L0080265A
  MOV.L        (R2, 92), RD22
  BRLE.L       RD23, RD22, .L0080265B
// r_main.c:352   return ANG180-1-tantoangle[ SlopeDiv(y,x)];
  ADDU.L       RD23, R0, RQ9
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  ADD          R0, 0x7FFFFFFF, R5
  SUBU.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0
  BSR          .L0080265C, R0

.L0080265B:
// r_main.c:357   return ANG90+ tantoangle[ SlopeDiv(x,y)];
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ9
  ADDU.L       RD23, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  LUI          0x00040000, R5
  ADDU.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0

.L0080265C:
  BSR          .L0080265D, R0

.L0080265A:
// r_main.c:363   y = -y;
  SUBS.L       R0, RD23, RD23
  MOV.L        (R2, 92), RD22
  BRLE.L       RD23, RD22, .L0080265E
// r_main.c:368   return ANG180+tantoangle[ SlopeDiv(y,x)];
  ADDU.L       RD23, R0, RQ9
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  ADD          R0, 0x0000000080000000, RD21
  ADDU.L       RQ9, RD21, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0
  BSR          .L0080265F, R0

.L0080265E:
// r_main.c:373   return ANG270-1-tantoangle[ SlopeDiv(x,y)];
  MOV.L        (R2, 92), RD22
  ADDU.L       RD22, R0, RQ9
  ADDU.L       RD23, R0, RQ18
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          SlopeDiv, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          tantoangle, RQ21
  MOVU.L       (RQ21, RQ8), RQ9
  ADD          R0, 0x00000000BFFFFFFF, RD21
  SUBU.L       RD21, RQ9, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01708, R0

.L0080265F:

.L0080265D:

.L00802659:
// r_main.c:376   }
  ADD          R0, 0, RD10
  BSR          .L00C01708, R0

.L00C00601:
  ADD          R0, 0, RQ10

.L00C01708:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_GetTimeMs:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -320, R2
// pdpc201/btshx_supa.c:1015   
  BSR          TK_GetTimeUs, R1
  ADD          RQ10, 0, RQ18
// pdpc201/btshx_supa.c:1016   
  MOV.Q        TK_GetTimeMs/usecbase!2589, RQ22
  BRNE.Q       R0, RQ22, .L00800FD0
// pdpc201/btshx_supa.c:1017   
  ADD          RQ18, 0, RQ22
  MOV.Q        RQ22, TK_GetTimeMs/usecbase!2589

.L00800FD0:
// pdpc201/btshx_supa.c:1018   
  MOV.Q        TK_GetTimeMs/usecbase!2589, RQ22
  SUB          RQ18, RQ22, RQ18
// pdpc201/btshx_supa.c:1019   
  SHAD.Q       RQ18, 4, RQ6
  SHAD.Q       RQ18, 5, RQ7
  SHAD.Q       RQ18, 11, RQ10
  ADD          RQ18, RQ6, RQ6
  ADD          RQ7, RQ10, RQ10
  ADD          RQ6, RQ10, RQ9
  SHLR.Q       RQ9, 11, RQ18
// pdpc201/btshx_supa.c:1020   
  SHLR.Q       RQ18, 10, RQ9
  ADDS.L       RQ9, 0, RD8
// pdpc201/btshx_supa.c:1021   
  ADDU.L       RD8, R0, RQ23
  ADD          RQ23, 0, RD10

.L00C0170E:
  ADD          R2, 320, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

S_AdjustSoundParams:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ21
  MOV.Q        RQ11, (R2, 128)
  MOV.Q        RQ12, (R2, 120)
  MOV.Q        RQ13, (R2, 112)
  MOV.Q        RQ14, (R2, 104)
// s_sound.c:785   adx = abs(listener->x - source->x);
  MOV.L        (RQ21, 24), RQ9
  MOV.Q        (R2, 128), RQ27
  MOV.L        (RQ27, 24), RQ18
  SUBS.L       RQ9, RQ18, RQ8
  SHAR.Q       RQ8, 63, RQ6
  SUB          R0, RQ8, RD26
  SHAR.Q       RD26, 63, RQ7
  AND          RD26, RQ6, RQ6
  AND          RQ8, RQ7, RQ7
  OR           RQ6, RQ7, RD26
  MOV.L        RD26, (R2, 100)
// s_sound.c:786   ady = abs(listener->y - source->y);
  MOV.L        (RQ21, 28), RQ9
  MOV.L        (RQ27, 28), RQ18
  SUBS.L       RQ9, RQ18, RQ8
  SHAR.Q       RQ8, 63, RQ6
  SUB          R0, RQ8, RD25
  SHAR.Q       RD25, 63, RQ7
  AND          RD25, RQ6, RQ6
  AND          RQ8, RQ7, RQ7
  OR           RQ6, RQ7, RD25
  MOV.L        RD25, (R2, 96)
// s_sound.c:789   approx_dist = adx + ady - ((adx < ady ? adx : ady)>>1);
  ADDS.L       RD26, RD25, RQ9
  BRGE.L       RD25, RD26, .L00802D7A
  MOV.L        (R2, 100), RD18
  BSR          .L00802D7B, R0

.L00802D7A:
  MOV.L        (R2, 96), RD18

.L00802D7B:
  SHAR         RQ18, 1, RQ8
  SUBS.L       RQ9, RQ8, RD20
// s_sound.c:791   if (gamemap != 8
  MOV.L        gamemap, RD27
  ADD          R0, 8, R5
  CMPNE.Q      RD27, R5, RQ9
  LUI          19200, RD27
  CMPGT.Q      RD20, RD27, RQ18
  BTSTN.L      RQ18, RQ9, .L00C00606
// s_sound.c:798   angle = R_PointToAngle2(listener->x,
  MOV.Q        (R2, 128), RQ27
  MOV.L        (RQ27, 28), RQ8
  MOV.L        (RQ27, 24), RQ9
  MOV.L        (RQ21, 28), RQ18
  MOV.L        (RQ21, 24), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ9, 0, RD12
  ADDS.L       RQ8, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD22
// s_sound.c:803   if (angle > listener->angle)
  MOVU.L       (RQ21, 56), RQ9
  BRLEU.L      RQ9, RD22, .L00802D7C
// s_sound.c:804   angle = angle - listener->angle;
  MOVU.L       (RQ21, 56), RQ18
  SUBU.L       RD22, RQ18, RD22
  BSR          .L00802D7D, R0

.L00802D7C:
// s_sound.c:806   angle = angle + (0xffffffff - listener->angle);
  MOVU.L       (RQ21, 56), RQ8
  ADD          R0, 0x00000000FFFFFFFF, RD27
  SUBU.L       RD27, RQ8, RQ23
  ADDU.L       RD22, RQ23, RD22

.L00802D7D:
// s_sound.c:808   angle >>= ANGLETOFINESHIFT;
  SHLR         RD22, 19, RD22
// s_sound.c:811   *sep = 128 - (FixedMul(S_STEREO_SWING,finesine[angle])>>FRACBITS);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD22), RQ9
  LUI          1536, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ8
  ADD          R0, 128, R5
  SUBS.L       R5, RQ8, RQ23
  MOV.Q        (R2, 112), RQ27
  MOV.L        RQ23, (RQ27, 0)
// s_sound.c:814   if (approx_dist < S_CLOSE_DIST)
  LUI          2560, RD26
  BRGE.L       RD26, RD20, .L00802D7E
// s_sound.c:815   {
  MOV.Q        (R2, 120), RQ27
  MOV.L        snd_SfxVolume, RD26
  MOV.L        RD26, (RQ27, 0)
  BSR          .L00802D7F, R0

.L00802D7E:
  MOV.L        gamemap, RD27
  BRNE.Q       8, RD27, .L00802D80
  LUI          19200, RD27
  BRLE.L       RD27, RD20, .L00802D81
// s_sound.c:821   approx_dist = S_CLIPPING_DIST;
  LUI          19200, RD20

.L00802D81:
// s_sound.c:823   *vol = 15+ ((snd_SfxVolume-15)
  MOV.L        snd_SfxVolume, RD27
  ADDS.L       RD27, -15, RQ9
  LUI          19200, R5
  SUBS.L       R5, RD20, RQ18
  SHAR         RQ18, 16, RQ8
  MULS.L       RQ9, RQ8, RQ23
  ADD          RQ23, 0, RQ9
  ADD          R0, 1040, RD27
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 15, RQ18
  MOV.Q        (R2, 120), RQ26
  MOV.L        RQ18, (RQ26, 0)
  BSR          .L00802D82, R0

.L00802D80:
// s_sound.c:830   *vol = (snd_SfxVolume
  LUI          19200, R5
  SUBS.L       R5, RD20, RQ8
  SHAR         RQ8, 16, RQ23
  MOV.L        snd_SfxVolume, RD27
  MULS.L       RD27, RQ23, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 1040, RD27
  DIVS.L       RQ18, RD27, RQ18
  MOV.Q        (R2, 120), RQ26
  MOV.L        RQ18, (RQ26, 0)

.L00802D82:

.L00802D7F:
// s_sound.c:835   return (*vol > 0);
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 0), RQ8
  CMPGT.Q      RQ8, R0, RQ23
  ADD          RQ23, 0, RD10
  BSR          .L00C01714, R0

.L00C00606:
  ADD          R0, 0, RQ10

.L00C01714:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

PIT_VileCheck:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:1167   if (!(thing->flags & MF_CORPSE) )
  MOV.L        (RQ8, 160), RQ18
  LUI          256, RD20
  BTSTN.L      RD20, RQ18, .L00801B68
// p_enemy.c:1168   return true;	// not a monster
  ADD          R0, 1, RD10
  BSR          .L00C0171A, R0

.L00801B68:
// p_enemy.c:1170   if (thing->tics != -1)
  MOV.L        (RQ8, 144), RQ18
  BREQ.Q       -1, RQ18, .L00801B69
// p_enemy.c:1171   return true;	// not lying still yet
  ADD          R0, 1, RD10
  BSR          .L00C0171A, R0

.L00801B69:
// p_enemy.c:1173   if (thing->info->raisestate == S_NULL)
  MOV.Q        (RQ8, 136), RQ23
  MOV.L        (RQ23, 88), RQ18
  BRNE.L       R0, RQ18, .L00801B6A
// p_enemy.c:1174   return true;	// monster doesn't have a raise state
  ADD          R0, 1, RD10
  BSR          .L00C0171A, R0

.L00801B6A:
// p_enemy.c:1176   maxdist = thing->info->radius + mobjinfo[MT_VILE].radius;
  MOV.Q        (RQ8, 136), RQ23
  MOV.L        (RQ23, 64), RQ18
  MOV          mobjinfo, RQ20
  ADD          RQ20, 276, RQ27
  MOV.L        (RQ27, 64), RQ9
  ADDS.L       RQ18, RQ9, RD22
// p_enemy.c:1178   if (	abs(thing->x - viletryx) > maxdist
  MOV.L        (RQ8, 24), RQ18
  MOV.L        viletryx, RD20
  SUBS.L       RQ18, RD20, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  BRGT.L       RD22, RQ18, .L00801B6C
  MOV.L        (RQ8, 28), RQ9
  MOV.L        viletryy, RD20
  SUBS.L       RQ9, RD20, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RQ9
  SHAR.Q       RQ9, 63, RQ7
  AND          RQ9, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RQ9
  BRGT.L       RD22, RQ9, .L00801B6C
  BSR          .L00801B6B, R0

.L00801B6C:
// p_enemy.c:1180   return true;		// not actually touching
  ADD          R0, 1, RD10
  BSR          .L00C0171A, R0

.L00801B6B:
// p_enemy.c:1182   corpsehit = thing;
  ADD          RQ8, 0, RQ20
// p_enemy.c:1183   corpsehit->momx = corpsehit->momy = 0;
  MOV.L        RD0, (RQ20, 116)
  MOV.L        RD0, (RQ20, 112)
// p_enemy.c:1184   corpsehit->height <<= 2;
  MOV.L        (RQ20, 108), RQ18
  SHAD.L       RQ18, 2, RQ9
  MOV.L        RQ9, (RQ20, 108)
// p_enemy.c:1185   check = P_CheckPosition (corpsehit, corpsehit->x, corpsehit->y);
  MOV.L        (RQ20, 28), RQ18
  MOV.L        (RQ20, 24), RQ9
  MOV.Q        RQ20, corpsehit
  MOV.Q        corpsehit, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          P_CheckPosition, R1
  ADD          RQ10, 0, RD21
// p_enemy.c:1186   corpsehit->height >>= 2;
  MOV.Q        corpsehit, RQ20
  MOV.L        (RQ20, 108), RQ18
  SHAR         RQ18, 2, RQ9
  MOV.L        RQ9, (RQ20, 108)
// p_enemy.c:1188   if (!check)
  BRNE.L       R0, RD21, .L00801B6E
// p_enemy.c:1189   return true;		// doesn't fit here
  ADD          R0, 1, RD10
  BSR          .L00C0171A, R0

.L00801B6E:
// p_enemy.c:1191   return false;		// got one, so stop checking
  ADD          R0, 0, RD10

.L00C0171A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_LookForPlayers:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 148)
// p_enemy.c:519   if(1)
  MOV.L        (RQ8, 160), RQ9
  LUI          0x00010000, RD27
  BTSTN.L      RD27, RQ9, .L00C0060B
// p_enemy.c:525   sector = actor->subsector->sector;
  MOV.Q        (RQ8, 88), RQ23
  MOV.Q        (RQ23, 0), RQ27
  MOV.Q        RQ27, (R2, 128)
// p_enemy.c:527   c = 0; n=4;
  MOV.L        RD0, (R2, 144)
  ADD          R0, 4, RD26
  MOV.L        RD26, (R2, 140)
// p_enemy.c:528   stop = (actor->lastlook-1)&3;
  MOV.L        (RQ8, 200), RQ9
  ADDS.L       RQ9, -1, RQ18
  AND          RQ18, 3, RD25
  MOV.L        RD25, (R2, 136)
// p_enemy.c:530   for ( ; ; actor->lastlook = (actor->lastlook+1)&3 )

.L00801B08:
// p_enemy.c:531   {
  MOV.L        (RQ8, 200), RQ9
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RQ9), RQ18
  BRNE.L       R0, RQ18, .L00801B0B
  MOV.L        (R2, 140), RD27
  ADD          RD27, 0, RQ9
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 140)
  BREQ.L       R0, RQ9, .L00801B0A
// p_enemy.c:535   continue;
  BSR          .L00801B09, R0

.L00801B0B:
// p_enemy.c:538   if (c++ == 2
  MOV.L        (R2, 144), RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 144)
  BREQ.Q       2, RQ18, .L00C0060B
  MOV.L        (RQ8, 200), RQ9
  MOV.L        (R2, 136), RD27
  BREQ.Q       RD27, RQ9, .L00C0060B

.L00801B0C:
// p_enemy.c:545   player = &players[actor->lastlook];
  MOV.L        (RQ8, 200), RQ18
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RQ18, R5, RQ20
  ADD          RQ27, RQ20, RQ20
// p_enemy.c:547   if (player->health <= 0)
  MOV.L        (RQ20, 36), RQ9
  BRLE.L       R0, RQ9, .L00801B09
// p_enemy.c:550   if (!P_CheckSight (actor, player->mo))
  MOV.Q        (RQ20, 0), RQ23
  ADD          RQ8, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B09
// p_enemy.c:553   if (!allaround)
  MOV.L        (R2, 148), RD27
  BRNE.L       R0, RD27, .L00801B0E
// p_enemy.c:554   {
  MOV.Q        (RQ20, 0), RQ23
  MOV.L        (RQ23, 28), RQ18
  MOV.L        (RQ23, 24), RQ9
  MOV.L        (RQ8, 28), RQ22
  MOV.L        (RQ8, 24), RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ22, 0, RD11
  ADDS.L       RQ9, 0, RD12
  ADD          RQ18, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RQ27
  MOVU.L       (RQ8, 56), RQ9
  SUBU.L       RQ27, RQ9, RD26
  LUI          0x00040000, RQ22
  CMPGT.Q      RD26, RQ22, RQ18
  ADD          R0, 0x00000000C0000000, RD25
  CMPGT.Q      RD25, RD26, RQ21
  MOV.L        RD26, (R2, 124)
  BTST.L       RQ21, RQ18, .L00801B0F
// p_enemy.c:563   {
  MOV.Q        (RQ20, 0), RQ23
  MOV.L        (RQ23, 28), RQ18
  MOV.L        (RQ8, 28), RQ22
  SUBS.L       RQ18, RQ22, RQ21
  MOV.L        (RQ23, 24), RQ27
  MOV.L        (RQ8, 24), RQ9
  SUBS.L       RQ27, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD26
  MOV.L        RD26, (R2, 120)
  LUI          1024, RD25
  BRGT.L       RD25, RD26, .L00801B09

.L00801B0F:

.L00801B0E:
// p_enemy.c:573   actor->target = player->mo;
  MOV.Q        (RQ20, 0), RQ23
  MOV.Q        RQ23, (RQ8, 176)
// p_enemy.c:574   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01720, R0

.L00801B09:
  MOV.L        (RQ8, 200), RQ18
  ADDS.L       RQ18, 1, RQ22
  AND          RQ22, 3, RQ21
  MOV.L        RQ21, (RQ8, 200)
  BSR          .L00801B08, R0

.L00801B0A:
// p_enemy.c:577   return false;
  ADD          R0, 0, RD10
  BSR          .L00C01720, R0

.L00C0060B:
  ADD          R0, 0, RQ10

.L00C01720:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

M_LoadSelect:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -664, R2
  ADDS.L       RD10, 0, RD9
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// m_menu.c:592   {
// m_menu.c:595   if (M_CheckParm("-cdrom"))
  MOV          .L00C01727, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801638
// m_menu.c:596   sprintf(name,"c:\\doomdata\\"SAVEGAMENAME"%d.dsg",choice);
  ADD          R2, 96, RQ10
  MOV          .L00C01728, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
  BSR          .L00801639, R0

.L00801638:
// m_menu.c:598   sprintf(name,SAVEGAMENAME"%d.dsg",choice);
  ADD          R2, 96, RQ10
  MOV          .L00C01729, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1

.L00801639:
// m_menu.c:599   G_LoadGame (name);
  ADD          R2, 96, RQ10
  BSR          G_LoadGame, R1
// m_menu.c:600   M_ClearMenus ();
  BSR          M_ClearMenus, R1

.L00C01726:
  ADD          R2, 664, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

D_DoAdvanceDemo:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
// d_main.c:569   players[consoleplayer].playerstate = PST_LIVE;  // not reborn
  MOV          players, RQ23
  MOV.L        consoleplayer, RD22
  ADD          R0, 320, R5
  MUL.L        RD22, R5, RQ21
  ADD          RQ23, RQ21, RQ21
  MOV.L        RD0, (RQ21, 8)
// d_main.c:570   advancedemo = false;
  MOV.L        RD0, advancedemo
// d_main.c:571   usergame = false;			   // no save / end game here
  MOV.L        RD0, usergame
// d_main.c:572   paused = false;
  MOV.L        RD0, paused
// d_main.c:573   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// d_main.c:578   demosequence = (demosequence+1)%6;
  MOV.L        demosequence, RD23
  ADDS.L       RD23, 1, RQ18
  ADD          RQ18, 0, RD23
  MOV.L        RD23, demosequence
  ADD          R0, 6, RD23
  MOV.L        demosequence, RD22
  MODS.L       RD22, RD23, RD22
  MOV.L        RD22, demosequence
// d_main.c:580   printf("D_DoAdvanceDemo: A seq=%d\n", demosequence);
  MOV          .L00C01730, RQ10
  MOV.L        demosequence, RD11
  BSR          printf, R1
// d_main.c:582   demosequence = __int_clamp(demosequence, 0, 5);
  MOV.L        demosequence, RD22
  ADD          R0, 5, RD23
  SUB          RD22, RD0, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD0, RQ6, RQ6
  AND          RD22, RQ7, RQ7
  OR           RQ6, RQ7, RD22
  SUB          RD22, RD23, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD22, RQ6, RQ6
  AND          RD23, RQ7, RQ7
  OR           RQ6, RQ7, RD22
  MOV.L        RD22, demosequence
// d_main.c:586   printf("D_DoAdvanceDemo: B seq=%d\n", demosequence);
  MOV          .L00C01731, RQ10
  MOV.L        demosequence, RD11
  BSR          printf, R1
// d_main.c:588   switch (demosequence)
  MOV.L        demosequence, RD22
  BREQ.L       R0, RD22, .L008013A1
  MOV.L        demosequence, RD23
  BREQ.Q       1, RD23, .L008013A2
  MOV.L        demosequence, RD23
  BREQ.Q       2, RD23, .L008013A3
  MOV.L        demosequence, RD23
  BREQ.Q       3, RD23, .L008013A4
  MOV.L        demosequence, RD23
  BREQ.Q       4, RD23, .L008013A5
  MOV.L        demosequence, RD23
  BREQ.Q       5, RD23, .L008013A6
  MOV.L        demosequence, RD23
  BREQ.Q       6, RD23, .L008013A7
  BSR          .L008013A0, R0

.L008013A1:
// d_main.c:590   case 0:
  MOV.L        gamemode, RD23
  BRNE.Q       2, RD23, .L008013A8
// d_main.c:592   pagetic = 35 * 11;
  ADD          R0, 385, RD23
  MOV.L        RD23, pagetic
  BSR          .L008013A9, R0

.L008013A8:
// d_main.c:594   pagetic = 170;
  ADD          R0, 170, RD23
  MOV.L        RD23, pagetic

.L008013A9:
// d_main.c:595   gamestate = GS_DEMOSCREEN;
  ADD          R0, 3, RD23
  MOV.L        RD23, gamestate
// d_main.c:596   pagename = "TITLEPIC";
  MOV          .L00C01732, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename
// d_main.c:598   if(gamemode == hexen)
  MOV.L        gamemode, RD22
  BRNE.Q       5, RD22, .L008013AA
// d_main.c:599   pagename = "TITLE";
  MOV          .L00C01733, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename

.L008013AA:
// d_main.c:601   if ( W_CheckNumForName(pagename) == -1 )
  MOV.Q        pagename, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ18
  BRNE.Q       -1, RQ18, .L008013AB
  MOV.L        gamemode, RD23
  ADD          R0, 4, R5
  CMPEQ.Q      RD23, R5, RQ18
  ADD          R0, 5, R5
  CMPEQ.Q      RD23, R5, RQ9
  OR           RQ18, RQ9, RQ8
  BREQ.L       R0, RQ8, .L008013AC
// d_main.c:604   pagename = "TITLE";
  MOV          .L00C01733, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename

.L008013AC:

.L008013AB:
// d_main.c:607   if ( gamemode == commercial )
  MOV.L        gamemode, RD23
  BRNE.Q       2, RD23, .L008013AD
// d_main.c:608   S_StartMusic(mus_dm2ttl);
  ADD          R0, 66, RD10
  BSR          S_StartMusic, R1
  BSR          .L008013AE, R0

.L008013AD:
// d_main.c:610   S_StartMusic (mus_intro);
  ADD          R0, 29, RD10
  BSR          S_StartMusic, R1

.L008013AE:
// d_main.c:611   break;
  BSR          .L008013A0, R0

.L008013A2:
// d_main.c:612   case 1:
  MOV          .L00C01734, RQ10
  BSR          G_DeferedPlayDemo, R1
// d_main.c:614   break;
  BSR          .L008013A0, R0

.L008013A3:
// d_main.c:615   case 2:
  ADD          R0, 200, RD23
  MOV.L        RD23, pagetic
// d_main.c:617   gamestate = GS_DEMOSCREEN;
  ADD          R0, 3, RD23
  MOV.L        RD23, gamestate
// d_main.c:618   pagename = "CREDIT";
  MOV          .L00C01735, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename
// d_main.c:619   break;
  BSR          .L008013A0, R0

.L008013A4:
// d_main.c:620   case 3:
  MOV          .L00C01736, RQ10
  BSR          G_DeferedPlayDemo, R1
// d_main.c:622   break;
  BSR          .L008013A0, R0

.L008013A5:
// d_main.c:623   case 4:
  ADD          R0, 3, RD23
  MOV.L        RD23, gamestate
// d_main.c:625   if ( gamemode == commercial)
  MOV.L        gamemode, RD23
  BRNE.Q       2, RD23, .L008013AF
// d_main.c:626   {
  ADD          R0, 385, RD23
  MOV.L        RD23, pagetic
// d_main.c:628   pagename = "TITLEPIC";
  MOV          .L00C01732, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename
// d_main.c:629   S_StartMusic(mus_dm2ttl);
  ADD          R0, 66, RD10
  BSR          S_StartMusic, R1
  BSR          .L008013B0, R0

.L008013AF:
// d_main.c:632   {
  ADD          R0, 200, RD23
  MOV.L        RD23, pagetic
  MOV.L        gamemode, RD23
  BRNE.Q       3, RD23, .L008013B1
// d_main.c:636   pagename = "CREDIT";
  MOV          .L00C01735, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename
  BSR          .L008013B2, R0

.L008013B1:
// d_main.c:638   pagename = "HELP2";
  MOV          .L00C01737, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, pagename

.L008013B2:

.L008013B0:
// d_main.c:639   }
  BSR          .L008013A0, R0

.L008013A6:
// d_main.c:641   case 5:
  MOV          .L00C01738, RQ10
  BSR          G_DeferedPlayDemo, R1
// d_main.c:643   break;
  BSR          .L008013A0, R0

.L008013A7:
// d_main.c:645   case 6:
  MOV          .L00C01739, RQ10
  BSR          G_DeferedPlayDemo, R1
// d_main.c:647   break;

.L008013A0:

.L00C0172F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

free:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdlib.c:221   
  ADD          RQ18, 0, RQ10
  MOV.Q        _free_fptr, RQ9
  JSR          RQ9, 0, R1

.L00C0173F:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

M_DrawSaveLoadBorder:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD18
  ADD          RD11, 0, RD23
  ADD          R0, 7, RD20
// m_menu.c:573   V_DrawPatchDirectName (x-8,y+7,0,"M_LSLEFT");
  ADDS.L       RD23, 7, RQ8
  ADDS.L       RD18, -8, RQ22
  ADD          RQ22, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01746, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:575   for (i = 0;i < 24;i++)
  ADD          RD0, 0, RD9

.L00801635:
// m_menu.c:578   V_DrawPatchDirectName (x,y+7,0,"M_LSCNTR");
  ADDS.L       RD23, 7, RQ8
  ADD          RD18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01747, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:579   x += 8;
  ADDS.L       RD18, 8, RD18
  ADDS.L       RD9, 1, RD9
  BRLT.L       24, RD9, .L00801635

.L00801637:
// m_menu.c:583   V_DrawPatchDirectName (x,y+7,0, "M_LSRGHT");
  ADDS.L       RD23, 7, RQ22
  ADD          RD18, 0, RD10
  ADD          RQ22, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01748, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C01745:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsAdjustSectorFloorForTag:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD21
  MOV.L        RD11, (R2, 104)
// p_acspec.c:48   if(tag<=0)
  BRLE.L       R0, RD21, .L00C0174E
// p_acspec.c:51   idx=0;
  MOV.L        RD0, (R2, 100)
// p_acspec.c:52   while(1)

.L0080188F:
// p_acspec.c:53   {
  ADD          R2, 100, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsNextSectorForTag, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:55   if(!sect)
  BREQ.Q       R0, RQ18, .L00801890
// p_acspec.c:57   sect->floorheight+=adj*FRACUNIT;
  MOV.L        (RQ18, 0), RQ8
  MOV.L        (R2, 104), RD13
  SHAD.L       RD13, 16, RQ23
  ADDS.L       RQ8, RQ23, RQ22
  MOV.L        RQ22, (RQ18, 0)
  BSR          .L0080188F, R0

.L00801890:

.L00C0174E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_AddActivePlat:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 72)
// p_plats.c:293   for (i = 0;i < MAXPLATS;i++)
  ADD          RD0, 0, RD18

.L00801E57:
// p_plats.c:294   if (activeplats[i] == NULL)
  MOV          activeplats, RQ13
  MOV.Q        (RQ13, RD18), RQ9
  BRNE.Q       RQ0, RQ9, .L00801E5A
// p_plats.c:295   {
  MOV          activeplats, RQ13
  MOV.Q        (R2, 72), RQ12
  MOV.Q        RQ12, (RQ13, RD18)
// p_plats.c:297   return;
  BSR          .L00C01754, R0

.L00801E5A:
  ADDS.L       RD18, 1, RD18
  BRLT.L       30, RD18, .L00801E57

.L00801E59:
// p_plats.c:298   }
  MOV          .L00C01755, RQ10
  BSR          I_Error, R1

.L00C01754:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AddActiveCeiling:
// p_ceilng.c:256   for (i = 0; i < MAXCEILINGS;i++)
  ADDS.L       RD0, 0, RD13

.L00801A2E:
// p_ceilng.c:257   {
  MOV          activeceilings, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  BRNE.Q       RQ0, RQ11, .L00801A31
// p_ceilng.c:259   {
  MOV          activeceilings, RQ12
  MOV.Q        RQ10, (RQ12, RD13)
// p_ceilng.c:261   return;
  JSR          R1, 0, R0

.L00801A31:
  ADDS.L       RD13, 1, RD13
  BRLT.L       30, RD13, .L00801A2E

.L00801A30:

.L00C01756:
  JSR          R1, 0, R0
  .balign 4

ST_calcPainOffset:
// st_stuff.c:767   health = plyr->health > 100 ? 100 : plyr->health;
  MOV.Q        TU7A00CB73/plyr, RQ13
  MOV.L        (RQ13, 36), RQ12
  BRLE.L       100, RQ12, .L00802BC8
  ADD          R0, 100, RQ13
  BSR          .L00802BC9, R0

.L00802BC8:
  MOV.Q        TU7A00CB73/plyr, RQ11
  MOV.L        (RQ11, 36), RQ12
  ADDS.L       RQ12, 0, RQ13

.L00802BC9:
  ADDS.L       RQ13, 0, RD11
// st_stuff.c:769   if (health != oldhealth)
  MOV.L        ST_calcPainOffset/oldhealth!27, RD10
  BREQ.Q       RD10, RD11, .L00802BCA
// st_stuff.c:770   {
  ADD          R0, 100, R5
  SUBS.L       R5, RD11, RQ13
  ADD          R0, 5, R5
  MULS.L       RQ13, R5, RQ12
  ADDS.L       RQ12, 0, RQ13
  ADD          R0, 101, RD10
  DIVS.L       RQ13, RD10, RQ13
  SHAD.L       RQ13, 3, RD17
// st_stuff.c:772   oldhealth = health;
  ADD          RD11, 0, RD16
  MOV.L        RD17, ST_calcPainOffset/lastcalc!27
  MOV.L        RD16, ST_calcPainOffset/oldhealth!27

.L00802BCA:
// st_stuff.c:773   }
  MOV.L        ST_calcPainOffset/lastcalc!27, RD10

.L00C01757:
  JSR          R1, 0, R0

STlib_updateMultIcon:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -416, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 180)
// st_lib.c:228   if(!mi->on || !mi->inum)
  MOV.Q        (RQ9, 24), RQ8
  BREQ.Q       R0, RQ8, .L00C0175D
  MOV.Q        (RQ9, 16), RQ8
  BREQ.Q       R0, RQ8, .L00C0175D

.L00802B6C:
// st_lib.c:232   eo = st_diddraweven;
  MOVU.B       st_diddraweven, RD13
  AND          RD13, 255, RD12
  MOV.L        RD12, (R2, 168)
// st_lib.c:234   if (*mi->on
  MOV.Q        (RQ9, 24), RQ8
  MOV.L        (RQ8, 0), RQ18
  BREQ.L       R0, RQ18, .L00802B6E
  MOV.L        (RQ9, 8), RQ18
  MOV.Q        (RQ9, 16), RQ8
  MOV.L        (RQ8, 0), RQ23
  BRNE.Q       RQ23, RQ18, .L00802B70
  MOV.L        (R2, 180), RD13
  BRNE.L       R0, RD13, .L00802B70

.L00802B72:
  MOV.L        (R2, 168), RD13
  BRNE.L       R0, RD13, .L00802B70
  BSR          .L00802B6E, R0

.L00802B70:
  MOV.Q        (RQ9, 16), RQ8
  MOV.L        (RQ8, 0), RQ18
  BREQ.Q       -1, RQ18, .L00802B6E

.L00802B6F:
  MOV.L        (RQ9, 8), RQ23
  BREQ.Q       -1, RQ23, .L00802B74
  MOV.Q        (RQ9, 32), RQ8
  MOV.L        (RQ9, 8), RQ18
  MOV.Q        (RQ8, RQ18), RQ22
  BREQ.Q       R0, RQ22, .L00C0175D
// st_lib.c:244   x = mi->x - SHORT(mi->p[mi->oldinum]->leftoffset);
  MOV.L        (RQ9, 0), RQ18
  MOV.Q        (RQ9, 32), RQ22
  MOV.L        (RQ9, 8), RQ23
  MOV.Q        (RQ22, RQ23), RQ8
  MOV.W        (RQ8, 4), RQ23
  SUBS.L       RQ18, RQ23, RD20
// st_lib.c:245   y = mi->y - SHORT(mi->p[mi->oldinum]->topoffset);
  MOV.L        (RQ9, 4), RQ18
  MOV.L        (RQ9, 8), RQ23
  MOV.Q        (RQ22, RQ23), RQ8
  MOV.W        (RQ8, 6), RQ23
  SUBS.L       RQ18, RQ23, RD21
// st_lib.c:246   w = SHORT(mi->p[mi->oldinum]->width);
  MOV.L        (RQ9, 8), RQ18
  MOV.Q        (RQ22, RQ18), RQ8
  MOV.W        (RQ8, 0), RD13
  MOV.L        RD13, (R2, 176)
// st_lib.c:247   h = SHORT(mi->p[mi->oldinum]->height);
  MOV.Q        (RQ22, RQ18), RQ8
  MOV.W        (RQ8, 2), RD12
  MOV.L        RD12, (R2, 172)
  ADDS.L       RD21, -168, RQ18
  BRGE.L       R0, RQ18, .L00802B75
// st_lib.c:250   I_Error("updateMultIcon: y - ST_Y < 0");
  MOV          .L00C0175E, RQ10
  BSR          I_Error, R1

.L00802B75:
// st_lib.c:252   V_CopyRect(x, y-ST_Y, BG, w, h, x, y, FG);
  ADDS.L       RD21, -168, RQ23
  ADD          RD20, 0, RD10
  ADD          RQ23, 0, RD11
  ADD          R0, 4, RD12
  MOV.L        (R2, 176), RD13
  MOV.L        (R2, 172), RD14
  ADD          RD20, 0, RD15
  ADD          RD21, 0, RD16
  ADD          R0, 0, RD17
  BSR          V_CopyRect, R1

.L00802B74:
// st_lib.c:253   }
  MOV.Q        (RQ9, 32), RQ22
  MOV.Q        (RQ9, 16), RQ8
  MOV.L        (RQ8, 0), RQ18
  MOV.Q        (RQ22, RQ18), RQ8
  MOV.L        (RQ9, 4), RQ18
  MOV.L        (RQ9, 0), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ8, 0, RQ13
  BSR          V_DrawPatchDirect, R1
  MOVU.B       st_oddframe, RD13
  BRNE.L       R0, RD13, .L00802B76
// st_lib.c:257   {
  MOVU.B       st_diddraweven, RD13
  OR           RD13, 1, RQ18
  AND          RQ18, 255, RD13
  MOV.B        RD13, st_diddraweven
  MOV.L        (RQ9, 8), RQ23
  MOV.Q        (RQ9, 16), RQ22
  MOV.L        (RQ22, 0), RQ18
  BREQ.Q       RQ18, RQ23, .L00802B77
// st_lib.c:260   st_diddraweven &= ~2;
  MOVU.B       st_diddraweven, RD13
  AND          RD13, -3, RQ23
  AND          RQ23, 255, RD13
  MOV.B        RD13, st_diddraweven

.L00802B77:

.L00802B76:
  MOVU.B       st_oddframe, RD13
  BREQ.L       R0, RD13, .L00802B78
// st_lib.c:263   {
  MOVU.B       st_diddraweven, RD13
  OR           RD13, 2, RQ18
  AND          RQ18, 255, RD13
  MOV.B        RD13, st_diddraweven
  MOV.L        (RQ9, 8), RQ23
  MOV.Q        (RQ9, 16), RQ22
  MOV.L        (RQ22, 0), RQ18
  BREQ.Q       RQ18, RQ23, .L00802B79
// st_lib.c:266   st_diddraweven &= ~1;
  MOVU.B       st_diddraweven, RD13
  AND          RD13, -2, RQ23
  AND          RQ23, 255, RD13
  MOV.B        RD13, st_diddraweven

.L00802B79:

.L00802B78:
// st_lib.c:269   mi->oldinum = *mi->inum;
  MOV.Q        (RQ9, 16), RQ22
  MOV.L        (RQ22, 0), RQ18
  MOV.L        RQ18, (RQ9, 8)

.L00802B6E:

.L00C0175D:
  ADD          R2, 416, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_ChangeCeiling:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C01765, RQ18
// p_acspec.c:1001   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C01764:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

A_Raise:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ9
  LUI          512, RD21
// p_pspr.c:431   psp->sy -= RAISESPEED;
  MOV.L        (RQ9, 16), RQ18
  ADDS.L       RQ18, 0xFFFFFFFFFFFA0000, RQ8
  MOV.L        RQ8, (RQ9, 16)
// p_pspr.c:433   if (psp->sy > WEAPONTOP )
  MOV.L        (RQ9, 16), RQ18
  BRGT.L       RD21, RQ18, .L00C0176B
// p_pspr.c:436   psp->sy = WEAPONTOP;
  MOV.L        RD21, (RQ9, 16)
// p_pspr.c:440   newstate = weaponinfo[player->readyweapon].readystate;
  MOV.L        (RQ23, 116), RQ8
  MOV          weaponinfo, RQ20
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        (RQ27, 12), RD22
// p_pspr.c:442   P_SetPsprite (player, ps_weapon, newstate);
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_SetPsprite, R1

.L00C0176B:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_kbhit_v:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -416, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_core/tk_puts.c:597   
// tk_core/tk_puts.c:613   
  ADD          RD0, 0, RD8
  MOV.L        RD8, (R2, 84)
// tk_core/tk_puts.c:614   
  ADD          R2, 96, RQ8
  ADD          RQ8, 0, RQ23
  MOV.L        RD0, (RQ23, 0)
// tk_core/tk_puts.c:615   
  ADD          R2, 84, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4106, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_puts.c:616   
  MOV.L        (R2, 84), RD10

.L00C01771:
  ADD          R2, 416, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

setvbuf:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
  ADD          RQ13, 0, RQ23
// pdpc201/stdio.c:2694   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2696   
  MOV.L        (R2, 124), RD27
  BRNE.Q       3, RD27, .L008004B6
// pdpc201/stdio.c:2697   
  MOV.L        (R2, 124), RD27
  MOV.L        RD27, (RQ18, 68)
// pdpc201/stdio.c:2699   
  ADD          R0, 0, RD10
  BSR          .L00C01777, R0

.L008004B6:
// pdpc201/stdio.c:2700   
  MOV.Q        (R2, 128), RQ27
  BRNE.Q       RQ0, RQ27, .L008004B7
  BRGEU.Q      2, RQ23, .L008004B8
// pdpc201/stdio.c:2704   
  ADD          R0, -1, RD10
  BSR          .L00C01777, R0

.L008004B8:
// pdpc201/stdio.c:2706   
  ADD          RQ23, 8, RQ22
  ADD          RQ22, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 104)
  BRNE.Q       RQ0, RQ27, .L008004B9
// pdpc201/stdio.c:2709   
  ADD          R0, -1, RD10
  BSR          .L00C01777, R0

.L008004B9:
  BSR          .L008004BA, R0

.L008004B7:
  BRGEU.Q      10, RQ23, .L008004BB
// pdpc201/stdio.c:2716   
  ADD          R0, -1, RD10
  BSR          .L00C01777, R0

.L008004BB:
// pdpc201/stdio.c:2718   
  MOV.Q        (R2, 128), RQ27
  ADD          RQ27, 0, RQ13
  MOV.Q        RQ13, (R2, 104)
// pdpc201/stdio.c:2720   
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ18, 92)
// pdpc201/stdio.c:2721   
  ADD          RQ23, -8, RQ23

.L008004BA:
// pdpc201/stdio.c:2722   
  MOV.L        (RQ18, 96), RQ20
  BRNE.L       R0, RQ20, .L008004BC
// pdpc201/stdio.c:2724   
  MOV.Q        (RQ18, 72), RQ9
  ADD          RQ9, 0, RQ10
  BSR          free, R1

.L008004BC:
// pdpc201/stdio.c:2726   
  MOV.Q        (R2, 104), RQ27
  MOV.Q        RQ27, (RQ18, 72)
// pdpc201/stdio.c:2728   
  MOV.Q        (RQ18, 72), RQ9
  LDIZ         4660, RD13
  MOVU.W       RD13, (RQ9, 0)
// pdpc201/stdio.c:2729   
  MOV.Q        (RQ18, 72), RQ9
  ADD          RQ23, 6, RQ22
  ADD          RQ9, RQ22, RQ8
  LDIZ         17185, RD12
  MOVU.W       RD12, (RQ8, 0)
// pdpc201/stdio.c:2731   
  MOV.Q        (RQ18, 72), RQ9
  ADD          RQ9, 2, RQ8
  MOV.Q        RQ8, (RQ18, 24)
// pdpc201/stdio.c:2732   
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ21
  MOV.Q        RQ21, (RQ18, 24)
  MOV.B        RD0, (RQ8, 0)
// pdpc201/stdio.c:2733   
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ21
  MOV.Q        RQ21, (RQ18, 24)
  MOV.B        RD0, (RQ8, 0)
// pdpc201/stdio.c:2734   
  MOV.Q        RQ23, (RQ18, 32)
// pdpc201/stdio.c:2735   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        (RQ18, 32), RQ22
  ADD          RQ9, RQ22, RQ8
  MOV.Q        RQ8, (RQ18, 48)
// pdpc201/stdio.c:2736   
  MOV.Q        (RQ18, 48), RQ21
  ADD          R0, 10, RD11
  MOV.B        RD11, (RQ21, 0)
// pdpc201/stdio.c:2737   
  MOV.L        (RQ18, 84), RQ20
  BRNE.Q       1, RQ20, .L008004BD
// pdpc201/stdio.c:2738   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)
  BSR          .L008004BE, R0

.L008004BD:
// pdpc201/stdio.c:2742   
  MOV.Q        (RQ18, 48), RQ8
  MOV.Q        RQ8, (RQ18, 40)

.L008004BE:
// pdpc201/stdio.c:2744   
  MOV.L        (R2, 124), RD27
  MOV.L        RD27, (RQ18, 68)
// pdpc201/stdio.c:2747   
  MOV.L        (RQ18, 68), RQ20
  BRNE.Q       2, RQ20, .L008004BF
// pdpc201/stdio.c:2748   
  MOV.B        RD0, (RQ18, 8)

.L008004BF:
// pdpc201/stdio.c:2750   
  ADD          R0, 0, RD10

.L00C01777:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

M_StringWidth:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
// m_menu.c:1314   int			 w = 0;
  ADD          RD0, 0, RD23
// m_menu.c:1317   for (i = 0;i < strlen(string);i++)
  ADD          R0, 0, RD8
  MOV.Q        (R2, 120), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ21
  ADDS.L       RD8, 0, RQ20
  BRGEU.Q      RQ21, RQ20, .L00801682

.L00801680:
// m_menu.c:1318   {
  MOV.Q        (R2, 120), RQ27
  MOV.B        (RQ27, RD8), RQ18
  ADD          RQ18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, -33, RD22
// m_menu.c:1320   if (c < 0 || c >= HU_FONTSIZE)
  CMPLT.Q      RD22, R0, RQ18
  ADD          R0, 63, R5
  CMPGE.Q      RD22, R5, RQ9
  OR           RQ18, RQ9, RQ26
  BREQ.L       R0, RQ26, .L00801683
// m_menu.c:1321   w += 4;
  ADDS.L       RD23, 4, RD23
  BSR          .L00801684, R0

.L00801683:
// m_menu.c:1323   w += SHORT (hu_font[c]->width);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD22), RQ26
  MOV.W        (RQ26, 0), RQ18
  ADDS.L       RD23, RQ18, RD23

.L00801684:
  ADDS.L       RD8, 1, RD8
  MOV.Q        (R2, 120), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ21
  ADDS.L       RD8, 0, RQ20
  BRLTU.Q      RQ21, RQ20, .L00801680

.L00801682:
// m_menu.c:1326   return w;
  ADD          RD23, 0, RD10

.L00C0177D:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

_string_readchar_u8:
// pdpc201/string.c:1671   
  MOVU.B       (RQ10, 0), RD13
// pdpc201/string.c:1672   
  ADD          R0, 128, RD12
  BTSTN.L      RD12, RD13, .L008006A2
// pdpc201/string.c:1673   
  MOV.L        RD13, (RQ11, 0)
// pdpc201/string.c:1675   
  ADD          RQ10, 1, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A2:
// pdpc201/string.c:1676   
  ADD          R0, 64, RD17
  BTSTN.L      RD17, RD13, .L008006A3
// pdpc201/string.c:1680   
  MOV.L        RD13, (RQ11, 0)
// pdpc201/string.c:1681   
  ADD          RQ10, 1, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A3:
// pdpc201/string.c:1684   
  ADD          R0, 32, RD17
  BTSTN.L      RD17, RD13, .L008006A4
// pdpc201/string.c:1685   
  AND          RD13, 31, RQ17
  SHAD.L       RQ17, 6, RQ16
  MOVU.B       (RQ10, 1), RQ17
  AND          RQ17, 63, RQ15
  OR           RQ16, RQ15, RD14
// pdpc201/string.c:1687   
  MOV.L        RD14, (RQ11, 0)
// pdpc201/string.c:1688   
  ADD          RQ10, 2, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A4:
// pdpc201/string.c:1691   
  ADD          R0, 16, RD31
  BTSTN.L      RD31, RD13, .L008006A5
// pdpc201/string.c:1692   
  AND          RD13, 15, RQ17
  SHAD.L       RQ17, 12, RQ16
  MOVU.B       (RQ10, 1), RQ15
  AND          RQ15, 63, RQ17
  SHAD.L       RQ17, 6, RQ15
  OR           RQ16, RQ15, RQ17
  MOVU.B       (RQ10, 2), RQ16
  AND          RQ16, 63, RQ15
  OR           RQ17, RQ15, RD14
// pdpc201/string.c:1696   
  MOV.L        RD14, (RQ11, 0)
// pdpc201/string.c:1697   
  ADD          RQ10, 3, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A5:
// pdpc201/string.c:1700   
  ADD          R0, 8, RD31
  BTSTN.L      RD31, RD13, .L008006A6
// pdpc201/string.c:1701   
  AND          RD13, 7, RQ17
  SHAD.L       RQ17, 18, RQ16
  MOVU.B       (RQ10, 1), RQ15
  AND          RQ15, 63, RQ17
  SHAD.L       RQ17, 12, RQ15
  OR           RQ16, RQ15, RQ17
  MOVU.B       (RQ10, 2), RQ16
  AND          RQ16, 63, RQ15
  SHAD.L       RQ15, 6, RQ16
  OR           RQ17, RQ16, RQ15
  MOVU.B       (RQ10, 3), RQ17
  AND          RQ17, 63, RQ16
  OR           RQ15, RQ16, RD14
// pdpc201/string.c:1706   
  MOV.L        RD14, (RQ11, 0)
// pdpc201/string.c:1707   
  ADD          RQ10, 4, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A6:
// pdpc201/string.c:1710   
  ADD          R0, 4, RD31
  BTSTN.L      RD31, RD13, .L008006A7
// pdpc201/string.c:1711   
  AND          RD13, 3, RQ17
  SHAD.L       RQ17, 24, RQ16
  MOVU.B       (RQ10, 1), RQ15
  AND          RQ15, 63, RQ17
  SHAD.L       RQ17, 18, RQ15
  OR           RQ16, RQ15, RQ17
  MOVU.B       (RQ10, 2), RQ16
  AND          RQ16, 63, RQ15
  SHAD.L       RQ15, 12, RQ16
  OR           RQ17, RQ16, RQ15
  MOVU.B       (RQ10, 3), RQ17
  AND          RQ17, 63, RQ16
  SHAD.L       RQ16, 6, RQ17
  OR           RQ15, RQ17, RQ16
  MOVU.B       (RQ10, 4), RQ15
  AND          RQ15, 63, RQ17
  OR           RQ16, RQ17, RD14
// pdpc201/string.c:1717   
  MOV.L        RD14, (RQ11, 0)
// pdpc201/string.c:1718   
  ADD          RQ10, 5, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A7:
// pdpc201/string.c:1721   
  ADD          R0, 2, RD31
  BTSTN.L      RD31, RD13, .L008006A8
// pdpc201/string.c:1722   
  AND          RD13, 1, RQ17
  SHAD.L       RQ17, 30, RQ16
  MOVU.B       (RQ10, 1), RQ15
  AND          RQ15, 63, RQ17
  SHAD.L       RQ17, 24, RQ15
  OR           RQ16, RQ15, RQ17
  MOVU.B       (RQ10, 2), RQ16
  AND          RQ16, 63, RQ15
  SHAD.L       RQ15, 18, RQ16
  OR           RQ17, RQ16, RQ15
  MOVU.B       (RQ10, 3), RQ17
  AND          RQ17, 63, RQ16
  SHAD.L       RQ16, 12, RQ17
  OR           RQ15, RQ17, RQ16
  MOVU.B       (RQ10, 4), RQ15
  AND          RQ15, 63, RQ17
  SHAD.L       RQ17, 6, RQ15
  OR           RQ16, RQ15, RQ17
  MOVU.B       (RQ10, 5), RQ16
  AND          RQ16, 63, RQ15
  OR           RQ17, RQ15, RD14
// pdpc201/string.c:1729   
  MOV.L        RD14, (RQ11, 0)
// pdpc201/string.c:1730   
  ADD          RQ10, 6, RQ12
  ADD          RQ12, 0, RQ10
  JSR          R1, 0, R0

.L008006A8:

.L00C0177E:
  JSR          R1, 0, R0
  .balign 4

P_StartButton:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  MOV.L        RD13, (R2, 108)
// p_switch.c:176   for (i = 0;i < MAXBUTTONS;i++)
  ADD          R0, 0, RD18

.L0080218E:
// p_switch.c:177   {
  MOV          buttonlist, RQ13
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 16), RQ9
  BREQ.L       R0, RQ9, .L00802191
  MOV          buttonlist, RQ13
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ8
  BRNE.Q       RQ23, RQ8, .L00802191
  BSR          .L00C01784, R0

.L00802191:
  ADDS.L       RD18, 1, RD18
  BRLT.L       16, RD18, .L0080218E

.L00802190:
// p_switch.c:188   for (i = 0;i < MAXBUTTONS;i++)
  ADD          R0, 0, RD18

.L00802193:
// p_switch.c:189   {
  MOV          buttonlist, RQ13
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 16), RQ9
  BRNE.L       R0, RQ9, .L00802196
// p_switch.c:191   {
  MOV          buttonlist, RQ13
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ23, (RQ12, 0)
// p_switch.c:193   buttonlist[i].where = w;
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (R2, 116), RD11
  MOV.L        RD11, (RQ12, 8)
// p_switch.c:194   buttonlist[i].btexture = texture;
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (R2, 112), RD10
  MOV.L        RD10, (RQ12, 12)
// p_switch.c:195   buttonlist[i].btimer = time;
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (R2, 108), RD17
  MOV.L        RD17, (RQ12, 16)
// p_switch.c:196   buttonlist[i].soundorg = (mobj_t *)&line->frontsector->soundorg;
  MOV.Q        (RQ23, 64), RQ8
  ADD          RQ8, 48, RQ22
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ22, (RQ12, 24)
// p_switch.c:197   return;
  BSR          .L00C01784, R0

.L00802196:
  ADDS.L       RD18, 1, RD18
  BRLT.L       16, RD18, .L00802193

.L00802195:
// p_switch.c:201   I_Error("P_StartButton: no button slots left!");
  MOV          .L00C01785, RQ10
  BSR          I_Error, R1

.L00C01784:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

P_RecursiveSound:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 100)
// p_enemy.c:119   if (sec->validcount == validcount
  MOV.L        (RQ23, 88), RQ18
  MOV.L        validcount, RD13
  BRNE.Q       RD13, RQ18, .L00801AC6
  MOV.L        (RQ23, 20), RQ18
  MOV.L        (R2, 100), RD13
  ADDS.L       RD13, 1, RQ20
  BRGT.L       RQ20, RQ18, .L00801AC6
  BSR          .L00C0178B, R0

.L00801AC6:
// p_enemy.c:125   sec->validcount = validcount;
  MOV.L        validcount, RD13
  MOV.L        RD13, (RQ23, 88)
// p_enemy.c:126   sec->soundtraversed = soundblocks+1;
  MOV.L        (R2, 100), RD13
  ADDS.L       RD13, 1, RQ18
  MOV.L        RQ18, (RQ23, 20)
// p_enemy.c:127   sec->soundtarget = soundtarget;
  MOV.Q        soundtarget, RQ12
  MOV.Q        RQ12, (RQ23, 24)
// p_enemy.c:129   for (i=0 ;i<sec->linecount ; i++)
  ADD          R0, 0, RD22
  MOV.L        (RQ23, 112), RQ20
  BRGE.L       RQ20, RD22, .L00801ACA

.L00801AC8:
// p_enemy.c:130   {
  MOV.Q        (RQ23, 120), RQ9
  MOV.Q        (RQ9, RD22), RQ8
// p_enemy.c:132   if (! (check->flags & ML_TWOSIDED) )
  MOV.W        (RQ8, 24), RQ18
  ADD          R0, 4, RD13
  BTST.L       RD13, RQ18, .L00801AC9
// p_enemy.c:135   P_LineOpening (check);
  ADD          RQ8, 0, RQ10
  BSR          P_LineOpening, R1
// p_enemy.c:137   if (openrange <= 0)
  MOV.L        openrange, RD13
  BRLE.L       R0, RD13, .L00801AC9
// p_enemy.c:140   if ( sides[ check->sidenum[0] ].sector == sec)
  ADD          RQ8, 36, RQ9
  MOV.W        (RQ9, 0), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 16), RQ9
  BRNE.Q       RQ23, RQ9, .L00801ACB
// p_enemy.c:141   other = sides[ check->sidenum[1] ] .sector;
  MOV.W        (RQ8, 38), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 16), RQ21
  BSR          .L00801ACC, R0

.L00801ACB:
// p_enemy.c:143   other = sides[ check->sidenum[0] ].sector;
  MOV.W        (RQ8, 36), RQ18
  MOV.Q        sides, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 16), RQ21

.L00801ACC:
// p_enemy.c:145   if (check->flags & ML_SOUNDBLOCK)
  MOV.W        (RQ8, 24), RQ18
  ADD          R0, 64, RD13
  BTST.L       RD13, RQ18, .L00801ACD
  MOV.L        (R2, 100), RD13
  BRNE.L       R0, RD13, .L00801ACE
// p_enemy.c:148   P_RecursiveSound (other, 1);
  ADD          RQ21, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_RecursiveSound, R1

.L00801ACE:
  BSR          .L00801ACF, R0

.L00801ACD:
// p_enemy.c:151   P_RecursiveSound (other, soundblocks);
  ADD          RQ21, 0, RQ10
  MOV.L        (R2, 100), RD11
  BSR          P_RecursiveSound, R1

.L00801ACF:

.L00801AC9:
  ADDS.L       RD22, 1, RD22
  MOV.L        (RQ23, 112), RQ20
  BRLT.L       RQ20, RD22, .L00801AC8

.L00801ACA:

.L00C0178B:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

T_LightFlash:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// p_lights.c:100   {
  MOV.L        (RQ9, 32), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV.L        RQ8, (RQ9, 32)
  BRNE.L       R0, RQ8, .L00C01791
// p_lights.c:104   if (flash->sector->lightlevel == flash->maxlight)
  MOV.Q        (RQ9, 24), RQ22
  MOV.W        (RQ22, 12), RQ18
  MOV.L        (RQ9, 36), RQ8
  BRNE.Q       RQ8, RQ18, .L00801CF2
// p_lights.c:105   {
  MOV.L        (RQ9, 40), RQ18
  MOV.Q        (RQ9, 24), RQ22
  MOV.W        RQ18, (RQ22, 12)
// p_lights.c:107   flash->count = (P_Random()&flash->mintime)+1;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ9, 48), RQ8
  AND          RQ18, RQ8, RQ23
  ADDS.L       RQ23, 1, RQ18
  MOV.L        RQ18, (RQ9, 32)
  BSR          .L00801CF3, R0

.L00801CF2:
// p_lights.c:110   {
  MOV.L        (RQ9, 36), RQ8
  MOV.Q        (RQ9, 24), RQ22
  MOV.W        RQ8, (RQ22, 12)
// p_lights.c:112   flash->count = (P_Random()&flash->maxtime)+1;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  MOV.L        (RQ9, 44), RQ18
  AND          RQ23, RQ18, RQ8
  ADDS.L       RQ8, 1, RQ23
  MOV.L        RQ23, (RQ9, 32)

.L00801CF3:

.L00C01791:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

HUlib_keyInIText:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ22
  ADD          RD11, 0, RD18
  ADD          R0, 32, RD21
  ADD          R0, 95, RD20
  ADD          R0, 127, RD27
  ADD          R0, 13, RD26
  ADD          R0, 1, RD25
// hu_lib.c:332   if (ch >= ' ' && ch <= '_') 
  ADD          R0, 32, R5
  CMPGE.Q      RD18, R5, RQ9
  ADD          R0, 95, R5
  CMPLE.Q      RD18, R5, RQ8
  BTST.L       RQ8, RQ9, .L00802D17
// hu_lib.c:333   HUlib_addCharToTextLine(&it->l, (char) ch);
  SHAD.Q       RD18, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  ADD          RQ22, 0, RQ23
  ADD          RQ23, 0, RQ10
  SHAD.Q       RQ9, 56, RD11
  SHAR.Q       RD11, 56, RD11
  BSR          HUlib_addCharToTextLine, R1
  BSR          .L00802D18, R0

.L00802D17:
  BRNE.Q       127, RD18, .L00802D19
// hu_lib.c:336   HUlib_delCharFromIText(it);
  ADD          RQ22, 0, RQ10
  BSR          HUlib_delCharFromIText, R1
  BSR          .L00802D1A, R0

.L00802D19:
  BRNE.Q       13, RD18, .L00C00634

.L00802D1A:

.L00802D18:
// hu_lib.c:341   return true; // ate the key
  ADD          R0, 1, RD10
  BSR          .L00C01797, R0

.L00C00634:
  ADD          R0, 0, RQ10

.L00C01797:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

tk_mmap:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R21, (R2, 16)
  MOV.X        R22, (R2, 24)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  ADD          RD12, 0, RD23
  ADD          RD13, 0, RD22
  ADD          RD14, 0, RD21
  MOV.Q        RQ15, (R2, 104)
// tk_core/tk_mmap.c:407   
  BSR          TKMM_InitMMap, R1
// tk_core/tk_mmap.c:416   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RD23, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RD21, 0, RD14
  MOV.Q        (R2, 104), RQ15
  BSR          TKMM_MmapV, R1

.L00C0179D:
  ADD          R2, 384, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R21
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

tk_printf:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -560, R2
  ADD          RQ10, 0, RQ18
  ADD          R2, 80, RQ6
  MOV.Q        RQ6, (R2, 64)
  ADD          R0, 8, RQ7
  BSR          __va64_saveargs, R1
// tk_core/tk_puts.c:1494   
// tk_core/tk_puts.c:1495   
  ADD          RQ18, 0, RQ10
  ADD          R2, 80, RQ11
  BSR          tk_vprintf, R1
// tk_core/tk_puts.c:1496   

.L00C017A3:
  ADD          R2, 560, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

PIT_StompThing:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// p_map.c:87   if (!(thing->flags & MF_SHOOTABLE) )
  MOV.L        (RQ8, 160), RQ18
  ADD          R0, 4, RD21
  BTSTN.L      RD21, RQ18, .L00801D18
// p_map.c:88   return true;
  ADD          R0, 1, RD10
  BSR          .L00C017A9, R0

.L00801D18:
// p_map.c:90   blockdist = thing->radius + tmthing->radius;
  MOV.L        (RQ8, 104), RQ18
  MOV.Q        tmthing, RQ21
  MOV.L        (RQ21, 104), RQ9
  ADDS.L       RQ18, RQ9, RD23
// p_map.c:92   if ( abs(thing->x - tmx) >= blockdist
  MOV.L        (RQ8, 24), RQ18
  MOV.L        tmx, RD21
  SUBS.L       RQ18, RD21, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  BRGE.L       RD23, RQ18, .L00801D1A
  MOV.L        (RQ8, 28), RQ9
  MOV.L        tmy, RD21
  SUBS.L       RQ9, RD21, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RQ9
  SHAR.Q       RQ9, 63, RQ7
  AND          RQ9, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RQ9
  BRGE.L       RD23, RQ9, .L00801D1A
  BSR          .L00801D19, R0

.L00801D1A:
// p_map.c:96   return true;
  ADD          R0, 1, RD10
  BSR          .L00C017A9, R0

.L00801D19:
// p_map.c:100   if (thing == tmthing)
  MOV.Q        tmthing, RQ21
  BRNE.Q       RQ21, RQ8, .L00801D1C
// p_map.c:101   return true;
  ADD          R0, 1, RD10
  BSR          .L00C017A9, R0

.L00801D1C:
// p_map.c:104   if ( !tmthing->player && gamemap != 30)
  MOV.Q        tmthing, RQ21
  MOV.Q        (RQ21, 192), RQ22
  CMPEQ.Q      RQ22, R0, RQ18
  MOV.L        gamemap, RD21
  ADD          R0, 30, R5
  CMPNE.Q      RD21, R5, RQ9
  BTSTN.L      RQ9, RQ18, .L00C0063E
// p_map.c:107   P_DamageMobj (thing, tmthing, tmthing, 10000);
  ADD          RQ8, 0, RQ10
  MOV.Q        tmthing, RQ11
  MOV.Q        tmthing, RQ12
  LDIZ         10000, RD13
  BSR          P_DamageMobj, R1
// p_map.c:109   return true;
  ADD          R0, 1, RD10
  BSR          .L00C017A9, R0

.L00C0063E:
  ADD          R0, 0, RQ10

.L00C017A9:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

I_SoundIsPlaying:
// i_sound_btsh.c:594   return gametic < handle;
  MOV.L        gametic, RD13
  CMPGT.Q      RD10, RD13, RQ12
  ADDS.L       RQ12, 0, RD10

.L00C017AA:
  JSR          R1, 0, R0

__lva_conv_toi128:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ9
// pdpc201/btshx_lva.c:319   
  SHLR.Q       RQ9, 62, RQ18
  BRNE.Q       1, RQ18, .L00801032
// pdpc201/btshx_lva.c:320   
  SHLD.Q       RQ9, 2, RQ8
// pdpc201/btshx_lva.c:322   
  SHAR.Q       RQ8, 2, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        RQ20, (R2, 64)
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          .L00C017B0, R0

.L00801032:
// pdpc201/btshx_lva.c:325   
  SHLR.Q       RQ9, 48, RQ18
  ADDS.L       RQ18, 0, RD23
// pdpc201/btshx_lva.c:326   
  BRNE.Q       24, RD23, .L00801033
// pdpc201/btshx_lva.c:327   
  ADD          RQ9, 0, RQ22
// pdpc201/btshx_lva.c:329   
  MOV.X        (RQ22, 0), RQ20
  MOV.X        RQ20, (R2, 64)
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          .L00C017B0, R0

.L00801033:
// pdpc201/btshx_lva.c:332   
  ADD          RQ9, 0, RQ10
  BSR          __lva_conv_toi64, R1
  ADD          RQ10, 0, RQ8
// pdpc201/btshx_lva.c:333   
  ADD          RQ8, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        RQ20, (R2, 64)
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11

.L00C017B0:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

tk_rstrdup:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
// tk_core/tk_puts.c:1661   
  MOV.Q        (R2, 88), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RD23
// tk_core/tk_puts.c:1662   
  ADDS.L       RD23, 1, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_ralloc, R1
  ADD          RQ10, 0, RQ8
// tk_core/tk_puts.c:1663   
  ADDS.L       RD23, 1, RQ9
  ADDS.L       RQ9, 0, RQ18
  ADD          RQ8, 0, RQ10
  MOV.Q        (R2, 88), RQ11
  ADD          RQ18, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_puts.c:1664   
  ADD          RQ8, 0, RQ10

.L00C017B6:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

P_CheckMeleeRange:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:183   if (!actor->target)
  MOV.Q        (RQ8, 176), RQ23
  BREQ.Q       R0, RQ23, .L00C00647
// p_enemy.c:186   pl = actor->target;
  MOV.Q        (RQ8, 176), RQ22
// p_enemy.c:187   dist = P_AproxDistance (pl->x-actor->x, pl->y-actor->y);
  MOV.L        (RQ22, 28), RQ18
  MOV.L        (RQ8, 28), RQ9
  SUBS.L       RQ18, RQ9, RQ27
  MOV.L        (RQ22, 24), RQ18
  MOV.L        (RQ8, 24), RQ9
  SUBS.L       RQ18, RQ9, RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ27, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD21
// p_enemy.c:189   if (dist >= MELEERANGE-20*FRACUNIT+pl->info->radius)
  MOV.Q        (RQ22, 136), RQ23
  MOV.L        (RQ23, 64), RQ18
  ADDS.L       RQ18, 0x002C0000, RQ9
  BRGE.L       RQ9, RD21, .L00C00647
// p_enemy.c:192   if (! P_CheckSight (actor, actor->target) )
  MOV.Q        (RQ8, 176), RQ23
  ADD          RQ8, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00647
// p_enemy.c:195   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C017BC, R0

.L00C00647:
  ADD          R0, 0, RQ10

.L00C017BC:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

TKMM_LVA_NewBigInt3v:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
// tk_core/lva_tagopr.c:220   
  BSR          TKMM_LVA_AllocBigInt, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagopr.c:221   
  MOV.Q        (R2, 72), RQ8
  MOV.Q        (RQ8, 0), RQ10
  MOV.Q        (RQ8, 8), RQ11
  MOV.Q        (RQ8, 16), RQ12
  MOV.Q        RQ10, (RQ18, 0)
  MOV.Q        RQ11, (RQ18, 8)
  MOV.Q        (RQ8, 24), RQ10
  MOV.Q        (RQ8, 32), RQ11
  MOV.Q        RQ12, (RQ18, 16)
  MOV.Q        (RQ8, 40), RQ12
  MOV.Q        RQ10, (RQ18, 24)
  MOV.Q        RQ11, (RQ18, 32)
  MOV.Q        RQ12, (RQ18, 40)
// tk_core/lva_tagopr.c:225   
  ADD          RQ18, 0, RQ9
// tk_core/lva_tagopr.c:226   
  ADD          R0, 0x00180000, RQ13
  LDSH32       RQ13, 0, RQ13
  OR           RQ9, RQ13, RQ9
// tk_core/lva_tagopr.c:227   
  ADD          RQ9, 0, RQ10

.L00C017C2:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TKMM_MMCell_GetLnkObjCellHeadPtr:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// tk_core/tk_mmcell.c:367   
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 16, RQ12
  ADD          RQ12, 0, RQ18
// tk_core/tk_mmcell.c:368   
  ADD          RQ18, 0, RQ12
  MOV.Q        (R2, 96), RQ11
  SUB          RQ11, RQ12, RQ23
  ADDS.L       RQ23, 0, RD22
// tk_core/tk_mmcell.c:369   
  SHAR         RD22, 3, RD8
// tk_core/tk_mmcell.c:371   
  MOV.L        (RQ18, 0xF700), RQ9
  ADD          R0, 0x12345678, RD10
  BREQ.Q       RD10, RQ9, .L008009F2
// tk_core/tk_mmcell.c:372   

TKMM_MMCell_GetLnkObjCellHeadPtr.debugbreak_L0269:
  BRK          617

.L008009F2:
// tk_core/tk_mmcell.c:373   
  MOV.L        (RQ18, 0xFEC0), RQ9
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ9, .L008009F3
// tk_core/tk_mmcell.c:374   

TKMM_MMCell_GetLnkObjCellHeadPtr.debugbreak_L026A:
  BRK          618

.L008009F3:
// tk_core/tk_mmcell.c:375   
  MOV.L        (RQ18, 0xFFD0), RQ9
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ9, .L008009F4
// tk_core/tk_mmcell.c:376   

TKMM_MMCell_GetLnkObjCellHeadPtr.debugbreak_L026B:
  BRK          619

.L008009F4:
// tk_core/tk_mmcell.c:378   
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          TKMM_MMCell_ChunkFindObjBase, R1
  ADDS.L       RQ10, 0, RD8
// tk_core/tk_mmcell.c:379   
  BRGE.L       R0, RD8, .L008009F5
// tk_core/tk_mmcell.c:380   
  ADD          RQ0, 0, RQ10
  BSR          .L00C017D7, R0

.L008009F5:
// tk_core/tk_mmcell.c:381   
  ADD          RQ18, 0, RQ13
  LEA.Q        RQ13, RD8, RQ21
  ADD          RQ21, 0, RQ10

.L00C017D7:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

S_ChangeMusic:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -392, R2
  ADD          RD10, 0, RD22
  MOV.L        RD11, (R2, 104)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// s_sound.c:656   char		namebuf[9];
// s_sound.c:658   music = NULL;
  ADD          R0, 0, RQ18
// s_sound.c:660   if ( (musicnum <= mus_None)
  CMPLE.Q      RD22, R0, RQ9
  ADD          R0, 68, R5
  CMPGE.Q      RD22, R5, RQ23
  OR           RQ9, RQ23, RQ21
  BREQ.L       R0, RQ21, .L00802D6B
// s_sound.c:662   {
  MOV          .L00C017E1, RQ10
  ADD          RD22, 0, RD11
  BSR          I_Error, R1
  BSR          .L00802D6C, R0

.L00802D6B:
// s_sound.c:666   {
  MOV          S_music, RQ13
  SHAD.L       RD22, 5, RQ18
  ADD          RQ13, RQ18, RQ18

.L00802D6C:
// s_sound.c:670   if (mus_playing == music)
  MOV.Q        TU7A00CA3E/mus_playing, RQ13
  BREQ.Q       RQ18, RQ13, .L00C017E0
// s_sound.c:674   S_StopMusic();
  BSR          S_StopMusic, R1
// s_sound.c:676   if(gamemode==heretic)
  MOV.L        gamemode, RD13
  BRNE.Q       4, RD13, .L00802D6D
  MOV.L        (RQ18, 8), RQ9
  BRGT.L       R0, RQ9, .L00802D6E
// s_sound.c:679   {
  MOV.Q        (RQ18, 0), RQ8
  ADD          R2, 112, RQ10
  MOV          .L00C017E2, RQ11
  ADD          RQ8, 0, RQ12
  BSR          sprintf, R1
// s_sound.c:681   music->lumpnum = W_GetNumForName(namebuf);
  ADD          R2, 112, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 8)

.L00802D6E:

.L00802D6D:
// s_sound.c:687   if (music->lumpnum<=0)
  MOV.L        (RQ18, 8), RQ23
  BRGT.L       R0, RQ23, .L00802D6F
// s_sound.c:688   {
  MOV.Q        (RQ18, 0), RQ8
  ADD          R2, 112, RQ10
  MOV          .L00C017E3, RQ11
  ADD          RQ8, 0, RQ12
  BSR          sprintf, R1
// s_sound.c:690   music->lumpnum = W_GetNumForName(namebuf);
  ADD          R2, 112, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 8)

.L00802D6F:
// s_sound.c:694   music->data = (void *) W_CacheLumpNum(music->lumpnum, PU_MUSIC);
  MOV.L        (RQ18, 8), RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 3, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ8, (RQ18, 16)
// s_sound.c:695   music->handle = I_RegisterSong(music->data);
  MOV.Q        (RQ18, 16), RQ8
  ADD          RQ8, 0, RQ10
  BSR          I_RegisterSong, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 24)
// s_sound.c:698   I_PlaySong(music->handle, looping);
  MOV.L        (RQ18, 24), RQ23
  ADD          RQ23, 0, RD10
  MOV.L        (R2, 104), RD11
  BSR          I_PlaySong, R1
// s_sound.c:700   mus_playing = music;
  MOV.Q        RQ18, TU7A00CA3E/mus_playing

.L00C017E0:
  ADD          R2, 392, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_AcsRun_PolyWait:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
  ADDS.L       RD11, 0, RD9
  MOV          .L00C017EA, RQ18
  ADD          R0, 4, RD23
// p_acspec.c:1013   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          printf, R1
// p_acspec.c:1015   run->status=4;
  MOV.B        RD23, (RQ8, 1065)

.L00C017E9:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_RemoveThinker:
// p_tick.c:86   thinker->function.acv = P_ACTIONF_REMOVE;
  ADD          R0, -1, RQ13
  ADD          RQ10, 16, RQ12
  MOV.Q        RQ13, (RQ12, 0)

.L00C017EB:
  JSR          R1, 0, R0
  .balign 4

__write:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
  ADD          RQ11, 0, RQ20
  MOV.Q        RQ12, (R2, 88)
  ADD          RQ13, 0, RQ22
// pdpc201/btshx_supa.c:334   
  BRGE.L       3, RD18, .L00800F9F
// pdpc201/btshx_supa.c:335   
  ADD          RQ20, 0, RQ9
// pdpc201/btshx_supa.c:337   
  MOV.Q        (R2, 88), RQ27
  ADDS.L       RQ27, 0, RQ8
  ADD          RQ9, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          tk_puts_n, R1
// pdpc201/btshx_supa.c:338   
  ADD          R0, 0, RD10
  BSR          .L00C017FB, R0

.L00800F9F:
// pdpc201/btshx_supa.c:341   
  BRLT.L       256, RD18, .L00800FA0
// pdpc201/btshx_supa.c:342   

__write.debugbreak_L0276:
  BRK          630

.L00800FA0:
  MOV          btshx_tk_handles, RQ27
  MOV.Q        (RQ27, RD18), RQ21
// pdpc201/btshx_supa.c:344   
  BRNE.Q       R0, RQ21, .L00800FA1
// pdpc201/btshx_supa.c:345   

__write.debugbreak_L0277:
  BRK          631

.L00800FA1:
// pdpc201/btshx_supa.c:347   
  BREQ.Q       R0, RQ22, .L00800FA2
  MOV.L        RD0, (RQ22, 0)

.L00800FA2:
// pdpc201/btshx_supa.c:348   
  ADD          RQ20, 0, RQ9
// pdpc201/btshx_supa.c:349   
  MOV          btshx_tk_handles, RQ27
  MOV.Q        (RQ27, RD18), RQ13
  MOV.Q        (R2, 88), RQ27
  ADDS.L       RQ27, 0, RQ8
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          tk_fwrite, R1
  ADD          RQ10, 0, RD23
// pdpc201/btshx_supa.c:350   
  BRGE.L       R0, RD23, .L00800FA3
// pdpc201/btshx_supa.c:351   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ22, 0)

.L00800FA3:
// pdpc201/btshx_supa.c:353   
  ADD          RD23, 0, RD10

.L00C017FB:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_AcsRun_TagWait:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
  ADDS.L       RD11, 0, RD9
  MOV          .L00C01804, RQ18
  ADD          R0, 4, RD23
// p_acspec.c:1007   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          printf, R1
// p_acspec.c:1009   run->status=4;
  MOV.B        RD23, (RQ8, 1065)

.L00C01803:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_CrossBSPNode:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD22
// p_sight.c:264   if (bspnum & NF_SUBSECTOR)
  LUI          8, RD21
  BTST.L       RD21, RD22, .L00802074
  BRNE.Q       -1, RD22, .L00802075
// p_sight.c:267   return P_CrossSubsector (0);
  ADD          R0, 0, RD10
  BSR          P_CrossSubsector, R1
  BSR          .L00C0180A, R0
  BSR          .L00802076, R0

.L00802075:
// p_sight.c:269   return P_CrossSubsector (bspnum&(~NF_SUBSECTOR));
  AND          RD22, 0xFFFFFFFFFFFF7FFF, RQ18
  ADD          RQ18, 0, RD10
  BSR          P_CrossSubsector, R1
  BSR          .L00C0180A, R0

.L00802076:

.L00802074:
// p_sight.c:272   bsp = &nodes[bspnum];
  MOV.Q        nodes, RQ21
  ADD          R0, 52, R5
  MUL.L        RD22, R5, RQ23
  ADD          RQ21, RQ23, RQ23
// p_sight.c:275   side = P_DivlineSide (strace.x, strace.y, (divline_t *)bsp);
  MOV          strace, RQ21
  MOV.L        (RQ21, 4), RQ18
  MOV.L        (RQ21, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  ADDS.L       RQ10, 0, RD8
// p_sight.c:276   if (side == 2)
  BRNE.Q       2, RD8, .L00802077
// p_sight.c:277   side = 0;	// an "on" should cross both sides
  ADD          R0, 0, RD8

.L00802077:
// p_sight.c:280   if (!P_CrossBSPNode (bsp->children[side]) )
  ADD          RQ23, 48, RQ21
  MOVU.W       (RQ21, RD8), RQ18
  ADD          RQ18, 0, RD10
  BSR          P_CrossBSPNode, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C00660
// p_sight.c:284   if (side == P_DivlineSide (t2x, t2y,(divline_t *)bsp))
  MOV.L        t2x, RD10
  MOV.L        t2y, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  ADD          RQ10, 0, RQ18
  BRNE.Q       RQ18, RD8, .L00802078
// p_sight.c:287   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0180A, R0

.L00802078:
// p_sight.c:291   return P_CrossBSPNode (bsp->children[side^1]);
  ADD          RQ23, 48, RQ21
  XOR          RD8, 1, RQ18
  MOVU.W       (RQ21, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          P_CrossBSPNode, R1
  BSR          .L00C0180A, R0

.L00C00660:
  ADD          R0, 0, RQ10

.L00C0180A:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

feof:
// pdpc201/stdio.c:3499   
  MOV.L        (RQ10, 60), RQ13
  ADDS.L       RQ13, 0, RD10

.L00C0180B:
  JSR          R1, 0, R0

fscanf:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -568, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          RQ11, 0, RQ9
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
  ADD          R0, 16, RQ7
  BSR          __va64_saveargs, R1
// pdpc201/stdio.c:2855   
// pdpc201/stdio.c:2856   
  ADD          RQ9, 0, RQ10
  ADD          R2, 96, RQ11
  MOV.Q        (R2, 88), RQ12
  ADD          RQ0, 0, RQ13
  BSR          vvscanf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:2857   
// pdpc201/stdio.c:2858   
  ADD          RD18, 0, RD10

.L00C01811:
  ADD          R2, 568, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tkdfs_writeutf8uz:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ20
  ADDS.L       RD11, 0, RD9
// tk_core/tk_rwad.c:1030   
  MOV.Q        (RQ20, 0), RQ13
  MOV.Q        RQ13, (R2, 104)
// tk_core/tk_rwad.c:1031   
  ADD          R0, 32, R5
  CMPLT.Q      RD9, R5, RQ8
  CMPEQ.Q      RD9, R0, RQ23
  ADD          R0, 16, R5
  CMPGE.Q      RD9, R5, RQ22
  OR           RQ23, RQ22, RQ21
  BTST.L       RQ21, RQ8, .L00800F43
// tk_core/tk_rwad.c:1032   
  SHLR.Q       RD9, 6, RQ8
  AND          RQ8, 31, RQ8
  OR           RQ8, 192, RQ23
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, (R2, 104)
  MOVU.B       RQ23, (RQ18, 0)
// tk_core/tk_rwad.c:1034   
  AND          RD9, 63, RQ8
  OR           RQ8, 128, RQ23
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, (R2, 104)
  MOVU.B       RQ23, (RQ18, 0)
  BSR          .L00800F44, R0

.L00800F43:
  BRGE.L       128, RD9, .L00800F45
// tk_core/tk_rwad.c:1037   
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, (R2, 104)
  MOVU.B       RD9, (RQ18, 0)
  BSR          .L00800F46, R0

.L00800F45:
// tk_core/tk_rwad.c:1040   
  ADD          R2, 104, RQ18
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          tkdfs_writeutf8, R1

.L00800F46:

.L00800F44:
// tk_core/tk_rwad.c:1042   
  MOV.Q        (R2, 104), RQ13
  MOV.Q        RQ13, (RQ20, 0)
// tk_core/tk_rwad.c:1044   
  ADD          R0, 0, RD10

.L00C01817:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

T_Glow:
// p_lights.c:316   {
  MOV.L        (RQ10, 40), RQ13
  BREQ.Q       -1, RQ13, .L00801D0E
  BREQ.Q       1, RQ13, .L00801D0F
  BSR          .L00801D0D, R0

.L00801D0E:
// p_lights.c:321   g->sector->lightlevel -= GLOWSPEED;
  MOV.Q        (RQ10, 24), RQ12
  MOV.W        (RQ12, 12), RQ13
  ADDS.L       RQ13, -8, RQ11
  MOV.W        RQ11, (RQ12, 12)
// p_lights.c:322   if (g->sector->lightlevel <= g->minlight)
  MOV.W        (RQ12, 12), RQ13
  MOV.L        (RQ10, 32), RQ11
  BRGT.L       RQ11, RQ13, .L00801D10
// p_lights.c:323   {
  MOV.Q        (RQ10, 24), RQ12
  MOV.W        (RQ12, 12), RQ11
  ADDS.L       RQ11, 8, RQ13
  MOV.W        RQ13, (RQ12, 12)
// p_lights.c:325   g->direction = 1;
  ADD          R0, 1, RD17
  MOV.L        RD17, (RQ10, 40)

.L00801D10:
// p_lights.c:326   }
  BSR          .L00801D0D, R0

.L00801D0F:
// p_lights.c:331   g->sector->lightlevel += GLOWSPEED;
  MOV.Q        (RQ10, 24), RQ12
  MOV.W        (RQ12, 12), RQ11
  ADDS.L       RQ11, 8, RQ13
  MOV.W        RQ13, (RQ12, 12)
// p_lights.c:332   if (g->sector->lightlevel >= g->maxlight)
  MOV.W        (RQ12, 12), RQ11
  MOV.L        (RQ10, 36), RQ13
  BRLT.L       RQ13, RQ11, .L00801D11
// p_lights.c:333   {
  MOV.Q        (RQ10, 24), RQ12
  MOV.W        (RQ12, 12), RQ11
  ADDS.L       RQ11, -8, RQ13
  MOV.W        RQ13, (RQ12, 12)
// p_lights.c:335   g->direction = -1;
  ADD          R0, -1, RD17
  MOV.L        RD17, (RQ10, 40)

.L00801D11:
// p_lights.c:336   }

.L00801D0D:

.L00C01818:
  JSR          R1, 0, R0

R_DrawColumnInCache:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          RD13, 0, RD21
// r_data.c:249   dest = (byte *)cache + 3;
  MOV.Q        (R2, 112), RQ27
  ADD          RQ27, 3, RQ26
  MOV.Q        RQ26, (R2, 96)
// r_data.c:251   while (patch->topdelta != 0xff)
  BSR          .L0080241A, R0

.L00802418:
// r_data.c:252   {
  ADD          RQ23, 3, RQ20
// r_data.c:254   count = patch->length;
  MOVU.B       (RQ23, 1), RD8
// r_data.c:255   position = originy + patch->topdelta;
  MOVU.B       (RQ23, 0), RQ18
  MOV.L        (R2, 108), RD27
  ADDS.L       RD27, RQ18, RD9
// r_data.c:257   if (position < 0)
  BRGE.L       R0, RD9, .L0080241B
// r_data.c:258   {
  ADDS.L       RD8, RD9, RD8
// r_data.c:260   position = 0;
  ADD          R0, 0, RD9

.L0080241B:
// r_data.c:263   if (position + count > cacheheight)
  ADDS.L       RD9, RD8, RQ18
  BRLE.L       RD21, RQ18, .L0080241C
// r_data.c:264   count = cacheheight - position;
  SUBS.L       RD21, RD9, RD8

.L0080241C:
// r_data.c:266   if (count > 0)
  BRLE.L       R0, RD8, .L0080241D
// r_data.c:267   memcpy (cache + position, source, count);
  MOV.Q        (R2, 112), RQ27
  ADD          RQ27, RD9, RQ22
  ADDS.L       RD8, 0, RQ26
  ADD          RQ22, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ26, 0, RQ12
  BSR          memcpy, R1

.L0080241D:
// r_data.c:269   patch = (column_t *)(	(byte *)patch + patch->length + 4); 
  MOVU.B       (RQ23, 1), RQ18
  ADD          RQ23, RQ18, RQ22
  ADD          RQ22, 4, RQ27
  ADD          RQ27, 0, RQ23

.L0080241A:
  MOVU.B       (RQ23, 0), RQ18
  BRNE.Q       255, RQ18, .L00802418

.L00802419:

.L00C0181E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

T_StrobeFlash:
// p_lights.c:157   {
  MOV.L        (RQ10, 32), RQ13
  ADDS.L       RQ13, -1, RQ12
  MOV.L        RQ12, (RQ10, 32)
  BRNE.L       R0, RQ12, .L00C0181F
// p_lights.c:161   if (flash->sector->lightlevel == flash->minlight)
  MOV.Q        (RQ10, 24), RQ11
  MOV.W        (RQ11, 12), RQ13
  MOV.L        (RQ10, 36), RQ12
  BRNE.Q       RQ12, RQ13, .L00801CF4
// p_lights.c:162   {
  MOV.L        (RQ10, 40), RQ13
  MOV.Q        (RQ10, 24), RQ11
  MOV.W        RQ13, (RQ11, 12)
// p_lights.c:164   flash->count = flash->brighttime;
  MOV.L        (RQ10, 48), RQ13
  MOV.L        RQ13, (RQ10, 32)
  BSR          .L00801CF5, R0

.L00801CF4:
// p_lights.c:167   {
  MOV.L        (RQ10, 36), RQ12
  MOV.Q        (RQ10, 24), RQ11
  MOV.W        RQ12, (RQ11, 12)
// p_lights.c:169   flash->count =flash->darktime;
  MOV.L        (RQ10, 44), RQ13
  MOV.L        RQ13, (RQ10, 32)

.L00801CF5:

.L00C0181F:
  JSR          R1, 0, R0

tk_kbhit:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
// tk_core/tk_puts.c:693   
  BSR          tk_kbhit_v, R1

.L00C01825:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

R_MapPlane:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD22
  ADD          RD11, 0, RD20
  MOV.L        RD12, (R2, 116)
// r_plane.c:137   if (x2 < x1
  MOV.L        (R2, 116), RD27
  CMPGT.Q      RD20, RD27, RQ18
  CMPLT.Q      RD20, R0, RQ23
  OR           RQ18, RQ23, RQ9
  MOV.L        viewwidth, RD26
  CMPGE.Q      RD27, RD26, RQ18
  OR           RQ9, RQ18, RQ23
  ADDU.L       RD22, R0, RQ9
  MOV.L        viewheight, RD26
  ADDU.L       RD26, R0, RQ8
  CMPGT.Q      RQ9, RQ8, RQ18
  OR           RQ23, RQ18, RQ9
  BREQ.L       R0, RQ9, .L008026AD
// r_plane.c:141   {
  MOV          .L00C0182C, RQ10
  ADD          RD20, 0, RD11
  MOV.L        (R2, 116), RD12
  ADD          RD22, 0, RD13
  BSR          I_Error, R1

.L008026AD:
// r_plane.c:146   if (planeheight != cachedheight[y])
  MOV          cachedheight, RQ27
  MOV.L        (RQ27, RD22), RQ8
  MOV.L        planeheight, RD27
  BREQ.Q       RQ8, RD27, .L008026AE
// r_plane.c:147   {
  MOV          cachedheight, RQ27
  MOV.L        planeheight, RD26
  MOV.L        RD26, (RQ27, RD22)
// r_plane.c:149   distance = cacheddistance[y] = FixedMul (planeheight, yslope[y]);
  MOV          yslope, RQ27
  MOV.L        (RQ27, RD22), RQ18
  MOV.L        planeheight, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  MOV          cacheddistance, RQ27
  MOV.L        RQ23, (RQ27, RD22)
  ADD          RQ23, 0, RD21
// r_plane.c:150   ds_xstep = cachedxstep[y] = FixedMul (distance,basexscale);
  ADD          RD21, 0, RD10
  MOV.L        basexscale, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV          cachedxstep, RQ27
  MOV.L        RQ9, (RQ27, RD22)
  MOV.L        RQ9, ds_xstep
// r_plane.c:151   ds_ystep = cachedystep[y] = FixedMul (distance,baseyscale);
  ADD          RD21, 0, RD10
  MOV.L        baseyscale, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          cachedystep, RQ27
  MOV.L        RQ8, (RQ27, RD22)
  MOV.L        RQ8, ds_ystep
  BSR          .L008026AF, R0

.L008026AE:
// r_plane.c:154   {
  MOV          cacheddistance, RQ27
  MOV.L        (RQ27, RD22), RD21
// r_plane.c:156   ds_xstep = cachedxstep[y];
  MOV          cachedxstep, RQ27
  MOV.L        (RQ27, RD22), RD26
  MOV.L        RD26, ds_xstep
// r_plane.c:157   ds_ystep = cachedystep[y];
  MOV          cachedystep, RQ27
  MOV.L        (RQ27, RD22), RD26
  MOV.L        RD26, ds_ystep

.L008026AF:
// r_plane.c:160   length = FixedMul (distance,distscale[x1]);
  MOV          distscale, RQ27
  MOV.L        (RQ27, RD20), RQ18
  ADD          RD21, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 108)
// r_plane.c:161   angle = (viewangle + xtoviewangle[x1])>>ANGLETOFINESHIFT;
  MOV          xtoviewangle, RQ27
  MOVU.L       (RQ27, RD20), RQ23
  MOVU.L       viewangle, RD27
  ADDU.L       RD27, RQ23, RQ9
  SHLR         RQ9, 19, RD27
// r_plane.c:162   angle &= (FINEANGLES-1);		//BGB: debug
  AND          RD27, 8191, RD27
// r_plane.c:163   ds_xfrac = viewx + FixedMul(finecosine[angle], length);
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD27), RQ8
  MOV.L        RD27, (R2, 112)
  ADDS.L       RQ8, 0, RD10
  MOV.L        (R2, 108), RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        viewx, RD25
  ADDS.L       RD25, RQ18, RD26
  MOV.L        RD26, ds_xfrac
// r_plane.c:164   ds_yfrac = -viewy - FixedMul(finesine[angle], length);
  MOV.L        viewy, RD26
  SUBS.L       R0, RD26, RQ23
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD27), RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        (R2, 108), RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  SUBS.L       RQ23, RQ8, RD26
  MOV.L        RD26, ds_yfrac
// r_plane.c:166   if (fixedcolormap)
  MOV.Q        fixedcolormap, RQ26
  BREQ.Q       R0, RQ26, .L008026B0
// r_plane.c:167   {
  MOV.Q        fixedcolormap, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, ds_colormap
  BSR          .L008026B1, R0

.L008026B0:
// r_plane.c:171   {
  SHAR         RD21, 20, RQ18
  ADDU.L       RQ18, R0, RD27
  MOV.L        RD27, (R2, 104)
  BRLTU.L      128, RD27, .L008026B2
// r_plane.c:175   index = MAXLIGHTZ-1;
  ADD          R0, 127, RD27
  MOV.L        RD27, (R2, 104)

.L008026B2:
// r_plane.c:177   ds_colormap = planezlight[index];
  MOV.Q        planezlight, RQ27
  MOVU.L       (R2, 104), RD26
  MOV.Q        (RQ27, RD26), RQ25
  MOV.Q        RQ25, ds_colormap

.L008026B1:
// r_plane.c:193   ds_color = 0xFFFFAAAA55551111ULL;
  ADD          R0, -21846, RQ26
  LDSH32       RQ26, 0x55551111, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, ds_color
// r_plane.c:196   ds_y = y;
  MOV.L        RD22, ds_y
// r_plane.c:197   ds_x1 = x1;
  MOV.L        RD20, ds_x1
// r_plane.c:198   ds_x2 = x2;
  MOV.L        (R2, 116), RD27
  ADD          RD27, 0, RD25
  MOV.L        RD25, ds_x2
// r_plane.c:199   ds_z = distance;
  MOV.L        RD21, ds_z
// r_plane.c:201   ds_colormap = R_ColormapRemapForBlend(ds_colormap);
  MOV.Q        ds_colormap, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, ds_colormap
// r_plane.c:204   spanfunc ();	
  MOV.Q        spanfunc, RQ25
  JSR          RQ25, 0, R1

.L00C0182B:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

exit:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// pdpc201/stdlib.c:357   
  ADD          RD18, 0, RD10
  BSR          __exit, R1
// pdpc201/stdlib.c:361   

.L00C01832:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

P_SetThingPosition:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
// p_maputl.c:410   ss = R_PointInSubsector (thing->x, thing->y);
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ22
// p_maputl.c:411   thing->subsector = ss;
  MOV.Q        RQ22, (RQ18, 88)
// p_maputl.c:413   if ( ! (thing->flags & MF_NOSECTOR) )
  MOV.L        (RQ18, 160), RQ9
  ADD          R0, 8, RD27
  BTSTN.L      RD27, RQ9, .L00801DDF
// p_maputl.c:416   sec = ss->sector;
  MOV.Q        (RQ22, 0), RQ21
// p_maputl.c:418   thing->sprev = NULL;
  MOV.Q        RQ0, (RQ18, 48)
// p_maputl.c:419   thing->snext = sec->thinglist;
  MOV.Q        (RQ21, 96), RQ23
  MOV.Q        RQ23, (RQ18, 40)
  BREQ.Q       R0, RQ23, .L00801DE0
// p_maputl.c:422   sec->thinglist->sprev = thing;
  MOV.Q        (RQ21, 96), RQ23
  MOV.Q        RQ18, (RQ23, 48)

.L00801DE0:
// p_maputl.c:424   sec->thinglist = thing;
  MOV.Q        RQ18, (RQ21, 96)

.L00801DDF:
// p_maputl.c:429   if ( ! (thing->flags & MF_NOBLOCKMAP) )
  MOV.L        (RQ18, 160), RQ9
  ADD          R0, 16, RD27
  BTSTN.L      RD27, RQ9, .L00801DE1
// p_maputl.c:432   blockx = (thing->x - bmaporgx)>>MAPBLOCKSHIFT;
  MOV.L        (RQ18, 24), RQ8
  MOV.L        bmaporgx, RD27
  SUBS.L       RQ8, RD27, RQ9
  SHAR         RQ9, 23, RD27
// p_maputl.c:433   blocky = (thing->y - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.L        (RQ18, 28), RQ8
  MOV.L        bmaporgy, RD13
  SUBS.L       RQ8, RD13, RQ9
  SHAR         RQ9, 23, RD13
  CMPGE.Q      RD27, R0, RQ8
  MOV.L        bmapwidth, RD12
  CMPGT.Q      RD12, RD27, RQ9
  MOV.L        RD27, (R2, 116)
  AND          RQ8, RQ9, RQ20
  CMPGE.Q      RD13, R0, RQ9
  AND          RQ20, RQ9, RQ8
  MOV.L        bmapheight, RD12
  CMPGT.Q      RD12, RD13, RQ20
  MOV.L        RD13, (R2, 112)
  BTST.L       RQ20, RQ8, .L00801DE2
// p_maputl.c:439   {
  MOV.L        (R2, 112), RD27
  MOV.L        bmapwidth, RD13
  MULS.L       RD27, RD13, RQ9
  MOV.L        (R2, 116), RD13
  ADDS.L       RQ9, RD13, RQ8
  MOV.Q        blocklinks, RQ12
  LEA.Q        RQ12, RQ8, RQ11
// p_maputl.c:441   thing->bprev = NULL;
  MOV.Q        RQ0, (RQ18, 80)
// p_maputl.c:442   thing->bnext = *link;
  MOV.Q        (RQ11, 0), RQ23
  MOV.Q        RQ11, (R2, 104)
  MOV.Q        RQ23, (RQ18, 72)
  BREQ.Q       R0, RQ23, .L00801DE3
// p_maputl.c:444   (*link)->bprev = thing;
  MOV.Q        (R2, 104), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.Q        RQ18, (RQ23, 80)

.L00801DE3:
// p_maputl.c:446   *link = thing;
  MOV.Q        (R2, 104), RQ27
  MOV.Q        RQ18, (RQ27, 0)
  BSR          .L00801DE4, R0

.L00801DE2:
// p_maputl.c:451   thing->bnext = thing->bprev = NULL;
  MOV.Q        RQ0, (RQ18, 80)
  MOV.Q        RQ0, (RQ18, 72)

.L00801DE4:

.L00801DE1:

.L00C01838:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_readdir:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1526   
  BREQ.Q       R0, RQ9, .L00800BBF
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800BBF
  BSR          .L00800BC0, R0

.L00800BBF:
// tk_core/tk_vfile.c:1528   

tk_readdir.debugbreak_L0282:
  BRK          642

.L00800BC0:
// tk_core/tk_vfile.c:1530   
  MOV.L        (RQ9, 92), RQ22
  BREQ.Q       RD21, RQ22, .L00800BC1
// tk_core/tk_vfile.c:1531   

tk_readdir.debugbreak_L0283:
  BRK          643

.L00800BC1:
// tk_core/tk_vfile.c:1533   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 152), RQ8
  BREQ.Q       R0, RQ8, .L00800BC2
// tk_core/tk_vfile.c:1534   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 152), RQ23
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ29
  JSR          RQ23, 0, R1
  BSR          .L00C01848, R0

.L00800BC2:
// tk_core/tk_vfile.c:1535   
  ADD          RQ0, 0, RQ10

.L00C01848:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

TKMM_LVA_UnwrapBigIntPv:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ22
  ADD          R0, 2, RQ20
// tk_core/lva_tagopr.c:235   
  SHLR.Q       RQ22, 62, RQ23
  BRNE.Q       1, RQ23, .L00800E23
// tk_core/lva_tagopr.c:236   
  SHLD.Q       RQ22, 2, RQ8
// tk_core/lva_tagopr.c:238   
  SHAR.Q       RQ8, 2, RQ8
// tk_core/lva_tagopr.c:239   
  SHAR.Q       RQ8, 63, RQ9
// tk_core/lva_tagopr.c:240   
  MOV.Q        RQ8, (RQ18, 0)
// tk_core/lva_tagopr.c:241   
  MOV.Q        RQ9, (RQ18, 8)
// tk_core/lva_tagopr.c:242   
  MOV.Q        RQ9, (RQ18, 16)
// tk_core/lva_tagopr.c:243   
  MOV.Q        RQ9, (RQ18, 24)
// tk_core/lva_tagopr.c:244   
  MOV.Q        RQ9, (RQ18, 32)
// tk_core/lva_tagopr.c:245   
  MOV.Q        RQ9, (RQ18, 40)
// tk_core/lva_tagopr.c:246   
  BSR          .L00C01850, R0

.L00800E23:
// tk_core/lva_tagopr.c:249   
  SHLR.Q       RQ22, 48, RQ23
  ADDS.L       RQ23, 0, RD21
// tk_core/lva_tagopr.c:250   
  BRNE.Q       24, RD21, .L00800E24
// tk_core/lva_tagopr.c:251   
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        RQ10, (RQ18, 0)
  MOV.Q        RQ11, (RQ18, 8)
  MOV.Q        (RQ22, 24), RQ10
  MOV.Q        (RQ22, 32), RQ11
  MOV.Q        RQ12, (RQ18, 16)
  MOV.Q        (RQ22, 40), RQ12
  MOV.Q        RQ10, (RQ18, 24)
  MOV.Q        RQ11, (RQ18, 32)
  MOV.Q        RQ12, (RQ18, 40)
// tk_core/lva_tagopr.c:253   
  BSR          .L00C01850, R0

.L00800E24:
// tk_core/lva_tagopr.c:256   

.L00C01850:
  ADD          R2, 328, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

TKMM_MMList_GetPtrLnkObj:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 120)
// tk_core/tk_mmllist.c:832   
  MOV.Q        (R2, 120), RQ10
  BSR          TKMM_MMList_GetPtrHeapIndex, R1
  ADD          RQ10, 0, RD27
// tk_core/tk_mmllist.c:833   
  MOV.L        RD27, (R2, 100)
  BRGE.L       R0, RD27, .L00800A58
// tk_core/tk_mmllist.c:834   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01856, R0

.L00800A58:
// tk_core/tk_mmllist.c:836   
  MOV          tkmm_mmlist_vrm_brkflg, RQ27
  MOV.L        (R2, 100), RD26
  MOV.L        (RQ27, RD26), RD23
// tk_core/tk_mmllist.c:837   
  ADD          R0, 1, RD27
  BTST.L       RD27, RD23, .L00800A59
// tk_core/tk_mmllist.c:838   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ27
  MOV.L        (R2, 100), RD26
  MOV.Q        (RQ27, RD26), RQ18
  ADD          RQ18, 0, RQ8
// tk_core/tk_mmllist.c:840   
  ADD          RQ8, 0, RQ10
  BSR          .L00C01856, R0

.L00800A59:
// tk_core/tk_mmllist.c:843   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ27
  MOV.L        (R2, 100), RD26
  MOV.Q        (RQ27, RD26), RQ18
  ADD          RQ18, 0, RQ21
// tk_core/tk_mmllist.c:844   
  MOV.Q        (R2, 120), RQ20
// tk_core/tk_mmllist.c:846   
  MOV.L        (RQ21, 0x1010), RD27
// tk_core/tk_mmllist.c:847   
  ADD          R0, 0, RD23
  MOV.L        RD27, (R2, 96)
  BRGE.L       RD27, RD23, .L00800A5A

.L00800A5B:
// tk_core/tk_mmllist.c:850   
  ADD          RQ21, 0, RQ18
  MOV.L        (RQ18, RD23), RQ9
  ADD          RQ21, RQ9, RQ18
  ADD          RQ18, 0, RQ8
// tk_core/tk_mmllist.c:851   
  MOVU.B       (RQ8, 6), RQ9
  AND          RQ9, 255, RD10
  BSR          TKMM_FxiToSize, R1
  ADD          RQ10, 0, RD22
// tk_core/tk_mmllist.c:852   
  ADD          RQ8, 0, RQ27
// tk_core/tk_mmllist.c:853   
  ADD          RQ8, 16, RQ18
  ADD          RQ18, RD22, RQ26
// tk_core/tk_mmllist.c:855   
  CMPGE.Q      RQ20, RQ27, RQ9
  MOV.Q        RQ27, (R2, 112)
  CMPGT.Q      RQ26, RQ20, RQ25
  MOV.Q        RQ26, (R2, 104)
  BTST.L       RQ25, RQ9, .L00800A5C
// tk_core/tk_mmllist.c:856   
  ADD          RQ8, 0, RQ10
  BSR          .L00C01856, R0

.L00800A5C:
  ADDS.L       RD23, 1, RD23
  MOV.L        (R2, 96), RD27
  BRLT.L       RD27, RD23, .L00800A5B

.L00800A5A:
// tk_core/tk_mmllist.c:859   
  ADD          RQ0, 0, RQ10

.L00C01856:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

tk_sprint_decimal_n:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -568, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 36)
  MOV.L        RD12, (R2, 32)
  ADD          R2, 48, RQ6
  MOV.Q        RQ6, (R2, 24)
// pdpc201/btshx_supa.c:1752   
// pdpc201/btshx_supa.c:1757   
  MOV.L        (R2, 36), RD9
  MOV.L        RD0, (R2, 20)
// pdpc201/btshx_supa.c:1758   
  BRGE.L       R0, RD9, .L00800FED
// pdpc201/btshx_supa.c:1759   
  SUBS.L       R0, RD9, RD9
  ADD          R0, 1, RQ6
  MOV.L        RD6, (R2, 20)

.L00800FED:
// pdpc201/btshx_supa.c:1761   
  ADD          R2, 48, RQ18
  MOV.L        (R2, 32), RD22
// pdpc201/btshx_supa.c:1762   
  BSR          .L00800FEE, R0

.L00800FEF:
// pdpc201/btshx_supa.c:1763   
  ADD          RD9, 0, RD20
  ADD          R0, 10, RD13
  MODS.L       RD20, RD13, RD20
// pdpc201/btshx_supa.c:1765   
  ADDS.L       RD20, 48, RQ23
  ADD          RQ18, 0, RQ8
  ADD          RQ18, 1, RQ18
  MOV.B        RQ23, (RQ8, 0)
// pdpc201/btshx_supa.c:1766   
  DIVS.L       RD9, RD13, RD9
// pdpc201/btshx_supa.c:1767   
  ADDS.L       RD22, -1, RD22

.L00800FEE:
  BRGT.L       R0, RD22, .L00800FEF

.L00800FF0:
// pdpc201/btshx_supa.c:1772   
  BSR          .L00800FF1, R0

.L00800FF2:
// pdpc201/btshx_supa.c:1773   
  ADD          RQ18, -1, RQ18
  MOV.B        (RQ18, 0), RQ23
  ADD          RQ21, 0, RQ8
  ADD          RQ21, 1, RQ21
  MOV.B        RQ23, (RQ8, 0)

.L00800FF1:
  ADD          R2, 48, RQ13
  BRGT.Q       RQ13, RQ18, .L00800FF2

.L00800FF3:
  ADD          RQ21, 0, RQ10

.L00C0185C:
  ADD          R2, 568, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

STlib_initMultIcon:
// st_lib.c:206   {
  MOV.L        RD11, (RQ10, 0)
// st_lib.c:208   i->y	= y;
  MOV.L        RD12, (RQ10, 4)
// st_lib.c:209   i->oldinum 	= -1;
  ADD          R0, -1, RD17
  MOV.L        RD17, (RQ10, 8)
// st_lib.c:210   i->inum	= inum;
  MOV.Q        RQ14, (RQ10, 16)
// st_lib.c:211   i->on	= on;
  MOV.Q        RQ15, (RQ10, 24)
// st_lib.c:212   i->p	= il;
  MOV.Q        RQ13, (RQ10, 32)

.L00C0185D:
  JSR          R1, 0, R0
  .balign 4

_toupper_gen:
// pdpc201/ctype.c:456   
  BRGT.L       127, RD10, .L00800860
  ADD          R0, 97, R5
  CMPGE.Q      RD10, R5, RQ13
  ADD          R0, 122, R5
  CMPLE.Q      RD10, R5, RQ12
  BTST.L       RQ12, RQ13, .L00800861
// pdpc201/ctype.c:460   
  ADDS.L       RD10, -32, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L00800861:
// pdpc201/ctype.c:461   
  JSR          R1, 0, R0

.L00800860:
// pdpc201/ctype.c:464   
  ADD          R0, 224, R5
  CMPGE.Q      RD10, R5, RQ12
  ADD          R0, 246, R5
  CMPLE.Q      RD10, R5, RQ13
  BTST.L       RQ13, RQ12, .L00800862
// pdpc201/ctype.c:465   
  ADDS.L       RD10, -32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L00800862:
// pdpc201/ctype.c:469   
  ADD          R0, 248, R5
  CMPGE.Q      RD10, R5, RQ13
  ADD          R0, 254, R5
  CMPLE.Q      RD10, R5, RQ12
  BTST.L       RQ12, RQ13, .L00800863
// pdpc201/ctype.c:470   
  ADDS.L       RD10, 32, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L00800863:
// pdpc201/ctype.c:475   
  MOV.L        locale_flags, RD11
  ADD          R0, 2, RD17
  BTST.L       RD17, RD11, .L00800864
  BRNE.Q       154, RD10, .L00800865
// pdpc201/ctype.c:478   
  ADD          R0, 138, RD10
  JSR          R1, 0, R0

.L00800865:
  BRNE.Q       156, RD10, .L00800866
// pdpc201/ctype.c:480   
  ADD          R0, 140, RD10
  JSR          R1, 0, R0

.L00800866:
  BRNE.Q       158, RD10, .L00800867
// pdpc201/ctype.c:482   
  ADD          R0, 142, RD10
  JSR          R1, 0, R0

.L00800867:
  BRNE.Q       255, RD10, .L00800868
// pdpc201/ctype.c:484   
  ADD          R0, 159, RD10
  JSR          R1, 0, R0

.L00800868:

.L00800864:
// pdpc201/ctype.c:487   
  BRNE.Q       255, RD10, .L00800869
// pdpc201/ctype.c:488   
  ADD          R0, 376, RD10
  JSR          R1, 0, R0

.L00800869:
// pdpc201/ctype.c:490   
  ADD          R0, 945, R5
  CMPGE.Q      RD10, R5, RQ12
  ADD          R0, 970, R5
  CMPLE.Q      RD10, R5, RQ13
  BTST.L       RQ13, RQ12, .L0080086A
// pdpc201/ctype.c:491   
  ADDS.L       RD10, -32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L0080086A:
// pdpc201/ctype.c:493   
  ADD          R0, 1104, RD11
  CMPGE.Q      RD10, RD11, RQ13
  ADD          R0, 1119, RD17
  CMPGE.Q      RD17, RD10, RQ12
  BTST.L       RQ12, RQ13, .L0080086B
// pdpc201/ctype.c:494   
  ADDS.L       RD10, -80, RQ13
  ADDS.L       RQ13, 0, RD10
  JSR          R1, 0, R0

.L0080086B:
// pdpc201/ctype.c:495   
  ADD          R0, 1072, RD11
  CMPGE.Q      RD10, RD11, RQ12
  ADD          R0, 1103, RD17
  CMPGE.Q      RD17, RD10, RQ13
  BTST.L       RQ13, RQ12, .L0080086C
// pdpc201/ctype.c:496   
  ADDS.L       RD10, -32, RQ12
  ADDS.L       RQ12, 0, RD10
  JSR          R1, 0, R0

.L0080086C:
// pdpc201/ctype.c:498   

.L00C0185E:
  JSR          R1, 0, R0
  .balign 4

M_StartMessage:
// m_menu.c:1288   {
  MOV.L        menuactive, RD13
  ADD          RD13, 0, RD17
// m_menu.c:1290   messageToPrint = 1;
  ADD          R0, 1, RD16
  ADD          RD16, 0, RD15
// m_menu.c:1291   messageString = string;
  ADD          RQ10, 0, RQ14
// m_menu.c:1292   messageRoutine = routine;
  ADD          RQ11, 0, RQ31
// m_menu.c:1293   messageNeedsInput = input;
  ADD          RD12, 0, RD30
// m_menu.c:1294   menuactive = true;
  ADD          RD16, 0, RD13
// m_menu.c:1295   return;
  MOV.L        RD13, menuactive
  MOV.L        RD17, messageLastMenuActive
  MOV.L        RD15, messageToPrint
  MOV.Q        RQ14, messageString
  MOV.Q        RQ31, messageRoutine
  MOV.L        RD30, messageNeedsInput

.L00C0185F:
  JSR          R1, 0, R0
  .balign 4

STlib_initNum:
// st_lib.c:79   {
  MOV.L        RD11, (RQ10, 0)
// st_lib.c:81   n->y	= y;
  MOV.L        RD12, (RQ10, 4)
// st_lib.c:82   n->oldnum	= 0;
  MOV.L        RD0, (RQ10, 12)
// st_lib.c:83   n->width	= width;
  MOV.L        RD16, (RQ10, 8)
// st_lib.c:84   n->num	= num;
  MOV.Q        RQ14, (RQ10, 16)
// st_lib.c:85   n->on	= on;
  MOV.Q        RQ15, (RQ10, 24)
// st_lib.c:86   n->p	= pl;
  MOV.Q        RQ13, (RQ10, 32)

.L00C01860:
  JSR          R1, 0, R0

P_SpawnPlayer:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ22
// p_mobj.c:693   if (!playeringame[mthing->type-1])
  MOV.W        (RQ22, 10), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RQ8), RQ18
  BREQ.L       R0, RQ18, .L00C01866
// p_mobj.c:696   p = &players[mthing->type-1];
  MOV.W        (RQ22, 10), RQ8
  ADDS.L       RQ8, -1, RQ18
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RQ18, R5, RQ9
  ADD          RQ27, RQ9, RQ9
// p_mobj.c:698   if (p->playerstate == PST_REBORN)
  MOV.L        (RQ9, 8), RQ8
  BRNE.Q       2, RQ8, .L008022AF
// p_mobj.c:699   G_PlayerReborn (mthing->type-1);
  MOV.W        (RQ22, 10), RQ18
  ADDS.L       RQ18, -1, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          G_PlayerReborn, R1

.L008022AF:
// p_mobj.c:701   x 		= mthing->x << FRACBITS;
  MOV.W        (RQ22, 2), RQ18
  SHAD.L       RQ18, 16, RD27
  MOV.L        RD27, (R2, 116)
// p_mobj.c:702   y 		= mthing->y << FRACBITS;
  MOV.W        (RQ22, 4), RQ8
  SHAD.L       RQ8, 16, RD26
  MOV.L        RD26, (R2, 112)
// p_mobj.c:703   z		= ONFLOORZ;
  LUI          0xFFFFFFFFFFF80000, RD25
  MOV.L        RD25, (R2, 108)
// p_mobj.c:704   mobj	= P_SpawnMobj (x,y,z, MT_PLAYER);
  ADD          RD27, 0, RD10
  ADD          RD26, 0, RD11
  ADD          RD25, 0, RD12
  ADD          R0, 0, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ21
// p_mobj.c:707   if (mthing->type > 1)		
  MOV.W        (RQ22, 10), RQ18
  BRLE.L       1, RQ18, .L008022B0
// p_mobj.c:708   mobj->flags |= (mthing->type-1)<<MF_TRANSSHIFT;
  MOV.L        (RQ21, 160), RQ8
  MOV.W        (RQ22, 10), RQ18
  ADDS.L       RQ18, -1, RQ20
  SHAD.L       RQ20, 26, RQ18
  OR           RQ8, RQ18, RQ20
  MOV.L        RQ20, (RQ21, 160)

.L008022B0:
// p_mobj.c:710   mobj->angle	= ANG45 * (mthing->angle/45);
  MOV.W        (RQ22, 8), RQ18
  ADD          R0, 45, R5
  DIVS.L       RQ18, R5, RQ8
  SHAD.L       RQ8, 29, RQ20
  MOVU.L       RQ20, (RQ21, 56)
// p_mobj.c:711   mobj->player = p;
  MOV.Q        RQ9, (RQ21, 192)
// p_mobj.c:712   mobj->health = p->health;
  MOV.L        (RQ9, 36), RQ18
  MOV.L        RQ18, (RQ21, 164)
// p_mobj.c:714   p->mo = mobj;
  MOV.Q        RQ21, (RQ9, 0)
// p_mobj.c:715   p->playerstate = PST_LIVE;	
  MOV.L        RD0, (RQ9, 8)
// p_mobj.c:716   p->refire = 0;
  MOV.L        RD0, (RQ9, 204)
// p_mobj.c:717   p->message = NULL;
  MOV.Q        RQ0, (RQ9, 224)
// p_mobj.c:718   p->damagecount = 0;
  MOV.L        RD0, (RQ9, 232)
// p_mobj.c:719   p->bonuscount = 0;
  MOV.L        RD0, (RQ9, 236)
// p_mobj.c:720   p->extralight = 0;
  MOV.L        RD0, (RQ9, 248)
// p_mobj.c:721   p->fixedcolormap = 0;
  MOV.L        RD0, (RQ9, 252)
// p_mobj.c:722   p->viewheight = VIEWHEIGHT;
  LUI          656, RD27
  MOV.L        RD27, (RQ9, 24)
// p_mobj.c:725   P_SetupPsprites (p);
  ADD          RQ9, 0, RQ10
  BSR          P_SetupPsprites, R1
// p_mobj.c:728   if (deathmatch)
  MOV.L        deathmatch, RD26
  BREQ.L       R0, RD26, .L008022B1
// p_mobj.c:729   {
  ADD          R0, 0, RD23

.L008022B2:
// p_mobj.c:731   p->cards[i] = true;
  ADD          RQ9, 72, RQ27
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ27, RD23)
  ADDS.L       RD23, 1, RD23
  BRLT.L       6, RD23, .L008022B2

.L008022B4:

.L008022B1:
// p_mobj.c:734   if (mthing->type-1 == consoleplayer)
  MOV.W        (RQ22, 10), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV.L        consoleplayer, RD27
  BRNE.Q       RD27, RQ8, .L008022B5
// p_mobj.c:737   ST_Start ();
  BSR          ST_Start, R1
// p_mobj.c:739   HU_Start ();		
  BSR          HU_Start, R1

.L008022B5:

.L00C01866:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

tkgPollEvent:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
  MOV.Q        RQ11, (R2, 80)
  ADD          R0, 0x6C6C6F70, RD8
// tk_gdi/tkg_display.c:215   
  ADDS.L       RD9, 0, RD10
  ADD          R0, 0x6C6C6F70, RD11
  ADD          RQ0, 0, RQ12
  MOV.Q        (R2, 80), RQ13
  BSR          tkgQueryDisplay, R1

.L00C0186C:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

__sigdfl:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
  ADD          R0, 1, RD8
// pdpc201/signal.c:49   
  MOV          __sigdfl, RQ18
  MOV          handlers, RQ13
  MOV.Q        RQ18, (RQ13, RD9)
// pdpc201/signal.c:51   
  BRNE.Q       1, RD9, .L0080082A
// pdpc201/signal.c:52   
  ADD          R0, 1, RD10
  BSR          exit, R1

.L0080082A:
// pdpc201/signal.c:54   

.L00C01872:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TKMM_MMList_Malloc:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 92)
// tk_core/tk_mmllist.c:694   
  ADD          RD0, 0, RD23
// tk_core/tk_mmllist.c:695   
  BSR          tk_iskernel, R1
  SHAD.Q       RQ10, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  BREQ.L       R0, RQ9, .L00800A48
// tk_core/tk_mmllist.c:696   
  ADD          R0, 2, RD23

.L00800A48:
// tk_core/tk_mmllist.c:698   
  MOV.L        (R2, 92), RD10
  ADD          R0, 0, RD11
  BSR          TKMM_MMList_AllocObjCat, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmllist.c:699   
  ADD          RQ18, 16, RQ21
  ADD          RQ21, 0, RQ8
// tk_core/tk_mmllist.c:700   
  ADD          R0, 3, RD20
// tk_core/tk_mmllist.c:702   
  BRNE.Q       RQ8, RQ18, .L00800A49
// tk_core/tk_mmllist.c:703   

TKMM_MMList_Malloc.debugbreak_L0289:
  BRK          649

.L00800A49:
// tk_core/tk_mmllist.c:705   
  ADD          RQ8, 0, RQ10

.L00C0187D:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

vfprintf:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -576, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ22
  MOV.Q        RQ12, (R2, 104)
// pdpc201/stdio.c:280   
  ADD          RQ9, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:282   
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ23
  BRNE.Q       RQ23, RQ9, .L008002D4
// pdpc201/stdio.c:283   
  ADD          RQ22, 0, RQ10
  MOV.Q        (R2, 104), RQ11
  BSR          vprintf, R1
  ADD          RQ10, 0, RD18
  BSR          .L008002D5, R0

.L008002D4:
// pdpc201/stdio.c:287   
  MOV.B        RD0, (RQ9, 9)
// pdpc201/stdio.c:289   
  ADD          RQ22, 0, RQ10
  MOV.Q        (R2, 104), RQ11
  ADD          RQ9, 0, RQ12
  ADD          RQ0, 0, RQ13
  ADD          R0, 0x05F5E0FF, RD14
  BSR          vvprintf, R1
  ADD          RQ10, 0, RD18

.L008002D5:
// pdpc201/stdio.c:292   
  ADD          RD18, 0, RD10

.L00C01884:
  ADD          R2, 576, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

P_FindMinSurroundingLight:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 100)
// p_spec.c:477   min = max;
  MOV.L        (R2, 100), RD22
// p_spec.c:478   for (i=0 ; i < sector->linecount ; i++)
  ADD          R0, 0, RD9
  MOV.L        (RQ23, 112), RQ8
  BRGE.L       RQ8, RD9, .L008020AB

.L008020A9:
// p_spec.c:479   {
  MOV.Q        (RQ23, 120), RQ21
  MOV.Q        (RQ21, RD9), RQ20
  MOV.Q        RQ20, (R2, 88)
// p_spec.c:481   check = getNextSector(line,sector);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:483   if (!check)
  BREQ.Q       R0, RQ18, .L008020AA
// p_spec.c:486   if (check->lightlevel < min)
  MOV.W        (RQ18, 12), RQ8
  BRGE.L       RD22, RQ8, .L008020AC
// p_spec.c:487   min = check->lightlevel;
  MOV.W        (RQ18, 12), RD22

.L008020AC:

.L008020AA:
  ADDS.L       RD9, 1, RD9
  MOV.L        (RQ23, 112), RQ8
  BRLT.L       RQ8, RD9, .L008020A9

.L008020AB:
// p_spec.c:488   }
  ADD          RD22, 0, RD10

.L00C0188A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

F_DrawPatchCol:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.L        RD10, (R2, 60)
  MOV.Q        RQ11, (R2, 48)
  MOV.L        RD12, (R2, 44)
// f_finale.c:648   column = (column_t *)((byte *)patch + LONG(patch->columnofs[col]));
  MOV.Q        (R2, 48), RQ13
  ADD          RQ13, 8, RQ12
  MOV.L        (R2, 44), RD11
  MOV.L        (RQ12, RD11), RQ18
  ADD          RQ13, RQ18, RQ12
  ADD          RQ12, 0, RQ22
// f_finale.c:649   desttop = screens[0]+x;
  MOV          screens, RQ10
  MOV.Q        (RQ10, 0), RQ12
  MOV.L        (R2, 60), RD10
  LEA.W        RQ12, RD10, RQ17
  MOV.Q        RQ17, (R2, 32)
// f_finale.c:652   while (column->topdelta != 0xff )
  BSR          .L0080131A, R0

.L00801318:
// f_finale.c:653   {
  ADD          RQ22, 3, RQ21
// f_finale.c:655   dest = desttop + column->topdelta*SCREENWIDTH;
  MOVU.B       (RQ22, 0), RQ18
  ADD          R0, 320, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        (R2, 32), RQ13
  LEA.W        RQ13, RQ9, RQ8
// f_finale.c:656   count = column->length;
  MOVU.B       (RQ22, 1), RD23
// f_finale.c:658   while (count--)
  BSR          .L0080131D, R0

.L0080131B:
// f_finale.c:661   *dest = colormaps[*source++];
  MOVU.B       (RQ21, 0), RQ18
  ADD          RQ21, 1, RQ21
  MOV.Q        colormaps, RQ13
  MOVU.W       (RQ13, RQ18), RQ9
  MOVU.W       RQ9, (RQ8, 0)
// f_finale.c:662   dest += SCREENWIDTH;
  ADD          RQ8, 640, RQ8

.L0080131D:
  ADD          RD23, 0, RQ18
  ADDS.L       RD23, -1, RD23
  BRNE.L       R0, RQ18, .L0080131B

.L0080131C:
// f_finale.c:663   }
  MOVU.B       (RQ22, 1), RQ9
  ADD          RQ22, RQ9, RQ13
  ADD          RQ13, 4, RQ20
  ADD          RQ20, 0, RQ22

.L0080131A:
  MOVU.B       (RQ22, 0), RQ18
  BRNE.Q       255, RQ18, .L00801318

.L00801319:

.L00C01890:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

P_ExplodeMissile:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
// p_mobj.c:110   {
  MOV.L        RD0, (RQ18, 120)
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)
// p_mobj.c:113   P_SetMobjState (mo, mobjinfo[mo->type].deathstate);
  MOV.L        (RQ18, 128), RQ9
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 48), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          P_SetMobjState, R1
// p_mobj.c:115   mo->tics -= P_Random()&3;
  MOV.L        (RQ18, 144), RQ9
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ8
  AND          RQ8, 3, RQ23
  SUBS.L       RQ9, RQ23, RQ8
  MOV.L        RQ8, (RQ18, 144)
// p_mobj.c:117   if (mo->tics < 1)
  MOV.L        (RQ18, 144), RQ23
  BRGE.L       1, RQ23, .L00802242
// p_mobj.c:118   mo->tics = 1;
  ADD          R0, 1, RD22
  MOV.L        RD22, (RQ18, 144)

.L00802242:
// p_mobj.c:120   mo->flags &= ~MF_MISSILE;
  MOV.L        (RQ18, 160), RQ9
  AND          RQ9, 0xFFFFFFFFFFFEFFFF, RQ8
  MOV.L        RQ8, (RQ18, 160)
// p_mobj.c:122   if (mo->info->deathsound)
  MOV.Q        (RQ18, 136), RQ22
  MOV.L        (RQ22, 56), RQ9
  BREQ.L       R0, RQ9, .L00802243
// p_mobj.c:123   S_StartSound (mo, mo->info->deathsound);
  MOV.Q        (RQ18, 136), RQ22
  MOV.L        (RQ22, 56), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          S_StartSound, R1

.L00802243:

.L00C01896:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_FindHighestCeilingSurrounding:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
// p_spec.c:423   fixed_t	height = 0;
  ADD          RD0, 0, RD22
// p_spec.c:425   for (i=0 ;i < sec->linecount ; i++)
  ADD          R0, 0, RD9
  MOV.L        (RQ23, 112), RQ8
  BRGE.L       RQ8, RD9, .L008020A2

.L008020A0:
// p_spec.c:426   {
  MOV.Q        (RQ23, 120), RQ21
  MOV.Q        (RQ21, RD9), RQ20
  MOV.Q        RQ20, (R2, 80)
// p_spec.c:428   other = getNextSector(check,sec);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:430   if (!other)
  BREQ.Q       R0, RQ18, .L008020A1
// p_spec.c:433   if (other->ceilingheight > height)
  MOV.L        (RQ18, 4), RQ8
  BRLE.L       RD22, RQ8, .L008020A3
// p_spec.c:434   height = other->ceilingheight;
  MOV.L        (RQ18, 4), RD22

.L008020A3:

.L008020A1:
  ADDS.L       RD9, 1, RD9
  MOV.L        (RQ23, 112), RQ8
  BRLT.L       RQ8, RD9, .L008020A0

.L008020A2:
// p_spec.c:435   }
  ADD          RD22, 0, RD10

.L00C0189C:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

A_ReFire:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:352   if ( (player->cmd.buttons & BT_ATTACK) 
  ADD          RQ9, 12, RQ8
  MOVU.B       (RQ8, 7), RQ18
  ADD          R0, 1, RD13
  BTST.L       RD13, RQ18, .L00801EA5
  MOV.L        (RQ9, 120), RQ18
  BRNE.Q       10, RQ18, .L00801EA5

.L00801EA7:
  MOV.L        (RQ9, 36), RQ18
  BREQ.L       R0, RQ18, .L00801EA5

.L00801EA6:
// p_pspr.c:355   {
  MOV.L        (RQ9, 204), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ9, 204)
// p_pspr.c:357   P_FireWeapon (player);
  ADD          RQ9, 0, RQ10
  BSR          P_FireWeapon, R1
  BSR          .L00801EA9, R0

.L00801EA5:
// p_pspr.c:360   {
  MOV.L        RD0, (RQ9, 204)
// p_pspr.c:362   P_CheckAmmo (player);
  ADD          RQ9, 0, RQ10
  BSR          P_CheckAmmo, R1

.L00801EA9:

.L00C018A2:
  ADD          R2, 384, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

G_CheckDemoStatus:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R27, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// g_game.c:1682   if (timingdemo)
  MOV.L        timingdemo, RD21
  BREQ.L       R0, RD21, .L00801622
// g_game.c:1683   {
  BSR          I_GetTime, R1
  ADDS.L       RQ10, 0, RD9
// g_game.c:1685   I_Error ("timed %i gametics in %i realtics",gametic
  MOV.L        starttime, RD21
  SUBS.L       RD9, RD21, RQ18
  MOV          .L00C018A9, RQ10
  MOV.L        gametic, RD11
  ADD          RQ18, 0, RD12
  BSR          I_Error, R1

.L00801622:
// g_game.c:1689   if (demoplayback)
  MOV.L        demoplayback, RD21
  BREQ.L       R0, RD21, .L00801623
  MOV.L        singledemo, RD21
  BREQ.L       R0, RD21, .L00801624
// g_game.c:1692   I_Quit ();
  BSR          I_Quit, R1

.L00801624:
// g_game.c:1694   Z_ChangeTag (demobuffer, PU_CACHE);
  MOV.Q        demobuffer, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  MOV.L        RD0, demoplayback
// g_game.c:1696   netdemo = false;
  MOV.L        RD0, netdemo
// g_game.c:1697   netgame = false;
  MOV.L        RD0, netgame
// g_game.c:1698   deathmatch = false;
  MOV.L        RD0, deathmatch
// g_game.c:1699   playeringame[1] = playeringame[2] = playeringame[3] = 0;
  MOV          playeringame, RQ21
  MOV.L        RD0, (RQ21, 12)
  MOV.L        RD0, (RQ21, 8)
  MOV.L        RD0, (RQ21, 4)
// g_game.c:1700   respawnparm = false;
  MOV.L        RD0, respawnparm
// g_game.c:1701   fastparm = false;
  MOV.L        RD0, fastparm
// g_game.c:1702   nomonsters = false;
  MOV.L        RD0, nomonsters
// g_game.c:1703   consoleplayer = 0;
  MOV.L        RD0, consoleplayer
// g_game.c:1704   D_AdvanceDemo ();
  BSR          D_AdvanceDemo, R1
// g_game.c:1705   return true;
  ADD          R0, 1, RD10
  BSR          .L00C018A8, R0

.L00801623:
// g_game.c:1708   if (demorecording)
  MOV.L        demorecording, RD21
  BREQ.L       R0, RD21, .L00801625
// g_game.c:1709   {
  MOV.Q        demo_p, RQ21
  ADD          RQ21, 0, RQ8
  ADD          RQ21, 1, RQ21
  ADD          R0, 128, RD20
  MOVU.B       RD20, (RQ8, 0)
// g_game.c:1711   M_WriteFile (demoname, demobuffer, demo_p - demobuffer);
  MOV.Q        demobuffer, RQ27
  SUB          RQ21, RQ27, RQ23
  MOV.Q        RQ21, demo_p
  ADDS.L       RQ23, 0, RQ18
  MOV          demoname, RQ10
  MOV.Q        demobuffer, RQ11
  ADD          RQ18, 0, RD12
  BSR          M_WriteFile, R1
// g_game.c:1712   Z_Free (demobuffer);
  MOV.Q        demobuffer, RQ10
  BSR          Z_Free, R1
// g_game.c:1713   demorecording = false;
  MOV.L        RD0, demorecording
// g_game.c:1714   I_Error ("Demo %s recorded",demoname);
  MOV          .L00C018AA, RQ10
  MOV          demoname, RQ11
  BSR          I_Error, R1

.L00801625:
// g_game.c:1717   return false;
  ADD          R0, 0, RD10

.L00C018A8:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_YieldCurrentThread:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// tk_core/tk_irq.c:2087   
  ADD          RQ0, 0, RQ10
  BSR          TK_YieldCurrentThreadA, R1

.L00C018B0:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

HUlib_drawTextLine:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 100)
// hu_lib.c:112   x = l->x;
  MOV.L        (RQ8, 0), RD23
// hu_lib.c:113   for (i=0;i<l->len;i++)
  ADD          R0, 0, RD20
  MOV.L        (RQ8, 104), RQ18
  BRGE.L       RQ18, RD20, .L00802CE2

.L00802CE0:
// hu_lib.c:114   {
  ADD          RQ8, 20, RQ27
  MOV.B        (RQ27, RD20), RQ18
  ADD          RQ18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 255, RD22
// hu_lib.c:116   if (c != ' '
  BREQ.Q       32, RD22, .L00802CE3
  MOV.L        (RQ8, 16), RQ18
  BRLT.L       RQ18, RD22, .L00802CE3

.L00802CE5:
  BRGT.L       95, RD22, .L00802CE3

.L00802CE4:
// hu_lib.c:119   {
  MOV.Q        (RQ8, 8), RQ27
  MOV.L        (RQ8, 16), RQ9
  SUBS.L       RD22, RQ9, RQ18
  MOV.Q        (RQ27, RQ18), RQ21
  MOV.W        (RQ21, 0), RD26
  ADDS.L       RD23, RD26, RQ18
  MOV.L        RD26, (R2, 96)
  BRGT.L       320, RQ18, .L00802CE2
// hu_lib.c:123   V_DrawPatchDirect(x, l->y, FG, l->f[c - l->sc]);
  MOV.Q        (RQ8, 8), RQ27
  MOV.L        (RQ8, 16), RQ9
  SUBS.L       RD22, RQ9, RQ18
  MOV.Q        (RQ27, RQ18), RQ21
  MOV.L        (RQ8, 4), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatchDirect, R1
// hu_lib.c:124   x += w;
  MOV.L        (R2, 96), RD26
  ADDS.L       RD23, RD26, RD23
  BSR          .L00802CE7, R0

.L00802CE3:
// hu_lib.c:127   {
  ADDS.L       RD23, 4, RD23
  BRGE.L       320, RD23, .L00802CE2

.L00802CE7:
  ADDS.L       RD20, 1, RD20
  MOV.L        (RQ8, 104), RQ9
  BRLT.L       RQ9, RD20, .L00802CE0

.L00802CE2:
// hu_lib.c:135   if (drawcursor
  MOV.L        (R2, 100), RD27
  BREQ.L       R0, RD27, .L00802CE8
  MOV.Q        (RQ8, 8), RQ21
  MOV.L        (RQ8, 16), RQ18
  ADD          R0, 95, R5
  SUBS.L       R5, RQ18, RQ9
  MOV.Q        (RQ21, RQ9), RQ27
  MOV.W        (RQ27, 0), RQ9
  ADDS.L       RD23, RQ9, RQ18
  BRGT.L       320, RQ18, .L00802CE8

.L00802CE9:
// hu_lib.c:137   {
  MOV.Q        (RQ8, 8), RQ27
  MOV.L        (RQ8, 16), RQ9
  ADD          R0, 95, R5
  SUBS.L       R5, RQ9, RQ18
  MOV.Q        (RQ27, RQ18), RQ21
  MOV.L        (RQ8, 4), RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802CE8:

.L00C018B6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

tk_getch_v0:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -416, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_core/tk_puts.c:620   
// tk_core/tk_puts.c:635   
  ADD          RD0, 0, RD8
  MOV.L        RD8, (R2, 84)
// tk_core/tk_puts.c:636   
  ADD          R2, 96, RQ8
  ADD          RQ8, 0, RQ23
  MOV.L        RD0, (RQ23, 0)
// tk_core/tk_puts.c:637   
  ADD          R2, 84, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4105, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_puts.c:638   
  MOV.L        (R2, 84), RD10

.L00C018BC:
  ADD          R2, 416, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

D_ProcessEvents:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
// d_main.c:169   for ( ; eventtail != eventhead ; eventtail = (++eventtail)&(MAXEVENTS-1) )
  MOV.L        eventtail, RD8
  MOV.L        eventhead, RD23
  BREQ.Q       RD23, RD8, .L00801365

.L00801363:
// d_main.c:170   {
  MOV          events, RQ8
  MOV.L        eventtail, RD23
  SHAD.L       RD23, 4, RQ9
  ADD          RQ8, RQ9, RQ9
// d_main.c:172   if (M_Responder (ev))
  ADD          RQ9, 0, RQ10
  BSR          M_Responder, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00801364
// d_main.c:174   G_Responder (ev);
  ADD          RQ9, 0, RQ10
  BSR          G_Responder, R1

.L00801364:
  MOV.L        eventtail, RD8
  ADDS.L       RD8, 1, RD8
  AND          RD8, 63, RD8
  MOV.L        RD8, eventtail
  MOV.L        eventhead, RD23
  BRNE.Q       RD23, RD8, .L00801363

.L00801365:

.L00C018C2:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

tkgGlobalAlloc:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
// tk_gdi/tkg_display.c:68   
  ADDS.L       RQ8, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 7, RD11
  BSR          tk_malloc_cat, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:69   
  BRNE.Q       R0, RQ18, .L0080010C
// tk_gdi/tkg_display.c:70   

tkgGlobalAlloc.debugbreak_L028F:
  BRK          655

.L0080010C:
// tk_gdi/tkg_display.c:74   
  ADD          RQ18, 0, RQ10

.L00C018CD:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

EV_DoPlat:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 136)
  ADD          RD11, 0, RD20
  MOV.L        RD12, (R2, 128)
// p_plats.c:150   secnum = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 124)
// p_plats.c:151   rtn = 0;
  MOV.L        RD0, (R2, 120)
// p_plats.c:155   switch(type)
  BREQ.L       R0, RD20, .L00801E3A
  BSR          .L00801E3B, R0

.L00801E3A:
// p_plats.c:157   case perpetualRaise:
  MOV.Q        (R2, 136), RQ27
  MOV.W        (RQ27, 28), RQ22
  ADD          RQ22, 0, RD10
  BSR          P_ActivateInStasis, R1
// p_plats.c:159   break;
  BSR          .L00801E39, R0

.L00801E3B:
// p_plats.c:161   default:

.L00801E39:
// p_plats.c:165   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801E3E, R0

.L00801E3C:
// p_plats.c:166   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 124), RD26
  SHAD.L       RD26, 7, RQ8
  ADD          RQ27, RQ8, RQ8
// p_plats.c:169   if (sec->specialdata)
  MOV.Q        (RQ8, 104), RQ23
  BRNE.Q       R0, RQ23, .L00801E3E
// p_plats.c:173   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 120)
// p_plats.c:174   plat = Z_Malloc( sizeof(*plat), PU_LEVSPEC, 0);
  ADD          R0, 72, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_plats.c:175   P_AddThinker(&plat->thinker);
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_AddThinker, R1
// p_plats.c:177   plat->type = type;
  MOV.L        RD20, (RQ18, 68)
// p_plats.c:178   plat->sector = sec;
  MOV.Q        RQ8, (RQ18, 24)
// p_plats.c:179   plat->sector->specialdata = plat;
  MOV.Q        (RQ18, 24), RQ23
  MOV.Q        RQ18, (RQ23, 104)
// p_plats.c:180   plat->thinker.function.acp1 = (actionf_p1) T_PlatRaise;
  MOV          T_PlatRaise, RQ23
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ23, (RQ25, 0)
// p_plats.c:181   plat->crush = false;
  MOV.L        RD0, (RQ18, 60)
// p_plats.c:182   plat->tag = line->tag;
  MOV.Q        (R2, 136), RQ13
  MOV.W        (RQ13, 28), RQ22
  MOV.L        RQ22, (RQ18, 64)
// p_plats.c:184   switch(type)
  BREQ.Q       3, RD20, .L00801E40
  BREQ.Q       2, RD20, .L00801E41
  BREQ.Q       1, RD20, .L00801E42
  BREQ.Q       4, RD20, .L00801E43
  BREQ.L       R0, RD20, .L00801E44
  BSR          .L00801E3F, R0

.L00801E40:
// p_plats.c:186   case raiseToNearestAndChange:
  LUI          8, RD27
  MOV.L        RD27, (RQ18, 32)
// p_plats.c:188   sec->floorpic = sides[line->sidenum[0]].sector->floorpic;
  MOV.Q        (R2, 136), RQ26
  ADD          RQ26, 36, RQ23
  MOV.W        (RQ23, 0), RQ22
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ22, R5, RQ27
  ADD          RQ25, RQ27, RQ27
  MOV.Q        (RQ27, 16), RQ23
  MOV.W        (RQ23, 8), RQ22
  MOV.W        RQ22, (RQ8, 8)
// p_plats.c:189   plat->high = P_FindNextHighestFloor(sec,sec->floorheight);
  MOV.L        (RQ8, 0), RQ22
  ADD          RQ8, 0, RQ10
  ADD          RQ22, 0, RD11
  BSR          P_FindNextHighestFloor, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_plats.c:190   plat->wait = 0;
  MOV.L        RD0, (RQ18, 44)
// p_plats.c:191   plat->status = up;
  MOV.L        RD0, (RQ18, 52)
// p_plats.c:193   sec->special = 0;		
  MOV.W        RD0, (RQ8, 14)
// p_plats.c:195   S_StartSound((mobj_t *)&sec->soundorg,sfx_stnmov);
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// p_plats.c:196   break;
  BSR          .L00801E3F, R0

.L00801E41:
// p_plats.c:198   case raiseAndChange:
  LUI          8, RD27
  MOV.L        RD27, (RQ18, 32)
// p_plats.c:200   sec->floorpic = sides[line->sidenum[0]].sector->floorpic;
  MOV.Q        (R2, 136), RQ26
  ADD          RQ26, 36, RQ23
  MOV.W        (RQ23, 0), RQ9
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ27
  ADD          RQ25, RQ27, RQ27
  MOV.Q        (RQ27, 16), RQ23
  MOV.W        (RQ23, 8), RQ9
  MOV.W        RQ9, (RQ8, 8)
// p_plats.c:201   plat->high = sec->floorheight + amount*FRACUNIT;
  MOV.L        (RQ8, 0), RQ22
  MOV.L        (R2, 128), RD25
  SHAD.L       RD25, 16, RQ9
  ADDS.L       RQ22, RQ9, RQ21
  MOV.L        RQ21, (RQ18, 40)
// p_plats.c:202   plat->wait = 0;
  MOV.L        RD0, (RQ18, 44)
// p_plats.c:203   plat->status = up;
  MOV.L        RD0, (RQ18, 52)
// p_plats.c:205   S_StartSound((mobj_t *)&sec->soundorg,sfx_stnmov);
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// p_plats.c:206   break;
  BSR          .L00801E3F, R0

.L00801E42:
// p_plats.c:208   case downWaitUpStay:
  LUI          64, RD27
  MOV.L        RD27, (RQ18, 32)
// p_plats.c:210   plat->low = P_FindLowestFloorSurrounding(sec);
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 36)
// p_plats.c:212   if (plat->low > sec->floorheight)
  MOV.L        (RQ18, 36), RQ21
  MOV.L        (RQ8, 0), RQ22
  BRLE.L       RQ22, RQ21, .L00801E45
// p_plats.c:213   plat->low = sec->floorheight;
  MOV.L        (RQ8, 0), RQ9
  MOV.L        RQ9, (RQ18, 36)

.L00801E45:
// p_plats.c:215   plat->high = sec->floorheight;
  MOV.L        (RQ8, 0), RQ21
  MOV.L        RQ21, (RQ18, 40)
// p_plats.c:216   plat->wait = 35*PLATWAIT;
  ADD          R0, 105, RD27
  MOV.L        RD27, (RQ18, 44)
// p_plats.c:217   plat->status = down;
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 52)
// p_plats.c:218   S_StartSound((mobj_t *)&sec->soundorg,sfx_pstart);
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 18, RD11
  BSR          S_StartSound, R1
// p_plats.c:219   break;
  BSR          .L00801E3F, R0

.L00801E43:
// p_plats.c:221   case blazeDWUS:
  LUI          128, RD27
  MOV.L        RD27, (RQ18, 32)
// p_plats.c:223   plat->low = P_FindLowestFloorSurrounding(sec);
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 36)
// p_plats.c:225   if (plat->low > sec->floorheight)
  MOV.L        (RQ18, 36), RQ21
  MOV.L        (RQ8, 0), RQ22
  BRLE.L       RQ22, RQ21, .L00801E46
// p_plats.c:226   plat->low = sec->floorheight;
  MOV.L        (RQ8, 0), RQ9
  MOV.L        RQ9, (RQ18, 36)

.L00801E46:
// p_plats.c:228   plat->high = sec->floorheight;
  MOV.L        (RQ8, 0), RQ21
  MOV.L        RQ21, (RQ18, 40)
// p_plats.c:229   plat->wait = 35*PLATWAIT;
  ADD          R0, 105, RD27
  MOV.L        RD27, (RQ18, 44)
// p_plats.c:230   plat->status = down;
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 52)
// p_plats.c:231   S_StartSound((mobj_t *)&sec->soundorg,sfx_pstart);
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 18, RD11
  BSR          S_StartSound, R1
// p_plats.c:232   break;
  BSR          .L00801E3F, R0

.L00801E44:
// p_plats.c:234   case perpetualRaise:
  LUI          16, RD27
  MOV.L        RD27, (RQ18, 32)
// p_plats.c:236   plat->low = P_FindLowestFloorSurrounding(sec);
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 36)
// p_plats.c:238   if (plat->low > sec->floorheight)
  MOV.L        (RQ18, 36), RQ21
  MOV.L        (RQ8, 0), RQ22
  BRLE.L       RQ22, RQ21, .L00801E47
// p_plats.c:239   plat->low = sec->floorheight;
  MOV.L        (RQ8, 0), RQ9
  MOV.L        RQ9, (RQ18, 36)

.L00801E47:
// p_plats.c:241   plat->high = P_FindHighestFloorSurrounding(sec);
  ADD          RQ8, 0, RQ10
  BSR          P_FindHighestFloorSurrounding, R1
  ADD          RQ10, 0, RQ21
  MOV.L        RQ21, (RQ18, 40)
// p_plats.c:243   if (plat->high < sec->floorheight)
  MOV.L        (RQ18, 40), RQ22
  MOV.L        (RQ8, 0), RQ9
  BRGE.L       RQ9, RQ22, .L00801E48
// p_plats.c:244   plat->high = sec->floorheight;
  MOV.L        (RQ8, 0), RQ21
  MOV.L        RQ21, (RQ18, 40)

.L00801E48:
// p_plats.c:246   plat->wait = 35*PLATWAIT;
  ADD          R0, 105, RD27
  MOV.L        RD27, (RQ18, 44)
// p_plats.c:247   plat->status = P_Random()&1;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ22
  AND          RQ22, 1, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_plats.c:249   S_StartSound((mobj_t *)&sec->soundorg,sfx_pstart);
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 18, RD11
  BSR          S_StartSound, R1
// p_plats.c:250   break;

.L00801E3F:
// p_plats.c:251   }
  ADD          RQ18, 0, RQ10
  BSR          P_AddActivePlat, R1

.L00801E3E:
  MOV.Q        (R2, 136), RQ10
  MOV.L        (R2, 124), RD11
  BSR          P_FindSectorFromLineTag, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RD9, (R2, 124)
  BRGE.L       R0, RQ9, .L00801E3C

.L00801E3D:
// p_plats.c:253   }
  MOV.L        (R2, 120), RD10

.L00C018D4:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

A_WeaponReady:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 128)
// p_pspr.c:292   if (player->mo->state == &states[S_PLAY_ATK1]
  MOV.Q        (RQ9, 0), RQ8
  MOV.Q        (RQ8, 152), RQ23
  MOV          states, RQ27
  ADD          R0, 154, RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ8
  ADD          RQ27, RQ8, RQ8
  BREQ.Q       RQ8, RQ23, .L00801E97
  MOV.Q        (RQ9, 0), RQ23
  MOV.Q        (RQ23, 152), RQ8
  MOV          states, RQ27
  ADD          R0, 155, RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  BREQ.Q       RQ23, RQ8, .L00801E97
  BSR          .L00801E96, R0

.L00801E97:
// p_pspr.c:294   {
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 149, RD11
  BSR          P_SetMobjState, R1

.L00801E96:
// p_pspr.c:298   if (player->readyweapon == wp_chainsaw
  MOV.L        (RQ9, 116), RQ18
  BRNE.Q       7, RQ18, .L00801E99
  MOV.Q        (R2, 128), RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          states, RQ26
  ADD          R0, 67, RD13
  ADD          R0, 40, R5
  MUL.L        RD13, R5, RQ23
  ADD          RQ26, RQ23, RQ23
  BRNE.Q       RQ23, RQ8, .L00801E99

.L00801E9A:
// p_pspr.c:300   {
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 11, RD11
  BSR          S_StartSound, R1

.L00801E99:
// p_pspr.c:306   if (player->pendingweapon != wp_nochange || !player->health)
  MOV.L        (RQ9, 120), RQ18
  BRNE.Q       10, RQ18, .L00801E9D
  MOV.L        (RQ9, 36), RQ18
  BREQ.L       R0, RQ18, .L00801E9D
  BSR          .L00801E9C, R0

.L00801E9D:
// p_pspr.c:310   newstate = weaponinfo[player->readyweapon].downstate;
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RD27
  MOV.L        RD27, (R2, 124)
// p_pspr.c:311   P_SetPsprite (player, ps_weapon, newstate);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RD27, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:312   return;	
  BSR          .L00C018DA, R0

.L00801E9C:
// p_pspr.c:317   if (player->cmd.buttons & BT_ATTACK)
  ADD          RQ9, 12, RQ27
  MOVU.B       (RQ27, 7), RQ18
  ADD          R0, 1, RD26
  BTST.L       RD26, RQ18, .L00801E9F
  MOV.L        (RQ9, 192), RQ18
  BREQ.L       R0, RQ18, .L00801EA1
  MOV.L        (RQ9, 116), RQ18
  BREQ.Q       4, RQ18, .L00801EA0
  MOV.L        (RQ9, 116), RQ18
  BREQ.Q       6, RQ18, .L00801EA0

.L00801EA1:
// p_pspr.c:322   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, 192)
// p_pspr.c:324   P_FireWeapon (player);		
  ADD          RQ9, 0, RQ10
  BSR          P_FireWeapon, R1
// p_pspr.c:325   return;
  BSR          .L00C018DA, R0

.L00801EA0:
  BSR          .L00801EA4, R0

.L00801E9F:
// p_pspr.c:329   player->attackdown = false;
  MOV.L        RD0, (RQ9, 192)

.L00801EA4:
// p_pspr.c:332   angle = (128*leveltime)&FINEMASK;
  MOV.L        leveltime, RD27
  SHAD.L       RD27, 7, RQ18
  AND          RQ18, 8191, RD21
// p_pspr.c:333   psp->sx = FRACUNIT + FixedMul (player->bob, finecosine[angle]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD21), RQ18
  MOV.L        (RQ9, 32), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ20
  ADDS.L       RQ20, 0x00010000, RQ18
  MOV.Q        (R2, 128), RQ27
  MOV.L        RQ18, (RQ27, 12)
// p_pspr.c:334   angle &= FINEANGLES/2-1;
  AND          RD21, 4095, RD21
// p_pspr.c:335   psp->sy = WEAPONTOP + FixedMul (player->bob, finesine[angle]);
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD21), RQ22
  MOV.L        (RQ9, 32), RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ22, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0x00200000, RQ22
  MOV.L        RQ22, (RQ27, 16)

.L00C018DA:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

I_SetPalette:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -264, R2
  MOV.Q        RQ10, (R2, 24)
// i_btesh4.c:399   for(i=0; i<256; i++)
  ADD          R0, 0, RD8

.L00801136:
// i_btesh4.c:400   {
  ADD          R0, 3, R5
  MULS.L       RD8, R5, RQ18
  MOV.Q        (R2, 24), RQ13
  MOVU.B       (RQ13, RQ18), RD23
// i_btesh4.c:402   cg=palette[i*3+1];
  ADD          R0, 3, R5
  MULS.L       RD8, R5, RQ18
  ADD          RQ13, RQ18, R5
  MOVU.B       (R5, 1), RD22
// i_btesh4.c:403   cb=palette[i*3+2];
  ADD          R0, 3, R5
  MULS.L       RD8, R5, RQ18
  ADD          RQ13, RQ18, R5
  MOVU.B       (R5, 2), RD21
// i_btesh4.c:425   cr+=4;
  ADDS.L       RD23, 4, RD23
// i_btesh4.c:426   cg+=4;
  ADDS.L       RD22, 4, RD22
// i_btesh4.c:427   cb+=4;
  ADDS.L       RD21, 4, RD21
// i_btesh4.c:428   if(cr>255)cr=255;
  BRLE.L       255, RD23, .L00801139
  ADD          R0, 255, RD23

.L00801139:
// i_btesh4.c:429   if(cg>255)cg=255;
  BRLE.L       255, RD22, .L0080113A
  ADD          R0, 255, RD22

.L0080113A:
// i_btesh4.c:430   if(cb>255)cb=255;
  BRLE.L       255, RD21, .L0080113B
  ADD          R0, 255, RD21

.L0080113B:
// i_btesh4.c:432   d_8to16table[i]=
  SHAD.L       RD23, 7, RQ18
  AND          RQ18, 31744, RQ9
  SHAD.L       RD22, 2, RQ18
  AND          RQ18, 992, RQ20
  OR           RQ9, RQ20, RQ18
  SHLR.Q       RD21, 3, RQ9
  AND          RQ9, 31, RQ9
  OR           RQ18, RQ9, RQ20
  MOV          d_8to16table, RQ13
  MOVU.W       RQ20, (RQ13, RD8)
  ADDS.L       RD8, 1, RD8
  BRLT.L       256, RD8, .L00801136

.L00801138:

.L00C018E0:
  ADD          R2, 264, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

HU_queueChatChar:
// hu_stuff.c:610   {
  MOV.L        TU7A00CA82/head, RD13
  ADDS.L       RD13, 1, RQ12
  AND          RQ12, 127, RQ11
  MOV.L        TU7A00CA82/tail, RD17
  BRNE.Q       RD17, RQ11, .L00802C95
// hu_stuff.c:612   {
  MOV          .L00C018E2, RQ13
  MOV.Q        TU7A00CA82/plr, RQ17
  MOV.Q        RQ13, (RQ17, 224)
  BSR          .L00802C96, R0

.L00802C95:
// hu_stuff.c:616   {
  MOV          TU7A00CA82/chatchars, RQ13
  MOV.L        TU7A00CA82/head, RD17
  MOV.B        RD10, (RQ13, RD17)
// hu_stuff.c:618   head = (head + 1) & (QUEUESIZE-1);
  ADDS.L       RD17, 1, RQ12
  AND          RQ12, 127, RD17
  MOV.L        RD17, TU7A00CA82/head

.L00802C96:

.L00C018E1:
  JSR          R1, 0, R0

EV_DoFloor:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.L        RD11, (R2, 164)
// p_floor.c:271   secnum = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 160)
// p_floor.c:272   rtn = 0;
  MOV.L        RD0, (R2, 156)
// p_floor.c:273   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801BFE, R0

.L00801BFC:
// p_floor.c:274   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 160), RD26
  SHAD.L       RD26, 7, RQ8
  ADD          RQ27, RQ8, RQ8
// p_floor.c:278   if (sec->specialdata)
  MOV.Q        (RQ8, 104), RQ20
  BRNE.Q       R0, RQ20, .L00801BFE
// p_floor.c:282   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 156)
// p_floor.c:283   floor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_floor.c:284   P_AddThinker (&floor->thinker);
  ADD          RQ18, 0, RQ20
  ADD          RQ20, 0, RQ10
  BSR          P_AddThinker, R1
// p_floor.c:285   sec->specialdata = floor;
  MOV.Q        RQ18, (RQ8, 104)
// p_floor.c:286   floor->thinker.function.acp1 = (actionf_p1) T_MoveFloor;
  MOV          T_MoveFloor, RQ20
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ20, (RQ25, 0)
// p_floor.c:287   floor->type = floortype;
  MOV.L        (R2, 164), RD13
  MOV.L        RD13, (RQ18, 24)
// p_floor.c:288   floor->crush = false;
  MOV.L        RD0, (RQ18, 28)
// p_floor.c:290   switch(floortype)
  AND          RD13, -1, RQ9
  BRGE.L       6, RQ9, .L00801C0D
  MOV.L        (R2, 164), RD27
  BREQ.L       R0, RD27, .L00801C00
  MOV.L        (R2, 164), RD27
  BREQ.Q       1, RD27, .L00801C01
  MOV.L        (R2, 164), RD27
  BREQ.Q       2, RD27, .L00801C02
  MOV.L        (R2, 164), RD27
  BREQ.Q       3, RD27, .L00801C04
  MOV.L        (R2, 164), RD27
  BREQ.Q       4, RD27, .L00801C06
  MOV.L        (R2, 164), RD27
  BREQ.Q       5, RD27, .L00801C0A

.L00801C0D:
  MOV.L        (R2, 164), RD27
  BREQ.Q       6, RD27, .L00801C0B
  MOV.L        (R2, 164), RD27
  BREQ.Q       7, RD27, .L00801C07
  MOV.L        (R2, 164), RD27
  BREQ.Q       8, RD27, .L00801C09
  MOV.L        (R2, 164), RD27
  BREQ.Q       9, RD27, .L00801C03
  MOV.L        (R2, 164), RD27
  BREQ.Q       10, RD27, .L00801C05
  MOV.L        (R2, 164), RD27
  BREQ.Q       12, RD27, .L00801C08
  BSR          .L00801C0C, R0

.L00801C00:
// p_floor.c:292   case lowerFloor:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:294   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:295   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:296   floor->floordestheight = 
  ADD          RQ8, 0, RQ10
  BSR          P_FindHighestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_floor.c:298   break;
  BSR          .L00801BFF, R0

.L00801C01:
// p_floor.c:300   case lowerFloorToLowest:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:302   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:303   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:304   floor->floordestheight = 
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_floor.c:306   break;
  BSR          .L00801BFF, R0

.L00801C02:
// p_floor.c:308   case turboLower:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:310   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:311   floor->speed = FLOORSPEED * 4;
  LUI          64, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:312   floor->floordestheight = 
  ADD          RQ8, 0, RQ10
  BSR          P_FindHighestFloorSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_floor.c:314   if (floor->floordestheight != sec->floorheight)
  MOV.L        (RQ18, 52), RQ9
  MOV.L        (RQ8, 0), RQ23
  BREQ.Q       RQ23, RQ9, .L00801C0E
// p_floor.c:315   floor->floordestheight += 8*FRACUNIT;
  MOV.L        (RQ18, 52), RQ9
  ADDS.L       RQ9, 0x00080000, RQ23
  MOV.L        RQ23, (RQ18, 52)

.L00801C0E:
// p_floor.c:316   break;
  BSR          .L00801BFF, R0

.L00801C03:
// p_floor.c:318   case raiseFloorCrush:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 28)

.L00801C04:
// p_floor.c:320   case raiseFloor:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:322   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:323   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:324   floor->floordestheight = 
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_floor.c:326   if (floor->floordestheight > sec->ceilingheight)
  MOV.L        (RQ18, 52), RQ23
  MOV.L        (RQ8, 4), RQ9
  BRLE.L       RQ9, RQ23, .L00801C0F
// p_floor.c:327   floor->floordestheight = sec->ceilingheight;
  MOV.L        (RQ8, 4), RQ23
  MOV.L        RQ23, (RQ18, 52)

.L00801C0F:
// p_floor.c:328   floor->floordestheight -= (8*FRACUNIT)*
  MOV.L        (RQ18, 52), RQ9
  MOV.L        (R2, 164), RD27
  ADD          R0, 9, R5
  CMPEQ.Q      RD27, R5, RQ23
  SHAD.L       RQ23, 19, RQ22
  SUBS.L       RQ9, RQ22, RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_floor.c:330   break;
  BSR          .L00801BFF, R0

.L00801C05:
// p_floor.c:332   case raiseFloorTurbo:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:334   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:335   floor->speed = FLOORSPEED*4;
  LUI          64, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:336   floor->floordestheight = 
  MOV.L        (RQ8, 0), RQ22
  ADD          RQ8, 0, RQ10
  ADD          RQ22, 0, RD11
  BSR          P_FindNextHighestFloor, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 52)
// p_floor.c:338   break;
  BSR          .L00801BFF, R0

.L00801C06:
// p_floor.c:340   case raiseFloorToNearest:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:342   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:343   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:344   floor->floordestheight = 
  MOV.L        (RQ8, 0), RQ23
  ADD          RQ8, 0, RQ10
  ADD          RQ23, 0, RD11
  BSR          P_FindNextHighestFloor, R1
  ADD          RQ10, 0, RQ22
  MOV.L        RQ22, (RQ18, 52)
// p_floor.c:346   break;
  BSR          .L00801BFF, R0

.L00801C07:
// p_floor.c:348   case raiseFloor24:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:350   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:351   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:352   floor->floordestheight = floor->sector->floorheight +
  MOV.Q        (RQ18, 32), RQ20
  MOV.L        (RQ20, 0), RQ9
  ADDS.L       RQ9, 0x00180000, RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_floor.c:354   break;
  BSR          .L00801BFF, R0

.L00801C08:
// p_floor.c:355   case raiseFloor512:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:357   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:358   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:359   floor->floordestheight = floor->sector->floorheight +
  MOV.Q        (RQ18, 32), RQ20
  MOV.L        (RQ20, 0), RQ9
  ADDS.L       RQ9, 0x02000000, RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_floor.c:361   break;
  BSR          .L00801BFF, R0

.L00801C09:
// p_floor.c:363   case raiseFloor24AndChange:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:365   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:366   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:367   floor->floordestheight = floor->sector->floorheight +
  MOV.Q        (RQ18, 32), RQ20
  MOV.L        (RQ20, 0), RQ9
  ADDS.L       RQ9, 0x00180000, RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_floor.c:369   sec->floorpic = line->frontsector->floorpic;
  MOV.Q        (R2, 168), RQ25
  MOV.Q        (RQ25, 64), RQ20
  MOV.W        (RQ20, 8), RQ9
  MOV.W        RQ9, (RQ8, 8)
// p_floor.c:370   sec->special = line->frontsector->special;
  MOV.W        (RQ20, 14), RQ23
  MOV.W        RQ23, (RQ8, 14)
// p_floor.c:371   break;
  BSR          .L00801BFF, R0

.L00801C0A:
// p_floor.c:374   {
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, (R2, 152)
// p_floor.c:378   floor->direction = 1;
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 40)
// p_floor.c:379   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:380   floor->speed = FLOORSPEED;
  LUI          16, RD25
  MOV.L        RD25, (RQ18, 56)
// p_floor.c:381   for (i = 0; i < sec->linecount; i++)
  ADD          R0, 0, RD21
  MOV.L        (RQ8, 112), RQ22
  BRGE.L       RQ22, RD21, .L00801C12

.L00801C10:
// p_floor.c:382   {
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  BSR          twoSided, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801C13
// p_floor.c:384   {
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  BSR          getSide, R1
  ADD          RQ10, 0, RQ27
  MOV.W        (RQ27, 10), RQ23
  MOV.Q        RQ27, (R2, 144)
  BRLT.L       R0, RQ23, .L00801C14
  MOV.Q        (R2, 144), RQ27
  MOV.W        (RQ27, 10), RQ22
  MOV.Q        textureheight, RQ26
  MOV.L        (RQ26, RQ22), RQ9
  MOV.L        (R2, 152), RD26
  BRGE.L       RD26, RQ9, .L00801C15
// p_floor.c:389   minsize = 
  MOV.Q        (R2, 144), RQ27
  MOV.W        (RQ27, 10), RQ23
  MOV.Q        textureheight, RQ26
  MOV.L        (RQ26, RQ23), RD25
  MOV.L        RD25, (R2, 152)

.L00801C15:

.L00801C14:
// p_floor.c:391   side = getSide(secnum,i,1);
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  ADD          R0, 1, RD12
  BSR          getSide, R1
  ADD          RQ10, 0, RQ27
  MOV.W        (RQ27, 10), RQ22
  MOV.Q        RQ27, (R2, 144)
  BRLT.L       R0, RQ22, .L00801C16
  MOV.Q        (R2, 144), RQ27
  MOV.W        (RQ27, 10), RQ9
  MOV.Q        textureheight, RQ26
  MOV.L        (RQ26, RQ9), RQ23
  MOV.L        (R2, 152), RD26
  BRGE.L       RD26, RQ23, .L00801C17
// p_floor.c:395   minsize = 
  MOV.Q        (R2, 144), RQ27
  MOV.W        (RQ27, 10), RQ22
  MOV.Q        textureheight, RQ26
  MOV.L        (RQ26, RQ22), RD25
  MOV.L        RD25, (R2, 152)

.L00801C17:

.L00801C16:

.L00801C13:
  ADDS.L       RD21, 1, RD21
  MOV.L        (RQ8, 112), RQ9
  BRLT.L       RQ9, RD21, .L00801C10

.L00801C12:
// p_floor.c:398   }
  MOV.Q        (RQ18, 32), RQ20
  MOV.L        (RQ20, 0), RQ9
  MOV.L        (R2, 152), RD27
  ADDS.L       RQ9, RD27, RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_floor.c:401   }
  BSR          .L00801BFF, R0

.L00801C0B:
// p_floor.c:404   case lowerAndChange:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_floor.c:406   floor->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_floor.c:407   floor->speed = FLOORSPEED;
  LUI          16, RD26
  MOV.L        RD26, (RQ18, 56)
// p_floor.c:408   floor->floordestheight = 
  ADD          RQ8, 0, RQ10
  BSR          P_FindLowestFloorSurrounding, R1
  ADD          RQ10, 0, RQ22
  MOV.L        RQ22, (RQ18, 52)
// p_floor.c:410   floor->texture = sec->floorpic;
  MOV.W        (RQ8, 8), RQ9
  MOV.W        RQ9, (RQ18, 48)
// p_floor.c:412   for (i = 0; i < sec->linecount; i++)
  ADD          R0, 0, RD21
  MOV.L        (RQ8, 112), RQ23
  BRGE.L       RQ23, RD21, .L00801C1A

.L00801C18:
// p_floor.c:413   {
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  BSR          twoSided, R1
  ADD          RQ10, 0, RQ22
  BREQ.L       R0, RQ22, .L00801C1B
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  BSR          getSide, R1
  ADD          RQ10, 0, RQ20
  MOV.Q        (RQ20, 16), RQ27
  MOV.Q        sectors, RQ26
  SUB          RQ27, RQ26, RQ25
  SHAR.Q       RQ25, 7, RQ25
  MOV.L        (R2, 160), RD26
  ADDS.L       RD26, 0, RQ27
  BRNE.Q       RQ27, RQ25, .L00801C1C
// p_floor.c:417   {
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  ADD          R0, 1, RD12
  BSR          getSector, R1
  ADD          RQ10, 0, RQ8
  MOV.L        (RQ8, 0), RQ9
  MOV.L        (RQ18, 52), RQ23
  BRNE.Q       RQ23, RQ9, .L00801C1D
// p_floor.c:421   {
  MOV.W        (RQ8, 8), RQ22
  MOV.W        RQ22, (RQ18, 48)
// p_floor.c:423   floor->newspecial = sec->special;
  MOV.W        (RQ8, 14), RQ9
  MOV.L        RQ9, (RQ18, 44)
// p_floor.c:424   break;
  BSR          .L00801C1A, R0

.L00801C1D:
  BSR          .L00801C1E, R0

.L00801C1C:
// p_floor.c:428   {
  MOV.L        (R2, 160), RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  BSR          getSector, R1
  ADD          RQ10, 0, RQ8
  MOV.L        (RQ8, 0), RQ23
  MOV.L        (RQ18, 52), RQ22
  BRNE.Q       RQ22, RQ23, .L00801C1F
// p_floor.c:432   {
  MOV.W        (RQ8, 8), RQ9
  MOV.W        RQ9, (RQ18, 48)
// p_floor.c:434   floor->newspecial = sec->special;
  MOV.W        (RQ8, 14), RQ23
  MOV.L        RQ23, (RQ18, 44)
// p_floor.c:435   break;
  BSR          .L00801C1A, R0

.L00801C1F:

.L00801C1E:

.L00801C1B:
  ADDS.L       RD21, 1, RD21
  MOV.L        (RQ8, 112), RQ22
  BRLT.L       RQ22, RD21, .L00801C18

.L00801C1A:

.L00801C0C:
// p_floor.c:440   default:

.L00801BFF:

.L00801BFE:
  MOV.Q        (R2, 168), RQ10
  MOV.L        (R2, 160), RD11
  BSR          P_FindSectorFromLineTag, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RD9, (R2, 160)
  BRGE.L       R0, RQ9, .L00801BFC

.L00801BFD:
// p_floor.c:443   }
  MOV.L        (R2, 156), RD10

.L00C018E8:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

W_CacheLumpNameBase:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -368, R2
  ADDS.L       RD10, 0, RD8
  ADD          RQ11, 0, RQ23
  MOV.L        RD12, (R2, 92)
// w_wad.c:2170   {
  ADDS.L       RD8, 0, RD10
  ADD          RQ23, 0, RQ11
  BSR          W_GetNumForNameBase, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        (R2, 92), RD11
  BSR          W_CacheLumpNum, R1

.L00C018EE:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

R_PointInSubsector:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
// r_main.c:887   if (!numnodes)				
  MOV.L        numnodes, RD23
  BRNE.L       R0, RD23, .L00802699
// r_main.c:888   return subsectors;
  MOV.Q        subsectors, RQ10
  BSR          .L00C018F4, R0

.L00802699:
// r_main.c:890   nodenum = numnodes-1;
  MOV.L        numnodes, RD23
  ADDS.L       RD23, -1, RD18
// r_main.c:892   while (! (nodenum & NF_SUBSECTOR) )
  BSR          .L0080269C, R0

.L0080269A:
// r_main.c:893   {
  MOV.Q        nodes, RQ23
  ADD          R0, 52, R5
  MUL.L        RD18, R5, RQ9
  ADD          RQ23, RQ9, RQ9
// r_main.c:895   side = R_PointOnSide (x, y, node);
  MOV.L        (R2, 92), RD10
  MOV.L        (R2, 88), RD11
  ADD          RQ9, 0, RQ12
  BSR          R_PointOnSide, R1
  ADDS.L       RQ10, 0, RD8
// r_main.c:896   nodenum = node->children[side];
  ADD          RQ9, 48, RQ23
  MOVU.W       (RQ23, RD8), RD18

.L0080269C:
  LUI          8, RD23
  BTST.L       RD23, RD18, .L0080269A

.L0080269B:
// r_main.c:899   return &subsectors[nodenum & ~NF_SUBSECTOR];
  AND          RD18, 0xFFFFFFFFFFFF7FFF, RQ23
  MOV.Q        subsectors, RQ13
  SHAD.L       RQ23, 4, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          RQ12, 0, RQ10

.L00C018F4:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_multidir_hashname:
// tk_vf_sysc.c:416   
  ADD          RQ10, 0, RQ13
  ADD          RQ0, 0, RQ12
// tk_vf_sysc.c:417   
  BSR          .L00800B37, R0

.L00800B38:
// tk_vf_sysc.c:418   
  ADD          RQ13, 0, RQ11
  MOV.B        (RQ13, 0), RD17
  ADD          RQ11, 1, RQ13
// tk_vf_sysc.c:420   
  ADD          R0, 0x00000000E20B7AC6, RQ16
  MULU.Q       RQ12, RQ16, RQ15
  ADDS.L       RD17, 0, RQ14
  ADD          RQ15, RQ14, RQ12

.L00800B37:
  MOV.B        (RQ13, 0), RQ16
  BRNE.L       R0, RQ16, .L00800B38

.L00800B39:
// tk_vf_sysc.c:421   
  ADD          R0, 0x00000000E20B7AC6, RQ31
  MULU.Q       RQ12, RQ31, RQ12
// tk_vf_sysc.c:423   
  ADD          RQ12, 0, RQ10

.L00C018F5:
  JSR          R1, 0, R0
  .balign 4

R_PointOnSegSide:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.L        RD10, (R2, 124)
  MOV.L        RD11, (R2, 120)
  MOV.Q        RQ12, (R2, 112)
// r_main.c:233   lx = line->v1->x;
  MOV.Q        (R2, 112), RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV.L        (RQ8, 0), RD21
// r_main.c:234   ly = line->v1->y;
  MOV.L        (RQ8, 4), RD20
// r_main.c:236   ldx = line->v2->x - lx;
  MOV.Q        (RQ27, 8), RQ8
  MOV.L        (RQ8, 0), RQ18
  SUBS.L       RQ18, RD21, RD23
// r_main.c:237   ldy = line->v2->y - ly;
  MOV.L        (RQ8, 4), RQ18
  SUBS.L       RQ18, RD20, RD9
// r_main.c:239   if (!ldx)
  BRNE.L       R0, RD23, .L0080264C
  MOV.L        (R2, 124), RD27
  BRGT.L       RD21, RD27, .L0080264D
// r_main.c:242   return ldy > 0;
  CMPGT.Q      RD9, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C018FB, R0

.L0080264D:
// r_main.c:244   return ldy < 0;
  CMPLT.Q      RD9, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C018FB, R0

.L0080264C:
// r_main.c:245   }
  BRNE.L       R0, RD9, .L0080264E
  MOV.L        (R2, 120), RD27
  BRGT.L       RD20, RD27, .L0080264F
// r_main.c:249   return ldx < 0;
  CMPLT.Q      RD23, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C018FB, R0

.L0080264F:
// r_main.c:251   return ldx > 0;
  CMPGT.Q      RD23, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C018FB, R0

.L0080264E:
// r_main.c:254   dx = (x - lx);
  MOV.L        (R2, 124), RD26
  SUBS.L       RD26, RD21, RD27
// r_main.c:255   dy = (y - ly);
  MOV.L        (R2, 120), RD12
  SUBS.L       RD12, RD20, RD13
// r_main.c:258   if ( (ldy ^ ldx ^ dx ^ dy)&0x80000000 )
  XOR          RD9, RD23, RQ18
  XOR          RQ18, RD27, RQ22
  MOV.L        RD27, (R2, 108)
  XOR          RQ22, RD13, RQ18
  MOV.L        RD13, (R2, 104)
  LUI          0xFFFFFFFFFFF80000, RD11
  BTST.L       RD11, RQ18, .L00802650
  MOV.L        (R2, 108), RD27
  XOR          RD9, RD27, RQ22
  LUI          0xFFFFFFFFFFF80000, RD26
  BTST.L       RD26, RQ22, .L00802651
// r_main.c:263   return 1;
  ADD          R0, 1, RD10
  BSR          .L00C018FB, R0

.L00802651:
// r_main.c:264   }
  ADD          R0, 0, RD10
  BSR          .L00C018FB, R0

.L00802650:
// r_main.c:268   left = FixedMul ( ldy>>FRACBITS , dx );
  SHAR         RD9, 16, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        (R2, 108), RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 100)
// r_main.c:269   right = FixedMul ( dy , ldx>>FRACBITS );
  SHAR         RD23, 16, RQ22
  MOV.L        (R2, 104), RD10
  ADD          RQ22, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD27
// r_main.c:271   if (right < left)
  MOV.L        RD27, (R2, 96)
  MOV.L        (R2, 100), RD26
  BRLT.L       RD26, RD27, .L00C006D3
// r_main.c:277   return 1;			
  ADD          R0, 1, RD10
  BSR          .L00C018FB, R0

.L00C006D3:
  ADD          R0, 0, RQ10

.L00C018FB:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_LightTurnOn:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RD11, 0, RD21
// p_lights.c:282   sector = sectors;
  MOV.Q        sectors, RQ18
// p_lights.c:284   for (i=0;i<numsectors;i++, sector++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 96)
  MOV.L        numsectors, RD13
  BRGE.L       RD13, RD27, .L00801D06

.L00801D04:
// p_lights.c:285   {
  MOV.W        (RQ18, 16), RQ23
  MOV.Q        (R2, 104), RQ27
  MOV.W        (RQ27, 28), RQ22
  BRNE.Q       RQ22, RQ23, .L00801D07
  BRNE.L       R0, RD21, .L00801D08
// p_lights.c:292   {
  ADD          R0, 0, RD8
  MOV.L        (RQ18, 112), RQ23
  BRGE.L       RQ23, RD8, .L00801D0B

.L00801D09:
// p_lights.c:294   {
  MOV.Q        (RQ18, 120), RQ20
  MOV.Q        (RQ20, RD8), RQ27
  MOV.Q        RQ27, (R2, 88)
// p_lights.c:296   temp = getNextSector(templine,sector);
  ADD          RQ27, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ9
// p_lights.c:298   if (!temp)
  BREQ.Q       R0, RQ9, .L00801D0A
// p_lights.c:301   if (temp->lightlevel > bright)
  MOV.W        (RQ9, 12), RQ23
  BRLE.L       RD21, RQ23, .L00801D0C
// p_lights.c:302   bright = temp->lightlevel;
  MOV.W        (RQ9, 12), RD21

.L00801D0C:

.L00801D0A:
  ADDS.L       RD8, 1, RD8
  MOV.L        (RQ18, 112), RQ22
  BRLT.L       RQ22, RD8, .L00801D09

.L00801D0B:

.L00801D08:
// p_lights.c:304   }
  MOV.W        RD21, (RQ18, 12)

.L00801D07:
  MOV.L        (R2, 96), RD27
  ADD          RD27, 0, RQ23
  ADDS.L       RD27, 1, RD27
  ADD          RQ18, 0, RQ20
  ADD          RQ18, 128, RQ18
  MOV.L        RD27, (R2, 96)
  MOV.L        numsectors, RD13
  BRLT.L       RD13, RD27, .L00801D04

.L00801D06:

.L00C01901:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

__setmemtrap:
// tk_core/tk_mmllist.c:32   

.L00C01902:
  JSR          R1, 0, R0

T_MoveCeiling:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
// p_ceilng.c:57   switch(ceiling->direction)
  MOV.L        (RQ18, 56), RQ9
  BREQ.L       R0, RQ9, .L008019FD
  BREQ.Q       1, RQ9, .L008019FE
  BREQ.Q       -1, RQ9, .L008019FF
  BSR          .L008019FC, R0

.L008019FD:
// p_ceilng.c:61   break;
  BSR          .L008019FC, R0

.L008019FE:
// p_ceilng.c:64   res = T_MovePlane(ceiling->sector,
  MOV.L        (RQ18, 56), RQ9
  MOV.L        (RQ18, 44), RQ27
  MOV.L        (RQ18, 48), RQ20
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 0, RQ10
  ADD          RQ20, 0, RD11
  ADD          RQ27, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 1, RD14
  ADDS.L       RQ9, 0, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD21
// p_ceilng.c:69   if (!(leveltime&7))
  MOV.L        leveltime, RD26
  ADD          R0, 7, RD25
  BTSTN.L      RD25, RD26, .L00801A00
// p_ceilng.c:70   {
  MOV.L        (RQ18, 24), RQ9
  BREQ.Q       5, RQ9, .L00801A02
  BSR          .L00801A03, R0

.L00801A02:
// p_ceilng.c:73   case silentCrushAndRaise:
  BSR          .L00801A01, R0

.L00801A03:
// p_ceilng.c:75   default:
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// p_ceilng.c:79   break;

.L00801A01:

.L00801A00:
// p_ceilng.c:83   if (res == pastdest)
  BRNE.Q       2, RD21, .L00801A04
// p_ceilng.c:84   {
  MOV.L        (RQ18, 24), RQ9
  BREQ.Q       1, RQ9, .L00801A06
  BREQ.Q       5, RQ9, .L00801A07
  BREQ.Q       4, RQ9, .L00801A08
  BREQ.Q       3, RQ9, .L00801A09
  BSR          .L00801A0A, R0

.L00801A06:
// p_ceilng.c:87   case raiseToHighest:
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveActiveCeiling, R1
// p_ceilng.c:89   break;
  BSR          .L00801A05, R0

.L00801A07:
// p_ceilng.c:91   case silentCrushAndRaise:
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1

.L00801A08:

.L00801A09:
// p_ceilng.c:95   case crushAndRaise:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 56)
// p_ceilng.c:97   break;
  BSR          .L00801A05, R0

.L00801A0A:
// p_ceilng.c:99   default:

.L00801A05:

.L00801A04:
// p_ceilng.c:103   }
  BSR          .L008019FC, R0

.L008019FF:
// p_ceilng.c:108   res = T_MovePlane(ceiling->sector,
  MOV.L        (RQ18, 56), RQ9
  MOV.L        (RQ18, 52), RQ27
  MOV.L        (RQ18, 40), RQ20
  MOV.L        (RQ18, 48), RQ8
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ20, 0, RD12
  ADD          RQ27, 0, RD13
  ADD          R0, 1, RD14
  ADDS.L       RQ9, 0, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD21
// p_ceilng.c:113   if (!(leveltime&7))
  MOV.L        leveltime, RD26
  ADD          R0, 7, RD25
  BTSTN.L      RD25, RD26, .L00801A0B
// p_ceilng.c:114   {
  MOV.L        (RQ18, 24), RQ8
  BREQ.Q       5, RQ8, .L00801A0D
  BSR          .L00801A0E, R0

.L00801A0D:
// p_ceilng.c:117   case silentCrushAndRaise: break;
  BSR          .L00801A0C, R0

.L00801A0E:
// p_ceilng.c:118   default:
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1

.L00801A0C:

.L00801A0B:
// p_ceilng.c:124   if (res == pastdest)
  BRNE.Q       2, RD21, .L00801A0F
// p_ceilng.c:125   {
  MOV.L        (RQ18, 24), RQ8
  BREQ.Q       5, RQ8, .L00801A11
  BREQ.Q       3, RQ8, .L00801A12
  BREQ.Q       4, RQ8, .L00801A13
  BREQ.Q       2, RQ8, .L00801A14
  BREQ.L       R0, RQ8, .L00801A15
  BSR          .L00801A16, R0

.L00801A11:
// p_ceilng.c:128   case silentCrushAndRaise:
  MOV.Q        (RQ18, 32), RQ23
  ADD          RQ23, 48, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1

.L00801A12:
// p_ceilng.c:131   case crushAndRaise:
  LUI          16, RD27
  MOV.L        RD27, (RQ18, 48)

.L00801A13:
// p_ceilng.c:133   case fastCrushAndRaise:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// p_ceilng.c:135   break;
  BSR          .L00801A10, R0

.L00801A14:

.L00801A15:
// p_ceilng.c:138   case lowerToFloor:
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveActiveCeiling, R1
// p_ceilng.c:140   break;
  BSR          .L00801A10, R0

.L00801A16:
// p_ceilng.c:142   default:

.L00801A10:
  BSR          .L00801A17, R0

.L00801A0F:
  BRNE.Q       1, RD21, .L00801A18
// p_ceilng.c:149   {
  MOV.L        (RQ18, 24), RQ8
  BREQ.Q       5, RQ8, .L00801A1A
  BREQ.Q       3, RQ8, .L00801A1B
  BREQ.Q       2, RQ8, .L00801A1C
  BSR          .L00801A1D, R0

.L00801A1A:

.L00801A1B:

.L00801A1C:
// p_ceilng.c:154   case lowerAndCrush:
  LUI          2, RD27
  MOV.L        RD27, (RQ18, 48)
// p_ceilng.c:156   break;
  BSR          .L00801A19, R0

.L00801A1D:
// p_ceilng.c:158   default:

.L00801A19:

.L00801A18:

.L00801A17:
// p_ceilng.c:162   }

.L008019FC:

.L00C01908:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

CheckAbort:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// d_net.c:483   stoptic = I_GetTime () + 2; 
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 2, RD8
// d_net.c:484   while (I_GetTime() < stoptic) 
  BSR          .L00801474, R0

.L00801472:
// d_net.c:485   I_StartTic (); 
  BSR          I_StartTic, R1

.L00801474:
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  BRLT.L       RD8, RQ18, .L00801472

.L00801473:
// d_net.c:487   I_StartTic ();
  BSR          I_StartTic, R1
// d_net.c:488   for ( ; eventtail != eventhead 
  MOV.L        eventtail, RD13
  MOV.L        eventhead, RD12
  BREQ.Q       RD12, RD13, .L00801477

.L00801475:
// d_net.c:490   { 
  MOV          events, RQ13
  MOV.L        eventtail, RD12
  SHAD.L       RD12, 4, RQ9
  ADD          RQ13, RQ9, RQ9
// d_net.c:492   if (ev->type == ev_keydown && ev->data1 == KEY_ESCAPE)
  MOV.L        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L00801478
  MOV.L        (RQ9, 4), RQ18
  BRNE.Q       27, RQ18, .L00801478

.L00801479:
// d_net.c:493   I_Error ("Network game synchronization aborted.");
  MOV          .L00C0190F, RQ10
  BSR          I_Error, R1

.L00801478:
  MOV.L        eventtail, RD13
  ADDS.L       RD13, 1, RD13
  AND          RD13, 63, RD13
  MOV.L        RD13, eventtail
  MOV.L        eventhead, RD12
  BRNE.Q       RD12, RD13, .L00801475

.L00801477:

.L00C0190E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawOnLnode:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.L        RD10, (R2, 140)
  ADD          RQ11, 0, RQ22
// wi_stuff.c:480   boolean	fits = false;
  MOV.L        RD0, (R2, 112)
// wi_stuff.c:482   i = 0;
  ADD          R0, 0, RD23
// wi_stuff.c:483   do

.L008029A0:
// wi_stuff.c:484   {
  MOV.Q        (RQ22, RD23), RQ9
  BREQ.Q       R0, RQ9, .L008029A1
// wi_stuff.c:488   left = lnodes[wbs->epsd][n].x - SHORT(c[i]->leftoffset);
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV          TU7A00CB85/lnodes, RQ26
  ADD          R0, 72, R5
  MUL.L        RQ18, R5, RQ9
  ADD          RQ26, RQ9, RQ9
  MOV.L        (R2, 140), RD25
  LEA.Q        RQ9, RD25, RQ24
  MOV.L        (RQ24, 0), RQ18
  MOV.Q        (RQ22, RD23), RQ9
  MOV.W        (RQ9, 4), RQ8
  SUBS.L       RQ18, RQ8, RD20
// wi_stuff.c:489   top = lnodes[wbs->epsd][n].y - SHORT(c[i]->topoffset);
  MOV.L        (RQ27, 0), RQ18
  ADD          R0, 72, R5
  MUL.L        RQ18, R5, RQ9
  ADD          RQ26, RQ9, RQ9
  LEA.Q        RQ9, RD25, RQ24
  MOV.L        (RQ24, 4), RQ8
  MOV.Q        (RQ22, RD23), RQ9
  MOV.W        (RQ9, 6), RQ18
  SUBS.L       RQ8, RQ18, RD27
// wi_stuff.c:490   right = left + SHORT(c[i]->width);
  MOV.Q        (RQ22, RD23), RQ9
  MOV.W        (RQ9, 0), RQ18
  ADDS.L       RD20, RQ18, RD26
// wi_stuff.c:491   bottom = top + SHORT(c[i]->height);
  MOV.Q        (RQ22, RD23), RQ9
  MOV.W        (RQ9, 2), RQ18
  ADDS.L       RD27, RQ18, RD13
// wi_stuff.c:493   if (left >= 0
  CMPGE.Q      RD20, R0, RQ8
  ADD          R0, 320, R5
  CMPLT.Q      RD26, R5, RQ18
  MOV.L        RD26, (R2, 120)
  AND          RQ8, RQ18, RQ21
  CMPGE.Q      RD27, R0, RQ18
  MOV.L        RD27, (R2, 124)
  AND          RQ21, RQ18, RQ8
  ADD          R0, 200, R5
  CMPLT.Q      RD13, R5, RQ21
  MOV.L        RD13, (R2, 116)
  BTST.L       RQ21, RQ8, .L008029A3
// wi_stuff.c:497   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 112)
  BSR          .L008029A4, R0

.L008029A3:
// wi_stuff.c:501   {
  ADDS.L       RD23, 1, RD23

.L008029A4:
  MOV.L        (R2, 112), RD27
  CMPEQ.Q      RD27, R0, RQ18
  ADD          R0, 2, R5
  CMPNE.Q      RD23, R5, RQ8
  BTSTN.L      RQ8, RQ18, .L008029A0

.L008029A1:
// wi_stuff.c:506   if (fits && (i<2) && c[i])
  MOV.L        (R2, 112), RD27
  BREQ.L       R0, RD27, .L008029A5
  BRGE.L       2, RD23, .L008029A5

.L008029A7:
  MOV.Q        (RQ22, RD23), RQ9
  BREQ.Q       R0, RQ9, .L008029A5

.L008029A6:
// wi_stuff.c:507   {
  MOV.Q        (RQ22, RD23), RQ9
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV          TU7A00CB85/lnodes, RQ27
  ADD          R0, 72, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (R2, 140), RD25
  LEA.Q        RQ26, RD25, RQ24
  MOV.L        (RQ24, 4), RQ8
  ADD          R0, 72, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  LEA.Q        RQ26, RD25, RQ24
  MOV.L        (RQ24, 0), RQ21
  ADD          RQ21, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ9, 0, RQ13
  BSR          V_DrawPatch, R1
  BSR          .L008029A9, R0

.L008029A5:
// wi_stuff.c:514   printf("Could not place patch on level %d", n+1); 
  MOV.L        (R2, 140), RD27
  ADDS.L       RD27, 1, RQ18
  MOV          .L00C01916, RQ10
  ADD          RQ18, 0, RD11
  BSR          printf, R1

.L008029A9:

.L00C01915:
  ADD          R2, 336, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

fputc:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
  ADD          RD10, 0, RD21
  ADD          RQ11, 0, RQ18
  ADD          R2, 144, RQ6
  MOV.Q        RQ6, (R2, 120)
// pdpc201/stdio.c:2142   
// pdpc201/stdio.c:2145   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2148   
  MOV.B        RD0, (RQ18, 8)
// pdpc201/stdio.c:2149   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ18, 48), RQ22
  ADD          RQ22, -2, RQ23
  BRGE.Q       RQ23, RQ9, .L00800488
  MOV.L        (RQ18, 68), RQ8
  BREQ.Q       3, RQ8, .L00800488

.L00800489:
// pdpc201/stdio.c:2177   
  SHAD.Q       RD21, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  MOV.Q        (RQ18, 40), RQ9
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 1, RQ23
  MOV.Q        RQ23, (RQ18, 40)
  MOV.B        RQ8, (RQ22, 0)
  BSR          .L0080048A, R0

.L00800488:
// pdpc201/stdio.c:2183   
  SHAD.Q       RD21, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          R2, 144, RQ27
  MOV.B        RQ8, (RQ27, 0)
  ADD          RQ27, 0, RQ10
  ADD          R0, 1, RQ11
  ADD          R0, 1, RQ12
  ADD          RQ18, 0, RQ13
  BSR          fwrite, R1
  ADD          RQ10, 0, RQ20
  BREQ.Q       1, RQ20, .L0080048B
// pdpc201/stdio.c:2186   
  ADD          R0, -1, RD10
  BSR          .L00C0191C, R0

.L0080048B:

.L0080048A:
// pdpc201/stdio.c:2191   
  ADD          R0, 10, R5
  CMPEQ.Q      RD21, R5, RQ8
  ADD          R0, 13, R5
  CMPEQ.Q      RD21, R5, RQ27
  OR           RQ8, RQ27, RQ26
  BREQ.L       R0, RQ26, .L0080048C
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  BREQ.Q       RQ22, RQ18, .L0080048D
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ23
  MOV.Q        (RQ23, 0), RQ9
  BREQ.Q       RQ9, RQ18, .L0080048D
  BSR          .L0080048E, R0

.L0080048D:
// pdpc201/stdio.c:2195   
  ADD          RQ18, 0, RQ10
  BSR          fflush, R1

.L0080048E:

.L0080048C:
// pdpc201/stdio.c:2200   
  ADD          RD21, 0, RD10

.L00C0191C:
  ADD          R2, 400, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

M_StartControlPanel:
// m_menu.c:1788   if (menuactive)
  MOV.L        menuactive, RD13
  BRNE.L       R0, RD13, .L00C0191D
// m_menu.c:1791   menuactive = 1;
  ADD          R0, 1, RD13
// m_menu.c:1792   currentMenu = &MainDef;		 // JDC
  MOV          MainDef, RQ12
  ADD          RQ12, 0, RQ11
  ADD          RQ11, 0, RQ10
// m_menu.c:1793   itemOn = currentMenu->lastOn;	 // JDC
  MOV.W        (RQ10, 36), RD17
  MOV.L        RD13, menuactive
  MOV.Q        RQ10, currentMenu
  MOV.W        RD17, itemOn

.L00C0191D:
  JSR          R1, 0, R0
  .balign 4

P_CheckPosition:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
// p_map.c:417   tmthing = thing;
  MOV.Q        (R2, 120), RQ26
  ADD          RQ26, 0, RQ27
// p_map.c:418   tmflags = thing->flags;
  MOV.L        (RQ26, 160), RD25
  MOV.L        RD25, tmflags
// p_map.c:420   tmx = x;
  MOV.L        (R2, 116), RD25
  MOV.L        RD25, tmx
// p_map.c:421   tmy = y;
  MOV.L        (R2, 112), RD24
  MOV.L        RD24, tmy
// p_map.c:423   tmbbox[BOXTOP] = y + tmthing->radius;
  MOV.L        (RQ27, 104), RQ9
  ADDS.L       RD24, RQ9, RQ8
  MOV          tmbbox, RQ26
  MOV.L        RQ8, (RQ26, 0)
// p_map.c:424   tmbbox[BOXBOTTOM] = y - tmthing->radius;
  MOV.L        (RQ27, 104), RQ9
  SUBS.L       RD24, RQ9, RQ8
  MOV.L        RQ8, (RQ26, 4)
// p_map.c:425   tmbbox[BOXRIGHT] = x + tmthing->radius;
  MOV.L        (RQ27, 104), RQ9
  ADDS.L       RD25, RQ9, RQ8
  MOV.L        RQ8, (RQ26, 12)
// p_map.c:426   tmbbox[BOXLEFT] = x - tmthing->radius;
  MOV.L        (RQ27, 104), RQ9
  MOV.Q        RQ27, tmthing
  SUBS.L       RD25, RQ9, RQ8
  MOV.L        RQ8, (RQ26, 8)
// p_map.c:428   newsubsec = R_PointInSubsector (x,y);
  ADD          RD25, 0, RD10
  ADD          RD24, 0, RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ27
// p_map.c:429   ceilingline = NULL;
  MOV.Q        RQ0, ceilingline
// p_map.c:435   tmfloorz = tmdropoffz = newsubsec->sector->floorheight;
  MOV.Q        (RQ27, 0), RQ22
  MOV.Q        RQ27, (R2, 96)
  MOV.L        (RQ22, 0), RQ9
  MOV.L        RQ9, tmdropoffz
  MOV.L        RQ9, tmfloorz
// p_map.c:436   tmceilingz = newsubsec->sector->ceilingheight;
  MOV.L        (RQ22, 4), RD26
  MOV.L        RD26, tmceilingz
// p_map.c:438   validcount++;
  MOV.L        validcount, RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, validcount
// p_map.c:439   numspechit = 0;
  MOV.L        RD0, numspechit
// p_map.c:441   if ( tmflags & MF_NOCLIP )
  MOV.L        tmflags, RD26
  LUI          1, RD27
  BTST.L       RD27, RD26, .L00801D46
// p_map.c:442   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01923, R0

.L00801D46:
// p_map.c:449   xl = (tmbbox[BOXLEFT] - bmaporgx - MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV          tmbbox, RQ27
  MOV.L        (RQ27, 8), RQ8
  MOV.L        bmaporgx, RD26
  SUBS.L       RQ8, RD26, RQ9
  ADDS.L       RQ9, 0, RQ8
  LUI          2048, RD25
  SUBS.L       RQ8, RD25, RQ8
  SHAR         RQ8, 23, RD24
// p_map.c:450   xh = (tmbbox[BOXRIGHT] - bmaporgx + MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 12), RQ9
  SUBS.L       RQ9, RD26, RQ8
  ADDS.L       RQ8, 0, RQ9
  ADDS.L       RQ9, RD25, RQ9
  SHAR         RQ9, 23, RD20
// p_map.c:451   yl = (tmbbox[BOXBOTTOM] - bmaporgy - MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 4), RQ8
  MOV.L        bmaporgy, RD26
  SUBS.L       RQ8, RD26, RQ9
  ADDS.L       RQ9, 0, RQ8
  SUBS.L       RQ8, RD25, RQ8
  SHAR         RQ8, 23, RD13
  MOV.L        RD13, (R2, 104)
// p_map.c:452   yh = (tmbbox[BOXTOP] - bmaporgy + MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 0), RQ9
  SUBS.L       RQ9, RD26, RQ8
  ADDS.L       RQ8, 0, RQ9
  ADDS.L       RQ9, RD25, RQ9
  SHAR         RQ9, 23, RD21
// p_map.c:454   for (bx=xl ; bx<=xh ; bx++)
  ADD          RD24, 0, RD23
  MOV.L        RD24, (R2, 108)
  BRGT.L       RD20, RD23, .L00801D49

.L00801D47:
// p_map.c:455   for (by=yl ; by<=yh ; by++)
  MOV.L        (R2, 104), RD18
  BRGT.L       RD21, RD18, .L00801D4C

.L00801D4A:
// p_map.c:456   if (!P_BlockThingsIterator(bx,by,PIT_CheckThing))
  MOV          PIT_CheckThing, RQ22
  ADD          RD23, 0, RD10
  ADD          RD18, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          P_BlockThingsIterator, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C006E3
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD21, RD18, .L00801D4A

.L00801D4C:
  ADDS.L       RD23, 1, RD23
  BRLE.L       RD20, RD23, .L00801D47

.L00801D49:
// p_map.c:460   xl = (tmbbox[BOXLEFT] - bmaporgx)>>MAPBLOCKSHIFT;
  MOV          tmbbox, RQ27
  MOV.L        (RQ27, 8), RQ9
  MOV.L        bmaporgx, RD26
  SUBS.L       RQ9, RD26, RQ8
  SHAR         RQ8, 23, RD25
// p_map.c:461   xh = (tmbbox[BOXRIGHT] - bmaporgx)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 12), RQ9
  SUBS.L       RQ9, RD26, RQ8
  SHAR         RQ8, 23, RD20
// p_map.c:462   yl = (tmbbox[BOXBOTTOM] - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 4), RQ9
  MOV.L        bmaporgy, RD26
  SUBS.L       RQ9, RD26, RQ8
  SHAR         RQ8, 23, RD24
  MOV.L        RD24, (R2, 104)
// p_map.c:463   yh = (tmbbox[BOXTOP] - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 0), RQ9
  SUBS.L       RQ9, RD26, RQ8
  SHAR         RQ8, 23, RD21
// p_map.c:465   for (bx=xl ; bx<=xh ; bx++)
  ADD          RD25, 0, RD23
  MOV.L        RD25, (R2, 108)
  BRGT.L       RD20, RD23, .L00801D4F

.L00801D4D:
// p_map.c:466   for (by=yl ; by<=yh ; by++)
  MOV.L        (R2, 104), RD18
  BRGT.L       RD21, RD18, .L00801D52

.L00801D50:
// p_map.c:467   if (!P_BlockLinesIterator (bx,by,PIT_CheckLine))
  MOV          PIT_CheckLine, RQ22
  ADD          RD23, 0, RD10
  ADD          RD18, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          P_BlockLinesIterator, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C006E3
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD21, RD18, .L00801D50

.L00801D52:
  ADDS.L       RD23, 1, RD23
  BRLE.L       RD20, RD23, .L00801D4D

.L00801D4F:
// p_map.c:470   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01923, R0

.L00C006E3:
  ADD          R0, 0, RQ10

.L00C01923:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Light1:
// p_pspr.c:779   {
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ10, 248)

.L00C01924:
  JSR          R1, 0, R0
  .balign 4

P_GiveWeapon:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ9
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD20
// p_inter.c:178   if (netgame
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C4B
  MOV.L        deathmatch, RD27
  BREQ.Q       2, RD27, .L00801C4B

.L00801C4D:
  BRNE.L       R0, RD20, .L00801C4B

.L00801C4C:
  ADD          RQ9, 124, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BRNE.L       R0, RQ18, .L00C006E9
// p_inter.c:186   player->bonuscount += BONUSADD;
  MOV.L        (RQ9, 236), RQ18
  ADDS.L       RQ18, 6, RQ21
  MOV.L        RQ21, (RQ9, 236)
// p_inter.c:187   player->weaponowned[weapon] = true;
  ADD          RQ9, 124, RQ27
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ27, RD8)
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00801C4F
// p_inter.c:190   P_GiveAmmo (player, weaponinfo[weapon].ammo, 5);
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          R0, 5, RD12
  BSR          P_GiveAmmo, R1
  BSR          .L00801C50, R0

.L00801C4F:
// p_inter.c:192   P_GiveAmmo (player, weaponinfo[weapon].ammo, 2);
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          R0, 2, RD12
  BSR          P_GiveAmmo, R1

.L00801C50:
// p_inter.c:193   player->pendingweapon = weapon;
  MOV.L        RD8, (RQ9, 120)
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  BRNE.Q       RQ13, RQ9, .L00801C51
// p_inter.c:196   S_StartSound (NULL, sfx_wpnup);
  ADD          RQ0, 0, RQ10
  ADD          R0, 33, RD11
  BSR          S_StartSound, R1

.L00801C51:
// p_inter.c:197   return false;
  ADD          R0, 0, RD10
  BSR          .L00C0192A, R0

.L00801C4B:
// p_inter.c:200   if (weaponinfo[weapon].ammo != am_noammo)
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  BREQ.Q       5, RQ18, .L00801C52
  BREQ.L       R0, RD20, .L00801C53
// p_inter.c:205   gaveammo = P_GiveAmmo (player, weaponinfo[weapon].ammo, 1);
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RD23
  BSR          .L00801C54, R0

.L00801C53:
// p_inter.c:207   gaveammo = P_GiveAmmo (player, weaponinfo[weapon].ammo, 2);
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          R0, 2, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RD23

.L00801C54:
  BSR          .L00801C55, R0

.L00801C52:
// p_inter.c:210   gaveammo = false;
  ADD          R0, 0, RD23

.L00801C55:
// p_inter.c:212   if (player->weaponowned[weapon])
  ADD          RQ9, 124, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BREQ.L       R0, RQ18, .L00801C56
// p_inter.c:213   gaveweapon = false;
  ADD          R0, 0, RD22
  BSR          .L00801C57, R0

.L00801C56:
// p_inter.c:215   {
  ADD          R0, 1, RD27
  ADD          RD27, 0, RD22
// p_inter.c:217   player->weaponowned[weapon] = true;
  ADD          RQ9, 124, RQ26
  MOV.L        RD27, (RQ26, RD8)
// p_inter.c:218   player->pendingweapon = weapon;
  MOV.L        RD8, (RQ9, 120)

.L00801C57:
// p_inter.c:221   return (gaveweapon || gaveammo);
  BRNE.L       R0, RD22, .L00801C58
  BRNE.L       R0, RD23, .L00801C58
  ADD          R0, 0, RQ18
  BSR          .L00801C59, R0

.L00801C58:
  ADD          R0, 1, RQ18

.L00801C59:
  ADD          RQ18, 0, RD10
  BSR          .L00C0192A, R0

.L00C006E9:
  ADD          R0, 0, RQ10

.L00C0192A:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

SMus_Controller:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
// i_bgb_mus_btsh.c:696   {
// i_bgb_mus_btsh.c:700   if((ch==8) || (ch==9))
  ADD          R0, 8, R5
  CMPEQ.Q      RD9, R5, RQ8
  ADD          R0, 9, R5
  CMPEQ.Q      RD9, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00801268
// i_bgb_mus_btsh.c:701   ch^=1;
  XOR          RD9, 1, RD9

.L00801268:
// i_bgb_mus_btsh.c:703   mcmd=&t_mcmd;
  ADD          R2, 96, RQ21
  ADD          RQ21, 0, RQ18
// i_bgb_mus_btsh.c:704   mcmd->op=3;
  ADD          R0, 3, RD20
  MOVU.B       RD20, (RQ18, 0)
// i_bgb_mus_btsh.c:705   mcmd->ch=ch;
  MOVU.B       RD9, (RQ18, 1)
// i_bgb_mus_btsh.c:706   mcmd->d0=d0;
  MOV.L        (R2, 120), RD27
  MOVU.B       RD27, (RQ18, 2)
// i_bgb_mus_btsh.c:707   mcmd->d1=d1;
  MOV.L        (R2, 116), RD26
  MOVU.B       RD26, (RQ18, 3)
// i_bgb_mus_btsh.c:710   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ18, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:711   return(0);
  ADD          R0, 0, RD10

.L00C01930:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

Key_Event:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD23
  MOV.L        RD11, (R2, 104)
// i_btesh4.c:598   {
// i_btesh4.c:602   switch(c)
  AND          RD23, -1, RQ8
  ADD          RQ8, -127, RQ10
  ADD          R0, 8, RQ6
  BRGTU.Q      RQ6, RQ10, .L0080115E
  LEA.B        .L00C80012, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80012:
  BSR          .L00801156, R0
  BSR          .L00801157, R0
  BSR          .L00801158, R0
  BSR          .L00801159, R0
  BSR          .L0080115A, R0
  BSR          .L0080115C, R0
  BSR          .L0080115B, R0
  BSR          .L0080115D, R0
  BSR          .L0080115E, R0

.L00801156:
// i_btesh4.c:604   case	K_BACKSPACE: 	c1=KEY_BACKSPACE; break;
  ADD          R0, 127, RD18
  BSR          .L00801155, R0

.L00801157:
// i_btesh4.c:605   case	K_UPARROW: 		c1=KEY_UPARROW; break;
  ADD          R0, 173, RD18
  BSR          .L00801155, R0

.L00801158:
// i_btesh4.c:606   case	K_DOWNARROW:	c1=KEY_DOWNARROW; break;
  ADD          R0, 175, RD18
  BSR          .L00801155, R0

.L00801159:
// i_btesh4.c:607   case	K_LEFTARROW: 	c1=KEY_LEFTARROW; break;
  ADD          R0, 172, RD18
  BSR          .L00801155, R0

.L0080115A:
// i_btesh4.c:608   case	K_RIGHTARROW: 	c1=KEY_RIGHTARROW; break;
  ADD          R0, 174, RD18
  BSR          .L00801155, R0

.L0080115B:
// i_btesh4.c:609   case	K_CTRL:			c1=KEY_RCTRL; break;
  ADD          R0, 157, RD18
  BSR          .L00801155, R0

.L0080115C:
// i_btesh4.c:610   case	K_ALT:			c1=KEY_RALT; break;
  ADD          R0, 184, RD18
  BSR          .L00801155, R0

.L0080115D:
// i_btesh4.c:611   case	K_SHIFT:		c1=KEY_RSHIFT; break;
  ADD          R0, 182, RD18
  BSR          .L00801155, R0

.L0080115E:
// i_btesh4.c:613   default:
  ADD          RD23, 0, RD18
// i_btesh4.c:614   c1=c; break;

.L00801155:
// i_btesh4.c:617   if(dn)
  MOV.L        (R2, 104), RD22
  BREQ.L       R0, RD22, .L0080115F
// i_btesh4.c:618   {
  ADD          R2, 80, RQ22
  MOV.L        RD0, (RQ22, 0)
// i_btesh4.c:620   event.data1 = c1;
  MOV.L        RD18, (RQ22, 4)
// i_btesh4.c:621   D_PostEvent(&event);
  ADD          RQ22, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          D_PostEvent, R1
// i_btesh4.c:622   return(0);
  ADD          R0, 0, RD10
  BSR          .L00C01936, R0

.L0080115F:
// i_btesh4.c:625   event.type = ev_keyup;
  ADD          R0, 1, RD22
  ADD          R2, 80, RQ21
  MOV.L        RD22, (RQ21, 0)
// i_btesh4.c:626   event.data1 = c1;
  MOV.L        RD18, (RQ21, 4)
// i_btesh4.c:627   D_PostEvent(&event);
  ADD          RQ21, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          D_PostEvent, R1
// i_btesh4.c:628   return(0);
  ADD          R0, 0, RD10

.L00C01936:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_PointOnDivlineSide:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RQ12, 0, RQ8
// p_maputl.c:175   if (!line->dx)
  MOV.L        (RQ8, 8), RQ18
  BRNE.L       R0, RQ18, .L00801DCB
  MOV.L        (RQ8, 0), RQ18
  MOV.L        (R2, 108), RD27
  BRGT.L       RQ18, RD27, .L00801DCC
// p_maputl.c:178   return line->dy > 0;
  MOV.L        (RQ8, 12), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0193C, R0

.L00801DCC:
// p_maputl.c:180   return line->dy < 0;
  MOV.L        (RQ8, 12), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0193C, R0

.L00801DCB:
// p_maputl.c:181   }
  MOV.L        (RQ8, 12), RQ18
  BRNE.L       R0, RQ18, .L00801DCD
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (R2, 104), RD27
  BRGT.L       RQ9, RD27, .L00801DCE
// p_maputl.c:185   return line->dx < 0;
  MOV.L        (RQ8, 8), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0193C, R0

.L00801DCE:
// p_maputl.c:187   return line->dx > 0;
  MOV.L        (RQ8, 8), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C0193C, R0

.L00801DCD:
// p_maputl.c:190   dx = (x - line->x);
  MOV.L        (RQ8, 0), RQ18
  MOV.L        (R2, 108), RD27
  SUBS.L       RD27, RQ18, RD22
// p_maputl.c:191   dy = (y - line->y);
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (R2, 104), RD13
  SUBS.L       RD13, RQ9, RD21
// p_maputl.c:194   if ( (line->dy ^ line->dx ^ dx ^ dy)&0x80000000 )
  MOV.L        (RQ8, 12), RQ18
  MOV.L        (RQ8, 8), RQ9
  XOR          RQ18, RQ9, RQ23
  XOR          RQ23, RD22, RQ18
  XOR          RQ18, RD21, RQ9
  LUI          0xFFFFFFFFFFF80000, RD12
  BTST.L       RD12, RQ9, .L00801DCF
  MOV.L        (RQ8, 12), RQ23
  XOR          RQ23, RD22, RQ18
  LUI          0xFFFFFFFFFFF80000, RD27
  BTST.L       RD27, RQ18, .L00801DD0
// p_maputl.c:197   return 1;		// (left is negative)
  ADD          R0, 1, RD10
  BSR          .L00C0193C, R0

.L00801DD0:
// p_maputl.c:198   return 0;
  ADD          R0, 0, RD10
  BSR          .L00C0193C, R0

.L00801DCF:
// p_maputl.c:201   left = FixedMul ( line->dy>>8, dx>>8 );
  SHAR         RD22, 8, RQ9
  MOV.L        (RQ8, 12), RQ23
  SHAR         RQ23, 8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 92)
// p_maputl.c:202   right = FixedMul ( dy>>8 , line->dx>>8 );
  MOV.L        (RQ8, 8), RQ9
  SHAR         RQ9, 8, RQ23
  SHAR         RD21, 8, RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD20
// p_maputl.c:204   if (right < left)
  MOV.L        (R2, 92), RD27
  BRLT.L       RD27, RD20, .L00C006F2
// p_maputl.c:206   return 1;			// back side
  ADD          R0, 1, RD10
  BSR          .L00C0193C, R0

.L00C006F2:
  ADD          R0, 0, RQ10

.L00C0193C:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_VileChase:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:1213   if (actor->movedir != DI_NODIR)
  MOV.L        (RQ9, 168), RQ22
  BREQ.Q       8, RQ22, .L00801B6F
// p_enemy.c:1216   viletryx =
  MOV.L        (RQ9, 24), RQ22
  MOV.Q        (RQ9, 136), RQ27
  MOV.L        (RQ27, 60), RQ18
  MOV.L        (RQ9, 168), RQ21
  MOV          xspeed, RQ26
  MOV.L        (RQ26, RQ21), RQ20
  MULS.L       RQ18, RQ20, RQ21
  ADDS.L       RQ22, RQ21, RD26
// p_enemy.c:1218   viletryy =
  MOV.L        (RQ9, 28), RQ20
  MOV.L        (RQ9, 168), RQ22
  MOV          yspeed, RQ13
  MOV.L        (RQ13, RQ22), RQ21
  MULS.L       RQ18, RQ21, RQ22
  ADDS.L       RQ20, RQ22, RD13
// p_enemy.c:1221   xl = (viletryx - bmaporgx - MAXRADIUS*2)>>MAPBLOCKSHIFT;
  MOV.L        bmaporgx, RD12
  SUBS.L       RD26, RD12, RQ18
  ADD          RQ18, 0, RQ21
  LUI          4096, RD11
  SUBS.L       RQ21, RD11, RQ21
  SHAR         RQ21, 23, RD10
// p_enemy.c:1222   xh = (viletryx - bmaporgx + MAXRADIUS*2)>>MAPBLOCKSHIFT;
  SUBS.L       RD26, RD12, RQ20
  MOV.L        RD26, viletryx
  ADD          RQ20, 0, RQ22
  ADDS.L       RQ22, RD11, RQ22
  SHAR         RQ22, 23, RD26
// p_enemy.c:1223   yl = (viletryy - bmaporgy - MAXRADIUS*2)>>MAPBLOCKSHIFT;
  MOV.L        bmaporgy, RD12
  SUBS.L       RD13, RD12, RQ18
  ADD          RQ18, 0, RQ21
  SUBS.L       RQ21, RD11, RQ21
  SHAR         RQ21, 23, RD17
  MOV.L        RD17, (R2, 124)
// p_enemy.c:1224   yh = (viletryy - bmaporgy + MAXRADIUS*2)>>MAPBLOCKSHIFT;
  SUBS.L       RD13, RD12, RQ20
  MOV.L        RD13, viletryy
  ADD          RQ20, 0, RQ22
  ADDS.L       RQ22, RD11, RQ22
  SHAR         RQ22, 23, RD13
  MOV.L        RD13, (R2, 120)
// p_enemy.c:1226   vileobj = actor;
  MOV.Q        RQ9, vileobj
// p_enemy.c:1227   for (bx=xl ; bx<=xh ; bx++)
  ADDS.L       RD10, 0, RD12
  MOV.L        RD10, (R2, 132)
  MOV.L        RD26, (R2, 128)
  MOV.L        RD12, (R2, 116)
  BRGT.L       RD26, RD12, .L00801B72

.L00801B70:
// p_enemy.c:1228   {
  MOV.L        (R2, 124), RD8
  MOV.L        (R2, 120), RD27
  BRGT.L       RD27, RD8, .L00801B75

.L00801B73:
// p_enemy.c:1234   if (!P_BlockThingsIterator(bx,by,PIT_VileCheck))
  MOV          PIT_VileCheck, RQ27
  ADD          RQ27, 0, RQ12
  MOV.L        (R2, 116), RD10
  ADDS.L       RD8, 0, RD11
  BSR          P_BlockThingsIterator, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00801B76
// p_enemy.c:1237   temp = actor->target;
  MOV.Q        (RQ9, 176), RQ27
  MOV.Q        RQ27, (R2, 104)
// p_enemy.c:1238   actor->target = corpsehit;
  MOV.Q        corpsehit, RQ26
  MOV.Q        RQ26, (RQ9, 176)
// p_enemy.c:1239   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1240   actor->target = temp;
  MOV.Q        RQ27, (RQ9, 176)
// p_enemy.c:1242   P_SetMobjState (actor, S_VILE_HEAL1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 266, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:1243   S_StartSound (corpsehit, sfx_slop);
  MOV.Q        corpsehit, RQ10
  ADD          R0, 31, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1244   info = corpsehit->info;
  MOV.Q        corpsehit, RQ26
  MOV.Q        (RQ26, 136), RQ23
// p_enemy.c:1246   P_SetMobjState (corpsehit,info->raisestate);
  MOV.L        (RQ23, 88), RQ18
  MOV.Q        corpsehit, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:1247   corpsehit->height <<= 2;
  MOV.Q        corpsehit, RQ26
  MOV.L        (RQ26, 108), RQ21
  SHAD.L       RQ21, 2, RQ20
  MOV.L        RQ20, (RQ26, 108)
// p_enemy.c:1248   corpsehit->flags = info->flags;
  MOV.L        (RQ23, 84), RQ22
  MOV.L        RQ22, (RQ26, 160)
// p_enemy.c:1249   corpsehit->health = info->spawnhealth;
  MOV.L        (RQ23, 8), RQ18
  MOV.L        RQ18, (RQ26, 164)
// p_enemy.c:1250   corpsehit->target = NULL;
  MOV.Q        RQ0, (RQ26, 176)
// p_enemy.c:1252   return;
  BSR          .L00C01942, R0

.L00801B76:
  ADDS.L       RD8, 1, RD8
  MOV.L        (R2, 120), RD27
  BRLE.L       RD27, RD8, .L00801B73

.L00801B75:
  MOV.L        (R2, 116), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 116)
  MOV.L        (R2, 128), RD26
  BRLE.L       RD26, RD27, .L00801B70

.L00801B72:

.L00801B6F:
// p_enemy.c:1259   A_Chase (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_Chase, R1

.L00C01942:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

fwrite:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -416, R2
  MOV.Q        RQ10, (R2, 184)
  ADD          RQ11, 0, RQ8
  MOV.Q        RQ12, (R2, 168)
  ADD          RQ13, 0, RQ18
// pdpc201/stdio.c:978   
  MOV.L        RD0, (R2, 148)
// pdpc201/stdio.c:979   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 152)
// pdpc201/stdio.c:981   
  BRNE.Q       R0, RQ18, .L00800361
// pdpc201/stdio.c:982   
  ADD          R0, -1, RQ10
  BSR          .L00C01948, R0

.L00800361:
// pdpc201/stdio.c:984   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:986   
  MOV.Q        (R2, 168), RQ27
  BRNE.Q       1, RQ27, .L00800362
// pdpc201/stdio.c:987   
  ADD          RQ8, 0, RQ21
  BSR          .L00800363, R0

.L00800362:
  BRNE.Q       1, RQ8, .L00800364
// pdpc201/stdio.c:991   
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 0, RQ21
  BSR          .L00800365, R0

.L00800364:
// pdpc201/stdio.c:995   
  MOV.Q        (R2, 168), RQ27
  MULU.Q       RQ8, RQ27, RQ21

.L00800365:

.L00800363:
// pdpc201/stdio.c:997   
  MOV.Q        (RQ18, 32), RQ27
  BRGEU.Q      RQ27, RQ21, .L00800366
// pdpc201/stdio.c:999   
  MOV.B        RD0, (RQ18, 8)
  MOV.L        (RQ18, 68), RQ22
  BRNE.Q       3, RQ22, .L00800367
// pdpc201/stdio.c:1003   
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 8)

.L00800367:

.L00800366:
// pdpc201/stdio.c:1008   
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 8)
// pdpc201/stdio.c:1010   
  MOV.B        (RQ18, 8), RQ22
  BRNE.L       R0, RQ22, .L00800368
// pdpc201/stdio.c:1011   
  ADD          R2, 152, RQ9
  MOV.Q        (R2, 184), RQ10
  ADD          RQ8, 0, RQ11
  MOV.Q        (R2, 168), RQ12
  ADD          RQ18, 0, RQ13
  ADD          RQ21, 0, RQ14
  ADD          RQ9, 0, RQ15
  BSR          fwriteSlow, R1
// pdpc201/stdio.c:1013   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:1014   
  MOV.Q        (R2, 152), RQ10
  BSR          .L00C01948, R0
  BSR          .L00800369, R0

.L00800368:
// pdpc201/stdio.c:1017   
  ADD          R2, 148, RQ9
  MOV.L        (RQ18, 0), RQ22
  ADD          RQ22, 0, RD10
  MOV.Q        (R2, 184), RQ11
  ADD          RQ21, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __write, R1
  ADD          RQ10, 0, RQ20
  ADDS.L       RQ20, 0, RQ23
  MOV.L        (R2, 148), RD27
  BREQ.L       R0, RD27, .L0080036A
// pdpc201/stdio.c:1023   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// pdpc201/stdio.c:1025   
  ADD          RQ0, 0, RQ23
// pdpc201/stdio.c:1026   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ23, 0, RQ20
  MOV.L        RQ20, (RQ9, 0)

.L0080036A:
  MOV.Q        (R2, 168), RQ27
  BRNE.Q       1, RQ27, .L0080036B
  BRNE.Q       RQ8, RQ23, .L0080036C
// pdpc201/stdio.c:1032   
  ADD          R0, 1, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 152)
  BSR          .L0080036D, R0

.L0080036C:
// pdpc201/stdio.c:1036   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 152)

.L0080036D:
  BSR          .L0080036E, R0

.L0080036B:
  BRNE.Q       1, RQ8, .L0080036F
// pdpc201/stdio.c:1041   
  ADD          RQ23, 0, RQ27
  MOV.Q        RQ27, (R2, 152)
  BSR          .L00800370, R0

.L0080036F:
// pdpc201/stdio.c:1045   
  DIVU.Q       RQ23, RQ8, RQ27
  MOV.Q        RQ27, (R2, 152)

.L00800370:

.L0080036E:
// pdpc201/stdio.c:1047   
  MOV.Q        (RQ18, 16), RQ27
  ADD          RQ27, RQ23, RQ26
  MOV.Q        RQ26, (RQ18, 16)
// pdpc201/stdio.c:1049   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:1050   
  MOV.Q        (R2, 152), RQ10
  BSR          .L00C01948, R0

.L00800369:

.L00C01948:
  ADD          R2, 416, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_GiveAmmo:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ18
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD22
// p_inter.c:82   if (ammo == am_noammo)
  BREQ.Q       5, RD8, .L00C006F8
// p_inter.c:86   if (ammo > NUMAMMO)
  BRLE.L       4, RD8, .L00801C32
// p_inter.c:87   I_Error ("P_GiveAmmo: bad type %i", ammo);
  MOV          .L00C0194F, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          I_Error, R1

.L00801C32:
// p_inter.c:89   if ( player->ammo[ammo] == player->maxammo[ammo]  )
  ADD          RQ18, 160, RQ13
  MOV.L        (RQ13, RD8), RQ9
  ADD          RQ18, 176, RQ13
  MOV.L        (RQ13, RD8), RQ23
  BREQ.Q       RQ23, RQ9, .L00C006F8
// p_inter.c:92   if (num)
  BREQ.L       R0, RD22, .L00801C33
// p_inter.c:93   num *= clipammo[ammo];
  MOV          clipammo, RQ13
  MOV.L        (RQ13, RD8), RQ9
  MULS.L       RQ9, RD22, RD22
  BSR          .L00801C34, R0

.L00801C33:
// p_inter.c:95   num = clipammo[ammo]/2;
  MOV          clipammo, RQ13
  MOV.L        (RQ13, RD8), RQ23
  ADD          RQ23, 0, RD22
  ADD          R0, 2, RD13
  DIVS.L       RD22, RD13, RD22

.L00801C34:
// p_inter.c:97   if (gameskill == sk_baby
  MOV.L        gameskill, RD13
  CMPEQ.Q      RD13, R0, RQ9
  ADD          R0, 4, R5
  CMPEQ.Q      RD13, R5, RQ23
  OR           RQ9, RQ23, RQ21
  BREQ.L       R0, RQ21, .L00801C35
// p_inter.c:102   num <<= 1;
  SHAD.L       RD22, 1, RD22

.L00801C35:
// p_inter.c:106   oldammo = player->ammo[ammo];
  ADD          RQ18, 160, RQ13
  MOV.L        (RQ13, RD8), RD20
// p_inter.c:107   player->ammo[ammo] += num;
  ADDS.L       RD20, RD22, RQ23
  MOV.L        RQ23, (RQ13, RD8)
// p_inter.c:109   if (player->ammo[ammo] > player->maxammo[ammo])
  ADD          RQ18, 176, RQ13
  MOV.L        (RQ13, RD8), RQ9
  BRLE.L       RQ9, RQ23, .L00801C36
// p_inter.c:110   player->ammo[ammo] = player->maxammo[ammo];
  ADD          RQ18, 176, RQ13
  MOV.L        (RQ13, RD8), RQ9
  ADD          RQ18, 160, RQ13
  MOV.L        RQ9, (RQ13, RD8)

.L00801C36:
// p_inter.c:115   if (oldammo)
  BREQ.L       R0, RD20, .L00801C37
// p_inter.c:116   return true;	
  ADD          R0, 1, RD10
  BSR          .L00C0194E, R0

.L00801C37:
// p_inter.c:121   switch (ammo)
  BREQ.L       R0, RD8, .L00801C39
  BREQ.Q       1, RD8, .L00801C3A
  BREQ.Q       2, RD8, .L00801C3B
  BREQ.Q       3, RD8, .L00801C3C
  BSR          .L00801C3D, R0

.L00801C39:
// p_inter.c:123   case am_clip:
  MOV.L        (RQ18, 116), RQ9
  BRNE.L       R0, RQ9, .L00801C3E
  ADD          RQ18, 124, RQ13
  MOV.L        (RQ13, 12), RQ9
  BREQ.L       R0, RQ9, .L00801C3F
// p_inter.c:127   player->pendingweapon = wp_chaingun;
  ADD          R0, 3, RD13
  MOV.L        RD13, (RQ18, 120)
  BSR          .L00801C40, R0

.L00801C3F:
// p_inter.c:129   player->pendingweapon = wp_pistol;
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ18, 120)

.L00801C40:

.L00801C3E:
// p_inter.c:130   }
  BSR          .L00801C38, R0

.L00801C3A:
// p_inter.c:133   case am_shell:
  MOV.L        (RQ18, 116), RQ23
  BREQ.L       R0, RQ23, .L00801C42
  MOV.L        (RQ18, 116), RQ21
  BREQ.Q       1, RQ21, .L00801C42
  BSR          .L00801C41, R0

.L00801C42:
  ADD          RQ18, 124, RQ13
  MOV.L        (RQ13, 8), RQ9
  BREQ.L       R0, RQ9, .L00801C44
// p_inter.c:138   player->pendingweapon = wp_shotgun;
  ADD          R0, 2, RD13
  MOV.L        RD13, (RQ18, 120)

.L00801C44:

.L00801C41:
// p_inter.c:139   }
  BSR          .L00801C38, R0

.L00801C3B:
// p_inter.c:142   case am_cell:
  MOV.L        (RQ18, 116), RQ23
  BREQ.L       R0, RQ23, .L00801C46
  MOV.L        (RQ18, 116), RQ21
  BREQ.Q       1, RQ21, .L00801C46
  BSR          .L00801C45, R0

.L00801C46:
  ADD          RQ18, 124, RQ13
  MOV.L        (RQ13, 20), RQ9
  BREQ.L       R0, RQ9, .L00801C48
// p_inter.c:147   player->pendingweapon = wp_plasma;
  ADD          R0, 5, RD13
  MOV.L        RD13, (RQ18, 120)

.L00801C48:

.L00801C45:
// p_inter.c:148   }
  BSR          .L00801C38, R0

.L00801C3C:
// p_inter.c:151   case am_misl:
  MOV.L        (RQ18, 116), RQ23
  BRNE.L       R0, RQ23, .L00801C49
  ADD          RQ18, 124, RQ13
  MOV.L        (RQ13, 16), RQ9
  BREQ.L       R0, RQ9, .L00801C4A
// p_inter.c:155   player->pendingweapon = wp_missile;
  ADD          R0, 4, RD13
  MOV.L        RD13, (RQ18, 120)

.L00801C4A:

.L00801C49:

.L00801C3D:
// p_inter.c:157   default:

.L00801C38:
// p_inter.c:161   return true;
  ADD          R0, 1, RD10
  BSR          .L00C0194E, R0

.L00C006F8:
  ADD          R0, 0, RQ10

.L00C0194E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

pow:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R56, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// pdpc201/math.c:762   
  MOV.Q        (R2, 104), RQ56
  FCMP/GT      RQ0, RQ56, RQ6
  BREQ.Q       RQ6, R0, .L0080088A
// pdpc201/math.c:763   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 33, RD9
  MOV.L        RD9, (RQ18, 0)
// pdpc201/math.c:765   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01955, R0

.L0080088A:
// pdpc201/math.c:766   
  MOV.Q        (R2, 96), RQ56
  FCMP/EQ      RQ56, RQ0, RQ6
  BREQ.Q       RQ6, R0, .L0080088B
// pdpc201/math.c:768   
  ADD          R0, 0x3FF00000, RQ10
  LDSH32       RQ10, 0, RQ10
  BSR          .L00C01955, R0

.L0080088B:
// pdpc201/math.c:770   
  MOV.Q        (R2, 104), RQ10
  BSR          log, R1
  FMOVID       RQ10, RQ56
  MOV.Q        (R2, 96), RQ9
  FMUL         RQ9, RQ56, RQ10
  BSR          exp, R1
  FMOVID       RQ10, RQ56
  FMOVDI       RQ56, RQ10

.L00C01955:
  ADD          R2, 432, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R56
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawMaskedColumn:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ8
// r_things.c:400   basetexturemid = dc_texturemid;
  MOV.L        dc_texturemid, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 100)
// r_things.c:402   for ( ; column->topdelta != 0xff ; ) 
  MOVU.B       (RQ8, 0), RQ18
  BREQ.Q       255, RQ18, .L008027D6

.L008027D4:
// r_things.c:406   topscreen = sprtopscreen + spryscale*column->topdelta;
  MOVU.B       (RQ8, 0), RQ18
  MOV.L        spryscale, RD27
  MULS.L       RD27, RQ18, RQ9
  MOV.L        sprtopscreen, RD26
  ADDS.L       RD26, RQ9, RD23
// r_things.c:407   bottomscreen = topscreen + spryscale*column->length;
  MOVU.B       (RQ8, 1), RQ18
  MULS.L       RD27, RQ18, RQ9
  ADDS.L       RD23, RQ9, RD22
// r_things.c:409   dc_yl = (topscreen+FRACUNIT-1)>>FRACBITS;
  ADDS.L       RD23, 0x00010000, RQ18
  ADDS.L       RQ18, -1, RQ9
  SHAR         RQ9, 16, RD27
  MOV.L        RD27, dc_yl
// r_things.c:410   dc_yh = (bottomscreen-1)>>FRACBITS;
  ADDS.L       RD22, -1, RQ18
  SHAR         RQ18, 16, RD27
// r_things.c:412   if (dc_yh >= mfloorclip[dc_x])
  MOV.Q        mfloorclip, RQ26
  MOV.L        dc_x, RD13
  MOV.W        (RQ26, RD13), RQ9
  MOV.L        RD27, dc_yh
  BRLT.L       RQ9, RD27, .L008027D7
// r_things.c:413   dc_yh = mfloorclip[dc_x]-1;
  MOV.Q        mfloorclip, RQ27
  MOV.L        dc_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, -1, RD27
  MOV.L        RD27, dc_yh

.L008027D7:
// r_things.c:414   if (dc_yl <= mceilingclip[dc_x])
  MOV.Q        mceilingclip, RQ27
  MOV.L        dc_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  MOV.L        dc_yl, RD27
  BRGT.L       RQ9, RD27, .L008027D8
// r_things.c:415   dc_yl = mceilingclip[dc_x]+1;
  MOV.Q        mceilingclip, RQ27
  MOV.L        dc_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, 1, RD27
  MOV.L        RD27, dc_yl

.L008027D8:
// r_things.c:417   if (dc_yl <= dc_yh)
  MOV.L        dc_yl, RD27
  MOV.L        dc_yh, RD26
  BRGT.L       RD26, RD27, .L008027D9
// r_things.c:418   {
  ADD          RQ8, 3, RQ27
  MOV.Q        RQ27, dc_source
// r_things.c:420   dc_texturemid = basetexturemid - (column->topdelta<<FRACBITS);
  MOVU.B       (RQ8, 0), RQ9
  SHAD.L       RQ9, 16, RQ18
  MOV.L        (R2, 100), RD26
  SUBS.L       RD26, RQ18, RD27
  MOV.L        RD27, dc_texturemid
// r_things.c:425   colfunc ();	
  MOV.Q        colfunc, RQ27
  JSR          RQ27, 0, R1

.L008027D9:
// r_things.c:426   }
  MOVU.B       (RQ8, 1), RQ9
  ADD          RQ8, RQ9, RQ21
  ADD          RQ21, 4, RQ20
  ADD          RQ20, 0, RQ8
  MOVU.B       (RQ8, 0), RQ18
  BRNE.Q       255, RQ18, .L008027D4

.L008027D6:
// r_things.c:430   dc_texturemid = basetexturemid;
  MOV.L        (R2, 100), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_texturemid

.L00C0195B:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

realloc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
// pdpc201/stdlib.c:227   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  MOV.Q        _realloc_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C01961:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

TKMM_FxiToSize:
// tk_core/tk_mmllist.c:544   
  BRGE.L       8, RD10, .L00800A37
  JSR          R1, 0, R0

.L00800A37:
// tk_core/tk_mmllist.c:545   
  AND          RD10, 7, RQ13
  OR           RQ13, 8, RD12
  SHAR         RD10, 3, RQ13
  AND          RQ13, 31, RD11
// tk_core/tk_mmllist.c:546   
  SHAD.L       RD12, RD11, RD17
// tk_core/tk_mmllist.c:547   
  ADD          RD17, 0, RD10

.L00C01962:
  JSR          R1, 0, R0
  .balign 4

R_PointOnSide:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RQ12, 0, RQ8
// r_main.c:176   if (!node->dx)
  MOV.L        (RQ8, 8), RQ18
  BRNE.L       R0, RQ18, .L00802646
  MOV.L        (RQ8, 0), RQ18
  MOV.L        (R2, 108), RD27
  BRGT.L       RQ18, RD27, .L00802647
// r_main.c:179   return node->dy > 0;
  MOV.L        (RQ8, 12), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01968, R0

.L00802647:
// r_main.c:181   return node->dy < 0;
  MOV.L        (RQ8, 12), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01968, R0

.L00802646:
// r_main.c:182   }
  MOV.L        (RQ8, 12), RQ18
  BRNE.L       R0, RQ18, .L00802648
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (R2, 104), RD27
  BRGT.L       RQ9, RD27, .L00802649
// r_main.c:186   return node->dx < 0;
  MOV.L        (RQ8, 8), RQ18
  CMPLT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01968, R0

.L00802649:
// r_main.c:188   return node->dx > 0;
  MOV.L        (RQ8, 8), RQ18
  CMPGT.Q      RQ18, R0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01968, R0

.L00802648:
// r_main.c:191   dx = (x - node->x);
  MOV.L        (RQ8, 0), RQ18
  MOV.L        (R2, 108), RD27
  SUBS.L       RD27, RQ18, RD22
// r_main.c:192   dy = (y - node->y);
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (R2, 104), RD13
  SUBS.L       RD13, RQ9, RD21
// r_main.c:195   if ( (node->dy ^ node->dx ^ dx ^ dy)&0x80000000 )
  MOV.L        (RQ8, 12), RQ18
  MOV.L        (RQ8, 8), RQ9
  XOR          RQ18, RQ9, RQ23
  XOR          RQ23, RD22, RQ18
  XOR          RQ18, RD21, RQ9
  LUI          0xFFFFFFFFFFF80000, RD12
  BTST.L       RD12, RQ9, .L0080264A
  MOV.L        (RQ8, 12), RQ23
  XOR          RQ23, RD22, RQ18
  LUI          0xFFFFFFFFFFF80000, RD27
  BTST.L       RD27, RQ18, .L0080264B
// r_main.c:200   return 1;
  ADD          R0, 1, RD10
  BSR          .L00C01968, R0

.L0080264B:
// r_main.c:201   }
  ADD          R0, 0, RD10
  BSR          .L00C01968, R0

.L0080264A:
// r_main.c:205   left = FixedMul ( node->dy>>FRACBITS , dx );
  MOV.L        (RQ8, 12), RQ9
  SHAR         RQ9, 16, RQ23
  ADD          RQ23, 0, RD10
  ADD          RD22, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 92)
// r_main.c:206   right = FixedMul ( dy , node->dx>>FRACBITS );
  MOV.L        (RQ8, 8), RQ18
  SHAR         RQ18, 16, RQ9
  ADD          RD21, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD20
// r_main.c:208   if (right < left)
  MOV.L        (R2, 92), RD27
  BRLT.L       RD27, RD20, .L00C00703
// r_main.c:214   return 1;			
  ADD          R0, 1, RD10
  BSR          .L00C01968, R0

.L00C00703:
  ADD          R0, 0, RQ10

.L00C01968:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_rotate:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RD12, 0, RD22
// am_map.c:1194   tmpx =
  SHLR         RD22, 19, RQ18
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RQ18), RQ9
  MOV.L        (RQ20, 0), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  SHLR         RD22, 19, RQ18
  MOV          finesine, RQ27
  MOV.L        (RQ27, RQ18), RQ9
  MOV.L        (RQ21, 0), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ8, RQ23, RD27
  MOV.L        RD27, (R2, 104)
// am_map.c:1198   *y   =
  SHLR         RD22, 19, RQ18
  MOV          finesine, RQ26
  MOV.L        (RQ26, RQ18), RQ9
  MOV.L        (RQ20, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  SHLR         RD22, 19, RQ18
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RQ18), RQ9
  MOV.L        (RQ21, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ23, RQ18, RQ9
  MOV.L        RQ9, (RQ21, 0)
// am_map.c:1202   *x = tmpx;
  MOV.L        RD27, (RQ20, 0)

.L00C0196E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Lower:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R20, (R2, 24)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R27, (R2, 48)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ23
  LUI          2048, RD22
  LUI          96, RD20
  ADD          R0, 1, RD27
// p_pspr.c:390   {	
  MOV.L        (RQ23, 16), RQ18
  ADD          RQ18, 0, RQ9
  ADDS.L       RQ9, RD20, RQ9
  MOV.L        RQ9, (RQ23, 16)
// p_pspr.c:394   if (psp->sy < WEAPONBOTTOM )
  MOV.L        (RQ23, 16), RQ18
  BRLT.L       RD22, RQ18, .L00C01974
// p_pspr.c:398   if (player->playerstate == PST_DEAD)
  MOV.L        (RQ8, 8), RQ9
  BRNE.Q       1, RQ9, .L00801EAA
// p_pspr.c:399   {
  MOV.L        RD22, (RQ23, 16)
// p_pspr.c:403   return;		
  BSR          .L00C01974, R0

.L00801EAA:
// p_pspr.c:408   if (!player->health)
  MOV.L        (RQ8, 36), RQ18
  BRNE.L       R0, RQ18, .L00801EAB
// p_pspr.c:411   P_SetPsprite (player,  ps_weapon, S_NULL);
  ADD          RQ8, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:412   return;	
  BSR          .L00C01974, R0

.L00801EAB:
// p_pspr.c:415   player->readyweapon = player->pendingweapon; 
  MOV.L        (RQ8, 120), RQ9
  MOV.L        RQ9, (RQ8, 116)
// p_pspr.c:417   P_BringUpWeapon (player);
  ADD          RQ8, 0, RQ10
  BSR          P_BringUpWeapon, R1

.L00C01974:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

W_RawCopyB:
// w_wad.c:739   cs=src;
  ADD          RQ11, 0, RQ13
// w_wad.c:740   ct=dst; cte=dst+sz;
  ADD          RQ10, 0, RQ17
  ADD          RQ10, RD12, RQ16
// w_wad.c:741   while(ct<cte)
  BSR          .L008028E6, R0

.L008028E4:
// w_wad.c:742   {
  MOV.Q        (RQ13, 0), RQ15
  MOV.Q        RQ15, (RQ17, 0)
// w_wad.c:744   ((u64 *)ct)[1]=((u64 *)cs)[1];
  MOV.Q        (RQ13, 8), RQ15
  MOV.Q        RQ15, (RQ17, 8)
// w_wad.c:745   ct+=16; cs+=16;
  ADD          RQ17, 16, RQ17
  ADD          RQ13, 16, RQ13

.L008028E6:
  BRLT.Q       RQ16, RQ17, .L008028E4

.L008028E5:

.L00C01975:
  JSR          R1, 0, R0

P_LineOpening:
// p_maputl.c:309   if (linedef->sidenum[1] == -1)
  ADD          RQ10, 36, RQ13
  MOV.W        (RQ13, 2), RQ12
  BRNE.Q       -1, RQ12, .L00801DD1
// p_maputl.c:312   openrange = 0;
  ADDS.L       RD0, 0, RD11
// p_maputl.c:313   return;
  MOV.L        RD11, openrange
  JSR          R1, 0, R0

.L00801DD1:
// p_maputl.c:316   front = linedef->frontsector;
  MOV.Q        (RQ10, 64), RQ11
// p_maputl.c:317   back = linedef->backsector;
  MOV.Q        (RQ10, 72), RQ17
// p_maputl.c:319   if (front->ceilingheight < back->ceilingheight)
  MOV.L        (RQ11, 4), RQ12
  MOV.L        (RQ17, 4), RQ16
  BRGE.L       RQ16, RQ12, .L00801DD2
// p_maputl.c:320   opentop = front->ceilingheight;
  MOV.L        (RQ11, 4), RD15
  MOV.L        RD15, opentop
  BSR          .L00801DD3, R0

.L00801DD2:
// p_maputl.c:322   opentop = back->ceilingheight;
  MOV.L        (RQ17, 4), RD15
  MOV.L        RD15, opentop

.L00801DD3:
// p_maputl.c:324   if (front->floorheight > back->floorheight)
  MOV.L        (RQ11, 0), RQ12
  MOV.L        (RQ17, 0), RQ16
  BRLE.L       RQ16, RQ12, .L00801DD4
// p_maputl.c:325   {
  MOV.L        (RQ11, 0), RD15
// p_maputl.c:327   lowfloor = back->floorheight;
  MOV.L        (RQ17, 0), RD14
  MOV.L        RD15, openbottom
  MOV.L        RD14, lowfloor
  BSR          .L00801DD5, R0

.L00801DD4:
// p_maputl.c:330   {
  MOV.L        (RQ17, 0), RD15
// p_maputl.c:332   lowfloor = front->floorheight;
  MOV.L        (RQ11, 0), RD14
  MOV.L        RD15, openbottom
  MOV.L        RD14, lowfloor

.L00801DD5:
// p_maputl.c:335   openrange = opentop - openbottom;
  MOV.L        opentop, RD15
  MOV.L        openbottom, RD14
  SUBS.L       RD15, RD14, RD31
  MOV.L        RD31, openrange

.L00C01976:
  JSR          R1, 0, R0

_stricmp:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ21
  MOV.Q        RQ11, (R2, 80)
// pdpc201/string.c:1828   
  BSR          _locale_is_utf8, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L008006B6
  ADD          RQ21, 0, RQ10
  BSR          _string_is_nonascii, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008006B7
  MOV.Q        (R2, 80), RQ10
  BSR          _string_is_nonascii, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008006B7
  BSR          .L008006B8, R0

.L008006B7:
// pdpc201/string.c:1831   
  ADD          RQ21, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  BSR          _stricmp_u8, R1
  BSR          .L00C0197C, R0

.L008006B8:

.L008006B6:
// pdpc201/string.c:1837   
  ADD          RQ21, 0, RQ9
// pdpc201/string.c:1838   
  MOV.Q        (R2, 80), RQ22
// pdpc201/string.c:1871   
  BSR          .L008006B9, R0

.L008006BA:
// pdpc201/string.c:1875   
  MOVU.B       (RQ9, 0), RQ18
  ADD          RQ18, 0, RD10
  BSR          tolower, R1
  ADDS.L       RQ10, 0, RD8
// pdpc201/string.c:1876   
  MOVU.B       (RQ22, 0), RQ18
  ADD          RQ18, 0, RD10
  BSR          tolower, R1
  ADD          RQ10, 0, RD23
// pdpc201/string.c:1877   
  BRGE.L       RD23, RD8, .L008006BB
// pdpc201/string.c:1878   
  ADD          R0, -1, RD10
  BSR          .L00C0197C, R0
  BSR          .L008006BC, R0

.L008006BB:
  BRLE.L       RD23, RD8, .L008006BD
// pdpc201/string.c:1880   
  ADD          R0, 1, RD10
  BSR          .L00C0197C, R0

.L008006BD:

.L008006BC:
// pdpc201/string.c:1881   
  ADD          RQ9, 1, RQ9
// pdpc201/string.c:1882   
  ADD          RQ22, 1, RQ22

.L008006B9:
  MOVU.B       (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L008006BA

.L008006BE:
// pdpc201/string.c:1883   
  MOVU.B       (RQ22, 0), RQ18
  BRNE.L       R0, RQ18, .L008006BF
// pdpc201/string.c:1894   
  ADD          R0, 0, RD10
  BSR          .L00C0197C, R0
  BSR          .L008006C0, R0

.L008006BF:
// pdpc201/string.c:1896   
  ADD          R0, -1, RD10
  BSR          .L00C0197C, R0

.L008006C0:

.L00C0197C:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_ChangeFloor:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C01983, RQ18
// p_acspec.c:994   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C01982:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

T_VerticalDoor:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
// p_doors.c:68   switch(door->direction)
  MOV.L        (RQ18, 48), RQ9
  BREQ.L       R0, RQ9, .L00801A4B
  BREQ.Q       2, RQ9, .L00801A4C
  BREQ.Q       -1, RQ9, .L00801A4D
  BREQ.Q       1, RQ9, .L00801A4E
  BSR          .L00801A4A, R0

.L00801A4B:
// p_doors.c:72   if (!--door->topcountdown)
  MOV.L        (RQ18, 56), RQ9
  ADDS.L       RQ9, -1, RQ21
  MOV.L        RQ21, (RQ18, 56)
  BRNE.L       R0, RQ21, .L00801A4F
// p_doors.c:73   {
  MOV.L        (RQ18, 24), RQ9
  BREQ.Q       5, RQ9, .L00801A51
  BREQ.L       R0, RQ9, .L00801A52
  BREQ.Q       1, RQ9, .L00801A53
  BSR          .L00801A54, R0

.L00801A51:
// p_doors.c:76   case blazeRaise:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:78   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 89, RD11
  BSR          S_StartSound, R1
// p_doors.c:80   break;
  BSR          .L00801A50, R0

.L00801A52:
// p_doors.c:82   case vld_normal:
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:84   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 21, RD11
  BSR          S_StartSound, R1
// p_doors.c:86   break;
  BSR          .L00801A50, R0

.L00801A53:
// p_doors.c:88   case close30ThenOpen:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:90   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1
// p_doors.c:92   break;
  BSR          .L00801A50, R0

.L00801A54:
// p_doors.c:94   default:

.L00801A50:

.L00801A4F:
// p_doors.c:97   }
  BSR          .L00801A4A, R0

.L00801A4C:
// p_doors.c:102   if (!--door->topcountdown)
  MOV.L        (RQ18, 56), RQ9
  ADDS.L       RQ9, -1, RQ21
  MOV.L        RQ21, (RQ18, 56)
  BRNE.L       R0, RQ21, .L00801A55
// p_doors.c:103   {
  MOV.L        (RQ18, 24), RQ9
  BREQ.Q       4, RQ9, .L00801A57
  BSR          .L00801A58, R0

.L00801A57:
// p_doors.c:106   case raiseIn5Mins:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:108   door->type = vld_normal;
  MOV.L        RD0, (RQ18, 24)
// p_doors.c:109   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1
// p_doors.c:111   break;
  BSR          .L00801A56, R0

.L00801A58:
// p_doors.c:113   default:

.L00801A56:

.L00801A55:
// p_doors.c:116   }
  BSR          .L00801A4A, R0

.L00801A4D:
// p_doors.c:121   res = T_MovePlane(door->sector,
  MOV.L        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 32), RQ8
  MOV.L        (RQ8, 0), RQ21
  MOV.L        (RQ18, 44), RQ22
  ADD          RQ8, 0, RQ10
  ADD          RQ22, 0, RD11
  ADD          RQ21, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 1, RD14
  ADDS.L       RQ9, 0, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD20
// p_doors.c:125   if (res == pastdest)
  BRNE.Q       2, RD20, .L00801A59
// p_doors.c:126   {
  MOV.L        (RQ18, 24), RQ9
  BREQ.Q       5, RQ9, .L00801A5B
  BREQ.Q       7, RQ9, .L00801A5C
  BREQ.L       R0, RQ9, .L00801A5D
  BREQ.Q       2, RQ9, .L00801A5E
  BREQ.Q       1, RQ9, .L00801A5F
  BSR          .L00801A60, R0

.L00801A5B:

.L00801A5C:
// p_doors.c:130   case blazeClose:
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        RQ0, (RQ8, 104)
// p_doors.c:132   P_RemoveThinker (&door->thinker);	// unlink and free
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_doors.c:133   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 89, RD11
  BSR          S_StartSound, R1
// p_doors.c:135   break;
  BSR          .L00801A5A, R0

.L00801A5D:

.L00801A5E:
// p_doors.c:138   case vld_close:
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        RQ0, (RQ8, 104)
// p_doors.c:140   P_RemoveThinker (&door->thinker);	// unlink and free
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_doors.c:141   break;
  BSR          .L00801A5A, R0

.L00801A5F:
// p_doors.c:143   case close30ThenOpen:
  MOV.L        RD0, (RQ18, 48)
// p_doors.c:145   door->topcountdown = 35*30;
  ADD          R0, 1050, RD27
  MOV.L        RD27, (RQ18, 56)
// p_doors.c:146   break;
  BSR          .L00801A5A, R0

.L00801A60:
// p_doors.c:148   default:

.L00801A5A:
  BSR          .L00801A61, R0

.L00801A59:
  BRNE.Q       1, RD20, .L00801A62
// p_doors.c:153   {
  MOV.L        (RQ18, 24), RQ22
  BREQ.Q       7, RQ22, .L00801A64
  BREQ.Q       2, RQ22, .L00801A65
  BSR          .L00801A66, R0

.L00801A64:

.L00801A65:
// p_doors.c:157   case vld_close:		// DO NOT GO BACK UP!
  BSR          .L00801A63, R0

.L00801A66:
// p_doors.c:160   default:
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 48)
// p_doors.c:162   S_StartSound((mobj_t *)&door->sector->soundorg,
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 48, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1
// p_doors.c:164   break;

.L00801A63:

.L00801A62:

.L00801A61:
// p_doors.c:166   }
  BSR          .L00801A4A, R0

.L00801A4E:
// p_doors.c:171   res = T_MovePlane(door->sector,
  MOV.L        (RQ18, 48), RQ22
  MOV.L        (RQ18, 40), RQ9
  MOV.L        (RQ18, 44), RQ21
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ21, 0, RD11
  ADDS.L       RQ9, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 1, RD14
  ADD          RQ22, 0, RD15
  BSR          T_MovePlane, R1
  ADD          RQ10, 0, RD20
// p_doors.c:176   if (res == pastdest)
  BRNE.Q       2, RD20, .L00801A67
// p_doors.c:177   {
  MOV.L        (RQ18, 24), RQ22
  BREQ.Q       5, RQ22, .L00801A69
  BREQ.L       R0, RQ22, .L00801A6A
  BREQ.Q       1, RQ22, .L00801A6B
  BREQ.Q       6, RQ22, .L00801A6C
  BREQ.Q       3, RQ22, .L00801A6D
  BSR          .L00801A6E, R0

.L00801A69:

.L00801A6A:
// p_doors.c:181   case vld_normal:
  MOV.L        RD0, (RQ18, 48)
// p_doors.c:183   door->topcountdown = door->topwait;
  MOV.L        (RQ18, 52), RQ9
  MOV.L        RQ9, (RQ18, 56)
// p_doors.c:184   break;
  BSR          .L00801A68, R0

.L00801A6B:

.L00801A6C:

.L00801A6D:
// p_doors.c:188   case vld_open:
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        RQ0, (RQ8, 104)
// p_doors.c:190   P_RemoveThinker (&door->thinker);	// unlink and free
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_doors.c:191   break;
  BSR          .L00801A68, R0

.L00801A6E:
// p_doors.c:193   default:

.L00801A68:

.L00801A67:
// p_doors.c:196   }

.L00801A4A:

.L00C01989:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

I_MusicFineTick:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
// i_bgb_mus_btsh.c:953   if(i_mus_curhandle<=0)
  MOV.L        i_mus_curhandle, RD8
  BRLE.L       R0, RD8, .L00C0198F
// i_bgb_mus_btsh.c:956   imus_curms=TK_GetTimeMs();
  BSR          TK_GetTimeMs, R1
  ADDU.L       RQ10, R0, RQ9
  ADDS.L       RQ9, 0, RD8
// i_bgb_mus_btsh.c:957   dt=imus_curms-imus_lastms;
  MOV.L        imus_lastms, RD23
  SUBS.L       RD8, RD23, RD18
// i_bgb_mus_btsh.c:958   imus_lastms=imus_curms;
  ADD          RD8, 0, RD23
  MOV.L        RD23, imus_lastms
  MOV.L        RD8, imus_curms
// i_bgb_mus_btsh.c:960   if(dt<0)
  BRGE.L       R0, RD18, .L00801297
// i_bgb_mus_btsh.c:961   dt=0;
  ADD          R0, 0, RD18

.L00801297:
// i_bgb_mus_btsh.c:962   if(dt>250)
  BRLE.L       250, RD18, .L00801298
// i_bgb_mus_btsh.c:963   dt=0;
  ADD          R0, 0, RD18

.L00801298:
// i_bgb_mus_btsh.c:965   imus_accdt+=dt;
  MOV.L        imus_accdt, RD8
  ADDS.L       RD8, RD18, RD8
  MOV.L        RD8, imus_accdt
// i_bgb_mus_btsh.c:966   while(imus_accdt>0)
  BSR          .L0080129B, R0

.L00801299:
// i_bgb_mus_btsh.c:967   {
  BSR          I_SMus_Tick, R1
// i_bgb_mus_btsh.c:969   imus_accdt-=7;
  MOV.L        imus_accdt, RD8
  ADDS.L       RD8, -7, RD8
  MOV.L        RD8, imus_accdt

.L0080129B:
  MOV.L        imus_accdt, RD8
  BRGT.L       R0, RD8, .L00801299

.L0080129A:

.L00C0198F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

HUlib_initIText:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.X        R20, (R2, 16)
  MOV.X        R22, (R2, 32)
  MOV.Q        R9, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 8)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
  ADD          RD11, 0, RD21
  ADD          RD12, 0, RD20
  ADD          RQ13, 0, RQ27
  ADD          RD14, 0, RD26
  ADD          RQ15, 0, RQ23
  ADD          R0, 1, RD22
// hu_lib.c:283   {
  BREQ.Q       R0, RQ18, .L00C01995
// hu_lib.c:287   it->lm = 0; // default left margin is start of text
  MOV.L        RD0, (RQ18, 112)
// hu_lib.c:288   it->on = on;
  MOV.Q        RQ23, (RQ18, 120)
// hu_lib.c:289   it->laston = true;
  MOV.L        RD22, (RQ18, 128)
// hu_lib.c:290   HUlib_initTextLine(&it->l, x, y, font, startchar);
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RD20, 0, RD12
  ADD          RQ27, 0, RQ13
  ADD          RD26, 0, RD14
  BSR          HUlib_initTextLine, R1

.L00C01995:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R20
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMCell_ChunkFindObjBase:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.L        RD11, (R2, 84)
// tk_core/tk_mmcell.c:179   
  MOV.L        (R2, 84), RD18
// tk_core/tk_mmcell.c:181   
  MOV.Q        (R2, 88), RQ10
  ADD          RD18, 0, RD11
  BSR          TKMM_MMCell_GetChunkBmpIndex, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_mmcell.c:182   
  BSR          .L008009D4, R0

.L008009D5:
// tk_core/tk_mmcell.c:183   
  ADDS.L       RD18, -1, RD18
// tk_core/tk_mmcell.c:185   
  MOV.Q        (R2, 88), RQ10
  ADD          RD18, 0, RD11
  BSR          TKMM_MMCell_GetChunkBmpIndex, R1
  ADDS.L       RQ10, 0, RD9

.L008009D4:
  CMPGT.Q      RD18, R0, RQ8
  ADD          R0, 3, R5
  CMPEQ.Q      RD9, R5, RQ23
  BTSTN.L      RQ23, RQ8, .L008009D5

.L008009D6:
// tk_core/tk_mmcell.c:186   
  ADD          RD18, 0, RD10

.L00C0199B:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

dlsym:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
// pdpc201/bt_dlfcn.c:19   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 0, RD12
  BSR          TK_DlSymA, R1

.L00C019A1:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_NoiseAlert:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.Q        RQ11, (R2, 80)
// p_enemy.c:166   {
  MOV.Q        (R2, 88), RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        RQ23, soundtarget
// p_enemy.c:168   validcount++;
  MOV.L        validcount, RD23
  ADDS.L       RD23, 1, RD23
  MOV.L        RD23, validcount
// p_enemy.c:169   P_RecursiveSound (emmiter->subsector->sector, 0);
  MOV.Q        (R2, 80), RQ23
  MOV.Q        (RQ23, 88), RQ18
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_RecursiveSound, R1

.L00C019A7:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tkgMapFlipFrame:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  MOV.L        RD10, (R2, 124)
// tk_gdi/tkg_display.c:273   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:274   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ22
  MOV.Q        (RQ9, 32), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 124), RD11
  ADD          R0, 0x70696C66, RD12
  ADD          RQ0, 0, RQ13
  ADD          RQ0, 0, RQ14
  ADD          RQ22, 0, RQ29
  JSR          RQ8, 0, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RD21
// tk_gdi/tkg_display.c:275   
  MOV.L        RD21, (R2, 120)
  ADD          RD21, 0, RD10

.L00C019AD:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

A_BrainDie:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 72)
// p_enemy.c:1930   {
  BSR          G_ExitLevel, R1

.L00C019B3:
  ADD          R2, 376, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_exitColorXForm:
// f_wipe.c:134   {
  ADD          R0, 0, RD10

.L00C019B4:
  JSR          R1, 0, R0

ferror:
// pdpc201/stdio.c:3504   
  MOV.L        (RQ10, 56), RQ13
  ADDS.L       RQ13, 0, RD10

.L00C019B5:
  JSR          R1, 0, R0

_malloc_cat:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// pdpc201/stdlib.c:206   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  MOV.Q        _malloc_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C019BB:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

_fcn_clz64:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.Q        RQ10, (R2, 56)
  ADD          R0, 0xFFFFFFFF80000000, RQ22
  LDSH32       RQ22, 0, RQ22
  ADD          R0, 0xFFFFFFFFFF000000, RQ20
  LDSH32       RQ20, 0, RQ20
// tk_core/tk_divi.c:69   
  ADD          RQ22, 0, RQ23
// tk_core/tk_divi.c:71   
  ADD          RQ20, 0, RQ21
// tk_core/tk_divi.c:72   
  ADD          R0, 0xFFFFFFFFFFFF0000, RQ12
  LDSH32       RQ12, 0, RQ12
  ADD          RQ12, 0, RQ13
  MOV.Q        RQ13, (R2, 32)
// tk_core/tk_divi.c:73   
  ADD          R0, -1, RQ10
  LDSH32       RQ10, 0, RQ10
  ADD          RQ10, 0, RQ11
  MOV.Q        RQ11, (R2, 24)
// tk_core/tk_divi.c:76   
  MOV.Q        (R2, 56), RQ17
  ADD          RQ17, 0, RQ18
  ADD          R0, 0, RD9
// tk_core/tk_divi.c:77   
  BTSTN.Q      RQ10, RQ18, .L00800BCC
// tk_core/tk_divi.c:78   
  ADDS.L       RD9, 32, RD9
  SHLD.Q       RQ18, 32, RQ18

.L00800BCC:
  ADD          R0, 0xFFFFFFFFFFFF0000, RQ13
  LDSH32       RQ13, 0, RQ13
  BTSTN.Q      RQ13, RQ18, .L00800BCD
// tk_core/tk_divi.c:80   
  ADDS.L       RD9, 16, RD9
  SHLD.Q       RQ18, 16, RQ18

.L00800BCD:
  BSR          .L00800BCE, R0

.L00800BCF:
// tk_core/tk_divi.c:82   
  ADDS.L       RD9, 8, RD9
  SHLD.Q       RQ18, 8, RQ18

.L00800BCE:
  ADD          R0, 0xFFFFFFFFFF000000, RQ13
  LDSH32       RQ13, 0, RQ13
  BTST.Q       RQ13, RQ18, .L00800BCF

.L00800BD0:
  BSR          .L00800BD1, R0

.L00800BD2:
// tk_core/tk_divi.c:84   
  ADDS.L       RD9, 1, RD9
  ADD          RQ18, RQ18, RQ8
  ADD          RQ8, 0, RQ18

.L00800BD1:
  BTST.Q       RQ22, RQ18, .L00800BD2

.L00800BD3:
  ADDS.L       RD9, 0, RD10

.L00C019BC:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

Z_DumpHeap:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD21
  MOV.L        RD11, (R2, 120)
// z_zone.c:436   printf ("zone size: %i  location: %p\n",
  MOV.Q        mainzone, RQ20
  MOV.L        (RQ20, 0), RQ9
  MOV          .L00C019C8, RQ10
  ADDS.L       RQ9, 0, RD11
  MOV.Q        mainzone, RQ12
  BSR          printf, R1
// z_zone.c:439   printf ("tag range: %i to %i\n",
  MOV          .L00C019C9, RQ10
  ADD          RD21, 0, RD11
  MOV.L        (R2, 120), RD12
  BSR          printf, R1
// z_zone.c:442   for (block = mainzone->blocklist.next ; ; block = block->next)
  MOV.Q        mainzone, RQ20
  ADD          RQ20, 8, RQ13
  MOV.Q        (RQ13, 32), RQ18

.L00802DB3:
// z_zone.c:443   {
  MOV.L        (RQ18, 0), RQ9
  BREQ.L       R0, RQ9, .L00802DB6
  MOV.L        (RQ18, 0), RQ9
  ADD          R0, 0x001D4A11, RD20
  BREQ.Q       RD20, RQ9, .L00802DB6

.L00802DB7:
// z_zone.c:445   {
  MOV          .L00C019CA, RQ10
  BSR          printf, R1
// z_zone.c:447   __debugbreak();

Z_DumpHeap.debugbreak_L0295:
  BRK          661

.L00802DB6:
// z_zone.c:450   if (block->tag >= lowtag && block->tag <= hightag)
  MOV.L        (RQ18, 8), RQ9
  BRLT.L       RD21, RQ9, .L00802DB9
  MOV.L        (RQ18, 8), RQ9
  MOV.L        (R2, 120), RD20
  BRGT.L       RD20, RQ9, .L00802DB9

.L00802DBA:
// z_zone.c:451   printf ("block:%p	size:%7i	user:%p	tag:%3i\n",
  MOV.L        (RQ18, 8), RQ9
  MOV.Q        (RQ18, 16), RQ8
  MOV.L        (RQ18, 4), RQ22
  MOV          .L00C019CC, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ22, 0, RD12
  ADD          RQ8, 0, RQ13
  ADDS.L       RQ9, 0, RD14
  BSR          printf, R1

.L00802DB9:
// z_zone.c:454   if (block->next == &mainzone->blocklist)
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        mainzone, RQ20
  ADD          RQ20, 8, RQ23
  BREQ.Q       RQ23, RQ8, .L00802DB5
// z_zone.c:460   if ( (byte *)block + block->size != (byte *)block->next)
  MOV.L        (RQ18, 4), RQ9
  ADD          RQ18, RQ9, RQ8
  MOV.Q        (RQ18, 32), RQ23
  BREQ.Q       RQ23, RQ8, .L00802DBC
// z_zone.c:461   printf ("ERROR: block size does not touch the next block\n");
  MOV          .L00C019CD, RQ10
  BSR          printf, R1

.L00802DBC:
// z_zone.c:463   if ( block->next->prev != block)
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        (RQ8, 40), RQ23
  BREQ.Q       RQ18, RQ23, .L00802DBD
// z_zone.c:464   printf ("ERROR: next block doesn't have proper back link\n");
  MOV          .L00C019CE, RQ10
  BSR          printf, R1

.L00802DBD:
// z_zone.c:466   if (!block->user && !block->next->user)
  MOV.Q        (RQ18, 16), RQ8
  BRNE.Q       R0, RQ8, .L00802DBE
  MOV.Q        (RQ18, 32), RQ23
  MOV.Q        (RQ23, 16), RQ8
  BRNE.Q       R0, RQ8, .L00802DBE

.L00802DBF:
// z_zone.c:467   printf ("ERROR: two consecutive free blocks\n");
  MOV          .L00C019CF, RQ10
  BSR          printf, R1

.L00802DBE:
  MOV.Q        (RQ18, 32), RQ18
  BSR          .L00802DB3, R0

.L00802DB5:

.L00C019C7:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

tk_isr_syscall:
// tk_core/tk_irq.c:1422   

tk_isr_syscall.debugbreak_L029B:
  BRK          667
// tk_core/tk_irq.c:1424   
  ADD          R0, -1, RD10

.L00C019D0:
  JSR          R1, 0, R0
  .balign 4

M_DrawReadThis2:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
// m_menu.c:792   {
  ADD          R0, 1, RD9
  MOV.L        RD9, inhelpscreens
// m_menu.c:794   switch ( gamemode )
  MOV.L        gamemode, RD9
  BREQ.Q       3, RD9, .L0080164F
  MOV.L        gamemode, RD9
  BREQ.Q       2, RD9, .L00801650
  MOV.L        gamemode, RD9
  BREQ.L       R0, RD9, .L00801651
  MOV.L        gamemode, RD9
  BREQ.Q       1, RD9, .L00801652
  BSR          .L00801653, R0

.L0080164F:

.L00801650:
// m_menu.c:800   V_DrawPatchDirectName (0,0,0, "CREDIT");
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01735, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:801   break;
  BSR          .L0080164E, R0

.L00801651:

.L00801652:
// m_menu.c:805   V_DrawPatchDirectName (0,0,0, "HELP2");
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01737, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:806   break;
  BSR          .L0080164E, R0

.L00801653:
// m_menu.c:807   default:

.L0080164E:
// m_menu.c:809   }

.L00C019DC:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_AddSprites:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
// r_things.c:865   if (sec->validcount == validcount)
  MOV.L        (RQ23, 88), RQ8
  MOV.L        validcount, RD13
  BREQ.Q       RD13, RQ8, .L00C019E2
// r_things.c:869   sec->validcount = validcount;
  MOV.L        validcount, RD13
  MOV.L        RD13, (RQ23, 88)
// r_things.c:871   lightnum = (sec->lightlevel >> LIGHTSEGSHIFT)+extralight;
  MOV.W        (RQ23, 12), RQ8
  SHAR         RQ8, 4, RQ22
  MOV.L        extralight, RD13
  ADDS.L       RQ22, RD13, RD9
// r_things.c:873   if (lightnum < 0)		
  BRGE.L       R0, RD9, .L008027FD
// r_things.c:874   {
  MOV          scalelight, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:876   lightlevel = 0;
  MOV.L        RD0, lightlevel
  BSR          .L008027FE, R0

.L008027FD:
  BRLT.L       16, RD9, .L008027FF
// r_things.c:879   {
  MOV          scalelight, RQ13
  ADD          RQ13, 5760, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:881   lightlevel = LIGHTLEVELS-1;
  ADD          R0, 15, RD13
  MOV.L        RD13, lightlevel
  BSR          .L00802800, R0

.L008027FF:
// r_things.c:884   {
  MOV          scalelight, RQ13
  ADD          R0, 384, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:886   lightlevel = lightnum;
  MOV.L        RD9, lightlevel

.L00802800:

.L008027FE:
// r_things.c:890   for (thing = sec->thinglist ; thing ; thing = thing->snext)
  MOV.Q        (RQ23, 96), RQ18
  BREQ.Q       R0, RQ18, .L00802803

.L00802801:
// r_things.c:891   {
  ADD          RQ18, 0, RQ10
  BSR          R_ProjectSprite, R1
  MOV.Q        (RQ18, 40), RQ18
  BRNE.Q       R0, RQ18, .L00802801

.L00802803:

.L00C019E2:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_RadiusAttack:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
// p_map.c:1256   dist = (damage+MAXRADIUS)<<FRACBITS;
  MOV.L        (R2, 108), RD13
  ADDS.L       RD13, 0x00800000, RQ23
  SHAD.L       RQ23, 16, RD12
// p_map.c:1257   yh = (spot->y + dist - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.Q        (R2, 120), RQ11
  MOV.L        (RQ11, 28), RQ23
  ADDS.L       RQ23, RD12, RQ21
  MOV.L        bmaporgy, RD10
  SUBS.L       RQ21, RD10, RQ23
  SHAR         RQ23, 23, RD20
// p_map.c:1258   yl = (spot->y - dist - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.L        (RQ11, 28), RQ21
  SUBS.L       RQ21, RD12, RQ23
  SUBS.L       RQ23, RD10, RQ21
  SHAR         RQ21, 23, RD10
// p_map.c:1259   xh = (spot->x + dist - bmaporgx)>>MAPBLOCKSHIFT;
  MOV.L        (RQ11, 24), RQ23
  ADDS.L       RQ23, RD12, RQ21
  MOV.L        bmaporgx, RD17
  SUBS.L       RQ21, RD17, RQ23
  SHAR         RQ23, 23, RD22
// p_map.c:1260   xl = (spot->x - dist - bmaporgx)>>MAPBLOCKSHIFT;
  MOV.L        (RQ11, 24), RQ21
  SUBS.L       RQ21, RD12, RQ23
  MOV.L        RD12, (R2, 96)
  SUBS.L       RQ23, RD17, RQ21
  SHAR         RQ21, 23, RD17
  MOV.L        RD17, (R2, 104)
// p_map.c:1261   bombspot = spot;
  MOV.Q        RQ11, bombspot
// p_map.c:1262   bombsource = source;
  MOV.Q        (R2, 112), RQ16
  ADD          RQ16, 0, RQ15
  MOV.Q        RQ15, bombsource
// p_map.c:1263   bombdamage = damage;
  MOV.L        RD13, bombdamage
// p_map.c:1265   for (y=yl ; y<=yh ; y++)
  ADDS.L       RD10, 0, RD9
  MOV.L        RD10, (R2, 100)
  BRGT.L       RD20, RD9, .L00801DA7

.L00801DA5:
// p_map.c:1266   for (x=xl ; x<=xh ; x++)
  MOV.L        (R2, 104), RD18
  BRGT.L       RD22, RD18, .L00801DAA

.L00801DA8:
// p_map.c:1267   P_BlockThingsIterator (x, y, PIT_RadiusAttack );
  MOV          PIT_RadiusAttack, RQ8
  ADD          RD18, 0, RD10
  ADDS.L       RD9, 0, RD11
  ADD          RQ8, 0, RQ12
  BSR          P_BlockThingsIterator, R1
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD22, RD18, .L00801DA8

.L00801DAA:
  ADDS.L       RD9, 1, RD9
  BRLE.L       RD20, RD9, .L00801DA5

.L00801DA7:

.L00C019E8:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

clearerr:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2660   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2663   
  MOV.L        RD0, (RQ18, 56)
// pdpc201/stdio.c:2664   
  MOV.L        RD0, (RQ18, 60)
// pdpc201/stdio.c:2665   

.L00C019EE:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

HU_Erase:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// hu_stuff.c:518   HUlib_eraseSText(&w_message);
  MOV          TU7A00CA82/w_message, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_eraseSText, R1
// hu_stuff.c:519   HUlib_eraseIText(&w_chat);
  MOV          TU7A00CA82/w_chat, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_eraseIText, R1
// hu_stuff.c:520   HUlib_eraseTextLine(&w_title);
  MOV          TU7A00CA82/w_title, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_eraseTextLine, R1

.L00C019F4:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

P_LoadBlockMap:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  ADD          RD10, 0, RD23
// p_setup.c:1007   blockmaplump = W_CacheLumpNum (lump,PU_LEVEL_BMAP);
  ADD          RD23, 0, RD10
  ADD          R0, 60, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ21
// p_setup.c:1008   blockmap = blockmaplump+4;
  ADD          RQ21, 8, RQ20
  MOV.Q        RQ20, blockmap
  MOV.Q        RQ21, blockmaplump
// p_setup.c:1009   count = W_LumpLength (lump)/2;
  ADD          RD23, 0, RD10
  BSR          W_LumpLength, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RD8
  ADD          R0, 2, RD21
  DIVS.L       RD8, RD21, RD8
// p_setup.c:1011   for (i=0 ; i<count ; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD8, RD18, .L00802023

.L00802021:
// p_setup.c:1012   blockmaplump[i] = SHORT(blockmaplump[i]);
  MOV.Q        blockmaplump, RQ21
  MOV.W        (RQ21, RD18), RQ9
  MOV.W        RQ9, (RQ21, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD8, RD18, .L00802021

.L00802023:
// p_setup.c:1014   bmaporgx = blockmaplump[0]<<FRACBITS;
  MOV.Q        blockmaplump, RQ21
  MOV.W        (RQ21, 0), RQ9
  SHAD.L       RQ9, 16, RD20
  MOV.L        RD20, bmaporgx
// p_setup.c:1015   bmaporgy = blockmaplump[1]<<FRACBITS;
  MOV.W        (RQ21, 2), RQ9
  SHAD.L       RQ9, 16, RD20
  MOV.L        RD20, bmaporgy
// p_setup.c:1016   bmapwidth = blockmaplump[2];
  MOV.W        (RQ21, 4), RD20
// p_setup.c:1017   bmapheight = blockmaplump[3];
  MOV.W        (RQ21, 6), RD27
// p_setup.c:1020   count = sizeof(*blocklinks)* bmapwidth*bmapheight;
  SHAD.L       RD20, 3, RQ9
  MOV.L        RD20, bmapwidth
  MULS.L       RQ9, RD27, RD8
  MOV.L        RD27, bmapheight
// p_setup.c:1021   blocklinks = Z_Malloc (count,PU_LEVEL_BMAP, 0);
  ADDS.L       RD8, 0, RD10
  ADD          R0, 60, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, blocklinks
// p_setup.c:1022   memset (blocklinks, 0, count);
  ADDS.L       RD8, 0, RQ22
  MOV.Q        blocklinks, RQ10
  ADD          R0, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          memset, R1

.L00C019FA:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_TurnTagLightsOff:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 104)
// p_lights.c:246   sector = sectors;
  MOV.Q        sectors, RQ18
// p_lights.c:248   for (j = 0;j < numsectors; j++, sector++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 100)
  MOV.L        numsectors, RD13
  BRGE.L       RD13, RD27, .L00801CFE

.L00801CFC:
// p_lights.c:249   {
  MOV.W        (RQ18, 16), RQ23
  MOV.Q        (R2, 104), RQ27
  MOV.W        (RQ27, 28), RQ22
  BRNE.Q       RQ22, RQ23, .L00801CFF
// p_lights.c:251   {
  MOV.W        (RQ18, 12), RD21
// p_lights.c:253   for (i = 0;i < sector->linecount; i++)
  ADD          R0, 0, RD8
  MOV.L        (RQ18, 112), RQ23
  BRGE.L       RQ23, RD8, .L00801D02

.L00801D00:
// p_lights.c:254   {
  MOV.Q        (RQ18, 120), RQ20
  MOV.Q        (RQ20, RD8), RQ27
  MOV.Q        RQ27, (R2, 88)
// p_lights.c:256   tsec = getNextSector(templine,sector);
  ADD          RQ27, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ9
// p_lights.c:257   if (!tsec)
  BREQ.Q       R0, RQ9, .L00801D01
// p_lights.c:259   if (tsec->lightlevel < min)
  MOV.W        (RQ9, 12), RQ23
  BRGE.L       RD21, RQ23, .L00801D03
// p_lights.c:260   min = tsec->lightlevel;
  MOV.W        (RQ9, 12), RD21

.L00801D03:

.L00801D01:
  ADDS.L       RD8, 1, RD8
  MOV.L        (RQ18, 112), RQ22
  BRLT.L       RQ22, RD8, .L00801D00

.L00801D02:
// p_lights.c:261   }
  MOV.W        RD21, (RQ18, 12)

.L00801CFF:
  MOV.L        (R2, 100), RD27
  ADD          RD27, 0, RQ23
  ADDS.L       RD27, 1, RD27
  ADD          RQ18, 0, RQ20
  ADD          RQ18, 128, RQ18
  MOV.L        RD27, (R2, 100)
  MOV.L        numsectors, RD13
  BRLT.L       RD13, RD27, .L00801CFC

.L00801CFE:

.L00C01A00:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_ShootSpecialLine:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ9
  ADD          R0, 3, RD20
// p_spec.c:1006   spop = line->special;
  MOV.W        (RQ9, 26), RD18
// p_spec.c:1008   if(spop==1024)
  ADD          R0, 1024, RD13
  BRNE.Q       RD13, RD18, .L00802119
// p_spec.c:1009   {
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          P_AcsShootSpecialLine, R1
// p_spec.c:1011   return;
  BSR          .L00C01A06, R0

.L00802119:
// p_spec.c:1014   if(gamemode==heretic)
  MOV.L        gamemode, RD13
  BRNE.Q       4, RD13, .L0080211A
// p_spec.c:1015   {
  BREQ.Q       100, RD18, .L0080211C
  BREQ.Q       105, RD18, .L0080211D
  BREQ.Q       106, RD18, .L0080211E
  BREQ.Q       107, RD18, .L0080211F
  BSR          .L00802120, R0

.L0080211C:
// p_spec.c:1018   case 100: spop=105; break;		//fast raise stairs (W)
  ADD          R0, 105, RD18
  BSR          .L0080211B, R0

.L0080211D:
// p_spec.c:1020   case 105: spop=124; break;		//exit secret
  ADD          R0, 124, RD18
  BSR          .L0080211B, R0

.L0080211E:
// p_spec.c:1021   case 106: spop=100; break;		//fast raise stairs (W)
  ADD          R0, 100, RD18
  BSR          .L0080211B, R0

.L0080211F:
// p_spec.c:1022   case 107: spop=127; break;		//fast raise stairs (S)
  ADD          R0, 127, RD18
  BSR          .L0080211B, R0

.L00802120:
// p_spec.c:1023   default: break;

.L0080211B:

.L0080211A:
// p_spec.c:1028   if (!thing->player)
  MOV.Q        (RQ23, 192), RQ22
  BRNE.Q       R0, RQ22, .L00802121
// p_spec.c:1029   {
  ADD          RD0, 0, RD8
// p_spec.c:1032   switch(spop)
  BREQ.Q       46, RD18, .L00802123
  BSR          .L00802122, R0

.L00802123:
// p_spec.c:1036   ok = 1;
  ADD          R0, 1, RD8
// p_spec.c:1037   break;

.L00802122:
  BREQ.L       R0, RD8, .L00C01A06

.L00802121:
// p_spec.c:1044   switch(spop)
  BREQ.Q       24, RD18, .L00802125
  BREQ.Q       46, RD18, .L00802126
  BREQ.Q       47, RD18, .L00802127
  BSR          .L00802124, R0

.L00802125:
// p_spec.c:1048   EV_DoFloor(line, raiseFloor);
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:1049   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_spec.c:1050   break;
  BSR          .L00802124, R0

.L00802126:
// p_spec.c:1054   EV_DoDoor(line, vld_open);
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:1055   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_spec.c:1056   break;
  BSR          .L00802124, R0

.L00802127:
// p_spec.c:1060   EV_DoPlat(line,raiseToNearestAndChange,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:1061   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_spec.c:1062   break;

.L00802124:

.L00C01A06:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

WI_updateNoState:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// wi_stuff.c:762   WI_updateAnimatedBack();
  BSR          WI_updateAnimatedBack, R1
// wi_stuff.c:764   if (!--cnt)
  MOV.L        TU7A00CB85/cnt, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, TU7A00CB85/cnt
  BRNE.L       R0, RD13, .L008029D8
// wi_stuff.c:765   {
  BSR          WI_End, R1
// wi_stuff.c:767   G_WorldDone();
  BSR          G_WorldDone, R1

.L008029D8:

.L00C01A0C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

R_FindPlane:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADDS.L       RD10, 0, RD8
  ADD          RD11, 0, RD23
  ADD          RD12, 0, RD22
// r_plane.c:258   if (picnum == skyflatnum)
  MOV.L        skyflatnum, RD21
  BRNE.Q       RD21, RD23, .L008026B6
// r_plane.c:259   {
  ADD          RD0, 0, RD8
// r_plane.c:261   lightlevel = 0;
  ADD          R0, 0, RD22

.L008026B6:
// r_plane.c:264   for (check=visplanes; check<lastvisplane; check++)
  MOV          visplanes, RQ18
  MOV.Q        lastvisplane, RQ21
  BRGE.Q       RQ21, RQ18, .L008026B9

.L008026B7:
// r_plane.c:265   {
  MOV.L        (RQ18, 0), RQ9
  BRNE.Q       RQ9, RD8, .L008026BA
  MOV.L        (RQ18, 4), RQ9
  BRNE.Q       RQ9, RD23, .L008026BA

.L008026BB:
  MOV.L        (RQ18, 8), RQ9
  BRNE.Q       RQ9, RD22, .L008026BA
  BSR          .L008026B9, R0

.L008026BA:
  ADD          RQ18, 664, RQ18
  MOV.Q        lastvisplane, RQ21
  BRLT.Q       RQ21, RQ18, .L008026B7

.L008026B9:
// r_plane.c:275   if (check < lastvisplane)
  MOV.Q        lastvisplane, RQ21
  BRGE.Q       RQ21, RQ18, .L008026BD
// r_plane.c:276   return check;
  ADD          RQ18, 0, RQ10
  BSR          .L00C01A12, R0

.L008026BD:
// r_plane.c:278   if (lastvisplane - visplanes == MAXVISPLANES)
  MOV.Q        lastvisplane, RQ21
  MOV          visplanes, RQ20
  ADD          RQ21, 0, RQ27
  SUB          RQ27, RQ20, RQ27
  ADD          R0, 664, RD21
  DIVS.L       RQ27, RD21, RQ27
  BRNE.Q       512, RQ27, .L008026BE
// r_plane.c:279   I_Error ("R_FindPlane: no more visplanes");
  MOV          .L00C01A13, RQ10
  BSR          I_Error, R1

.L008026BE:
// r_plane.c:281   lastvisplane++;
  MOV.Q        lastvisplane, RQ21
  ADD          RQ21, 664, RQ21
  MOV.Q        RQ21, lastvisplane
// r_plane.c:283   check->height = height;
  MOV.L        RD8, (RQ18, 0)
// r_plane.c:284   check->picnum = picnum;
  MOV.L        RD23, (RQ18, 4)
// r_plane.c:285   check->lightlevel = lightlevel;
  MOV.L        RD22, (RQ18, 8)
// r_plane.c:286   check->minx = SCREENWIDTH;
  ADD          R0, 320, RD21
  MOV.L        RD21, (RQ18, 12)
// r_plane.c:288   check->maxx = -1;
  ADD          R0, -1, RD20
  MOV.L        RD20, (RQ18, 16)
// r_plane.c:290   memset (check->top,0xff,sizeof(check->top));
  ADD          RQ18, 21, RQ27
  ADD          RQ27, 0, RQ10
  ADD          R0, 255, RD11
  ADD          R0, 320, RQ12
  BSR          memset, R1
// r_plane.c:292   return check;
  ADD          RQ18, 0, RQ10

.L00C01A12:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_GiveArmor:
// p_inter.c:260   hits = armortype*100;
  ADD          R0, 100, R5
  MULS.L       RD11, R5, RD13
// p_inter.c:261   if (player->armorpoints >= hits)
  MOV.L        (RQ10, 40), RQ12
  BRGE.L       RD13, RQ12, .L00C0074D
// p_inter.c:264   player->armortype = armortype;
  MOV.L        RD11, (RQ10, 44)
// p_inter.c:265   player->armorpoints = hits;
  MOV.L        RD13, (RQ10, 40)
// p_inter.c:267   return true;
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00C0074D:
  ADD          R0, 0, RQ10

.L00C01A14:
  JSR          R1, 0, R0
  .balign 4

M_DrawThermo:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD22
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD23
  MOV.L        RD13, (R2, 96)
// m_menu.c:1237   xx = x;
  ADD          RD22, 0, RD18
// m_menu.c:1239   V_DrawPatchDirectName (xx,y,0,"M_THERML");
  ADD          RD18, 0, RD10
  ADDS.L       RD8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01A1B, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:1240   xx += 8;
  ADDS.L       RD18, 8, RD18
// m_menu.c:1241   for (i=0;i<thermWidth;i++)
  ADD          R0, 0, RD9
  BRGE.L       RD23, RD9, .L0080167F

.L0080167D:
// m_menu.c:1244   V_DrawPatchDirectName (xx,y,0,"M_THERMM");
  ADD          RD18, 0, RD10
  ADDS.L       RD8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01A1C, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:1245   xx += 8;
  ADDS.L       RD18, 8, RD18
  ADDS.L       RD9, 1, RD9
  BRLT.L       RD23, RD9, .L0080167D

.L0080167F:
// m_menu.c:1248   V_DrawPatchDirectName (xx,y,0,"M_THERMR");
  ADD          RD18, 0, RD10
  ADDS.L       RD8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01A1D, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:1252   V_DrawPatchDirectName ((x+8) + thermDot*8,y,
  ADDS.L       RD22, 8, RQ21
  MOV.L        (R2, 96), RD27
  SHAD.L       RD27, 3, RQ20
  ADDS.L       RQ21, RQ20, RQ26
  ADD          RQ26, 0, RD10
  ADDS.L       RD8, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C01A1E, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C01A1A:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

A_BabyMetal:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 79, RD9
// p_enemy.c:1805   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 79, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1807   A_Chase (mo);
  ADD          RQ18, 0, RQ10
  BSR          A_Chase, R1

.L00C01A24:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

V_DrawPatchCmap:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -440, R2
  MOV.L        RD10, (R2, 220)
  MOV.L        RD11, (R2, 216)
  MOV.L        RD12, (R2, 212)
  MOV.Q        RQ13, (R2, 200)
  MOV.Q        RQ14, (R2, 192)
// v_video.c:233   __hint_use_egpr();
// v_video.c:235   tcol = tcol1;
  MOV.Q        (R2, 192), RQ20
// v_video.c:237   if(!patch)
  MOV.Q        (R2, 200), RQ27
  BREQ.Q       R0, RQ27, .L00C01A2A
// v_video.c:241   y -= (patch->topoffset); 
  MOV.Q        (R2, 200), RQ27
  MOV.W        (RQ27, 6), RQ9
  MOV.L        (R2, 216), RD13
  SUBS.L       RD13, RQ9, RD13
  MOV.L        RD13, (R2, 216)
// v_video.c:243   x -= (patch->leftoffset); 
  MOV.W        (RQ27, 4), RQ9
  MOV.L        (R2, 220), RD12
  SUBS.L       RD12, RQ9, RD12
// v_video.c:245   if (x<0
  MOV.L        RD12, (R2, 220)
  BRLT.L       R0, RD12, .L00802AF9
  MOV.Q        (R2, 200), RQ27
  MOV.W        (RQ27, 0), RQ9
  MOV.L        (R2, 220), RD13
  ADDS.L       RD13, RQ9, RQ23
  BRGT.L       320, RQ23, .L00802AF9

.L00802AFC:
  MOV.L        (R2, 216), RD27
  BRLT.L       R0, RD27, .L00802AF9

.L00802AFB:
  MOV.Q        (R2, 200), RQ27
  MOV.W        (RQ27, 2), RQ9
  MOV.L        (R2, 216), RD13
  ADDS.L       RD13, RQ9, RQ23
  BRGT.L       200, RQ23, .L00802AF9

.L00802AFA:
  MOV.L        (R2, 212), RD27
  ADDU.L       RD27, R0, RQ9
  BRGTU.L      4, RQ9, .L00802AF9
  BSR          .L00802AF8, R0

.L00802AF9:
// v_video.c:253   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV          .L00C01A2B, RQ11
  MOV.L        (R2, 220), RD12
  MOV.L        (R2, 216), RD13
  BSR          fprintf, R1
// v_video.c:256   fprintf( stderr, "V_DrawPatch: bad patch (ignored)\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV          .L00C01A2C, RQ11
  BSR          fprintf, R1
// v_video.c:257   return;
  BSR          .L00C01A2A, R0

.L00802AF8:
// v_video.c:261   if (!scrn)
  MOV.L        (R2, 212), RD27
  BRNE.L       R0, RD27, .L00802AFE
// v_video.c:264   V_MarkRect (x, y, (patch->width), (patch->height)); 
  MOV.Q        (R2, 200), RQ27
  MOV.W        (RQ27, 2), RQ9
  MOV.W        (RQ27, 0), RQ23
  MOV.L        (R2, 220), RD10
  MOV.L        (R2, 216), RD11
  ADD          RQ23, 0, RD12
  SHAD.Q       RQ9, 48, RD13
  SHAR.Q       RD13, 48, RD13
  BSR          V_MarkRect, R1

.L00802AFE:
// v_video.c:273   col = 0; 
  MOV.L        RD0, (R2, 188)
// v_video.c:274   scrp = screens[scrn];
  MOV          screens, RQ27
  MOV.L        (R2, 212), RD13
  MOV.Q        (RQ27, RD13), RQ12
// v_video.c:275   if(!scrp)
  MOV.Q        RQ12, (R2, 160)
  BREQ.Q       R0, RQ12, .L00C01A2A
// v_video.c:277   desttop = scrp+y*SCREENWIDTH+x; 
  MOV.L        (R2, 216), RD27
  ADD          R0, 320, R5
  MULS.L       RD27, R5, RQ9
  MOV.Q        (R2, 160), RQ13
  LEA.W        RQ13, RQ9, RQ12
  MOV.L        (R2, 220), RD11
  LEA.W        RQ12, RD11, RQ10
  MOV.Q        RQ10, (R2, 168)
// v_video.c:279   scrp_end = scrp + SCREENWIDTH * SCREENHEIGHT;
  ADD          RQ13, 0x0001F400, RQ17
  MOV.Q        RQ17, (R2, 152)
// v_video.c:284   w = (patch->width); 
  MOV.Q        (R2, 200), RQ16
  MOV.W        (RQ16, 0), RD15
// v_video.c:286   for ( ; col<w ; x++, col++, desttop++)
  MOV.L        RD15, (R2, 116)
  MOV.L        (R2, 188), RD14
  BRGE.L       RD15, RD14, .L00802B01

.L00802AFF:
// v_video.c:289   column = (column_t *)((byte *)patch + (patch->columnofs[col])); 
  MOV.Q        (R2, 200), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (R2, 188), RD12
  MOV.L        (RQ13, RD12), RQ9
  ADD          RQ27, RQ9, RQ11
  MOV.Q        RQ11, (R2, 176)
// v_video.c:292   while (column->topdelta != 0xff ) 
  BSR          .L00802B04, R0

.L00802B02:
// v_video.c:293   { 
  MOV.Q        (R2, 176), RQ27
  ADD          RQ27, 3, RQ8
// v_video.c:295   dest = desttop + column->topdelta*SCREENWIDTH; 
  MOVU.B       (RQ27, 0), RQ9
  ADD          R0, 320, R5
  MULS.L       RQ9, R5, RQ23
  MOV.Q        (R2, 168), RQ13
  LEA.W        RQ13, RQ23, RQ18
// v_video.c:296   count = column->length; 
  MOVU.B       (RQ27, 1), RD21
// v_video.c:297   dest_end = dest + count*SCREENWIDTH; 
  ADD          R0, 320, R5
  MULS.L       RD21, R5, RQ9
  LEA.W        RQ18, RQ9, RQ12
// v_video.c:305   if((dest<scrp) || (dest_end>scrp_end))
  MOV.Q        (R2, 160), RQ11
  CMPGT.Q      RQ11, RQ18, RQ23
  MOV.Q        (R2, 152), RQ10
  CMPGT.Q      RQ12, RQ10, RQ9
  MOV.Q        RQ12, (R2, 144)
  OR           RQ23, RQ9, RQ22
  BREQ.L       R0, RQ22, .L00802B05
  MOV.Q        (R2, 160), RQ27
  BRLT.Q       RQ27, RQ18, .L00802B06
// v_video.c:308   {
  ADD          RQ18, 2560, RQ27
  MOV.Q        RQ27, (R2, 136)
// v_video.c:310   while((count>=4) && (dest_e1<=scrp_end))
  BSR          .L00802B09, R0

.L00802B07:
// v_video.c:311   {
  MOVU.B       (RQ8, 0), RD27
// v_video.c:312   i0 = source[0];	i1 = source[1];
  MOVU.B       (RQ8, 1), RD13
// v_video.c:313   i2 = source[2];	i3 = source[3];
  MOVU.B       (RQ8, 2), RD12
  MOVU.B       (RQ8, 3), RD11
// v_video.c:314   i0 = tcol[i0];	i1 = tcol[i1];
  MOVU.W       (RQ20, RD27), RD27
  MOVU.W       (RQ20, RD13), RD13
// v_video.c:315   i2 = tcol[i2];	i3 = tcol[i3];
  MOVU.W       (RQ20, RD12), RD12
  MOVU.W       (RQ20, RD11), RD11
// v_video.c:316   dest[0*SCREENWIDTH] = i0;
  MOVU.W       RD27, (RQ18, 0)
  MOV.L        RD27, (R2, 132)
// v_video.c:317   dest[1*SCREENWIDTH] = i1;
  MOVU.W       RD13, (RQ18, 640)
  MOV.L        RD13, (R2, 128)
// v_video.c:318   dest[2*SCREENWIDTH] = i2;
  MOVU.W       RD12, (RQ18, 1280)
  MOV.L        RD12, (R2, 124)
// v_video.c:319   dest[3*SCREENWIDTH] = i3;
  MOVU.W       RD11, (RQ18, 1920)
  MOV.L        RD11, (R2, 120)
// v_video.c:320   dest = dest_e1;
  MOV.Q        (R2, 136), RQ10
  ADD          RQ10, 0, RQ18
// v_video.c:321   dest_e1 += 4*SCREENWIDTH; 
  ADD          RQ10, 2560, RQ10
  MOV.Q        RQ10, (R2, 136)
// v_video.c:323   source+=4;
  ADD          RQ8, 4, RQ8
// v_video.c:324   count-=4;
  ADDS.L       RD21, -4, RD21

.L00802B09:
  ADD          R0, 4, R5
  CMPGE.Q      RD21, R5, RQ9
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (R2, 152), RQ13
  CMPGE.Q      RQ13, RQ27, RQ23
  BTSTN.L      RQ23, RQ9, .L00802B07

.L00802B08:

.L00802B06:
// v_video.c:328   while (count--) 
  BSR          .L00802B0C, R0

.L00802B0A:
// v_video.c:331   if((dest<scrp) || (dest>scrp_end))
  MOV.Q        (R2, 160), RQ27
  CMPGT.Q      RQ27, RQ18, RQ22
  MOV.Q        (R2, 152), RQ13
  CMPGT.Q      RQ18, RQ13, RQ9
  OR           RQ22, RQ9, RQ23
  BREQ.L       R0, RQ23, .L00802B0D
// v_video.c:332   {
  ADD          RQ8, 1, RQ8
// v_video.c:334   dest += SCREENWIDTH; 
  ADD          RQ18, 640, RQ18
// v_video.c:335   continue;
  BSR          .L00802B0C, R0

.L00802B0D:
// v_video.c:341   *dest = tcol[*source++];
  MOVU.B       (RQ8, 0), RQ22
  ADD          RQ8, 1, RQ8
  MOVU.W       (RQ20, RQ22), RQ9
  MOVU.W       RQ9, (RQ18, 0)
// v_video.c:342   dest += SCREENWIDTH; 
  ADD          RQ18, 640, RQ18

.L00802B0C:
  ADD          RD21, 0, RQ23
  ADDS.L       RD21, -1, RD21
  BRNE.L       R0, RQ23, .L00802B0A

.L00802B0B:
// v_video.c:345   column = (column_t *)(
  MOV.Q        (R2, 176), RQ27
  MOVU.B       (RQ27, 1), RQ22
  ADD          RQ27, RQ22, RQ13
  ADD          RQ13, 4, RQ12
  ADD          RQ12, 0, RQ27
  MOV.Q        RQ27, (R2, 176)
// v_video.c:347   continue;
  BSR          .L00802B04, R0

.L00802B05:
// v_video.c:355   while (count>=4) 
  BSR          .L00802B10, R0

.L00802B0E:
// v_video.c:356   { 
  MOVU.B       (RQ8, 0), RQ22
  MOVU.W       (RQ20, RQ22), RQ9
  MOVU.W       RQ9, (RQ18, 0)
// v_video.c:358   dest[1*SCREENWIDTH] = tcol[source[1]];
  MOVU.B       (RQ8, 1), RQ23
  MOVU.W       (RQ20, RQ23), RQ22
  MOVU.W       RQ22, (RQ18, 640)
// v_video.c:359   dest[2*SCREENWIDTH] = tcol[source[2]];
  MOVU.B       (RQ8, 2), RQ9
  MOVU.W       (RQ20, RQ9), RQ23
  MOVU.W       RQ23, (RQ18, 1280)
// v_video.c:360   dest[3*SCREENWIDTH] = tcol[source[3]];
  MOVU.B       (RQ8, 3), RQ22
  MOVU.W       (RQ20, RQ22), RQ9
  MOVU.W       RQ9, (RQ18, 1920)
// v_video.c:361   dest += 4*SCREENWIDTH; 
  ADD          RQ18, 2560, RQ18
// v_video.c:363   source+=4;
  ADD          RQ8, 4, RQ8
// v_video.c:364   count-=4;
  ADDS.L       RD21, -4, RD21

.L00802B10:
  BRGE.L       4, RD21, .L00802B0E

.L00802B0F:
// v_video.c:369   while (count--) 
  BSR          .L00802B13, R0

.L00802B11:
// v_video.c:372   *dest = tcol[*source++];
  MOVU.B       (RQ8, 0), RQ23
  ADD          RQ8, 1, RQ8
  MOVU.W       (RQ20, RQ23), RQ22
  MOVU.W       RQ22, (RQ18, 0)
// v_video.c:373   dest += SCREENWIDTH; 
  ADD          RQ18, 640, RQ18

.L00802B13:
  ADD          RD21, 0, RQ9
  ADDS.L       RD21, -1, RD21
  BRNE.L       R0, RQ9, .L00802B11

.L00802B12:
// v_video.c:383   column = (column_t *)(  (byte *)column + column->length 
  MOV.Q        (R2, 176), RQ27
  MOVU.B       (RQ27, 1), RQ23
  ADD          RQ27, RQ23, RQ13
  ADD          RQ13, 4, RQ12
  ADD          RQ12, 0, RQ27
  MOV.Q        RQ27, (R2, 176)

.L00802B04:
  MOV.Q        (R2, 176), RQ27
  MOVU.B       (RQ27, 0), RQ22
  BRNE.Q       255, RQ22, .L00802B02

.L00802B03:
  MOV.L        (R2, 220), RD27
  ADD          RD27, 0, RQ9
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 220)
  MOV.L        (R2, 188), RD13
  ADD          RD13, 0, RQ23
  ADDS.L       RD13, 1, RD13
  MOV.Q        (R2, 168), RQ12
  MOV.Q        RQ12, (R2, 88)
  ADD          RQ12, 2, RQ12
  MOV.Q        RQ12, (R2, 168)
  MOV.L        RD13, (R2, 188)
  MOV.L        (R2, 116), RD11
  BRLT.L       RD11, RD13, .L00802AFF

.L00802B01:

.L00C01A2A:
  ADD          R2, 440, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

G_DeferedPlayDemo:
// g_game.c:1598   {
  ADD          RQ10, 0, RQ13
// g_game.c:1600   gameaction = ga_playdemo;
  ADD          R0, 5, RD12
  MOV.Q        RQ13, defdemoname
  MOV.L        RD12, gameaction

.L00C01A2D:
  JSR          R1, 0, R0

TKMM_MMCell_GetLnkObjCellSize:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// tk_core/tk_mmcell.c:340   
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 16, RQ12
  ADD          RQ12, 0, RQ9
// tk_core/tk_mmcell.c:341   
  ADD          RQ9, 0, RQ12
  MOV.Q        (R2, 96), RQ11
  SUB          RQ11, RQ12, RQ22
  ADDS.L       RQ22, 0, RD21
// tk_core/tk_mmcell.c:342   
  SHAR         RD21, 3, RD8
// tk_core/tk_mmcell.c:344   
  MOV.L        (RQ9, 0xF700), RQ18
  ADD          R0, 0x12345678, RD10
  BREQ.Q       RD10, RQ18, .L008009ED
// tk_core/tk_mmcell.c:345   

TKMM_MMCell_GetLnkObjCellSize.debugbreak_L02AB:
  BRK          683

.L008009ED:
// tk_core/tk_mmcell.c:346   
  MOV.L        (RQ9, 0xFEC0), RQ18
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ18, .L008009EE
// tk_core/tk_mmcell.c:347   

TKMM_MMCell_GetLnkObjCellSize.debugbreak_L02AC:
  BRK          684

.L008009EE:
// tk_core/tk_mmcell.c:348   
  MOV.L        (RQ9, 0xFFD0), RQ18
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ18, .L008009EF
// tk_core/tk_mmcell.c:349   

TKMM_MMCell_GetLnkObjCellSize.debugbreak_L02AD:
  BRK          685

.L008009EF:
// tk_core/tk_mmcell.c:351   
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          TKMM_MMCell_ChunkFindObjBase, R1
  ADDS.L       RQ10, 0, RD8
// tk_core/tk_mmcell.c:352   
  BRGE.L       R0, RD8, .L008009F0
// tk_core/tk_mmcell.c:353   
  ADD          R0, -1, RD10
  BSR          .L00C01A42, R0

.L008009F0:
// tk_core/tk_mmcell.c:354   
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          TKMM_MMCell_ChunkGetObjLen, R1
  ADD          RQ10, 0, RD23
// tk_core/tk_mmcell.c:355   
  BRGE.L       R0, RD23, .L008009F1
// tk_core/tk_mmcell.c:356   
  ADD          R0, -1, RD10
  BSR          .L00C01A42, R0

.L008009F1:
// tk_core/tk_mmcell.c:359   
  SHAD.L       RD23, 3, RQ18
  ADDS.L       RQ18, -8, RQ20
  ADD          RQ20, 0, RD10

.L00C01A42:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

SMus_SilenceAll:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 1, RD9
// i_bgb_mus_btsh.c:611   {
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  BSR          SMus_SpecialParm, R1
// i_bgb_mus_btsh.c:613   SMus_SpecialParm(1, snd_MusicVolume);
  ADD          R0, 1, RD10
  MOV.L        snd_MusicVolume, RD11
  BSR          SMus_SpecialParm, R1

.L00C01A4B:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

TKMM_GetBase:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmpage.c:1182   
  BRNE.Q       R0, RQ8, .L008009AE
// tk_core/tk_mmpage.c:1183   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01A51, R0

.L008009AE:
// tk_core/tk_mmpage.c:1185   
  ADD          RQ8, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:1186   
  BRNE.Q       R0, RQ18, .L008009AF
// tk_core/tk_mmpage.c:1187   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01A51, R0

.L008009AF:
// tk_core/tk_mmpage.c:1189   
  MOVU.B       (RQ18, 4), RQ13
  ADD          R0, 8, RD12
  BTST.L       RD12, RQ13, .L008009B0
// tk_core/tk_mmpage.c:1190   
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          TKMM_MMCell_GetLnkObjCellHeadPtr, R1
  ADD          RQ10, 0, RQ23
// tk_core/tk_mmpage.c:1192   
  ADD          RQ23, 16, RQ9
  ADD          RQ9, 0, RQ10
  BSR          .L00C01A51, R0

.L008009B0:
// tk_core/tk_mmpage.c:1195   
  ADD          RQ18, 16, RQ9
  ADD          RQ9, 0, RQ10

.L00C01A51:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

A_FatAttack1:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ22
// p_enemy.c:1396   A_FaceTarget (actor);
  ADD          RQ22, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1398   actor->angle += FATSPREAD;
  MOVU.L       (RQ22, 56), RQ18
  LUI          0x00008000, R5
  ADDU.L       R5, RQ18, RQ8
  MOVU.L       RQ8, (RQ22, 56)
// p_enemy.c:1399   P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (RQ22, 176), RQ23
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
// p_enemy.c:1401   mo = P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (RQ22, 176), RQ23
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ9
// p_enemy.c:1402   mo->angle += FATSPREAD;
  MOVU.L       (RQ9, 56), RQ18
  LUI          0x00008000, R5
  ADDU.L       R5, RQ18, RQ8
  MOVU.L       RQ8, (RQ9, 56)
// p_enemy.c:1403   an = mo->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ9, 56), RQ18
  SHLR         RQ18, 19, RD20
// p_enemy.c:1404   mo->momx = FixedMul (mo->info->speed, finecosine[an]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD20), RQ8
  MOV.L        RD20, (R2, 100)
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ21
  MOV.L        RQ21, (RQ9, 112)
// p_enemy.c:1405   mo->momy = FixedMul (mo->info->speed, finesine[an]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD20), RQ18
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ9, 116)

.L00C01A57:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

W_CachePatchNum:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -440, R2
  MOV.L        RD10, (R2, 252)
  MOV.L        RD11, (R2, 248)
// r_data.c:1334   if(lump<=0)
  MOV.L        (R2, 252), RD27
  BRGT.L       R0, RD27, .L008024E8
// r_data.c:1335   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C01A5D, R0

.L008024E8:
// r_data.c:1336   if(lump>=numlumps)
  MOV.L        (R2, 252), RD27
  MOV.L        numlumps, RD26
  BRLT.L       RD26, RD27, .L008024E9
// r_data.c:1337   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C01A5D, R0

.L008024E9:
// r_data.c:1339   src = patchcache[lump];
  MOV.Q        patchcache, RQ27
  MOV.L        (R2, 252), RD26
  MOV.Q        (RQ27, RD26), RQ25
// r_data.c:1340   if(src)
  MOV.Q        RQ25, (R2, 240)
  BREQ.Q       R0, RQ25, .L008024EA
// r_data.c:1341   return(src);
  MOV.Q        (R2, 240), RQ10
  BSR          .L00C01A5D, R0

.L008024EA:
// r_data.c:1343   if(tag == PU_STATIC)
  MOV.L        (R2, 248), RD27
  BRNE.Q       1, RD27, .L008024EB
// r_data.c:1344   tag = PU_PATCH;
  ADD          R0, 8, RD27
  MOV.L        RD27, (R2, 248)

.L008024EB:
// r_data.c:1346   size = lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ27
  MOV.L        (R2, 252), RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        (RQ25, 24), RD27
  MOV.L        RD27, (R2, 180)
// r_data.c:1348   buf = W_CacheLumpNum(lump, PU_CACHE);
  ADD          RD26, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ24
// r_data.c:1350   if(!buf)
  MOV.Q        RQ24, (R2, 232)
  BRNE.Q       R0, RQ24, .L008024EC
// r_data.c:1351   {
  ADD          RQ0, 0, RQ10
  BSR          .L00C01A5D, R0

.L008024EC:
// r_data.c:1355   csbuf = buf;
  MOV.Q        (R2, 232), RQ27
// r_data.c:1356   spatch = (patch_t *)csbuf;
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ27, (R2, 224)
// r_data.c:1357   xs=SHORT(spatch->width);
  MOV.W        (RQ26, 0), RD25
// r_data.c:1358   ys=SHORT(spatch->height);
  MOV.W        (RQ26, 2), RD24
  MOV.L        RD24, (R2, 168)
// r_data.c:1360   size2= 8 + (xs+1)*4;
  ADDS.L       RD25, 1, RQ18
  SHAD.L       RQ18, 2, RQ8
  ADDS.L       RQ8, 8, RD19
  MOV.L        RD19, (R2, 176)
// r_data.c:1362   csofs = (u32 *)(spatch->columnofs);
  ADD          RQ26, 8, RQ13
  MOV.Q        RQ26, (R2, 192)
  ADD          RQ13, 0, RQ12
// r_data.c:1363   csofs16 = (u16 *)csofs;
  MOV.Q        RQ12, (R2, 200)
  MOV.Q        RQ12, (R2, 208)
// r_data.c:1365   for(x=0; x<xs; x++)
  ADD          R0, 0, RD20
  MOV.L        RD25, (R2, 172)
  BRGE.L       RD25, RD20, .L008024EF

.L008024ED:
// r_data.c:1368   ofs=LONG(csofs[x]);
  MOV.Q        (R2, 208), RQ27
  MOVU.L       (RQ27, RD20), RQ18
  ADDS.L       RQ18, 0, RD26
// r_data.c:1369   if(ofs>>28)
  SHAR         RD26, 28, RQ8
  MOV.L        RD26, (R2, 140)
  BRNE.L       R0, RQ8, .L008024EF
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 172), RD27
  BRLT.L       RD27, RD20, .L008024ED

.L008024EF:
// r_data.c:1377   if(x>=xs)
  MOV.L        (R2, 172), RD27
  BRLT.L       RD27, RD20, .L008024F0
// r_data.c:1378   {
  MOV.Q        patchcache, RQ27
  MOV.L        (R2, 252), RD26
  LEA.Q        RQ27, RD26, RQ12
  MOV.L        (R2, 180), RD27
  ADDS.L       RD27, 256, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        (R2, 248), RD11
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 240)
// r_data.c:1381   memcpy(src, buf, size);
  ADDS.L       RD27, 0, RQ25
  MOV.Q        (R2, 240), RQ10
  MOV.Q        (R2, 232), RQ11
  ADD          RQ25, 0, RQ12
  BSR          memcpy, R1
// r_data.c:1382   return(src);
  MOV.Q        (R2, 240), RQ10
  BSR          .L00C01A5D, R0

.L008024F0:
// r_data.c:1387   isofs16 = 0;
  MOV.L        RD0, (R2, 124)
// r_data.c:1388   isflat = 0;
  MOV.L        RD0, (R2, 120)
// r_data.c:1390   ofs = LONG(csofs[0]);
  MOV.Q        (R2, 208), RQ27
  MOVU.L       (RQ27, 0), RQ18
  ADDS.L       RQ18, 0, RD26
// r_data.c:1391   if((ofs>>28)&0xC)
  SHAR         RD26, 28, RQ8
  MOV.L        RD26, (R2, 140)
  ADD          R0, 12, RD25
  BTST.L       RD25, RQ8, .L008024F1
// r_data.c:1392   isofs16 = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 124)

.L008024F1:
// r_data.c:1394   if(isofs16)
  MOV.L        (R2, 124), RD27
  BREQ.L       R0, RD27, .L008024F2
// r_data.c:1395   {
  MOV.Q        (R2, 200), RQ27
  MOVU.W       (RQ27, 0), RD26
  AND          RD26, 16383, RQ18
  MOV.L        RD26, (R2, 140)
  MOV.L        (R2, 172), RD25
  SHAD.L       RD25, 1, RQ8
  ADDS.L       RQ8, 8, RQ9
  BRGE.L       RQ9, RQ18, .L008024F3
// r_data.c:1398   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 120)
  MOV.L        (R2, 140), RD26
  SHAR         RD26, 14, RQ18
  BRNE.Q       1, RQ18, .L008024F4
// r_data.c:1400   if((ofs>>14)==1)	is8=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)

.L008024F4:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ8
  BRNE.Q       2, RQ8, .L008024F5
// r_data.c:1401   if((ofs>>14)==2)	is16=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L008024F5:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ9
  BRNE.Q       3, RQ9, .L008024F6
// r_data.c:1402   if((ofs>>14)==3)	israw=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L008024F6:

.L008024F3:

.L008024F2:
// r_data.c:1407   if(isflat)
  MOV.L        (R2, 120), RD27
  BREQ.L       R0, RD27, .L008024F7
// r_data.c:1410   xs2=(xs+3)>>2;		ys2=(ys+3)>>2;
  MOV.L        (R2, 172), RD27
  ADDS.L       RD27, 3, RQ18
  SHAR         RQ18, 2, RD26
  MOV.L        (R2, 168), RD25
  ADDS.L       RD25, 3, RQ8
  SHAR         RQ8, 2, RD24
// r_data.c:1411   xs1=xs2<<2;			ys1=ys2<<2;
  SHAD.L       RD26, 2, RD19
  MOV.L        RD26, (R2, 156)
  SHAD.L       RD24, 2, RD13
  MOV.L        RD24, (R2, 152)
// r_data.c:1412   size2=8+((xs+1)*4);
  ADDS.L       RD27, 1, RQ9
  SHAD.L       RQ9, 2, RQ18
  ADDS.L       RQ18, 8, RD12
// r_data.c:1413   size2+=xs1*(ys1+8);
  ADDS.L       RD13, 8, RQ8
  MOV.L        RD13, (R2, 160)
  MULS.L       RD19, RQ8, RQ9
  MOV.L        RD19, (R2, 164)
  ADDS.L       RD12, RQ9, RD12
  MOV.L        RD12, (R2, 176)
  BSR          .L008024F8, R0

.L008024F7:
// r_data.c:1415   {
  MOV.L        (R2, 172), RD27
  ADDS.L       RD27, 1, RQ18
  SHAD.L       RQ18, 2, RQ8
  ADDS.L       RQ8, 8, RD26
  MOV.L        RD26, (R2, 176)
// r_data.c:1417   for(x=0; x<xs; x++)
  ADD          R0, 0, RD20
  BRGE.L       RD27, RD20, .L008024FB

.L008024F9:
// r_data.c:1418   {
  BRLE.L       R0, RD20, .L008024FC
  MOV.Q        (R2, 192), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, RD20), RQ9
  ADDS.L       RD20, -1, RQ18
  MOV.L        (RQ26, RQ18), RQ8
  BREQ.Q       RQ8, RQ9, .L008024FA

.L008024FC:
// r_data.c:1425   if(isofs16)
  MOV.L        (R2, 124), RD27
  BREQ.L       R0, RD27, .L008024FD
// r_data.c:1428   ofs=SHORT(csofs16[x]);
  MOV.Q        (R2, 200), RQ27
  MOVU.W       (RQ27, RD20), RD26
// r_data.c:1429   israw=0;	is16=0;		is8=0;
  MOV.L        RD0, (R2, 128)
  MOV.L        RD0, (R2, 132)
  MOV.L        RD0, (R2, 136)
  SHAR         RD26, 14, RQ9
  MOV.L        RD26, (R2, 140)
  BRNE.Q       1, RQ9, .L008024FE
// r_data.c:1430   if((ofs>>14)==1)	is8=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)

.L008024FE:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ18
  BRNE.Q       2, RQ18, .L008024FF
// r_data.c:1431   if((ofs>>14)==2)	is16=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L008024FF:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ8
  BRNE.Q       3, RQ8, .L00802500
// r_data.c:1432   if((ofs>>14)==3)	israw=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L00802500:
// r_data.c:1433   ofs&=0x3FFF;
  MOV.L        (R2, 140), RD27
  AND          RD27, 16383, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L00802501, R0

.L008024FD:
// r_data.c:1437   ofs=LONG(csofs[x]);
  MOV.Q        (R2, 208), RQ27
  MOVU.L       (RQ27, RD20), RQ9
  ADDS.L       RQ9, 0, RD26
// r_data.c:1438   israw=0;	is16=0;		is8=0;
  MOV.L        RD0, (R2, 128)
  MOV.L        RD0, (R2, 132)
  MOV.L        RD0, (R2, 136)
  SHAR         RD26, 28, RQ18
  MOV.L        RD26, (R2, 140)
  BRNE.Q       1, RQ18, .L00802502
// r_data.c:1439   if((ofs>>28)==1)	is8=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)

.L00802502:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 28, RQ8
  BRNE.Q       2, RQ8, .L00802503
// r_data.c:1440   if((ofs>>28)==2)	is16=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00802503:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 28, RQ9
  BRNE.Q       3, RQ9, .L00802504
// r_data.c:1441   if((ofs>>28)==3)	israw=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L00802504:
// r_data.c:1442   ofs&=0x00FFFFFF;
  MOV.L        (R2, 140), RD27
  AND          RD27, 0x00FFFFFF, RD27
  MOV.L        RD27, (R2, 140)

.L00802501:
// r_data.c:1445   cs=csbuf+ofs;
  MOV.Q        (R2, 224), RQ27
  MOV.L        (R2, 140), RD26
  ADD          RQ27, RD26, RQ23
// r_data.c:1447   while(1)

.L00802505:
// r_data.c:1448   {
  MOVU.B       (RQ23, 0), RD27
// r_data.c:1450   pl=cs[1];
  MOVU.B       (RQ23, 1), RD21
// r_data.c:1451   if(py==0xFF)
  MOV.L        RD27, (R2, 144)
  BRNE.Q       255, RD27, .L00802508
// r_data.c:1452   { size2++; break; }
  MOV.L        (R2, 176), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 176)
  BSR          .L00802506, R0

.L00802508:
  MOV.L        (R2, 136), RD27
  BREQ.L       R0, RD27, .L00802509
// r_data.c:1454   { cs+=2+((pl+7)/8)*3; }
  ADDS.L       RD21, 7, RQ18
  ADD          RQ18, 0, RQ8
  ADD          R0, 8, RD27
  DIVS.L       RQ8, RD27, RQ8
  ADD          R0, 3, R5
  MULS.L       RQ8, R5, RQ9
  ADDS.L       RQ9, 2, RQ18
  ADD          RQ23, RQ18, RQ23
  BSR          .L0080250A, R0

.L00802509:
  MOV.L        (R2, 132), RD27
  BREQ.L       R0, RD27, .L0080250B
// r_data.c:1456   { cs+=2+((pl+15)/16)*4; }
  ADDS.L       RD21, 15, RQ8
  ADDS.L       RQ8, 0, RQ9
  ADD          R0, 16, RD27
  DIVS.L       RQ9, RD27, RQ9
  SHAD.L       RQ9, 2, RQ18
  ADDS.L       RQ18, 2, RQ8
  ADD          RQ23, RQ8, RQ23
  BSR          .L0080250C, R0

.L0080250B:
  MOV.L        (R2, 128), RD27
  BREQ.L       R0, RD27, .L0080250D
// r_data.c:1458   { cs+=2+pl; }
  ADDS.L       RD21, 2, RQ9
  ADD          RQ23, RQ9, RQ23
  BSR          .L0080250E, R0

.L0080250D:
// r_data.c:1460   { cs+=4+pl; }
  ADDS.L       RD21, 4, RQ18
  ADD          RQ23, RQ18, RQ23

.L0080250E:

.L0080250C:

.L0080250A:
  ADDS.L       RD21, 4, RQ8
  MOV.L        (R2, 176), RD27
  ADDS.L       RD27, RQ8, RD27
  MOV.L        RD27, (R2, 176)
  BSR          .L00802505, R0

.L00802506:

.L008024FA:
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 172), RD27
  BRLT.L       RD27, RD20, .L008024F9

.L008024FB:

.L008024F8:
// r_data.c:1468   src = Z_Malloc (size2+256, tag, &patchcache[lump]);
  MOV.Q        patchcache, RQ27
  MOV.L        (R2, 252), RD26
  LEA.Q        RQ27, RD26, RQ12
  MOV.L        (R2, 176), RD27
  ADDS.L       RD27, 256, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        (R2, 248), RD11
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ25
// r_data.c:1471   csbuf = buf;
  MOV.Q        (R2, 232), RQ24
// r_data.c:1472   ctbuf = src;
  ADD          RQ25, 0, RQ19
  MOV.Q        RQ25, (R2, 240)
// r_data.c:1479   spatch = (patch_t *)csbuf;
  MOV.Q        RQ24, (R2, 192)
  MOV.Q        RQ24, (R2, 224)
// r_data.c:1480   tpatch = (patch_t *)ctbuf;
  MOV.Q        RQ19, (R2, 184)
  MOV.Q        RQ19, (R2, 216)
// r_data.c:1482   memcpy(tpatch, spatch, sizeof(patch_t));
  MOV.Q        (R2, 184), RQ19
  MOV.Q        (R2, 192), RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        RQ10, (RQ19, 0)
  MOV.Q        RQ11, (RQ19, 8)
  MOV.Q        (RQ26, 24), RQ10
  MOV.Q        (RQ26, 32), RQ11
  MOV.Q        RQ12, (RQ19, 16)
  MOV.Q        RQ10, (RQ19, 24)
  MOV.Q        RQ11, (RQ19, 32)
// r_data.c:1484   tpatch->width=SHORT(spatch->width);
  MOV.W        (RQ26, 0), RQ18
  MOV.W        RQ18, (RQ19, 0)
// r_data.c:1485   tpatch->height=SHORT(spatch->height);
  MOV.W        (RQ26, 2), RQ8
  MOV.W        RQ8, (RQ19, 2)
// r_data.c:1486   tpatch->leftoffset=SHORT(spatch->leftoffset);
  MOV.W        (RQ26, 4), RQ9
  MOV.W        RQ9, (RQ19, 4)
// r_data.c:1487   tpatch->topoffset=SHORT(spatch->topoffset);
  MOV.W        (RQ26, 6), RQ18
  MOV.W        RQ18, (RQ19, 6)
// r_data.c:1493   if(isflat)
  MOV.L        (R2, 120), RD13
  BREQ.L       R0, RD13, .L0080250F
// r_data.c:1494   {
  MOV.Q        (R2, 200), RQ27
  MOVU.W       (RQ27, 0), RD26
// r_data.c:1496   ofs&=0x3FFF;
  AND          RD26, 16383, RD26
// r_data.c:1497   cs=csbuf+ofs;
  MOV.Q        (R2, 224), RQ25
  ADD          RQ25, RD26, RQ23
  MOV.L        RD26, (R2, 140)
// r_data.c:1499   ct=ctbuf+8+((xs+1)*4);
  MOV.Q        (R2, 216), RQ24
  ADD          RQ24, 8, RQ19
  MOV.L        (R2, 172), RD13
  ADDS.L       RD13, 1, RQ9
  SHAD.L       RQ9, 2, RQ18
  ADD          RQ19, RQ18, RQ22
// r_data.c:1500   ct+=3;
  ADD          RQ22, 3, RQ22
// r_data.c:1502   for(x=0; x<xs2; x++)
  ADD          R0, 0, RD20
  MOV.L        (R2, 156), RD12
  BRGE.L       RD12, RD20, .L00802512

.L00802510:
// r_data.c:1503   {
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 148)
  MOV.L        (R2, 152), RD26
  BRGE.L       RD26, RD27, .L00802515

.L00802513:
// r_data.c:1505   {
  MOV.L        (R2, 160), RD27
  ADDS.L       RD27, 8, RQ8
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RQ11
  ADDS.L       RQ8, 0, RD12
  BSR          R_DecodeColorCell8, R1
// r_data.c:1507   cs+=4;
  ADD          RQ23, 4, RQ23
// r_data.c:1508   ct+=4;
  ADD          RQ22, 4, RQ22
  MOV.L        (R2, 148), RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, (R2, 148)
  MOV.L        (R2, 152), RD25
  BRLT.L       RD25, RD26, .L00802513

.L00802515:
// r_data.c:1509   }
  ADD          RQ22, 8, RQ22
// r_data.c:1511   ct+=3*(ys1+8);
  MOV.L        (R2, 160), RD27
  ADDS.L       RD27, 8, RQ9
  ADD          R0, 3, R5
  MULS.L       RQ9, R5, RQ18
  ADD          RQ22, RQ18, RQ22
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 156), RD26
  BRLT.L       RD26, RD20, .L00802510

.L00802512:
// r_data.c:1514   py=SHORT(csofs16[1])&255;
  MOV.Q        (R2, 200), RQ27
  MOVU.W       (RQ27, 2), RQ8
  AND          RQ8, 255, RD26
  MOV.L        RD26, (R2, 144)
// r_data.c:1515   pl=ys;
  MOV.L        (R2, 168), RD21
// r_data.c:1517   ct=ctbuf+8+((xs+1)*4);
  MOV.Q        (R2, 216), RQ25
  ADD          RQ25, 8, RQ24
  MOV.L        (R2, 172), RD19
  ADDS.L       RD19, 1, RQ9
  SHAD.L       RQ9, 2, RQ18
  ADD          RQ24, RQ18, RQ22
// r_data.c:1518   for(x=0; x<xs; x++)
  ADD          R0, 0, RD20
  BRGE.L       RD19, RD20, .L00802518

.L00802516:
// r_data.c:1519   {
  MOV.Q        (R2, 216), RQ27
  SUB          RQ22, RQ27, RQ26
  MOV.Q        (R2, 184), RQ25
  ADD          RQ25, 8, RQ24
  ADDS.L       RQ26, 0, RQ9
  MOV.L        RQ9, (RQ24, RD20)
// r_data.c:1521   ct[0]=py;
  MOV.L        (R2, 144), RD19
  MOVU.B       RD19, (RQ22, 0)
// r_data.c:1522   ct[1]=pl;
  MOVU.B       RD21, (RQ22, 1)
// r_data.c:1523   ct[2]=ct[3];
  MOVU.B       (RQ22, 3), RQ18
  MOVU.B       RQ18, (RQ22, 2)
// r_data.c:1524   ct[pl+3]=ct[pl+2];
  ADD          RQ22, RD21, R5
  MOVU.B       (R5, 2), RQ9
  ADD          RQ22, RD21, R5
  MOVU.B       RQ9, (R5, 3)
// r_data.c:1525   ct[pl+4]=0xFF;
  ADD          R0, 255, RD13
  ADD          RQ22, RD21, R5
  MOVU.B       RD13, (R5, 4)
// r_data.c:1526   ct[pl+5]=0xFF;
  ADD          RQ22, RD21, R5
  MOVU.B       RD13, (R5, 5)
// r_data.c:1527   ct[pl+6]=0xFF;
  ADD          RQ22, RD21, R5
  MOVU.B       RD13, (R5, 6)
// r_data.c:1528   ct[pl+7]=0xFF;
  ADD          RQ22, RD21, R5
  MOVU.B       RD13, (R5, 7)
// r_data.c:1529   ct+=ys1+8;
  MOV.L        (R2, 160), RD12
  ADDS.L       RD12, 8, RQ9
  ADD          RQ22, RQ9, RQ22
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 172), RD11
  BRLT.L       RD11, RD20, .L00802516

.L00802518:
  BSR          .L00802519, R0

.L0080250F:
// r_data.c:1532   {
  MOV.Q        (R2, 216), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (R2, 172), RD25
  ADDS.L       RD25, 1, RQ9
  SHAD.L       RQ9, 2, RQ18
  ADD          RQ26, RQ18, RQ22
// r_data.c:1534   for(x=0; x<xs; x++)
  ADD          R0, 0, RD20
  BRGE.L       RD25, RD20, .L0080251C

.L0080251A:
// r_data.c:1535   {
  BRLE.L       R0, RD20, .L0080251D
  MOV.Q        (R2, 192), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, RD20), RQ9
  ADDS.L       RD20, -1, RQ18
  MOV.L        (RQ26, RQ18), RQ8
  BRNE.Q       RQ8, RQ9, .L0080251E
// r_data.c:1539   {
  MOV.Q        (R2, 184), RQ27
  ADD          RQ27, 8, RQ26
  ADDS.L       RD20, -1, RQ9
  MOV.L        (RQ26, RQ9), RQ18
  MOV.L        RQ18, (RQ26, RD20)
// r_data.c:1541   continue;
  BSR          .L0080251B, R0

.L0080251E:

.L0080251D:
// r_data.c:1545   if(isofs16)
  MOV.L        (R2, 124), RD27
  BREQ.L       R0, RD27, .L0080251F
// r_data.c:1548   ofs=SHORT(csofs16[x]);
  MOV.Q        (R2, 200), RQ27
  MOVU.W       (RQ27, RD20), RD26
// r_data.c:1549   israw=0;	is16=0;		is8=0;
  MOV.L        RD0, (R2, 128)
  MOV.L        RD0, (R2, 132)
  MOV.L        RD0, (R2, 136)
  SHAR         RD26, 14, RQ8
  MOV.L        RD26, (R2, 140)
  BRNE.Q       1, RQ8, .L00802520
// r_data.c:1550   if((ofs>>14)==1)	is8=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)

.L00802520:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ9
  BRNE.Q       2, RQ9, .L00802521
// r_data.c:1551   if((ofs>>14)==2)	is16=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00802521:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 14, RQ18
  BRNE.Q       3, RQ18, .L00802522
// r_data.c:1552   if((ofs>>14)==3)	israw=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L00802522:
// r_data.c:1553   ofs&=0x3FFF;
  MOV.L        (R2, 140), RD27
  AND          RD27, 16383, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L00802523, R0

.L0080251F:
// r_data.c:1557   ofs=LONG(csofs[x]);
  MOV.Q        (R2, 208), RQ27
  MOVU.L       (RQ27, RD20), RQ8
  ADDS.L       RQ8, 0, RD26
// r_data.c:1558   israw=0;	is16=0;		is8=0;
  MOV.L        RD0, (R2, 128)
  MOV.L        RD0, (R2, 132)
  MOV.L        RD0, (R2, 136)
  SHAR         RD26, 28, RQ9
  MOV.L        RD26, (R2, 140)
  BRNE.Q       1, RQ9, .L00802524
// r_data.c:1559   if((ofs>>28)==1)	is8=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)

.L00802524:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 28, RQ18
  BRNE.Q       2, RQ18, .L00802525
// r_data.c:1560   if((ofs>>28)==2)	is16=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00802525:
  MOV.L        (R2, 140), RD27
  SHAR         RD27, 28, RQ8
  BRNE.Q       3, RQ8, .L00802526
// r_data.c:1561   if((ofs>>28)==3)	israw=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L00802526:
// r_data.c:1563   ofs&=0x00FFFFFF;
  MOV.L        (R2, 140), RD27
  AND          RD27, 0x00FFFFFF, RD27
  MOV.L        RD27, (R2, 140)

.L00802523:
// r_data.c:1566   cs=csbuf+ofs;
  MOV.Q        (R2, 224), RQ27
  MOV.L        (R2, 140), RD26
  ADD          RQ27, RD26, RQ23
// r_data.c:1567   tpatch->columnofs[x]=ct-ctbuf;
  MOV.Q        (R2, 216), RQ25
  SUB          RQ22, RQ25, RQ24
  MOV.Q        (R2, 184), RQ19
  ADD          RQ19, 8, RQ13
  ADDS.L       RQ24, 0, RQ9
  MOV.L        RQ9, (RQ13, RD20)
// r_data.c:1569   while(1)

.L00802527:
// r_data.c:1570   {
  MOVU.B       (RQ23, 0), RD27
// r_data.c:1572   pl=cs[1];
  MOVU.B       (RQ23, 1), RD21
// r_data.c:1573   if(py==0xFF)
  MOV.L        RD27, (R2, 144)
  BRNE.Q       255, RD27, .L0080252A
// r_data.c:1574   {
  ADD          RQ22, 0, RQ27
  ADD          RQ22, 1, RQ22
  ADD          R0, 255, RD26
  MOVU.B       RD26, (RQ27, 0)
// r_data.c:1576   break;
  BSR          .L00802528, R0

.L0080252A:
// r_data.c:1579   ct[0]=py;
  MOV.L        (R2, 144), RD27
  MOVU.B       RD27, (RQ22, 0)
// r_data.c:1580   ct[1]=pl;
  MOVU.B       RD21, (RQ22, 1)
// r_data.c:1582   if(is8)
  MOV.L        (R2, 136), RD26
  BREQ.L       R0, RD26, .L0080252B
// r_data.c:1583   {
  ADD          RQ22, 3, RQ11
  ADD          RQ23, 2, RQ10
  ADD          RD21, 0, RD12
  BSR          R_ColorCellPostDecodeC8, R1
// r_data.c:1585   cs+=2+((pl+7)/8)*3;
  ADDS.L       RD21, 7, RQ18
  ADD          RQ18, 0, RQ8
  ADD          R0, 8, RD27
  DIVS.L       RQ8, RD27, RQ8
  ADD          R0, 3, R5
  MULS.L       RQ8, R5, RQ9
  ADDS.L       RQ9, 2, RQ18
  ADD          RQ23, RQ18, RQ23
  BSR          .L0080252C, R0

.L0080252B:
  MOV.L        (R2, 132), RD27
  BREQ.L       R0, RD27, .L0080252D
// r_data.c:1588   {
  ADD          RQ22, 3, RQ11
  ADD          RQ23, 2, RQ10
  ADD          RD21, 0, RD12
  BSR          R_ColorCellPostDecodeC16, R1
// r_data.c:1590   cs+=2+((pl+15)/16)*4;
  ADDS.L       RD21, 15, RQ18
  ADD          RQ18, 0, RQ8
  ADD          R0, 16, RD27
  DIVS.L       RQ8, RD27, RQ8
  SHAD.L       RQ8, 2, RQ9
  ADDS.L       RQ9, 2, RQ18
  ADD          RQ23, RQ18, RQ23
  BSR          .L0080252E, R0

.L0080252D:
  MOV.L        (R2, 128), RD27
  BREQ.L       R0, RD27, .L0080252F
// r_data.c:1593   {
  ADD          RQ23, 2, RQ27
  ADD          RQ22, 3, RQ26
  ADDS.L       RD21, 0, RQ25
  ADD          RQ26, 0, RQ10
  ADD          RQ27, 0, RQ11
  ADD          RQ25, 0, RQ12
  BSR          memcpy, R1
// r_data.c:1595   cs+=2+pl;
  ADDS.L       RD21, 2, RQ9
  ADD          RQ23, RQ9, RQ23
  BSR          .L00802530, R0

.L0080252F:
// r_data.c:1597   {
  ADD          RQ23, 3, RQ27
  ADD          RQ22, 3, RQ26
  ADDS.L       RD21, 0, RQ25
  ADD          RQ26, 0, RQ10
  ADD          RQ27, 0, RQ11
  ADD          RQ25, 0, RQ12
  BSR          memcpy, R1
// r_data.c:1599   cs+=4+pl;
  ADDS.L       RD21, 4, RQ9
  ADD          RQ23, RQ9, RQ23

.L00802530:

.L0080252E:

.L0080252C:
// r_data.c:1602   ct[2]=ct[3];
  MOVU.B       (RQ22, 3), RQ18
  MOVU.B       RQ18, (RQ22, 2)
// r_data.c:1603   ct[pl+3]=ct[pl+2];
  ADD          RQ22, RD21, R5
  MOVU.B       (R5, 2), RQ9
  ADD          RQ22, RD21, R5
  MOVU.B       RQ9, (R5, 3)
// r_data.c:1605   ct+=pl+4;
  ADDS.L       RD21, 4, RQ8
  ADD          RQ22, RQ8, RQ22
  BSR          .L00802527, R0

.L00802528:

.L0080251B:
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 172), RD27
  BRLT.L       RD27, RD20, .L0080251A

.L0080251C:

.L00802519:
// r_data.c:1611   return(src);
  MOV.Q        (R2, 240), RQ10

.L00C01A5D:
  ADD          R2, 440, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

munmap:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
// pdpc201/bt_mman.c:27   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  BSR          tk_munmap, R1

.L00C01A63:
  ADD          R2, 384, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

I_SetChannels:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.Q        R27, (R2, 56)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.Q        R58, (R2, 80)
  MOV.Q        R59, (R2, 88)
  MOV.X        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R56, (R2, 64)
  MOV.Q        R57, (R2, 72)
  ADD          R2, -360, R2
// i_sound_btsh.c:491   int*	steptablemid = steptable + 128;
  MOV          steptable, RQ27
  ADD          RQ27, 512, RQ20
  ADD          RQ20, 0, RQ21
// i_sound_btsh.c:501   for (i=-128 ; i<128 ; i++)
  ADD          R0, -128, RD9

.L008011D4:
// i_sound_btsh.c:502   steptablemid[i] = (int)(pow(2.0, (i/64.0))*65536.0);
  FLDCI        RD9, RQ56
  ADD          R0, 0x3F900000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FMUL         RQ56, RQ57, RQ11
  ADD          R0, 0x40000000, RQ10
  LDSH32       RQ10, 0, RQ10
  BSR          pow, R1
  FMOVID       RQ10, RQ56
  ADD          R0, 0x40F00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ58
  FMUL         RQ56, RQ58, RQ59
  FSTCI        RQ59, RQ18
  MOV.L        RQ18, (RQ21, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       128, RD9, .L008011D4

.L008011D6:
// i_sound_btsh.c:508   for (i=0 ; i<128 ; i++)
  ADD          R0, 0, RD9

.L008011D7:
// i_sound_btsh.c:509   for (j=0 ; j<256 ; j++)
  ADD          R0, 0, RD8

.L008011DA:
// i_sound_btsh.c:510   vol_lookup[i*256+j] = (i*(j-128)*256)/127;
  ADDS.L       RD8, -128, RQ18
  MULS.L       RD9, RQ18, RQ23
  SHAD.L       RQ23, 8, RQ18
  ADD          R0, 127, R5
  DIVS.L       RQ18, R5, RQ23
  SHAD.L       RD9, 8, RQ18
  ADDS.L       RQ18, RD8, RQ22
  MOV          vol_lookup, RQ27
  MOV.L        RQ23, (RQ27, RQ22)
  ADDS.L       RD8, 1, RD8
  BRLT.L       256, RD8, .L008011DA

.L008011DC:
  ADDS.L       RD9, 1, RD9
  BRLT.L       128, RD9, .L008011D7

.L008011D9:

.L00C01A69:
  ADD          R2, 360, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  MOV.Q        (R2, 64), R56
  MOV.Q        (R2, 72), R57
  MOV.Q        (R2, 80), R58
  MOV.Q        (R2, 88), R59
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

w_filelength:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
  ADDS.L       RD10, 0, RD9
// w_wad.c:272   if(hdl<0)
  BRGE.L       R0, RD9, .L00802896
// w_wad.c:273   __debugbreak();

w_filelength.debugbreak_L02BD:
  BRK          701

.L00802896:
// w_wad.c:275   if(hdl>=32)
  BRLT.L       32, RD9, .L00802897
// w_wad.c:276   __debugbreak();

w_filelength.debugbreak_L02BE:
  BRK          702

.L00802897:
// w_wad.c:279   fd=w_openfiles[hdl];
  MOV          w_openfiles, RQ13
  MOV.Q        (RQ13, RD9), RQ18
// w_wad.c:280   if(!fd)
  BRNE.Q       R0, RQ18, .L00802898
// w_wad.c:281   __debugbreak();

w_filelength.debugbreak_L02BF:
  BRK          703

.L00802898:
// w_wad.c:284   fseek(fd, 0, 2);
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 2, RD12
  BSR          fseek, R1
// w_wad.c:285   i=ftell(fd);
  ADD          RQ18, 0, RQ10
  BSR          ftell, R1
  ADD          RQ10, 0, RQ8
  ADDS.L       RQ8, 0, RD23
// w_wad.c:286   fseek(fd, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          fseek, R1
// w_wad.c:287   return(i);
  ADD          RD23, 0, RD10

.L00C01A7E:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

A_FatAttack2:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ22
// p_enemy.c:1413   A_FaceTarget (actor);
  ADD          RQ22, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1415   actor->angle -= FATSPREAD;
  MOVU.L       (RQ22, 56), RQ18
  LUI          -32768, R5
  ADDU.L       R5, RQ18, RQ8
  MOVU.L       RQ8, (RQ22, 56)
// p_enemy.c:1416   P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (RQ22, 176), RQ23
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
// p_enemy.c:1418   mo = P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (RQ22, 176), RQ23
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ9
// p_enemy.c:1419   mo->angle -= FATSPREAD*2;
  MOVU.L       (RQ9, 56), RQ18
  LUI          0xFFFFFFFFFFFF0000, R5
  ADDU.L       R5, RQ18, RQ8
  MOVU.L       RQ8, (RQ9, 56)
// p_enemy.c:1420   an = mo->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ9, 56), RQ18
  SHLR         RQ18, 19, RD20
// p_enemy.c:1421   mo->momx = FixedMul (mo->info->speed, finecosine[an]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD20), RQ8
  MOV.L        RD20, (R2, 100)
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ21
  MOV.L        RQ21, (RQ9, 112)
// p_enemy.c:1422   mo->momy = FixedMul (mo->info->speed, finesine[an]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD20), RQ18
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ9, 116)

.L00C01A87:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

S_UpdateSounds:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 152)
// s_sound.c:535   mobj_t*	listener = (mobj_t*)listener_p;
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ13
  MOV.Q        RQ13, (R2, 128)
// s_sound.c:558   for (cnum=0 ; cnum<numChannels ; cnum++)
  ADD          R0, 0, RD9
  MOV.L        numChannels, RD12
  BRGE.L       RD12, RD9, .L00802D5C

.L00802D5A:
// s_sound.c:559   {
  MOV.Q        TU7A00CA3E/s_channels, RQ27
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ8
  ADD          RQ27, RQ8, RQ8
// s_sound.c:561   sfx = c->sfxinfo;
  MOV.Q        (RQ8, 0), RQ22
// s_sound.c:563   if (c->sfxinfo)
  BREQ.Q       R0, RQ22, .L00802D5D
  MOV.L        (RQ8, 16), RQ23
  ADD          RQ23, 0, RD10
  BSR          I_SoundIsPlaying, R1
  ADD          RQ10, 0, RQ21
  BREQ.L       R0, RQ21, .L00802D5E
// s_sound.c:568   volume = snd_SfxVolume;
  MOV.L        snd_SfxVolume, RD27
  ADD          RD27, 0, RD13
  MOV.L        RD13, (R2, 148)
// s_sound.c:569   pitch = NORM_PITCH;
  ADD          R0, 128, RD27
  MOV.L        RD27, (R2, 140)
// s_sound.c:570   sep = NORM_SEP;
  MOV.L        RD27, (R2, 144)
  MOV.Q        (RQ22, 16), RQ18
  BREQ.Q       R0, RQ18, .L00802D5F
// s_sound.c:573   {
  MOV.L        (RQ22, 24), RD27
  MOV.L        RD27, (R2, 140)
// s_sound.c:575   volume += sfx->volume;
  MOV.L        (RQ22, 28), RQ23
  MOV.L        (R2, 148), RD27
  ADDS.L       RD27, RQ23, RD27
  MOV.L        RD27, (R2, 148)
  BRGE.L       1, RD27, .L00802D60
// s_sound.c:577   {
  ADDS.L       RD9, 0, RD10
  BSR          S_StopChannel, R1
// s_sound.c:579   continue;
  BSR          .L00802D5B, R0
  BSR          .L00802D61, R0

.L00802D60:
  MOV.L        (R2, 148), RD27
  MOV.L        snd_SfxVolume, RD13
  BRLE.L       RD13, RD27, .L00802D62
// s_sound.c:582   {
  MOV.L        snd_SfxVolume, RD27
  ADD          RD27, 0, RD13
  MOV.L        RD13, (R2, 148)

.L00802D62:

.L00802D61:

.L00802D5F:
  MOV.Q        (RQ8, 8), RQ18
  BREQ.Q       R0, RQ18, .L00802D63
  MOV.Q        (RQ8, 8), RQ18
  MOV.Q        (R2, 152), RQ27
  BREQ.Q       RQ18, RQ27, .L00802D63

.L00802D64:
// s_sound.c:590   {
  ADD          R2, 140, RQ18
  ADD          R2, 144, RQ13
  ADD          R2, 148, RQ12
  MOV.Q        (RQ8, 8), RQ27
  MOV.Q        (R2, 128), RQ10
  ADD          RQ27, 0, RQ11
  ADD          RQ18, 0, RQ14
  BSR          S_AdjustSoundParams, R1
  ADD          RQ10, 0, RD20
  BRNE.L       R0, RD20, .L00802D66
// s_sound.c:598   {
  ADDS.L       RD9, 0, RD10
  BSR          S_StopChannel, R1
  BSR          .L00802D67, R0

.L00802D66:
// s_sound.c:602   I_UpdateSoundParams(c->handle, volume, sep, pitch);
  MOV.L        (RQ8, 16), RQ23
  ADD          RQ23, 0, RD10
  MOV.L        (R2, 148), RD11
  MOV.L        (R2, 144), RD12
  MOV.L        (R2, 140), RD13
  BSR          I_UpdateSoundParams, R1

.L00802D67:

.L00802D63:
  BSR          .L00802D68, R0

.L00802D5E:
// s_sound.c:609   S_StopChannel(cnum);
  ADDS.L       RD9, 0, RD10
  BSR          S_StopChannel, R1

.L00802D68:

.L00802D5D:

.L00802D5B:
  ADDS.L       RD9, 1, RD9
  MOV.L        numChannels, RD27
  BRLT.L       RD27, RD9, .L00802D5A

.L00802D5C:

.L00C01A8D:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

M_Drawer:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -648, R2
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 144)
// m_menu.c:1809   char		string[256];
// m_menu.c:1812   inhelpscreens = false;
  MOV.L        RD0, inhelpscreens
// m_menu.c:1816   if (messageToPrint)
  MOV.L        messageToPrint, RD27
  BREQ.L       R0, RD27, .L008016FC
// m_menu.c:1817   {
  ADD          R0, 0, RD23
// m_menu.c:1819   y = 100 - M_StringHeight(messageString)/2;
  MOV.Q        messageString, RQ10
  BSR          M_StringHeight, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ27
  ADD          R0, 2, RD26
  DIVS.L       RQ27, RD26, RQ27
  ADD          R0, 100, R5
  SUBS.L       R5, RQ27, RQ9
  SHAD.Q       RQ9, 48, RD25
  SHAR.Q       RD25, 48, RD25
  MOV.W        RD25, M_Drawer/y!120
// m_menu.c:1820   while(*(messageString+start))
  BSR          .L008016FF, R0

.L008016FD:
// m_menu.c:1821   {
  ADD          R0, 0, RD8
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ18
  ADD          RQ18, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ22
  SHAD.Q       RD8, 48, RQ20
  SHAR.Q       RQ20, 48, RQ20
  BRGEU.Q      RQ22, RQ20, .L00801702

.L00801700:
// m_menu.c:1823   if (*(messageString+start+i) == '\n')
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ18
  ADD          RQ18, RD8, RQ21
  MOV.B        (RQ21, 0), RQ9
  BRNE.Q       10, RQ9, .L00801703
// m_menu.c:1824   {
  ADD          R2, 160, RQ27
  MOV.Q        RQ0, (RQ27, 0)
  MOV.Q        RQ0, (RQ27, 8)
  MOV.Q        RQ0, (RQ27, 16)
  MOV.Q        RQ0, (RQ27, 24)
  MOV.Q        RQ0, (RQ27, 32)
// m_menu.c:1826   strncpy(string,messageString+start,i);
  MOV.Q        messageString, RQ26
  ADD          RQ26, RD23, RQ18
  SHAD.Q       RD8, 48, RQ22
  SHAR.Q       RQ22, 48, RQ22
  ADD          RQ27, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ22, 0, RQ12
  BSR          strncpy, R1
// m_menu.c:1827   start += i+1;
  ADDS.L       RD8, 1, RQ9
  ADDS.L       RD23, RQ9, RD23
// m_menu.c:1828   break;
  BSR          .L00801702, R0

.L00801703:
  ADDS.L       RD8, 1, RD8
  SHAD.Q       RD8, 48, RD8
  SHAR.Q       RD8, 48, RD8
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ18
  ADD          RQ18, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ22
  SHAD.Q       RD8, 48, RQ20
  SHAR.Q       RQ20, 48, RQ20
  BRLTU.Q      RQ22, RQ20, .L00801700

.L00801702:
// m_menu.c:1831   if (i == strlen(messageString+start))
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ21
  ADD          RQ21, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ22
  SHAD.Q       RD8, 48, RQ20
  SHAR.Q       RQ20, 48, RQ20
  BRNE.Q       RQ22, RQ20, .L00801704
// m_menu.c:1832   {
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ21
  ADD          R2, 160, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strcpy, R1
// m_menu.c:1834   start += i;
  ADDS.L       RD23, RD8, RD23

.L00801704:
// m_menu.c:1837   x = 160 - M_StringWidth(string)/2;
  ADD          R2, 160, RQ10
  BSR          M_StringWidth, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ27
  ADD          R0, 2, RD26
  DIVS.L       RQ27, RD26, RQ27
  ADD          R0, 160, R5
  SUBS.L       R5, RQ27, RQ9
  SHAD.Q       RQ9, 48, RD25
  SHAR.Q       RD25, 48, RD25
  MOV.W        RD25, M_Drawer/x!120
// m_menu.c:1838   M_WriteText(x,y,string);
  MOV.W        M_Drawer/x!120, RD10
  MOV.W        M_Drawer/y!120, RD11
  ADD          R2, 160, RQ12
  BSR          M_WriteText, R1
// m_menu.c:1839   y += SHORT(hu_font[0]->height);
  MOV          hu_font, RQ25
  MOV.Q        (RQ25, 0), RQ18
  MOV.W        (RQ18, 2), RQ9
  MOV.W        M_Drawer/y!120, RD25
  ADDS.L       RD25, RQ9, RQ27
  SHAD.Q       RQ27, 48, RD25
  SHAR.Q       RD25, 48, RD25
  MOV.W        RD25, M_Drawer/y!120

.L008016FF:
  MOV.Q        messageString, RQ27
  ADD          RQ27, RD23, RQ18
  MOV.B        (RQ18, 0), RQ9
  BRNE.L       R0, RQ9, .L008016FD

.L008016FE:
// m_menu.c:1840   }
  BSR          .L00C01A93, R0

.L008016FC:
// m_menu.c:1844   if (!menuactive)
  MOV.L        menuactive, RD27
  BREQ.L       R0, RD27, .L00C01A93
// m_menu.c:1847   if (currentMenu->routine)
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 24), RQ18
  BREQ.Q       R0, RQ18, .L00801705
// m_menu.c:1848   currentMenu->routine();		 // call Draw routine
  MOV.Q        currentMenu, RQ27
  ADD          RQ27, 0, RQ21
  MOV.Q        (RQ27, 24), RQ18
  ADD          RQ21, 0, RQ29
  JSR          RQ18, 0, R1

.L00801705:
// m_menu.c:1851   x = currentMenu->x;
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 32), RD26
  MOV.W        RD26, M_Drawer/x!120
// m_menu.c:1852   y = currentMenu->y;
  MOV.W        (RQ27, 34), RD26
  MOV.W        RD26, M_Drawer/y!120
// m_menu.c:1853   max = currentMenu->numitems;
  MOV.W        (RQ27, 0), RD26
// m_menu.c:1855   for (i=0; i<max; i++)
  ADD          R0, 0, RD8
  MOV.L        RD26, (R2, 156)
  BRGE.L       RD26, RD8, .L00801708

.L00801706:
// m_menu.c:1856   {
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ18
  SHAD.L       RD8, 5, RQ27
  ADD          RQ18, RQ27, RQ27
  MOV.B        (RQ27, 2), RQ9
  BREQ.L       R0, RQ9, .L00801709
// m_menu.c:1861   V_DrawPatchDirectName (x,y,0,
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ18
  SHAD.L       RD8, 5, RQ27
  ADD          RQ18, RQ27, RQ27
  ADD          RQ27, 2, RQ18
  MOV.W        M_Drawer/x!120, RD10
  MOV.W        M_Drawer/y!120, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00801709:
// m_menu.c:1863   }
  MOV.W        M_Drawer/y!120, RD27
  ADDS.L       RD27, 16, RQ9
  SHAD.Q       RQ9, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, M_Drawer/y!120
  ADDS.L       RD8, 1, RD8
  SHAD.Q       RD8, 48, RD8
  SHAR.Q       RD8, 48, RD8
  MOV.L        (R2, 156), RD27
  BRLT.L       RD27, RD8, .L00801706

.L00801708:
// m_menu.c:1871   V_DrawPatchDirectName(
  MOV          skullName, RQ27
  MOV.W        whichSkull, RD26
  ADD          R0, 9, R5
  MUL.L        RD26, R5, RQ18
  ADD          RQ27, RQ18, RQ18
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 34), RQ9
  ADDS.L       RQ9, -5, RQ27
  MOV.W        itemOn, RD26
  SHAD.L       RD26, 4, RQ9
  ADDS.L       RQ27, RQ9, RQ11
  MOV.W        M_Drawer/x!120, RD26
  ADDS.L       RD26, -32, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C01A93:
  ADD          R2, 648, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

M_ChangeDetail:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1175   {
  ADD          R0, 0, RD9
// m_menu.c:1177   detailLevel = 1 - detailLevel;
  MOV.L        detailLevel, RD8
  ADD          R0, 1, R5
  SUBS.L       R5, RD8, RQ18
  ADD          RQ18, 0, RD8
  MOV.L        RD8, detailLevel
// m_menu.c:1186   R_SetViewSize (screenblocks, detailLevel);
  MOV.L        screenblocks, RD10
  MOV.L        detailLevel, RD11
  BSR          R_SetViewSize, R1
// m_menu.c:1188   if (!detailLevel)
  MOV.L        detailLevel, RD8
  BRNE.L       R0, RD8, .L00801676
// m_menu.c:1189   players[consoleplayer].message = DETAILHI;
  MOV          players, RQ8
  MOV.L        consoleplayer, RD13
  ADD          R0, 320, R5
  MUL.L        RD13, R5, RQ12
  ADD          RQ8, RQ12, RQ12
  MOV          .L00C01A9A, RQ8
  MOV.Q        RQ8, (RQ12, 224)
  BSR          .L00801677, R0

.L00801676:
// m_menu.c:1191   players[consoleplayer].message = DETAILLO;
  MOV          players, RQ8
  MOV.L        consoleplayer, RD13
  ADD          R0, 320, R5
  MUL.L        RD13, R5, RQ12
  ADD          RQ8, RQ12, RQ12
  MOV          .L00C01A9B, RQ8
  MOV.Q        RQ8, (RQ12, 224)

.L00801677:

.L00C01A99:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

tk_sysc_closedir:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -424, R2
  ADD          RQ10, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:200   
// tk_vf_sysc.c:205   
  ADD          R0, 0, RQ21
  MOV.Q        RQ21, (R2, 88)
// tk_vf_sysc.c:206   
  MOV.L        (RQ9, 64), RQ23
  ADD          R2, 112, RQ21
  ADD          RQ21, 0, RQ20
  MOV.L        RQ23, (RQ20, 0)
// tk_vf_sysc.c:207   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4135, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ21, 0, RQ13
  BSR          tk_syscall, R1
  ADDS.L       RQ10, 0, RD8
// tk_vf_sysc.c:208   
  MOV.Q        (RQ9, 24), RQ18
  ADD          RQ18, 0, RQ10
  BSR          free, R1
// tk_vf_sysc.c:209   
  ADD          RQ9, 0, RQ10
  BSR          tk_free_dir, R1
// tk_vf_sysc.c:210   
  ADDS.L       RD8, 0, RD10

.L00C01AA1:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

_mgettag:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdlib.c:240   
  ADD          RQ9, 0, RQ10
  MOV.Q        _mgettag_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C01AA7:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tk_putc_v:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -424, R2
  MOV.L        RD10, (R2, 108)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_puts.c:194   
// tk_core/tk_puts.c:201   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 88)
// tk_core/tk_puts.c:202   
  ADD          R2, 112, RQ8
  ADD          RQ8, 0, RQ23
  MOV.L        (R2, 108), RD22
  MOV.L        RD22, (RQ23, 0)
// tk_core/tk_puts.c:203   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4104, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1

.L00C01AAD:
  ADD          R2, 424, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_BeginPrint:
// p_acspec.c:1063   {
  MOVU.B       RD0, (RQ10, 1328)

.L00C01AAE:
  JSR          R1, 0, R0

__umodsi3:
// pdpc201/btshx_supdll.c:454   
  DIVU.L       RD10, RD11, RD13
// pdpc201/btshx_supdll.c:455   
  MULU.L       RD13, RD11, RQ12
  SUBU.L       RD10, RQ12, RD17
// pdpc201/btshx_supdll.c:462   
  ADD          RD17, 0, RD10

.L00C01AAF:
  JSR          R1, 0, R0
  .balign 4

A_FatRaise:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 99, RD9
// p_enemy.c:1385   {
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1387   S_StartSound (actor, sfx_manatk);
  ADD          RQ18, 0, RQ10
  ADD          R0, 99, RD11
  BSR          S_StartSound, R1

.L00C01AB5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawFuzzColumn:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
// r_draw.c:577   if (!dc_yl)
  MOV.L        dc_yl, RD13
  BRNE.L       R0, RD13, .L008025C8
// r_draw.c:578   dc_yl = 1;
  ADD          R0, 1, RD13
  MOV.L        RD13, dc_yl

.L008025C8:
// r_draw.c:581   if (dc_yh == viewheight-1)
  MOV.L        viewheight, RD13
  ADDS.L       RD13, -1, RQ8
  MOV.L        dc_yh, RD13
  BRNE.Q       RQ8, RD13, .L008025C9
// r_draw.c:582   dc_yh = viewheight - 2;
  MOV.L        viewheight, RD13
  ADDS.L       RD13, -2, RD12
  MOV.L        RD12, dc_yh

.L008025C9:
// r_draw.c:584   count = dc_yh - dc_yl;
  MOV.L        dc_yh, RD13
  MOV.L        dc_yl, RD12
  SUBS.L       RD13, RD12, RD21
// r_draw.c:587   if (count < 0)
  BRLT.L       R0, RD21, .L00C01ABB
// r_draw.c:591   fuzzmask = fuzzseed >> 16;
  MOV.Q        R_DrawFuzzColumn/fuzzseed!25, RQ13
  SHLR.Q       RQ13, 16, RQ12
// r_draw.c:593   fuzzseed = (fuzzseed << 1) + (fuzzseed>>7) + (fuzzseed>>17) + 1;
  SHLD.Q       RQ13, 1, RQ20
  SHLR.Q       RQ13, 7, RQ11
  ADD          RQ20, RQ11, RQ10
  SHLR.Q       RQ13, 17, RQ20
  ADD          RQ10, RQ20, RQ11
  ADD          RQ11, 1, RQ13
// r_draw.c:594   fuzzmask += fuzzseed;
  ADD          RQ12, RQ13, RQ12
  MOV.Q        RQ12, (R2, 136)
  MOV.Q        RQ13, R_DrawFuzzColumn/fuzzseed!25
// r_draw.c:597   if ((unsigned)dc_x >= SCREENWIDTH
  MOV.L        dc_x, RD13
  ADDU.L       RD13, R0, RQ8
  ADD          R0, 320, RQ22
  CMPGE.Q      RQ8, RQ22, RQ18
  MOV.L        dc_yl, RD13
  CMPLT.Q      RD13, R0, RQ8
  OR           RQ18, RQ8, RQ22
  MOV.L        dc_yh, RD13
  ADD          R0, 200, R5
  CMPGE.Q      RD13, R5, RQ8
  OR           RQ22, RQ8, RQ18
  BREQ.L       R0, RQ18, .L008025CA
// r_draw.c:599   {
  MOV          .L00C01ABC, RQ10
  MOV.L        dc_yl, RD11
  MOV.L        dc_yh, RD12
  MOV.L        dc_x, RD13
  BSR          I_Error, R1

.L008025CA:
// r_draw.c:633   dest = ylookup[dc_yl] + columnofs[dc_x];
  MOV          ylookup, RQ13
  MOV.L        dc_yl, RD12
  MOV.Q        (RQ13, RD12), RQ11
  MOV          columnofs, RQ13
  MOV.L        dc_x, RD10
  MOV.L        (RQ13, RD10), RQ8
  LEA.W        RQ11, RQ8, RQ23
// r_draw.c:636   fracstep = dc_iscale;
  MOV.L        dc_iscale, RD13
// r_draw.c:637   frac = dc_texturemid + (dc_yl-centery)*fracstep;
  MOV.L        centery, RD10
  SUBS.L       RD12, RD10, RQ18
  MULS.L       RQ18, RD13, RQ22
  MOV.L        RD13, (R2, 128)
  MOV.L        dc_texturemid, RD10
  ADDS.L       RD10, RQ22, RD12
  MOV.L        RD12, (R2, 132)
// r_draw.c:642   do

.L008025CB:
// r_draw.c:651   fuzzofs = -FUZZOFF;
  ADD          R0, -320, RD13
  MOV.L        RD13, (R2, 124)
// r_draw.c:652   if((fuzzmask>>fuzzpos)&1)
  MOV.L        fuzzpos, RQ18
  MOV.Q        (R2, 136), RQ12
  SHLR.Q       RQ12, RQ18, RQ20
  ADD          R0, 1, RQ11
  BTST.Q       RQ11, RQ20, .L008025CE
// r_draw.c:653   fuzzofs = FUZZOFF;
  ADD          R0, 320, RD13
  MOV.L        RD13, (R2, 124)

.L008025CE:
// r_draw.c:656   px=dest[fuzzofs];
  MOV.L        (R2, 124), RD13
  MOVU.W       (RQ23, RD13), RD9
// r_draw.c:662   px= px - ((px&0x739C)>>1);
  AND          RD9, 29596, RQ22
  SHAR         RQ22, 1, RQ8
  SUBS.L       RD9, RQ8, RD9
// r_draw.c:670   *dest = px;
  MOVU.W       RD9, (RQ23, 0)
// r_draw.c:673   if (++fuzzpos == FUZZTABLE)
  MOV.L        fuzzpos, RD12
  ADDS.L       RD12, 1, RD12
  MOV.L        RD12, fuzzpos
  BRNE.Q       50, RD12, .L008025CF
// r_draw.c:674   fuzzpos = 0;
  MOV.L        RD0, fuzzpos

.L008025CF:
// r_draw.c:676   dest += SCREENWIDTH;
  ADD          RQ23, 640, RQ23
// r_draw.c:678   frac += fracstep;
  MOV.L        (R2, 128), RD13
  MOV.L        (R2, 132), RD12
  ADDS.L       RD12, RD13, RD12
  MOV.L        RD12, (R2, 132)
  ADD          RD21, 0, RQ18
  ADDS.L       RD21, -1, RD21
  BRNE.L       R0, RQ18, .L008025CB

.L00C01ABB:
  ADD          R2, 384, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

TKMM_SetZoneTag:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ21
  ADD          RD11, 0, RD20
// tk_core/tk_mmpage.c:1153   
  BRNE.Q       R0, RQ21, .L008009AB
// tk_core/tk_mmpage.c:1154   
  ADD          R0, -1, RD10
  BSR          .L00C01AC2, R0

.L008009AB:
// tk_core/tk_mmpage.c:1156   
  ADD          RQ21, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:1157   
  BRNE.Q       R0, RQ18, .L008009AC
// tk_core/tk_mmpage.c:1158   
  ADD          R0, -1, RD10
  BSR          .L00C01AC2, R0

.L008009AC:
// tk_core/tk_mmpage.c:1160   
  MOVU.B       (RQ18, 4), RQ8
  ADD          R0, 8, RD27
  BTST.L       RD27, RQ8, .L008009AD
// tk_core/tk_mmpage.c:1161   
  ADD          RQ18, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          TKMM_MMCell_GetLnkObjCellHeadPtr, R1
  ADD          RQ10, 0, RQ22
// tk_core/tk_mmpage.c:1163   
  MOV.Q        (RQ22, 0), RQ9
// tk_core/tk_mmpage.c:1164   
  ADD          R0, -1, RQ27
  LDSH32       RQ27, 0x0000FFFF, RQ27
  AND          RQ9, RQ27, RQ9
// tk_core/tk_mmpage.c:1165   
  ADDS.L       RD20, 0, RQ23
  ADD          RQ23, 0, RQ26
  LDIZ         0x0000FFFF, RQ25
  AND          RQ26, RQ25, RQ26
  SHLD.Q       RQ26, 16, RQ23
  OR           RQ9, RQ23, RQ9
// tk_core/tk_mmpage.c:1166   
  MOV.Q        RQ9, (RQ22, 0)
// tk_core/tk_mmpage.c:1167   
  ADD          RD20, 0, RQ8
  AND          RQ8, 0x0000FFFF, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          .L00C01AC2, R0

.L008009AD:
// tk_core/tk_mmpage.c:1170   
  MOVU.W       RD20, (RQ18, 2)
// tk_core/tk_mmpage.c:1171   
  MOVU.W       (RQ18, 2), RQ8
  AND          RQ8, 0x0000FFFF, RD10

.L00C01AC2:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_AllocBigInt:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
// tk_core/lva_tagopr.c:170   
  MOV.Q        tkmm_lva_freebigint, RQ18
// tk_core/lva_tagopr.c:171   
  BREQ.Q       R0, RQ18, .L00800E21
// tk_core/lva_tagopr.c:172   
  MOV.Q        (RQ18, 0), RQ13
  MOV.Q        RQ13, tkmm_lva_freebigint
// tk_core/lva_tagopr.c:174   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01AC8, R0

.L00800E21:
// tk_core/lva_tagopr.c:177   
  ADD          R0, 24, RD10
  ADD          R0, 48, RD11
  BSR          TKMM_LVA_TagMalloc, R1
// tk_core/lva_tagopr.c:178   

.L00C01AC8:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

M_ClearMenus:
// m_menu.c:1883   {
  ADDS.L       RD0, 0, RD13
  MOV.L        RD13, menuactive

.L00C01AC9:
  JSR          R1, 0, R0

TKMM_InitMMap:
// tk_core/tk_mmap.c:379   
  MOV.Q        TKMM_MmapF, RQ13
  BRNE.Q       R0, RQ13, .L00C01ACA
// tk_core/tk_mmap.c:397   
  MOV          TKMM_MmapV, RQ13
  ADD          RQ13, 0, RQ12
// tk_core/tk_mmap.c:398   
  MOV          TKMM_MunmapV, RQ11
  ADD          RQ11, 0, RQ10
// tk_core/tk_mmap.c:399   
  MOV          TKMM_MProtectV, RQ17
  ADD          RQ17, 0, RQ16
// tk_core/tk_mmap.c:400   
  MOV          TKMM_MSyncV, RQ15
  ADD          RQ15, 0, RQ14
  MOV.Q        RQ12, TKMM_MmapF
  MOV.Q        RQ10, TKMM_MunmapF
  MOV.Q        RQ16, TKMM_MProtectF
  MOV.Q        RQ14, TKMM_MSyncF

.L00C01ACA:
  JSR          R1, 0, R0

R_InitBuffer:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  ADD          RD10, 0, RD21
  ADD          RD11, 0, RD20
// r_draw.c:1803   for (i=0 ; i<MAXWIDTH ; i++)
  ADD          R0, 0, RD18

.L00802613:
// r_draw.c:1804   { columnofs[i] = 0; }
  MOV          columnofs, RQ13
  MOV.L        RD0, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  ADD          R0, 1120, RD13
  BRLT.L       RD13, RD18, .L00802613

.L00802615:
// r_draw.c:1806   for (i=0 ; i<MAXHEIGHT ; i++)
  ADD          R0, 0, RD18

.L00802616:
// r_draw.c:1807   {
  ADD          R0, 0, RQ8
  MOV          ylookup, RQ13
  MOV.Q        RQ8, (RQ13, RD18)
// r_draw.c:1809   ylookup_zb[i] = 0;
  ADD          R0, 0, RQ8
  MOV          ylookup_zb, RQ13
  MOV.Q        RQ8, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       832, RD18, .L00802616

.L00802618:
// r_draw.c:1812   if( (width >= MAXWIDTH) || (height >= MAXHEIGHT) )
  ADD          R0, 1120, RD13
  CMPGE.Q      RD21, RD13, RQ23
  ADD          R0, 832, R5
  CMPGE.Q      RD20, R5, RQ9
  OR           RQ23, RQ9, RQ12
  BREQ.L       R0, RQ12, .L00802619
// r_draw.c:1813   __debugbreak();

R_InitBuffer.debugbreak_L02C5:
  BRK          709

.L00802619:
// r_draw.c:1818   viewwindowx = (SCREENWIDTH-width) >> 1;
  ADD          R0, 320, R5
  SUBS.L       R5, RD21, RQ23
  SHAR         RQ23, 1, RD13
  MOV.L        RD13, viewwindowx
// r_draw.c:1821   for (i=0 ; i<width ; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD21, RD18, .L0080261C

.L0080261A:
// r_draw.c:1822   columnofs[i] = viewwindowx + i;
  MOV.L        viewwindowx, RD13
  ADDS.L       RD13, RD18, RQ9
  MOV          columnofs, RQ13
  MOV.L        RQ9, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD21, RD18, .L0080261A

.L0080261C:
// r_draw.c:1825   if (width == SCREENWIDTH)
  BRNE.Q       320, RD21, .L0080261D
// r_draw.c:1826   viewwindowy = 0;
  MOV.L        RD0, viewwindowy
  BSR          .L0080261E, R0

.L0080261D:
// r_draw.c:1828   viewwindowy = (SCREENHEIGHT-SBARHEIGHT-height) >> 1;
  ADD          R0, 168, R5
  SUBS.L       R5, RD20, RQ13
  SHAR         RQ13, 1, RD12
  MOV.L        RD12, viewwindowy

.L0080261E:
// r_draw.c:1832   for (i=0 ; i<height ; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD20, RD18, .L00802621

.L0080261F:
// r_draw.c:1833   {
  MOV          screens, RQ13
  MOV.Q        (RQ13, 0), RQ8
  MOV.L        viewwindowy, RD13
  ADDS.L       RD18, RD13, RQ23
  ADD          R0, 320, R5
  MULS.L       RQ23, R5, RQ9
  LEA.W        RQ8, RQ9, RQ22
  MOV          ylookup, RQ12
  MOV.Q        RQ22, (RQ12, RD18)
// r_draw.c:1836   ylookup_zb[i] = screens_zbuf + (i+viewwindowy)*SCREENWIDTH;
  ADDS.L       RD18, RD13, RQ23
  ADD          R0, 320, R5
  MULS.L       RQ23, R5, RQ9
  MOV.Q        screens_zbuf, RQ13
  LEA.W        RQ13, RQ9, RQ22
  MOV          ylookup_zb, RQ13
  MOV.Q        RQ22, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD20, RD18, .L0080261F

.L00802621:

.L00C01ACB:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

R_RenderBSPNode:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD23
// r_bsp.c:630   if (bspnum & NF_SUBSECTOR)
  LUI          8, RD21
  BTST.L       RD21, RD23, .L0080240D
  BRNE.Q       -1, RD23, .L0080240E
// r_bsp.c:633   R_Subsector (0);
  ADD          R0, 0, RD10
  BSR          R_Subsector, R1
  BSR          .L0080240F, R0

.L0080240E:
// r_bsp.c:635   R_Subsector (bspnum&(~NF_SUBSECTOR));
  AND          RD23, 0xFFFFFFFFFFFF7FFF, RQ18
  ADD          RQ18, 0, RD10
  BSR          R_Subsector, R1

.L0080240F:
// r_bsp.c:636   r_subseccnt++;
  MOV.L        r_subseccnt, RD21
  ADDS.L       RD21, 1, RD21
  MOV.L        RD21, r_subseccnt
// r_bsp.c:637   return;
  BSR          .L00C01AD7, R0

.L0080240D:
// r_bsp.c:640   bsp = &nodes[bspnum];
  MOV.Q        nodes, RQ21
  ADD          R0, 52, R5
  MUL.L        RD23, R5, RQ9
  ADD          RQ21, RQ9, RQ9
// r_bsp.c:643   side = R_PointOnSide (viewx, viewy, bsp);
  MOV.L        viewx, RD10
  MOV.L        viewy, RD11
  ADD          RQ9, 0, RQ12
  BSR          R_PointOnSide, R1
  ADDS.L       RQ10, 0, RD8
// r_bsp.c:646   R_RenderBSPNode (bsp->children[side]); 
  ADD          RQ9, 48, RQ21
  MOVU.W       (RQ21, RD8), RQ18
  ADD          RQ18, 0, RD10
  BSR          R_RenderBSPNode, R1
// r_bsp.c:649   if (R_CheckBBox (bsp->bbox[side^1]))	
  ADD          RQ9, 16, RQ21
  XOR          RD8, 1, RQ18
  SHAD.L       RQ18, 4, RQ10
  ADD          RQ21, RQ10, RQ10
  BSR          R_CheckBBox, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802410
// r_bsp.c:650   R_RenderBSPNode (bsp->children[side^1]);
  ADD          RQ9, 48, RQ21
  XOR          RD8, 1, RQ18
  MOVU.W       (RQ21, RQ18), RQ22
  ADD          RQ22, 0, RD10
  BSR          R_RenderBSPNode, R1

.L00802410:
// r_bsp.c:653   if(r_subseccnt>=3)
  MOV.L        r_subseccnt, RD21
  BRLT.L       3, RD21, .L00802411
// r_bsp.c:656   I_MusicFineTick();
  BSR          I_MusicFineTick, R1
// r_bsp.c:657   r_subseccnt=0;
  MOV.L        RD0, r_subseccnt

.L00802411:

.L00C01AD7:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

_mgetzone:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdlib.c:250   
  ADD          RQ9, 0, RQ10
  MOV.Q        _mgetzone_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C01ADD:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

G_ScreenShot:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -272, R2
  MOV.L        gameaction, RD18
  ADD          R0, 9, RD9
// g_game.c:994   {
  ADD          RD9, 0, RD18

.L00C01AE3:
  MOV.L        RD18, gameaction
  ADD          R2, 272, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0

fgets:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.L        RD11, (R2, 164)
  ADD          RQ12, 0, RQ18
// pdpc201/stdio.c:2294   
  MOV.Q        (R2, 168), RQ21
// pdpc201/stdio.c:2300   
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 132)
// pdpc201/stdio.c:2302   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2305   
  MOV.L        RD0, (R2, 144)
// pdpc201/stdio.c:2367   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2369   
  MOV.L        (R2, 164), RD27
  BRGE.L       1, RD27, .L00800493
// pdpc201/stdio.c:2370   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01AE9, R0

.L00800493:
// pdpc201/stdio.c:2372   
  MOV.L        (R2, 164), RD27
  BRGE.L       2, RD27, .L00800494
// pdpc201/stdio.c:2374   
  MOV.B        RD0, (RQ21, 0)
// pdpc201/stdio.c:2376   
  MOV.Q        (R2, 168), RQ10
  BSR          .L00C01AE9, R0

.L00800494:
// pdpc201/stdio.c:2377   
  MOV.L        (RQ18, 64), RQ22
  BREQ.Q       -1, RQ22, .L00800495
// pdpc201/stdio.c:2379   
  MOV.L        (R2, 144), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 144)
// pdpc201/stdio.c:2381   
  MOV.L        (RQ18, 64), RQ22
  SHAD.Q       RQ22, 56, RQ26
  SHAR.Q       RQ26, 56, RQ26
  ADD          RQ21, 0, RQ9
  ADD          RQ21, 1, RQ21
  MOV.B        RQ26, (RQ9, 0)
// pdpc201/stdio.c:2382   
  ADD          R0, -1, RD25
  MOV.L        RD25, (RQ18, 64)

.L00800495:
// pdpc201/stdio.c:2383   

.L00800496:
// pdpc201/stdio.c:2385   
  MOV.Q        (RQ18, 40), RQ8
// pdpc201/stdio.c:2387   
  MOV.Q        (RQ18, 40), RQ9
  MOV.L        (R2, 164), RD27
  MOV.L        (R2, 144), RD26
  SUBS.L       RD27, RD26, RQ22
  ADD          RQ9, RQ22, RQ23
  ADD          RQ23, -1, RQ20
// pdpc201/stdio.c:2388   
  MOV.Q        (RQ18, 48), RQ9
  BRGE.Q       RQ9, RQ20, .L00800497
// pdpc201/stdio.c:2389   
  MOV.B        (RQ20, 0), RD27
  MOV.L        RD27, (R2, 148)
// pdpc201/stdio.c:2391   
  ADD          R0, 10, RD26
  MOV.B        RD26, (RQ20, 0)

.L00800497:
// pdpc201/stdio.c:2394   
  BSR          .L00800498, R0

.L00800499:

.L00800498:
  MOV.B        (RQ8, 0), RQ22
  ADD          RQ8, 1, RQ8
  ADD          RQ21, 0, RQ9
  ADD          RQ21, 1, RQ21
  MOV.B        RQ22, (RQ9, 0)
  BRNE.Q       10, RQ22, .L00800499

.L0080049A:
// pdpc201/stdio.c:2410   
  MOV.Q        (RQ18, 48), RQ23
  BRGE.Q       RQ23, RQ20, .L0080049B
// pdpc201/stdio.c:2412   
  MOV.L        (R2, 148), RD27
  SHAD.Q       RD27, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  MOV.B        RQ22, (RQ20, 0)

.L0080049B:
// pdpc201/stdio.c:2414   
  BRGT.Q       RQ20, RQ8, .L0080049C
  MOV.Q        (RQ18, 48), RQ9
  BRGE.Q       RQ9, RQ20, .L0080049C
  BSR          .L0080049D, R0

.L0080049C:
  MOV.Q        (RQ18, 48), RQ23
  BRGT.Q       RQ23, RQ8, .L0080049E
  MOV.Q        (RQ18, 48), RQ9
  BRLT.Q       RQ9, RQ20, .L0080049E

.L0080049D:
// pdpc201/stdio.c:2441   
  MOV.Q        RQ8, (RQ18, 40)
// pdpc201/stdio.c:2447   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2448   
  MOV.Q        (R2, 168), RQ10
  BSR          .L00C01AE9, R0
  BSR          .L0080049F, R0

.L0080049E:
  BRLE.Q       RQ20, RQ8, .L008004A0
  MOV.Q        (RQ18, 48), RQ23
  BRGE.Q       RQ23, RQ20, .L008004A0
  BSR          .L008004A1, R0

.L008004A0:
  MOV.Q        (RQ18, 48), RQ9
  BRLE.Q       RQ9, RQ8, .L008004A2
  MOV.Q        (RQ18, 48), RQ23
  BRLT.Q       RQ23, RQ20, .L008004A2

.L008004A1:
// pdpc201/stdio.c:2452   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)
// pdpc201/stdio.c:2456   
  MOV.Q        (RQ18, 48), RQ9
  BRLE.Q       RQ9, RQ8, .L008004A3
// pdpc201/stdio.c:2484   
  MOV.L        RD0, (R2, 128)
  BSR          .L008004A4, R0

.L008004A3:
// pdpc201/stdio.c:2488   
  MOV.B        RD0, (RQ21, 0)

.L008004A4:
// pdpc201/stdio.c:2490   
  MOV.L        (R2, 128), RD27
  BREQ.L       R0, RD27, .L008004A5
// pdpc201/stdio.c:2492   
  MOV.Q        RQ8, (RQ18, 40)
// pdpc201/stdio.c:2498   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2499   
  MOV.Q        (R2, 168), RQ10
  BSR          .L00C01AE9, R0

.L008004A5:

.L008004A2:

.L0080049F:
// pdpc201/stdio.c:2501   
  MOV.Q        (RQ18, 40), RQ23
  SUB          RQ8, RQ23, RQ27
  ADDS.L       RQ27, 0, RQ22
  ADDS.L       RQ22, -1, RQ26
  MOV.L        (R2, 144), RD25
  ADDS.L       RD25, RQ26, RD25
  MOV.L        RD25, (R2, 144)
// pdpc201/stdio.c:2503   
  ADD          RQ21, -1, RQ21
// pdpc201/stdio.c:2504   
  MOV.Q        (RQ18, 16), RQ27
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 24), RQ23
  SUB          RQ9, RQ23, RQ24
  ADD          RQ27, RQ24, RQ19
  MOV.Q        RQ19, (RQ18, 16)
// pdpc201/stdio.c:2506   
  ADD          R2, 132, RQ9
  MOV.Q        (RQ18, 32), RQ27
  MOV.Q        (RQ18, 24), RQ23
  MOV.L        (RQ18, 0), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RQ11
  ADD          RQ27, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __read, R1
  ADD          RQ10, 0, RQ26
  ADDS.L       RQ26, 0, RQ19
  MOV.Q        RQ19, (R2, 136)
// pdpc201/stdio.c:2510   
  MOV.L        (R2, 132), RD27
  BREQ.L       R0, RD27, .L008004A6
// pdpc201/stdio.c:2511   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (R2, 136), RQ27
  ADDS.L       RQ27, 0, RQ22
  MOV.L        RQ22, (RQ9, 0)
// pdpc201/stdio.c:2513   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 136)
// pdpc201/stdio.c:2514   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 56)

.L008004A6:
// pdpc201/stdio.c:2517   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        (R2, 136), RQ27
  ADD          RQ9, RQ27, RQ23
  MOV.Q        RQ23, (RQ18, 48)
// pdpc201/stdio.c:2518   
  MOV.Q        (RQ18, 48), RQ9
  ADD          R0, 10, RD26
  MOV.B        RD26, (RQ9, 0)
// pdpc201/stdio.c:2519   
  BRNE.Q       R0, RQ27, .L008004A7
// pdpc201/stdio.c:2520   
  MOV.B        RD0, (RQ21, 0)
  MOV.Q        (R2, 168), RQ27
  SUB          RQ21, RQ27, RQ26
  BRGT.Q       1, RQ26, .L008004A8
// pdpc201/stdio.c:2523   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)
// pdpc201/stdio.c:2525   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2526   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01AE9, R0
  BSR          .L008004A9, R0

.L008004A8:
// pdpc201/stdio.c:2529   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2531   
  MOV.Q        (R2, 168), RQ10
  BSR          .L00C01AE9, R0

.L008004A9:

.L008004A7:
// pdpc201/stdio.c:2533   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)
  BSR          .L00800496, R0

.L008004AA:

.L00C01AE9:
  ADD          R2, 376, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_fputc:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -400, R2
  ADDS.L       RD10, 0, RD9
  MOV.Q        RQ11, (R2, 80)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_vf_sysc.c:283   
// tk_vf_sysc.c:287   
  ADD          R2, 96, RQ8
  MOVU.B       RD9, (RQ8, 0)
// tk_vf_sysc.c:288   
  ADD          RQ8, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 80), RQ13
  BSR          tk_sysc_fwrite, R1
  ADD          RQ10, 0, RD18
// tk_vf_sysc.c:289   
  BRGT.L       R0, RD18, .L00800B35
// tk_vf_sysc.c:290   
  ADD          R0, -1, RD10
  BSR          .L00C01AEF, R0

.L00800B35:
// tk_vf_sysc.c:291   
  ADDS.L       RD9, 0, RD10

.L00C01AEF:
  ADD          R2, 400, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

WI_initShowNextLoc:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// wi_stuff.c:776   {
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU7A00CB85/state
// wi_stuff.c:778   acceleratestage = 0;
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:779   cnt = SHOWNEXTLOCDELAY * TICRATE;
  ADD          R0, 140, RQ6
  MOV.L        RQ6, TU7A00CB85/cnt
// wi_stuff.c:781   WI_initAnimatedBack();
  BSR          WI_initAnimatedBack, R1

.L00C01AF5:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

ungetc:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RD10, 0, RD23
  ADD          RQ11, 0, RQ9
// pdpc201/stdio.c:2540   
  ADD          RQ9, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2543   
  MOV.L        (RQ9, 64), RQ18
  ADD          R0, -1, R5
  CMPNE.Q      RQ18, R5, RQ8
  ADD          R0, -1, R5
  CMPEQ.Q      RD23, R5, RQ18
  OR           RQ8, RQ18, RQ22
  BREQ.L       R0, RQ22, .L008004AB
// pdpc201/stdio.c:2544   
  ADD          R0, -1, RD10
  BSR          .L00C01AFB, R0

.L008004AB:
// pdpc201/stdio.c:2546   
  AND          RD23, 255, RQ18
  MOV.L        RQ18, (RQ9, 64)
// pdpc201/stdio.c:2548   
  MOV.B        RD0, (RQ9, 9)
// pdpc201/stdio.c:2549   
  MOV.B        RD0, (RQ9, 8)
// pdpc201/stdio.c:2550   
  AND          RD23, 255, RQ8
  AND          RQ8, 255, RD10

.L00C01AFB:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

G_Ticker:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          R0, 4, RD20
// g_game.c:633   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00801558:
// g_game.c:634   if (playeringame[i] && players[i].playerstate == PST_REBORN)
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L0080155B
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RQ9
  BRNE.Q       2, RQ9, .L0080155B

.L0080155C:
// g_game.c:635   G_DoReborn (i);
  ADD          RD18, 0, RD10
  BSR          G_DoReborn, R1

.L0080155B:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00801558

.L0080155A:
// g_game.c:638   while (gameaction != ga_nothing)
  BSR          .L00801560, R0

.L0080155E:
// g_game.c:639   {
  MOV.L        gameaction, RD27
  AND          RD27, -1, RQ9
  BRGE.L       5, RQ9, .L0080156D
  MOV.L        gameaction, RD27
  BREQ.L       R0, RD27, .L0080156B
  MOV.L        gameaction, RD27
  BREQ.Q       1, RD27, .L00801562
  MOV.L        gameaction, RD27
  BREQ.Q       2, RD27, .L00801563
  MOV.L        gameaction, RD27
  BREQ.Q       3, RD27, .L00801564
  MOV.L        gameaction, RD27
  BREQ.Q       4, RD27, .L00801565

.L0080156D:
  MOV.L        gameaction, RD27
  BREQ.Q       5, RD27, .L00801566
  MOV.L        gameaction, RD27
  BREQ.Q       6, RD27, .L00801567
  MOV.L        gameaction, RD27
  BREQ.Q       7, RD27, .L00801568
  MOV.L        gameaction, RD27
  BREQ.Q       8, RD27, .L00801569
  MOV.L        gameaction, RD27
  BREQ.Q       9, RD27, .L0080156A
  BSR          .L0080156C, R0

.L00801562:
// g_game.c:642   case ga_loadlevel:
  BSR          G_DoLoadLevel, R1
// g_game.c:644   break;
  BSR          .L00801561, R0

.L00801563:
// g_game.c:645   case ga_newgame:
  BSR          G_DoNewGame, R1
// g_game.c:647   break;
  BSR          .L00801561, R0

.L00801564:
// g_game.c:648   case ga_loadgame:
  BSR          G_DoLoadGame, R1
// g_game.c:650   break;
  BSR          .L00801561, R0

.L00801565:
// g_game.c:651   case ga_savegame:
  BSR          G_DoSaveGame, R1
// g_game.c:653   break;
  BSR          .L00801561, R0

.L00801566:
// g_game.c:654   case ga_playdemo:
  BSR          G_DoPlayDemo, R1
// g_game.c:656   break;
  BSR          .L00801561, R0

.L00801567:
// g_game.c:657   case ga_completed:
  BSR          G_DoCompleted, R1
// g_game.c:659   break;
  BSR          .L00801561, R0

.L00801568:
// g_game.c:660   case ga_victory:
  BSR          F_StartFinale, R1
// g_game.c:662   break;
  BSR          .L00801561, R0

.L00801569:
// g_game.c:663   case ga_worlddone:
  BSR          G_DoWorldDone, R1
// g_game.c:665   break;
  BSR          .L00801561, R0

.L0080156A:
// g_game.c:666   case ga_screenshot:
  BSR          M_ScreenShot, R1
// g_game.c:668   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:669   break;
  BSR          .L00801561, R0

.L0080156B:
// g_game.c:670   case ga_nothing:
  BSR          .L00801561, R0

.L0080156C:

.L00801561:

.L00801560:
  MOV.L        gameaction, RD27
  BRNE.L       R0, RD27, .L0080155E

.L0080155F:
// g_game.c:678   buf = NetDivTicdup(gametic)%BACKUPTICS;
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RD21
  ADD          R0, 12, RD27
  MODS.L       RD21, RD27, RD21
// g_game.c:683   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L0080156E:
// g_game.c:684   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L00801571
// g_game.c:686   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ23
  ADD          RQ23, 0, RQ22
// g_game.c:689   memcpy (cmd, &netcmds[i][buf], sizeof(ticcmd_t));
  MOV          netcmds, RQ27
  ADD          R0, 96, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  LEA.Q        RQ23, RD21, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        RQ10, (RQ22, 0)
  MOV.L        demoplayback, RD13
  BREQ.L       R0, RD13, .L00801572
// g_game.c:692   G_ReadDemoTiccmd (cmd);
  ADD          RQ22, 0, RQ10
  BSR          G_ReadDemoTiccmd, R1

.L00801572:
  MOV.L        demorecording, RD27
  BREQ.L       R0, RD27, .L00801573
// g_game.c:694   G_WriteDemoTiccmd (cmd);
  ADD          RQ22, 0, RQ10
  BSR          G_WriteDemoTiccmd, R1

.L00801573:
  MOV.B        (RQ22, 0), RQ9
  ADD          R0, 50, R5
  CMPGT.Q      RQ9, R5, RQ8
  MOV.L        gametic, RD27
  ADD          R0, 31, R5
  TSTN         RD27, R5, RQ9
  BTST.L       RQ9, RQ8, .L00801574
  MOV.L        gametic, RD27
  SHLR.Q       RD27, 5, RQ8
  AND          RQ8, 3, RQ8
  BRNE.Q       RD18, RQ8, .L00801574

.L00801575:
// g_game.c:699   {
  MOV          player_names, RQ27
  MOV.Q        (RQ27, RD18), RQ23
  MOV          TU7A00C577/turbomessage, RQ10
  MOV          .L00C01B02, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// g_game.c:701   players[consoleplayer].message = turbomessage;
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV          TU7A00C577/turbomessage, RQ27
  MOV.Q        RQ27, (RQ13, 224)

.L00801574:
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801577
  MOV.L        netdemo, RD27
  BRNE.L       R0, RD27, .L00801577

.L00801579:
  MOV.L        gametic, RD27
  MOV.L        ticdup, RD26
  MODS.L       RD27, RD26, RQ8
  BRNE.L       R0, RQ8, .L00801577

.L00801578:
  MOV.L        gametic, RD27
  BRLE.L       12, RD27, .L0080157B
  MOV          consistancy, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.W        (RQ23, RD21), RQ8
  MOV.W        (RQ22, 4), RQ9
  BREQ.Q       RQ9, RQ8, .L0080157B

.L0080157C:
// g_game.c:708   {
  MOV          consistancy, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.W        (RQ23, RD21), RQ8
  MOV.W        (RQ22, 4), RQ9
  MOV          .L00C01B03, RQ10
  SHAD.Q       RQ9, 48, RD11
  SHAR.Q       RD11, 48, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          I_Error, R1

.L0080157B:
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ23
  BREQ.Q       R0, RQ23, .L0080157E
// g_game.c:713   consistancy[i][buf] = players[i].mo->x;
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ23
  MOV.L        (RQ23, 24), RQ8
  MOV          consistancy, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.W        RQ8, (RQ23, RD21)
  BSR          .L0080157F, R0

.L0080157E:
// g_game.c:715   consistancy[i][buf] = rndindex;
  MOV          consistancy, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        rndindex, RD27
  MOV.W        RD27, (RQ26, RD21)

.L0080157F:

.L00801577:

.L00801571:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L0080156E

.L00801570:
// g_game.c:721   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00801580:
// g_game.c:722   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ8
  BREQ.L       R0, RQ8, .L00801583
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ27
  MOVU.B       (RQ27, 7), RQ9
  ADD          R0, 128, RD13
  BTST.L       RD13, RQ9, .L00801584
// g_game.c:726   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ27
  MOVU.B       (RQ27, 7), RQ9
  AND          RQ9, 3, RQ8
  BREQ.Q       1, RQ8, .L00801586
  BREQ.Q       2, RQ8, .L00801587
  BSR          .L00801585, R0

.L00801586:
// g_game.c:729   case BTS_PAUSE:
  MOV.L        paused, RD27
  XOR          RD27, 1, RD27
// g_game.c:731   if (paused)
  MOV.L        RD27, paused
  BREQ.L       R0, RD27, .L00801588
// g_game.c:732   S_PauseSound ();
  BSR          S_PauseSound, R1
  BSR          .L00801589, R0

.L00801588:
// g_game.c:734   S_ResumeSound ();
  BSR          S_ResumeSound, R1

.L00801589:
// g_game.c:735   break;
  BSR          .L00801585, R0

.L00801587:
// g_game.c:737   case BTS_SAVEGAME:
  MOV          savedescription, RQ27
  MOV.B        (RQ27, 0), RQ9
  BRNE.L       R0, RQ9, .L0080158A
// g_game.c:739   strcpy (savedescription, "NET GAME");
  MOV          savedescription, RQ10
  MOV          .L00C01B04, RQ11
  BSR          strcpy, R1

.L0080158A:
// g_game.c:740   savegameslot =
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ27
  MOVU.B       (RQ27, 7), RQ9
  AND          RQ9, 28, RQ8
  SHAR         RQ8, 2, RD13
  MOV.L        RD13, savegameslot
// g_game.c:742   gameaction = ga_savegame;
  MOV.L        RD20, gameaction
// g_game.c:743   break;

.L00801585:

.L00801584:

.L00801583:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00801580

.L00801582:
// g_game.c:750   switch (gamestate)
  MOV.L        gamestate, RD27
  BREQ.L       R0, RD27, .L0080158C
  MOV.L        gamestate, RD27
  BREQ.Q       1, RD27, .L0080158D
  MOV.L        gamestate, RD27
  BREQ.Q       2, RD27, .L0080158E
  MOV.L        gamestate, RD27
  BREQ.Q       3, RD27, .L0080158F
  BSR          .L0080158B, R0

.L0080158C:
// g_game.c:752   case GS_LEVEL:
  BSR          P_Ticker, R1
// g_game.c:754   ST_Ticker ();
  BSR          ST_Ticker, R1
// g_game.c:755   AM_Ticker ();
  BSR          AM_Ticker, R1
// g_game.c:756   HU_Ticker ();
  BSR          HU_Ticker, R1
// g_game.c:757   break;
  BSR          .L0080158B, R0

.L0080158D:
// g_game.c:759   case GS_INTERMISSION:
  BSR          WI_Ticker, R1
// g_game.c:761   break;
  BSR          .L0080158B, R0

.L0080158E:
// g_game.c:763   case GS_FINALE:
  BSR          F_Ticker, R1
// g_game.c:765   break;
  BSR          .L0080158B, R0

.L0080158F:
// g_game.c:767   case GS_DEMOSCREEN:
  BSR          D_PageTicker, R1
// g_game.c:769   break;

.L0080158B:

.L00C01B01:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_LoadSegs:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 140)
// p_setup.c:189   lsz = W_LumpLength (lump);
  MOV.L        (R2, 140), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD27
// p_setup.c:190   if(lsz % sizeof(mapseg_t))
  ADD          RD27, 0, RQ26
  MOV.L        RD27, (R2, 124)
  ADD          R0, 12, RD25
  MODS.L       RQ26, RD25, RQ26
  BREQ.L       R0, RQ26, .L00801ED7
// p_setup.c:191   __debugbreak();

P_LoadSegs.debugbreak_L02CB:
  BRK          715

.L00801ED7:
// p_setup.c:193   numsegs = lsz / sizeof(mapseg_t);
  MOV.L        (R2, 124), RD27
  ADD          R0, 12, RD26
  DIVS.L       RD27, RD26, RD27
// p_setup.c:194   segs = Z_Malloc (numsegs*sizeof(seg_t), PU_LEVEL_SEGS, 0);	
  ADD          R0, 56, R5
  MULS.L       RD27, R5, RQ10
  MOV.L        RD27, numsegs
  ADD          R0, 54, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, segs
// p_setup.c:195   memset (segs, 0, numsegs*sizeof(seg_t));
  MOV.L        numsegs, RD27
  ADD          R0, 56, R5
  MULS.L       RD27, R5, RQ25
  ADDS.L       RQ25, 0, RQ27
  MOV.Q        segs, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// p_setup.c:196   data = W_CacheLumpNum (lump, PU_STATIC);
  MOV.L        (R2, 140), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ24
// p_setup.c:198   ml = (mapseg_t *)data;
  ADD          RQ24, 0, RQ22
  MOV.Q        RQ24, (R2, 128)
// p_setup.c:199   li = segs;
  MOV.Q        segs, RQ8
// p_setup.c:200   for (i=0 ; i<numsegs ; i++, li++, ml++)
  ADD          R0, 0, RD20
  MOV.L        numsegs, RD19
  BRGE.L       RD19, RD20, .L00801EDA

.L00801ED8:
// p_setup.c:201   {
  MOV.W        (RQ22, 0), RQ23
  MOV.Q        vertexes, RQ27
  LEA.Q        RQ27, RQ23, RQ18
  MOV.Q        RQ18, (RQ8, 0)
// p_setup.c:203   li->v2 = &vertexes[SHORT(ml->v2)];
  MOV.W        (RQ22, 2), RQ23
  LEA.Q        RQ27, RQ23, RQ18
  MOV.Q        RQ18, (RQ8, 8)
// p_setup.c:205   li->angle = (SHORT(ml->angle))<<16;
  MOV.W        (RQ22, 4), RQ23
  SHAD.L       RQ23, 16, RQ9
  MOVU.L       RQ9, (RQ8, 20)
// p_setup.c:206   li->offset = (SHORT(ml->offset))<<16;
  MOV.W        (RQ22, 10), RQ23
  SHAD.L       RQ23, 16, RQ9
  MOV.L        RQ9, (RQ8, 16)
// p_setup.c:207   linedef = SHORT(ml->linedef);
  MOV.W        (RQ22, 6), RD27
// p_setup.c:208   ldef = &lines[linedef];
  MOV.Q        lines, RQ26
  ADD          R0, 96, R5
  MUL.L        RD27, R5, RQ21
  ADD          RQ26, RQ21, RQ21
  MOV.L        RD27, (R2, 120)
// p_setup.c:209   li->linedef = ldef;
  MOV.Q        RQ21, (RQ8, 32)
// p_setup.c:210   side = SHORT(ml->side);
  MOV.W        (RQ22, 8), RD26
// p_setup.c:211   li->sidedef = &sides[ldef->sidenum[side]];
  ADD          RQ21, 36, RQ18
  MOV.W        (RQ18, RD26), RQ9
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ18
  ADD          RQ25, RQ18, RQ18
  MOV.Q        RQ18, (RQ8, 24)
// p_setup.c:212   li->frontsector = sides[ldef->sidenum[side]].sector;
  ADD          RQ21, 36, RQ18
  MOV.W        (RQ18, RD26), RQ9
  MOV.L        RD26, (R2, 116)
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ24
  ADD          RQ25, RQ24, RQ24
  MOV.Q        (RQ24, 16), RQ18
  MOV.Q        RQ18, (RQ8, 40)
// p_setup.c:213   if (ldef-> flags & ML_TWOSIDED)
  MOV.W        (RQ21, 24), RQ9
  ADD          R0, 4, RD25
  BTST.L       RD25, RQ9, .L00801EDB
// p_setup.c:214   li->backsector = sides[ldef->sidenum[side^1]].sector;
  ADD          RQ21, 36, RQ18
  MOV.L        (R2, 116), RD27
  XOR          RD27, 1, RQ9
  MOV.W        (RQ18, RQ9), RQ23
  MOV.Q        sides, RQ26
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        (RQ25, 16), RQ18
  MOV.Q        RQ18, (RQ8, 48)
  BSR          .L00801EDC, R0

.L00801EDB:
// p_setup.c:216   li->backsector = 0;
  ADD          R0, 0, RQ18
  MOV.Q        RQ18, (RQ8, 48)

.L00801EDC:
  ADD          RD20, 0, RQ9
  ADDS.L       RD20, 1, RD20
  ADD          RQ8, 0, RQ18
  ADD          RQ8, 56, RQ8
  ADD          RQ22, 0, RQ18
  ADD          RQ22, 12, RQ22
  MOV.L        numsegs, RD27
  BRLT.L       RD27, RD20, .L00801ED8

.L00801EDA:
// p_setup.c:219   Z_ChangeTag (segs, PU_LEVEL_SEGS);  //BGB: Debug
  MOV.Q        segs, RQ10
  ADD          R0, 54, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:221   Z_Free (data);
  MOV.Q        (R2, 128), RQ10
  BSR          Z_Free, R1

.L00C01B0F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ClipSolidWallSegment:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  ADD          RD11, 0, RD20
// r_bsp.c:114   if(r_ispolyobj)
  MOVU.B       r_ispolyobj, RD27
  BREQ.L       R0, RD27, .L008023C6
// r_bsp.c:115   {

R_ClipSolidWallSegment.debugbreak_L02D1:
  BRK          721
// r_bsp.c:117   R_StoreWallRange (first, last);
  MOV.L        (R2, 108), RD10
  ADD          RD20, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:118   return;
  BSR          .L00C01B1B, R0

.L008023C6:
// r_bsp.c:124   start = solidsegs;
  MOV          solidsegs, RQ8
// r_bsp.c:125   while (start->last < first-1)
  BSR          .L008023C9, R0

.L008023C7:
// r_bsp.c:126   start++;
  ADD          RQ8, 8, RQ8

.L008023C9:
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (R2, 108), RD27
  ADDS.L       RD27, -1, RQ22
  BRLT.L       RQ22, RQ9, .L008023C7

.L008023C8:
// r_bsp.c:128   if (first < start->first)
  MOV.L        (RQ8, 0), RQ9
  MOV.L        (R2, 108), RD27
  BRGE.L       RQ9, RD27, .L008023CA
  MOV.L        (RQ8, 0), RQ22
  ADDS.L       RQ22, -1, RQ9
  BRGE.L       RQ9, RD20, .L008023CB
// r_bsp.c:134   R_StoreWallRange (first, last);
  MOV.L        (R2, 108), RD10
  ADD          RD20, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:135   next = newend;
  MOV.Q        newend, RQ27
  ADD          RQ27, 0, RQ18
// r_bsp.c:136   newend++;
  ADD          RQ27, 8, RQ27
  MOV.Q        RQ27, newend
// r_bsp.c:138   while (next != start)
  BSR          .L008023CE, R0

.L008023CC:
// r_bsp.c:139   {
  ADD          RQ18, -8, RQ23
  ADD          RQ23, 0, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        RQ10, (RQ18, 0)
// r_bsp.c:141   next--;
  ADD          RQ18, -8, RQ18

.L008023CE:
  BRNE.Q       RQ8, RQ18, .L008023CC

.L008023CD:
// r_bsp.c:142   }
  MOV.L        (R2, 108), RD27
  MOV.L        RD27, (RQ18, 0)
// r_bsp.c:144   next->last = last;
  MOV.L        RD20, (RQ18, 4)
// r_bsp.c:145   return;
  BSR          .L00C01B1B, R0

.L008023CB:
// r_bsp.c:149   R_StoreWallRange (first, start->first - 1);
  MOV.L        (RQ8, 0), RQ9
  ADDS.L       RQ9, -1, RQ22
  MOV.L        (R2, 108), RD10
  ADD          RQ22, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:151   start->first = first;	
  MOV.L        (R2, 108), RD27
  MOV.L        RD27, (RQ8, 0)

.L008023CA:
// r_bsp.c:155   if (last <= start->last)
  MOV.L        (RQ8, 4), RQ9
  BRLE.L       RQ9, RD20, .L00C01B1B
// r_bsp.c:158   next = start;
  ADD          RQ8, 0, RQ18
// r_bsp.c:159   while (last >= (next+1)->first-1)
  BSR          .L008023D1, R0

.L008023CF:
// r_bsp.c:162   R_StoreWallRange (next->last + 1, (next+1)->first - 1);
  ADD          RQ18, 8, RQ23
  MOV.L        (RQ23, 0), RQ9
  ADDS.L       RQ9, -1, RQ22
  MOV.L        (RQ18, 4), RQ9
  ADDS.L       RQ9, 1, RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ22, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:163   next++;
  ADD          RQ18, 8, RQ18
// r_bsp.c:165   if (last <= next->last)
  MOV.L        (RQ18, 4), RQ9
  BRGT.L       RQ9, RD20, .L008023D2
// r_bsp.c:169   start->last = next->last;	
  MOV.L        (RQ18, 4), RQ22
  MOV.L        RQ22, (RQ8, 4)
// r_bsp.c:170   goto crunch;
  BSR          .L008023D3, R0

.L008023D2:

.L008023D1:
  ADD          RQ18, 8, RQ23
  MOV.L        (RQ23, 0), RQ21
  ADDS.L       RQ21, -1, RQ9
  BRGE.L       RQ9, RD20, .L008023CF

.L008023D0:
// r_bsp.c:175   R_StoreWallRange (next->last + 1, last);
  MOV.L        (RQ18, 4), RQ22
  ADDS.L       RQ22, 1, RQ21
  ADD          RQ21, 0, RD10
  ADD          RD20, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:177   start->last = last;
  MOV.L        RD20, (RQ8, 4)
// r_bsp.c:181   crunch:

.L008023D3:
  BREQ.Q       RQ8, RQ18, .L00C01B1B
// r_bsp.c:189   while (next++ != newend)
  BSR          .L008023D6, R0

.L008023D4:
// r_bsp.c:192   *++start = *next;
  ADD          RQ18, 0, RQ27
  ADD          RQ8, 8, RQ8
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        RQ10, (RQ8, 0)

.L008023D6:
  ADD          RQ18, 0, RQ23
  ADD          RQ18, 8, RQ18
  MOV.Q        newend, RQ27
  BRNE.Q       RQ27, RQ23, .L008023D4

.L008023D5:
// r_bsp.c:195   newend = start+1;
  ADD          RQ8, 8, RQ27
  MOV.Q        RQ27, newend

.L00C01B1B:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

_string_is_nonascii:
// pdpc201/string.c:1639   
  ADD          RQ10, 0, RQ13
// pdpc201/string.c:1656   
  MOVU.B       (RQ13, 0), RD12
// pdpc201/string.c:1657   
  BSR          .L0080069E, R0

.L0080069F:
// pdpc201/string.c:1658   
  ADD          R0, 128, RD11
  BTST.L       RD11, RD12, .L008006A0
// pdpc201/string.c:1660   
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L008006A0:
// pdpc201/string.c:1661   
  ADD          RQ13, 1, RQ13
// pdpc201/string.c:1662   
  MOVU.B       (RQ13, 0), RD12

.L0080069E:
  BRNE.L       R0, RD12, .L0080069F

.L008006A1:
// pdpc201/string.c:1663   
  ADD          R0, 0, RD10

.L00C01B1D:
  JSR          R1, 0, R0
  .balign 4

A_FireShotgun2:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ11, (R2, 128)
// p_pspr.c:707   S_StartSound (player->mo, sfx_dshtgn);
  MOV.Q        (RQ22, 0), RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 4, RD11
  BSR          S_StartSound, R1
// p_pspr.c:708   P_SetMobjState (player->mo, S_PLAY_ATK2);
  MOV.Q        (RQ22, 0), RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 155, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:710   player->ammo[weaponinfo[player->readyweapon].ammo]-=2;
  ADD          RQ22, 160, RQ23
  MOV.L        (RQ22, 116), RQ18
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, -2, RQ18
  MOV.L        (RQ22, 116), RQ9
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ9
  MOV.L        RQ18, (RQ23, RQ9)
// p_pspr.c:712   P_SetPsprite (player,
  MOV.L        (RQ22, 116), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 20), RQ9
  ADD          RQ22, 0, RQ10
  ADD          R0, 1, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:716   P_BulletSlope (player->mo);
  MOV.Q        (RQ22, 0), RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_BulletSlope, R1
// p_pspr.c:718   for (i=0 ; i<20 ; i++)
  ADD          R0, 0, RD20

.L00801EBB:
// p_pspr.c:719   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 3, RD27
  MODS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 1, RQ18
  ADD          R0, 5, R5
  MULS.L       RQ18, R5, RD26
  MOV.L        RD26, (R2, 124)
// p_pspr.c:721   angle = player->mo->angle;
  MOV.Q        (RQ22, 0), RQ23
  MOVU.L       (RQ23, 56), RD21
// p_pspr.c:722   angle += (P_Random()-P_Random())<<19;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ8
  SHAD.L       RQ8, 19, RQ18
  ADDU.L       RD21, RQ18, RD21
// p_pspr.c:723   P_LineAttack (player->mo,
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ8
  SUBS.L       RQ9, RQ8, RQ18
  SHAD.L       RQ18, 5, RQ9
  MOV.L        bulletslope, RD25
  ADDS.L       RD25, RQ9, RQ8
  MOV.Q        (RQ22, 0), RQ23
  ADD          RQ23, 0, RQ10
  ADD          RD21, 0, RD11
  LUI          0x00008000, RD12
  ADDS.L       RQ8, 0, RD13
  ADD          RD26, 0, RD14
  BSR          P_LineAttack, R1
  ADDS.L       RD20, 1, RD20
  BRLT.L       20, RD20, .L00801EBB

.L00801EBD:

.L00C01B23:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_getch_v:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// tk_core/tk_puts.c:644   

.L00800BE9:
// tk_core/tk_puts.c:645   
  BSR          tk_kbhit_v, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00800BEA
// tk_core/tk_puts.c:647   
  BSR          TK_YieldCurrentThread, R1
// tk_core/tk_puts.c:649   
  BSR          .L00800BE9, R0

.L00800BEA:
// tk_core/tk_puts.c:650   
  BSR          tk_getch_v0, R1
  ADD          RQ10, 0, RD18
// tk_core/tk_puts.c:652   
  BRGE.L       R0, RD18, .L00800BEB
// tk_core/tk_puts.c:654   
  BSR          TK_YieldCurrentThread, R1
  BSR          .L00800BE9, R0

.L00800BEB:
// tk_core/tk_puts.c:655   
  ADD          RD18, 0, RD10

.L00C01B29:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tkgMapReleaseFrameBuffer:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 140)
  MOV.Q        RQ11, (R2, 128)
  ADD          RQ12, 0, RQ22
// tk_gdi/tkg_display.c:255   
  MOV.Q        RQ22, (R2, 112)
// tk_gdi/tkg_display.c:256   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ9
// tk_gdi/tkg_display.c:258   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ10
  MOV.Q        (R2, 128), RQ11
  BSR          TKGDI_CopyBitmapInfo, R1
// tk_gdi/tkg_display.c:259   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ofmt, RQ18
  MOV.Q        RQ22, (RQ18, 0)
// tk_gdi/tkg_display.c:262   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ21
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 140), RD11
  ADD          R0, 0x70616D75, RD12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ofmt, RQ14
  ADD          RQ21, 0, RQ29
  JSR          RQ8, 0, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RD20
// tk_gdi/tkg_display.c:265   
  ADD          RD20, 0, RD10

.L00C01B2F:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

__lva_conv_toi64:
  ADD          R2, -48, R2
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 2, RQ22
  ADD          R0, 62, RQ21
// pdpc201/btshx_lva.c:185   
  SHLR.Q       RQ9, 62, RQ18
  BRNE.Q       1, RQ18, .L00801028
// pdpc201/btshx_lva.c:186   
  SHLD.Q       RQ9, 2, RQ8
// pdpc201/btshx_lva.c:188   
  SHAR.Q       RQ8, 2, RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C01B35, R0

.L00801028:
// pdpc201/btshx_lva.c:191   
  SHLR.Q       RQ9, 62, RQ18
  BRNE.Q       2, RQ18, .L00801029
// pdpc201/btshx_lva.c:192   
  ADD          R0, 0, R5
  FMOVID       R5, RQ46
  MOV.Q        RQ46, (R2, 16)
// pdpc201/btshx_lva.c:194   
  SHLD.Q       RQ9, 2, RQ18
  ADD          R2, 16, RQ23
  MOV.Q        RQ18, (RQ23, 0)
// pdpc201/btshx_lva.c:195   
  MOV.Q        (R2, 16), RQ10
  BSR          .L00C01B35, R0

.L00801029:
// pdpc201/btshx_lva.c:198   
  ADD          R0, -1, RQ10

.L00C01B35:
  ADD          R2, 336, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 48, R2
  JSR          R1, 0, R0

I_GetSfxLumpNum:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// i_sound_btsh.c:540   {
// i_sound_btsh.c:542   sprintf(namebuf, "ds%s", sfx->name);
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 0), RQ18
  ADD          R2, 96, RQ10
  MOV          .L00C01B3C, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sprintf, R1
// i_sound_btsh.c:543   return W_GetNumForName(namebuf);
  ADD          R2, 96, RQ10
  BSR          W_GetNumForName, R1

.L00C01B3B:
  ADD          R2, 424, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

EV_DoDonut:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 136)
// p_spec.c:1240   secnum = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 116)
// p_spec.c:1241   rtn = 0;
  MOV.L        RD0, (R2, 112)
// p_spec.c:1242   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00802154, R0

.L00802152:
// p_spec.c:1243   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 116), RD26
  SHAD.L       RD26, 7, RQ25
  ADD          RQ27, RQ25, RQ25
// p_spec.c:1247   if (s1->specialdata)
  MOV.Q        (RQ25, 104), RQ9
  MOV.Q        RQ25, (R2, 128)
  BRNE.Q       R0, RQ9, .L00802154
// p_spec.c:1250   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 112)
// p_spec.c:1251   s2 = getNextSector(s1->lines[0],s1);
  MOV.Q        (R2, 128), RQ26
  MOV.Q        (RQ26, 120), RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          getNextSector, R1
  ADD          RQ10, 0, RQ22
// p_spec.c:1252   for (i = 0;i < s2->linecount;i++)
  ADD          R0, 0, RD21
  MOV.L        (RQ22, 112), RQ23
  BRGE.L       RQ23, RD21, .L00802157

.L00802155:
// p_spec.c:1253   {
  MOV.Q        (RQ22, 120), RQ9
  MOV.Q        (RQ9, RD21), RQ8
  MOV.W        (RQ8, 24), RQ23
  CMPEQ.Q      RQ23, R0, RQ20
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ20, .L00802156
  MOV.Q        (RQ22, 120), RQ9
  MOV.Q        (RQ9, RD21), RQ8
  MOV.Q        (RQ8, 72), RQ9
  MOV.Q        (R2, 128), RQ27
  BREQ.Q       RQ27, RQ9, .L00802156

.L00802158:
// p_spec.c:1257   s3 = s2->lines[i]->backsector;
  MOV.Q        (RQ22, 120), RQ8
  MOV.Q        (RQ8, RD21), RQ9
  MOV.Q        (RQ9, 72), RQ27
  MOV.Q        RQ27, (R2, 120)
// p_spec.c:1260   floor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:1261   P_AddThinker (&floor->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_spec.c:1262   s2->specialdata = floor;
  MOV.Q        RQ18, (RQ22, 104)
// p_spec.c:1263   floor->thinker.function.acp1 = (actionf_p1) T_MoveFloor;
  MOV          T_MoveFloor, RQ9
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ9, (RQ25, 0)
// p_spec.c:1264   floor->type = donutRaise;
  ADD          R0, 11, RD24
  MOV.L        RD24, (RQ18, 24)
// p_spec.c:1265   floor->crush = false;
  MOV.L        RD0, (RQ18, 28)
// p_spec.c:1266   floor->direction = 1;
  ADD          R0, 1, RD19
  MOV.L        RD19, (RQ18, 40)
// p_spec.c:1267   floor->sector = s2;
  MOV.Q        RQ22, (RQ18, 32)
// p_spec.c:1268   floor->speed = FLOORSPEED / 2;
  LUI          8, RD25
  MOV.L        RD25, (RQ18, 56)
// p_spec.c:1269   floor->texture = s3->floorpic;
  MOV.W        (RQ27, 8), RQ23
  MOV.W        RQ23, (RQ18, 48)
// p_spec.c:1270   floor->newspecial = 0;
  MOV.L        RD0, (RQ18, 44)
// p_spec.c:1271   floor->floordestheight = s3->floorheight;
  MOV.L        (RQ27, 0), RQ20
  MOV.L        RQ20, (RQ18, 52)
// p_spec.c:1274   floor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_spec.c:1275   P_AddThinker (&floor->thinker);
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          P_AddThinker, R1
// p_spec.c:1276   s1->specialdata = floor;
  MOV.Q        (R2, 128), RQ13
  MOV.Q        RQ18, (RQ13, 104)
// p_spec.c:1277   floor->thinker.function.acp1 = (actionf_p1) T_MoveFloor;
  MOV          T_MoveFloor, RQ8
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ12
  MOV.Q        RQ8, (RQ12, 0)
// p_spec.c:1278   floor->type = lowerFloor;
  MOV.L        RD0, (RQ18, 24)
// p_spec.c:1279   floor->crush = false;
  MOV.L        RD0, (RQ18, 28)
// p_spec.c:1280   floor->direction = -1;
  ADD          R0, -1, RD11
  MOV.L        RD11, (RQ18, 40)
// p_spec.c:1281   floor->sector = s1;
  MOV.Q        RQ13, (RQ18, 32)
// p_spec.c:1282   floor->speed = FLOORSPEED / 2;
  MOV.L        RD25, (RQ18, 56)
// p_spec.c:1283   floor->floordestheight = s3->floorheight;
  MOV.L        (RQ27, 0), RQ23
  MOV.L        RQ23, (RQ18, 52)
// p_spec.c:1284   break;
  BSR          .L00802157, R0

.L00802156:
  ADDS.L       RD21, 1, RD21
  MOV.L        (RQ22, 112), RQ20
  BRLT.L       RQ20, RD21, .L00802155

.L00802157:

.L00802154:
  MOV.Q        (R2, 136), RQ10
  MOV.L        (R2, 116), RD11
  BSR          P_FindSectorFromLineTag, R1
  ADD          RQ10, 0, RQ23
  MOV.L        RD23, (R2, 116)
  BRGE.L       R0, RQ23, .L00802152

.L00802153:
// p_spec.c:1286   }
  MOV.L        (R2, 112), RD10

.L00C01B42:
  ADD          R2, 328, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

D_StartTitle:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// d_main.c:657   {
  MOV.L        RD0, gameaction
// d_main.c:659   demosequence = -1;
  ADD          R0, -1, RQ6
  MOV.L        RQ6, demosequence
// d_main.c:660   D_AdvanceDemo ();
  BSR          D_AdvanceDemo, R1

.L00C01B48:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

W_DecodeBufferLZ4:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  MOV.L        RD13, (R2, 104)
// w_wad.c:760   tg=0;	lr=0;
  ADD          RD0, 0, RD20
  ADD          RD0, 0, RD9
// w_wad.c:761   ll=0;	ld=0;
  ADD          RD0, 0, RD23
  MOV.L        RD0, (R2, 92)
// w_wad.c:763   ct=obuf;
  MOV.Q        (R2, 112), RQ22
// w_wad.c:764   cs=ibuf; cse=ibuf+isz;
  MOV.Q        (R2, 120), RQ13
  ADD          RQ13, 0, RQ18
  MOV.L        (R2, 108), RD12
  ADD          RQ13, RD12, RQ11
  MOV.Q        RQ11, (R2, 96)
// w_wad.c:765   while(cs<cse)
  BSR          .L008028E9, R0

.L008028E7:
// w_wad.c:766   {
  MOVU.B       (RQ18, 0), RD20
  ADD          RQ18, 1, RQ18
// w_wad.c:768   lr=(tg>>4)&15;
  SHAR         RD20, 4, RQ21
  AND          RQ21, 15, RD9
// w_wad.c:769   if(lr==15)
  BRNE.Q       15, RD9, .L008028EA
// w_wad.c:770   {
  MOVU.B       (RQ18, 0), RD8
  ADD          RQ18, 1, RQ18
// w_wad.c:772   while(i==255)
  BSR          .L008028ED, R0

.L008028EB:
// w_wad.c:773   { lr+=255; i=*cs++; }
  ADDS.L       RD9, 255, RD9
  MOVU.B       (RQ18, 0), RD8
  ADD          RQ18, 1, RQ18

.L008028ED:
  BREQ.Q       255, RD8, .L008028EB

.L008028EC:
  ADDS.L       RD9, RD8, RD9

.L008028EA:
// w_wad.c:777   if(lr)
  BREQ.L       R0, RD9, .L008028EE
// w_wad.c:778   {
  ADD          RQ22, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          W_RawCopy, R1
// w_wad.c:780   cs+=lr;	ct+=lr;
  ADD          RQ18, RD9, RQ18
  ADD          RQ22, RD9, RQ22

.L008028EE:
// w_wad.c:783   if((cs+1)>=cse)
  ADD          RQ18, 1, RQ13
  MOV.Q        (R2, 96), RQ12
  BRGE.Q       RQ12, RQ13, .L008028E8
// w_wad.c:786   ld=*(u16 *)cs;
  MOVU.W       (RQ18, 0), RD13
// w_wad.c:787   cs+=2;
  ADD          RQ18, 2, RQ18
// w_wad.c:788   if(!ld)
  MOV.L        RD13, (R2, 92)
  BRNE.L       R0, RD13, .L008028EF
// w_wad.c:789   {
  MOV          .L00C01B4F, RQ10
  BSR          printf, R1
// w_wad.c:791   break;
  BSR          .L008028E8, R0

.L008028EF:
// w_wad.c:792   }
  AND          RD20, 15, RQ21
  ADDS.L       RQ21, 4, RD23
// w_wad.c:794   if(ll==19)
  BRNE.Q       19, RD23, .L008028F0
// w_wad.c:795   {
  MOVU.B       (RQ18, 0), RD8
  ADD          RQ18, 1, RQ18
// w_wad.c:797   while(i==255)
  BSR          .L008028F3, R0

.L008028F1:
// w_wad.c:798   { ll+=255; i=*cs++; }
  ADDS.L       RD23, 255, RD23
  MOVU.B       (RQ18, 0), RD8
  ADD          RQ18, 1, RQ18

.L008028F3:
  BREQ.Q       255, RD8, .L008028F1

.L008028F2:
  ADDS.L       RD23, RD8, RD23

.L008028F0:
// w_wad.c:802   W_MatchCopy2(ct, ll, ld);
  ADD          RQ22, 0, RQ10
  ADD          RD23, 0, RD11
  MOV.L        (R2, 92), RD12
  BSR          W_MatchCopy2, R1
// w_wad.c:803   ct+=ll;
  ADD          RQ22, RD23, RQ22

.L008028E9:
  MOV.Q        (R2, 96), RQ13
  BRLT.Q       RQ13, RQ18, .L008028E7

.L008028E8:
// w_wad.c:806   tg=0;	lr=0;
  ADD          RD0, 0, RD20
  ADD          RD0, 0, RD9
// w_wad.c:807   ll=0;	ld=0;
  ADD          RD0, 0, RD23
  MOV.L        RD0, (R2, 92)
// w_wad.c:809   return(ct-obuf);
  MOV.Q        (R2, 112), RQ13
  SUB          RQ22, RQ13, RQ12
  ADDS.L       RQ12, 0, RQ21
  ADD          RQ21, 0, RD10

.L00C01B4E:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawDeathmatchStats:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// wi_stuff.c:1022   lh = WI_SPACINGY;
  ADD          R0, 33, RD27
  MOV.L        RD27, (R2, 104)
// wi_stuff.c:1024   WI_slamBackground();
  BSR          WI_slamBackground, R1
// wi_stuff.c:1027   WI_drawAnimatedBack(); 
  BSR          WI_drawAnimatedBack, R1
// wi_stuff.c:1028   WI_drawLF();
  BSR          WI_drawLF, R1
// wi_stuff.c:1031   V_DrawPatch(DM_TOTALSX-SHORT(total->width)/2,
  MOV.Q        TU7A00CB85/total, RQ26
  MOV.W        (RQ26, 0), RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 2, RD26
  DIVS.L       RQ9, RD26, RQ9
  ADD          R0, 269, R5
  SUBS.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 45, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/total, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1036   V_DrawPatch(DM_KILLERSX, DM_KILLERSY, FB, killers);
  ADD          R0, 10, RD10
  ADD          R0, 100, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/killers, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1037   V_DrawPatch(DM_VICTIMSX, DM_VICTIMSY, FB, victims);
  ADD          R0, 5, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/victims, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1040   x = DM_MATRIXX + DM_SPACINGX;
  ADD          R0, 82, RD21
// wi_stuff.c:1041   y = DM_MATRIXY;
  ADD          R0, 68, RD20
// wi_stuff.c:1043   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD8

.L00802A1D:
// wi_stuff.c:1044   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD8), RQ9
  BREQ.L       R0, RQ9, .L00802A20
// wi_stuff.c:1046   {
  MOV          TU7A00CB85/p, RQ27
  MOV.Q        (RQ27, RD8), RQ23
  MOV.W        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  SUBS.L       RD21, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 35, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1052   V_DrawPatch(DM_MATRIXX-SHORT(p[i]->width)/2,
  MOV          TU7A00CB85/p, RQ26
  MOV.Q        (RQ26, RD8), RQ23
  MOV.W        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ9
  DIVS.L       RQ9, RD27, RQ9
  ADD          R0, 42, R5
  SUBS.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD20, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatch, R1
  MOV.L        TU7A00CB85/me, RD26
  BRNE.Q       RD26, RD8, .L00802A21
// wi_stuff.c:1058   {
  MOV          TU7A00CB85/p, RQ27
  MOV.Q        (RQ27, RD8), RQ23
  MOV.W        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  SUBS.L       RD21, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 35, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/bstar, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1064   V_DrawPatch(DM_MATRIXX-SHORT(p[i]->width)/2,
  MOV          TU7A00CB85/p, RQ26
  MOV.Q        (RQ26, RD8), RQ23
  MOV.W        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ9
  DIVS.L       RQ9, RD27, RQ9
  ADD          R0, 42, R5
  SUBS.L       R5, RQ9, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD20, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/star, RQ13
  BSR          V_DrawPatch, R1

.L00802A21:

.L00802A20:
// wi_stuff.c:1076   }
  ADDS.L       RD21, 40, RD21
// wi_stuff.c:1078   y += WI_SPACINGY;
  ADDS.L       RD20, 33, RD20
  ADDS.L       RD8, 1, RD8
  BRLT.L       4, RD8, .L00802A1D

.L00802A1F:
// wi_stuff.c:1082   y = DM_MATRIXY+10;
  ADD          R0, 78, RD20
// wi_stuff.c:1083   w = SHORT(num[0]->width);
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.W        (RQ23, 0), RD27
  MOV.L        RD27, (R2, 108)
// wi_stuff.c:1085   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD8

.L00802A22:
// wi_stuff.c:1086   {
  ADD          R0, 82, RD21
// wi_stuff.c:1089   if (playeringame[i])
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BREQ.L       R0, RQ18, .L00802A25
// wi_stuff.c:1090   {
  ADD          R0, 0, RD22

.L00802A26:
// wi_stuff.c:1092   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD22), RQ9
  BREQ.L       R0, RQ9, .L00802A29
// wi_stuff.c:1094   WI_drawNum(x+w, y, dm_frags[i][j], 2);
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD8, 4, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.L        (RQ23, RD22), RQ18
  MOV.L        (R2, 108), RD27
  ADDS.L       RD21, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 2, RD13
  BSR          WI_drawNum, R1

.L00802A29:
// wi_stuff.c:1096   x += DM_SPACINGX;
  ADDS.L       RD21, 40, RD21
  ADDS.L       RD22, 1, RD22
  BRLT.L       4, RD22, .L00802A26

.L00802A28:
// wi_stuff.c:1097   }
  MOV          TU7A00CB85/dm_totals, RQ27
  MOV.L        (RQ27, RD8), RQ18
  MOV.L        (R2, 108), RD27
  ADDS.L       RD27, 269, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 2, RD13
  BSR          WI_drawNum, R1

.L00802A25:
// wi_stuff.c:1099   }
  ADDS.L       RD20, 33, RD20
  ADDS.L       RD8, 1, RD8
  BRLT.L       4, RD8, .L00802A22

.L00802A24:

.L00C01B55:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

G_Responder:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
  ADD          R0, 1, RD22
  ADD          R0, 2, RD20
// g_game.c:526   if (gamestate == GS_LEVEL && ev->type == ev_keydown
  MOV.L        gamestate, RD13
  BRNE.L       R0, RD13, .L00801535
  MOV.L        (RQ8, 0), RQ18
  BRNE.L       R0, RQ18, .L00801535

.L00801538:
  MOV.L        (RQ8, 4), RQ18
  BRNE.Q       216, RQ18, .L00801535

.L00801537:
  MOV.L        singledemo, RD13
  BRNE.L       R0, RD13, .L00801536
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00801536
  BSR          .L00801535, R0

.L00801536:
// g_game.c:530   do

.L0080153B:
// g_game.c:531   {
  MOV.L        displayplayer, RD13
  ADDS.L       RD13, 1, RD13
// g_game.c:533   if (displayplayer == MAXPLAYERS)
  MOV.L        RD13, displayplayer
  BRNE.Q       4, RD13, .L0080153E
// g_game.c:534   displayplayer = 0;
  MOV.L        RD0, displayplayer

.L0080153E:
  MOV          playeringame, RQ13
  MOV.L        displayplayer, RD12
  MOV.L        (RQ13, RD12), RQ18
  CMPEQ.Q      RQ18, R0, RQ9
  MOV.L        consoleplayer, RD13
  CMPNE.Q      RD12, RD13, RQ18
  BTSTN.L      RQ18, RQ9, .L0080153B
// g_game.c:535   } while (!playeringame[displayplayer] && displayplayer != consoleplayer);
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801535:
// g_game.c:540   if (gameaction == ga_nothing && !singledemo &&
  MOV.L        gameaction, RD13
  CMPEQ.Q      RD13, R0, RQ9
  MOV.L        singledemo, RD13
  CMPEQ.Q      RD13, R0, RQ18
  BTST.L       RQ18, RQ9, .L0080153F
  MOV.L        demoplayback, RD13
  BRNE.L       R0, RD13, .L00801540
  MOV.L        gamestate, RD13
  BREQ.Q       3, RD13, .L00801540
  BSR          .L0080153F, R0

.L00801540:
  MOV.L        (RQ8, 0), RQ9
  BREQ.L       R0, RQ9, .L00801544
  MOV.L        (RQ8, 0), RQ18
  BRNE.Q       2, RQ18, .L00801545
  MOV.L        (RQ8, 4), RQ9
  BREQ.L       R0, RQ9, .L00801545
  BSR          .L00801544, R0

.L00801545:
  MOV.L        (RQ8, 0), RQ18
  BRNE.Q       3, RQ18, .L00801543
  MOV.L        (RQ8, 4), RQ9
  BREQ.L       R0, RQ9, .L00801543

.L00801544:
// g_game.c:547   {
  BSR          M_StartControlPanel, R1
// g_game.c:549   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801543:
// g_game.c:550   }
  ADD          R0, 0, RD10
  BSR          .L00C01B5B, R0

.L0080153F:
// g_game.c:554   if (gamestate == GS_LEVEL)
  MOV.L        gamestate, RD13
  BRNE.L       R0, RD13, .L00801549
  ADD          RQ8, 0, RQ10
  BSR          HU_Responder, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080154A
// g_game.c:564   return true;	// chat ate the event
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L0080154A:
  ADD          RQ8, 0, RQ10
  BSR          ST_Responder, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L0080154B
// g_game.c:566   return true;	// status window ate it
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L0080154B:
  ADD          RQ8, 0, RQ10
  BSR          AM_Responder, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080154C
// g_game.c:568   return true;	// automap ate it
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L0080154C:

.L00801549:
// g_game.c:571   if (gamestate == GS_FINALE)
  MOV.L        gamestate, RD13
  BRNE.Q       2, RD13, .L0080154D
  ADD          RQ8, 0, RQ10
  BSR          F_Responder, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L0080154E
// g_game.c:574   return true;	// finale ate the event
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L0080154E:

.L0080154D:
// g_game.c:577   switch (ev->type)
  MOV.L        (RQ8, 0), RQ18
  BREQ.L       R0, RQ18, .L00801550
  BREQ.Q       1, RQ18, .L00801551
  BREQ.Q       2, RQ18, .L00801552
  BREQ.Q       3, RQ18, .L00801553
  BSR          .L00801554, R0

.L00801550:
// g_game.c:579   case ev_keydown:
  MOV.L        (RQ8, 4), RQ9
  BRNE.Q       255, RQ9, .L00801555
// g_game.c:581   {
  MOV.L        RD22, sendpause
// g_game.c:583   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801555:
// g_game.c:584   }
  MOV.L        (RQ8, 4), RQ18
  BRGE.L       256, RQ18, .L00801556
// g_game.c:586   gamekeydown[ev->data1] = true;
  MOV.L        (RQ8, 4), RQ9
  MOV          gamekeydown, RQ13
  MOV.L        RD22, (RQ13, RQ9)

.L00801556:
// g_game.c:587   return true;	// eat key down events
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801551:
// g_game.c:589   case ev_keyup:
  MOV.L        (RQ8, 4), RQ18
  BRGE.L       256, RQ18, .L00801557
// g_game.c:591   gamekeydown[ev->data1] = false;
  MOV.L        (RQ8, 4), RQ9
  MOV          gamekeydown, RQ13
  MOV.L        RD0, (RQ13, RQ9)

.L00801557:
// g_game.c:592   return false;   // always let key up events filter down
  ADD          R0, 0, RD10
  BSR          .L00C01B5B, R0

.L00801552:
// g_game.c:594   case ev_mouse:
  MOV.L        (RQ8, 4), RQ18
  AND          RQ18, 1, RQ9
  MOV.Q        mousebuttons, RQ13
  MOV.L        RQ9, (RQ13, 0)
// g_game.c:596   mousebuttons[1] = ev->data1 & 2;
  MOV.L        (RQ8, 4), RQ18
  AND          RQ18, 2, RQ9
  MOV.L        RQ9, (RQ13, 4)
// g_game.c:597   mousebuttons[2] = ev->data1 & 4;
  MOV.L        (RQ8, 4), RQ18
  AND          RQ18, 4, RQ9
  MOV.L        RQ9, (RQ13, 8)
// g_game.c:598   mousex = ev->data2*(mouseSensitivity+5)/10;
  MOV.L        (RQ8, 8), RQ18
  MOV.L        mouseSensitivity, RD13
  ADDS.L       RD13, 5, RQ9
  MULS.L       RQ18, RQ9, RQ23
  MOV.L        RQ23, mousex
  ADD          R0, 10, RD12
  MOV.L        mousex, RD11
  DIVS.L       RD11, RD12, RD11
  MOV.L        RD11, mousex
// g_game.c:599   mousey = ev->data3*(mouseSensitivity+5)/10;
  MOV.L        (RQ8, 12), RQ18
  ADDS.L       RD13, 5, RQ9
  MULS.L       RQ18, RQ9, RQ23
  MOV.L        RQ23, mousey
  MOV.L        mousey, RD13
  DIVS.L       RD13, RD12, RD13
  MOV.L        RD13, mousey
// g_game.c:600   return true;	// eat events
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801553:
// g_game.c:602   case ev_joystick:
  MOV.L        (RQ8, 4), RQ18
  AND          RQ18, 1, RQ9
  MOV.Q        joybuttons, RQ13
  MOV.L        RQ9, (RQ13, 0)
// g_game.c:604   joybuttons[1] = ev->data1 & 2;
  MOV.L        (RQ8, 4), RQ23
  AND          RQ23, 2, RQ18
  MOV.L        RQ18, (RQ13, 4)
// g_game.c:605   joybuttons[2] = ev->data1 & 4;
  MOV.L        (RQ8, 4), RQ9
  AND          RQ9, 4, RQ23
  MOV.L        RQ23, (RQ13, 8)
// g_game.c:606   joybuttons[3] = ev->data1 & 8;
  MOV.L        (RQ8, 4), RQ18
  AND          RQ18, 8, RQ9
  MOV.L        RQ9, (RQ13, 12)
// g_game.c:607   joyxmove = ev->data2;
  MOV.L        (RQ8, 8), RD13
  MOV.L        RD13, joyxmove
// g_game.c:608   joyymove = ev->data3;
  MOV.L        (RQ8, 12), RD13
  MOV.L        RD13, joyymove
// g_game.c:609   return true;	// eat events
  ADD          R0, 1, RD10
  BSR          .L00C01B5B, R0

.L00801554:
// g_game.c:611   default:

.L0080154F:
// g_game.c:615   return false;
  ADD          R0, 0, RD10

.L00C01B5B:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

R_InitFlats:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -312, R2
  ADD          R0, 1, RD23
// r_data.c:944   firstflat = W_GetNumForName ("F_START") + 1;
  MOV          .L00C01B62, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, 1, RD22
  MOV.L        RD22, firstflat
// r_data.c:945   lastflat = W_GetNumForName ("F_END") - 1;
  MOV          .L00C01B63, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, -1, RD22
// r_data.c:946   numflats = lastflat - firstflat + 1;
  MOV.L        firstflat, RD21
  SUBS.L       RD22, RD21, RQ9
  MOV.L        RD22, lastflat
  ADDS.L       RQ9, 1, RD22
// r_data.c:950   flattranslation = Z_Malloc ((numflats+1)*sizeof(int), PU_STATIC, 0);
  ADDS.L       RD22, 1, RQ9
  MOV.L        RD22, numflats
  SHAD.L       RQ9, 2, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, flattranslation
// r_data.c:954   for (i=0 ; i<numflats ; i++)
  ADD          R0, 0, RD18
  MOV.L        numflats, RD22
  BRGE.L       RD22, RD18, .L00802470

.L0080246E:
// r_data.c:955   flattranslation[i] = i;
  MOV.Q        flattranslation, RQ22
  MOV.L        RD18, (RQ22, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.L        numflats, RD22
  BRLT.L       RD22, RD18, .L0080246E

.L00802470:

.L00C01B61:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

V_CopyRect:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.L        RD12, (R2, 132)
  MOV.L        RD13, (R2, 128)
  ADDS.L       RD14, 0, RD9
  MOV.L        RD15, (R2, 120)
  MOV.L        RD16, (R2, 116)
  MOV.L        RD17, (R2, 112)
// v_video.c:177   if (srcx<0
  MOV.L        (R2, 140), RD27
  CMPLT.Q      RD27, R0, RQ18
  MOV.L        (R2, 128), RD13
  ADDS.L       RD27, RD13, RQ22
  ADD          R0, 320, R5
  CMPGT.Q      RQ22, R5, RQ21
  OR           RQ18, RQ21, RQ22
  MOV.L        (R2, 136), RD12
  CMPLT.Q      RD12, R0, RQ21
  OR           RQ22, RQ21, RQ18
  BRNE.L       R0, RQ18, .L00802AED
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, RD9, RQ22
  BRGT.L       200, RQ22, .L00802AED

.L00802AF3:
  MOV.L        (R2, 120), RD27
  BRLT.L       R0, RD27, .L00802AED

.L00802AF2:
  MOV.L        (R2, 120), RD27
  MOV.L        (R2, 128), RD13
  ADDS.L       RD27, RD13, RQ21
  BRGT.L       320, RQ21, .L00802AED

.L00802AF1:
  MOV.L        (R2, 116), RD27
  BRLT.L       R0, RD27, .L00802AED

.L00802AF0:
  MOV.L        (R2, 116), RD27
  ADDS.L       RD27, RD9, RQ18
  BRGT.L       200, RQ18, .L00802AED

.L00802AEF:
  MOV.L        (R2, 132), RD27
  ADDU.L       RD27, R0, RQ22
  BRGTU.L      4, RQ22, .L00802AED

.L00802AEE:
  MOV.L        (R2, 112), RD27
  ADDU.L       RD27, R0, RQ21
  BRGTU.L      4, RQ21, .L00802AED
  BSR          .L00802AEC, R0

.L00802AED:
// v_video.c:186   {
  MOV          .L00C01B6A, RQ10
  BSR          I_Error, R1

.L00802AEC:
// v_video.c:190   V_MarkRect (destx, desty, width, height); 
  MOV.L        (R2, 120), RD10
  MOV.L        (R2, 116), RD11
  MOV.L        (R2, 128), RD12
  ADDS.L       RD9, 0, RD13
  BSR          V_MarkRect, R1
// v_video.c:192   src = screens[srcscrn]+SCREENWIDTH*srcy+srcx; 
  MOV          screens, RQ27
  MOV.L        (R2, 132), RD13
  MOV.Q        (RQ27, RD13), RQ12
  MOV.L        (R2, 136), RD11
  ADD          R0, 320, R5
  MULS.L       RD11, R5, RQ18
  LEA.W        RQ12, RQ18, RQ10
  MOV.L        (R2, 140), RD17
  LEA.W        RQ10, RD17, RQ8
// v_video.c:193   dest = screens[destscrn]+SCREENWIDTH*desty+destx; 
  MOV.L        (R2, 112), RD16
  MOV.Q        (RQ27, RD16), RQ12
  MOV.L        (R2, 116), RD27
  ADD          R0, 320, R5
  MULS.L       RD27, R5, RQ18
  LEA.W        RQ12, RQ18, RQ10
  MOV.L        (R2, 120), RD15
  LEA.W        RQ10, RD15, RQ23
// v_video.c:195   for ( ; height>0 ; height--) 
  BRLE.L       R0, RD9, .L00802AF7

.L00802AF5:
// v_video.c:196   { 
  MOV.L        (R2, 128), RD27
  SHAD.L       RD27, 1, RQ18
  ADDS.L       RQ18, 0, RQ20
  ADD          RQ23, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RQ20, 0, RQ12
  BSR          memcpy, R1
// v_video.c:198   src += SCREENWIDTH; 
  ADD          RQ8, 640, RQ8
// v_video.c:199   dest += SCREENWIDTH; 
  ADD          RQ23, 640, RQ23
  ADDS.L       RD9, -1, RD9
  BRGT.L       R0, RD9, .L00802AF5

.L00802AF7:

.L00C01B69:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

A_SpidRefire:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 88)
// p_enemy.c:918   A_FaceTarget (actor);
  MOV.Q        (R2, 88), RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:920   if (P_Random () < 10)
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 10, RD8
  BRLT.L       RD8, RQ18, .L00C01B70
// p_enemy.c:923   if (!actor->target
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  BREQ.Q       R0, RQ9, .L00801B55
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  MOV.L        (RQ9, 164), RQ18
  BRLE.L       R0, RQ18, .L00801B55

.L00801B56:
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B55
  BSR          .L00801B54, R0

.L00801B55:
// p_enemy.c:926   {
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 136), RQ9
  MOV.L        (RQ9, 12), RQ18
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1

.L00801B54:

.L00C01B70:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_AmbientSound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C01B77, RQ18
// p_acspec.c:826   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C01B76:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TKMM_Init:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// tk_core/tk_mmpage.c:754   
  MOV.L        TU61F874B9/tkmm_is_init, RD18
  ADD          R0, 165, RD9
  BREQ.Q       RD9, RD18, .L00C01B7D
// tk_core/tk_mmpage.c:756   
  ADD          R0, 165, RD18
  MOV.L        RD18, TU61F874B9/tkmm_is_init
// tk_core/tk_mmpage.c:809   
  MOV          TKMM_PageAllocV, RQ18
  ADD          RQ18, 0, RQ9
  MOV.Q        RQ9, TKMM_PageAlloc_f
// tk_core/tk_mmpage.c:810   
  MOV          TKMM_PageFreeV, RQ18
  ADD          RQ18, 0, RQ9
  MOV.Q        RQ9, TKMM_PageFree_f
// tk_core/tk_mmpage.c:816   
  BSR          TKMM_MMList_Init, R1
// tk_core/tk_mmpage.c:818   
  BSR          TKMM_LVA_ArrayInit, R1

.L00C01B7D:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

R_InitPointToAngle:
// r_main.c:446   void R_InitPointToAngle (void)

.L00C01B7E:
  JSR          R1, 0, R0

TKMM_MallocCat:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADDS.L       RD10, 0, RD9
  ADD          RD11, 0, RD22
// tk_core/tk_mmpage.c:1249   
  LDIZ         0x0000FF00, RD13
  BRGE.L       RD13, RD9, .L008009B3
// tk_core/tk_mmpage.c:1250   
  ADDS.L       RD9, 0, RD10
  ADD          RD22, 0, RD11
  BSR          TKMM_MMList_MallocCat, R1
  ADD          RQ10, 0, RQ18
  BRNE.Q       R0, RQ18, .L008009B4
// tk_core/tk_mmpage.c:1254   
  MOV          .L00C01B8F, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          tk_printf, R1

.L008009B4:
// tk_core/tk_mmpage.c:1256   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01B8E, R0

.L008009B3:
// tk_core/tk_mmpage.c:1259   
  ADDS.L       RD9, 24, RQ23
  ADD          RQ23, 0, RD10
  ADD          RD22, 0, RD11
  BSR          TKMM_MMList_AllocBrkCat, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:1260   
  ADDS.L       RD9, 24, RQ23
  ADDS.L       RQ23, 16383, RQ21
  SHAR         RQ21, 14, RD20
// tk_core/tk_mmpage.c:1262   
  BRNE.Q       R0, RQ18, .L008009B5
// tk_core/tk_mmpage.c:1263   
  MOV          .L00C01B90, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          tk_printf, R1
// tk_core/tk_mmpage.c:1265   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01B8E, R0

.L008009B5:
// tk_core/tk_mmpage.c:1268   
  ADD          RQ18, 0, RQ8
// tk_core/tk_mmpage.c:1270   
  BRNE.Q       R0, RQ8, .L008009B6
// tk_core/tk_mmpage.c:1271   

TKMM_MallocCat.debugbreak_L02DC:
  BRK          732

.L008009B6:
// tk_core/tk_mmpage.c:1275   
  MOVU.B       RD20, (RQ8, 6)
// tk_core/tk_mmpage.c:1276   
  ADD          R0, 5, RD13
  MOVU.B       RD13, (RQ8, 4)
// tk_core/tk_mmpage.c:1277   
  MOVU.B       RD22, (RQ8, 7)
// tk_core/tk_mmpage.c:1279   
  LDIZ         16383, RQ12
  BTST.Q       RQ12, RQ18, .L008009B7
// tk_core/tk_mmpage.c:1280   

TKMM_MallocCat.debugbreak_L02DD:
  BRK          733

.L008009B7:
// tk_core/tk_mmpage.c:1282   
  ADD          RQ8, 16, RQ13
  ADD          RQ13, 0, RQ10

.L00C01B8E:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

AM_drawThings:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  MOV.L        RD10, (R2, 156)
  MOV.L        RD11, (R2, 152)
// am_map.c:1306   for (i=0;i<numsectors;i++)
  ADD          R0, 0, RD9
  MOV.L        numsectors, RD20
  BRGE.L       RD20, RD9, .L00801878

.L00801876:
// am_map.c:1307   {
  MOV.Q        sectors, RQ20
  SHAD.L       RD9, 7, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.Q        (RQ27, 96), RQ18
// am_map.c:1309   while (t)
  BSR          .L0080187B, R0

.L00801879:
// am_map.c:1310   {
  MOV.L        (RQ18, 28), RQ21
  MOV.L        (RQ18, 24), RQ22
  MOV.L        (R2, 156), RD20
  MOV.L        TU7A00C41B/lightlev, RD27
  ADDS.L       RD20, RD27, RQ23
  MOVU.L       (RQ18, 56), RQ8
  MOV          thintriangle_guy, RQ10
  ADD          R0, 3, RD11
  LUI          256, RD12
  ADDU.L       RQ8, R0, RD13
  ADD          RQ23, 0, RD14
  ADD          RQ22, 0, RD15
  ADD          RQ21, 0, RD16
  BSR          AM_drawLineCharacter, R1
// am_map.c:1314   t = t->snext;
  MOV.Q        (RQ18, 40), RQ18

.L0080187B:
  BRNE.Q       R0, RQ18, .L00801879

.L0080187A:
  ADDS.L       RD9, 1, RD9
  MOV.L        numsectors, RD20
  BRLT.L       RD20, RD9, .L00801876

.L00801878:

.L00C01B98:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

M_SoftDivRcpS:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD8
// m_fixed.c:409   {
  BRGE.L       R0, RD8, .L00801767
// m_fixed.c:411   {
  SUBS.L       R0, RD8, RQ23
  ADDU.L       RQ23, R0, RQ9
  ADDU.L       RQ9, R0, RD10
  BSR          M_SoftDivRcp, R1
  ADD          RQ10, 0, RQ18
  SUBU.L       R0, RQ18, RQ9
  ADDS.L       RQ9, 0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01B9E, R0

.L00801767:
// m_fixed.c:413   }
  ADDU.L       RD8, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          M_SoftDivRcp, R1
  ADDU.L       RQ10, R0, RQ9
  ADDS.L       RQ9, 0, RQ18
  ADD          RQ18, 0, RD10

.L00C01B9E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

I_UpdateSoundParams:
// i_sound_btsh.c:1043   handle = vol = sep = pitch = 0;
  ADD          RD0, 0, RD13
  ADD          RD0, 0, RD12
  ADD          RD0, 0, RD11
  ADD          R0, 0, RD10

.L00C01B9F:
  JSR          R1, 0, R0

F_Responder:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 72)
// f_finale.c:197   {
  MOV.L        finalestage, RD13
  BRNE.Q       2, RD13, .L008012BD
// f_finale.c:199   return F_CastResponder (event);
  MOV.Q        (R2, 72), RQ10
  BSR          F_CastResponder, R1
  BSR          .L00C01BA5, R0

.L008012BD:
// f_finale.c:201   return false;
  ADD          R0, 0, RD10

.L00C01BA5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

PTR_UseTraverse:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// p_map.c:1134   if (!in->d.line->special)
  ADD          RQ8, 8, RQ20
  MOV.Q        (RQ20, 0), RQ18
  MOV.W        (RQ18, 26), RQ9
  BRNE.L       R0, RQ9, .L00801D99
// p_map.c:1135   {
  ADD          RQ8, 8, RQ20
  MOV.Q        (RQ20, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_LineOpening, R1
  MOV.L        openrange, RD27
  BRGT.L       R0, RD27, .L00801D9A
// p_map.c:1138   {
  MOV.Q        usething, RQ10
  ADD          R0, 81, RD11
  BSR          S_StartSound, R1
// p_map.c:1142   return false;	
  ADD          R0, 0, RD10
  BSR          .L00C01BAB, R0

.L00801D9A:
// p_map.c:1145   return true ;		
  ADD          R0, 1, RD10
  BSR          .L00C01BAB, R0

.L00801D99:
// p_map.c:1148   side = 0;
  ADD          R0, 0, RD22
// p_map.c:1149   if (P_PointOnLineSide (usething->x, usething->y, in->d.line) == 1)
  ADD          RQ8, 8, RQ20
  MOV.Q        (RQ20, 0), RQ18
  MOV.Q        usething, RQ27
  MOV.L        (RQ27, 28), RQ9
  MOV.L        (RQ27, 24), RQ21
  ADD          RQ21, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RQ23
  BRNE.Q       1, RQ23, .L00801D9B
// p_map.c:1150   side = 1;
  ADD          R0, 1, RD22

.L00801D9B:
// p_map.c:1154   P_UseSpecialLine (usething, in->d.line, side);
  ADD          RQ8, 8, RQ20
  MOV.Q        (RQ20, 0), RQ18
  MOV.Q        usething, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RD22, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_map.c:1157   return false;
  ADD          R0, 0, RD10

.L00C01BAB:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_InitSwitchList:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  ADD          R0, 2, RD21
// p_switch.c:121   episode = 1;
  ADD          R0, 1, RD20
  ADD          RD20, 0, RD22
// p_switch.c:123   if (gamemode == registered)
  MOV.L        gamemode, RD27
  BRNE.Q       1, RD27, .L00802186
// p_switch.c:124   episode = 2;
  ADD          RD21, 0, RD22
  BSR          .L00802187, R0

.L00802186:
  MOV.L        gamemode, RD20
  BRNE.Q       2, RD20, .L00802188
// p_switch.c:127   episode = 3;
  ADD          R0, 3, RD22

.L00802188:

.L00802187:
// p_switch.c:129   for (index = 0,i = 0;i < MAXSWITCHES;i++)
  ADD          RD0, 0, RD8
  ADD          R0, 0, RD9
  BRGE.L       50, RD9, .L0080218B

.L00802189:
// p_switch.c:130   {
  MOV          alphSwitchList, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.W        (RQ27, 18), RQ18
  BRNE.L       R0, RQ18, .L0080218C
// p_switch.c:132   {
  MOV.L        RD8, numswitches
  MOV.L        numswitches, RD20
  DIVS.L       RD20, RD21, RD20
  MOV.L        RD20, numswitches
// p_switch.c:134   switchlist[index] = -1;
  MOV          switchlist, RQ20
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ20, RD8)
// p_switch.c:135   break;
  BSR          .L0080218B, R0

.L0080218C:
// p_switch.c:138   if (alphSwitchList[i].episode <= episode)
  MOV          alphSwitchList, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.W        (RQ27, 18), RQ18
  BRGT.L       RD22, RQ18, .L0080218D
  MOV          alphSwitchList, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 0, RQ10
  BSR          R_CheckTextureNumForName, R1
  ADD          RQ10, 0, RQ18
  BRLT.L       R0, RQ18, .L0080218A
// p_switch.c:156   switchlist[index++] = R_TextureNumForName(alphSwitchList[i].name1);
  MOV          alphSwitchList, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 0, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          switchlist, RQ20
  MOV.L        RQ18, (RQ20, RQ23)
// p_switch.c:157   switchlist[index++] = R_TextureNumForName(alphSwitchList[i].name2);
  MOV          alphSwitchList, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 9, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ23
  ADD          RD8, 0, RQ18
  ADDS.L       RD8, 1, RD8
  MOV          switchlist, RQ20
  MOV.L        RQ23, (RQ20, RQ18)

.L0080218D:

.L0080218A:
  ADDS.L       RD9, 1, RD9
  BRLT.L       50, RD9, .L00802189

.L0080218B:

.L00C01BB1:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_UseSpecialLine:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ21
  ADD          RQ11, 0, RQ9
  MOV.L        RD12, (R2, 108)
// p_switch.c:295   spop = line->special;
  MOV.W        (RQ9, 26), RD8
// p_switch.c:297   if(spop==1024)
  ADD          R0, 1024, RD13
  BRNE.Q       RD13, RD8, .L008021A4
// p_switch.c:298   {
  ADD          RQ21, 0, RQ10
  ADD          RQ9, 0, RQ11
  MOV.L        (R2, 108), RD12
  BSR          P_AcsUseSpecialLine, R1
  BSR          .L00C01BBC, R0

.L008021A4:
// p_switch.c:302   if(gamemode==heretic)
  MOV.L        gamemode, RD13
  BRNE.Q       4, RD13, .L008021A5
// p_switch.c:303   {
  BREQ.Q       100, RD8, .L008021A7
  BREQ.Q       105, RD8, .L008021A8
  BREQ.Q       106, RD8, .L008021A9
  BREQ.Q       107, RD8, .L008021AA
  BSR          .L008021AB, R0

.L008021A7:
// p_switch.c:306   case 100: spop=105; break;		//fast raise stairs (W)
  ADD          R0, 105, RD8
  BSR          .L008021A6, R0

.L008021A8:
// p_switch.c:308   case 105: spop=124; break;		//exit secret
  ADD          R0, 124, RD8
  BSR          .L008021A6, R0

.L008021A9:
// p_switch.c:309   case 106: spop=100; break;		//fast raise stairs (W)
  ADD          R0, 100, RD8
  BSR          .L008021A6, R0

.L008021AA:
// p_switch.c:310   case 107: spop=127; break;		//fast raise stairs (S)
  ADD          R0, 127, RD8
  BSR          .L008021A6, R0

.L008021AB:
// p_switch.c:311   default: break;

.L008021A6:

.L008021A5:
// p_switch.c:317   if (side)
  MOV.L        (R2, 108), RD13
  BREQ.L       R0, RD13, .L008021AC
// p_switch.c:320   switch(spop)
  BREQ.Q       124, RD8, .L008021AE
  BSR          .L008021AF, R0

.L008021AE:
// p_switch.c:325   break;
  BSR          .L008021AD, R0

.L008021AF:
// p_switch.c:327   default:
  ADD          R0, 0, RD10
  BSR          .L00C01BBC, R0
// p_switch.c:329   break;

.L008021AD:

.L008021AC:
// p_switch.c:335   if (thing && !thing->player)
  BREQ.Q       R0, RQ21, .L008021B0
  MOV.Q        (RQ21, 192), RQ20
  BRNE.Q       R0, RQ20, .L008021B0

.L008021B1:
  MOV.W        (RQ9, 24), RQ23
  ADD          R0, 32, RD13
  BTSTN.L      RD13, RQ23, .L00C00806
// p_switch.c:342   switch(spop)
  BREQ.Q       1, RD8, .L008021B4
  BREQ.Q       32, RD8, .L008021B5
  BREQ.Q       33, RD8, .L008021B6
  BREQ.Q       34, RD8, .L008021B7
  BSR          .L008021B8, R0

.L008021B4:

.L008021B5:

.L008021B6:

.L008021B7:
// p_switch.c:347   case 34:	// MANUAL YELLOW
  BSR          .L008021B3, R0

.L008021B8:
// p_switch.c:350   default:
  ADD          R0, 0, RD10
  BSR          .L00C01BBC, R0
// p_switch.c:352   break;

.L008021B3:

.L008021B0:
// p_switch.c:359   switch (spop)
  AND          RD8, -1, RQ23
  BRGE.L       70, RQ23, .L008021FC
  AND          RD8, -1, RQ23
  ADD          RQ23, -1, RQ10
  ADD          R0, 69, RQ6
  BRGTU.Q      RQ6, RQ10, .L008021FB
  LEA.B        .L00C80013, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80013:
  BSR          .L008021BA, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021C4, R0
  BSR          .L008021FB, R0
  BSR          .L008021C5, R0
  BSR          .L008021FB, R0
  BSR          .L008021C6, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021C7, R0
  BSR          .L008021C8, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021C9, R0
  BSR          .L008021CA, R0
  BSR          .L008021CB, R0
  BSR          .L008021CC, R0
  BSR          .L008021FB, R0
  BSR          .L008021CD, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021BB, R0
  BSR          .L008021BC, R0
  BSR          .L008021BD, R0
  BSR          .L008021CE, R0
  BSR          .L008021FB, R0
  BSR          .L008021BE, R0
  BSR          .L008021BF, R0
  BSR          .L008021C0, R0
  BSR          .L008021C1, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021CF, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021D0, R0
  BSR          .L008021E3, R0
  BSR          .L008021E4, R0
  BSR          .L008021FB, R0
  BSR          .L008021E5, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021D2, R0
  BSR          .L008021D3, R0
  BSR          .L008021D4, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021D5, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021E6, R0
  BSR          .L008021E7, R0
  BSR          .L008021E8, R0
  BSR          .L008021E9, R0
  BSR          .L008021EA, R0
  BSR          .L008021ED, R0
  BSR          .L008021EB, R0
  BSR          .L008021EC, R0
  BSR          .L008021EE, R0
  BSR          .L008021EF, R0
  BSR          .L008021FB, R0

.L008021FC:
  AND          RD8, -1, RQ22
  BRGE.L       111, RQ22, .L008021FD
  BREQ.Q       70, RD8, .L008021F0
  BREQ.Q       71, RD8, .L008021D1
  BREQ.Q       99, RD8, .L008021F6
  BREQ.Q       101, RD8, .L008021D6
  BREQ.Q       102, RD8, .L008021D7
  BREQ.Q       103, RD8, .L008021D8
  BSR          .L008021FB, R0

.L008021FD:
  AND          RD8, -1, RQ22
  BRGE.L       123, RQ22, .L008021FE
  AND          RD8, -1, RQ22
  ADD          RQ22, -111, RQ10
  ADD          R0, 12, RQ6
  BRGTU.Q      RQ6, RQ10, .L008021FB
  LEA.B        .L00C80014, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80014:
  BSR          .L008021D9, R0
  BSR          .L008021DA, R0
  BSR          .L008021DB, R0
  BSR          .L008021F1, R0
  BSR          .L008021F2, R0
  BSR          .L008021F3, R0
  BSR          .L008021C2, R0
  BSR          .L008021C3, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021FB, R0
  BSR          .L008021DC, R0
  BSR          .L008021FB, R0

.L008021FE:
  AND          RD8, -1, RQ18
  BRGE.L       135, RQ18, .L008021FF
  BREQ.Q       123, RD8, .L008021F4
  BREQ.Q       127, RD8, .L008021DD
  BREQ.Q       131, RD8, .L008021DE
  BREQ.Q       132, RD8, .L008021F5
  BREQ.Q       133, RD8, .L008021DF
  BREQ.Q       134, RD8, .L008021F7

.L008021FF:
  BREQ.Q       135, RD8, .L008021E0
  BREQ.Q       136, RD8, .L008021F8
  BREQ.Q       137, RD8, .L008021E1
  BREQ.Q       138, RD8, .L008021F9
  BREQ.Q       139, RD8, .L008021FA
  BREQ.Q       140, RD8, .L008021E2
  BSR          .L008021FB, R0

.L008021BA:

.L008021BB:

.L008021BC:

.L008021BD:

.L008021BE:

.L008021BF:

.L008021C0:

.L008021C1:

.L008021C2:

.L008021C3:
// p_switch.c:373   case 118:		// Blazing door open
  ADD          RQ9, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          EV_VerticalDoor, R1
// p_switch.c:375   break;
  BSR          .L008021B9, R0

.L008021C4:
// p_switch.c:385   if (EV_BuildStairs(line,build8))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_BuildStairs, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802200
// p_switch.c:386   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802200:
// p_switch.c:387   break;
  BSR          .L008021B9, R0

.L008021C5:
// p_switch.c:391   if (EV_DoDonut(line))
  ADD          RQ9, 0, RQ10
  BSR          EV_DoDonut, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802201
// p_switch.c:392   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802201:
// p_switch.c:393   break;
  BSR          .L008021B9, R0

.L008021C6:
// p_switch.c:397   if((line->acs_spec==74) && (line->arg1>0))
  MOVU.B       (RQ9, 30), RQ18
  BRNE.Q       74, RQ18, .L00802202
  MOVU.B       (RQ9, 31), RQ18
  BRLE.L       R0, RQ18, .L00802202

.L00802203:
// p_switch.c:398   gamemap=line->arg1-1;
  MOVU.B       (RQ9, 31), RQ18
  ADDS.L       RQ18, -1, RD13
  MOV.L        RD13, gamemap

.L00802202:
// p_switch.c:399   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_switch.c:400   G_ExitLevel ();
  BSR          G_ExitLevel, R1
// p_switch.c:401   break;
  BSR          .L008021B9, R0

.L008021C7:
// p_switch.c:405   if (EV_DoPlat(line,raiseAndChange,32))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 32, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802205
// p_switch.c:406   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802205:
// p_switch.c:407   break;
  BSR          .L008021B9, R0

.L008021C8:
// p_switch.c:411   if (EV_DoPlat(line,raiseAndChange,24))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 24, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802206
// p_switch.c:412   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802206:
// p_switch.c:413   break;
  BSR          .L008021B9, R0

.L008021C9:
// p_switch.c:417   if (EV_DoFloor(line, raiseFloorToNearest))
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802207
// p_switch.c:418   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802207:
// p_switch.c:419   break;
  BSR          .L008021B9, R0

.L008021CA:
// p_switch.c:421   case 19: /* BGB, copied over */
  MOVU.B       (RQ9, 30), RQ18
  BREQ.L       R0, RQ18, .L00802208
// p_switch.c:425   EV_DoFloor(line,lowerFloor);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoFloor, R1

.L00802208:
// p_switch.c:426   }
  BSR          .L008021B9, R0

.L008021CB:
// p_switch.c:431   if (EV_DoPlat(line,raiseToNearestAndChange,0))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802209
// p_switch.c:432   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802209:
// p_switch.c:433   break;
  BSR          .L008021B9, R0

.L008021CC:
// p_switch.c:437   if (EV_DoPlat(line,downWaitUpStay,0))
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080220A
// p_switch.c:438   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080220A:
// p_switch.c:439   break;
  BSR          .L008021B9, R0

.L008021CD:
// p_switch.c:443   if (EV_DoFloor(line, lowerFloorToLowest))
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080220B
// p_switch.c:444   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080220B:
// p_switch.c:445   break;
  BSR          .L008021B9, R0

.L008021CE:
// p_switch.c:449   if (EV_DoDoor(line, vld_normal))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080220C
// p_switch.c:450   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080220C:
// p_switch.c:451   break;
  BSR          .L008021B9, R0

.L008021CF:
// p_switch.c:453   case 38:
  MOVU.B       (RQ9, 30), RQ18
  BREQ.L       R0, RQ18, .L0080220D
// p_switch.c:457   EV_DoFloor( line, lowerFloorToLowest );
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1

.L0080220D:
// p_switch.c:458   }
  BSR          .L008021B9, R0

.L008021D0:
// p_switch.c:463   if (EV_DoCeiling(line, lowerToFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoCeiling, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080220E
// p_switch.c:464   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080220E:
// p_switch.c:465   break;
  BSR          .L008021B9, R0

.L008021D1:
// p_switch.c:469   if (EV_DoFloor(line, turboLower))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080220F
// p_switch.c:470   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080220F:
// p_switch.c:471   break;
  BSR          .L008021B9, R0

.L008021D2:
// p_switch.c:475   if (EV_DoCeiling(line, crushAndRaise))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoCeiling, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802210
// p_switch.c:476   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802210:
// p_switch.c:477   break;
  BSR          .L008021B9, R0

.L008021D3:
// p_switch.c:481   if (EV_DoDoor(line, vld_close))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802211
// p_switch.c:482   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802211:
// p_switch.c:483   break;
  BSR          .L008021B9, R0

.L008021D4:
// p_switch.c:487   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_switch.c:488   G_SecretExitLevel ();
  BSR          G_SecretExitLevel, R1
// p_switch.c:489   break;
  BSR          .L008021B9, R0

.L008021D5:
// p_switch.c:493   if (EV_DoFloor(line,raiseFloorCrush))
  ADD          RQ9, 0, RQ10
  ADD          R0, 9, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802212
// p_switch.c:494   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802212:
// p_switch.c:495   break;
  BSR          .L008021B9, R0

.L008021D6:
// p_switch.c:499   if (EV_DoFloor(line, raiseFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802213
// p_switch.c:500   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802213:
// p_switch.c:501   break;
  BSR          .L008021B9, R0

.L008021D7:
// p_switch.c:505   if (EV_DoFloor(line, lowerFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802214
// p_switch.c:506   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802214:
// p_switch.c:507   break;
  BSR          .L008021B9, R0

.L008021D8:
// p_switch.c:511   if (EV_DoDoor(line, vld_open))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802215
// p_switch.c:512   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802215:
// p_switch.c:513   break;
  BSR          .L008021B9, R0

.L008021D9:
// p_switch.c:517   if (EV_DoDoor (line,blazeRaise))
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802216
// p_switch.c:518   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802216:
// p_switch.c:519   break;
  BSR          .L008021B9, R0

.L008021DA:
// p_switch.c:523   if (EV_DoDoor (line,blazeOpen))
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802217
// p_switch.c:524   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802217:
// p_switch.c:525   break;
  BSR          .L008021B9, R0

.L008021DB:
// p_switch.c:529   if (EV_DoDoor (line,blazeClose))
  ADD          RQ9, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802218
// p_switch.c:530   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802218:
// p_switch.c:531   break;
  BSR          .L008021B9, R0

.L008021DC:
// p_switch.c:535   if (EV_DoPlat(line,blazeDWUS,0))
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802219
// p_switch.c:536   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802219:
// p_switch.c:537   break;
  BSR          .L008021B9, R0

.L008021DD:
// p_switch.c:541   if (EV_BuildStairs(line,turbo16))
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_BuildStairs, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221A
// p_switch.c:542   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221A:
// p_switch.c:543   break;
  BSR          .L008021B9, R0

.L008021DE:
// p_switch.c:547   if (EV_DoFloor(line,raiseFloorTurbo))
  ADD          RQ9, 0, RQ10
  ADD          R0, 10, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221B
// p_switch.c:548   P_ChangeSwitchTexture(line,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221B:
// p_switch.c:549   break;
  BSR          .L008021B9, R0

.L008021DF:

.L008021E0:

.L008021E1:
// p_switch.c:557   if (EV_DoLockedDoor(line, blazeOpen, thing))
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  ADD          RQ21, 0, RQ12
  BSR          EV_DoLockedDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221C
// p_switch.c:558   P_ChangeSwitchTexture(line, 0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221C:
// p_switch.c:559   break;
  BSR          .L008021B9, R0

.L008021E2:
// p_switch.c:563   if (EV_DoFloor(line, raiseFloor512))
  ADD          RQ9, 0, RQ10
  ADD          R0, 12, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221D
// p_switch.c:564   P_ChangeSwitchTexture(line, 0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221D:
// p_switch.c:565   break;
  BSR          .L008021B9, R0

.L008021E3:
// p_switch.c:570   if (EV_DoDoor(line, vld_close))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221E
// p_switch.c:571   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221E:
// p_switch.c:572   break;
  BSR          .L008021B9, R0

.L008021E4:
// p_switch.c:576   if (EV_DoCeiling(line,lowerToFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoCeiling, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080221F
// p_switch.c:577   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080221F:
// p_switch.c:578   break;
  BSR          .L008021B9, R0

.L008021E5:
// p_switch.c:582   if (EV_DoFloor(line,lowerFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802220
// p_switch.c:583   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802220:
// p_switch.c:584   break;
  BSR          .L008021B9, R0

.L008021E6:
// p_switch.c:588   if (EV_DoFloor(line, lowerFloorToLowest))
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802221
// p_switch.c:589   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802221:
// p_switch.c:590   break;
  BSR          .L008021B9, R0

.L008021E7:
// p_switch.c:594   if (EV_DoDoor(line, vld_open))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802222
// p_switch.c:595   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802222:
// p_switch.c:596   break;
  BSR          .L008021B9, R0

.L008021E8:
// p_switch.c:600   if (EV_DoPlat(line, downWaitUpStay, 1))
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 1, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802223
// p_switch.c:601   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802223:
// p_switch.c:602   break;
  BSR          .L008021B9, R0

.L008021E9:
// p_switch.c:606   if (EV_DoDoor(line, vld_normal))
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802224
// p_switch.c:607   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802224:
// p_switch.c:608   break;
  BSR          .L008021B9, R0

.L008021EA:
// p_switch.c:612   if (EV_DoFloor(line, raiseFloor))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802225
// p_switch.c:613   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802225:
// p_switch.c:614   break;
  BSR          .L008021B9, R0

.L008021EB:
// p_switch.c:618   if (EV_DoPlat(line, raiseAndChange, 24))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 24, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802226
// p_switch.c:619   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802226:
// p_switch.c:620   break;
  BSR          .L008021B9, R0

.L008021EC:
// p_switch.c:624   if (EV_DoPlat(line, raiseAndChange, 32))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 32, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802227
// p_switch.c:625   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802227:
// p_switch.c:626   break;
  BSR          .L008021B9, R0

.L008021ED:
// p_switch.c:630   if (EV_DoFloor(line, raiseFloorCrush))
  ADD          RQ9, 0, RQ10
  ADD          R0, 9, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802228
// p_switch.c:631   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802228:
// p_switch.c:632   break;
  BSR          .L008021B9, R0

.L008021EE:
// p_switch.c:636   if (EV_DoPlat(line,raiseToNearestAndChange, 0))
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802229
// p_switch.c:637   P_ChangeSwitchTexture(line, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802229:
// p_switch.c:638   break;
  BSR          .L008021B9, R0

.L008021EF:
// p_switch.c:642   if (EV_DoFloor(line, raiseFloorToNearest))
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222A
// p_switch.c:643   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222A:
// p_switch.c:644   break;
  BSR          .L008021B9, R0

.L008021F0:
// p_switch.c:648   if (EV_DoFloor(line,turboLower))
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222B
// p_switch.c:649   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222B:
// p_switch.c:650   break;
  BSR          .L008021B9, R0

.L008021F1:
// p_switch.c:654   if (EV_DoDoor (line,blazeRaise))
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222C
// p_switch.c:655   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222C:
// p_switch.c:656   break;
  BSR          .L008021B9, R0

.L008021F2:
// p_switch.c:660   if (EV_DoDoor (line,blazeOpen))
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222D
// p_switch.c:661   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222D:
// p_switch.c:662   break;
  BSR          .L008021B9, R0

.L008021F3:
// p_switch.c:666   if (EV_DoDoor (line,blazeClose))
  ADD          RQ9, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222E
// p_switch.c:667   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222E:
// p_switch.c:668   break;
  BSR          .L008021B9, R0

.L008021F4:
// p_switch.c:672   if (EV_DoPlat(line,blazeDWUS,0))
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080222F
// p_switch.c:673   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L0080222F:
// p_switch.c:674   break;
  BSR          .L008021B9, R0

.L008021F5:
// p_switch.c:678   if (EV_DoFloor(line,raiseFloorTurbo))
  ADD          RQ9, 0, RQ10
  ADD          R0, 10, RD11
  BSR          EV_DoFloor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802230
// p_switch.c:679   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802230:
// p_switch.c:680   break;
  BSR          .L008021B9, R0

.L008021F6:

.L008021F7:

.L008021F8:
// p_switch.c:688   if (EV_DoLockedDoor (line,blazeOpen,thing))
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  ADD          RQ21, 0, RQ12
  BSR          EV_DoLockedDoor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00802231
// p_switch.c:689   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1

.L00802231:
// p_switch.c:690   break;
  BSR          .L008021B9, R0

.L008021F9:
// p_switch.c:694   EV_LightTurnOn(line,255);
  ADD          RQ9, 0, RQ10
  ADD          R0, 255, RD11
  BSR          EV_LightTurnOn, R1
// p_switch.c:695   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_switch.c:696   break;
  BSR          .L008021B9, R0

.L008021FA:
// p_switch.c:700   EV_LightTurnOn(line,35);
  ADD          RQ9, 0, RQ10
  ADD          R0, 35, RD11
  BSR          EV_LightTurnOn, R1
// p_switch.c:701   P_ChangeSwitchTexture(line,1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_ChangeSwitchTexture, R1
// p_switch.c:702   break;
  BSR          .L008021B9, R0

.L008021FB:
// p_switch.c:704   default:
  MOV.W        (RQ9, 36), RQ18
  BRGE.L       R0, RQ18, .L00802232
  MOV.W        (RQ9, 38), RQ18
  BRGE.L       R0, RQ18, .L00802232

.L00802233:
// p_switch.c:706   __debugbreak();

P_UseSpecialLine.debugbreak_L02E3:
  BRK          739

.L00802232:
// p_switch.c:707   break;

.L008021B9:
// p_switch.c:711   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01BBC, R0

.L00C00806:
  ADD          R0, 0, RQ10

.L00C01BBC:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_Ticker:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// am_map.c:813   if (!automapactive)
  MOV.L        automapactive, RD13
  BREQ.L       R0, RD13, .L00C01BC3
// am_map.c:816   amclock++;
  MOV.L        TU7A00C41B/amclock, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, TU7A00C41B/amclock
// am_map.c:818   if (followplayer)
  MOV.L        TU7A00C41B/followplayer, RD13
  BREQ.L       R0, RD13, .L008017EE
// am_map.c:819   AM_doFollowPlayer();
  BSR          AM_doFollowPlayer, R1

.L008017EE:
// am_map.c:822   if (ftom_zoommul != FRACUNIT)
  MOV.L        TU7A00C41B/ftom_zoommul, RD13
  LUI          16, RD12
  BREQ.Q       RD12, RD13, .L008017EF
// am_map.c:823   AM_changeWindowScale();
  BSR          AM_changeWindowScale, R1

.L008017EF:
// am_map.c:826   if (m_paninc.x || m_paninc.y)
  MOV          TU7A00C41B/m_paninc, RQ13
  MOV.L        (RQ13, 0), RQ18
  BRNE.L       R0, RQ18, .L008017F1
  MOV          TU7A00C41B/m_paninc, RQ13
  MOV.L        (RQ13, 4), RQ18
  BRNE.L       R0, RQ18, .L008017F1
  BSR          .L008017F0, R0

.L008017F1:
// am_map.c:827   AM_changeWindowLoc();
  BSR          AM_changeWindowLoc, R1

.L008017F0:

.L00C01BC3:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

G_BeginRecording:
  ADD          R2, -24, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -296, R2
// g_game.c:1574   demo_p = demobuffer;
  MOV.Q        demobuffer, RQ13
// g_game.c:1576   *demo_p++ = VERSION;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  ADD          R0, 110, RD12
  MOVU.B       RD12, (RQ18, 0)
// g_game.c:1577   *demo_p++ = gameskill;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        gameskill, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1578   *demo_p++ = gameepisode;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        gameepisode, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1579   *demo_p++ = gamemap;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        gamemap, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1580   *demo_p++ = deathmatch;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        deathmatch, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1581   *demo_p++ = respawnparm;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        respawnparm, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1582   *demo_p++ = fastparm;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        fastparm, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1583   *demo_p++ = nomonsters;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.L        nomonsters, RD11
  MOVU.B       RD11, (RQ18, 0)
// g_game.c:1584   *demo_p++ = consoleplayer;
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, demo_p
  MOV.L        consoleplayer, RD13
  MOVU.B       RD13, (RQ18, 0)
// g_game.c:1586   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L00801619:
// g_game.c:1587   *demo_p++ = playeringame[i]; 
  MOV          playeringame, RQ13
  MOV.L        (RQ13, RD9), RQ8
  MOV.Q        demo_p, RQ13
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, demo_p
  MOVU.B       RQ8, (RQ18, 0)
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L00801619

.L0080161B:

.L00C01BC4:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 24, R2
  JSR          R1, 0, R0
  .balign 4

G_PlayerFinishLevel:
// g_game.c:805   p = &players[player];
  MOV          players, RQ13
  ADD          R0, 320, R5
  MUL.L        RD10, R5, RQ12
  ADD          RQ13, RQ12, RQ12
// g_game.c:807   memset (p->powers, 0, sizeof (p->powers));
  ADD          RQ12, 48, RQ11
  MOV.Q        RQ0, (RQ11, 0)
  MOV.Q        RQ0, (RQ11, 8)
  MOV.Q        RQ0, (RQ11, 16)
// g_game.c:808   memset (p->cards, 0, sizeof (p->cards));
  ADD          RQ12, 72, RQ13
  MOV.Q        RQ0, (RQ13, 0)
  MOV.Q        RQ0, (RQ13, 8)
  MOV.Q        RQ0, (RQ13, 16)
// g_game.c:809   p->mo->flags &= ~MF_SHADOW;		// cancel invisibility
  MOV.Q        (RQ12, 0), RQ13
  MOV.L        (RQ13, 160), RQ17
  AND          RQ17, 0xFFFFFFFFFFFBFFFF, RQ16
  MOV.L        RQ16, (RQ13, 160)
// g_game.c:810   p->extralight = 0;			// cancel gun flashes
  MOV.L        RD0, (RQ12, 248)
// g_game.c:811   p->fixedcolormap = 0;		// cancel ir gogles
  MOV.L        RD0, (RQ12, 252)
// g_game.c:812   p->damagecount = 0;			// no palette changes
  MOV.L        RD0, (RQ12, 232)
// g_game.c:813   p->bonuscount = 0;
  MOV.L        RD0, (RQ12, 236)

.L00C01BC5:
  JSR          R1, 0, R0

P_SlideMove:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
// p_map.c:740   slidemo = mo;
  MOV.Q        RQ9, slidemo
// p_map.c:741   hitcount = 0;
  MOV.L        RD0, (R2, 148)
// p_map.c:743   retry:

.L00801D6E:
  MOV.L        (R2, 148), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 148)
  BRNE.Q       3, RD27, .L00801D6F
// p_map.c:745   goto stairstep;		// don't loop forever
  BSR          .L00801D70, R0

.L00801D6F:
// p_map.c:749   if (mo->momx > 0)
  MOV.L        (RQ9, 112), RQ18
  BRLE.L       R0, RQ18, .L00801D71
// p_map.c:750   {
  MOV.L        (RQ9, 24), RQ18
  MOV.L        (RQ9, 104), RQ8
  ADDS.L       RQ18, RQ8, RD20
// p_map.c:752   trailx = mo->x - mo->radius;
  SUBS.L       RQ18, RQ8, RD27
  MOV.L        RD27, (R2, 164)
  BSR          .L00801D72, R0

.L00801D71:
// p_map.c:755   {
  MOV.L        (RQ9, 24), RQ18
  MOV.L        (RQ9, 104), RQ8
  SUBS.L       RQ18, RQ8, RD20
// p_map.c:757   trailx = mo->x + mo->radius;
  ADDS.L       RQ18, RQ8, RD27
  MOV.L        RD27, (R2, 164)

.L00801D72:
// p_map.c:760   if (mo->momy > 0)
  MOV.L        (RQ9, 116), RQ18
  BRLE.L       R0, RQ18, .L00801D73
// p_map.c:761   {
  MOV.L        (RQ9, 28), RQ8
  MOV.L        (RQ9, 104), RQ18
  ADDS.L       RQ8, RQ18, RD21
// p_map.c:763   traily = mo->y - mo->radius;
  SUBS.L       RQ8, RQ18, RD27
  MOV.L        RD27, (R2, 160)
  BSR          .L00801D74, R0

.L00801D73:
// p_map.c:766   {
  MOV.L        (RQ9, 28), RQ8
  MOV.L        (RQ9, 104), RQ18
  SUBS.L       RQ8, RQ18, RD21
// p_map.c:768   traily = mo->y + mo->radius;
  ADDS.L       RQ8, RQ18, RD27
  MOV.L        RD27, (R2, 160)

.L00801D74:
// p_map.c:771   bestslidefrac = FRACUNIT+1;
  ADD          R0, 0x00010001, RD27
  MOV.L        RD27, bestslidefrac
// p_map.c:773   P_PathTraverse ( leadx, leady, leadx+mo->momx, leady+mo->momy,
  MOV.L        (RQ9, 116), RQ8
  ADDS.L       RD21, RQ8, RQ18
  MOV.L        (RQ9, 112), RQ8
  ADDS.L       RD20, RQ8, RQ23
  MOV          PTR_SlideTraverse, RQ27
  ADD          RQ27, 0, RQ26
  ADD          RD20, 0, RD10
  ADD          RD21, 0, RD11
  ADD          RQ23, 0, RD12
  ADD          RQ18, 0, RD13
  ADD          R0, 1, RD14
  ADD          RQ26, 0, RQ15
  BSR          P_PathTraverse, R1
// p_map.c:775   P_PathTraverse ( trailx, leady, trailx+mo->momx, leady+mo->momy,
  MOV.L        (RQ9, 116), RQ18
  ADDS.L       RD21, RQ18, RQ8
  MOV.L        (RQ9, 112), RQ23
  MOV.L        (R2, 164), RD27
  ADDS.L       RD27, RQ23, RQ18
  MOV          PTR_SlideTraverse, RQ26
  ADD          RD27, 0, RD10
  ADD          RD21, 0, RD11
  ADD          RQ18, 0, RD12
  ADDS.L       RQ8, 0, RD13
  ADD          R0, 1, RD14
  ADD          RQ26, 0, RQ15
  BSR          P_PathTraverse, R1
// p_map.c:777   P_PathTraverse ( leadx, traily, leadx+mo->momx, traily+mo->momy,
  MOV.L        (RQ9, 116), RQ18
  MOV.L        (R2, 160), RD25
  ADDS.L       RD25, RQ18, RQ8
  MOV.L        (RQ9, 112), RQ23
  ADDS.L       RD20, RQ23, RQ18
  MOV          PTR_SlideTraverse, RQ26
  ADD          RD20, 0, RD10
  ADD          RD25, 0, RD11
  ADD          RQ18, 0, RD12
  ADDS.L       RQ8, 0, RD13
  ADD          R0, 1, RD14
  ADD          RQ26, 0, RQ15
  BSR          P_PathTraverse, R1
// p_map.c:781   if (bestslidefrac == FRACUNIT+1)
  MOV.L        bestslidefrac, RD13
  ADD          R0, 0x00010001, RD12
  BRNE.Q       RD12, RD13, .L00801D75
// p_map.c:784   stairstep:

.L00801D70:
  MOV.L        (RQ9, 28), RQ18
  MOV.L        (RQ9, 116), RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.L        (RQ9, 24), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          P_TryMove, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00801D76
// p_map.c:786   P_TryMove (mo, mo->x + mo->momx, mo->y);
  MOV.L        (RQ9, 28), RQ23
  MOV.L        (RQ9, 24), RQ18
  MOV.L        (RQ9, 112), RQ8
  ADDS.L       RQ18, RQ8, RQ22
  ADD          RQ9, 0, RQ10
  ADD          RQ22, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          P_TryMove, R1

.L00801D76:
// p_map.c:787   return;
  BSR          .L00C01BCB, R0

.L00801D75:
// p_map.c:791   bestslidefrac -= 0x800;	
  MOV.L        bestslidefrac, RD27
  ADDS.L       RD27, -2048, RD27
// p_map.c:792   if (bestslidefrac > 0)
  MOV.L        RD27, bestslidefrac
  BRLE.L       R0, RD27, .L00801D77
// p_map.c:793   {
  MOV.L        (RQ9, 112), RQ18
  ADD          RQ18, 0, RD10
  MOV.L        bestslidefrac, RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 156)
// p_map.c:795   newy = FixedMul (mo->momy, bestslidefrac);
  MOV.L        (RQ9, 116), RQ8
  ADDS.L       RQ8, 0, RD10
  MOV.L        bestslidefrac, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD27
  MOV.L        (RQ9, 28), RQ23
  ADDS.L       RQ23, RD27, RQ22
  MOV.L        RD27, (R2, 152)
  MOV.L        (RQ9, 24), RQ18
  MOV.L        (R2, 156), RD26
  ADDS.L       RQ18, RD26, RQ8
  ADD          RQ9, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ22, 0, RD12
  BSR          P_TryMove, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00801D78
// p_map.c:798   goto stairstep;
  BSR          .L00801D70, R0

.L00801D78:

.L00801D77:
// p_map.c:803   bestslidefrac = FRACUNIT-(bestslidefrac+0x800);
  MOV.L        bestslidefrac, RD27
  ADDS.L       RD27, 2048, RQ22
  LUI          16, RD26
  SUBS.L       RD26, RQ22, RD27
// p_map.c:805   if (bestslidefrac > FRACUNIT)
  MOV.L        RD27, bestslidefrac
  BRLE.L       RD26, RD27, .L00801D79
// p_map.c:806   bestslidefrac = FRACUNIT;
  LUI          16, RD27
  MOV.L        RD27, bestslidefrac

.L00801D79:
// p_map.c:808   if (bestslidefrac <= 0)
  MOV.L        bestslidefrac, RD27
  BRLE.L       R0, RD27, .L00C01BCB
// p_map.c:811   tmxmove = FixedMul (mo->momx, bestslidefrac);
  MOV.L        (RQ9, 112), RQ18
  ADD          RQ18, 0, RD10
  MOV.L        bestslidefrac, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, tmxmove
// p_map.c:812   tmymove = FixedMul (mo->momy, bestslidefrac);
  MOV.L        (RQ9, 116), RQ8
  ADDS.L       RQ8, 0, RD10
  MOV.L        bestslidefrac, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, tmymove
// p_map.c:814   P_HitSlideLine (bestslideline);	// clip the moves
  MOV.Q        bestslideline, RQ10
  BSR          P_HitSlideLine, R1
// p_map.c:816   mo->momx = tmxmove;
  MOV.L        tmxmove, RD27
  MOV.L        RD27, (RQ9, 112)
// p_map.c:817   mo->momy = tmymove;
  MOV.L        tmymove, RD26
  MOV.L        RD26, (RQ9, 116)
// p_map.c:819   if (!P_TryMove (mo, mo->x+tmxmove, mo->y+tmymove))
  MOV.L        (RQ9, 28), RQ23
  ADDS.L       RQ23, RD26, RQ22
  MOV.L        (RQ9, 24), RQ18
  ADDS.L       RQ18, RD27, RQ8
  ADD          RQ9, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ22, 0, RD12
  BSR          P_TryMove, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00801D7A
// p_map.c:820   {
  BSR          .L00801D6E, R0

.L00801D7A:

.L00C01BCB:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

__seek:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD18
  MOV.Q        RQ11, (R2, 80)
  MOV.L        RD12, (R2, 76)
  ADD          R0, 3, RD8
  ADD          R0, 256, RD23
// pdpc201/btshx_supa.c:359   
  BRGE.L       3, RD18, .L00800FA4
// pdpc201/btshx_supa.c:360   

__seek.debugbreak_L02F3:
  BRK          755

.L00800FA4:
  BRLT.L       256, RD18, .L00800FA5
// pdpc201/btshx_supa.c:362   

__seek.debugbreak_L02F4:
  BRK          756

.L00800FA5:
  MOV          btshx_tk_handles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
// pdpc201/btshx_supa.c:364   
  BRNE.Q       R0, RQ9, .L00800FA6
// pdpc201/btshx_supa.c:365   

__seek.debugbreak_L02F5:
  BRK          757

.L00800FA6:
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  MOV.L        (R2, 76), RD12
  BSR          tk_fseek, R1

.L00C01BE0:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_vfile_init:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 1, RD18
// tk_core/tk_vfile.c:227   
  MOV.L        TU61F874B9/tk_vf_init, RD13
  BREQ.Q       1, RD13, .L00C00820
// tk_core/tk_vfile.c:229   
  MOV.L        RD18, TU61F874B9/tk_vf_init
// tk_core/tk_vfile.c:231   
  MOV          .L00C01BEA, RQ10
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:269   
  BSR          tk_sysc_init, R1
// tk_core/tk_vfile.c:270   
  BSR          tk_mount_sysc, R1
// tk_core/tk_vfile.c:273   
  MOV          .L00C01BEB, RQ10
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:275   
  ADD          R0, 1, RD10
  BSR          .L00C01BE9, R0

.L00C00820:
  ADD          R0, 0, RQ10

.L00C01BE9:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

R_DrawPSprite:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -456, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 120)
// r_things.c:911   vissprite_t		avis;
// r_things.c:915   if ( (unsigned)psp->state->sprite >= numsprites)
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 0), RQ18
  ADDU.L       RQ18, R0, RQ9
  MOV.L        numsprites, RD26
  BRLTU.L      RD26, RQ9, .L00802804
// r_things.c:916   I_Error ("R_ProjectSprite: invalid sprite number %i ",
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 0), RQ18
  MOV          .L00C01BF2, RQ10
  ADD          RQ18, 0, RD11
  BSR          I_Error, R1

.L00802804:
// r_things.c:919   sprdef = &sprites[psp->state->sprite];
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 0), RQ18
  MOV.Q        sprites, RQ26
  SHAD.L       RQ18, 4, RQ25
  ADD          RQ26, RQ25, RQ25
// r_things.c:921   if(sprdef->numframes<=0)
  MOV.L        (RQ25, 0), RQ9
  MOV.Q        RQ25, (R2, 144)
  BRLE.L       R0, RQ9, .L00C01BF1
// r_things.c:925   if ( (psp->state->frame & FF_FRAMEMASK)  >= sprdef->numframes)
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 4), RQ18
  AND          RQ18, 32767, RQ9
  MOV.Q        (R2, 144), RQ26
  MOV.L        (RQ26, 0), RQ18
  BRLT.L       RQ18, RQ9, .L00802805
// r_things.c:926   I_Error ("R_ProjectSprite: invalid sprite frame %i : %i ",
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (RQ23, 0), RQ9
  MOV          .L00C01BF3, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          I_Error, R1

.L00802805:
// r_things.c:929   sprframe = &sprdef->spriteframes[ psp->state->frame & FF_FRAMEMASK ];
  MOV.Q        (R2, 144), RQ27
  MOV.Q        (RQ27, 8), RQ23
  MOV.Q        (R2, 168), RQ26
  MOV.Q        (RQ26, 0), RQ25
  MOV.L        (RQ25, 4), RQ18
  AND          RQ18, 32767, RQ9
  ADD          R0, 28, R5
  MUL.L        RQ9, R5, RQ24
  ADD          RQ23, RQ24, RQ24
// r_things.c:931   lump = sprframe->lump[0];
  MOV.W        (RQ24, 4), RD20
// r_things.c:932   flip = (boolean)sprframe->flip[0];
  ADD          RQ24, 20, RQ23
  MOV.Q        RQ24, (R2, 136)
  MOVU.B       (RQ23, 0), RQ18
  MOV.L        RD18, (R2, 132)
// r_things.c:935   tx = psp->sx-160*FRACUNIT;
  MOV.L        (RQ26, 12), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFF600000, RD19
  MOV.L        RD19, (R2, 164)
// r_things.c:937   R_CheckSpriteLump(lump);
  ADD          RD20, 0, RD10
  BSR          R_CheckSpriteLump, R1
// r_things.c:939   tx -= spriteoffset[lump];	
  MOV.Q        spriteoffset, RQ27
  MOV.L        (RQ27, RD20), RQ18
  SUBS.L       RD19, RQ18, RD19
  MOV.L        RD19, (R2, 164)
// r_things.c:940   x1 = (centerxfrac + FixedMul (tx,pspritescale) ) >>FRACBITS;
  ADD          RD19, 0, RD10
  MOV.L        pspritescale, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        centerxfrac, RD27
  ADDS.L       RD27, RQ9, RQ18
  SHAR         RQ18, 16, RD27
// r_things.c:943   if (x1 > viewwidth)
  MOV.L        RD27, (R2, 160)
  MOV.L        viewwidth, RD26
  BRGT.L       RD26, RD27, .L00C01BF1
// r_things.c:946   tx +=  spritewidth[lump];
  MOV.Q        spritewidth, RQ27
  MOV.L        (RQ27, RD20), RQ9
  MOV.L        (R2, 164), RD27
  ADDS.L       RD27, RQ9, RD27
  MOV.L        RD27, (R2, 164)
// r_things.c:947   x2 = ((centerxfrac + FixedMul (tx, pspritescale) ) >>FRACBITS) - 1;
  ADD          RD27, 0, RD10
  MOV.L        pspritescale, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        centerxfrac, RD26
  ADDS.L       RD26, RQ18, RQ9
  SHAR         RQ9, 16, RQ18
  ADDS.L       RQ18, -1, RD26
// r_things.c:950   if (x2 < 0)
  MOV.L        RD26, (R2, 156)
  BRLT.L       R0, RD26, .L00C01BF1
// r_things.c:954   vis = &avis;
  ADD          R2, 176, RQ27
  ADD          RQ27, 0, RQ8
// r_things.c:955   vis->mobjflags = 0;
  MOV.L        RD0, (RQ8, 72)
// r_things.c:956   vis->texturemid =
  MOV.Q        (R2, 168), RQ26
  MOV.L        (RQ26, 16), RQ18
  MOV.Q        spritetopoffset, RQ25
  MOV.L        (RQ25, RD20), RQ9
  SUBS.L       RQ18, RQ9, RQ22
  LUI          1608, R5
  SUBS.L       R5, RQ22, RQ18
  MOV.L        RQ18, (RQ8, 56)
// r_things.c:959   vis->x1 = x1 < 0 ? 0 : x1;
  MOV.L        (R2, 160), RD25
  BRGE.L       R0, RD25, .L00802806
  ADD          R0, 0, RQ9
  BSR          .L00802807, R0

.L00802806:
  MOV.L        (R2, 160), RD9

.L00802807:
  MOV.L        RQ9, (RQ8, 16)
// r_things.c:960   vis->x2 = x2 >= viewwidth ? viewwidth-1 : x2;	
  MOV.L        (R2, 156), RD27
  MOV.L        viewwidth, RD26
  BRLT.L       RD26, RD27, .L00802808
  MOV.L        viewwidth, RD27
  ADDS.L       RD27, -1, RQ18
  ADD          RQ18, 0, RQ22
  BSR          .L00802809, R0

.L00802808:
  MOV.L        (R2, 156), RD22

.L00802809:
  MOV.L        RQ22, (RQ8, 20)
// r_things.c:961   vis->scale	= pspritescale<<detailshift;
  MOV.L        pspritescale, RD27
  MOV.L        detailshift, RD26
  SHAD.L       RD27, RD26, RQ9
  MOV.L        RQ9, (RQ8, 48)
// r_things.c:962   vis->tz		= 0;
  MOV.L        RD0, (RQ8, 24)
// r_things.c:964   if (flip)
  MOV.L        (R2, 132), RD27
  BREQ.L       R0, RD27, .L0080280A
// r_things.c:965   {
  MOV.L        pspriteiscale, RD27
  SUBS.L       R0, RD27, RQ22
  MOV.L        RQ22, (RQ8, 52)
// r_things.c:967   vis->startfrac = spritewidth[lump]-1;
  MOV.Q        spritewidth, RQ27
  MOV.L        (RQ27, RD20), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV.L        RQ9, (RQ8, 44)
  BSR          .L0080280B, R0

.L0080280A:
// r_things.c:970   {
  MOV.L        pspriteiscale, RD27
  MOV.L        RD27, (RQ8, 52)
// r_things.c:972   vis->startfrac = 0;
  MOV.L        RD0, (RQ8, 44)

.L0080280B:
// r_things.c:975   if (vis->x1 > x1)
  MOV.L        (RQ8, 16), RQ22
  MOV.L        (R2, 160), RD27
  BRLE.L       RD27, RQ22, .L0080280C
// r_things.c:976   vis->startfrac += vis->xiscale*(vis->x1-x1);
  MOV.L        (RQ8, 44), RQ18
  MOV.L        (RQ8, 52), RQ9
  MOV.L        (RQ8, 16), RQ22
  MOV.L        (R2, 160), RD26
  SUBS.L       RQ22, RD26, RQ27
  MULS.L       RQ9, RQ27, RQ22
  ADDS.L       RQ18, RQ22, RQ27
  MOV.L        RQ27, (RQ8, 44)

.L0080280C:
// r_things.c:978   vis->patch = lump;
  MOV.L        RD20, (RQ8, 60)
// r_things.c:980   if (viewplayer->powers[pw_invisibility] > 4*32
  MOV.Q        viewplayer, RQ27
  ADD          RQ27, 48, RQ23
  MOV.L        (RQ23, 8), RQ18
  BRGT.L       128, RQ18, .L0080280E
  MOV.Q        viewplayer, RQ27
  MOV.L        (RQ27, 56), RQ22
  ADD          R0, 8, RD27
  BTSTN.L      RD27, RQ22, .L0080280E
  BSR          .L0080280D, R0

.L0080280E:
// r_things.c:984   vis->colormap = NULL;
  MOV.Q        RQ0, (RQ8, 64)
  BSR          .L00802810, R0

.L0080280D:
  MOV.Q        fixedcolormap, RQ27
  BREQ.Q       R0, RQ27, .L00802811
// r_things.c:987   {
  ADD          RD20, 0, RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L00802812
// r_things.c:990   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L00802813, R0

.L00802812:
// r_things.c:995   vis->colormap = fixedcolormap;
  MOV.Q        fixedcolormap, RQ27
  MOV.Q        RQ27, (RQ8, 64)

.L00802813:
  BSR          .L00802814, R0

.L00802811:
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.L        (RQ23, 4), RQ18
  LUI          8, RD26
  BTST.L       RD26, RQ18, .L00802815
// r_things.c:999   {
  ADD          RD20, 0, RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L00802816
// r_things.c:1002   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L00802817, R0

.L00802816:
// r_things.c:1007   vis->colormap = colormaps;
  MOV.Q        colormaps, RQ27
  MOV.Q        RQ27, (RQ8, 64)

.L00802817:
  BSR          .L00802818, R0

.L00802815:
// r_things.c:1011   {
  ADD          RD20, 0, RD10
  MOV.L        lightlevel, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L00802819
// r_things.c:1014   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L0080281A, R0

.L00802819:
// r_things.c:1019   vis->colormap = spritelights[MAXLIGHTSCALE-1];
  MOV.Q        spritelights, RQ27
  MOV.Q        (RQ27, 376), RQ26
  MOV.Q        RQ26, (RQ8, 64)

.L0080281A:

.L00802818:

.L00802814:

.L00802810:
// r_things.c:1023   R_DrawVisSprite (vis, vis->x1, vis->x2);
  MOV.L        (RQ8, 20), RQ22
  MOV.L        (RQ8, 16), RQ11
  ADD          RQ8, 0, RQ10
  ADD          RQ22, 0, RD12
  BSR          R_DrawVisSprite, R1

.L00C01BF1:
  ADD          R2, 456, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

R_Init:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -312, R2
  ADD          R0, 3, RD9
  ADD          R0, 1, RD23
// r_main.c:848   v0=3;
  ADD          RD9, 0, RD18
// r_main.c:849   v1=v0+1;
  ADDS.L       RD18, 1, RD8
// r_main.c:852   R_InitData ();
  BSR          R_InitData, R1
// r_main.c:854   R_InitPointToAngle ();
  BSR          R_InitPointToAngle, R1
// r_main.c:856   R_InitTables ();
  BSR          R_InitTables, R1
// r_main.c:860   R_SetViewSize (screenblocks, detailLevel);
  MOV.L        screenblocks, RD10
  MOV.L        detailLevel, RD11
  BSR          R_SetViewSize, R1
// r_main.c:861   R_InitPlanes ();
  BSR          R_InitPlanes, R1
// r_main.c:863   R_InitLightTables ();
  BSR          R_InitLightTables, R1
// r_main.c:865   R_InitSkyMap ();
  BSR          R_InitSkyMap, R1
// r_main.c:867   R_InitTranslationTables ();
  BSR          R_InitTranslationTables, R1
// r_main.c:870   framecount = 0;
  MOV.L        RD0, framecount

.L00C01BF9:
  ADD          R2, 312, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_fgetc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -408, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// tk_vf_sysc.c:272   
// tk_vf_sysc.c:276   
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 88), RQ13
  BSR          tk_sysc_fread, R1
  ADD          RQ10, 0, RD18
// tk_vf_sysc.c:277   
  BRGT.L       R0, RD18, .L00800B34
// tk_vf_sysc.c:278   
  ADD          R0, -1, RD10
  BSR          .L00C01BFF, R0

.L00800B34:
// tk_vf_sysc.c:279   
  ADD          R2, 96, RQ13
  MOVU.B       (RQ13, 0), RQ9
  ADDS.L       RQ9, 0, RD10

.L00C01BFF:
  ADD          R2, 408, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawSpan:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -312, R2
// r_draw.c:1077   position = ((ds_xfrac<<10)&0xffff0000) | ((ds_yfrac>>6)&0xffff);
  MOV.L        ds_xfrac, RD13
  SHAD.L       RD13, 10, RQ12
  ADDU.L       RQ12, R0, RQ13
  ADD          R0, 0x00000000FFFF0000, RD10
  AND          RQ13, RD10, RQ11
  MOV.L        ds_yfrac, RD17
  SHLR.Q       RD17, 6, RQ12
  AND          RQ12, 0x0000FFFF, RQ12
  ADDU.L       RQ12, R0, RQ13
  OR           RQ11, RQ13, RD18
// r_draw.c:1078   step = ((ds_xstep<<10)&0xffff0000) | ((ds_ystep>>6)&0xffff);
  MOV.L        ds_xstep, RD17
  SHAD.L       RD17, 10, RQ12
  ADDU.L       RQ12, R0, RQ13
  AND          RQ13, RD10, RQ11
  MOV.L        ds_ystep, RD17
  SHLR.Q       RD17, 6, RQ12
  AND          RQ12, 0x0000FFFF, RQ12
  ADDU.L       RQ12, R0, RQ13
  OR           RQ11, RQ13, RD20
// r_draw.c:1080   source = ds_source;
  MOV.Q        ds_source, RQ17
  ADD          RQ17, 0, RQ16
  MOV.Q        RQ16, (R2, 56)
// r_draw.c:1081   colormap = ds_colormap;
  MOV.Q        ds_colormap, RQ17
  ADD          RQ17, 0, RQ15
  MOV.Q        RQ15, (R2, 48)
// r_draw.c:1082   dest = ylookup[ds_y] + columnofs[ds_x1];
  MOV          ylookup, RQ17
  MOV.L        ds_y, RD14
  MOV.Q        (RQ17, RD14), RQ31
  MOV          columnofs, RQ17
  MOV.L        ds_x1, RD14
  MOV.L        (RQ17, RD14), RQ12
  LEA.W        RQ31, RQ12, RQ23
  MOV.Q        RQ31, (R2, 8)
// r_draw.c:1083   count = ds_x2 - ds_x1 + 1;
  MOV.L        ds_x2, RD17
  SUBS.L       RD17, RD14, RQ11
  ADDS.L       RQ11, 1, RD17
  ADDU.L       RD17, R0, RD17
  MOV.L        RD17, (R2, 44)
  MOV.Q        RQ11, (R2, 24)
// r_draw.c:1085   while (count >= 4)
  BSR          .L008025E5, R0

.L008025E3:
// r_draw.c:1121   ytemp = position>>4;
  SHLR         RD18, 4, RD9
// r_draw.c:1122   ytemp = ytemp & 4032;
  LDIZ         4032, RD13
  AND          RD9, RD13, RD9
// r_draw.c:1123   xtemp = position>>26;
  SHLR         RD18, 26, RD22
// r_draw.c:1124   spot = xtemp | ytemp;
  OR           RD22, RD9, RD21
// r_draw.c:1125   position += step;
  ADDU.L       RD18, RD20, RD18
// r_draw.c:1127   value = source[spot];
  MOV.Q        (R2, 56), RQ12
  MOVU.B       (RQ12, RD21), RD8
// r_draw.c:1128   ytemp = position>>4;
  SHLR         RD18, 4, RD9
// r_draw.c:1129   ytemp = ytemp & 4032;
  AND          RD9, RD13, RD9
// r_draw.c:1130   value = colormap[value];
  MOV.Q        (R2, 48), RQ11
  MOVU.W       (RQ11, RD8), RD8
// r_draw.c:1131   xtemp = position>>26;
  SHLR         RD18, 26, RD22
// r_draw.c:1132   spot = xtemp | ytemp;
  OR           RD22, RD9, RD21
// r_draw.c:1133   dest[0] = value;
  MOVU.W       RD8, (RQ23, 0)
// r_draw.c:1134   position += step;
  ADDU.L       RD18, RD20, RD18
// r_draw.c:1136   value = source[spot];
  MOVU.B       (RQ12, RD21), RD8
// r_draw.c:1137   ytemp = position>>4;
  SHLR         RD18, 4, RD9
// r_draw.c:1138   ytemp = ytemp & 4032;
  AND          RD9, RD13, RD9
// r_draw.c:1139   value = colormap[value];
  MOVU.W       (RQ11, RD8), RD8
// r_draw.c:1140   xtemp = position>>26;
  SHLR         RD18, 26, RD22
// r_draw.c:1141   spot = xtemp | ytemp;
  OR           RD22, RD9, RD21
// r_draw.c:1142   dest[1] = value;
  MOVU.W       RD8, (RQ23, 2)
// r_draw.c:1143   position += step;
  ADDU.L       RD18, RD20, RD18
// r_draw.c:1145   value = source[spot];
  MOVU.B       (RQ12, RD21), RD8
// r_draw.c:1146   ytemp = position>>4;
  SHLR         RD18, 4, RD9
// r_draw.c:1147   ytemp = ytemp & 4032;
  AND          RD9, RD13, RD9
// r_draw.c:1148   value = colormap[value];
  MOVU.W       (RQ11, RD8), RD8
// r_draw.c:1149   xtemp = position>>26;
  SHLR         RD18, 26, RD22
// r_draw.c:1150   spot = xtemp | ytemp;
  OR           RD22, RD9, RD21
// r_draw.c:1151   dest[2] = value;
  MOVU.W       RD8, (RQ23, 4)
// r_draw.c:1152   value = source[spot];
  MOVU.B       (RQ12, RD21), RD8
// r_draw.c:1153   position += step;
  ADDU.L       RD18, RD20, RD18
// r_draw.c:1154   value = colormap[value];
  MOVU.W       (RQ11, RD8), RD8
// r_draw.c:1155   count -= 4;
  MOVU.L       (R2, 44), RD10
  ADDS.L       RD10, -4, RD10
  ADDU.L       RD10, R0, RD10
  MOV.L        RD10, (R2, 44)
// r_draw.c:1156   dest[3] = value;
  MOVU.W       RD8, (RQ23, 6)
// r_draw.c:1157   dest += 4;
  ADD          RQ23, 8, RQ23

.L008025E5:
  MOVU.L       (R2, 44), RD13
  BRGEU.L      4, RD13, .L008025E3

.L008025E4:
// r_draw.c:1159   }
  BSR          .L008025E8, R0

.L008025E6:
// r_draw.c:1161   {
  SHLR         RD18, 4, RD9
// r_draw.c:1163   ytemp = ytemp & 4032;
  AND          RD9, 4032, RD9
// r_draw.c:1164   xtemp = position>>26;
  SHLR         RD18, 26, RD22
// r_draw.c:1165   spot = xtemp | ytemp;
  OR           RD22, RD9, RD21
// r_draw.c:1166   position += step;
  ADDU.L       RD18, RD20, RD18
// r_draw.c:1167   *dest++ = colormap[source[spot]];
  MOV.Q        (R2, 56), RQ13
  MOVU.B       (RQ13, RD21), RQ12
  MOV.Q        (R2, 48), RQ11
  MOVU.W       (RQ11, RQ12), RQ10
  ADD          RQ23, 0, RQ17
  ADD          RQ23, 2, RQ23
  MOVU.W       RQ10, (RQ17, 0)
  MOV.Q        RQ17, (R2, 8)
// r_draw.c:1168   count--;
  MOVU.L       (R2, 44), RD16
  ADDS.L       RD16, -1, RD16
  ADDU.L       RD16, R0, RD16
  ADDU.L       RD16, R0, RD16
  MOV.L        RD16, (R2, 44)

.L008025E8:
  MOVU.L       (R2, 44), RD13
  BRNE.L       R0, RD13, .L008025E6

.L008025E7:

.L00C01C05:
  ADD          R2, 312, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

WI_drawLF:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          R0, 2, RD22
// wi_stuff.c:430   {
  ADD          RD22, 0, RD23
// wi_stuff.c:434   V_DrawPatch((SCREENWIDTH - SHORT(lnames[wbs->last]->width))/2,
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 8), RQ18
  MOV.Q        TU7A00CB85/lnames, RQ21
  MOV.Q        (RQ21, RQ18), RQ8
  MOV.W        (RQ8, 0), RQ18
  ADD          R0, 320, R5
  SUBS.L       R5, RQ18, RQ9
  ADD          RQ9, 0, RQ18
  DIVS.L       RQ18, RD22, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ8, 0, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:438   y += (5*SHORT(lnames[wbs->last]->height))/4;
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 8), RQ9
  MOV.Q        TU7A00CB85/lnames, RQ21
  MOV.Q        (RQ21, RQ9), RQ8
  MOV.W        (RQ8, 2), RQ9
  ADD          R0, 5, R5
  MULS.L       RQ9, R5, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 4, RD21
  DIVS.L       RQ9, RD21, RQ9
  ADDS.L       RD23, RQ9, RD23
// wi_stuff.c:440   V_DrawPatch((SCREENWIDTH - SHORT(finished->width))/2,
  MOV.Q        TU7A00CB85/finished, RQ20
  MOV.W        (RQ20, 0), RQ18
  ADD          R0, 320, R5
  SUBS.L       R5, RQ18, RQ9
  ADD          RQ9, 0, RQ18
  DIVS.L       RQ18, RD22, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/finished, RQ13
  BSR          V_DrawPatch, R1

.L00C01C0B:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

PTR_AimTraverse:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
// p_map.c:860   if (in->isaline)
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 4), RQ18
  BREQ.L       R0, RQ18, .L00801D7B
// p_map.c:861   {
  MOV.Q        (R2, 120), RQ27
  ADD          RQ27, 8, RQ26
  MOV.Q        (RQ26, 0), RQ21
  MOV.W        (RQ21, 24), RQ18
  ADD          R0, 4, RD25
  BTST.L       RD25, RQ18, .L00C00837
// p_map.c:870   P_LineOpening (li);
  ADD          RQ21, 0, RQ10
  BSR          P_LineOpening, R1
  MOV.L        openbottom, RD27
  MOV.L        opentop, RD26
  BRGE.L       RD26, RD27, .L00C00837
// p_map.c:875   dist = FixedMul (attackrange, in->frac);
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.L        attackrange, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD22
  MOV.Q        (RQ21, 64), RQ8
  MOV.L        (RQ8, 0), RQ18
  MOV.Q        (RQ21, 72), RQ8
  MOV.L        (RQ8, 0), RQ9
  BREQ.Q       RQ9, RQ18, .L00801D7C
// p_map.c:878   {
  MOV.L        openbottom, RD27
  MOV.L        shootz, RD26
  SUBS.L       RD27, RD26, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD22, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD23
  MOV.L        bottomslope, RD27
  BRLE.L       RD27, RD23, .L00801D7D
// p_map.c:881   bottomslope = slope;
  MOV.L        RD23, bottomslope

.L00801D7D:

.L00801D7C:
  MOV.Q        (RQ21, 64), RQ8
  MOV.L        (RQ8, 4), RQ9
  MOV.Q        (RQ21, 72), RQ8
  MOV.L        (RQ8, 4), RQ18
  BREQ.Q       RQ18, RQ9, .L00801D7E
// p_map.c:885   {
  MOV.L        opentop, RD27
  MOV.L        shootz, RD26
  SUBS.L       RD27, RD26, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD22, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD23
  MOV.L        topslope, RD27
  BRGE.L       RD27, RD23, .L00801D7F
// p_map.c:888   topslope = slope;
  MOV.L        RD23, topslope

.L00801D7F:

.L00801D7E:
  MOV.L        topslope, RD27
  MOV.L        bottomslope, RD26
  BRLE.L       RD26, RD27, .L00C00837
// p_map.c:894   return true;			// shot continues
  ADD          R0, 1, RD10
  BSR          .L00C01C11, R0

.L00801D7B:
// p_map.c:898   th = in->d.thing;
  MOV.Q        (R2, 120), RQ27
  ADD          RQ27, 8, RQ26
  MOV.Q        (RQ26, 0), RQ20
// p_map.c:899   if (th == shootthing)
  MOV.Q        shootthing, RQ25
  BRNE.Q       RQ25, RQ20, .L00801D80
// p_map.c:900   return true;			// can't shoot self
  ADD          R0, 1, RD10
  BSR          .L00C01C11, R0

.L00801D80:
// p_map.c:902   if (!(th->flags&MF_SHOOTABLE))
  MOV.L        (RQ20, 160), RQ9
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ9, .L00801D81
// p_map.c:903   return true;			// corpse or something
  ADD          R0, 1, RD10
  BSR          .L00C01C11, R0

.L00801D81:
// p_map.c:906   dist = FixedMul (attackrange, in->frac);
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.L        attackrange, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD22
// p_map.c:907   thingtopslope = FixedDiv (th->z+th->height - shootz , dist);
  MOV.L        (RQ20, 32), RQ9
  MOV.L        (RQ20, 108), RQ18
  ADDS.L       RQ9, RQ18, RQ26
  MOV.L        shootz, RD25
  SUBS.L       RQ26, RD25, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD22, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD25
// p_map.c:909   if (thingtopslope < bottomslope)
  MOV.L        RD25, (R2, 116)
  MOV.L        bottomslope, RD24
  BRGE.L       RD24, RD25, .L00801D82
// p_map.c:910   return true;			// shot over the thing
  ADD          R0, 1, RD10
  BSR          .L00C01C11, R0

.L00801D82:
// p_map.c:912   thingbottomslope = FixedDiv (th->z - shootz, dist);
  MOV.L        (RQ20, 32), RQ9
  MOV.L        shootz, RD27
  SUBS.L       RQ9, RD27, RQ10
  ADD          RD22, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD27
// p_map.c:914   if (thingbottomslope > topslope)
  MOV.L        RD27, (R2, 112)
  MOV.L        topslope, RD26
  BRLE.L       RD26, RD27, .L00801D83
// p_map.c:915   return true;			// shot under the thing
  ADD          R0, 1, RD10
  BSR          .L00C01C11, R0

.L00801D83:
// p_map.c:918   if (thingtopslope > topslope)
  MOV.L        (R2, 116), RD27
  MOV.L        topslope, RD26
  BRLE.L       RD26, RD27, .L00801D84
// p_map.c:919   thingtopslope = topslope;
  MOV.L        topslope, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 116)

.L00801D84:
// p_map.c:921   if (thingbottomslope < bottomslope)
  MOV.L        (R2, 112), RD27
  MOV.L        bottomslope, RD26
  BRGE.L       RD26, RD27, .L00801D85
// p_map.c:922   thingbottomslope = bottomslope;
  MOV.L        bottomslope, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 112)

.L00801D85:
// p_map.c:924   aimslope = (thingtopslope+thingbottomslope)/2;
  MOV.L        (R2, 116), RD27
  MOV.L        (R2, 112), RD26
  ADDS.L       RD27, RD26, RQ18
  MOV.L        RQ18, aimslope
  ADD          R0, 2, RD25
  MOV.L        aimslope, RD24
  DIVS.L       RD24, RD25, RD24
  MOV.L        RD24, aimslope
// p_map.c:925   linetarget = th;
  MOV.Q        RQ20, linetarget
// p_map.c:927   return false;			// don't go any farther
  ADD          R0, 0, RD10
  BSR          .L00C01C11, R0

.L00C00837:
  ADD          R0, 0, RQ10

.L00C01C11:
  ADD          R2, 336, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_Drawer:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// wi_stuff.c:1873   {
  MOV.L        TU7A00CB85/state, RD13
  BREQ.L       R0, RD13, .L00802AD6
  MOV.L        TU7A00CB85/state, RD13
  BREQ.Q       1, RD13, .L00802AD7
  MOV.L        TU7A00CB85/state, RD13
  BREQ.Q       -1, RD13, .L00802AD8
  BSR          .L00802AD5, R0

.L00802AD6:
// wi_stuff.c:1876   case StatCount:
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00802AD9
// wi_stuff.c:1878   WI_drawDeathmatchStats();
  BSR          WI_drawDeathmatchStats, R1
  BSR          .L00802ADA, R0

.L00802AD9:
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L00802ADB
// wi_stuff.c:1880   WI_drawNetgameStats();
  BSR          WI_drawNetgameStats, R1
  BSR          .L00802ADC, R0

.L00802ADB:
// wi_stuff.c:1882   WI_drawStats();
  BSR          WI_drawStats, R1

.L00802ADC:

.L00802ADA:
// wi_stuff.c:1883   break;
  BSR          .L00802AD5, R0

.L00802AD7:
// wi_stuff.c:1885   case ShowNextLoc:
  BSR          WI_drawShowNextLoc, R1
// wi_stuff.c:1887   break;
  BSR          .L00802AD5, R0

.L00802AD8:
// wi_stuff.c:1889   case NoState:
  BSR          WI_drawNoState, R1
// wi_stuff.c:1891   break;

.L00802AD5:

.L00C01C17:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

P_AcsCheckDestroy:
// p_acspec.c:1708   if(run->status==1)
  MOV.B        (RQ10, 1065), RQ13
  BRNE.Q       1, RQ13, .L008019DB
// p_acspec.c:1709   {
  MOV.W        (RQ10, 0), RQ13
  MOV          p_acsvm_scr_term, RQ12
  ADD          R0, 1, RD11
  MOVU.B       RD11, (RQ12, RQ13)
// p_acspec.c:1711   run->map=-1;
  ADD          R0, -1, RD17
  MOV.W        RD17, (RQ10, 2)

.L008019DB:
// p_acspec.c:1715   if(run->status<0)
  MOV.B        (RQ10, 1065), RQ13
  BRGE.L       R0, RQ13, .L008019DC
// p_acspec.c:1716   {
  ADD          R0, -1, RD12
  MOV.W        RD12, (RQ10, 2)

.L008019DC:

.L00C01C18:
  JSR          R1, 0, R0
  .balign 4

vsnprintf:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -568, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ22
  ADD          RQ12, 0, RQ21
  MOV.Q        RQ13, (R2, 96)
// pdpc201/stdio.c:2260   
  ADDS.L       RQ22, 0, RQ9
  ADD          RQ21, 0, RQ10
  MOV.Q        (R2, 96), RQ11
  ADD          RQ0, 0, RQ12
  ADD          RQ8, 0, RQ13
  ADDS.L       RQ9, 0, RD14
  BSR          vvprintf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:2261   
  BRLT.L       R0, RD18, .L00800492
// pdpc201/stdio.c:2262   
  ADD          RQ8, RD18, RQ23
  MOV.B        RD0, (RQ23, 0)

.L00800492:
// pdpc201/stdio.c:2264   
  ADD          RD18, 0, RD10

.L00C01C1E:
  ADD          R2, 568, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

__init_getprocstub:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
// pdpc201/bt_libcgpa.c:130   
  BSR          _arch_gettbr, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
// pdpc201/bt_libcgpa.c:131   
  MOV.Q        (RQ23, 64), RQ18
  MOV.Q        RQ23, (R2, 72)
  ADD          RQ18, 0, RQ8
// pdpc201/bt_libcgpa.c:133   
  MOV.Q        (RQ8, 88), RQ18
  ADD          RQ18, 0, RQ9
// pdpc201/bt_libcgpa.c:134   
  BRNE.Q       R0, RQ9, .L00C01C24
// pdpc201/bt_libcgpa.c:136   
  MOV          TkClGetProcAddressSv, RQ9
// pdpc201/bt_libcgpa.c:137   
  MOV.Q        RQ9, (RQ8, 88)

.L00C01C24:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

S_ResumeSound:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// s_sound.c:513   {
  MOV.Q        TU7A00CA3E/mus_playing, RQ9
  BREQ.Q       R0, RQ9, .L00802D57
  MOV.L        TU7A00CA3E/mus_paused, RD9
  BREQ.L       R0, RD9, .L00802D57

.L00802D58:
// s_sound.c:515   {
  MOV.Q        TU7A00CA3E/mus_playing, RQ9
  MOV.L        (RQ9, 24), RQ18
  ADD          RQ18, 0, RD10
  BSR          I_ResumeSong, R1
// s_sound.c:517   mus_paused = false;
  MOV.L        RD0, TU7A00CA3E/mus_paused

.L00802D57:

.L00C01C2A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

V_DrawBlockScr:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.L        RD12, (R2, 132)
  ADD          RD13, 0, RD21
  ADDS.L       RD14, 0, RD8
  ADD          RQ15, 0, RQ22
// v_video.c:733   if (x<0
  MOV.L        (R2, 140), RD13
  CMPLT.Q      RD13, R0, RQ18
  ADDS.L       RD13, RD21, RQ9
  ADD          R0, 320, R5
  CMPGT.Q      RQ9, R5, RQ12
  OR           RQ18, RQ12, RQ9
  MOV.L        (R2, 136), RD11
  CMPLT.Q      RD11, R0, RQ12
  OR           RQ9, RQ12, RQ18
  BRNE.L       R0, RQ18, .L00802B41
  MOV.L        (R2, 136), RD13
  ADDS.L       RD13, RD8, RQ9
  BRGT.L       200, RQ9, .L00802B41

.L00802B42:
  MOV.L        (R2, 132), RD13
  ADDU.L       RD13, R0, RQ12
  BRGTU.L      4, RQ12, .L00802B41
  BSR          .L00802B40, R0

.L00802B41:
// v_video.c:738   {
  MOV          .L00C01C31, RQ10
  BSR          I_Error, R1

.L00802B40:
// v_video.c:743   V_MarkRect (x, y, width, height); 
  MOV.L        (R2, 140), RD10
  MOV.L        (R2, 136), RD11
  ADD          RD21, 0, RD12
  ADDS.L       RD8, 0, RD13
  BSR          V_MarkRect, R1
// v_video.c:745   dest = screens[scrn] + y*SCREENWIDTH+x; 
  MOV          screens, RQ13
  MOV.L        (R2, 132), RD12
  MOV.Q        (RQ13, RD12), RQ11
  MOV.L        (R2, 136), RD13
  ADD          R0, 320, R5
  MULS.L       RD13, R5, RQ18
  LEA.W        RQ11, RQ18, RQ10
  MOV.L        (R2, 140), RD17
  LEA.W        RQ10, RD17, RQ23
// v_video.c:747   while (height--) 
  BSR          .L00802B46, R0

.L00802B44:
// v_video.c:748   {
  SHAD.L       RD21, 1, RQ18
  ADDS.L       RQ18, 0, RQ20
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RQ11
  ADD          RQ20, 0, RQ12
  BSR          memcpy, R1
// v_video.c:750   src += width; 
  LEA.W        RQ22, RD21, RQ22
// v_video.c:751   dest += SCREENWIDTH; 
  ADD          RQ23, 640, RQ23

.L00802B46:
  ADDS.L       RD8, 0, RQ9
  ADDS.L       RD8, -1, RD8
  BRNE.L       R0, RQ9, .L00802B44

.L00802B45:

.L00C01C30:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

I_SetMusicVolume:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 76)
// i_sound_btsh.c:528   snd_MusicVolume = volume;
  MOV.L        (R2, 76), RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, snd_MusicVolume
// i_sound_btsh.c:531   SMus_UpdateVolume();
  BSR          SMus_UpdateVolume, R1

.L00C01C37:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMList_WalkHeapObjects:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// tk_core/tk_mmllist.c:872   
  MOV.L        tkmm_mmlist_n_vrm, RD27
// tk_core/tk_mmllist.c:873   
  ADD          R0, 0, RD8
  MOV.L        RD27, (R2, 92)
  BRGE.L       RD27, RD8, .L00800A5D

.L00800A5E:
// tk_core/tk_mmllist.c:874   
  MOV          tkmm_mmlist_vrm_brkflg, RQ27
  MOV.L        (RQ27, RD8), RD9
// tk_core/tk_mmllist.c:876   
  ADD          R0, 1, RD27
  BTST.L       RD27, RD9, .L00800A5F
// tk_core/tk_mmllist.c:877   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ27
  MOV.Q        (RQ27, RD8), RQ18
  ADD          RQ18, 0, RQ22
// tk_core/tk_mmllist.c:879   
  MOV.Q        (R2, 104), RQ10
  ADD          RQ22, 0, RQ11
  MOV.Q        (R2, 96), RQ27
  JSR          RQ27, 0, R1
// tk_core/tk_mmllist.c:880   
  BSR          .L00800A60, R0

.L00800A5F:
// tk_core/tk_mmllist.c:883   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ27
  MOV.Q        (RQ27, RD8), RQ18
  ADD          RQ18, 0, RQ23
// tk_core/tk_mmllist.c:885   
  MOV.L        (RQ23, 0x1010), RD20
// tk_core/tk_mmllist.c:886   
  ADD          R0, 0, RD9
  BRGE.L       RD20, RD9, .L00800A61

.L00800A62:
// tk_core/tk_mmllist.c:887   
  ADD          RQ23, 0, RQ18
  MOV.L        (RQ18, RD9), RQ21
  ADD          RQ23, RQ21, RQ18
  ADD          RQ18, 0, RQ22
// tk_core/tk_mmllist.c:889   
  MOV.Q        (R2, 104), RQ10
  ADD          RQ22, 0, RQ11
  MOV.Q        (R2, 96), RQ27
  JSR          RQ27, 0, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       RD20, RD9, .L00800A62

.L00800A61:

.L00800A60:
  ADDS.L       RD8, 1, RD8
  MOV.L        (R2, 92), RD27
  BRLT.L       RD27, RD8, .L00800A5E

.L00800A5D:
// tk_core/tk_mmllist.c:905   
  ADD          R0, -1, RD10

.L00C01C3D:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

I_AllocLow:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 92)
// i_btesh4.c:302   mem = (byte *)tkgGlobalAlloc (length);
  MOV.L        (R2, 92), RD23
  ADDS.L       RD23, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          tkgGlobalAlloc, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ8
// i_btesh4.c:304   return mem;
  ADD          RQ8, 0, RQ10

.L00C01C43:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

tk_ftell:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 0x14253647, RD20
// tk_core/tk_vfile.c:1051   
  BREQ.Q       R0, RQ9, .L00800B71
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B71
  BSR          .L00800B72, R0

.L00800B71:
// tk_core/tk_vfile.c:1053   

tk_ftell.debugbreak_L0300:
  BRK          768

.L00800B72:
// tk_core/tk_vfile.c:1055   
  MOV.L        (RQ9, 92), RQ22
  BREQ.Q       RD20, RQ22, .L00800B73
// tk_core/tk_vfile.c:1056   

tk_ftell.debugbreak_L0301:
  BRK          769

.L00800B73:
// tk_core/tk_vfile.c:1058   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 112), RQ8
  BREQ.Q       R0, RQ8, .L00800B74
// tk_core/tk_vfile.c:1059   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 112), RQ23
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ29
  JSR          RQ23, 0, R1
  BSR          .L00C01C53, R0

.L00800B74:
// tk_core/tk_vfile.c:1060   
  ADD          R0, -1, RQ10

.L00C01C53:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_saveScaleAndLoc:
// am_map.c:345   {
  MOV.L        TU7A00C41B/m_x, RD13
  ADDS.L       RD13, 0, RD12
// am_map.c:347   old_m_y = m_y;
  MOV.L        TU7A00C41B/m_y, RD11
  ADDS.L       RD11, 0, RD10
// am_map.c:348   old_m_w = m_w;
  MOV.L        TU7A00C41B/m_w, RD17
  ADD          RD17, 0, RD16
// am_map.c:349   old_m_h = m_h;
  MOV.L        TU7A00C41B/m_h, RD15
  ADDS.L       RD15, 0, RD14
  MOV.L        RD12, TU7A00C41B/old_m_x
  MOV.L        RD10, TU7A00C41B/old_m_y
  MOV.L        RD16, TU7A00C41B/old_m_w
  MOV.L        RD14, TU7A00C41B/old_m_h

.L00C01C56:
  JSR          R1, 0, R0
  .balign 4

G_DoWorldDone:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 1, RD8
// g_game.c:1196   {
  MOV.L        RD0, gamestate
// g_game.c:1198   gamemap = wminfo.next+1;
  MOV          wminfo, RQ23
  MOV.L        (RQ23, 12), RQ18
  ADDS.L       RQ18, 1, RD23
  MOV.L        RD23, gamemap
// g_game.c:1199   G_DoLoadLevel ();
  BSR          G_DoLoadLevel, R1
// g_game.c:1200   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1201   viewactive = true;
  MOV.L        RD8, viewactive

.L00C01C5C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

R_GetPolyObjInfoForId:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
// r_polyobj.c:44   tmp = r_polyobj_lut[tid];
  MOV          r_polyobj_lut, RQ13
  MOV.Q        (RQ13, RD9), RQ18
// r_polyobj.c:45   if(!tmp)
  BRNE.Q       R0, RQ18, .L008026EA
// r_polyobj.c:46   {
  LDIZ         2072, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ18
// r_polyobj.c:48   memset(tmp, 0, sizeof(polyobj_t));
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  LDIZ         2072, RQ12
  BSR          memset, R1
// r_polyobj.c:50   tmp->tid = tid;
  ADD          R0, 513, R5
  MOV.L        RD9, (RQ18, R5)
// r_polyobj.c:51   r_polyobj_lut[tid] = tmp;
  MOV          r_polyobj_lut, RQ13
  MOV.Q        RQ18, (RQ13, RD9)

.L008026EA:
// r_polyobj.c:54   return(tmp);
  ADD          RQ18, 0, RQ10

.L00C01C62:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

HU_Init:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -376, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
// hu_stuff.c:399   char	buffer[9];
// hu_stuff.c:401   if (french)
  MOV          french_shiftxform, RQ22
  ADD          RQ22, 0, RQ21
  MOV.Q        RQ21, shiftxform
// hu_stuff.c:406   if ( W_CheckNumForName("STCFN033") >=0 )
  MOV          .L00C01C69, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ23
  BRLT.L       R0, RQ23, .L00802C5F
// hu_stuff.c:409   j = HU_FONTSTART;
  ADD          R0, 33, RD9
// hu_stuff.c:410   for (i=0;i<HU_FONTSIZE;i++)
  ADD          R0, 0, RD18

.L00802C60:
// hu_stuff.c:411   {
  ADD          RD9, 0, RQ23
  ADDS.L       RD9, 1, RD9
  ADD          R2, 96, RQ10
  MOV          .L00C01C6A, RQ11
  ADD          RQ23, 0, RD12
  BSR          sprintf, R1
// hu_stuff.c:414   hu_font[i] = (patch_t *) W_CachePatchName(buffer, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ8
  MOV          hu_font, RQ22
  MOV.Q        RQ8, (RQ22, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       63, RD18, .L00802C60

.L00802C62:
  BSR          .L00802C63, R0

.L00802C5F:
  MOV          .L00C01C6B, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ23
  BRLT.L       R0, RQ23, .L00802C64
// hu_stuff.c:418   {
  ADD          R0, 1, RD9
// hu_stuff.c:421   for (i=0;i<59;i++)
  ADD          R0, 0, RD18

.L00802C65:
// hu_stuff.c:422   {
  ADD          RD9, 0, RQ23
  ADDS.L       RD9, 1, RD9
  ADD          R2, 96, RQ10
  MOV          .L00C01C6C, RQ11
  ADD          RQ23, 0, RD12
  BSR          sprintf, R1
// hu_stuff.c:425   hu_font[i] = (patch_t *) W_CachePatchName(buffer, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ8
  MOV          hu_font, RQ22
  MOV.Q        RQ8, (RQ22, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       59, RD18, .L00802C65

.L00802C67:

.L00802C64:

.L00802C63:

.L00C01C68:
  ADD          R2, 376, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsAdjustSectorCeilForTag:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD21
  MOV.L        RD11, (R2, 104)
// p_acspec.c:66   if(tag<=0)
  BRLE.L       R0, RD21, .L00C01C72
// p_acspec.c:69   idx=0;
  MOV.L        RD0, (R2, 100)
// p_acspec.c:70   while(1)

.L00801892:
// p_acspec.c:71   {
  ADD          R2, 100, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsNextSectorForTag, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:73   if(!sect)
  BREQ.Q       R0, RQ18, .L00801893
// p_acspec.c:75   sect->ceilingheight+=adj*FRACUNIT;
  MOV.L        (RQ18, 4), RQ8
  MOV.L        (R2, 104), RD13
  SHAD.L       RD13, 16, RQ23
  ADDS.L       RQ8, RQ23, RQ22
  MOV.L        RQ22, (RQ18, 4)
  BSR          .L00801892, R0

.L00801893:

.L00C01C72:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

I_PlaySong:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -312, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 72)
// i_bgb_mus_btsh.c:1038   I_InitMusic();
  BSR          I_InitMusic, R1
// i_bgb_mus_btsh.c:1040   ofs=i_mus_song_ofs[handle];
  MOV          i_mus_song_ofs, RQ20
  MOV.L        (RQ20, RD9), RD8
// i_bgb_mus_btsh.c:1041   sz=i_mus_song_len[handle];
  MOV          i_mus_song_len, RQ20
  MOV.L        (RQ20, RD9), RD23
// i_bgb_mus_btsh.c:1042   buf=i_mus_songs[handle]+ofs;
  MOV          i_mus_songs, RQ20
  MOV.Q        (RQ20, RD9), RQ22
  ADD          RQ22, RD8, RQ18
// i_bgb_mus_btsh.c:1044   printf("I_PlaySong: ofs=%d sz=%d\n", ofs, sz);
  MOV          .L00C01C79, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD23, 0, RD12
  BSR          printf, R1
// i_bgb_mus_btsh.c:1078   i_smus_css=buf;
  MOV.Q        RQ18, i_smus_css
// i_bgb_mus_btsh.c:1079   i_smus_cse=buf+sz;
  ADD          RQ18, RD23, RQ20
  MOV.Q        RQ20, i_smus_cse
// i_bgb_mus_btsh.c:1080   i_smus_cs=buf;
  MOV.Q        RQ18, i_smus_cs
// i_bgb_mus_btsh.c:1081   i_smus_tt=0;
  MOV.L        RD0, i_smus_tt
// i_bgb_mus_btsh.c:1082   SMus_SilenceAll();
  BSR          SMus_SilenceAll, R1
// i_bgb_mus_btsh.c:1084   i_mus_curhandle=handle;
  MOV.L        RD9, i_mus_curhandle
// i_bgb_mus_btsh.c:1085   i_mus_curpos=0;
  MOV.L        RD0, i_mus_curpos

.L00C01C78:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

remove:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdio.c:2219   
  ADD          RQ9, 0, RQ10
  BSR          __remove, R1
// pdpc201/stdio.c:2220   
  ADD          RD0, 0, RD18
// pdpc201/stdio.c:2221   
  ADD          RD18, 0, RD10

.L00C01C7F:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

cht_GetParam:
// m_cheat.c:89   p = cht->sequence;
  MOV.Q        (RQ10, 0), RQ13
// m_cheat.c:90   while (*(p++) != 1);
  BSR          .L00801776, R0

.L00801774:

.L00801776:
  MOVU.B       (RQ13, 0), RQ12
  ADD          RQ13, 1, RQ13
  BRNE.Q       1, RQ12, .L00801774

.L00801775:
// m_cheat.c:92   do

.L00801777:
// m_cheat.c:93   {
  MOVU.B       (RQ13, 0), RD17
// m_cheat.c:95   *(buffer++) = c;
  ADD          RQ11, 0, RQ16
  ADD          RQ11, 1, RQ11
  MOV.B        RD17, (RQ16, 0)
// m_cheat.c:96   *(p++) = 0;
  ADD          RQ13, 0, RQ16
  ADD          RQ13, 1, RQ13
  MOVU.B       RD0, (RQ16, 0)
  BREQ.L       R0, RD17, .L0080177A
  MOVU.B       (RQ13, 0), RQ12
  BREQ.Q       255, RQ12, .L0080177A
  BSR          .L00801777, R0

.L0080177A:
// m_cheat.c:100   if (*p==0xff)
  MOVU.B       (RQ13, 0), RQ12
  BRNE.Q       255, RQ12, .L0080177C
// m_cheat.c:101   *buffer = 0;
  MOV.B        RD0, (RQ11, 0)

.L0080177C:

.L00C01C80:
  JSR          R1, 0, R0
  .balign 4

TKMM_MMList_AddVrmBrk:
// tk_core/tk_mmllist.c:42   
  MOV.L        tkmm_mmlist_n_vrm, RD13
  ADD          RD13, 0, RD17
  ADDS.L       RD13, 1, RD13
// tk_core/tk_mmllist.c:43   
  MOV.L        RD13, tkmm_mmlist_n_vrm
  ADD          R0, 1024, RD16
  BRLT.L       RD16, RD17, .L00800A01
// tk_core/tk_mmllist.c:44   

TKMM_MMList_AddVrmBrk.debugbreak_L0307:
  BRK          775

.L00800A01:
// tk_core/tk_mmllist.c:48   
  BSR          .L00800A02, R0

.L00800A03:
// tk_core/tk_mmllist.c:49   
  ADDS.L       RD17, -1, RQ13
  MOV          tkmm_mmlist_vrm_brkbuf, RQ16
  MOV.Q        (RQ16, RQ13), RQ15
  MOV.Q        RQ15, (RQ16, RD17)
// tk_core/tk_mmllist.c:51   
  ADDS.L       RD17, -1, RQ13
  MOV          tkmm_mmlist_vrm_brkend, RQ14
  MOV.Q        (RQ14, RQ13), RQ15
  MOV.Q        RQ15, (RQ14, RD17)
// tk_core/tk_mmllist.c:52   
  ADDS.L       RD17, -1, RQ13
  MOV          tkmm_mmlist_vrm_brkflg, RQ31
  MOV.L        (RQ31, RQ13), RQ30
  MOV.L        RQ30, (RQ31, RD17)
// tk_core/tk_mmllist.c:53   
  ADDS.L       RD17, -1, RD17

.L00800A02:
  BRLE.L       R0, RD17, .L00800A04
  ADDS.L       RD17, -1, RQ13
  MOV          tkmm_mmlist_vrm_brkbuf, RQ16
  MOV.Q        (RQ16, RQ13), RQ15
  BRLE.Q       RQ10, RQ15, .L00800A04
  BSR          .L00800A03, R0

.L00800A04:

.L00800A05:
// tk_core/tk_mmllist.c:56   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ16
  MOV.Q        RQ10, (RQ16, RD17)
// tk_core/tk_mmllist.c:57   
  ADD          RQ10, RD11, RQ15
  MOV          tkmm_mmlist_vrm_brkend, RQ14
  MOV.Q        RQ15, (RQ14, RD17)
// tk_core/tk_mmllist.c:58   
  MOV          tkmm_mmlist_vrm_brkflg, RQ31
  MOV.L        RD12, (RQ31, RD17)

.L00C01C81:
  JSR          R1, 0, R0
  .balign 4

A_FireCrackle:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 91, RD9
// p_enemy.c:1285   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 91, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1287   A_Fire(actor);
  ADD          RQ18, 0, RQ10
  BSR          A_Fire, R1

.L00C01C8D:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_freezone_cbfunc:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RQ11, 0, RQ9
// tk_core/tk_mmpage.c:1206   
  MOV.Q        (R2, 104), RQ22
// tk_core/tk_mmpage.c:1208   
  MOVU.B       (RQ9, 4), RQ18
  ADD          R0, 8, RD13
  BTSTN.L      RD13, RQ18, .L00C00871
// tk_core/tk_mmpage.c:1214   
  MOVU.W       (RQ9, 2), RQ18
  MOV.L        (RQ22, 4), RQ8
  AND          RQ18, RQ8, RQ23
  MOV.L        (RQ22, 0), RQ18
  BRNE.Q       RQ18, RQ23, .L008009B1
  MOVU.B       (RQ9, 4), RQ8
  ADD          R0, 4, RD13
  BTST.L       RD13, RQ8, .L008009B2
// tk_core/tk_mmpage.c:1217   
  MOVU.B       (RQ9, 6), RQ23
  SHAD.L       RQ23, 14, RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          TKMM_PageFree, R1
// tk_core/tk_mmpage.c:1219   
  ADD          R0, 1, RD10
  BSR          .L00C01C93, R0

.L008009B2:
// tk_core/tk_mmpage.c:1220   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_MMList_FreeLnkObj, R1
// tk_core/tk_mmpage.c:1222   
  ADD          R0, 1, RD10
  BSR          .L00C01C93, R0

.L008009B1:
// tk_core/tk_mmpage.c:1225   
  ADD          R0, 0, RD10
  BSR          .L00C01C93, R0

.L00C00871:
  ADD          R0, 0, RQ10

.L00C01C93:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

M_VerifyNightmare:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD9
  ADD          R0, 1, RD8
  ADD          R0, 121, RD23
// m_menu.c:933   {
  BRNE.Q       RD23, RD9, .L00C01C99
// m_menu.c:937   G_DeferedInitNew(nightmare,epi+1,1);
  MOV.L        epi, RD22
  ADDS.L       RD22, 1, RQ18
  ADD          R0, 4, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 1, RD12
  BSR          G_DeferedInitNew, R1
// m_menu.c:938   M_ClearMenus ();
  BSR          M_ClearMenus, R1

.L00C01C99:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

A_TroopAttack:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:950   if (!actor->target)
  MOV.Q        (RQ18, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C01C9F
// p_enemy.c:953   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:954   if (P_CheckMeleeRange (actor))
  ADD          RQ18, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801B58
// p_enemy.c:955   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 55, RD11
  BSR          S_StartSound, R1
// p_enemy.c:957   damage = (P_Random()%8+1)*3;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ23
  ADD          R0, 8, RD22
  MODS.L       RQ23, RD22, RQ23
  ADDS.L       RQ23, 1, RQ9
  ADD          R0, 3, R5
  MULS.L       RQ9, R5, RD21
  MOV.L        RD21, (R2, 100)
// p_enemy.c:958   P_DamageMobj (actor->target, actor, actor, damage);
  MOV.Q        (RQ18, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ18, 0, RQ12
  ADD          RD21, 0, RD13
  BSR          P_DamageMobj, R1
// p_enemy.c:959   return;
  BSR          .L00C01C9F, R0

.L00801B58:
// p_enemy.c:964   P_SpawnMissile (actor, actor->target, MT_TROOPSHOT);
  MOV.Q        (RQ18, 176), RQ8
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 31, RD12
  BSR          P_SpawnMissile, R1

.L00C01C9F:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_RunThinkers:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
// p_tick.c:108   currentthinker = thinkercap.next;
  MOV          thinkercap, RQ23
  MOV.Q        (RQ23, 8), RQ9
// p_tick.c:109   while (currentthinker != &thinkercap)
  BSR          .L0080230C, R0

.L0080230A:
// p_tick.c:112   if ( currentthinker->function.acv == P_ACTIONF_REMOVE )
  ADD          RQ9, 16, RQ23
  MOV.Q        (RQ23, 0), RQ18
  ADD          R0, -1, RQ8
  BRNE.Q       RQ8, RQ18, .L0080230D
// p_tick.c:115   currentthinker->next->prev = currentthinker->prev;
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ9, 8), RQ8
  MOV.Q        RQ18, (RQ8, 0)
// p_tick.c:116   currentthinker->prev->next = currentthinker->next;
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        RQ8, (RQ18, 8)
// p_tick.c:117   Z_Free (currentthinker);
  ADD          RQ9, 0, RQ10
  BSR          Z_Free, R1
  BSR          .L0080230E, R0

.L0080230D:
  ADD          RQ9, 16, RQ23
  MOV.Q        (RQ23, 0), RQ18
  BREQ.Q       R0, RQ18, .L0080230F
// p_tick.c:122   currentthinker->function.acp1 (currentthinker);
  ADD          RQ9, 16, RQ23
  MOV.Q        RQ23, (R2, 80)
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ9, 0, RQ10
  ADD          R2, 80, RQ29
  JSR          RQ18, 0, R1

.L0080230F:

.L0080230E:
// p_tick.c:123   }
  MOV.Q        (RQ9, 8), RQ9

.L0080230C:
  MOV          thinkercap, RQ18
  BRNE.Q       RQ18, RQ9, .L0080230A

.L0080230B:

.L00C01CA5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

__udivdi3:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
// tk_core/tk_divi.c:97   
  MOV.Q        (R2, 112), RQ27
  CMPEQ.Q      RQ27, R0, RQ21
  MOV.Q        (R2, 120), RQ26
  CMPEQ.Q      RQ26, R0, RQ25
  OR           RQ21, RQ25, RQ13
  BRNE.L       R0, RQ13, .L00C0087D
// tk_core/tk_divi.c:100   
  MOV.Q        (R2, 112), RQ10
  BSR          _fcn_clz64, R1
  ADD          RQ10, 0, RQ21
  MOV.Q        (R2, 120), RQ10
  BSR          _fcn_clz64, R1
  ADD          RQ10, 0, RQ27
  SUBS.L       RQ21, RQ27, RQ26
  AND          RQ26, 255, RD23
// tk_core/tk_divi.c:102   
  BRLT.L       63, RD23, .L00800BD4
  BRNE.Q       63, RD23, .L00800BD5
// tk_core/tk_divi.c:105   
  MOV.Q        (R2, 120), RQ10
  BSR          .L00C01CAB, R0

.L00800BD5:
// tk_core/tk_divi.c:106   
  ADD          R0, 0, RQ10
  BSR          .L00C01CAB, R0

.L00800BD4:
// tk_core/tk_divi.c:109   
  ADDS.L       RD23, 1, RD23
  ADDU.L       RD23, R0, RD23
  AND          RD23, 255, RD23
// tk_core/tk_divi.c:110   
  ADD          R0, 64, R5
  SUBS.L       R5, RD23, RQ21
  ADDS.L       RQ21, 0, RQ18
  MOV.Q        (R2, 120), RQ27
  SHLD.Q       RQ27, RQ18, RQ22
  AND          RD23, 255, RQ18
  ADD          RQ27, 0, RQ8
  SHLR.Q       RQ8, RQ18, RQ8
  MOV.L        RD0, (R2, 108)
// tk_core/tk_divi.c:111   
  BSR          .L00800BD6, R0

.L00800BD7:
// tk_core/tk_divi.c:112   
  SHLD.Q       RQ8, 1, RQ18
  SHLR.Q       RQ22, 63, RQ9
  OR           RQ18, RQ9, RQ8
// tk_core/tk_divi.c:114   
  SHLD.Q       RQ22, 1, RQ18
  MOV.L        (R2, 108), RD27
  ADDS.L       RD27, 0, RQ9
  OR           RQ18, RQ9, RQ22
// tk_core/tk_divi.c:115   
  MOV.Q        (R2, 112), RQ26
  SUB          RQ26, RQ8, RQ18
  ADD          RQ18, -1, RQ9
  SHAR.Q       RQ9, 63, RQ18
  ADDS.L       RQ18, 0, RD20
// tk_core/tk_divi.c:116   
  AND          RD20, 1, RD27
  MOV.L        RD27, (R2, 108)
// tk_core/tk_divi.c:117   
  ADDS.L       RD20, 0, RQ18
  AND          RQ26, RQ18, RQ9
  SUB          RQ8, RQ9, RQ8

.L00800BD6:
  ADD          RD23, 0, RQ21
  ADDS.L       RD23, -1, RD23
  ADDU.L       RD23, R0, RD23
  AND          RD23, 255, RD23
  BRNE.L       R0, RQ21, .L00800BD7

.L00800BD8:
// tk_core/tk_divi.c:118   
  SHLD.Q       RQ22, 1, RQ18
  MOV.L        (R2, 108), RD27
  ADDS.L       RD27, 0, RQ9
  OR           RQ18, RQ9, RQ22
// tk_core/tk_divi.c:120   
  ADD          RQ22, 0, RQ10
  BSR          .L00C01CAB, R0

.L00C0087D:
  ADD          R0, 0, RQ10

.L00C01CAB:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

M_WriteFile:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
  MOV.Q        RQ11, (R2, 96)
  ADD          RD12, 0, RD22
  MOV          .L00C01CB2, RQ20
// m_misc.c:124   fd = fopen ( name, "wb");
  ADD          RQ21, 0, RQ10
  ADD          RQ20, 0, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ18
// m_misc.c:127   if(!fd)
  BREQ.Q       R0, RQ18, .L00C0087F
// m_misc.c:131   count = fwrite (source, 1, length, fd);
  ADDS.L       RD22, 0, RQ8
  MOV.Q        (R2, 96), RQ10
  ADD          R0, 1, RQ11
  ADD          RQ8, 0, RQ12
  ADD          RQ18, 0, RQ13
  BSR          fwrite, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RD23
// m_misc.c:133   fclose (fd);
  ADD          RQ18, 0, RQ10
  BSR          fclose, R1
// m_misc.c:135   if (count < length)
  BRLT.L       RD22, RD23, .L00C0087F
// m_misc.c:138   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01CB1, R0

.L00C0087F:
  ADD          R0, 0, RQ10

.L00C01CB1:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_PrintChar:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 116)
// p_acspec.c:1057   t=run->prnbuf+run->prnpos;
  ADD          RQ9, 1072, RQ20
  MOVU.B       (RQ9, 1328), RQ18
  ADD          RQ20, RQ18, RQ8
// p_acspec.c:1058   sprintf(t, "%c", val);
  ADD          RQ8, 0, RQ10
  MOV          .L00C01CB9, RQ11
  MOV.L        (R2, 116), RD12
  BSR          sprintf, R1
// p_acspec.c:1059   run->prnpos+=strlen(t);
  MOVU.B       (RQ9, 1328), RQ18
  ADD          RQ8, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ23
  AND          RQ18, 255, RQ22
  ADD          RQ22, RQ23, RQ21
  AND          RQ21, 255, RQ18
  MOVU.B       RQ18, (RQ9, 1328)

.L00C01CB8:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

M_QuitDOOM:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 92)
// m_menu.c:1145   if (language != english )
  MOV.L        language, RD23
  BREQ.L       R0, RD23, .L0080166F
// m_menu.c:1146   sprintf(endstring,"%s\n\n"DOSY, endmsg[0] );
  MOV          endmsg, RQ23
  MOV.Q        (RQ23, 0), RQ18
  MOV          endstring, RQ10
  MOV          .L00C01CC0, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sprintf, R1
  BSR          .L00801670, R0

.L0080166F:
// m_menu.c:1148   sprintf(endstring,"%s\n\n"DOSY, endmsg[ (gametic%(NUM_QUITMESSAGES-2))+1 ]);
  MOV.L        gametic, RQ9
  ADD          R0, 20, RD23
  MODS.L       RQ9, RD23, RQ9
  ADDS.L       RQ9, 1, RQ8
  MOV          endmsg, RQ22
  MOV.Q        (RQ22, RQ8), RQ18
  MOV          endstring, RQ10
  MOV          .L00C01CC0, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sprintf, R1

.L00801670:
// m_menu.c:1150   M_StartMessage(endstring,M_QuitResponse,true);
  MOV          M_QuitResponse, RQ18
  MOV          endstring, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 1, RD12
  BSR          M_StartMessage, R1

.L00C01CBF:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

A_BrainAwake:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 104)
// p_enemy.c:1852   numbraintargets = 0;
  MOV.L        RD0, numbraintargets
// p_enemy.c:1853   braintargeton = 0;
  MOV.L        RD0, braintargeton
// p_enemy.c:1855   thinker = thinkercap.next;
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 8), RQ18
// p_enemy.c:1856   for (thinker = thinkercap.next ;
  MOV.Q        (RQ13, 8), RQ18
  ADD          RQ13, 0, RQ9
  BREQ.Q       RQ9, RQ18, .L00801BB2

.L00801BB0:
// p_enemy.c:1859   {
  ADD          RQ18, 16, RQ13
  MOV.Q        (RQ13, 0), RQ9
  MOV          P_MobjThinker, RQ23
  BRNE.Q       RQ23, RQ9, .L00801BB1
// p_enemy.c:1863   m = (mobj_t *)thinker;
  ADD          RQ18, 0, RQ8
// p_enemy.c:1865   if (m->type == MT_BOSSTARGET )
  MOV.L        (RQ8, 128), RQ22
  BRNE.Q       27, RQ22, .L00801BB3
// p_enemy.c:1866   {
  MOV          braintargets, RQ13
  MOV.L        numbraintargets, RD12
  MOV.Q        RQ8, (RQ13, RD12)
// p_enemy.c:1868   numbraintargets++;
  ADDS.L       RD12, 1, RD12
  MOV.L        RD12, numbraintargets

.L00801BB3:

.L00801BB1:
  MOV.Q        (RQ18, 8), RQ18
  MOV          thinkercap, RQ9
  BRNE.Q       RQ9, RQ18, .L00801BB0

.L00801BB2:
// p_enemy.c:1872   S_StartSound (NULL,sfx_bossit);
  ADD          RQ0, 0, RQ10
  ADD          R0, 96, RD11
  BSR          S_StartSound, R1

.L00C01CC6:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

AM_changeWindowLoc:
// am_map.c:432   {
  MOV          TU7A00C41B/m_paninc, RQ13
  MOV.L        (RQ13, 0), RQ12
  BRNE.L       R0, RQ12, .L00801799
  MOV          TU7A00C41B/m_paninc, RQ13
  MOV.L        (RQ13, 4), RQ12
  BRNE.L       R0, RQ12, .L00801799
  BSR          .L00801798, R0

.L00801799:
// am_map.c:434   {
  ADDS.L       RD0, 0, RD13
// am_map.c:436   f_oldloc.x = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD11
  MOV          TU7A00C41B/f_oldloc, RQ10
  MOV.L        RD11, (RQ10, 0)
  MOV.L        RD13, TU7A00C41B/followplayer

.L00801798:
// am_map.c:439   m_x += m_paninc.x;
  MOV          TU7A00C41B/m_paninc, RQ13
  MOV.L        (RQ13, 0), RQ12
  MOV.L        TU7A00C41B/m_x, RD11
  ADDS.L       RD11, RQ12, RD11
// am_map.c:440   m_y += m_paninc.y;
  MOV.L        (RQ13, 4), RQ12
  MOV.L        TU7A00C41B/m_y, RD10
  ADDS.L       RD10, RQ12, RD10
// am_map.c:442   if (m_x + m_w/2 > max_x)
  MOV.L        TU7A00C41B/m_w, RD17
  ADD          RD17, 0, RQ12
  ADD          R0, 2, RD16
  DIVS.L       RQ12, RD16, RQ12
  ADDS.L       RD11, RQ12, RQ15
  MOV.L        RD11, TU7A00C41B/m_x
  MOV.L        RD10, TU7A00C41B/m_y
  MOV.L        TU7A00C41B/max_x, RD14
  BRLE.L       RD14, RQ15, .L0080179B
// am_map.c:443   m_x = max_x - m_w/2;
  MOV.L        TU7A00C41B/m_w, RD13
  ADDS.L       RD13, 0, RQ12
  ADD          R0, 2, RD11
  DIVS.L       RQ12, RD11, RQ12
  MOV.L        TU7A00C41B/max_x, RD10
  SUBS.L       RD10, RQ12, RD17
  MOV.L        RD17, TU7A00C41B/m_x
  BSR          .L0080179C, R0

.L0080179B:
  MOV.L        TU7A00C41B/m_w, RD13
  ADDS.L       RD13, 0, RQ15
  ADD          R0, 2, RD11
  DIVS.L       RQ15, RD11, RQ15
  MOV.L        TU7A00C41B/m_x, RD10
  ADDS.L       RD10, RQ15, RQ12
  MOV.L        TU7A00C41B/min_x, RD17
  BRGE.L       RD17, RQ12, .L0080179D
// am_map.c:445   m_x = min_x - m_w/2;
  MOV.L        TU7A00C41B/m_w, RD13
  ADDS.L       RD13, 0, RQ15
  ADD          R0, 2, RD11
  DIVS.L       RQ15, RD11, RQ15
  MOV.L        TU7A00C41B/min_x, RD10
  SUBS.L       RD10, RQ15, RD17
  MOV.L        RD17, TU7A00C41B/m_x

.L0080179D:

.L0080179C:
// am_map.c:447   if (m_y + m_h/2 > max_y)
  MOV.L        TU7A00C41B/m_h, RD13
  ADDS.L       RD13, 0, RQ12
  ADD          R0, 2, RD11
  DIVS.L       RQ12, RD11, RQ12
  MOV.L        TU7A00C41B/m_y, RD10
  ADDS.L       RD10, RQ12, RQ15
  MOV.L        TU7A00C41B/max_y, RD17
  BRLE.L       RD17, RQ15, .L0080179E
// am_map.c:448   m_y = max_y - m_h/2;
  MOV.L        TU7A00C41B/m_h, RD13
  ADDS.L       RD13, 0, RQ12
  ADD          R0, 2, RD11
  DIVS.L       RQ12, RD11, RQ12
  MOV.L        TU7A00C41B/max_y, RD10
  SUBS.L       RD10, RQ12, RD17
  MOV.L        RD17, TU7A00C41B/m_y
  BSR          .L0080179F, R0

.L0080179E:
  MOV.L        TU7A00C41B/m_h, RD13
  ADDS.L       RD13, 0, RQ15
  ADD          R0, 2, RD11
  DIVS.L       RQ15, RD11, RQ15
  MOV.L        TU7A00C41B/m_y, RD10
  ADDS.L       RD10, RQ15, RQ12
  MOV.L        TU7A00C41B/min_y, RD17
  BRGE.L       RD17, RQ12, .L008017A0
// am_map.c:450   m_y = min_y - m_h/2;
  MOV.L        TU7A00C41B/m_h, RD13
  ADDS.L       RD13, 0, RQ15
  ADD          R0, 2, RD11
  DIVS.L       RQ15, RD11, RQ15
  MOV.L        TU7A00C41B/min_y, RD10
  SUBS.L       RD10, RQ15, RD17
  MOV.L        RD17, TU7A00C41B/m_y

.L008017A0:

.L0080179F:
// am_map.c:452   m_x2 = m_x + m_w;
  MOV.L        TU7A00C41B/m_x, RD13
  MOV.L        TU7A00C41B/m_w, RD11
  ADDS.L       RD13, RD11, RD10
// am_map.c:453   m_y2 = m_y + m_h;
  MOV.L        TU7A00C41B/m_y, RD17
  MOV.L        TU7A00C41B/m_h, RD16
  ADDS.L       RD17, RD16, RD14
  MOV.L        RD10, TU7A00C41B/m_x2
  MOV.L        RD14, TU7A00C41B/m_y2

.L00C01CC7:
  JSR          R1, 0, R0
  .balign 4

HU_DrawDecNum:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
  MOV.L        RD10, (R2, 124)
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
  ADD          RD13, 0, RD23
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// hu_stuff.c:826   {
// hu_stuff.c:833   v=val;
  MOV.L        (R2, 116), RD22
// hu_stuff.c:834   for(i=0; i<w; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD23, RD18, .L00802CD2

.L00802CD0:
// hu_stuff.c:835   {
  ADD          RD22, 0, RQ8
  ADD          R0, 10, RD13
  MODS.L       RQ8, RD13, RQ8
  SUBS.L       RD23, RD18, RQ20
  ADDS.L       RQ20, -1, RQ12
  ADD          R2, 128, RQ11
  MOV.B        RQ8, (RQ11, RQ12)
// hu_stuff.c:837   v/=10;
  DIVS.L       RD22, RD13, RD22
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD23, RD18, .L00802CD0

.L00802CD2:
// hu_stuff.c:842   x=xo; y=yo;
  MOV.L        (R2, 124), RD21
  MOV.L        (R2, 120), RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, (R2, 96)
// hu_stuff.c:843   for(i=0; i<w; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD23, RD18, .L00802CD5

.L00802CD3:
// hu_stuff.c:844   {
  ADD          R2, 128, RQ13
  MOV.B        (RQ13, RD18), RD12
// hu_stuff.c:847   p=hu_shortnum[c];
  MOV          hu_shortnum, RQ11
  MOV.Q        (RQ11, RD12), RQ9
  MOV.L        RD12, (R2, 100)
// hu_stuff.c:848   if(!p)break;
  BREQ.Q       R0, RQ9, .L00802CD5
// hu_stuff.c:849   V_DrawPatchDirect(x, y, FG, p);
  ADD          RD21, 0, RD10
  MOV.L        (R2, 96), RD11
  ADD          R0, 0, RD12
  ADD          RQ9, 0, RQ13
  BSR          V_DrawPatchDirect, R1
// hu_stuff.c:850   x+=p->width;
  MOV.W        (RQ9, 0), RQ8
  ADDS.L       RD21, RQ8, RD21
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD23, RD18, .L00802CD3

.L00802CD5:
// hu_stuff.c:851   }
  ADD          R0, 0, RD10

.L00C01CCD:
  ADD          R2, 400, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_BulletSlope:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
// p_pspr.c:608   an = mo->angle;
  MOVU.L       (RQ9, 56), RD18
// p_pspr.c:609   bulletslope = P_AimLineAttack (mo, an, 16*64*FRACUNIT);
  ADD          RQ9, 0, RQ10
  ADD          RD18, 0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  MOV.L        RQ10, bulletslope
// p_pspr.c:611   if (!linetarget)
  MOV.Q        linetarget, RQ8
  BRNE.Q       R0, RQ8, .L00801EB5
// p_pspr.c:612   {
  LUI          16384, R5
  ADDU.L       R5, RD18, RD18
// p_pspr.c:614   bulletslope = P_AimLineAttack (mo, an, 16*64*FRACUNIT);
  ADD          RQ9, 0, RQ10
  ADD          RD18, 0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  MOV.L        RQ10, bulletslope
  MOV.Q        linetarget, RQ8
  BRNE.Q       R0, RQ8, .L00801EB6
// p_pspr.c:616   {
  LUI          -32768, R5
  ADDU.L       R5, RD18, RD18
// p_pspr.c:618   bulletslope = P_AimLineAttack (mo, an, 16*64*FRACUNIT);
  ADD          RQ9, 0, RQ10
  ADD          RD18, 0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  MOV.L        RQ10, bulletslope

.L00801EB6:

.L00801EB5:

.L00C01CD3:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

__xli_umod:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R20, (R2, 0)
  MOV.X        R22, (R2, 16)
  ADD          R2, -408, R2
  MOV.X        RQ10, (R2, 144)
  MOV.X        RQ12, (R2, 128)
// pdpc201/btshx_xli.c:827   
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
  ADD          RQ22, 0, RQ12
  ADD          RQ23, 0, RQ13
  MOV.X        (R2, 128), RQ10
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        RQ22, (R2, 64)
  MOV.X        RQ20, (R2, 80)
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 128), RQ10
  BSR          __xli_cmp_tst, R1
  BRNE.Q       RQ10, R0, .L00801090
// pdpc201/btshx_xli.c:828   
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
  ADD          RQ22, 0, RQ12
  ADD          RQ23, 0, RQ13
  MOV.X        (R2, 128), RQ10
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 144), RQ10
  BSR          __xli_and, R1
  MOV.X        RQ10, (R2, 96)
// pdpc201/btshx_xli.c:830   
  MOV.X        RQ22, (R2, 64)
  MOV.X        RQ20, (R2, 80)
  MOV.X        (R2, 96), RQ10
  BSR          .L00C01CDE, R0

.L00801090:
// pdpc201/btshx_xli.c:834   
  MOV.X        (R2, 144), RQ10
  MOV.X        (R2, 128), RQ12
  BSR          __xli_udiv, R1
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
// pdpc201/btshx_xli.c:835   
  MOV.X        (R2, 128), RQ12
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          __xli_umul, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 144), RQ10
  BSR          __xli_sub, R1
  MOV.X        RQ10, (R2, 96)
// pdpc201/btshx_xli.c:837   
  MOV.X        RQ22, (R2, 112)
  MOV.X        RQ20, (R2, 80)
  MOV.X        (R2, 96), RQ12
  MOV.X        (R2, 128), RQ10
  BSR          __xli_cmp_hi, R1
  BRNE.Q       RQ10, R0, .L00801091
// pdpc201/btshx_xli.c:838   

__xli_umod.debugbreak_L030D:
  BRK          781

.L00801091:
// pdpc201/btshx_xli.c:840   
  MOV.X        (R2, 96), RQ10

.L00C01CDE:
  ADD          R2, 408, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R20
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

A_BrainPain:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 72)
  ADD          R0, 97, RD9
// p_enemy.c:1877   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 97, RD11
  BSR          S_StartSound, R1

.L00C01CE5:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_free_dir:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// tk_core/tk_vfile.c:339   
  ADD          RQ18, 0, RQ10
  BSR          tk_free_file, R1

.L00C01CEB:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

TKMM_Free:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmpage.c:926   
  BRNE.Q       R0, RQ8, .L00800999
  ADD          R0, -1, RD10
  BSR          .L00C01CF1, R0

.L00800999:
// tk_core/tk_mmpage.c:930   
  ADD          RQ8, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:931   
  BRNE.Q       R0, RQ18, .L0080099A
// tk_core/tk_mmpage.c:932   
  ADD          R0, -1, RD10
  BSR          .L00C01CF1, R0

.L0080099A:
// tk_core/tk_mmpage.c:938   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 8, RD13
  BTST.L       RD13, RQ9, .L0080099B
// tk_core/tk_mmpage.c:939   
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          TKMM_MMCell_FreeLnkObjCellPtr, R1
// tk_core/tk_mmpage.c:941   
  ADD          R0, 0, RD10
  BSR          .L00C01CF1, R0

.L0080099B:
// tk_core/tk_mmpage.c:944   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 4, RD13
  BTST.L       RD13, RQ9, .L0080099C
// tk_core/tk_mmpage.c:948   
  MOVU.B       (RQ18, 6), RQ9
  SHAD.L       RQ9, 14, RQ23
  ADD          RQ18, 0, RQ10
  ADD          RQ23, 0, RD11
  BSR          TKMM_PageFree, R1
// tk_core/tk_mmpage.c:949   
  ADD          R0, 0, RD10
  BSR          .L00C01CF1, R0

.L0080099C:
// tk_core/tk_mmpage.c:952   
  ADD          RQ18, 0, RQ10
  BSR          TKMM_MMList_FreeLnkObj, R1
// tk_core/tk_mmpage.c:953   
  ADD          R0, 0, RD10

.L00C01CF1:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

tk_sysc_mount:
// tk_vf_sysc.c:88   

.L00C01CF2:
  JSR          R1, 0, R0

P_UnArchiveThinkers:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
// p_saveg.c:270   currentthinker = thinkercap.next;
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ22
// p_saveg.c:271   while (currentthinker != &thinkercap)
  BSR          .L00802345, R0

.L00802343:
// p_saveg.c:272   {
  MOV.Q        (RQ22, 8), RQ27
  MOV.Q        RQ27, (R2, 128)
// p_saveg.c:275   if (currentthinker->function.acp1 == (actionf_p1)P_MobjThinker)
  ADD          RQ22, 16, RQ26
  MOV.Q        (RQ26, 0), RQ9
  MOV          P_MobjThinker, RQ8
  BRNE.Q       RQ8, RQ9, .L00802346
// p_saveg.c:276   P_RemoveMobj ((mobj_t *)currentthinker);
  ADD          RQ22, 0, RQ10
  BSR          P_RemoveMobj, R1
  BSR          .L00802347, R0

.L00802346:
// p_saveg.c:278   Z_Free (currentthinker);
  ADD          RQ22, 0, RQ10
  BSR          Z_Free, R1

.L00802347:
// p_saveg.c:280   currentthinker = next;
  MOV.Q        (R2, 128), RQ22

.L00802345:
  MOV          thinkercap, RQ9
  BRNE.Q       RQ9, RQ22, .L00802343

.L00802344:
// p_saveg.c:281   }
  BSR          P_InitThinkers, R1
// p_saveg.c:285   while (1)

.L00802348:
// p_saveg.c:286   {
  MOV.Q        save_p, RQ27
  MOVU.B       (RQ27, 0), RQ23
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, save_p
  AND          RQ23, 255, RD27
// p_saveg.c:288   switch (tclass)
  MOV.L        RD27, (R2, 140)
  BREQ.L       R0, RD27, .L0080234C
  MOV.L        (R2, 140), RD27
  BREQ.Q       1, RD27, .L0080234D
  BSR          .L0080234E, R0

.L0080234C:
// p_saveg.c:290   case tc_end:
  BSR          .L00C01CF8, R0

.L0080234D:
// p_saveg.c:293   case tc_mobj:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ21
  AND          RQ21, 3, RQ20
  ADD          R0, 4, RQ26
  SUB          RQ26, RQ20, RQ21
  AND          RQ21, 3, RQ20
  ADD          RQ27, RQ20, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:295   mobj = Z_Malloc (sizeof(*mobj), PU_LEVELMOBJ, NULL);
  ADD          R0, 232, RD10
  ADD          R0, 52, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_saveg.c:296   memcpy (mobj, save_p, sizeof(*mobj));
  MOV.Q        save_p, RQ27
  ADD          RQ18, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          __memcpy64_232, R1
// p_saveg.c:297   save_p += sizeof(*mobj);
  MOV.Q        save_p, RQ27
  ADD          RQ27, 232, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:298   mobj->state = &states[(nlint)mobj->state];
  MOV.Q        (RQ18, 152), RQ9
  MOV          states, RQ27
  ADD          R0, 40, R5
  MUL.L        RQ9, R5, RQ8
  ADD          RQ27, RQ8, RQ8
  MOV.Q        RQ8, (RQ18, 152)
// p_saveg.c:299   mobj->target = NULL;
  MOV.Q        RQ0, (RQ18, 176)
// p_saveg.c:300   if (mobj->player)
  MOV.Q        (RQ18, 192), RQ9
  BREQ.Q       R0, RQ9, .L0080234F
// p_saveg.c:301   {
  MOV.Q        (RQ18, 192), RQ8
  ADD          RQ8, -1, RQ21
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RQ21, R5, RQ9
  ADD          RQ27, RQ9, RQ9
  MOV.Q        RQ9, (RQ18, 192)
// p_saveg.c:303   mobj->player->mo = mobj;
  MOV.Q        (RQ18, 192), RQ8
  MOV.Q        RQ18, (RQ8, 0)

.L0080234F:
// p_saveg.c:304   }
  ADD          RQ18, 0, RQ10
  BSR          P_SetThingPosition, R1
// p_saveg.c:306   mobj->info = &mobjinfo[mobj->type];
  MOV.L        (RQ18, 128), RQ23
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RQ23, R5, RQ9
  ADD          RQ27, RQ9, RQ9
  MOV.Q        RQ9, (RQ18, 136)
// p_saveg.c:307   mobj->floorz = mobj->subsector->sector->floorheight;
  MOV.Q        (RQ18, 88), RQ8
  MOV.Q        (RQ8, 0), RQ9
  MOV.L        (RQ9, 0), RQ23
  MOV.L        RQ23, (RQ18, 96)
// p_saveg.c:308   mobj->ceilingz = mobj->subsector->sector->ceilingheight;
  MOV.L        (RQ9, 4), RQ23
  MOV.L        RQ23, (RQ18, 100)
// p_saveg.c:309   mobj->thinker.function.acp1 = (actionf_p1)P_MobjThinker;
  MOV          P_MobjThinker, RQ9
  ADD          RQ18, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        RQ9, (RQ26, 0)
// p_saveg.c:310   P_AddThinker (&mobj->thinker);
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:311   break;
  BSR          .L0080234B, R0

.L0080234E:
// p_saveg.c:313   default:
  MOV          .L00C01CF9, RQ10
  MOV.L        (R2, 140), RD11
  BSR          I_Error, R1

.L0080234B:
  BSR          .L00802348, R0

.L00802349:

.L00C01CF8:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

A_CPosAttack:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:885   if (!actor->target)
  MOV.Q        (RQ8, 176), RQ20
  BREQ.Q       R0, RQ20, .L00C01CFF
// p_enemy.c:888   S_StartSound (actor, sfx_shotgn);
  ADD          RQ8, 0, RQ10
  ADD          R0, 2, RD11
  BSR          S_StartSound, R1
// p_enemy.c:889   A_FaceTarget (actor);
  ADD          RQ8, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:890   bangle = actor->angle;
  MOVU.L       (RQ8, 56), RQ18
  ADDS.L       RQ18, 0, RD22
// p_enemy.c:891   slope = P_AimLineAttack (actor, bangle, MISSILERANGE);
  ADDU.L       RD22, R0, RQ18
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RD11
  LUI          0x00008000, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD21
// p_enemy.c:893   angle = bangle + ((P_Random()-P_Random())<<20);
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ23
  SHAD.L       RQ23, 20, RQ18
  ADDS.L       RD22, RQ18, RD27
  MOV.L        RD27, (R2, 116)
// p_enemy.c:894   damage = ((P_Random()%5)+1)*3;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ23
  ADD          R0, 5, RD26
  MODS.L       RQ23, RD26, RQ23
  ADDS.L       RQ23, 1, RQ18
  ADD          R0, 3, R5
  MULS.L       RQ18, R5, RD25
  MOV.L        RD25, (R2, 112)
// p_enemy.c:895   P_LineAttack (actor, angle, MISSILERANGE, slope, damage);
  ADDU.L       RD27, R0, RQ9
  ADD          RQ8, 0, RQ10
  ADDU.L       RQ9, R0, RD11
  LUI          0x00008000, RD12
  ADD          RD21, 0, RD13
  ADD          RD25, 0, RD14
  BSR          P_LineAttack, R1

.L00C01CFF:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

P_AcsRun_PrintNumber:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 116)
// p_acspec.c:1049   t=run->prnbuf+run->prnpos;
  ADD          RQ9, 1072, RQ20
  MOVU.B       (RQ9, 1328), RQ18
  ADD          RQ20, RQ18, RQ8
// p_acspec.c:1050   sprintf(t, "%d", val);
  ADD          RQ8, 0, RQ10
  MOV          .L00C01D06, RQ11
  MOV.L        (R2, 116), RD12
  BSR          sprintf, R1
// p_acspec.c:1051   run->prnpos+=strlen(t);
  MOVU.B       (RQ9, 1328), RQ18
  ADD          RQ8, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ23
  AND          RQ18, 255, RQ22
  ADD          RQ22, RQ23, RQ21
  AND          RQ21, 255, RQ18
  MOVU.B       RQ18, (RQ9, 1328)

.L00C01D05:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

tk_mount_sysc:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV          .L00C01D0D, RQ8
// tk_vf_sysc.c:71   
  ADD          RQ8, 0, RQ10
  BSR          tk_dbg_printf, R1
// tk_vf_sysc.c:73   
  BSR          tk_alloc_mount, R1
  ADD          RQ10, 0, RQ18
// tk_vf_sysc.c:74   
  MOV          tk_vfile_sysc_vt, RQ9
  MOV.Q        RQ9, (RQ18, 0)
// tk_vf_sysc.c:82   
  ADD          RQ18, 0, RQ10
  BSR          tk_vf_addmount, R1

.L00C01D0C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ClearDrawSegs:
// r_bsp.c:70   {
  MOV          drawsegs, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, ds_p

.L00C01D0E:
  JSR          R1, 0, R0
  .balign 4

TK_Env_GetEnvVarI:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -456, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_env.c:48   
// tk_core/tk_env.c:89   
  ADD          R0, -1, RD9
  MOV.L        RD9, (R2, 92)
// tk_core/tk_env.c:90   
  ADD          R2, 128, RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        (R2, 120), RQ23
  MOV.Q        RQ23, (RQ8, 0)
// tk_core/tk_env.c:91   
  ADD          RQ9, 8, RQ8
  MOV.Q        (R2, 112), RQ22
  MOV.Q        RQ22, (RQ8, 0)
// tk_core/tk_env.c:92   
  ADD          RQ9, 16, RQ8
  MOV.L        (R2, 108), RD21
  MOV.L        RD21, (RQ8, 0)
// tk_core/tk_env.c:93   
  ADD          R2, 92, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4108, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_env.c:94   
  MOV.L        (R2, 92), RD10

.L00C01D14:
  ADD          R2, 456, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

tkdfs_writeutf8:
  ADD          R2, -40, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 24)
  ADD          R2, -296, R2
  MOV.Q        RQ10, (R2, 40)
  ADD          RD11, 0, RD22
// tk_core/tk_rwad.c:1002   
  MOV.Q        (R2, 40), RQ13
  MOV.Q        (RQ13, 0), RQ18
// tk_core/tk_rwad.c:1003   
  BRGE.L       128, RD22, .L00800F3C
// tk_core/tk_rwad.c:1004   
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RD22, (RQ9, 0)
  BSR          .L00800F3D, R0

.L00800F3C:
  LDIZ         2048, RD13
  BRGE.L       RD13, RD22, .L00800F3E
// tk_core/tk_rwad.c:1007   
  SHLR.Q       RD22, 6, RQ8
  AND          RQ8, 31, RQ8
  OR           RQ8, 192, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1009   
  AND          RD22, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
  BSR          .L00800F3F, R0

.L00800F3E:
  LUI          16, RD13
  BRGE.L       RD13, RD22, .L00800F40
// tk_core/tk_rwad.c:1011   
  SHLR.Q       RD22, 12, RQ8
  AND          RQ8, 15, RQ8
  OR           RQ8, 224, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1013   
  SHLR.Q       RD22, 6, RQ8
  AND          RQ8, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1014   
  AND          RD22, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
  BSR          .L00800F41, R0

.L00800F40:
  LUI          256, RD13
  BRGE.L       RD13, RD22, .L00800F42
// tk_core/tk_rwad.c:1016   
  SHLR.Q       RD22, 18, RQ8
  AND          RQ8, 7, RQ8
  OR           RQ8, 240, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1018   
  SHLR.Q       RD22, 12, RQ8
  AND          RQ8, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1019   
  SHLR.Q       RD22, 6, RQ8
  AND          RQ8, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)
// tk_core/tk_rwad.c:1020   
  AND          RD22, 63, RQ8
  OR           RQ8, 128, RQ23
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ18
  MOVU.B       RQ23, (RQ9, 0)

.L00800F42:

.L00800F41:

.L00800F3F:

.L00800F3D:
// tk_core/tk_rwad.c:1021   
  MOV.Q        (R2, 40), RQ13
  MOV.Q        RQ18, (RQ13, 0)
// tk_core/tk_rwad.c:1023   
  ADD          R0, 0, RD10

.L00C01D1A:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 40, R2
  JSR          R1, 0, R0

__remove:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// pdpc201/btshx_supa.c:609   
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          __unlink, R1

.L00C01D20:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

EV_BuildStairs:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.L        RD11, (R2, 148)
// p_floor.c:474   speed = 0;
  MOV.L        RD0, (R2, 116)
// p_floor.c:475   stairsize = 0;
  MOV.L        RD0, (R2, 120)
// p_floor.c:477   secnum = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 144)
// p_floor.c:478   rtn = 0;
  MOV.L        RD0, (R2, 124)
// p_floor.c:479   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801C22, R0

.L00801C20:
// p_floor.c:480   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 144), RD26
  SHAD.L       RD26, 7, RQ23
  ADD          RQ27, RQ23, RQ23
// p_floor.c:484   if (sec->specialdata)
  MOV.Q        (RQ23, 104), RQ8
  BRNE.Q       R0, RQ8, .L00801C22
// p_floor.c:488   rtn = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 124)
// p_floor.c:489   floor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_floor.c:490   P_AddThinker (&floor->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_floor.c:491   sec->specialdata = floor;
  MOV.Q        RQ18, (RQ23, 104)
// p_floor.c:492   floor->thinker.function.acp1 = (actionf_p1) T_MoveFloor;
  MOV          T_MoveFloor, RQ8
  ADD          RQ18, 0, RQ26
  ADD          RQ26, 16, RQ13
  MOV.Q        RQ8, (RQ13, 0)
// p_floor.c:493   floor->direction = 1;
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ18, 40)
// p_floor.c:494   floor->sector = sec;
  MOV.Q        RQ23, (RQ18, 32)
// p_floor.c:495   switch(type)
  MOV.L        (R2, 148), RD11
  BREQ.L       R0, RD11, .L00801C24
  MOV.L        (R2, 148), RD27
  BREQ.Q       1, RD27, .L00801C25
  BSR          .L00801C23, R0

.L00801C24:
// p_floor.c:497   case build8:
  LUI          4, RD27
  MOV.L        RD27, (R2, 116)
// p_floor.c:499   stairsize = 8*FRACUNIT;
  LUI          128, RD26
  MOV.L        RD26, (R2, 120)
// p_floor.c:500   break;
  BSR          .L00801C23, R0

.L00801C25:
// p_floor.c:501   case turbo16:
  LUI          64, RD27
  MOV.L        RD27, (R2, 116)
// p_floor.c:503   stairsize = 16*FRACUNIT;
  LUI          256, RD26
  MOV.L        RD26, (R2, 120)
// p_floor.c:504   break;

.L00801C23:
// p_floor.c:505   }
  MOV.L        (R2, 116), RD27
  MOV.L        RD27, (RQ18, 56)
// p_floor.c:507   height = sec->floorheight + stairsize;
  MOV.L        (RQ23, 0), RQ22
  MOV.L        (R2, 120), RD13
  ADDS.L       RQ22, RD13, RD26
// p_floor.c:508   floor->floordestheight = height;
  MOV.L        RD26, (RQ18, 52)
  MOV.L        RD26, (R2, 140)
// p_floor.c:510   texture = sec->floorpic;
  MOV.W        (RQ23, 8), RD12
  MOV.L        RD12, (R2, 132)
// p_floor.c:515   do

.L00801C26:
// p_floor.c:516   {
  MOV.L        RD0, (R2, 128)
// p_floor.c:518   for (i = 0;i < sec->linecount;i++)
  ADD          R0, 0, RD21
  MOV.L        (RQ23, 112), RQ22
  BRGE.L       RQ22, RD21, .L00801C2B

.L00801C29:
// p_floor.c:519   {
  MOV.Q        (RQ23, 120), RQ8
  MOV.Q        (RQ8, RD21), RQ9
  MOV.W        (RQ9, 24), RQ22
  ADD          R0, 4, RD27
  BTST.L       RD27, RQ22, .L00801C2A
// p_floor.c:523   tsec = (sec->lines[i])->frontsector;
  MOV.Q        (RQ23, 120), RQ9
  MOV.Q        (RQ9, RD21), RQ8
  MOV.Q        (RQ8, 64), RQ20
// p_floor.c:524   newsecnum = tsec-sectors;
  MOV.Q        sectors, RQ27
  SUB          RQ20, RQ27, RQ26
  SHAR.Q       RQ26, 7, RQ26
  ADDS.L       RQ26, 0, RD27
// p_floor.c:526   if (secnum != newsecnum)
  MOV.L        RD27, (R2, 136)
  MOV.L        (R2, 144), RD13
  BRNE.Q       RD27, RD13, .L00801C2A
// p_floor.c:529   tsec = (sec->lines[i])->backsector;
  MOV.Q        (RQ23, 120), RQ8
  MOV.Q        (RQ8, RD21), RQ9
  MOV.Q        (RQ9, 72), RQ20
// p_floor.c:530   newsecnum = tsec - sectors;
  MOV.Q        sectors, RQ27
  SUB          RQ20, RQ27, RQ26
  SHAR.Q       RQ26, 7, RQ26
  ADDS.L       RQ26, 0, RD27
  MOV.L        RD27, (R2, 136)
// p_floor.c:532   if (tsec->floorpic != texture)
  MOV.W        (RQ20, 8), RQ22
  MOV.L        (R2, 132), RD13
  BRNE.Q       RD13, RQ22, .L00801C2A
// p_floor.c:535   height += stairsize;
  MOV.L        (R2, 120), RD27
  MOV.L        (R2, 140), RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 140)
// p_floor.c:537   if (tsec->specialdata)
  MOV.Q        (RQ20, 104), RQ9
  BRNE.Q       R0, RQ9, .L00801C2A
// p_floor.c:540   sec = tsec;
  ADD          RQ20, 0, RQ23
// p_floor.c:541   secnum = newsecnum;
  MOV.L        (R2, 136), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 144)
// p_floor.c:542   floor = Z_Malloc (sizeof(*floor), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_floor.c:544   P_AddThinker (&floor->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_floor.c:546   sec->specialdata = floor;
  MOV.Q        RQ18, (RQ23, 104)
// p_floor.c:547   floor->thinker.function.acp1 = (actionf_p1) T_MoveFloor;
  MOV          T_MoveFloor, RQ9
  ADD          RQ18, 0, RQ13
  ADD          RQ13, 16, RQ12
  MOV.Q        RQ9, (RQ12, 0)
// p_floor.c:548   floor->direction = 1;
  ADD          R0, 1, RD11
  MOV.L        RD11, (RQ18, 40)
// p_floor.c:549   floor->sector = sec;
  MOV.Q        RQ23, (RQ18, 32)
// p_floor.c:550   floor->speed = speed;
  MOV.L        (R2, 116), RD10
  MOV.L        RD10, (RQ18, 56)
// p_floor.c:551   floor->floordestheight = height;
  MOV.L        (R2, 140), RD17
  MOV.L        RD17, (RQ18, 52)
// p_floor.c:552   ok = 1;
  MOV.L        RD11, (R2, 128)
// p_floor.c:553   break;
  BSR          .L00801C2B, R0

.L00801C2A:
  ADDS.L       RD21, 1, RD21
  MOV.L        (RQ23, 112), RQ22
  BRLT.L       RQ22, RD21, .L00801C29

.L00801C2B:
  MOV.L        (R2, 128), RD27
  BRNE.L       R0, RD27, .L00801C26

.L00801C22:
  MOV.Q        (R2, 152), RQ10
  MOV.L        (R2, 144), RD11
  BSR          P_FindSectorFromLineTag, R1
  ADD          RQ10, 0, RQ22
  MOV.L        RD22, (R2, 144)
  BRGE.L       R0, RQ22, .L00801C20

.L00801C21:
// p_floor.c:556   }
  MOV.L        (R2, 124), RD10

.L00C01D26:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_RemoveActiveCeiling:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
// p_ceilng.c:275   for (i = 0;i < MAXCEILINGS;i++)
  ADD          R0, 0, RD18

.L00801A32:
// p_ceilng.c:276   {
  MOV          activeceilings, RQ23
  MOV.Q        (RQ23, RD18), RQ9
  MOV.Q        (R2, 88), RQ23
  BRNE.Q       RQ23, RQ9, .L00801A35
// p_ceilng.c:278   {
  MOV          activeceilings, RQ23
  MOV.Q        (RQ23, RD18), RQ9
  MOV.Q        (RQ9, 32), RQ8
  MOV.Q        RQ0, (RQ8, 104)
// p_ceilng.c:280   P_RemoveThinker (&activeceilings[i]->thinker);
  MOV.Q        (RQ23, RD18), RQ9
  ADD          RQ9, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_ceilng.c:281   activeceilings[i] = NULL;
  MOV          activeceilings, RQ23
  MOV.Q        RQ0, (RQ23, RD18)
// p_ceilng.c:282   break;
  BSR          .L00801A34, R0

.L00801A35:
  ADDS.L       RD18, 1, RD18
  BRLT.L       30, RD18, .L00801A32

.L00801A34:

.L00C01D2C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

A_VileAttack:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:1348   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C01D32
// p_enemy.c:1351   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1353   if (!P_CheckSight (actor, actor->target) )
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C01D32
// p_enemy.c:1356   S_StartSound (actor, sfx_barexp);
  ADD          RQ9, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1357   P_DamageMobj (actor->target, actor, actor, 20);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          R0, 20, RD13
  BSR          P_DamageMobj, R1
// p_enemy.c:1358   actor->target->momz = 1000*FRACUNIT/actor->target->info->mass;
  MOV.Q        (RQ9, 176), RQ8
  MOV.Q        (RQ8, 136), RQ22
  MOV.L        (RQ22, 72), RQ18
  LUI          16000, RD27
  DIVS.L       RD27, RQ18, RQ21
  MOV.L        RQ21, (RQ8, 120)
// p_enemy.c:1360   an = actor->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ9, 56), RQ18
  SHLR         RQ18, 19, RD26
  MOV.L        RD26, (R2, 116)
// p_enemy.c:1362   fire = actor->tracer;
  MOV.Q        (RQ9, 224), RQ20
// p_enemy.c:1364   if (!fire)
  BREQ.Q       R0, RQ20, .L00C01D32
// p_enemy.c:1368   fire->x = actor->target->x - FixedMul (24*FRACUNIT, finecosine[an]);
  MOV.Q        (RQ9, 176), RQ22
  MOV.L        (RQ22, 24), RQ21
  MOV.Q        finecosine, RQ27
  MOV.L        (R2, 116), RD26
  MOV.L        (RQ27, RD26), RQ18
  LUI          384, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ21, RQ23, RQ18
  MOV.L        RQ18, (RQ20, 24)
// p_enemy.c:1369   fire->y = actor->target->y - FixedMul (24*FRACUNIT, finesine[an]);	
  MOV.Q        (RQ9, 176), RQ22
  MOV.L        (RQ22, 28), RQ21
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD26), RQ23
  LUI          384, RD10
  ADD          RQ23, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ21, RQ18, RQ23
  MOV.L        RQ23, (RQ20, 28)
// p_enemy.c:1370   P_RadiusAttack (fire, actor, 70 );
  ADD          RQ20, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 70, RD12
  BSR          P_RadiusAttack, R1

.L00C01D32:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

tk_putsn_v:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -392, R2
  ADD          RQ10, 0, RQ21
  ADD          RD11, 0, RD23
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
  ADD          R0, 252, RQ20
// tk_core/tk_puts.c:207   
// tk_core/tk_puts.c:216   
  MOV.Q        tk_puts_gbltemp, RQ27
  BRNE.Q       R0, RQ27, .L00800BE4
// tk_core/tk_puts.c:217   
  ADD          R0, 256, RD10
  ADD          R0, 7, RD11
  BSR          tk_malloc_cat, R1
  MOV.Q        RQ10, tk_puts_gbltemp

.L00800BE4:
// tk_core/tk_puts.c:221   
  BRGE.L       256, RD23, .L00800BE5
// tk_core/tk_puts.c:222   
  ADDS.L       RD23, 0, RQ22
  MOV.Q        tk_puts_gbltemp, RQ10
  ADD          RQ21, 0, RQ11
  ADD          RQ22, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_puts.c:224   
  MOV.Q        tk_puts_gbltemp, RQ27
  MOV.B        RD0, (RQ27, RD23)
// tk_core/tk_puts.c:226   
  ADD          R0, 0, RQ26
  MOV.Q        RQ26, (R2, 96)
// tk_core/tk_puts.c:227   
  ADD          R2, 128, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ27, (RQ25, 0)
// tk_core/tk_puts.c:228   
  ADD          RQ26, 8, RQ25
  MOV.L        RD23, (RQ25, 0)
// tk_core/tk_puts.c:229   
  ADD          R2, 96, RQ8
  ADD          RQ0, 0, RQ10
  LDIZ         4110, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ26, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_puts.c:230   
  BSR          .L00C01D38, R0

.L00800BE5:
// tk_core/tk_puts.c:233   
  ADD          RQ21, 0, RQ9
  ADD          RD23, 0, RD18
// tk_core/tk_puts.c:234   
  BSR          .L00800BE6, R0

.L00800BE7:
// tk_core/tk_puts.c:235   
  MOV.Q        tk_puts_gbltemp, RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 252, RQ12
  BSR          __memcpy32, R1
// tk_core/tk_puts.c:237   
  MOV.Q        tk_puts_gbltemp, RQ27
  MOV.B        RD0, (RQ27, 252)
// tk_core/tk_puts.c:239   
  ADD          R0, 0, RQ26
  MOV.Q        RQ26, (R2, 96)
// tk_core/tk_puts.c:240   
  ADD          R2, 128, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ27, (RQ25, 0)
// tk_core/tk_puts.c:241   
  ADD          RQ26, 8, RQ25
  MOV.L        RD20, (RQ25, 0)
// tk_core/tk_puts.c:242   
  ADD          R2, 96, RQ8
  ADD          RQ0, 0, RQ10
  LDIZ         4110, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ26, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_puts.c:244   
  ADD          RQ9, 252, RQ9
// tk_core/tk_puts.c:245   
  ADDS.L       RD18, -252, RD18

.L00800BE6:
  BRGE.L       252, RD18, .L00800BE7

.L00800BE8:
// tk_core/tk_puts.c:248   
  ADDS.L       RD18, 0, RQ22
  MOV.Q        tk_puts_gbltemp, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ22, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_puts.c:249   
  MOV.Q        tk_puts_gbltemp, RQ27
  MOV.B        RD0, (RQ27, RD18)
// tk_core/tk_puts.c:251   
  ADD          R0, 0, RQ26
  MOV.Q        RQ26, (R2, 96)
// tk_core/tk_puts.c:252   
  ADD          R2, 128, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ27, (RQ25, 0)
// tk_core/tk_puts.c:253   
  ADD          RQ26, 8, RQ25
  MOV.L        RD18, (RQ25, 0)
// tk_core/tk_puts.c:254   
  ADD          R2, 96, RQ8
  ADD          RQ0, 0, RQ10
  LDIZ         4110, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ26, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_puts.c:255   

.L00C01D38:
  ADD          R2, 392, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

TKDFS_TempNormalizeStringUtf8:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -896, R2
  ADD          RQ10, 0, RQ18
  MOV.L        RD11, (R2, 84)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/tk_rwad.c:1612   
// tk_core/tk_rwad.c:1617   
  ADD          R2, 96, RQ10
  ADD          RQ18, 0, RQ11
  MOV.L        (R2, 84), RD12
  BSR          TKDFS_NormalizePathUtf8, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_rwad.c:1619   
  BRLE.L       R0, RD9, .L00800F96
  ADD          R2, 96, RQ10
  ADD          RQ18, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00800F97
// tk_core/tk_rwad.c:1622   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01D3E, R0

.L00800F97:
// tk_core/tk_rwad.c:1624   
  ADD          R2, 96, RQ10
  BSR          tk_rstrdup, R1
  BSR          .L00C01D3E, R0
// tk_core/tk_rwad.c:1625   

.L00800F96:
// tk_core/tk_rwad.c:1628   
  ADD          RQ18, 0, RQ10

.L00C01D3E:
  ADD          R2, 896, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_LoadReject:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD21
// p_setup.c:1106   lsz = W_LumpLength (lump);
  ADD          RD21, 0, RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD18
// p_setup.c:1108   nsz = ((numsectors * numsectors)+7)/8;
  MOV.L        numsectors, RD20
  MULS.L       RD20, RD20, RQ8
  ADDS.L       RQ8, 7, RQ22
  ADD          RQ22, 0, RD9
  ADD          R0, 8, RD20
  DIVS.L       RD9, RD20, RD9
// p_setup.c:1109   if(lsz < nsz)
  BRGE.L       RD9, RD18, .L0080202F
// p_setup.c:1110   {
  MOV          rejectmatrix, RQ23
  ADDS.L       RD9, 0, RD10
  ADD          R0, 50, RD11
  ADD          RQ23, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, rejectmatrix
// p_setup.c:1112   W_ReadLump(lump, rejectmatrix);
  ADD          RD21, 0, RD10
  MOV.Q        rejectmatrix, RQ11
  BSR          W_ReadLump, R1
// p_setup.c:1113   P_PadRejectArray(rejectmatrix + lsz, nsz - lsz);
  SUBS.L       RD9, RD18, RQ8
  MOV.Q        rejectmatrix, RQ20
  ADD          RQ20, RD18, RQ23
  ADDU.L       RQ8, R0, RQ22
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RD11
  BSR          P_PadRejectArray, R1
  BSR          .L00802030, R0

.L0080202F:
// p_setup.c:1119   {
  ADD          RD21, 0, RD10
  ADD          R0, 50, RD11
  BSR          W_CacheLumpNum, R1
  MOV.Q        RQ10, rejectmatrix

.L00802030:

.L00C01D44:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

A_BrainScream:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
// p_enemy.c:1889   for (x=mo->x - 196*FRACUNIT ; x< mo->x + 320*FRACUNIT ; x+= FRACUNIT*8)
  MOV.L        (RQ21, 24), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFF3C0000, RD23
  ADDS.L       RQ9, 0x01400000, RQ18
  BRGE.L       RQ18, RD23, .L00801BB6

.L00801BB4:
// p_enemy.c:1890   {
  MOV.L        (RQ21, 28), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFEC00000, RD20
// p_enemy.c:1892   z = 128 + P_Random()*2*FRACUNIT;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  SHAD.L       RQ18, 1, RQ9
  SHAD.L       RQ9, 16, RQ18
  ADDS.L       RQ18, 128, RD27
  MOV.L        RD27, (R2, 100)
// p_enemy.c:1893   th = P_SpawnMobj (x,y,z, MT_ROCKET);
  ADD          RD23, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RD27, 0, RD12
  ADD          R0, 33, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ8
// p_enemy.c:1894   th->momz = P_Random()*512;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SHAD.L       RQ9, 9, RQ18
  MOV.L        RQ18, (RQ8, 120)
// p_enemy.c:1896   P_SetMobjState (th, S_BRAINEXPLODE1);
  ADD          RQ8, 0, RQ10
  ADD          R0, 799, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:1898   th->tics -= P_Random()&7;
  MOV.L        (RQ8, 144), RQ9
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 7, RQ22
  SUBS.L       RQ9, RQ22, RQ18
  MOV.L        RQ18, (RQ8, 144)
// p_enemy.c:1899   if (th->tics < 1)
  MOV.L        (RQ8, 144), RQ22
  BRGE.L       1, RQ22, .L00801BB7
// p_enemy.c:1900   th->tics = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ8, 144)

.L00801BB7:
  ADDS.L       RD23, 0x00080000, RD23
  MOV.L        (RQ21, 24), RQ9
  ADDS.L       RQ9, 0x01400000, RQ18
  BRLT.L       RQ18, RD23, .L00801BB4

.L00801BB6:
// p_enemy.c:1903   S_StartSound (NULL,sfx_bosdth);
  ADD          RQ0, 0, RQ10
  ADD          R0, 98, RD11
  BSR          S_StartSound, R1

.L00C01D4A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

R_InitData:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// r_data.c:2029   R_InitTextures ();
  BSR          R_InitTextures, R1
// r_data.c:2031   R_InitFlats ();
  BSR          R_InitFlats, R1
// r_data.c:2033   R_InitSpriteLumps ();
  BSR          R_InitSpriteLumps, R1
// r_data.c:2035   R_InitColormaps ();
  BSR          R_InitColormaps, R1

.L00C01D50:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

A_GunFlash:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:454   {
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 155, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:456   P_SetPsprite (player,ps_flash,weaponinfo[player->readyweapon].flashstate);
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ23
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ22
  ADD          RQ23, RQ22, RQ22
  MOV.L        (RQ22, 20), RQ18
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          RQ18, 0, RD12
  BSR          P_SetPsprite, R1

.L00C01D56:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

SMus_UpdateVolume:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 1, RD18
// i_bgb_mus_btsh.c:619   SMus_SpecialParm(1, snd_MusicVolume);
  ADD          R0, 1, RD10
  MOV.L        snd_MusicVolume, RD11
  BSR          SMus_SpecialParm, R1

.L00C01D5C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

A_HeadAttack:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:987   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C01D62
// p_enemy.c:990   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:991   if (P_CheckMeleeRange (actor))
  ADD          RQ9, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B5A
// p_enemy.c:992   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 6, RD22
  MODS.L       RQ23, RD22, RQ23
  ADDS.L       RQ23, 1, RQ18
  ADD          R0, 10, R5
  MULS.L       RQ18, R5, RD21
  MOV.L        RD21, (R2, 100)
// p_enemy.c:994   P_DamageMobj (actor->target, actor, actor, damage);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          RD21, 0, RD13
  BSR          P_DamageMobj, R1
// p_enemy.c:995   return;
  BSR          .L00C01D62, R0

.L00801B5A:
// p_enemy.c:999   P_SpawnMissile (actor, actor->target, MT_HEADSHOT);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 32, RD12
  BSR          P_SpawnMissile, R1

.L00C01D62:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BspiAttack:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 36, RD8
// p_enemy.c:932   {	
  MOV.Q        (RQ18, 176), RQ9
  BREQ.Q       R0, RQ9, .L00C01D68
// p_enemy.c:936   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:939   P_SpawnMissile (actor, actor->target, MT_ARACHPLAZ);
  MOV.Q        (RQ18, 176), RQ9
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 36, RD12
  BSR          P_SpawnMissile, R1

.L00C01D68:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

tk_fseek:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          R0, 0x14253647, RD20
// tk_core/tk_vfile.c:1038   
  BREQ.Q       R0, RQ9, .L00800B6D
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B6D
  BSR          .L00800B6E, R0

.L00800B6D:
// tk_core/tk_vfile.c:1040   

tk_fseek.debugbreak_L0318:
  BRK          792

.L00800B6E:
// tk_core/tk_vfile.c:1042   
  MOV.L        (RQ9, 92), RQ22
  BREQ.Q       RD20, RQ22, .L00800B6F
// tk_core/tk_vfile.c:1043   

tk_fseek.debugbreak_L0319:
  BRK          793

.L00800B6F:
// tk_core/tk_vfile.c:1045   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 104), RQ8
  BREQ.Q       R0, RQ8, .L00800B70
// tk_core/tk_vfile.c:1046   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 104), RQ23
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 112), RQ11
  MOV.L        (R2, 108), RD12
  ADD          RQ8, 0, RQ29
  JSR          RQ23, 0, R1
  BSR          .L00C01D78, R0

.L00800B70:
// tk_core/tk_vfile.c:1047   
  ADD          R0, -1, RQ10

.L00C01D78:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

__lva_conv_tof64:
  ADD          R2, -32, R2
  MOV.Q        R23, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// pdpc201/btshx_lva.c:223   
  SHLR.Q       RQ9, 62, RQ18
  BRNE.Q       1, RQ18, .L0080102C
// pdpc201/btshx_lva.c:224   
  ADDS.L       RQ9, 0, RQ8
  FLDCI        RQ8, RQ46
  FMOVDI       RQ46, RQ10
  BSR          .L00C01D80, R0

.L0080102C:
// pdpc201/btshx_lva.c:228   
  SHLR.Q       RQ9, 62, RQ18
  BRNE.Q       2, RQ18, .L0080102D
// pdpc201/btshx_lva.c:229   
  ADD          R0, 0, R5
  FMOVID       R5, RQ46
  MOV.Q        RQ46, (R2, 32)
// pdpc201/btshx_lva.c:231   
  SHLD.Q       RQ9, 2, RQ18
  ADD          R2, 32, RQ23
  MOV.Q        RQ18, (RQ23, 0)
// pdpc201/btshx_lva.c:232   
  MOV.Q        (R2, 32), RQ10
  BSR          .L00C01D80, R0

.L0080102D:
// pdpc201/btshx_lva.c:235   
  ADD          R0, 0xFFFFFFFFBFF00000, RQ10
  LDSH32       RQ10, 0, RQ10

.L00C01D80:
  ADD          R2, 368, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 32, R2
  JSR          R1, 0, R0
  .balign 4

ForeignTranslation:
// hu_stuff.c:390   {
  BRGE.L       128, RD10, .L00802C5D
  MOV          frenchKeyMap, RQ13
  MOV.B        (RQ13, RD10), RQ12
  AND          RQ12, 255, RQ11
  BSR          .L00802C5E, R0

.L00802C5D:
  AND          RD10, 255, RQ11

.L00802C5E:
  SHAD.Q       RQ11, 56, RQ12
  SHAR.Q       RQ12, 56, RQ12
  SHAD.Q       RQ12, 56, RD10
  SHAR.Q       RD10, 56, RD10

.L00C01D81:
  JSR          R1, 0, R0

wipe_exitMelt:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -376, R2
  MOV.L        RD10, (R2, 76)
  MOV.L        RD11, (R2, 72)
  MOV.L        RD12, (R2, 68)
// f_wipe.c:233   {
  MOV.Q        TU7A00C589/y, RQ10
  BSR          Z_Free, R1
// f_wipe.c:235   return 0;
  ADD          R0, 0, RD10

.L00C01D87:
  ADD          R2, 376, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_free_file:
// tk_core/tk_vfile.c:329   
  MOV.L        (RQ10, 92), RQ13
  ADD          R0, 0x14253647, RD12
  BREQ.Q       RD12, RQ13, .L00800A97
// tk_core/tk_vfile.c:331   

tk_free_file.debugbreak_L031F:
  BRK          799

.L00800A97:
// tk_core/tk_vfile.c:332   
  ADD          R0, 0x47362514, RD12
  MOV.L        RD12, (RQ10, 92)
// tk_core/tk_vfile.c:334   
  MOV.Q        tk_vf_freelist, RQ11
  MOV.Q        RQ11, (RQ10, 8)
// tk_core/tk_vfile.c:335   
  ADD          RQ10, 0, RQ11
  MOV.Q        RQ11, tk_vf_freelist

.L00C01D88:
  JSR          R1, 0, R0
  .balign 4

ST_refreshBackground:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -400, R2
  ADD          R0, 4, RD9
// st_stuff.c:534   if (st_statusbaron)
  MOV.L        TU7A00CB73/st_statusbaron, RD13
  BREQ.L       R0, RD13, .L00802B88
// st_stuff.c:535   {
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 4, RD12
  MOV.Q        TU7A00CB73/statusbar, RQ13
  BSR          V_DrawPatchDirect, R1
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L00802B89
// st_stuff.c:539   V_DrawPatchDirect(ST_FX, 0, BG, faceback);
  ADD          R0, 143, RD10
  ADD          R0, 0, RD11
  ADD          R0, 4, RD12
  MOV.Q        TU7A00CB73/faceback, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802B89:
// st_stuff.c:541   V_CopyRect(ST_X, 0, BG, ST_WIDTH, ST_HEIGHT, ST_X, ST_Y, FG);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 4, RD12
  ADD          R0, 320, RD13
  ADD          R0, 32, RD14
  ADD          R0, 0, RD15
  ADD          R0, 168, RD16
  ADD          R0, 0, RD17
  BSR          V_CopyRect, R1

.L00802B88:

.L00C01D94:
  ADD          R2, 400, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

AM_clearFB:
// am_map.c:843   k=colormaps[color];
  MOV.Q        colormaps, RQ13
  MOVU.W       (RQ13, RD10), RD12
// am_map.c:844   scr=fb; n=f_w*f_h;
  MOV.Q        TU7A00C41B/fb, RQ11
  ADD          RQ11, 0, RQ17
  MOV.L        TU7A00C41B/f_w, RD16
  MOV.L        TU7A00C41B/f_h, RD15
  MULS.L       RD16, RD15, RD14
// am_map.c:845   for(i=0; i<n; i++)
  ADD          R0, 0, RD31
  BRGE.L       RD14, RD31, .L008017F5

.L008017F3:
// am_map.c:846   scr[i]=k;
  MOVU.W       RD12, (RQ17, RD31)
  ADDS.L       RD31, 1, RD31
  BRLT.L       RD14, RD31, .L008017F3

.L008017F5:

.L00C01D95:
  JSR          R1, 0, R0

F_CastDrawer:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// f_finale.c:614   V_DrawPatch (0,0,0, W_CachePatchName ("BOSSBACK", PU_CACHE));
  MOV          .L00C01D9C, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:616   F_CastPrint (castorder[castnum].name);
  MOV          castorder, RQ27
  MOV.L        castnum, RD26
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          F_CastPrint, R1
// f_finale.c:619   sprdef = &sprites[caststate->sprite];
  MOV.Q        caststate, RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV.Q        sprites, RQ26
  SHAD.L       RQ9, 4, RQ21
  ADD          RQ26, RQ21, RQ21
// f_finale.c:620   sprframe = &sprdef->spriteframes[ caststate->frame & FF_FRAMEMASK];
  MOV.Q        (RQ21, 8), RQ18
  MOV.L        (RQ27, 4), RQ9
  AND          RQ9, 32767, RQ8
  ADD          R0, 28, R5
  MUL.L        RQ8, R5, RQ22
  ADD          RQ18, RQ22, RQ22
// f_finale.c:621   lump = sprframe->lump[0];
  ADD          RQ22, 4, RQ18
  MOV.W        (RQ18, 0), RD20
// f_finale.c:622   flip = (boolean)sprframe->flip[0];
  ADD          RQ22, 20, RQ18
  MOVU.B       (RQ18, 0), RQ9
  MOV.L        RD9, (R2, 108)
// f_finale.c:625   patch = W_CachePatchNum (lump+firstspritelump, PU_CACHE);
  MOV.L        firstspritelump, RD27
  ADDS.L       RD20, RD27, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ23
// f_finale.c:626   if (flip)
  MOV.L        (R2, 108), RD27
  BREQ.L       R0, RD27, .L00801316
// f_finale.c:627   V_DrawPatchFlipped (160,170,0,patch);
  ADD          R0, 160, RD10
  ADD          R0, 170, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatchFlipped, R1
  BSR          .L00801317, R0

.L00801316:
// f_finale.c:629   V_DrawPatch (160,170,0,patch);
  ADD          R0, 160, RD10
  ADD          R0, 170, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatch, R1

.L00801317:

.L00C01D9B:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

NetbufferChecksum:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
// d_net.c:109   c = 0x1234567;
  ADD          R0, 0x01234567, RD21
// d_net.c:116   l = (NetbufferSize () -
  BSR          NetbufferSize, R1
  ADDS.L       RQ10, 0, RQ8
  ADD          RQ0, 4, RQ23
  ADDS.L       RQ23, 0, RQ9
  SUBS.L       RQ8, RQ9, RQ22
  ADD          RQ22, 0, RD20
  ADD          R0, 4, RD27
  DIVS.L       RD20, RD27, RD20
// d_net.c:118   for (i=0 ; i<l ; i++)
  ADD          R0, 0, RD18
  MOV.L        RD20, (R2, 108)
  BRGE.L       RD20, RD18, .L00801434

.L00801432:
// d_net.c:119   c += ((unsigned *)&netbuffer->retransmitfrom)[i] * (i+1);
  MOV.Q        netbuffer, RQ20
  ADD          RQ20, 4, RQ23
  MOVU.L       (RQ23, RD18), RQ9
  ADDS.L       RD18, 1, RQ22
  MULU.L       RQ9, RQ22, RQ8
  ADDU.L       RD21, RQ8, RD21
  ADDS.L       RD18, 1, RD18
  MOV.L        (R2, 108), RD20
  BRLT.L       RD20, RD18, .L00801432

.L00801434:
// d_net.c:121   return c & NCMD_CHECKSUM;
  AND          RD21, 0x0FFFFFFF, RQ9
  ADDU.L       RQ9, R0, RD10

.L00C01DA2:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

tkgQueryDisplay:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -392, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.Q        RQ12, (R2, 128)
  MOV.Q        RQ13, (R2, 120)
// tk_gdi/tkg_display.c:193   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:194   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 32), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 140), RD11
  MOVU.L       (R2, 136), RD12
  MOV.Q        (R2, 128), RQ13
  MOV.Q        (R2, 120), RQ14
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C01DA8:
  ADD          R2, 392, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_checkForAccelerate:
// wi_stuff.c:1511   for (i=0, player = players ; i<MAXPLAYERS ; i++, player++)
  ADD          R0, 0, RD13
  MOV          players, RQ12
  ADD          RQ12, 0, RQ11
  BRGE.L       4, RD13, .L00802A84

.L00802A82:
// wi_stuff.c:1512   {
  MOV          playeringame, RQ12
  MOV.L        (RQ12, RD13), RQ10
  BREQ.L       R0, RQ10, .L00802A85
  ADD          RQ11, 12, RQ12
  MOVU.B       (RQ12, 7), RQ10
  ADD          R0, 1, RD17
  BTST.L       RD17, RQ10, .L00802A86
  MOV.L        (RQ11, 192), RQ10
  BRNE.L       R0, RQ10, .L00802A87
// wi_stuff.c:1518   acceleratestage = 1;
  ADD          R0, 1, RD17
  MOV.L        RD17, TU7A00CB85/acceleratestage

.L00802A87:
// wi_stuff.c:1519   player->attackdown = true;
  ADD          R0, 1, RD17
  MOV.L        RD17, (RQ11, 192)
  BSR          .L00802A88, R0

.L00802A86:
// wi_stuff.c:1522   player->attackdown = false;
  MOV.L        RD0, (RQ11, 192)

.L00802A88:
  ADD          RQ11, 12, RQ12
  MOVU.B       (RQ12, 7), RQ10
  ADD          R0, 2, RD17
  BTST.L       RD17, RQ10, .L00802A89
  MOV.L        (RQ11, 196), RQ10
  BRNE.L       R0, RQ10, .L00802A8A
// wi_stuff.c:1526   acceleratestage = 1;
  ADD          R0, 1, RD17
  MOV.L        RD17, TU7A00CB85/acceleratestage

.L00802A8A:
// wi_stuff.c:1527   player->usedown = true;
  ADD          R0, 1, RD17
  MOV.L        RD17, (RQ11, 196)
  BSR          .L00802A8B, R0

.L00802A89:
// wi_stuff.c:1530   player->usedown = false;
  MOV.L        RD0, (RQ11, 196)

.L00802A8B:

.L00802A85:
  ADDS.L       RD13, 0, RQ10
  ADDS.L       RD13, 1, RD13
  ADD          RQ11, 0, RQ17
  ADD          RQ11, 320, RQ11
  BRLT.L       4, RD13, .L00802A82

.L00802A84:

.L00C01DA9:
  JSR          R1, 0, R0
  .balign 4

P_SpawnMapThing:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ23
// p_mobj.c:759   if (mthing->type == 11)
  MOV.W        (RQ23, 10), RQ18
  BRNE.Q       11, RQ18, .L008022B6
  MOV          deathmatchstarts, RQ27
  ADD          R0, 10, RD26
  ADD          R0, 20, R5
  MUL.L        RD26, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        deathmatch_p, RQ27
  BRGE.Q       RQ13, RQ27, .L008022B7
// p_mobj.c:762   {
  MOV.Q        deathmatch_p, RQ27
  MOV.Q        (RQ23, 0), RQ10
  MOV.Q        (RQ23, 8), RQ11
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.L        (RQ23, 16), RQ10
  MOV.L        RQ10, (RQ27, 16)
// p_mobj.c:764   deathmatch_p++;
  MOV.Q        deathmatch_p, RQ27
  ADD          RQ27, 20, RQ27
  MOV.Q        RQ27, deathmatch_p

.L008022B7:
// p_mobj.c:765   }
  BSR          .L00C01DAF, R0

.L008022B6:
// p_mobj.c:770   if (mthing->type <= 4)
  MOV.W        (RQ23, 10), RQ18
  BRGT.L       4, RQ18, .L008022B8
// p_mobj.c:773   playerstarts[mthing->type-1] = *mthing;
  ADD          RQ23, 0, RQ27
  MOV.W        (RQ23, 10), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV          playerstarts, RQ26
  ADD          R0, 20, R5
  MUL.L        RQ9, R5, RQ10
  ADD          RQ26, RQ10, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        (RQ27, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.L        (RQ27, 16), RQ11
  MOV.L        RQ11, (RQ10, 16)
  MOV.L        deathmatch, RD26
  BRNE.L       R0, RD26, .L008022B9
// p_mobj.c:781   P_SpawnPlayer (mthing);
  ADD          RQ23, 0, RQ10
  BSR          P_SpawnPlayer, R1

.L008022B9:
// p_mobj.c:783   return;
  BSR          .L00C01DAF, R0

.L008022B8:
// p_mobj.c:787   if (!netgame && !p_map_hexenfmt && (mthing->options & 16) )
  MOV.L        netgame, RD27
  CMPEQ.Q      RD27, R0, RQ18
  MOV.L        p_map_hexenfmt, RD27
  CMPEQ.Q      RD27, R0, RQ9
  BTST.L       RQ9, RQ18, .L008022BA
  MOV.W        (RQ23, 12), RQ18
  ADD          R0, 16, RD27
  BTST.L       RD27, RQ18, .L008022BA
  BSR          .L00C01DAF, R0

.L008022BA:
// p_mobj.c:790   if (gameskill == sk_baby)
  MOV.L        gameskill, RD27
  BRNE.L       R0, RD27, .L008022BC
// p_mobj.c:791   bit = 1;
  ADD          R0, 1, RD20
  BSR          .L008022BD, R0

.L008022BC:
  MOV.L        gameskill, RD27
  BRNE.Q       4, RD27, .L008022BE
// p_mobj.c:793   bit = 4;
  ADD          R0, 4, RD20
  BSR          .L008022BF, R0

.L008022BE:
// p_mobj.c:795   bit = 1<<(gameskill-1);
  MOV.L        gameskill, RD27
  ADDS.L       RD27, -1, RQ9
  ADD          R0, 1, RD27
  SHAD.L       RD27, RQ9, RD20

.L008022BF:

.L008022BD:
// p_mobj.c:797   if (!(mthing->options & bit) )
  MOV.W        (RQ23, 12), RQ18
  BTST.L       RD20, RQ18, .L00C01DAF
// p_mobj.c:801   for (i=0 ; i< NUMMOBJTYPES ; i++)
  ADD          R0, 0, RD8

.L008022C0:
// p_mobj.c:802   {
  MOV.W        (RQ23, 10), RQ9
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  BREQ.Q       RQ18, RQ9, .L008022C2
  ADDS.L       RD8, 1, RD8
  BRLT.L       141, RD8, .L008022C0

.L008022C2:
// p_mobj.c:807   if (i==NUMMOBJTYPES)
  ADD          R0, 141, RD27
  BREQ.Q       RD27, RD8, .L00C01DAF
// p_mobj.c:818   if (deathmatch && mobjinfo[i].flags & MF_NOTDMATCH)
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L008022C3
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 84), RQ18
  LUI          8192, RD27
  BTST.L       RD27, RQ18, .L008022C3
  BSR          .L00C01DAF, R0

.L008022C3:
// p_mobj.c:822   if (nomonsters
  MOV.L        nomonsters, RD27
  BREQ.L       R0, RD27, .L008022C5
  ADD          R0, 18, RD27
  BREQ.Q       RD27, RD8, .L00C01DAF
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 84), RQ18
  LUI          1024, RD27
  BTSTN.L      RD27, RQ18, .L00C01DAF

.L008022C5:
// p_mobj.c:830   x = mthing->x << FRACBITS;
  MOV.W        (RQ23, 2), RQ9
  SHAD.L       RQ9, 16, RD27
  MOV.L        RD27, (R2, 132)
// p_mobj.c:831   y = mthing->y << FRACBITS;
  MOV.W        (RQ23, 4), RQ18
  SHAD.L       RQ18, 16, RD26
  MOV.L        RD26, (R2, 128)
// p_mobj.c:833   if (mobjinfo[i].flags & MF_SPAWNCEILING)
  MOV          mobjinfo, RQ13
  ADD          R0, 92, R5
  MUL.L        RD8, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 84), RQ18
  ADD          R0, 256, RD13
  BTST.L       RD13, RQ18, .L008022C8
// p_mobj.c:834   z = ONCEILINGZ;
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, (R2, 124)
  BSR          .L008022C9, R0

.L008022C8:
// p_mobj.c:836   z = ONFLOORZ;
  LUI          0xFFFFFFFFFFF80000, RD27
  MOV.L        RD27, (R2, 124)

.L008022C9:
// p_mobj.c:838   mobj = P_SpawnMobj (x,y,z, i);
  MOV.L        (R2, 132), RD10
  MOV.L        (R2, 128), RD11
  MOV.L        (R2, 124), RD12
  ADDS.L       RD8, 0, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ22
// p_mobj.c:839   mobj->spawnpoint = *mthing;
  ADD          RQ23, 0, RQ27
  ADD          RQ22, 204, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        (RQ27, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.L        (RQ27, 16), RQ11
  MOV.L        RQ11, (RQ10, 16)
// p_mobj.c:841   if (mobj->tics > 0)
  MOV.L        (RQ22, 144), RQ9
  BRLE.L       R0, RQ9, .L008022CA
// p_mobj.c:842   mobj->tics = 1 + (P_Random () % mobj->tics);
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ22, 144), RQ9
  MODS.L       RQ18, RQ9, RQ21
  ADDS.L       RQ21, 1, RQ18
  MOV.L        RQ18, (RQ22, 144)

.L008022CA:
// p_mobj.c:843   if (mobj->flags & MF_COUNTKILL)
  MOV.L        (RQ22, 160), RQ9
  LUI          1024, RD27
  BTST.L       RD27, RQ9, .L008022CB
// p_mobj.c:844   totalkills++;
  MOV.L        totalkills, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, totalkills

.L008022CB:
// p_mobj.c:845   if (mobj->flags & MF_COUNTITEM)
  MOV.L        (RQ22, 160), RQ21
  LUI          2048, RD27
  BTST.L       RD27, RQ21, .L008022CC
// p_mobj.c:846   totalitems++;
  MOV.L        totalitems, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, totalitems

.L008022CC:
// p_mobj.c:848   mobj->angle = ANG45 * (mthing->angle/45);
  MOV.W        (RQ23, 8), RQ18
  ADD          R0, 45, R5
  DIVS.L       RQ18, R5, RQ9
  SHAD.L       RQ9, 29, RQ21
  MOVU.L       RQ21, (RQ22, 56)
// p_mobj.c:849   if (mthing->options & MTF_AMBUSH)
  MOV.W        (RQ23, 12), RQ18
  ADD          R0, 8, RD27
  BTST.L       RD27, RQ18, .L008022CD
// p_mobj.c:850   mobj->flags |= MF_AMBUSH;
  MOV.L        (RQ22, 160), RQ9
  OR           RQ9, 32, RQ21
  MOV.L        RQ21, (RQ22, 160)

.L008022CD:
// p_mobj.c:852   if (mthing->options & 16)
  MOV.W        (RQ23, 12), RQ18
  ADD          R0, 16, RD27
  BTST.L       RD27, RQ18, .L008022CE
// p_mobj.c:855   mobj->flags |= MF_DORMANT;
  MOV.L        (RQ22, 160), RQ9
  OR           RQ9, 0x10000000, RQ21
  MOV.L        RQ21, (RQ22, 160)

.L008022CE:

.L00C01DAF:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_StrdupPfx:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 100)
// tk_core/lva_strdup.c:158   
  ADD          RQ21, 0, RQ10
  BSR          TKMM_LVA_HashName, R1
  ADD          RQ10, 0, RD22
// tk_core/lva_strdup.c:159   
  SHAR         RD22, 16, RQ8
  AND          RQ8, 255, RD22
// tk_core/lva_strdup.c:161   
  MOV          tk_lva_strbuf_hash, RQ27
  MOV.Q        (RQ27, RD22), RQ9
// tk_core/lva_strdup.c:162   
  BSR          .L00800DF0, R0

.L00800DF1:
// tk_core/lva_strdup.c:163   
  ADD          RQ9, 16, RQ18
  ADD          RQ18, 0, RQ23
// tk_core/lva_strdup.c:165   
  ADD          RQ23, -1, RQ18
  MOV.B        (RQ18, 0), RQ8
  MOV.L        (R2, 100), RD27
  BRNE.Q       RD27, RQ8, .L00800DF2
  ADD          RQ23, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00800DF2

.L00800DF3:
// tk_core/lva_strdup.c:166   
  ADD          RQ23, 0, RQ10
  BSR          .L00C01DB5, R0

.L00800DF2:
// tk_core/lva_strdup.c:167   
  MOV.Q        (RQ9, 0), RQ9

.L00800DF0:
  BRNE.Q       R0, RQ9, .L00800DF1

.L00800DF4:
// tk_core/lva_strdup.c:170   
  ADD          RQ21, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RD20
// tk_core/lva_strdup.c:171   
  ADDS.L       RD20, 15, RQ8
  AND          RQ8, -16, RD26
  MOV.L        RD26, (R2, 96)
// tk_core/lva_strdup.c:173   
  BRLE.L       512, RD20, .L00800DF5
// tk_core/lva_strdup.c:174   
  ADDS.L       RD20, 24, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ9
// tk_core/lva_strdup.c:176   
  ADD          RQ9, 16, RQ18
  ADD          RQ18, 0, RQ23
// tk_core/lva_strdup.c:177   
  ADD          RQ23, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strcpy, R1
// tk_core/lva_strdup.c:180   
  ADD          RQ23, -2, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  MOV.L        (R2, 100), RD12
  BSR          TKMM_LVA_StrEncodeLengthRev, R1
// tk_core/lva_strdup.c:181   
  MOV          tk_lva_strbuf_hash, RQ27
  MOV.Q        (RQ27, RD22), RQ18
  MOV.Q        RQ18, (RQ9, 0)
// tk_core/lva_strdup.c:182   
  MOV.Q        RQ9, (RQ27, RD22)
// tk_core/lva_strdup.c:183   
  ADD          RQ23, 0, RQ10
  BSR          .L00C01DB5, R0

.L00800DF5:
// tk_core/lva_strdup.c:186   
  MOV.Q        tk_lva_strbuf_buf, RQ27
  BRNE.Q       R0, RQ27, .L00800DF6
// tk_core/lva_strdup.c:187   
  LUI          1, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ27
// tk_core/lva_strdup.c:189   
  ADD          RQ27, 4096, RQ26
  MOV.Q        RQ26, tk_lva_strbuf_end
// tk_core/lva_strdup.c:190   
  MOV.Q        RQ27, tk_lva_strbuf_pos
  MOV.Q        RQ27, tk_lva_strbuf_buf

.L00800DF6:
// tk_core/lva_strdup.c:194   
  MOV.Q        tk_lva_strbuf_pos, RQ27
  MOV.L        (R2, 96), RD26
  ADD          RQ27, RD26, RQ18
  ADD          RQ18, 16, RQ27
  MOV.Q        tk_lva_strbuf_end, RQ25
  BRLT.Q       RQ25, RQ27, .L00800DF7
// tk_core/lva_strdup.c:195   
  LUI          1, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ27
// tk_core/lva_strdup.c:197   
  ADD          RQ27, 4096, RQ26
  MOV.Q        RQ26, tk_lva_strbuf_end
// tk_core/lva_strdup.c:198   
  MOV.Q        RQ27, tk_lva_strbuf_pos
  MOV.Q        RQ27, tk_lva_strbuf_buf

.L00800DF7:
// tk_core/lva_strdup.c:201   
  MOV.Q        tk_lva_strbuf_pos, RQ27
  ADD          RQ27, 0, RQ9
// tk_core/lva_strdup.c:203   
  MOV.L        (R2, 96), RD26
  ADD          RQ9, RD26, RQ18
  ADD          RQ18, 16, RQ27
  MOV.Q        RQ27, tk_lva_strbuf_pos
// tk_core/lva_strdup.c:204   
  ADD          RQ9, 16, RQ27
  ADD          RQ27, 0, RQ23
// tk_core/lva_strdup.c:205   
  ADD          RQ23, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strcpy, R1
// tk_core/lva_strdup.c:208   
  ADD          RQ23, -2, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  MOV.L        (R2, 100), RD12
  BSR          TKMM_LVA_StrEncodeLengthRev, R1
// tk_core/lva_strdup.c:209   
  MOV          tk_lva_strbuf_hash, RQ25
  MOV.Q        (RQ25, RD22), RQ27
  MOV.Q        RQ27, (RQ9, 0)
// tk_core/lva_strdup.c:210   
  MOV.Q        RQ9, (RQ25, RD22)
// tk_core/lva_strdup.c:211   
  ADD          RQ23, 0, RQ10

.L00C01DB5:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

R_InitPlanes:
// r_plane.c:105   void R_InitPlanes (void)

.L00C01DB6:
  JSR          R1, 0, R0

tkmm_lva_oprxor_bigig:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -600, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:379   
// tk_core/lva_tagopr.c:381   
  ADD          R2, 112, RQ10
  ADD          RQ18, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:382   
  ADD          R2, 176, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:383   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 240, RQ12
  BSR          tkmm_bigint_xor, R1
// tk_core/lva_tagopr.c:384   
  ADD          R2, 240, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C01DBC:
  ADD          R2, 600, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnPuff:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RD12, 0, RD22
// p_mobj.c:879   z += ((P_Random()-P_Random())<<10);
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ18, RQ23, RQ8
  SHAD.L       RQ8, 10, RQ18
  ADDS.L       RD22, RQ18, RD22
// p_mobj.c:881   th = P_SpawnMobj (x,y,z, MT_PUFF);
  MOV.L        (R2, 108), RD10
  MOV.L        (R2, 104), RD11
  ADD          RD22, 0, RD12
  ADD          R0, 37, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ9
// p_mobj.c:882   th->momz = FRACUNIT;
  LUI          16, RD21
  MOV.L        RD21, (RQ9, 120)
// p_mobj.c:883   th->tics -= P_Random()&3;
  MOV.L        (RQ9, 144), RQ23
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ8
  AND          RQ8, 3, RQ18
  SUBS.L       RQ23, RQ18, RQ8
  MOV.L        RQ8, (RQ9, 144)
// p_mobj.c:885   if (th->tics < 1)
  MOV.L        (RQ9, 144), RQ18
  BRGE.L       1, RQ18, .L008022CF
// p_mobj.c:886   th->tics = 1;
  ADD          R0, 1, RD21
  MOV.L        RD21, (RQ9, 144)

.L008022CF:
// p_mobj.c:889   if (attackrange == MELEERANGE)
  MOV.L        attackrange, RD21
  LUI          1024, RD20
  BRNE.Q       RD20, RD21, .L008022D0
// p_mobj.c:890   P_SetMobjState (th, S_PUFF3);
  ADD          RQ9, 0, RQ10
  ADD          R0, 95, RD11
  BSR          P_SetMobjState, R1

.L008022D0:

.L00C01DC2:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

G_PlayerReborn:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD8
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// g_game.c:826   int		frags[MAXPLAYERS];
// g_game.c:831   memcpy (frags,players[player].frags,sizeof(frags));
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 100, RQ27
  MOV.Q        RQ27, (R2, 80)
  ADD          R2, 112, RQ25
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        (RQ27, 8), RQ11
  MOV.Q        RQ10, (RQ25, 0)
  MOV.Q        RQ11, (RQ25, 8)
// g_game.c:832   killcount = players[player].killcount;
  MOV          players, RQ24
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        (RQ26, 208), RD22
// g_game.c:833   itemcount = players[player].itemcount;
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        (RQ26, 212), RD21
// g_game.c:834   secretcount = players[player].secretcount;
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        (RQ26, 216), RD20
// g_game.c:836   p = &players[player];
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ9
  ADD          RQ24, RQ9, RQ9
// g_game.c:837   memset (p, 0, sizeof(*p));
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 320, RQ12
  BSR          memset, R1
// g_game.c:839   memcpy (players[player].frags, frags, sizeof(players[player].frags));
  MOV          players, RQ24
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  ADD          RQ26, 100, RQ27
  MOV.Q        RQ27, (R2, 80)
  MOV.Q        (RQ25, 0), RQ10
  MOV.Q        (RQ25, 8), RQ11
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
// g_game.c:840   players[player].killcount = killcount;
  MOV          players, RQ24
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        RD22, (RQ26, 208)
// g_game.c:841   players[player].itemcount = itemcount;
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        RD21, (RQ26, 212)
// g_game.c:842   players[player].secretcount = secretcount;
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ24, RQ26, RQ26
  MOV.L        RD20, (RQ26, 216)
// g_game.c:844   p->usedown = p->attackdown = true;	// don't do anything immediately
  ADD          R0, 1, RD24
  MOV.L        RD24, (RQ9, 192)
  MOV.L        RD24, (RQ9, 196)
// g_game.c:845   p->playerstate = PST_LIVE;
  MOV.L        RD0, (RQ9, 8)
// g_game.c:846   p->health = MAXHEALTH;
  ADD          R0, 100, RD13
  MOV.L        RD13, (RQ9, 36)
// g_game.c:847   p->readyweapon = p->pendingweapon = wp_pistol;
  MOV.L        RD24, (RQ9, 120)
  MOV.L        RD24, (RQ9, 116)
// g_game.c:848   p->weaponowned[wp_fist] = true;
  ADD          RQ9, 124, RQ27
  MOV.L        RD24, (RQ27, 0)
// g_game.c:849   p->weaponowned[wp_pistol] = true;
  MOV.L        RD24, (RQ27, 4)
// g_game.c:850   p->ammo[am_clip] = 50;
  ADD          RQ9, 160, RQ27
  ADD          R0, 50, RD12
  MOV.L        RD12, (RQ27, 0)
  MOV.Q        RQ27, (R2, 80)
// g_game.c:852   for (i=0 ; i<NUMAMMO ; i++)
  ADD          R0, 0, RD18

.L00801590:
// g_game.c:853   p->maxammo[i] = maxammo[i];
  MOV          maxammo, RQ27
  MOV.L        (RQ27, RD18), RQ23
  ADD          RQ9, 176, RQ27
  MOV.L        RQ23, (RQ27, RD18)
  MOV.Q        RQ27, (R2, 80)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00801590

.L00801592:

.L00C01DC8:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

SMus_SpecialParm:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
// i_bgb_mus_btsh.c:623   {
// i_bgb_mus_btsh.c:627   mcmd=&t_mcmd;
  ADD          R2, 80, RQ9
  ADD          RQ9, 0, RQ18
// i_bgb_mus_btsh.c:628   mcmd->op=17;
  ADD          R0, 17, RD8
  MOVU.B       RD8, (RQ18, 0)
// i_bgb_mus_btsh.c:629   mcmd->ch=0;
  MOVU.B       RD0, (RQ18, 1)
// i_bgb_mus_btsh.c:630   mcmd->d0=parm;
  MOV.L        (R2, 108), RD23
  MOVU.B       RD23, (RQ18, 2)
// i_bgb_mus_btsh.c:631   mcmd->d1=val;
  MOV.L        (R2, 104), RD22
  MOVU.B       RD22, (RQ18, 3)
// i_bgb_mus_btsh.c:634   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ18, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:635   return(0);
  ADD          R0, 0, RD10

.L00C01DCE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_bigint_sub:
// tk_core/tku_bigint.c:158   

.L00C01DCF:
  JSR          R1, 0, R0

TryRunTics:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
// d_net.c:675   i = I_GetTime ();
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RD18
// d_net.c:677   entertic = NetDivTicdup(i);
  ADD          RD18, 0, RD10
  BSR          NetDivTicdup, R1
  ADD          RQ10, 0, RD27
// d_net.c:678   realtics = entertic - oldentertics;
  MOV.L        TryRunTics/oldentertics!58, RD25
  SUBS.L       RD27, RD25, RD26
  MOV.L        RD26, (R2, 136)
// d_net.c:679   oldentertics = entertic;
  ADD          RD27, 0, RD25
  MOV.L        RD25, TryRunTics/oldentertics!58
  MOV.L        RD27, (R2, 140)
// d_net.c:684   NetUpdate ();
  BSR          NetUpdate, R1
// d_net.c:686   lowtic = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD20
// d_net.c:687   numplaying = 0;
  MOV.L        RD0, (R2, 124)
// d_net.c:688   for (i=0 ; i<doomcom->numnodes ; i++)
  ADD          R0, 0, RD18
  MOV.Q        doomcom, RQ25
  MOV.W        (RQ25, 16), RQ9
  BRGE.L       RQ9, RD18, .L008014AE

.L008014AC:
// d_net.c:689   {
  MOV          nodeingame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L008014AF
// d_net.c:691   {
  MOV.L        (R2, 124), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 124)
  MOV          nettics, RQ26
  MOV.L        (RQ26, RD18), RQ9
  BRGE.L       RD20, RQ9, .L008014B0
// d_net.c:694   lowtic = nettics[i];
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD18), RD20

.L008014B0:

.L008014AF:
  ADDS.L       RD18, 1, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ9
  BRLT.L       RQ9, RD18, .L008014AC

.L008014AE:
// d_net.c:698   availabletics = lowtic - NetDivTicdup(gametic);
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RD20, RQ9, RD27
// d_net.c:701   if (realtics < availabletics-1)
  ADDS.L       RD27, -1, RQ9
  MOV.L        RD27, (R2, 132)
  MOV.L        (R2, 136), RD26
  BRGE.L       RQ9, RD26, .L008014B1
// d_net.c:702   counts = realtics+1;
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, 1, RD26
  MOV.L        RD26, (R2, 128)
  BSR          .L008014B2, R0

.L008014B1:
  MOV.L        (R2, 136), RD27
  MOV.L        (R2, 132), RD26
  BRGE.L       RD26, RD27, .L008014B3
// d_net.c:704   counts = realtics;
  MOV.L        (R2, 136), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 128)
  BSR          .L008014B4, R0

.L008014B3:
// d_net.c:706   counts = availabletics;
  MOV.L        (R2, 132), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 128)

.L008014B4:

.L008014B2:
// d_net.c:708   if (counts < 1)
  MOV.L        (R2, 128), RD27
  BRGE.L       1, RD27, .L008014B5
// d_net.c:709   counts = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 128)

.L008014B5:
// d_net.c:711   frameon++;
  MOV.L        frameon, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, frameon
// d_net.c:713   if (debugfile)
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L008014B6
// d_net.c:714   fprintf (debugfile,
  MOV.Q        debugfile, RQ10
  MOV          .L00C01DD6, RQ11
  MOV.L        (R2, 136), RD12
  MOV.L        (R2, 132), RD13
  MOV.L        (R2, 128), RD14
  BSR          fprintf, R1

.L008014B6:
// d_net.c:718   if (!demoplayback)
  MOV.L        demoplayback, RD27
  BRNE.L       R0, RD27, .L008014B7
// d_net.c:722   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008014B8:
// d_net.c:723   if (playeringame[i])
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BRNE.L       R0, RQ9, .L008014BA
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008014B8

.L008014BA:
  ADD          R0, 4, RD27
  BRGE.L       RD27, RD18, .L00C01DD5
  MOV.L        consoleplayer, RD27
  BREQ.Q       RD18, RD27, .L008014BB
  MOV          nettics, RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV          nodeforplayer, RQ26
  MOV.L        (RQ26, RD18), RQ23
  MOV.L        (RQ27, RQ23), RQ8
  BRGT.L       RQ8, RQ9, .L008014BC
// d_net.c:734   {
  MOV.L        gametime, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, gametime

.L008014BC:
// d_net.c:737   }
  MOV          nodeforplayer, RQ27
  MOV.L        (RQ27, RD18), RQ9
  MOV          nettics, RQ27
  MOV.L        (RQ27, RQ9), RQ23
  MOV.L        oldnettics, RD26
  CMPGT.Q      RD26, RQ23, RQ8
  MOV.L        frameon, RD25
  AND          RD25, 3, RQ9
  MOV          frameskip, RQ25
  MOV.L        RQ8, (RQ25, RQ9)
// d_net.c:739   oldnettics = nettics[0];
  MOV.L        (RQ27, 0), RD26
  MOV.L        RD26, oldnettics
  MOV.L        (RQ25, 0), RQ23
  BREQ.L       R0, RQ23, .L008014BD
  MOV          frameskip, RQ27
  MOV.L        (RQ27, 4), RQ8
  BREQ.L       R0, RQ8, .L008014BD

.L008014C0:
  MOV          frameskip, RQ27
  MOV.L        (RQ27, 8), RQ9
  BREQ.L       R0, RQ9, .L008014BD

.L008014BF:
  MOV          frameskip, RQ27
  MOV.L        (RQ27, 12), RQ23
  BREQ.L       R0, RQ23, .L008014BD

.L008014BE:
// d_net.c:741   {
  ADD          R0, 1, RD27
  MOV.L        RD27, skiptics

.L008014BD:

.L008014BB:

.L008014B7:
// d_net.c:750   while (lowtic < NetDivTicdup(gametic) + counts)		
  BSR          .L008014C4, R0

.L008014C2:
// d_net.c:751   {
  BSR          NetUpdate, R1
// d_net.c:753   lowtic = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD20
// d_net.c:755   for (i=0 ; i<doomcom->numnodes ; i++)
  ADD          R0, 0, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ8
  BRGE.L       RQ8, RD18, .L008014C7

.L008014C5:
// d_net.c:756   if (nodeingame[i] && nettics[i] < lowtic)
  MOV          nodeingame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L008014C8
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD18), RQ23
  BRGE.L       RD20, RQ23, .L008014C8

.L008014C9:
// d_net.c:757   lowtic = nettics[i];
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD18), RD20

.L008014C8:
  ADDS.L       RD18, 1, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ8
  BRLT.L       RQ8, RD18, .L008014C5

.L008014C7:
// d_net.c:760   if (lowtic < NetDivTicdup(gametic))
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ9
  BRGE.L       RQ9, RD20, .L008014CB
// d_net.c:761   I_Error ("TryRunTics: lowtic < gametic");
  MOV          .L00C01DD7, RQ10
  BSR          I_Error, R1

.L008014CB:
// d_net.c:765   if (NetDivTicdup(I_GetTime ()) - entertic >= 20)
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        (R2, 140), RD27
  SUBS.L       RQ8, RD27, RQ9
  BRLT.L       20, RQ9, .L008014CC
// d_net.c:766   {
  BSR          M_Ticker, R1
// d_net.c:768   return;
  BSR          .L00C01DD5, R0

.L008014CC:

.L008014C4:
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADD          RQ10, 0, RQ23
  MOV.L        (R2, 128), RD27
  ADDS.L       RQ23, RD27, RQ8
  BRLT.L       RQ8, RD20, .L008014C2

.L008014C3:
// d_net.c:773   while (counts--)
  BSR          .L008014CF, R0

.L008014CD:
// d_net.c:774   {
  ADD          R0, 0, RD18
  MOV.L        ticdup, RD27
  BRGE.L       RD27, RD18, .L008014D2

.L008014D0:
// d_net.c:778   if (NetDivTicdup(gametic) > lowtic)
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ9
  BRLE.L       RD20, RQ9, .L008014D3
// d_net.c:779   I_Error ("gametic>lowtic");
  MOV          .L00C01DD8, RQ10
  BSR          I_Error, R1

.L008014D3:
// d_net.c:780   if (advancedemo)
  MOV.L        advancedemo, RD27
  BREQ.L       R0, RD27, .L008014D4
// d_net.c:781   D_DoAdvanceDemo ();
  BSR          D_DoAdvanceDemo, R1

.L008014D4:
// d_net.c:782   M_Ticker ();
  BSR          M_Ticker, R1
// d_net.c:783   G_Ticker ();
  BSR          G_Ticker, R1
// d_net.c:784   gametic++;
  MOV.L        gametic, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, gametic
// d_net.c:787   if (i != ticdup-1)
  MOV.L        ticdup, RD27
  ADDS.L       RD27, -1, RQ23
  BREQ.Q       RQ23, RD18, .L008014D5
// d_net.c:794   buf = NetDivTicdup(gametic)%BACKUPTICS; 
  MOV.L        gametic, RD10
  BSR          NetDivTicdup, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RD8, (R2, 120)
  ADD          R0, 12, RD27
  MOV.L        (R2, 120), RD26
  MODS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 120)
// d_net.c:795   for (j=0 ; j<MAXPLAYERS ; j++)
  ADD          R0, 0, RD22

.L008014D6:
// d_net.c:796   {
  MOV          netcmds, RQ27
  ADD          R0, 96, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (R2, 120), RD27
  LEA.Q        RQ26, RD27, RQ21
// d_net.c:798   cmd->chatchar = 0;
  MOVU.B       RD0, (RQ21, 6)
// d_net.c:799   if (cmd->buttons & BT_SPECIAL)
  MOVU.B       (RQ21, 7), RQ9
  ADD          R0, 128, RD25
  BTST.L       RD25, RQ9, .L008014D9
// d_net.c:800   cmd->buttons = 0;
  MOVU.B       RD0, (RQ21, 7)

.L008014D9:
  ADDS.L       RD22, 1, RD22
  BRLT.L       4, RD22, .L008014D6

.L008014D8:

.L008014D5:
  ADDS.L       RD18, 1, RD18
  MOV.L        ticdup, RD27
  BRLT.L       RD27, RD18, .L008014D0

.L008014D2:
// d_net.c:803   }
  BSR          NetUpdate, R1

.L008014CF:
  MOV.L        (R2, 128), RD27
  ADD          RD27, 0, RQ23
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 128)
  BRNE.L       R0, RQ23, .L008014CD

.L008014CE:

.L00C01DD5:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMCell_FreeLnkObjCellPtr:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
// tk_core/tk_mmcell.c:311   
  MOV.Q        (R2, 104), RQ13
  ADD          RQ13, 16, RQ12
  ADD          RQ12, 0, RQ18
// tk_core/tk_mmcell.c:312   
  ADD          RQ18, 0, RQ12
  MOV.Q        (R2, 96), RQ11
  SUB          RQ11, RQ12, RQ22
  ADDS.L       RQ22, 0, RD21
// tk_core/tk_mmcell.c:313   
  SHAR         RD21, 3, RD8
// tk_core/tk_mmcell.c:315   
  MOV.L        (RQ18, 0xF700), RQ9
  ADD          R0, 0x12345678, RD10
  BREQ.Q       RD10, RQ9, .L008009E8
// tk_core/tk_mmcell.c:316   

TKMM_MMCell_FreeLnkObjCellPtr.debugbreak_L032F:
  BRK          815

.L008009E8:
// tk_core/tk_mmcell.c:317   
  MOV.L        (RQ18, 0xFEC0), RQ9
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ9, .L008009E9
// tk_core/tk_mmcell.c:318   

TKMM_MMCell_FreeLnkObjCellPtr.debugbreak_L0330:
  BRK          816

.L008009E9:
// tk_core/tk_mmcell.c:319   
  MOV.L        (RQ18, 0xFFD0), RQ9
  ADD          R0, 0x12345678, RD13
  BREQ.Q       RD13, RQ9, .L008009EA
// tk_core/tk_mmcell.c:320   

TKMM_MMCell_FreeLnkObjCellPtr.debugbreak_L0331:
  BRK          817

.L008009EA:
// tk_core/tk_mmcell.c:322   
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          TKMM_MMCell_ChunkFindObjBase, R1
  ADDS.L       RQ10, 0, RD8
// tk_core/tk_mmcell.c:323   
  BRGE.L       R0, RD8, .L008009EB
// tk_core/tk_mmcell.c:324   
  ADD          R0, -1, RD10
  BSR          .L00C01DED, R0

.L008009EB:
// tk_core/tk_mmcell.c:325   
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          TKMM_MMCell_ChunkGetObjLen, R1
  ADD          RQ10, 0, RD23
// tk_core/tk_mmcell.c:326   
  BRGE.L       R0, RD23, .L008009EC
// tk_core/tk_mmcell.c:327   
  ADD          R0, -1, RD10
  BSR          .L00C01DED, R0

.L008009EC:
// tk_core/tk_mmcell.c:329   
  ADD          RQ18, 0x0000FEC8, RQ13
  MOV.W        (RQ13, RD23), RQ9
  ADD          RQ18, 0, RQ13
  ADDS.L       RQ9, 0, RQ22
  MOV.Q        RQ22, (RQ13, RD8)
// tk_core/tk_mmcell.c:330   
  ADD          RQ18, 0x0000FEC8, RQ13
  MOV.W        RD8, (RQ13, RD23)
// tk_core/tk_mmcell.c:331   
  ADD          R0, 1, RD10

.L00C01DED:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

A_SpawnFly:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 104)
// p_enemy.c:1977   if (--mo->reactiontime)
  MOV.Q        (R2, 104), RQ27
  MOV.L        (RQ27, 184), RQ8
  ADDS.L       RQ8, -1, RQ23
  MOV.L        RQ23, (RQ27, 184)
  BRNE.L       R0, RQ23, .L00C01DF6
// p_enemy.c:1980   targ = mo->target;
  MOV.Q        (R2, 104), RQ27
  MOV.Q        (RQ27, 176), RQ21
// p_enemy.c:1983   fog = P_SpawnMobj (targ->x, targ->y, targ->z, MT_SPAWNFIRE);
  MOV.L        (RQ21, 32), RQ8
  MOV.L        (RQ21, 28), RQ23
  MOV.L        (RQ21, 24), RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 29, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 96)
// p_enemy.c:1984   S_StartSound (fog, sfx_telept);
  MOV.Q        (R2, 96), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1987   r = P_Random ();
  BSR          P_Random, R1
  ADD          RQ10, 0, RD18
// p_enemy.c:1991   if ( r<50 )
  BRGE.L       50, RD18, .L00801BB9
// p_enemy.c:1992   type = MT_TROOP;
  ADD          R0, 11, RD9
  BSR          .L00801BBA, R0

.L00801BB9:
  BRGE.L       90, RD18, .L00801BBB
// p_enemy.c:1994   type = MT_SERGEANT;
  ADD          R0, 12, RD9
  BSR          .L00801BBC, R0

.L00801BBB:
  BRGE.L       120, RD18, .L00801BBD
// p_enemy.c:1996   type = MT_SHADOWS;
  ADD          R0, 13, RD9
  BSR          .L00801BBE, R0

.L00801BBD:
  BRGE.L       130, RD18, .L00801BBF
// p_enemy.c:1998   type = MT_PAIN;
  ADD          R0, 22, RD9
  BSR          .L00801BC0, R0

.L00801BBF:
  BRGE.L       160, RD18, .L00801BC1
// p_enemy.c:2000   type = MT_HEAD;
  ADD          R0, 14, RD9
  BSR          .L00801BC2, R0

.L00801BC1:
  BRGE.L       162, RD18, .L00801BC3
// p_enemy.c:2002   type = MT_VILE;
  ADD          R0, 3, RD9
  BSR          .L00801BC4, R0

.L00801BC3:
  BRGE.L       172, RD18, .L00801BC5
// p_enemy.c:2004   type = MT_UNDEAD;
  ADD          R0, 5, RD9
  BSR          .L00801BC6, R0

.L00801BC5:
  BRGE.L       192, RD18, .L00801BC7
// p_enemy.c:2006   type = MT_BABY;
  ADD          R0, 20, RD9
  BSR          .L00801BC8, R0

.L00801BC7:
  BRGE.L       222, RD18, .L00801BC9
// p_enemy.c:2008   type = MT_FATSO;
  ADD          R0, 8, RD9
  BSR          .L00801BCA, R0

.L00801BC9:
  BRGE.L       246, RD18, .L00801BCB
// p_enemy.c:2010   type = MT_KNIGHT;
  ADD          R0, 17, RD9
  BSR          .L00801BCC, R0

.L00801BCB:
// p_enemy.c:2012   type = MT_BRUISER;		
  ADD          R0, 15, RD9

.L00801BCC:

.L00801BCA:

.L00801BC8:

.L00801BC6:

.L00801BC4:

.L00801BC2:

.L00801BC0:

.L00801BBE:

.L00801BBC:

.L00801BBA:
// p_enemy.c:2014   newmobj	= P_SpawnMobj (targ->x, targ->y, targ->z, type);
  MOV.L        (RQ21, 32), RQ8
  MOV.L        (RQ21, 28), RQ23
  MOV.L        (RQ21, 24), RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADDS.L       RD9, 0, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ22
// p_enemy.c:2015   if (P_LookForPlayers (newmobj, true) )
  ADD          RQ22, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_LookForPlayers, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00801BCD
// p_enemy.c:2016   P_SetMobjState (newmobj, newmobj->info->seestate);
  MOV.Q        (RQ22, 136), RQ27
  MOV.L        (RQ27, 12), RQ8
  ADD          RQ22, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_SetMobjState, R1

.L00801BCD:
// p_enemy.c:2019   P_TeleportMove (newmobj, newmobj->x, newmobj->y);
  MOV.L        (RQ22, 28), RQ23
  MOV.L        (RQ22, 24), RQ20
  ADD          RQ22, 0, RQ10
  ADD          RQ20, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          P_TeleportMove, R1
// p_enemy.c:2022   P_RemoveMobj (mo);
  MOV.Q        (R2, 104), RQ10
  BSR          P_RemoveMobj, R1

.L00C01DF6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

R_PointToDist:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
// r_main.c:406   dx = abs(x - viewx);
  MOV.L        (R2, 92), RD27
  MOV.L        viewx, RD26
  SUBS.L       RD27, RD26, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RD9
  SHAR.Q       RD9, 63, RQ7
  AND          RD9, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RD9
// r_main.c:407   dy = abs(y - viewy);
  MOV.L        (R2, 88), RD26
  MOV.L        viewy, RD27
  SUBS.L       RD26, RD27, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RD8
  SHAR.Q       RD8, 63, RQ7
  AND          RD8, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RD8
// r_main.c:409   if (dy>dx)
  BRLE.L       RD9, RD8, .L00802660
// r_main.c:410   {
  ADD          RD9, 0, RD22
// r_main.c:412   dx = dy;
  ADDS.L       RD8, 0, RD9
// r_main.c:413   dy = temp;
  ADD          RD22, 0, RD8

.L00802660:
// r_main.c:416   angle = (tantoangle[ FixedDiv(dy,dx)>>DBITS ]+ANG90) >> ANGLETOFINESHIFT;
  ADDS.L       RD8, 0, RD10
  ADDS.L       RD9, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 5, RQ23
  MOV          tantoangle, RQ27
  MOVU.L       (RQ27, RQ23), RQ18
  LUI          0x00040000, R5
  ADDU.L       R5, RQ18, RQ23
  SHLR         RQ23, 19, RD21
// r_main.c:419   dist = FixedDiv (dx, finesine[angle] );	
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD21), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedDiv, R1
// r_main.c:421   return dist;

.L00C01DFC:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

__accept:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -392, R2
  MOV.L        RD10, (R2, 156)
  ADD          RQ11, 0, RQ9
  ADD          RQ12, 0, RQ8
  MOV.L        RD13, (R2, 132)
// pdpc201/btshx_supa.c:564   
  MOV          btshx_tk_handles, RQ20
  MOV.L        (R2, 156), RD27
  MOV.Q        (RQ20, RD27), RQ23
// pdpc201/btshx_supa.c:565   
  ADD          R0, -1, RD20
  MOV.L        RD20, (R2, 128)
// pdpc201/btshx_supa.c:566   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          __sock_setupaddrlenrecv, R1
// pdpc201/btshx_supa.c:567   
  MOV.L        (RQ8, 0), RQ21
  ADD          R2, 128, RQ22
  ADD          RQ23, 0, RQ10
  LDIZ         16391, RD11
  ADD          RQ22, 0, RQ12
  ADD          R0, 4, RD13
  ADD          R0, 0, RD14
  ADD          RQ9, 0, RQ15
  ADD          RQ21, 0, RD16
  BSR          tk_frecv, R1
  ADD          RQ10, 0, RD18
// pdpc201/btshx_supa.c:568   
  BRGE.L       R0, RD18, .L00800FB6
// pdpc201/btshx_supa.c:569   
  ADD          R0, -1, RD10
  BSR          .L00C01E02, R0

.L00800FB6:
// pdpc201/btshx_supa.c:570   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          __sock_adjustaddrlenproto, R1
// pdpc201/btshx_supa.c:571   
  MOV.L        (R2, 128), RD10

.L00C01E02:
  ADD          R2, 392, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_SargAttack:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:972   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C01E08
// p_enemy.c:975   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:976   if (P_CheckMeleeRange (actor))
  ADD          RQ9, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B59
// p_enemy.c:977   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 10, RD22
  MODS.L       RQ23, RD22, RQ23
  ADDS.L       RQ23, 1, RQ18
  SHAD.L       RQ18, 2, RD21
  MOV.L        RD21, (R2, 100)
// p_enemy.c:979   P_DamageMobj (actor->target, actor, actor, damage);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          RD21, 0, RD13
  BSR          P_DamageMobj, R1

.L00801B59:

.L00C01E08:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_LoadVertexes:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 108)
// p_setup.c:140   lsz = W_LumpLength (lump);
  MOV.L        (R2, 108), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD20
// p_setup.c:141   if(lsz % sizeof(mapvertex_t))
  ADD          RD20, 0, RQ18
  ADD          R0, 4, RD27
  MODS.L       RQ18, RD27, RQ18
  BREQ.L       R0, RQ18, .L00801ED3
// p_setup.c:142   __debugbreak();

P_LoadVertexes.debugbreak_L0337:
  BRK          823

.L00801ED3:
// p_setup.c:146   numvertexes = lsz / sizeof(mapvertex_t);
  ADD          RD20, 0, RD27
  ADD          R0, 4, RD26
  DIVS.L       RD27, RD26, RD27
// p_setup.c:149   vertexes = Z_Malloc (numvertexes*sizeof(vertex_t),PU_LEVEL_VTX,0);	
  SHAD.L       RD27, 3, RQ18
  MOV.L        RD27, numvertexes
  ADD          RQ18, 0, RD10
  ADD          R0, 53, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, vertexes
// p_setup.c:152   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 108), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ27
// p_setup.c:154   ml = (mapvertex_t *)data;
  ADD          RQ27, 0, RQ8
  MOV.Q        RQ27, (R2, 96)
// p_setup.c:155   li = vertexes;
  MOV.Q        vertexes, RQ9
// p_setup.c:159   for (i=0 ; i<numvertexes ; i++, li++, ml++)
  ADD          R0, 0, RD23
  MOV.L        numvertexes, RD25
  BRGE.L       RD25, RD23, .L00801ED6

.L00801ED4:
// p_setup.c:160   {
  MOV.W        (RQ8, 0), RQ18
  SHAD.L       RQ18, 16, RQ22
  MOV.L        RQ22, (RQ9, 0)
// p_setup.c:162   li->y = SHORT(ml->y)<<FRACBITS;
  MOV.W        (RQ8, 2), RQ18
  SHAD.L       RQ18, 16, RQ22
  MOV.L        RQ22, (RQ9, 4)
  ADD          RD23, 0, RQ18
  ADDS.L       RD23, 1, RD23
  ADD          RQ9, 0, RQ21
  ADD          RQ9, 8, RQ9
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 4, RQ8
  MOV.L        numvertexes, RD27
  BRLT.L       RD27, RD23, .L00801ED4

.L00801ED6:
// p_setup.c:165   Z_ChangeTag (vertexes, PU_LEVEL_VTX);  //BGB: Debug
  MOV.Q        vertexes, RQ10
  ADD          R0, 53, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:170   Z_Free (data);
  MOV.Q        (R2, 96), RQ10
  BSR          Z_Free, R1

.L00C01E13:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

G_TimeDemo:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
// g_game.c:1657   { 
  MOV          .L00C01E1B, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, nodrawers
// g_game.c:1659   noblit = M_CheckParm ("-noblit");
  MOV          .L00C01E1C, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, noblit
// g_game.c:1660   timingdemo = true;
  ADD          R0, 1, RD18
  MOV.L        RD18, timingdemo
// g_game.c:1661   singletics = true;
  MOV.L        RD18, singletics
// g_game.c:1663   defdemoname = name;
  MOV.Q        (R2, 72), RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        RQ8, defdemoname
// g_game.c:1664   gameaction = ga_playdemo;
  ADD          R0, 5, RD8
  MOV.L        RD8, gameaction

.L00C01E1A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

M_InitSoftDiv:
// m_fixed.c:164   if(!m_softdiv_init)
  MOV.L        TU7A00C408/m_softdiv_init, RD13
  BRNE.L       R0, RD13, .L0080174E
// m_fixed.c:165   {
  ADD          R0, 1, RD13
  ADDS.L       RD13, 0, RD12
// m_fixed.c:168   for(i=1; i<1024; i++)
  ADDS.L       RD13, 0, RD11
  MOV.L        RD12, TU7A00C408/m_softdiv_init

.L0080174F:
// m_fixed.c:174   uj=(0x100000000ULL + (i-1)) / i;
  ADDS.L       RD11, -1, RQ13
  ADDS.L       RQ13, 0, RQ12
  ADD          R0, 1, RQ10
  LDSH32       RQ10, 0, RQ10
  ADD          RQ12, RQ10, RQ17
  ADDS.L       RD11, 0, RQ16
  DIVS.Q       RQ17, RQ16, RQ12
  ADDU.L       RQ12, R0, RD15
// m_fixed.c:176   m_softdiv_rcptab[i] = uj;
  MOV          TU7A00C408/m_softdiv_rcptab, RQ14
  MOVU.L       RD15, (RQ14, RD11)
  ADDS.L       RD11, 1, RD11
  ADD          R0, 1024, RD31
  BRLT.L       RD31, RD11, .L0080174F

.L00801751:

.L0080174E:
// m_fixed.c:180   return(0);
  ADD          R0, 0, RD10

.L00C01E1D:
  JSR          R1, 0, R0
  .balign 4

AM_unloadPics:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// am_map.c:521   for (i=0;i<10;i++)
  ADD          R0, 0, RD18

.L008017A8:
// am_map.c:522   {
  MOV          TU7A00C41B/marknums, RQ9
  MOV.Q        (RQ9, RD18), RQ8
  BREQ.Q       R0, RQ8, .L008017AB
// am_map.c:524   Z_ChangeTag(marknums[i], PU_CACHE);
  MOV          TU7A00C41B/marknums, RQ9
  MOV.Q        (RQ9, RD18), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L008017AB:
  ADDS.L       RD18, 1, RD18
  BRLT.L       10, RD18, .L008017A8

.L008017AA:

.L00C01E23:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

tk_vf_register:
// tk_core/tk_vfile.c:39   
  MOV.Q        tk_fsty_root, RQ13
  MOV.Q        RQ13, (RQ10, 8)
// tk_core/tk_vfile.c:41   
  ADD          RQ10, 0, RQ13
  MOV.Q        RQ13, tk_fsty_root

.L00C01E24:
  JSR          R1, 0, R0
  .balign 4

M_ChooseSkill:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
  ADD          R0, 1, RD23
  ADD          R0, 4, RD22
// m_menu.c:942   {
  BRNE.Q       4, RD9, .L00801663
// m_menu.c:944   {
  MOV          M_VerifyNightmare, RQ18
  MOV          .L00C01E2B, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 1, RD12
  BSR          M_StartMessage, R1
// m_menu.c:946   return;
  BSR          .L00C01E2A, R0

.L00801663:
// m_menu.c:949   G_DeferedInitNew(choice,epi+1,1);
  MOV.L        epi, RD21
  ADDS.L       RD21, 1, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 1, RD12
  BSR          G_DeferedInitNew, R1
// m_menu.c:950   M_ClearMenus ();
  BSR          M_ClearMenus, R1

.L00C01E2A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_BringUpWeapon:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 10, RD22
// p_pspr.c:144   if (player->pendingweapon == wp_nochange)
  MOV.L        (RQ18, 120), RQ9
  BRNE.Q       10, RQ9, .L00801E6B
// p_pspr.c:145   player->pendingweapon = player->readyweapon;
  MOV.L        (RQ18, 116), RQ9
  MOV.L        RQ9, (RQ18, 120)

.L00801E6B:
// p_pspr.c:147   if (player->pendingweapon == wp_chainsaw)
  MOV.L        (RQ18, 120), RQ9
  BRNE.Q       7, RQ9, .L00801E6C
// p_pspr.c:148   S_StartSound (player->mo, sfx_sawup);
  MOV.Q        (RQ18, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 10, RD11
  BSR          S_StartSound, R1

.L00801E6C:
// p_pspr.c:150   newstate = weaponinfo[player->pendingweapon].upstate;
  MOV.L        (RQ18, 120), RQ9
  MOV          weaponinfo, RQ21
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 4), RD23
// p_pspr.c:152   player->pendingweapon = wp_nochange;
  MOV.L        RD22, (RQ18, 120)
// p_pspr.c:153   player->psprites[ps_weapon].sy = WEAPONBOTTOM;
  ADD          RQ18, 264, RQ8
  ADD          RQ8, 0, RQ21
  LUI          2048, RD27
  MOV.L        RD27, (RQ21, 16)
// p_pspr.c:155   P_SetPsprite (player, ps_weapon, newstate);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RD23, 0, RD12
  BSR          P_SetPsprite, R1

.L00C01E31:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_ActivateInStasis:
// p_plats.c:263   for (i = 0;i < MAXPLATS;i++)
  ADDS.L       RD0, 0, RD13

.L00801E49:
// p_plats.c:264   if (activeplats[i]
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  BREQ.Q       R0, RQ11, .L00801E4C
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 64), RQ17
  BRNE.Q       RD10, RQ17, .L00801E4C

.L00801E4E:
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 52), RQ17
  BRNE.Q       3, RQ17, .L00801E4C

.L00801E4D:
// p_plats.c:267   {
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 56), RQ17
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        RQ17, (RQ11, 52)
// p_plats.c:269   (activeplats[i])->thinker.function.acp1
  MOV          T_PlatRaise, RQ16
  ADD          RQ16, 0, RQ11
  MOV.Q        (RQ12, RD13), RQ15
  ADD          RQ15, 0, RQ14
  ADD          RQ14, 16, RQ31
  MOV.Q        RQ11, (RQ31, 0)

.L00801E4C:
  ADDS.L       RD13, 1, RD13
  BRLT.L       30, RD13, .L00801E49

.L00801E4B:

.L00C01E32:
  JSR          R1, 0, R0
  .balign 4

A_BFGSpray:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 104)
// p_pspr.c:801   for (i=0 ; i<40 ; i++)
  ADD          R0, 0, RD20

.L00801EBE:
// p_pspr.c:802   {
  MOV.Q        (R2, 104), RQ27
  MOVU.L       (RQ27, 56), RQ9
  LUI          0xFFFFFFFFFFFE0000, R5
  ADDU.L       R5, RQ9, RQ18
  ADD          R0, 0x01999999, R5
  MULS.L       RD20, R5, RQ9
  ADDU.L       RQ18, RQ9, RD26
  MOV.L        RD26, (R2, 100)
// p_pspr.c:807   P_AimLineAttack (mo->target, an, 16*64*FRACUNIT);
  MOV.Q        (RQ27, 176), RQ21
  ADD          RQ21, 0, RQ10
  ADD          RD26, 0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
// p_pspr.c:809   if (!linetarget)
  MOV.Q        linetarget, RQ13
  BREQ.Q       R0, RQ13, .L00801EBF
// p_pspr.c:812   P_SpawnMobj (linetarget->x,
  MOV.Q        linetarget, RQ27
  MOV.L        (RQ27, 32), RQ9
  MOV.L        (RQ27, 108), RQ18
  SHAR         RQ18, 2, RQ8
  ADDS.L       RQ9, RQ8, RQ18
  MOV.L        (RQ27, 28), RQ8
  MOV.L        (RQ27, 24), RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 42, RD13
  BSR          P_SpawnMobj, R1
// p_pspr.c:817   damage = 0;
  ADD          RD0, 0, RD22
// p_pspr.c:818   for (j=0;j<15;j++)
  ADD          R0, 0, RD23

.L00801EC1:
// p_pspr.c:819   damage += (P_Random()&7) + 1;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 7, RQ8
  ADDS.L       RQ8, 1, RQ9
  ADDS.L       RD22, RQ9, RD22
  ADDS.L       RD23, 1, RD23
  BRLT.L       15, RD23, .L00801EC1

.L00801EC3:
// p_pspr.c:821   P_DamageMobj (linetarget, mo->target,mo->target, damage);
  MOV.Q        (R2, 104), RQ27
  MOV.Q        (RQ27, 176), RQ21
  MOV.Q        linetarget, RQ10
  ADD          RQ21, 0, RQ11
  ADD          RQ21, 0, RQ12
  ADD          RD22, 0, RD13
  BSR          P_DamageMobj, R1

.L00801EBF:
  ADDS.L       RD20, 1, RD20
  BRLT.L       40, RD20, .L00801EBE

.L00801EC0:

.L00C01E38:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

I_UpdateSound:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -712, R2
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 232)
// i_sound_btsh.c:616   {
// i_sound_btsh.c:659   __hint_use_egpr();
// i_sound_btsh.c:662   chanptr = channels;
  MOV          channels, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 168)
// i_sound_btsh.c:663   clvl	= channelleftvol_lookup;
  MOV          channelleftvol_lookup, RQ27
  ADD          RQ27, 0, RQ25
  MOV.Q        RQ25, (R2, 144)
// i_sound_btsh.c:664   crvl	= channelrightvol_lookup;
  MOV          channelrightvol_lookup, RQ27
  ADD          RQ27, 0, RQ24
  MOV.Q        RQ24, (R2, 136)
// i_sound_btsh.c:665   clv		= channelleftvol;
  MOV          channelleftvol, RQ27
  ADD          RQ27, 0, RQ19
  MOV.Q        RQ19, (R2, 128)
// i_sound_btsh.c:666   crv		= channelrightvol;
  MOV          channelrightvol, RQ27
  ADD          RQ27, 0, RQ13
  MOV.Q        RQ13, (R2, 120)
// i_sound_btsh.c:667   chanstp	= channelstepremainder;
  MOV          channelstepremainder, RQ27
  ADD          RQ27, 0, RQ12
  MOV.Q        RQ12, (R2, 160)
// i_sound_btsh.c:672   leftout = mixbuffer;
  MOV          mixbuffer, RQ27
  MOV.Q        RQ27, (R2, 216)
// i_sound_btsh.c:673   rightout = mixbuffer+1;
  ADD          RQ27, 2, RQ11
  MOV.Q        RQ11, (R2, 208)
// i_sound_btsh.c:674   step = 2;
  ADD          R0, 2, RD27
  MOV.L        RD27, (R2, 180)
// i_sound_btsh.c:676   tmixl	= tmixbuf+0;
  ADD          R2, 240, RQ10
  MOV.Q        RQ10, (R2, 192)
// i_sound_btsh.c:677   tmixr	= tmixbuf+1;
  ADD          RQ10, 4, RQ17
  MOV.Q        RQ17, (R2, 184)
// i_sound_btsh.c:679   framesamp = SAMPLECOUNT;
  ADD          R0, 256, RD15
  ADD          RD15, 0, RD16
// i_sound_btsh.c:681   if(framesamp > SAMPLECOUNT)
  MOV.L        RD16, (R2, 176)
  BRLE.L       256, RD16, .L008011DD
// i_sound_btsh.c:682   framesamp = SAMPLECOUNT;
  ADD          R0, 256, RD27
  MOV.L        RD27, (R2, 176)

.L008011DD:
// i_sound_btsh.c:686   leftend = mixbuffer + SAMPLECOUNT*step;
  MOV.L        (R2, 180), RD27
  SHAD.L       RD27, 8, RQ20
  MOV          mixbuffer, RQ26
  LEA.W        RQ26, RQ20, RQ25
  MOV.Q        RQ25, (R2, 200)
// i_sound_btsh.c:692   nchan = 0;
  MOV.L        RD0, (R2, 116)
// i_sound_btsh.c:693   for ( chan = 0; chan < NUM_CHANNELS; chan++ )
  ADD          R0, 0, RD9

.L008011DE:
// i_sound_btsh.c:694   {
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, RD9), RQ22
// i_sound_btsh.c:696   if (!chancur)
  BREQ.Q       R0, RQ22, .L008011DF
// i_sound_btsh.c:698   nchan=chan+1;
  ADDS.L       RD9, 1, RD27
  MOV.L        RD27, (R2, 116)

.L008011DF:
  ADDS.L       RD9, 1, RD9
  BRLT.L       8, RD9, .L008011DE

.L008011E0:
// i_sound_btsh.c:701   if(!nchan)
  MOV.L        (R2, 116), RD27
  BRNE.L       R0, RD27, .L008011E1
// i_sound_btsh.c:702   {
  MOV.Q        (R2, 200), RQ27
  MOV.Q        (R2, 216), RQ26
  SUB          RQ27, RQ26, RQ25
  SHAR.Q       RQ25, 1, RQ25
  ADDS.L       RQ25, 0, RD24
// i_sound_btsh.c:705   for(samp=0; samp < nsamp; samp += step)
  ADD          R0, 0, RD18
  MOV.L        RD24, (R2, 112)
  BRGE.L       RD24, RD18, .L008011E4

.L008011E2:
// i_sound_btsh.c:706   {
  MOV.Q        (R2, 216), RQ27
  MOV.W        RD0, (RQ27, RD18)
// i_sound_btsh.c:708   rightout[samp] = 0;
  MOV.Q        (R2, 208), RQ26
  MOV.W        RD0, (RQ26, RD18)
  MOV.L        (R2, 180), RD25
  ADDS.L       RD18, RD25, RD18
  MOV.L        (R2, 112), RD24
  BRLT.L       RD24, RD18, .L008011E2

.L008011E4:
// i_sound_btsh.c:711   return;
  BSR          .L00C01E3E, R0

.L008011E1:
// i_sound_btsh.c:824   while (leftout != leftend)
  BSR          .L008011E7, R0

.L008011E5:
// i_sound_btsh.c:825   {
  MOV.Q        (R2, 200), RQ27
  MOV.Q        (R2, 216), RQ26
  SUB          RQ27, RQ26, RQ25
  SHAR.Q       RQ25, 1, RQ25
  ADDS.L       RQ25, 0, RD24
// i_sound_btsh.c:827   if(nsamp > 64)
  MOV.L        RD24, (R2, 112)
  BRLE.L       64, RD24, .L008011E8
// i_sound_btsh.c:828   nsamp = 64;
  ADD          R0, 64, RD27
  MOV.L        RD27, (R2, 112)

.L008011E8:
// i_sound_btsh.c:831   for(samp=0; samp < nsamp; samp += step)
  ADD          R0, 0, RD18
  MOV.L        (R2, 112), RD27
  BRGE.L       RD27, RD18, .L008011EB

.L008011E9:
// i_sound_btsh.c:835   tmixl[samp] = 0;
  MOV.Q        (R2, 192), RQ27
  MOV.L        RD0, (RQ27, RD18)
// i_sound_btsh.c:836   tmixr[samp] = 0;
  MOV.Q        (R2, 184), RQ26
  MOV.L        RD0, (RQ26, RD18)
  MOV.L        (R2, 180), RD25
  ADDS.L       RD18, RD25, RD18
  MOV.L        (R2, 112), RD24
  BRLT.L       RD24, RD18, .L008011E9

.L008011EB:
// i_sound_btsh.c:840   for ( chan = 0; chan < nchan; chan++ )
  ADD          R0, 0, RD9
  MOV.L        (R2, 116), RD27
  BRGE.L       RD27, RD9, .L008011EE

.L008011EC:
// i_sound_btsh.c:841   {
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, RD9), RQ22
// i_sound_btsh.c:843   if (!chancur)
  BREQ.Q       R0, RQ22, .L008011ED
// i_sound_btsh.c:845   chanend = channelsend[ chan ];
  MOV          channelsend, RQ27
  MOV.Q        (RQ27, RD9), RQ26
  MOV.Q        RQ26, (R2, 152)
// i_sound_btsh.c:847   chstp = chanstp[ chan ];
  MOV.Q        (R2, 160), RQ27
  MOVU.L       (RQ27, RD9), RD21
// i_sound_btsh.c:848   lvol = clv[chan];
  MOV.Q        (R2, 128), RQ25
  MOV.L        (RQ25, RD9), RD24
// i_sound_btsh.c:849   rvol = crv[chan];
  MOV.Q        (R2, 120), RQ19
  MOV.L        (RQ19, RD9), RD13
// i_sound_btsh.c:850   chanstep = channelstep[ chan ];
  MOV          channelstep, RQ12
  MOVU.L       (RQ12, RD9), RQ20
  ADDS.L       RQ20, 0, RD12
  MOV.L        RD12, (R2, 100)
// i_sound_btsh.c:852   if((lvol>128) || (rvol>128))
  ADD          R0, 128, R5
  CMPGT.Q      RD24, R5, RQ20
  MOV.L        RD24, (R2, 108)
  ADD          R0, 128, R5
  CMPGT.Q      RD13, R5, RQ11
  MOV.L        RD13, (R2, 104)
  OR           RQ20, RQ11, RQ10
  BREQ.L       R0, RQ10, .L008011EF
// i_sound_btsh.c:853   {
  MOV          .L00C01E3F, RQ10
  MOV.L        (R2, 108), RD11
  MOV.L        (R2, 104), RD12
  BSR          printf, R1
// i_sound_btsh.c:855   lvol=0;		rvol=0;
  MOV.L        RD0, (R2, 108)
  MOV.L        RD0, (R2, 104)

.L008011EF:
// i_sound_btsh.c:860   for(samp=0; samp < nsamp; samp += step)
  ADD          R0, 0, RD18
  MOV.L        (R2, 112), RD27
  BRGE.L       RD27, RD18, .L008011F2

.L008011F0:
// i_sound_btsh.c:864   dl = tmixl[samp];
  MOV.Q        (R2, 192), RQ27
  MOV.L        (RQ27, RD18), RD8
// i_sound_btsh.c:865   dr = tmixr[samp];
  MOV.Q        (R2, 184), RQ26
  MOV.L        (RQ26, RD18), RD23
// i_sound_btsh.c:866   sample = *chancur;
  MOVU.B       (RQ22, 0), RD25
// i_sound_btsh.c:867   dl += __int_mulsw(lvol, sample-128);
  ADDS.L       RD25, -128, RQ20
  MOV.L        (R2, 108), RD24
  MULS.W       RD24, RQ20, RQ19
  ADDS.L       RD8, RQ19, RD8
// i_sound_btsh.c:868   dr += __int_mulsw(rvol, sample-128);
  ADDS.L       RD25, -128, RQ13
  MOV.Q        RQ13, (R2, 64)
  MOV.L        RD25, (R2, 228)
  MOV.L        (R2, 104), RD12
  MULS.W       RD12, RQ13, RQ20
  ADDS.L       RD23, RQ20, RD23
// i_sound_btsh.c:873   tmixl[samp] = dl;
  MOV.L        RD8, (RQ27, RD18)
// i_sound_btsh.c:874   tmixr[samp] = dr;
  MOV.L        RD23, (RQ26, RD18)
// i_sound_btsh.c:876   chstp += chanstep;
  MOVU.L       (R2, 100), RD11
  ADDU.L       RD21, RD11, RD21
// i_sound_btsh.c:877   chancur += chstp >> 16;
  SHLR         RD21, 16, RQ19
  ADD          RQ22, RQ19, RQ22
// i_sound_btsh.c:878   chstp &= 65535;
  AND          RD21, 0x0000FFFF, RD21
  MOV.L        (R2, 180), RD10
  ADDS.L       RD18, RD10, RD18
  MOV.L        (R2, 112), RD17
  BRLT.L       RD17, RD18, .L008011F0

.L008011F2:
// i_sound_btsh.c:884   if (chancur >= chanend)
  MOV.Q        (R2, 152), RQ27
  BRLT.Q       RQ27, RQ22, .L008011F3
// i_sound_btsh.c:885   chancur = NULL;
  ADD          R0, 0, RQ22

.L008011F3:
// i_sound_btsh.c:886   chanptr[ chan ] = chancur;
  MOV.Q        (R2, 168), RQ27
  MOV.Q        RQ22, (RQ27, RD9)
// i_sound_btsh.c:887   chanstp[ chan ] = chstp;
  MOV.Q        (R2, 160), RQ26
  MOVU.L       RD21, (RQ26, RD9)

.L008011ED:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 116), RD27
  BRLT.L       RD27, RD9, .L008011EC

.L008011EE:
// i_sound_btsh.c:891   for(samp=0; samp < nsamp; samp += step)
  ADD          R0, 0, RD18
  MOV.L        (R2, 112), RD27
  BRGE.L       RD27, RD18, .L008011F6

.L008011F4:
// i_sound_btsh.c:892   {
  MOV.Q        (R2, 192), RQ27
  MOV.L        (RQ27, RD18), RD8
// i_sound_btsh.c:894   dr = tmixr[samp];
  MOV.Q        (R2, 184), RQ26
  MOV.L        (RQ26, RD18), RD23
// i_sound_btsh.c:895   dl = __int_clamp(dl, -32000, 32000);
  LDIZ         -32000, RD25
  LDIZ         32000, RD24
  SUB          RD8, RD25, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD25, RQ6, RQ6
  AND          RD8, RQ7, RQ7
  OR           RQ6, RQ7, RD8
  SUB          RD8, RD24, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD8, RQ6, RQ6
  AND          RD24, RQ7, RQ7
  OR           RQ6, RQ7, RD8
// i_sound_btsh.c:896   dr = __int_clamp(dr, -32000, 32000);
  SUB          RD23, RD25, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD25, RQ6, RQ6
  AND          RD23, RQ7, RQ7
  OR           RQ6, RQ7, RD23
  SUB          RD23, RD24, RQ6
  SHAR.Q       RQ6, 63, RQ6
  XOR          RQ6, -1, RQ7
  AND          RD23, RQ6, RQ6
  AND          RD24, RQ7, RQ7
  OR           RQ6, RQ7, RD23
// i_sound_btsh.c:897   leftout[samp] = dl;
  MOV.Q        (R2, 216), RQ19
  MOV.W        RD8, (RQ19, RD18)
// i_sound_btsh.c:898   rightout[samp] = dr;
  MOV.Q        (R2, 208), RQ27
  MOV.W        RD23, (RQ27, RD18)
  MOV.L        (R2, 180), RD24
  ADDS.L       RD18, RD24, RD18
  MOV.L        (R2, 112), RD26
  BRLT.L       RD26, RD18, .L008011F4

.L008011F6:
// i_sound_btsh.c:902   leftout += nsamp;
  MOV.L        (R2, 112), RD27
  MOV.Q        (R2, 216), RQ26
  LEA.W        RQ26, RD27, RQ26
  MOV.Q        RQ26, (R2, 216)
// i_sound_btsh.c:903   rightout += nsamp;
  MOV.Q        (R2, 208), RQ25
  LEA.W        RQ25, RD27, RQ25
  MOV.Q        RQ25, (R2, 208)

.L008011E7:
  MOV.Q        (R2, 216), RQ27
  MOV.Q        (R2, 200), RQ26
  BRNE.Q       RQ26, RQ27, .L008011E5

.L008011E6:

.L00C01E3E:
  ADD          R2, 712, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

__sdivdi3:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ22
// tk_core/tk_divi.c:128   
  SHAR.Q       RQ23, 63, RQ9
  SHAR.Q       RQ22, 63, RQ8
// tk_core/tk_divi.c:129   
  XOR          RQ23, RQ9, RQ18
  SUB          RQ18, RQ9, RQ23
  XOR          RQ22, RQ8, RQ18
  SUB          RQ18, RQ8, RQ22
// tk_core/tk_divi.c:130   
  XOR          RQ9, RQ8, RQ9
// tk_core/tk_divi.c:131   
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          __udivdi3, R1
  ADD          RQ10, 0, RQ18
  XOR          RQ18, RQ9, RQ21
  SUB          RQ21, RQ9, RQ18
  ADD          RQ18, 0, RQ10

.L00C01E45:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_ArchiveWorld:
// p_saveg.c:124   put = (short *)save_p;
  MOV.Q        save_p, RQ13
  ADD          RQ13, 0, RQ12
// p_saveg.c:127   for (i=0, sec = sectors ; i<numsectors ; i++,sec++)
  ADD          R0, 0, RD11
  MOV.Q        sectors, RQ10
  ADD          RQ10, 0, RQ17
  MOV.L        numsectors, RD16
  BRGE.L       RD16, RD11, .L0080232E

.L0080232C:
// p_saveg.c:128   {
  MOV.L        (RQ17, 0), RQ13
  SHAR         RQ13, 16, RQ10
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ16, 0)
// p_saveg.c:130   *put++ = sec->ceilingheight >> FRACBITS;
  MOV.L        (RQ17, 4), RQ13
  SHAR         RQ13, 16, RQ10
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ16, 0)
// p_saveg.c:131   *put++ = sec->floorpic;
  MOV.W        (RQ17, 8), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:132   *put++ = sec->ceilingpic;
  MOV.W        (RQ17, 10), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:133   *put++ = sec->lightlevel;
  MOV.W        (RQ17, 12), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:134   *put++ = sec->special;		// needed?
  MOV.W        (RQ17, 14), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:135   *put++ = sec->tag;		// needed?
  MOV.W        (RQ17, 16), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
  ADDS.L       RD11, 0, RQ13
  ADDS.L       RD11, 1, RD11
  ADD          RQ17, 0, RQ16
  ADD          RQ17, 128, RQ17
  MOV.L        numsectors, RD15
  BRLT.L       RD15, RD11, .L0080232C

.L0080232E:
// p_saveg.c:139   for (i=0, li = lines ; i<numlines ; i++,li++)
  ADD          R0, 0, RD11
  MOV.Q        lines, RQ15
  ADD          RQ15, 0, RQ14
  MOV.L        numlines, RD31
  BRGE.L       RD31, RD11, .L00802331

.L0080232F:
// p_saveg.c:140   {
  MOV.W        (RQ14, 24), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:142   *put++ = li->special;
  MOV.W        (RQ14, 26), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:143   *put++ = li->tag;
  MOV.W        (RQ14, 28), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:144   for (j=0 ; j<2 ; j++)
  ADDS.L       RD0, 0, RD15

.L00802332:
// p_saveg.c:145   {
  ADD          RQ14, 36, RQ16
  MOV.W        (RQ16, RD15), RQ13
  BREQ.Q       -1, RQ13, .L00802333
// p_saveg.c:149   si = &sides[li->sidenum[j]];
  ADD          RQ14, 36, RQ16
  MOV.W        (RQ16, RD15), RQ13
  MOV.Q        sides, RQ31
  ADD          R0, 24, R5
  MUL.L        RQ13, R5, RQ30
  ADD          RQ31, RQ30, RQ30
// p_saveg.c:151   *put++ = si->textureoffset >> FRACBITS;
  MOV.L        (RQ30, 0), RQ10
  SHAR         RQ10, 16, RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:152   *put++ = si->rowoffset >> FRACBITS;
  MOV.L        (RQ30, 4), RQ13
  SHAR         RQ13, 16, RQ10
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ16, 0)
// p_saveg.c:153   *put++ = si->toptexture;
  MOV.W        (RQ30, 8), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:154   *put++ = si->bottomtexture;
  MOV.W        (RQ30, 10), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)
// p_saveg.c:155   *put++ = si->midtexture;	
  MOV.W        (RQ30, 12), RQ13
  ADD          RQ12, 0, RQ16
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ16, 0)

.L00802333:
  ADDS.L       RD15, 1, RD15
  BRLT.L       2, RD15, .L00802332

.L00802334:
  ADDS.L       RD11, 0, RQ13
  ADDS.L       RD11, 1, RD11
  ADD          RQ14, 0, RQ16
  ADD          RQ14, 96, RQ14
  MOV.L        numlines, RD31
  BRLT.L       RD31, RD11, .L0080232F

.L00802331:
// p_saveg.c:159   save_p = (byte *)put;
  ADD          RQ12, 0, RQ31
  MOV.Q        RQ31, save_p

.L00C01E46:
  JSR          R1, 0, R0

AM_Stop:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// am_map.c:569   AM_unloadPics();
  BSR          AM_unloadPics, R1
// am_map.c:570   automapactive = false;
  MOV.L        RD0, automapactive
// am_map.c:571   ST_Responder(&st_notify);
  MOV          AM_Stop/st_notify!22, RQ18
  ADD          RQ18, 0, RQ10
  BSR          ST_Responder, R1
// am_map.c:572   stopped = true;
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU7A00C41B/stopped

.L00C01E4C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

G_LoadGame:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 72)
// g_game.c:1216   {
  MOV          savename, RQ10
  MOV.Q        (R2, 72), RQ11
  BSR          strcpy, R1
// g_game.c:1218   gameaction = ga_loadgame;
  ADD          R0, 3, RQ6
  MOV.L        RQ6, gameaction

.L00C01E52:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ColorCellPostDecode8:
// r_data.c:1208   ca=cs[0];
  MOVU.B       (RQ10, 0), RD13
// r_data.c:1209   cb=cs[1];
  MOVU.B       (RQ10, 1), RD12
// r_data.c:1210   px=cs[2];
  MOVU.B       (RQ10, 2), RD17
// r_data.c:1212   ct[0]=(px&0x01)?ca:cb;
  ADD          R0, 1, RD16
  BTST.L       RD16, RD17, .L008024BC
  ADD          RD13, 0, RQ16
  BSR          .L008024BD, R0

.L008024BC:
  ADD          RD12, 0, RQ16

.L008024BD:
  MOVU.B       RQ16, (RQ11, 0)
// r_data.c:1213   ct[1]=(px&0x02)?ca:cb;
  ADD          R0, 2, RD15
  BTST.L       RD15, RD17, .L008024BE
  ADD          RD13, 0, RQ16
  BSR          .L008024BF, R0

.L008024BE:
  ADD          RD12, 0, RQ16

.L008024BF:
  MOVU.B       RQ16, (RQ11, 1)
// r_data.c:1214   ct[2]=(px&0x04)?ca:cb;
  ADD          R0, 4, RD15
  BTST.L       RD15, RD17, .L008024C0
  ADD          RD13, 0, RQ16
  BSR          .L008024C1, R0

.L008024C0:
  ADD          RD12, 0, RQ16

.L008024C1:
  MOVU.B       RQ16, (RQ11, 2)
// r_data.c:1215   ct[3]=(px&0x08)?ca:cb;
  ADD          R0, 8, RD15
  BTST.L       RD15, RD17, .L008024C2
  ADD          RD13, 0, RQ16
  BSR          .L008024C3, R0

.L008024C2:
  ADD          RD12, 0, RQ16

.L008024C3:
  MOVU.B       RQ16, (RQ11, 3)
// r_data.c:1216   ct[4]=(px&0x10)?ca:cb;
  ADD          R0, 16, RD15
  BTST.L       RD15, RD17, .L008024C4
  ADD          RD13, 0, RQ16
  BSR          .L008024C5, R0

.L008024C4:
  ADD          RD12, 0, RQ16

.L008024C5:
  MOVU.B       RQ16, (RQ11, 4)
// r_data.c:1217   ct[5]=(px&0x20)?ca:cb;
  ADD          R0, 32, RD15
  BTST.L       RD15, RD17, .L008024C6
  ADD          RD13, 0, RQ16
  BSR          .L008024C7, R0

.L008024C6:
  ADD          RD12, 0, RQ16

.L008024C7:
  MOVU.B       RQ16, (RQ11, 5)
// r_data.c:1218   ct[6]=(px&0x40)?ca:cb;
  ADD          R0, 64, RD15
  BTST.L       RD15, RD17, .L008024C8
  ADD          RD13, 0, RQ16
  BSR          .L008024C9, R0

.L008024C8:
  ADD          RD12, 0, RQ16

.L008024C9:
  MOVU.B       RQ16, (RQ11, 6)
// r_data.c:1219   ct[7]=(px&0x80)?ca:cb;
  ADD          R0, 128, RD15
  BTST.L       RD15, RD17, .L008024CA
  ADD          RD13, 0, RQ16
  BSR          .L008024CB, R0

.L008024CA:
  ADD          RD12, 0, RQ16

.L008024CB:
  MOVU.B       RQ16, (RQ11, 7)

.L00C01E53:
  JSR          R1, 0, R0
  .balign 4

TKMM_MMList_AllocObjCat:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 120)
// tk_core/tk_mmllist.c:558   
  MOV.Q        TKMM_PageAlloc_f, RQ27
  BRNE.Q       R0, RQ27, .L00800A38
// tk_core/tk_mmllist.c:559   
  BSR          TKMM_Init, R1
  MOV.Q        TKMM_PageAlloc_f, RQ27
  BRNE.Q       R0, RQ27, .L00800A39
// tk_core/tk_mmllist.c:563   

TKMM_MMList_AllocObjCat.debugbreak_L0374:
  BRK          884

.L00800A39:

.L00800A38:
// tk_core/tk_mmllist.c:566   
  MOV.L        RD9, (R2, 100)
// tk_core/tk_mmllist.c:568   
  BRGT.L       R0, RD9, .L00800A3A
  ADD          RQ0, 0, RQ10
  BSR          .L00C01E95, R0

.L00800A3A:
// tk_core/tk_mmllist.c:570   
  BRGE.L       64, RD9, .L00800A3B
  ADD          R0, 64, RD9

.L00800A3B:
// tk_core/tk_mmllist.c:578   
  ADDS.L       RD9, 24, RQ8
  ADDS.L       RQ8, 15, RQ21
  AND          RQ21, -16, RD27
// tk_core/tk_mmllist.c:579   
  ADDS.L       RD9, 24, RD23
// tk_core/tk_mmllist.c:581   
  MOV.L        RD27, (R2, 96)
  BRGE.L       RD23, RD27, .L00800A3C
// tk_core/tk_mmllist.c:582   

TKMM_MMList_AllocObjCat.debugbreak_L0375:
  BRK          885

.L00800A3C:
// tk_core/tk_mmllist.c:583   
  BRGE.L       RD9, RD23, .L00800A3D
// tk_core/tk_mmllist.c:584   

TKMM_MMList_AllocObjCat.debugbreak_L0376:
  BRK          886

.L00800A3D:
// tk_core/tk_mmllist.c:586   
  MOV.L        (R2, 96), RD9
// tk_core/tk_mmllist.c:590   
  ADD          R0, 15, RD27
  BTST.L       RD27, RD9, .L00800A3E
// tk_core/tk_mmllist.c:591   

TKMM_MMList_AllocObjCat.debugbreak_L0377:
  BRK          887

.L00800A3E:
// tk_core/tk_mmllist.c:596   
  ADDS.L       RD9, 0, RD10
  BSR          TKMM_SizeToFxiU, R1
  ADD          RQ10, 0, RD22
// tk_core/tk_mmllist.c:599   
  ADD          R0, -256, RD27
  BTST.L       RD27, RD22, .L00800A3F
// tk_core/tk_mmllist.c:600   

TKMM_MMList_AllocObjCat.debugbreak_L0378:
  BRK          888

.L00800A3F:
// tk_core/tk_mmllist.c:602   
  MOV.L        (R2, 120), RD27
  ADD          R0, -8, RD13
  BTST.L       RD13, RD27, .L00800A40
// tk_core/tk_mmllist.c:603   

TKMM_MMList_AllocObjCat.debugbreak_L0379:
  BRK          889

.L00800A40:
// tk_core/tk_mmllist.c:608   
  MOV.L        (R2, 120), RD27
  SHAD.L       RD27, 8, RQ8
  MOV          tkmm_mmlist_freelist_cat, RQ13
  LEA.Q        RQ13, RQ8, RQ12
// tk_core/tk_mmllist.c:613   
  MOV.Q        (RQ12, RD22), RQ18
  MOV.Q        RQ12, (R2, 112)
// tk_core/tk_mmllist.c:614   
  BREQ.Q       R0, RQ18, .L00800A41
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ18, .L00800A42
// tk_core/tk_mmllist.c:617   

TKMM_MMList_AllocObjCat.debugbreak_L037A:
  BRK          890

.L00800A42:
  MOVU.B       (RQ18, 5), RQ21
  BREQ.Q       90, RQ21, .L00800A43
// tk_core/tk_mmllist.c:620   

TKMM_MMList_AllocObjCat.debugbreak_L037B:
  BRK          891

.L00800A43:
  MOVU.B       (RQ18, 6), RQ8
  BREQ.Q       RD22, RQ8, .L00800A44
// tk_core/tk_mmllist.c:623   

TKMM_MMList_AllocObjCat.debugbreak_L037C:
  BRK          892

.L00800A44:
// tk_core/tk_mmllist.c:626   
  MOV.Q        (RQ18, 16), RQ27
  MOV.Q        (R2, 112), RQ13
  MOV.Q        RQ27, (RQ13, RD22)
// tk_core/tk_mmllist.c:628   
  MOVU.B       (RQ18, 4), RQ8
  AND          RQ8, -2, RQ21
  MOVU.B       RQ21, (RQ18, 4)
// tk_core/tk_mmllist.c:631   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01E95, R0

.L00800A41:
// tk_core/tk_mmllist.c:637   
  ADD          RD22, 0, RD10
  BSR          TKMM_FxiToSize, R1
  ADD          RQ10, 0, RD23
// tk_core/tk_mmllist.c:639   
  BRGE.L       RD9, RD23, .L00800A45
// tk_core/tk_mmllist.c:640   

TKMM_MMList_AllocObjCat.debugbreak_L037D:
  BRK          893

.L00800A45:
// tk_core/tk_mmllist.c:643   
  ADD          RD23, 0, RD10
  MOV.L        (R2, 120), RD11
  BSR          TKMM_MMList_AllocBrkCat, R1
  ADD          RQ10, 0, RQ20
// tk_core/tk_mmllist.c:645   
  BRNE.Q       R0, RQ20, .L00800A46
// tk_core/tk_mmllist.c:646   
  MOV          .L00C01EA0, RQ10
  ADD          RD23, 0, RD11
  BSR          tk_printf, R1
// tk_core/tk_mmllist.c:648   

TKMM_MMList_AllocObjCat.debugbreak_L037E:
  BRK          894
// tk_core/tk_mmllist.c:649   
  ADD          RQ0, 0, RQ10
  BSR          .L00C01E95, R0

.L00800A46:
// tk_core/tk_mmllist.c:652   
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ18, .L00800A47
// tk_core/tk_mmllist.c:653   

TKMM_MMList_AllocObjCat.debugbreak_L037F:
  BRK          895

.L00800A47:
// tk_core/tk_mmllist.c:655   
  ADD          RQ20, RD23, RQ27
  MOV.Q        RQ27, (R2, 104)
// tk_core/tk_mmllist.c:656   
  ADD          RQ20, 0, RQ18
// tk_core/tk_mmllist.c:660   
  MOVU.B       RD22, (RQ18, 6)
// tk_core/tk_mmllist.c:661   
  ADD          R0, 3, RD13
  MOVU.B       RD13, (RQ18, 4)
// tk_core/tk_mmllist.c:662   
  ADD          R0, 90, RD12
  MOVU.B       RD12, (RQ18, 5)
// tk_core/tk_mmllist.c:663   
  MOV.L        (R2, 120), RD11
  MOVU.B       RD11, (RQ18, 7)
// tk_core/tk_mmllist.c:668   
  MOVU.B       (RQ18, 4), RQ8
  AND          RQ8, -2, RQ21
  MOVU.B       RQ21, (RQ18, 4)
// tk_core/tk_mmllist.c:679   
  ADD          RQ18, 0, RQ10

.L00C01E95:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

vsprintf:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -552, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ23
  MOV.Q        RQ12, (R2, 88)
// pdpc201/stdio.c:2247   
  ADD          RQ23, 0, RQ10
  MOV.Q        (R2, 88), RQ11
  ADD          RQ0, 0, RQ12
  ADD          RQ9, 0, RQ13
  ADD          R0, 0x05F5E0FF, RD14
  BSR          vvprintf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:2248   
  BRLT.L       R0, RD18, .L00800491
// pdpc201/stdio.c:2249   
  ADD          RQ9, RD18, RQ8
  MOV.B        RD0, (RQ8, 0)

.L00800491:
// pdpc201/stdio.c:2251   
  ADD          RD18, 0, RD10

.L00C01EA8:
  ADD          R2, 552, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

R_BlkMapCheckOversizeP:
// r_polyobj.c:184   {
  MOVU.B       r_activepolyobj, RD13
  BREQ.L       R0, RD13, .L00C00935
// r_polyobj.c:187   return(1);
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00C00935:
  ADD          R0, 0, RQ10

.L00C01EA9:
  JSR          R1, 0, R0
  .balign 4

P_AcsTryStartRun:
// p_acspec.c:736   for(i=0; i<p_acsvm_scr_num; i++)
  ADD          R0, 0, RD13
  MOV.L        p_acsvm_scr_num, RD12
  BRGE.L       RD12, RD13, .L0080192D

.L0080192B:
// p_acspec.c:737   {
  MOV          p_acsvm_scr_idn, RQ12
  MOV.L        (RQ12, RD13), RQ11
  ADD          RQ11, 0, RQ17
  ADD          R0, 1000, RD16
  MODS.L       RQ17, RD16, RQ17
  MOV.W        (RQ10, 0), RQ11
  BRNE.Q       RQ11, RQ17, .L0080192C
// p_acspec.c:741   run->css=(int *)(p_acsvm_imgdat+p_acsvm_scr_ofs[i]);
  MOV          p_acsvm_scr_ofs, RQ12
  MOV.L        (RQ12, RD13), RQ17
  MOV.Q        p_acsvm_imgdat, RQ16
  ADD          RQ16, RQ17, RQ15
  MOV.Q        RQ15, (RQ10, 32)
// p_acspec.c:742   run->cs=run->css;
  MOV.Q        (RQ10, 32), RQ15
  MOV.Q        RQ15, (RQ10, 24)
// p_acspec.c:743   switch(p_acsvm_scr_arn[i]&7)
  MOV          p_acsvm_scr_arn, RQ14
  MOV.L        (RQ14, RD13), RQ11
  AND          RQ11, 7, RQ17
  BREQ.L       R0, RQ17, .L0080192F
  BREQ.Q       1, RQ17, .L00801930
  BREQ.Q       2, RQ17, .L00801931
  BREQ.Q       3, RQ17, .L00801932
  BSR          .L0080192E, R0

.L0080192F:
// p_acspec.c:745   case 0:
  BSR          .L0080192E, R0

.L00801930:
// p_acspec.c:747   case 1:
  MOV.L        (RQ10, 4), RQ11
  ADD          RQ10, 40, RQ15
  MOVU.B       (RQ10, 1064), RQ17
  ADD          RQ17, 0, RQ12
  ADDS.L       RQ17, 1, RQ16
  MOVU.B       RQ16, (RQ10, 1064)
  MOV.L        RQ11, (RQ15, RQ12)
// p_acspec.c:749   break;
  BSR          .L0080192E, R0

.L00801931:
// p_acspec.c:750   case 2:
  MOV.L        (RQ10, 4), RQ11
  ADD          RQ10, 40, RQ15
  MOVU.B       (RQ10, 1064), RQ12
  ADD          RQ12, 0, RQ16
  ADDS.L       RQ12, 1, RQ17
  MOVU.B       RQ17, (RQ10, 1064)
  MOV.L        RQ11, (RQ15, RQ16)
// p_acspec.c:752   run->stack[run->stackpos++]=run->arg2;
  MOV.L        (RQ10, 8), RQ12
  MOVU.B       (RQ10, 1064), RQ16
  ADD          RQ16, 0, RQ11
  ADDS.L       RQ16, 1, RQ17
  MOVU.B       RQ17, (RQ10, 1064)
  MOV.L        RQ12, (RQ15, RQ11)
// p_acspec.c:753   break;
  BSR          .L0080192E, R0

.L00801932:
// p_acspec.c:754   case 3:
  MOV.L        (RQ10, 4), RQ12
  ADD          RQ10, 40, RQ15
  MOVU.B       (RQ10, 1064), RQ16
  ADD          RQ16, 0, RQ11
  ADDS.L       RQ16, 1, RQ17
  MOVU.B       RQ17, (RQ10, 1064)
  MOV.L        RQ12, (RQ15, RQ11)
// p_acspec.c:756   run->stack[run->stackpos++]=run->arg2;
  MOV.L        (RQ10, 8), RQ12
  MOVU.B       (RQ10, 1064), RQ16
  ADD          RQ16, 0, RQ11
  ADDS.L       RQ16, 1, RQ17
  MOVU.B       RQ17, (RQ10, 1064)
  MOV.L        RQ12, (RQ15, RQ11)
// p_acspec.c:757   run->stack[run->stackpos++]=run->arg3;
  MOV.L        (RQ10, 12), RQ12
  MOVU.B       (RQ10, 1064), RQ16
  ADD          RQ16, 0, RQ11
  ADDS.L       RQ16, 1, RQ17
  MOVU.B       RQ17, (RQ10, 1064)
  MOV.L        RQ12, (RQ15, RQ11)
// p_acspec.c:758   break;

.L0080192E:
// p_acspec.c:759   }
  BSR          .L0080192D, R0

.L0080192C:
  ADDS.L       RD13, 1, RD13
  MOV.L        p_acsvm_scr_num, RD14
  BRLT.L       RD14, RD13, .L0080192B

.L0080192D:

.L00C01EAA:
  JSR          R1, 0, R0

R_SetViewSize:
  ADD          R2, -48, R2
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  ADD          R2, -256, R2
  ADD          RD10, 0, RD23
  ADD          RD11, 0, RD21
  MOV.L        setsizeneeded, RD18
  ADD          R0, 1, RD9
  MOV.L        setblocks, RD8
  MOV.L        setdetail, RD22
// r_main.c:703   {
  ADD          RD9, 0, RD18
// r_main.c:705   setblocks = blocks;
  ADD          RD23, 0, RD8
// r_main.c:706   setdetail = detail;
  ADD          RD21, 0, RD22

.L00C01EB0:
  MOV.L        RD18, setsizeneeded
  MOV.L        RD8, setblocks
  MOV.L        RD22, setdetail
  ADD          R2, 256, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 48, R2
  JSR          R1, 0, R0

TKMM_GetTag:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmpage.c:1077   
  BRNE.Q       R0, RQ8, .L008009A2
// tk_core/tk_mmpage.c:1078   
  ADD          R0, -1, RD10
  BSR          .L00C01EB6, R0

.L008009A2:
// tk_core/tk_mmpage.c:1080   
  ADD          RQ8, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:1081   
  BRNE.Q       R0, RQ18, .L008009A3
// tk_core/tk_mmpage.c:1082   
  ADD          R0, -1, RD10
  BSR          .L00C01EB6, R0

.L008009A3:
// tk_core/tk_mmpage.c:1084   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 8, RD21
  BTST.L       RD21, RQ9, .L008009A4
// tk_core/tk_mmpage.c:1085   
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          TKMM_MMCell_GetLnkObjCellHeadPtr, R1
  ADD          RQ10, 0, RQ23
// tk_core/tk_mmpage.c:1087   
  MOV.Q        (RQ23, 0), RQ22
// tk_core/tk_mmpage.c:1088   
  AND          RQ22, 0x0000FFFF, RQ21
  ADDS.L       RQ21, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01EB6, R0

.L008009A4:
// tk_core/tk_mmpage.c:1091   
  MOVU.W       (RQ18, 0), RQ9
  AND          RQ9, 0x0000FFFF, RD10

.L00C01EB6:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_initVariables:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R27, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// am_map.c:465   automapactive = true;
  ADD          R0, 1, RD21
  MOV.L        RD21, automapactive
// am_map.c:466   fb = screens[0];
  MOV          screens, RQ21
  MOV.Q        (RQ21, 0), RQ20
  MOV.Q        RQ20, TU7A00C41B/fb
// am_map.c:468   f_oldloc.x = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD21
  MOV          TU7A00C41B/f_oldloc, RQ20
  MOV.L        RD21, (RQ20, 0)
// am_map.c:469   amclock = 0;
  MOV.L        RD0, TU7A00C41B/amclock
// am_map.c:470   lightlev = 0;
  MOV.L        RD0, TU7A00C41B/lightlev
// am_map.c:472   m_paninc.x = m_paninc.y = 0;
  MOV          TU7A00C41B/m_paninc, RQ20
  MOV.L        RD0, (RQ20, 4)
  MOV.L        RD0, (RQ20, 0)
// am_map.c:473   ftom_zoommul = FRACUNIT;
  LUI          16, RD20
  MOV.L        RD20, TU7A00C41B/ftom_zoommul
// am_map.c:474   mtof_zoommul = FRACUNIT;
  MOV.L        RD20, TU7A00C41B/mtof_zoommul
// am_map.c:476   m_w = FTOM(f_w);
  MOV.L        TU7A00C41B/f_w, RD27
  SHAD.L       RD27, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, TU7A00C41B/m_w
// am_map.c:477   m_h = FTOM(f_h);
  MOV.L        TU7A00C41B/f_h, RD27
  SHAD.L       RD27, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, TU7A00C41B/m_h
// am_map.c:480   if (!playeringame[pnum = consoleplayer])
  MOV.L        consoleplayer, RD27
  ADD          RD27, 0, RD18
  MOV          playeringame, RQ21
  MOV.L        (RQ21, RD27), RQ9
  BRNE.L       R0, RQ9, .L008017A1
// am_map.c:481   for (pnum=0;pnum<MAXPLAYERS;pnum++)
  ADD          RD0, 0, RD18

.L008017A2:
// am_map.c:482   if (playeringame[pnum])
  MOV          playeringame, RQ21
  MOV.L        (RQ21, RD18), RQ9
  BRNE.L       R0, RQ9, .L008017A4
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008017A2

.L008017A4:

.L008017A1:
// am_map.c:485   plr = &players[pnum];
  MOV          players, RQ21
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
// am_map.c:486   m_x = plr->mo->x - m_w/2;
  MOV.Q        (RQ20, 0), RQ8
  MOV.Q        RQ20, TU7A00C41B/plr
  MOV.L        (RQ8, 24), RQ9
  MOV.L        TU7A00C41B/m_w, RQ23
  ADD          R0, 2, RD21
  DIVS.L       RQ23, RD21, RQ23
  SUBS.L       RQ9, RQ23, RD20
  MOV.L        RD20, TU7A00C41B/m_x
// am_map.c:487   m_y = plr->mo->y - m_h/2;
  MOV.L        (RQ8, 28), RQ9
  MOV.L        TU7A00C41B/m_h, RQ23
  DIVS.L       RQ23, RD21, RQ23
  SUBS.L       RQ9, RQ23, RD20
  MOV.L        RD20, TU7A00C41B/m_y
// am_map.c:488   AM_changeWindowLoc();
  BSR          AM_changeWindowLoc, R1
// am_map.c:491   old_m_x = m_x;
  MOV.L        TU7A00C41B/m_x, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, TU7A00C41B/old_m_x
// am_map.c:492   old_m_y = m_y;
  MOV.L        TU7A00C41B/m_y, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, TU7A00C41B/old_m_y
// am_map.c:493   old_m_w = m_w;
  MOV.L        TU7A00C41B/m_w, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, TU7A00C41B/old_m_w
// am_map.c:494   old_m_h = m_h;
  MOV.L        TU7A00C41B/m_h, RD20
  ADD          RD20, 0, RD27
  MOV.L        RD27, TU7A00C41B/old_m_h
// am_map.c:497   ST_Responder(&st_notify);
  MOV          AM_initVariables/st_notify!15, RQ8
  ADD          RQ8, 0, RQ10
  BSR          ST_Responder, R1

.L00C01EBC:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

ST_createWidgets:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
// st_stuff.c:1391   STlib_initNum(&w_ready,
  MOV          TU7A00CB73/st_statusbaron, RQ18
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 160, RQ20
  MOV.L        (RQ21, 116), RQ8
  MOV          weaponinfo, RQ21
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ27
  ADD          RQ21, RQ27, RQ27
  MOV.L        (RQ27, 0), RQ8
  LEA.L        RQ20, RQ8, RQ14
  MOV          TU7A00CB73/w_ready, RQ20
  MOV.Q        RQ20, (R2, 160)
  ADD          RQ20, 0, RQ10
  ADD          R0, 44, RD11
  ADD          R0, 171, RD12
  MOV          TU7A00CB73/tallnum, RQ13
  ADD          RQ18, 0, RQ15
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1400   w_ready.data = plyr->readyweapon; 
  MOV.Q        TU7A00CB73/plyr, RQ21
  MOV.L        (RQ21, 116), RQ8
  MOV          TU7A00CB73/w_ready, RQ26
  MOV.L        RQ8, (RQ26, 40)
// st_stuff.c:1403   STlib_initPercent(&w_health,
  MOV          TU7A00CB73/st_statusbaron, RQ15
  ADD          RQ21, 36, RQ18
  MOV          TU7A00CB73/w_health, RQ20
  MOV.Q        RQ20, (R2, 160)
  ADD          RQ20, 0, RQ10
  ADD          R0, 90, RD11
  ADD          R0, 171, RD12
  MOV          TU7A00CB73/tallnum, RQ13
  ADD          RQ18, 0, RQ14
  MOV.Q        TU7A00CB73/tallpercent, RQ16
  BSR          STlib_initPercent, R1
// st_stuff.c:1412   STlib_initBinIcon(&w_armsbg,
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV          TU7A00CB73/st_notdeathmatch, RQ18
  MOV          TU7A00CB73/w_armsbg, RQ20
  MOV.Q        RQ20, (R2, 160)
  ADD          RQ20, 0, RQ10
  ADD          R0, 104, RD11
  ADD          R0, 168, RD12
  MOV.Q        TU7A00CB73/armsbg, RQ13
  ADD          RQ18, 0, RQ14
  BSR          STlib_initBinIcon, R1
// st_stuff.c:1420   for(i=0;i<6;i++)
  ADD          R0, 0, RD9

.L00802C59:
// st_stuff.c:1421   {
  MOV          TU7A00CB73/st_armson, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 124, RQ18
  ADDS.L       RD9, 1, RQ8
  LEA.L        RQ18, RQ8, RQ14
  MOV.Q        RQ14, (R2, 160)
  MOV          TU7A00CB73/arms, RQ21
  SHAD.L       RD9, 4, RQ18
  ADD          RQ21, RQ18, RQ18
  ADDS.L       RD9, 0, RQ8
  ADD          R0, 3, RD21
  DIVS.L       RQ8, RD21, RQ8
  ADD          R0, 10, R5
  MULS.L       RQ8, R5, RQ23
  ADDS.L       RQ23, 172, RQ8
  ADD          RD9, 0, RQ23
  MODS.L       RQ23, RD21, RQ23
  ADD          R0, 12, R5
  MULS.L       RQ23, R5, RQ22
  ADDS.L       RQ22, 111, RQ23
  MOV          TU7A00CB73/w_arms, RQ20
  ADD          R0, 48, R5
  MUL.L        RD9, R5, RQ10
  ADD          RQ20, RQ10, RQ10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          STlib_initMultIcon, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       6, RD9, .L00802C59

.L00802C5B:
// st_stuff.c:1430   STlib_initNum(&w_frags,
  MOV          TU7A00CB73/st_fragson, RQ18
  MOV          TU7A00CB73/st_fragscount, RQ14
  MOV.Q        RQ14, (R2, 160)
  MOV          TU7A00CB73/w_frags, RQ21
  ADD          RQ21, 0, RQ10
  ADD          R0, 138, RD11
  ADD          R0, 171, RD12
  MOV          TU7A00CB73/tallnum, RQ13
  ADD          RQ18, 0, RQ15
  ADD          R0, 2, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1439   STlib_initMultIcon(&w_faces,
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV          TU7A00CB73/st_faceindex, RQ18
  MOV          TU7A00CB73/w_faces, RQ21
  ADD          RQ21, 0, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 143, RD11
  ADD          R0, 168, RD12
  MOV          TU7A00CB73/faces, RQ13
  ADD          RQ18, 0, RQ14
  BSR          STlib_initMultIcon, R1
// st_stuff.c:1447   STlib_initPercent(&w_armor,
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 40, RQ14
  MOV          TU7A00CB73/w_armor, RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 221, RD11
  ADD          R0, 171, RD12
  MOV          TU7A00CB73/tallnum, RQ13
  MOV.Q        TU7A00CB73/tallpercent, RQ16
  BSR          STlib_initPercent, R1
// st_stuff.c:1455   STlib_initMultIcon(&w_keyboxes[0],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        RQ15, (R2, 160)
  MOV          TU7A00CB73/keyboxes, RQ21
  ADD          RQ21, 0, RQ14
  MOV          TU7A00CB73/w_keyboxes, RQ21
  ADD          RQ21, 0, RQ10
  ADD          R0, 239, RD11
  ADD          R0, 171, RD12
  MOV          TU7A00CB73/keys, RQ13
  BSR          STlib_initMultIcon, R1
// st_stuff.c:1462   STlib_initMultIcon(&w_keyboxes[1],
  MOV          TU7A00CB73/st_statusbaron, RQ18
  MOV          TU7A00CB73/keyboxes, RQ21
  ADD          R0, 1, RD20
  LEA.L        RQ21, RD20, RQ14
  MOV.Q        RQ14, (R2, 160)
  MOV          TU7A00CB73/w_keyboxes, RQ21
  ADD          R0, 48, R5
  MUL.L        RD20, R5, RQ10
  ADD          RQ21, RQ10, RQ10
  ADD          R0, 239, RD11
  ADD          R0, 181, RD12
  MOV          TU7A00CB73/keys, RQ13
  ADD          RQ18, 0, RQ15
  BSR          STlib_initMultIcon, R1
// st_stuff.c:1469   STlib_initMultIcon(&w_keyboxes[2],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV          TU7A00CB73/keyboxes, RQ21
  ADD          R0, 2, RD27
  LEA.L        RQ21, RD27, RQ18
  MOV          TU7A00CB73/w_keyboxes, RQ21
  ADD          R0, 48, R5
  MUL.L        RD27, R5, RQ10
  ADD          RQ21, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 239, RD11
  ADD          R0, 191, RD12
  MOV          TU7A00CB73/keys, RQ13
  ADD          RQ18, 0, RQ14
  BSR          STlib_initMultIcon, R1
// st_stuff.c:1477   STlib_initNum(&w_ammo[0],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 160, RQ26
  ADD          RQ26, 0, RQ18
  MOV          TU7A00CB73/w_ammo, RQ21
  ADD          RQ21, 0, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 288, RD11
  ADD          R0, 173, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1485   STlib_initNum(&w_ammo[1],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 160, RQ26
  LEA.L        RQ26, RD20, RQ18
  MOV          TU7A00CB73/w_ammo, RQ21
  ADD          R0, 48, R5
  MUL.L        RD20, R5, RQ10
  ADD          RQ21, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 288, RD11
  ADD          R0, 179, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1493   STlib_initNum(&w_ammo[2],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 160, RQ26
  LEA.L        RQ26, RD27, RQ18
  MOV          TU7A00CB73/w_ammo, RQ21
  ADD          R0, 48, R5
  MUL.L        RD27, R5, RQ10
  ADD          RQ21, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 288, RD11
  ADD          R0, 191, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1501   STlib_initNum(&w_ammo[3],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ21
  ADD          RQ21, 160, RQ26
  ADD          R0, 3, RD21
  LEA.L        RQ26, RD21, RQ18
  MOV          TU7A00CB73/w_ammo, RQ25
  ADD          R0, 48, R5
  MUL.L        RD21, R5, RQ10
  ADD          RQ25, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 288, RD11
  ADD          R0, 185, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1510   STlib_initNum(&w_maxammo[0],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ25
  ADD          RQ25, 176, RQ26
  ADD          RQ26, 0, RQ18
  MOV          TU7A00CB73/w_maxammo, RQ25
  ADD          RQ25, 0, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 314, RD11
  ADD          R0, 173, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1518   STlib_initNum(&w_maxammo[1],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ25
  ADD          RQ25, 176, RQ26
  LEA.L        RQ26, RD20, RQ18
  MOV          TU7A00CB73/w_maxammo, RQ25
  ADD          R0, 48, R5
  MUL.L        RD20, R5, RQ10
  ADD          RQ25, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 314, RD11
  ADD          R0, 179, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1526   STlib_initNum(&w_maxammo[2],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ25
  ADD          RQ25, 176, RQ26
  LEA.L        RQ26, RD27, RQ18
  MOV          TU7A00CB73/w_maxammo, RQ25
  ADD          R0, 48, R5
  MUL.L        RD27, R5, RQ10
  ADD          RQ25, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 314, RD11
  ADD          R0, 191, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_stuff.c:1534   STlib_initNum(&w_maxammo[3],
  MOV          TU7A00CB73/st_statusbaron, RQ15
  MOV.Q        TU7A00CB73/plyr, RQ25
  ADD          RQ25, 176, RQ26
  LEA.L        RQ26, RD21, RQ18
  MOV          TU7A00CB73/w_maxammo, RQ25
  ADD          R0, 48, R5
  MUL.L        RD21, R5, RQ10
  ADD          RQ25, RQ10, RQ10
  MOV.Q        RQ10, (R2, 160)
  ADD          R0, 314, RD11
  ADD          R0, 185, RD12
  MOV          TU7A00CB73/shortnum, RQ13
  ADD          RQ18, 0, RQ14
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1

.L00C01EC2:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_TagMalloc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 76)
  ADDS.L       RD11, 0, RD9
// tk_core/lva_tagobj.c:139   
  ADDS.L       RD9, 0, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagobj.c:140   
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 76), RD11
  BSR          TKMM_MMList_SetTag, R1
// tk_core/lva_tagobj.c:141   
  ADD          RQ18, 0, RQ10

.L00C01EC8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

__recvfrom:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -416, R2
  MOV.L        RD10, (R2, 188)
  MOV.Q        RQ11, (R2, 176)
  MOV.Q        RQ12, (R2, 168)
  MOV.L        RD13, (R2, 164)
  ADD          RQ14, 0, RQ18
  ADD          RQ15, 0, RQ9
// pdpc201/btshx_supa.c:529   
  MOV          btshx_tk_handles, RQ27
  MOV.L        (R2, 188), RD26
  MOV.Q        (RQ27, RD26), RQ23
// pdpc201/btshx_supa.c:530   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          __sock_setupaddrlenrecv, R1
// pdpc201/btshx_supa.c:531   
  MOV.L        (RQ9, 0), RQ21
  MOV.Q        (R2, 168), RQ27
  ADDS.L       RQ27, 0, RQ22
  ADD          RQ23, 0, RQ10
  LDIZ         16387, RD11
  MOV.Q        (R2, 176), RQ12
  ADD          RQ22, 0, RD13
  MOV.L        (R2, 164), RD14
  ADD          RQ18, 0, RQ15
  ADD          RQ21, 0, RD16
  BSR          tk_frecv, R1
  ADDS.L       RQ10, 0, RD8
// pdpc201/btshx_supa.c:532   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          __sock_adjustaddrlenproto, R1
// pdpc201/btshx_supa.c:533   
  ADDS.L       RD8, 0, RQ20
  ADD          RQ20, 0, RQ10

.L00C01ECE:
  ADD          R2, 416, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

main:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 76)
  MOV.Q        RQ11, (R2, 64)
// i_main.c:39   { 
  MOV.L        (R2, 76), RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, myargc
// i_main.c:41   myargv = argv; 
  MOV.Q        (R2, 64), RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        RQ8, myargv
// i_main.c:43   D_DoomMain (); 
  BSR          D_DoomMain, R1
// i_main.c:45   return 0;
  ADD          R0, 0, RD10

.L00C01ED4:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

AM_doFollowPlayer:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
// am_map.c:768   if (f_oldloc.x != plr->mo->x || f_oldloc.y != plr->mo->y)
  MOV          TU7A00C41B/f_oldloc, RQ23
  MOV.L        (RQ23, 0), RQ9
  MOV.Q        TU7A00C41B/plr, RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.L        (RQ8, 24), RQ18
  BRNE.Q       RQ18, RQ9, .L008017EA
  MOV          TU7A00C41B/f_oldloc, RQ23
  MOV.L        (RQ23, 4), RQ9
  MOV.Q        TU7A00C41B/plr, RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.L        (RQ8, 28), RQ18
  BRNE.Q       RQ18, RQ9, .L008017EA
  BSR          .L008017E9, R0

.L008017EA:
// am_map.c:769   {
  MOV.Q        TU7A00C41B/plr, RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.L        (RQ8, 24), RQ18
  ADD          RQ18, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  SHAR         RQ9, 16, RQ18
  SHAD.L       RQ18, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        TU7A00C41B/m_w, RQ9
  ADD          R0, 2, RD23
  DIVS.L       RQ9, RD23, RQ9
  SUBS.L       RQ18, RQ9, RD22
  MOV.L        RD22, TU7A00C41B/m_x
// am_map.c:771   m_y = FTOM(MTOF(plr->mo->y)) - m_h/2;
  MOV.Q        TU7A00C41B/plr, RQ22
  MOV.Q        (RQ22, 0), RQ8
  MOV.L        (RQ8, 28), RQ18
  ADD          RQ18, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  SHAR         RQ9, 16, RQ18
  SHAD.L       RQ18, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        TU7A00C41B/m_h, RD22
  ADD          RD22, 0, RQ9
  DIVS.L       RQ9, RD23, RQ9
  SUBS.L       RQ18, RQ9, RD21
// am_map.c:772   m_x2 = m_x + m_w;
  MOV.L        TU7A00C41B/m_x, RD27
  MOV.L        TU7A00C41B/m_w, RD23
  ADDS.L       RD27, RD23, RD20
  MOV.L        RD20, TU7A00C41B/m_x2
// am_map.c:773   m_y2 = m_y + m_h;
  ADDS.L       RD21, RD22, RD23
  MOV.L        RD23, TU7A00C41B/m_y2
  MOV.L        RD21, TU7A00C41B/m_y
// am_map.c:774   f_oldloc.x = plr->mo->x;
  MOV.Q        TU7A00C41B/plr, RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.L        (RQ8, 24), RQ18
  MOV          TU7A00C41B/f_oldloc, RQ23
  MOV.L        RQ18, (RQ23, 0)
// am_map.c:775   f_oldloc.y = plr->mo->y;
  MOV.L        (RQ8, 28), RQ9
  MOV.L        RQ9, (RQ23, 4)

.L008017E9:

.L00C01EDA:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

HUlib_eraseIText:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// hu_lib.c:360   {
  MOV.L        (RQ9, 128), RQ13
  BREQ.L       R0, RQ13, .L00802D1D
  MOV.Q        (RQ9, 120), RQ18
  BREQ.Q       R0, RQ18, .L00802D1D

.L00802D1F:
  MOV.Q        (RQ9, 120), RQ18
  MOV.L        (RQ18, 0), RQ13
  BRNE.L       R0, RQ13, .L00802D1D

.L00802D1E:
// hu_lib.c:362   it->l.needsupdate = 4;
  ADD          RQ9, 0, RQ13
  ADD          R0, 4, RD12
  MOV.L        RD12, (RQ13, 108)

.L00802D1D:
// hu_lib.c:363   HUlib_eraseTextLine(&it->l);
  ADD          RQ9, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_eraseTextLine, R1
// hu_lib.c:364   if(it->on)
  MOV.Q        (RQ9, 120), RQ18
  BREQ.Q       R0, RQ18, .L00802D21
// hu_lib.c:365   it->laston = *it->on;
  MOV.Q        (RQ9, 120), RQ18
  MOV.L        (RQ18, 0), RQ13
  MOV.L        RQ13, (RQ9, 128)

.L00802D21:

.L00C01EE0:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_oprmul_bigig:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -408, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 128)
// tk_core/lva_tagopr.c:319   
  ADD          RQ9, 0, RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  MOV.X        RQ10, (R2, 112)
// tk_core/lva_tagopr.c:320   
  MOV.Q        (R2, 128), RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
// tk_core/lva_tagopr.c:321   
  ADD          RQ22, 0, RQ12
  ADD          RQ23, 0, RQ13
  MOV.X        (R2, 112), RQ10
  BSR          __xli_smul, R1
  MOV.X        RQ10, (R2, 80)
// tk_core/lva_tagopr.c:322   
  MOV.X        RQ22, (R2, 96)
  MOV.X        (R2, 80), RQ10
  BSR          TKMM_LVA_NewBigInt, R1

.L00C01EE6:
  ADD          R2, 408, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

__get_cmdenv:
// pdpc201/btshx_supa.c:1286   
  ADD          RQ0, 0, RQ10

.L00C01EE7:
  JSR          R1, 0, R0

M_SfxVol:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RD10, 0, RD18
// m_menu.c:835   {
  BREQ.L       R0, RD18, .L00801655
  BREQ.Q       1, RD18, .L00801656
  BSR          .L00801654, R0

.L00801655:
// m_menu.c:838   case 0:
  MOV.L        snd_SfxVolume, RD13
  BREQ.L       R0, RD13, .L00801657
// m_menu.c:840   snd_SfxVolume--;
  MOV.L        snd_SfxVolume, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, snd_SfxVolume

.L00801657:
// m_menu.c:841   break;
  BSR          .L00801654, R0

.L00801656:
// m_menu.c:842   case 1:
  MOV.L        snd_SfxVolume, RD13
  BRGE.L       15, RD13, .L00801658
// m_menu.c:844   snd_SfxVolume++;
  MOV.L        snd_SfxVolume, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, snd_SfxVolume

.L00801658:
// m_menu.c:845   break;

.L00801654:
// m_menu.c:848   S_SetSfxVolume(snd_SfxVolume /* *8 */);
  MOV.L        snd_SfxVolume, RD10
  BSR          S_SetSfxVolume, R1

.L00C01EED:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_initVariables:
  ADD          R2, -56, R2
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R27, (R2, 48)
  ADD          R2, -264, R2
  ADD          RQ10, 0, RQ23
  MOV.Q        TU7A00CB85/wbs, RQ8
  ADD          R0, 1, RD22
  ADD          R0, 3, RD20
// wi_stuff.c:1899   wbs = wbstartstruct;
  ADD          RQ23, 0, RQ8
// wi_stuff.c:1919   acceleratestage = 0;
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:1920   cnt = bcnt = 0;
  MOV.L        RD0, TU7A00CB85/bcnt
  MOV.L        RD0, TU7A00CB85/cnt
// wi_stuff.c:1921   firstrefresh = 1;
  MOV.L        RD22, TU7A00CB85/firstrefresh
// wi_stuff.c:1922   me = wbs->pnum;
  MOV.L        (RQ8, 36), RD27
  MOV.L        RD27, TU7A00CB85/me
// wi_stuff.c:1923   plrs = wbs->plyr;
  ADD          RQ8, 40, RQ27
  MOV.Q        RQ27, TU7A00CB85/plrs
// wi_stuff.c:1925   if (!wbs->maxkills)
  MOV.L        (RQ8, 16), RQ18
  BRNE.L       R0, RQ18, .L00802ADD
// wi_stuff.c:1926   wbs->maxkills = 1;
  MOV.L        RD22, (RQ8, 16)

.L00802ADD:
// wi_stuff.c:1928   if (!wbs->maxitems)
  MOV.L        (RQ8, 20), RQ18
  BRNE.L       R0, RQ18, .L00802ADE
// wi_stuff.c:1929   wbs->maxitems = 1;
  MOV.L        RD22, (RQ8, 20)

.L00802ADE:
// wi_stuff.c:1931   if (!wbs->maxsecret)
  MOV.L        (RQ8, 24), RQ18
  BRNE.L       R0, RQ18, .L00802ADF
// wi_stuff.c:1932   wbs->maxsecret = 1;
  MOV.L        RD22, (RQ8, 24)

.L00802ADF:
// wi_stuff.c:1934   if ( gamemode != retail )
  MOV.L        gamemode, RD27
  BREQ.Q       3, RD27, .L00802AE0
  MOV.L        (RQ8, 0), RQ18
  BRLE.L       2, RQ18, .L00802AE1
// wi_stuff.c:1936   wbs->epsd -= 3;
  MOV.L        (RQ8, 0), RQ18
  ADDS.L       RQ18, -3, RQ9
  MOV.L        RQ9, (RQ8, 0)

.L00802AE1:

.L00802AE0:

.L00C01EF3:
  MOV.Q        RQ8, TU7A00CB85/wbs
  ADD          R2, 264, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 56, R2
  JSR          R1, 0, R0

tk_fwrite:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  ADD          RQ13, 0, RQ9
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1025   
  BREQ.Q       R0, RQ9, .L00800B69
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B69
  BSR          .L00800B6A, R0

.L00800B69:
// tk_core/tk_vfile.c:1027   

tk_fwrite.debugbreak_L038A:
  BRK          906

.L00800B6A:
// tk_core/tk_vfile.c:1029   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B6B
// tk_core/tk_vfile.c:1030   

tk_fwrite.debugbreak_L038B:
  BRK          907

.L00800B6B:
// tk_core/tk_vfile.c:1032   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 96), RQ8
  BREQ.Q       R0, RQ8, .L00800B6C
// tk_core/tk_vfile.c:1033   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 96), RQ22
  MOV.Q        (R2, 120), RQ10
  MOV.L        (R2, 116), RD11
  MOV.L        (R2, 112), RD12
  ADD          RQ9, 0, RQ13
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C01F03, R0

.L00800B6C:
// tk_core/tk_vfile.c:1034   
  ADD          R0, -1, RD10

.L00C01F03:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_fread:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  ADD          RQ13, 0, RQ9
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1012   
  BREQ.Q       R0, RQ9, .L00800B65
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B65
  BSR          .L00800B66, R0

.L00800B65:
// tk_core/tk_vfile.c:1014   

tk_fread.debugbreak_L0396:
  BRK          918

.L00800B66:
// tk_core/tk_vfile.c:1016   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B67
// tk_core/tk_vfile.c:1017   

tk_fread.debugbreak_L0397:
  BRK          919

.L00800B67:
// tk_core/tk_vfile.c:1019   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 88), RQ8
  BREQ.Q       R0, RQ8, .L00800B68
// tk_core/tk_vfile.c:1020   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 88), RQ22
  MOV.Q        (R2, 120), RQ10
  MOV.L        (R2, 116), RD11
  MOV.L        (R2, 112), RD12
  ADD          RQ9, 0, RQ13
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C01F15, R0

.L00800B68:
// tk_core/tk_vfile.c:1021   
  ADD          R0, -1, RD10

.L00C01F15:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

PIT_CheckThing:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
// p_map.c:263   {
// p_map.c:270   if (!(thing->flags & (MF_SOLID|MF_SPECIAL|MF_SHOOTABLE) ))
  MOV.L        (RQ8, 160), RQ18
  ADD          R0, 7, RD27
  BTSTN.L      RD27, RQ18, .L00801D32
// p_map.c:271   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D32:
// p_map.c:288   {
  MOV.L        (RQ8, 104), RQ18
  MOV.Q        tmthing, RQ27
  MOV.L        (RQ27, 104), RQ9
  ADDS.L       RQ18, RQ9, RD27
  MOV.L        RD27, (R2, 116)
  MOV.L        (RQ8, 24), RQ18
  MOV.L        tmx, RD26
  SUBS.L       RQ18, RD26, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  BRGE.L       RD27, RQ18, .L00801D34
  MOV.L        (RQ8, 28), RQ9
  MOV.L        tmy, RD27
  SUBS.L       RQ9, RD27, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RQ9
  SHAR.Q       RQ9, 63, RQ7
  AND          RQ9, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RQ9
  MOV.L        (R2, 116), RD27
  BRGE.L       RD27, RQ9, .L00801D34
  BSR          .L00801D33, R0

.L00801D34:
// p_map.c:295   return true;	
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D33:
// p_map.c:300   if (thing == tmthing)
  MOV.Q        tmthing, RQ27
  BRNE.Q       RQ27, RQ8, .L00801D36
// p_map.c:301   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D36:
// p_map.c:304   if (tmthing->flags & MF_SKULLFLY)
  MOV.Q        tmthing, RQ27
  MOV.L        (RQ27, 160), RQ18
  LUI          4096, RD27
  BTST.L       RD27, RQ18, .L00801D37
// p_map.c:305   {
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 8, RD27
  MODS.L       RQ18, RD27, RQ18
  ADDS.L       RQ18, 1, RQ9
  MOV.Q        tmthing, RQ26
  MOV.Q        (RQ26, 136), RQ22
  MOV.L        (RQ22, 76), RQ18
  MULS.L       RQ9, RQ18, RD20
// p_map.c:308   P_DamageMobj (thing, tmthing, tmthing, damage);
  ADD          RQ8, 0, RQ10
  MOV.Q        tmthing, RQ11
  MOV.Q        tmthing, RQ12
  ADD          RD20, 0, RD13
  BSR          P_DamageMobj, R1
// p_map.c:310   tmthing->flags &= ~MF_SKULLFLY;
  MOV.Q        tmthing, RQ26
  MOV.L        (RQ26, 160), RQ9
  AND          RQ9, 0xFFFFFFFFFEFFFFFF, RQ18
  MOV.L        RQ18, (RQ26, 160)
// p_map.c:311   tmthing->momx = tmthing->momy = tmthing->momz = 0;
  MOV.L        RD0, (RQ26, 120)
  MOV.L        RD0, (RQ26, 116)
  MOV.L        RD0, (RQ26, 112)
// p_map.c:313   P_SetMobjState (tmthing, tmthing->info->spawnstate);
  MOV.Q        (RQ26, 136), RQ22
  MOV.L        (RQ22, 4), RQ18
  MOV.Q        tmthing, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1
// p_map.c:315   return false;		// stop moving
  ADD          R0, 0, RD10
  BSR          .L00C01F1D, R0

.L00801D37:
// p_map.c:320   if (tmthing->flags & MF_MISSILE)
  MOV.Q        tmthing, RQ27
  MOV.L        (RQ27, 160), RQ9
  LUI          16, RD27
  BTST.L       RD27, RQ9, .L00801D38
  MOV.Q        tmthing, RQ27
  MOV.L        (RQ27, 32), RQ18
  MOV.L        (RQ8, 32), RQ9
  MOV.L        (RQ8, 108), RQ23
  ADDS.L       RQ9, RQ23, RQ21
  BRLE.L       RQ21, RQ18, .L00801D39
// p_map.c:324   return true;		// overhead
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D39:
  MOV.Q        tmthing, RQ27
  MOV.L        (RQ27, 32), RQ18
  MOV.L        (RQ27, 108), RQ9
  ADDS.L       RQ18, RQ9, RQ23
  MOV.L        (RQ8, 32), RQ21
  BRGE.L       RQ21, RQ23, .L00801D3A
// p_map.c:326   return true;		// underneath
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D3A:
  MOV.Q        tmthing, RQ27
  MOV.Q        (RQ27, 176), RQ22
  BREQ.Q       R0, RQ22, .L00801D3B
  MOV.Q        tmthing, RQ27
  MOV.Q        (RQ27, 176), RQ22
  MOV.L        (RQ22, 128), RQ23
  MOV.L        (RQ8, 128), RQ21
  BREQ.Q       RQ21, RQ23, .L00801D3C
  MOV.Q        tmthing, RQ27
  MOV.Q        (RQ27, 176), RQ22
  MOV.L        (RQ22, 128), RQ23
  BRNE.Q       17, RQ23, .L00801D3E
  MOV.L        (RQ8, 128), RQ21
  BRNE.Q       15, RQ21, .L00801D3E
  BSR          .L00801D3C, R0

.L00801D3E:
  MOV.Q        tmthing, RQ27
  MOV.Q        (RQ27, 176), RQ22
  MOV.L        (RQ22, 128), RQ23
  BRNE.Q       15, RQ23, .L00801D3B
  MOV.L        (RQ8, 128), RQ21
  BRNE.Q       17, RQ21, .L00801D3B

.L00801D3C:
  MOV.Q        tmthing, RQ27
  MOV.Q        (RQ27, 176), RQ22
  BRNE.Q       RQ22, RQ8, .L00801D42
// p_map.c:335   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01F1D, R0

.L00801D42:
  MOV.L        (RQ8, 128), RQ23
  BRNE.L       R0, RQ23, .L00C00963

.L00801D3B:
  MOV.L        (RQ8, 160), RQ21
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ21, .L00801D43
// p_map.c:348   return !(thing->flags & MF_SOLID);	
  MOV.L        (RQ8, 160), RQ18
  ADD          R0, 2, R5
  TSTN         RQ18, R5, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01F1D, R0

.L00801D43:
// p_map.c:352   damage = ((P_Random()%8)+1)*tmthing->info->damage;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RQ21
  ADD          R0, 8, RD27
  MODS.L       RQ21, RD27, RQ21
  ADDS.L       RQ21, 1, RQ18
  MOV.Q        tmthing, RQ26
  MOV.Q        (RQ26, 136), RQ22
  MOV.L        (RQ22, 76), RQ23
  MULS.L       RQ18, RQ23, RD20
// p_map.c:353   P_DamageMobj (thing, tmthing, tmthing->target, damage);
  MOV.Q        (RQ26, 176), RQ22
  ADD          RQ8, 0, RQ10
  MOV.Q        tmthing, RQ11
  ADD          RQ22, 0, RQ12
  ADD          RD20, 0, RD13
  BSR          P_DamageMobj, R1
// p_map.c:356   return false;				
  ADD          R0, 0, RD10
  BSR          .L00C01F1D, R0

.L00801D38:
// p_map.c:360   if (thing->flags & MF_SPECIAL)
  MOV.L        (RQ8, 160), RQ23
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ23, .L00801D44
// p_map.c:361   {
  MOV.L        (RQ8, 160), RQ21
  AND          RQ21, 2, RD27
  MOV.L        RD27, (R2, 112)
  MOV.L        tmflags, RD26
  LDIZ         2048, RD13
  BTST.L       RD13, RD26, .L00801D45
// p_map.c:366   P_TouchSpecialThing (thing, tmthing);
  ADD          RQ8, 0, RQ10
  MOV.Q        tmthing, RQ11
  BSR          P_TouchSpecialThing, R1

.L00801D45:
// p_map.c:367   }
  MOV.L        (R2, 112), RD27
  CMPEQ.Q      RD27, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C01F1D, R0

.L00801D44:
// p_map.c:371   return !(thing->flags & MF_SOLID);
  MOV.L        (RQ8, 160), RQ9
  ADD          R0, 2, R5
  TSTN         RQ9, R5, RQ23
  ADD          RQ23, 0, RD10
  BSR          .L00C01F1D, R0

.L00C00963:
  ADD          R0, 0, RQ10

.L00C01F1D:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

__get_cmdline:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// pdpc201/btshx_supa.c:1265   
  BSR          TK_GetCurrentTask, R1
  ADD          RQ10, 0, RQ18
// pdpc201/btshx_supa.c:1266   
  BRNE.Q       R0, RQ18, .L00800FD2
// pdpc201/btshx_supa.c:1267   
  MOV          .L00C00FE7, RQ10
  BSR          .L00C01F23, R0

.L00800FD2:
// pdpc201/btshx_supa.c:1269   
  MOV.Q        (RQ18, 144), RQ9
  ADD          RQ9, 0, RQ13
// pdpc201/btshx_supa.c:1270   
  MOV.Q        RQ13, (R2, 72)
  ADD          RQ13, 0, RQ10

.L00C01F23:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tk_munmap:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
// tk_core/tk_mmap.c:422   
  BSR          TKMM_InitMMap, R1
// tk_core/tk_mmap.c:431   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  BSR          TKMM_MunmapV, R1

.L00C01F29:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

EV_CountMObjForTid:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
// p_telept.c:116   cnt = 0;
  ADD          R0, 0, RD20
// p_telept.c:118   thinker = thinkercap.next;
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 8), RQ8
// p_telept.c:119   for (thinker = thinkercap.next;
  MOV.Q        (RQ13, 8), RQ8
  ADD          RQ13, 0, RQ21
  BREQ.Q       RQ21, RQ8, .L008022F1

.L008022EF:
// p_telept.c:124   if (!EV_CheckThinkerIsMObjP(thinker))
  ADD          RQ8, 0, RQ10
  BSR          EV_CheckThinkerIsMObjP, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L008022F0
// p_telept.c:127   m = (mobj_t *)thinker;
  ADD          RQ8, 0, RQ23
// p_telept.c:129   if(m->health<=0)
  MOV.L        (RQ23, 164), RQ18
  BRLE.L       R0, RQ18, .L008022F0
// p_telept.c:132   if ((m->spawnpoint.type == type) || !type)
  ADD          RQ23, 204, RQ13
  MOV.W        (RQ13, 10), RQ18
  MOV.L        (R2, 108), RD12
  CMPEQ.Q      RQ18, RD12, RQ9
  CMPEQ.Q      RD12, R0, RQ18
  OR           RQ9, RQ18, RQ22
  BREQ.L       R0, RQ22, .L008022F2
  ADD          RQ23, 204, RQ13
  MOV.W        (RQ13, 0), RQ9
  MOV.L        (R2, 104), RD12
  CMPEQ.Q      RQ9, RD12, RQ22
  CMPEQ.Q      RD12, R0, RQ18
  OR           RQ22, RQ18, RQ9
  BREQ.L       R0, RQ9, .L008022F3
// p_telept.c:135   {
  ADDS.L       RD20, 1, RD20

.L008022F3:

.L008022F2:

.L008022F0:
  MOV.Q        (RQ8, 8), RQ8
  MOV          thinkercap, RQ21
  BRNE.Q       RQ21, RQ8, .L008022EF

.L008022F1:
// p_telept.c:139   }
  ADD          RD20, 0, RD10

.L00C01F2F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

I_SMus_ParseVLI:
// i_bgb_mus_btsh.c:739   cs=*rcs;
  MOV.Q        (RQ10, 0), RQ13
// i_bgb_mus_btsh.c:741   i=*cs++; j=0;
  MOVU.B       (RQ13, 0), RD12
  ADD          RQ13, 1, RQ13
  ADDS.L       RD0, 0, RD11
// i_bgb_mus_btsh.c:742   while(i&0x80)
  BSR          .L0080126C, R0

.L0080126A:
// i_bgb_mus_btsh.c:743   {
  SHAD.L       RD11, 7, RQ17
  AND          RD12, 127, RQ16
  OR           RQ17, RQ16, RD11
// i_bgb_mus_btsh.c:745   i=*cs++;
  MOVU.B       (RQ13, 0), RD12
  ADD          RQ13, 1, RQ13

.L0080126C:
  ADD          R0, 128, RD15
  BTSTN.L      RD15, RD12, .L0080126A

.L0080126B:
// i_bgb_mus_btsh.c:746   }
  SHAD.L       RD11, 7, RQ17
  AND          RD12, 127, RQ16
  OR           RQ17, RQ16, RD11
// i_bgb_mus_btsh.c:749   *rcs=cs;
  MOV.Q        RQ13, (RQ10, 0)
// i_bgb_mus_btsh.c:750   return(j);
  ADDS.L       RD11, 0, RD10

.L00C01F30:
  JSR          R1, 0, R0

TKMM_MMCell_ChunkGetObjLen:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 84)
// tk_core/tk_mmcell.c:194   
  MOV.L        (R2, 84), RD18
// tk_core/tk_mmcell.c:195   
  ADD          RQ8, 0, RQ10
  ADD          RD18, 0, RD11
  BSR          TKMM_MMCell_GetChunkBmpIndex, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_mmcell.c:196   
  ADD          R0, 2, R5
  CMPNE.Q      RD9, R5, RQ23
  ADD          R0, 1, R5
  CMPNE.Q      RD9, R5, RQ22
  BTST.L       RQ22, RQ23, .L008009D7
// tk_core/tk_mmcell.c:197   
  ADD          R0, -1, RD10
  BSR          .L00C01F36, R0

.L008009D7:
// tk_core/tk_mmcell.c:198   
  ADDS.L       RD18, 1, RD18
// tk_core/tk_mmcell.c:199   
  BSR          .L008009D8, R0

.L008009D9:
// tk_core/tk_mmcell.c:200   
  ADD          RQ8, 0, RQ10
  ADD          RD18, 0, RD11
  BSR          TKMM_MMCell_GetChunkBmpIndex, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_mmcell.c:202   
  BRNE.Q       3, RD9, .L008009DA
// tk_core/tk_mmcell.c:203   
  ADDS.L       RD18, 1, RD18

.L008009D8:
  LDIZ         7904, RD21
  BRLT.L       RD21, RD18, .L008009D9

.L008009DA:
// tk_core/tk_mmcell.c:204   
  MOV.L        (R2, 84), RD21
  SUBS.L       RD18, RD21, RQ23
  ADD          RQ23, 0, RD10

.L00C01F36:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

R_AddLine:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  MOV.Q        RQ10, (R2, 104)
// r_bsp.c:299   curline = line;
  MOV.Q        (R2, 104), RQ27
  MOV.Q        RQ27, curline
// r_bsp.c:302   angle1 = R_PointToAngle (line->v1->x, line->v1->y);
  MOV.Q        (RQ27, 0), RQ21
  MOV.L        (RQ21, 4), RQ18
  MOV.L        (RQ21, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_PointToAngle, R1
  ADDU.L       RQ10, R0, RD8
// r_bsp.c:303   angle2 = R_PointToAngle (line->v2->x, line->v2->y);
  MOV.Q        (RQ27, 8), RQ21
  MOV.L        (RQ21, 4), RQ18
  MOV.L        (RQ21, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_PointToAngle, R1
  ADD          RQ10, 0, RD22
// r_bsp.c:310   span = angle1 - angle2;
  SUBU.L       RD8, RD22, RD26
// r_bsp.c:313   if (span >= ANG180)
  MOV.L        RD26, (R2, 96)
  ADD          R0, 0x0000000080000000, RD25
  BRGEU.L      RD25, RD26, .L00C01F46
// r_bsp.c:326   rw_wall_isclip = 0;
  MOV.B        RD0, rw_wall_isclip
// r_bsp.c:329   rw_angle1 = angle1;
  ADDS.L       RD8, 0, RD27
  MOV.L        RD27, rw_angle1
// r_bsp.c:330   angle1 -= viewangle;
  MOVU.L       viewangle, RD27
  SUBU.L       RD8, RD27, RD8
// r_bsp.c:331   angle2 -= viewangle;
  SUBU.L       RD22, RD27, RD22
// r_bsp.c:333   tspan = angle1 + clipangle;
  MOVU.L       clipangle, RD27
  ADDU.L       RD8, RD27, RD23
// r_bsp.c:334   if (tspan > 2*clipangle)
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  BRLEU.L      RQ18, RD23, .L008023E1
// r_bsp.c:335   {
  MOVU.L       clipangle, RD27
  SHAD.L       RD27, 1, RQ9
  ADDU.L       RQ9, R0, RQ9
  SUBU.L       RD23, RQ9, RD23
  MOVU.L       (R2, 96), RD27
  BRGEU.L      RD27, RD23, .L00C01F46
// r_bsp.c:342   angle1 = clipangle;
  MOVU.L       clipangle, RD8
// r_bsp.c:344   rw_wall_isclip = 0;
  MOV.B        RD0, rw_wall_isclip

.L008023E1:
// r_bsp.c:345   }
  MOVU.L       clipangle, RD27
  SUBU.L       RD27, RD22, RD23
// r_bsp.c:347   if (tspan > 2*clipangle)
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  BRLEU.L      RQ18, RD23, .L008023E2
// r_bsp.c:348   {
  MOVU.L       clipangle, RD27
  SHAD.L       RD27, 1, RQ9
  ADDU.L       RQ9, R0, RQ9
  SUBU.L       RD23, RQ9, RD23
  MOVU.L       (R2, 96), RD27
  BRGEU.L      RD27, RD23, .L00C01F46
// r_bsp.c:354   angle2 = -clipangle;
  MOVU.L       clipangle, RD27
  SUBU.L       R0, RD27, RD22
// r_bsp.c:356   rw_wall_isclip = 1;
  ADD          R0, 1, RD27
  MOV.B        RD27, rw_wall_isclip

.L008023E2:
// r_bsp.c:366   angle1 = (angle1+ANG90)>>ANGLETOFINESHIFT;
  ADD          RD8, 0, RQ18
  LUI          0x00040000, RD27
  ADDU.L       RQ18, RD27, RQ18
  SHLR         RQ18, 19, RD8
// r_bsp.c:367   angle2 = (angle2+ANG90)>>ANGLETOFINESHIFT;
  ADD          RD22, 0, RQ9
  ADDU.L       RQ9, RD27, RQ9
  SHLR         RQ9, 19, RD22
// r_bsp.c:368   x1 = viewangletox[angle1];
  MOV          viewangletox, RQ26
  MOV.W        (RQ26, RD8), RD25
// r_bsp.c:369   x2 = viewangletox[angle2];
  MOV.W        (RQ26, RD22), RD20
// r_bsp.c:372   if (x1 == x2)
  MOV.L        RD25, (R2, 100)
  BREQ.Q       RD20, RD25, .L00C01F46
// r_bsp.c:375   if(x1 >= x2)
  MOV.L        (R2, 100), RD27
  BRLT.L       RD20, RD27, .L008023E3
// r_bsp.c:378   __debugbreak();

R_AddLine.debugbreak_L03A2:
  BRK          930

.L008023E3:
// r_bsp.c:383   backsector = line->backsector;
  MOV.Q        (R2, 104), RQ27
  MOV.Q        (RQ27, 48), RQ26
  MOV.Q        RQ26, backsector
// r_bsp.c:385   if(r_ispolyobj)
  MOVU.B       r_ispolyobj, RD26
  BREQ.L       R0, RD26, .L008023E4
// r_bsp.c:386   {

R_AddLine.debugbreak_L03A3:
  BRK          931
// r_bsp.c:388   goto clippass;	
  BSR          .L008023E5, R0

.L008023E4:
// r_bsp.c:392   if (!backsector)
  MOV.Q        backsector, RQ27
  BRNE.Q       R0, RQ27, .L008023E6
// r_bsp.c:393   goto clipsolid;		
  BSR          .L008023E7, R0

.L008023E6:
// r_bsp.c:396   if (backsector->ceilingheight <= frontsector->floorheight
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ9
  BRLE.L       RQ9, RQ18, .L008023E9
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ9
  BRGE.L       RQ9, RQ18, .L008023E9
  BSR          .L008023E8, R0

.L008023E9:
// r_bsp.c:398   goto clipsolid;		
  BSR          .L008023E7, R0

.L008023E8:
// r_bsp.c:401   if (backsector->ceilingheight != frontsector->ceilingheight
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ9
  BRNE.Q       RQ9, RQ18, .L008023EC
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ9
  BRNE.Q       RQ9, RQ18, .L008023EC
  BSR          .L008023EB, R0

.L008023EC:
// r_bsp.c:403   goto clippass;	
  BSR          .L008023E5, R0

.L008023EB:
// r_bsp.c:410   if (backsector->ceilingpic == frontsector->ceilingpic
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 10), RQ18
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 10), RQ9
  BRNE.Q       RQ9, RQ18, .L008023EE
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 8), RQ18
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 8), RQ9
  BRNE.Q       RQ9, RQ18, .L008023EE

.L008023F0:
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 12), RQ18
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ9
  BRNE.Q       RQ9, RQ18, .L008023EE

.L008023EF:
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 24), RQ21
  MOV.W        (RQ21, 12), RQ18
  BRNE.L       R0, RQ18, .L008023EE
  BSR          .L00C01F46, R0

.L008023EE:
// r_bsp.c:419   clippass:

.L008023E5:
  ADDS.L       RD20, -1, RQ9
  MOV.L        (R2, 100), RD10
  ADDS.L       RQ9, 0, RD11
  BSR          R_ClipPassWallSegment, R1
// r_bsp.c:421   return;
  BSR          .L00C01F46, R0
// r_bsp.c:423   clipsolid:

.L008023E7:
  ADDS.L       RD20, -1, RQ18
  MOV.L        (R2, 100), RD10
  ADD          RQ18, 0, RD11
  BSR          R_ClipSolidWallSegment, R1

.L00C01F46:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_ThingSound:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
  ADDS.L       RD11, 0, RD8
  ADDS.L       RD12, 0, RD9
  MOV.L        RD13, (R2, 76)
  MOV          .L00C01F4F, RQ23
// p_acspec.c:961   printf("P_AcsRun_ThingSound: a1=%d a2=%d a3=%d\n",
  ADD          RQ23, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADDS.L       RD9, 0, RD12
  MOV.L        (R2, 76), RD13
  BSR          printf, R1
// p_acspec.c:964   obj=EV_FindMObjForTid(a1);
  ADDS.L       RD8, 0, RD10
  BSR          EV_FindMObjForTid, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:965   if(!obj)
  BRNE.Q       R0, RQ18, .L00801949
// p_acspec.c:966   {
  MOV          .L00C01F50, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          printf, R1
// p_acspec.c:968   return;
  BSR          .L00C01F4E, R0

.L00801949:
// p_acspec.c:971   if(!a2)
  BRNE.L       R0, RD9, .L0080194A
// p_acspec.c:972   a2=sfx_rxplod;
  ADD          R0, 15, RD9

.L0080194A:
// p_acspec.c:974   S_StartSound (obj, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          S_StartSound, R1

.L00C01F4E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnLightFlash:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.Q        R21, (R2, 24)
  MOV.X        R26, (R2, 64)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 48)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
// p_lights.c:130   sector->special = 0;	
  MOV.W        RD0, (RQ22, 14)
// p_lights.c:132   flash = Z_Malloc ( sizeof(*flash), PU_LEVSPEC, 0);
  ADD          R0, 56, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_lights.c:134   P_AddThinker (&flash->thinker);
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_AddThinker, R1
// p_lights.c:136   flash->thinker.function.acp1 = (actionf_p1) T_LightFlash;
  MOV          T_LightFlash, RQ23
  ADD          RQ18, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        RQ23, (RQ26, 0)
// p_lights.c:137   flash->sector = sector;
  MOV.Q        RQ22, (RQ18, 24)
// p_lights.c:138   flash->maxlight = sector->lightlevel;
  MOV.W        (RQ22, 12), RQ9
  MOV.L        RQ9, (RQ18, 36)
// p_lights.c:140   flash->minlight = P_FindMinSurroundingLight(sector,sector->lightlevel);
  ADD          RQ22, 0, RQ10
  SHAD.Q       RQ9, 48, RD11
  SHAR.Q       RD11, 48, RD11
  BSR          P_FindMinSurroundingLight, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 40)
// p_lights.c:141   flash->maxtime = 64;
  ADD          R0, 64, RD25
  MOV.L        RD25, (RQ18, 44)
// p_lights.c:142   flash->mintime = 7;
  ADD          R0, 7, RD24
  MOV.L        RD24, (RQ18, 48)
// p_lights.c:143   flash->count = (P_Random()&flash->maxtime)+1;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        (RQ18, 44), RQ8
  AND          RQ9, RQ8, RQ21
  ADDS.L       RQ21, 1, RQ9
  MOV.L        RQ9, (RQ18, 32)

.L00C01F56:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R24
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

R_InitSprites:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 72)
// r_things.c:346   for (i=0 ; i<SCREENWIDTH ; i++)
  ADD          RD0, 0, RD18

.L008027D0:
// r_things.c:347   {
  MOV          negonearray, RQ13
  ADD          R0, -1, RD12
  MOV.W        RD12, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       320, RD18, .L008027D0

.L008027D2:
// r_things.c:351   R_InitSpriteDefs (namelist);
  MOV.Q        (R2, 72), RQ10
  BSR          R_InitSpriteDefs, R1

.L00C01F5C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

wipe_initMelt:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD23
  ADD          RD11, 0, RD20
  MOV.L        RD12, (R2, 116)
// f_wipe.c:150   memcpy(wipe_scr, wipe_scr_start, width*height*sizeof(dt_scrpix));
  MULS.L       RD23, RD20, RQ18
  SHAD.L       RQ18, 1, RQ27
  ADDS.L       RQ27, 0, RQ26
  MOV.Q        TU7A00C589/wipe_scr, RQ10
  MOV.Q        TU7A00C589/wipe_scr_start, RQ11
  ADD          RQ26, 0, RQ12
  BSR          memcpy, R1
// f_wipe.c:154   wipe_shittyColMajorXform((short*)wipe_scr_start, width/2, height);
  ADD          RD23, 0, RQ18
  ADD          R0, 2, RD25
  DIVS.L       RQ18, RD25, RQ18
  MOV.Q        TU7A00C589/wipe_scr_start, RQ21
  ADD          RQ21, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          RD20, 0, RD12
  BSR          wipe_shittyColMajorXform, R1
// f_wipe.c:155   wipe_shittyColMajorXform((short*)wipe_scr_end, width/2, height);
  ADD          RD23, 0, RQ18
  DIVS.L       RQ18, RD25, RQ18
  MOV.Q        TU7A00C589/wipe_scr_end, RQ21
  ADD          RQ21, 0, RQ10
  ADD          RQ18, 0, RD11
  ADD          RD20, 0, RD12
  BSR          wipe_shittyColMajorXform, R1
// f_wipe.c:159   y = (int *) Z_Malloc((width+16)*sizeof(int), PU_STATIC, 0);
  ADDS.L       RD23, 16, RQ18
  SHAD.L       RQ18, 2, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ21
  MOV.Q        RQ21, TU7A00C589/y
// f_wipe.c:160   y[0] = -(M_Random()%16);
  BSR          M_Random, R1
  ADDS.L       RQ10, 0, RQ8
  ADD          RQ8, 0, RQ18
  ADD          R0, 16, RD24
  MODS.L       RQ18, RD24, RQ18
  SUBS.L       RD0, RQ18, RQ8
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        RQ8, (RQ27, 0)
// f_wipe.c:161   for (i=1;i<width;i++)
  ADD          R0, 1, RD9
  BRGE.L       RD23, RD9, .L00801345

.L00801343:
// f_wipe.c:162   {
  BSR          M_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ8
  ADD          R0, 3, RD27
  MODS.L       RQ8, RD27, RQ8
  ADDS.L       RQ8, -1, RD22
// f_wipe.c:164   y[i] = y[i-1] + r;
  ADDS.L       RD9, -1, RQ18
  MOV.Q        TU7A00C589/y, RQ26
  MOV.L        (RQ26, RQ18), RQ8
  ADDS.L       RQ8, RD22, RQ18
  MOV.L        RQ18, (RQ26, RD9)
// f_wipe.c:165   if (y[i] > 0) y[i] = 0;
  BRLE.L       R0, RQ18, .L00801346
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        RD0, (RQ27, RD9)
  BSR          .L00801347, R0

.L00801346:
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BRNE.Q       -16, RQ18, .L00801348
// f_wipe.c:166   else if (y[i] == -16) y[i] = -15;
  MOV.Q        TU7A00C589/y, RQ27
  ADD          R0, -15, RD26
  MOV.L        RD26, (RQ27, RD9)

.L00801348:

.L00801347:
  ADDS.L       RD9, 1, RD9
  BRLT.L       RD23, RD9, .L00801343

.L00801345:
// f_wipe.c:169   return 0;
  ADD          R0, 0, RD10

.L00C01F62:
  ADD          R2, 336, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

I_InitGraphics:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// i_btesh4.c:370   tk_con_disable();
  BSR          tk_con_disable, R1
// i_btesh4.c:380   vid_lastscreen=malloc(BASEWIDTH*BASEHEIGHT*2);
  ADD          R0, 0x0001F400, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, vid_lastscreen
// i_btesh4.c:383   screen_tmp=malloc(BASEWIDTH*BASEHEIGHT*2);
  ADD          R0, 0x0001F400, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, screen_tmp
// i_btesh4.c:385   IN_Init();
  BSR          IN_Init, R1

.L00C01F68:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

TKMM_MMList_AllocBrk:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
// tk_core/tk_mmllist.c:480   
  ADDS.L       RD9, 0, RD10
  ADD          R0, 0, RD11
  BSR          TKMM_MMList_AllocBrkCat, R1

.L00C01F6E:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

EV_DoLockedDoor:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 100)
  ADD          RQ12, 0, RQ23
// p_doors.c:215   p = thing->player;
  MOV.Q        (RQ23, 192), RQ9
// p_doors.c:217   if (!p)
  BREQ.Q       R0, RQ9, .L00C00986
// p_doors.c:220   switch(line->special)
  MOV.W        (RQ8, 26), RQ18
  BREQ.Q       99, RQ18, .L00801A70
  BREQ.Q       133, RQ18, .L00801A71
  BREQ.Q       134, RQ18, .L00801A72
  BREQ.Q       135, RQ18, .L00801A73
  BREQ.Q       136, RQ18, .L00801A74
  BREQ.Q       137, RQ18, .L00801A75
  BSR          .L00801A6F, R0

.L00801A70:

.L00801A71:
// p_doors.c:223   case 133:
  BREQ.Q       R0, RQ9, .L00C00986
// p_doors.c:226   if (!p->cards[it_bluecard] && !p->cards[it_blueskull])
  MOV.L        (RQ9, 72), RQ18
  BRNE.L       R0, RQ18, .L00801A76
  MOV.L        (RQ9, 84), RQ18
  BRNE.L       R0, RQ18, .L00801A76

.L00801A77:
// p_doors.c:227   {
  MOV          .L00C01F75, RQ22
  MOV.Q        RQ22, (RQ9, 224)
// p_doors.c:229   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:230   return 0;
  ADD          R0, 0, RD10
  BSR          .L00C01F74, R0

.L00801A76:
// p_doors.c:231   }
  BSR          .L00801A6F, R0

.L00801A72:

.L00801A73:
// p_doors.c:235   case 135:
  BREQ.Q       R0, RQ9, .L00C00986
// p_doors.c:238   if (!p->cards[it_redcard] && !p->cards[it_redskull])
  MOV.L        (RQ9, 80), RQ18
  BRNE.L       R0, RQ18, .L00801A79
  MOV.L        (RQ9, 92), RQ18
  BRNE.L       R0, RQ18, .L00801A79

.L00801A7A:
// p_doors.c:239   {
  MOV          .L00C01F76, RQ22
  MOV.Q        RQ22, (RQ9, 224)
// p_doors.c:241   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:242   return 0;
  ADD          R0, 0, RD10
  BSR          .L00C01F74, R0

.L00801A79:
// p_doors.c:243   }
  BSR          .L00801A6F, R0

.L00801A74:

.L00801A75:
// p_doors.c:247   case 137:
  BREQ.Q       R0, RQ9, .L00C00986
// p_doors.c:250   if (!p->cards[it_yellowcard] &&
  MOV.L        (RQ9, 76), RQ18
  BRNE.L       R0, RQ18, .L00801A7C
  MOV.L        (RQ9, 88), RQ18
  BRNE.L       R0, RQ18, .L00801A7C

.L00801A7D:
// p_doors.c:252   {
  MOV          .L00C01F77, RQ22
  MOV.Q        RQ22, (RQ9, 224)
// p_doors.c:254   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:255   return 0;
  ADD          R0, 0, RD10
  BSR          .L00C01F74, R0

.L00801A7C:
// p_doors.c:256   }

.L00801A6F:
// p_doors.c:260   return EV_DoDoor(line,type);
  ADD          RQ8, 0, RQ10
  MOV.L        (R2, 100), RD11
  BSR          EV_DoDoor, R1
  BSR          .L00C01F74, R0

.L00C00986:
  ADD          R0, 0, RQ10

.L00C01F74:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawEL:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// wi_stuff.c:448   {
  ADD          R0, 2, RD23
// wi_stuff.c:451   if(!entering)
  MOV.Q        TU7A00CB85/entering, RQ22
  BREQ.Q       R0, RQ22, .L00C01F7D
// wi_stuff.c:455   V_DrawPatch((SCREENWIDTH - SHORT(entering->width))/2,
  MOV.Q        TU7A00CB85/entering, RQ22
  MOV.W        (RQ22, 0), RQ18
  ADD          R0, 320, R5
  SUBS.L       R5, RQ18, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 2, RD22
  DIVS.L       RQ18, RD22, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/entering, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:458   if(!lnames[wbs->next])
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 12), RQ9
  MOV.Q        TU7A00CB85/lnames, RQ21
  MOV.Q        (RQ21, RQ9), RQ8
  BREQ.Q       R0, RQ8, .L00C01F7D
// wi_stuff.c:462   y += (5*SHORT(lnames[wbs->next]->height))/4;
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 12), RQ18
  MOV.Q        TU7A00CB85/lnames, RQ21
  MOV.Q        (RQ21, RQ18), RQ8
  MOV.W        (RQ8, 2), RQ18
  ADD          R0, 5, R5
  MULS.L       RQ18, R5, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 4, RD20
  DIVS.L       RQ18, RD20, RQ18
  ADDS.L       RD23, RQ18, RD23
// wi_stuff.c:464   V_DrawPatch((SCREENWIDTH - SHORT(lnames[wbs->next]->width))/2,
  MOV.L        (RQ22, 12), RQ9
  MOV.Q        (RQ21, RQ9), RQ8
  MOV.W        (RQ8, 0), RQ18
  ADD          R0, 320, R5
  SUBS.L       R5, RQ18, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 2, RD22
  DIVS.L       RQ18, RD22, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD23, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ8, 0, RQ13
  BSR          V_DrawPatch, R1

.L00C01F7D:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_restoreScaleAndLoc:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
// am_map.c:358   m_w = old_m_w;
  MOV.L        TU7A00C41B/old_m_w, RD23
  ADD          RD23, 0, RD22
  MOV.L        RD22, TU7A00C41B/m_w
// am_map.c:359   m_h = old_m_h;
  MOV.L        TU7A00C41B/old_m_h, RD23
  ADD          RD23, 0, RD22
  MOV.L        RD22, TU7A00C41B/m_h
// am_map.c:360   if (!followplayer)
  MOV.L        TU7A00C41B/followplayer, RD23
  BRNE.L       R0, RD23, .L0080178B
// am_map.c:361   {
  MOV.L        TU7A00C41B/old_m_x, RD23
  ADD          RD23, 0, RD22
  MOV.L        RD22, TU7A00C41B/m_x
// am_map.c:363   m_y = old_m_y;
  MOV.L        TU7A00C41B/old_m_y, RD23
  ADD          RD23, 0, RD22
  MOV.L        RD22, TU7A00C41B/m_y
  BSR          .L0080178C, R0

.L0080178B:
// am_map.c:364   } else {
  MOV.Q        TU7A00C41B/plr, RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.L        (RQ8, 24), RQ18
  MOV.L        TU7A00C41B/m_w, RQ9
  ADD          R0, 2, RD23
  DIVS.L       RQ9, RD23, RQ9
  SUBS.L       RQ18, RQ9, RD22
  MOV.L        RD22, TU7A00C41B/m_x
// am_map.c:366   m_y = plr->mo->y - m_h/2;
  MOV.L        (RQ8, 28), RQ18
  MOV.L        TU7A00C41B/m_h, RQ9
  DIVS.L       RQ9, RD23, RQ9
  SUBS.L       RQ18, RQ9, RD22
  MOV.L        RD22, TU7A00C41B/m_y

.L0080178C:
// am_map.c:367   }
  MOV.L        TU7A00C41B/m_x, RD22
  MOV.L        TU7A00C41B/m_w, RD21
  ADDS.L       RD22, RD21, RD23
  MOV.L        RD23, TU7A00C41B/m_x2
// am_map.c:369   m_y2 = m_y + m_h;
  MOV.L        TU7A00C41B/m_y, RD22
  MOV.L        TU7A00C41B/m_h, RD21
  ADDS.L       RD22, RD21, RD23
  MOV.L        RD23, TU7A00C41B/m_y2
// am_map.c:372   scale_mtof = FixedDiv(f_w<<FRACBITS, m_w);
  MOV.L        TU7A00C41B/f_w, RD23
  SHAD.L       RD23, 16, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        TU7A00C41B/m_w, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_mtof
// am_map.c:373   scale_ftom = FixedDiv(FRACUNIT, scale_mtof);
  LUI          16, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_ftom

.L00C01F83:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ClearRandom:
// m_random.c:73   {
  ADD          RD0, 0, RD13
  ADDS.L       RD0, 0, RD12
  MOV.L        RD13, prndindex
  MOV.L        RD12, rndindex

.L00C01F84:
  JSR          R1, 0, R0

R_DrawColumn:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
// r_draw.c:248   count = dc_yh - dc_yl + 1;
  MOV.L        dc_yh, RD12
  MOV.L        dc_yl, RD11
  SUBS.L       RD12, RD11, RQ13
  ADDS.L       RQ13, 1, RD12
// r_draw.c:250   if(count<=0)
  MOV.L        RD12, (R2, 44)
  BRLE.L       R0, RD12, .L00C01F8A
// r_draw.c:253   source = dc_source;
  MOV.Q        dc_source, RQ20
// r_draw.c:254   if(!source)
  BREQ.Q       R0, RQ20, .L00C01F8A
// r_draw.c:257   if(!dc_isspr)
  MOVU.B       dc_isspr, RD13
  BRNE.L       R0, RD13, .L008025B3
  MOV          dc_czbuf_sc, RQ13
  MOV.L        dc_x, RD12
  MOV.L        (RQ13, RD12), RQ11
  MOV.L        dc_scale, RD13
  BRNE.Q       RQ11, RD13, .L008025B4
  MOV          dc_czbuf_yl, RQ13
  MOV.L        dc_x, RD12
  MOV.L        (RQ13, RD12), RQ11
  MOV.L        dc_yl, RD13
  BRGE.L       RQ11, RD13, .L008025B5
// r_draw.c:262   dc_czbuf_yl[dc_x] = dc_yl;
  MOV          dc_czbuf_yl, RQ13
  MOV.L        dc_x, RD12
  MOV.L        dc_yl, RD11
  MOV.L        RD11, (RQ13, RD12)

.L008025B5:
  MOV          dc_czbuf_yh, RQ13
  MOV.L        dc_x, RD12
  MOV.L        (RQ13, RD12), RQ11
  MOV.L        dc_yh, RD13
  BRLE.L       RQ11, RD13, .L008025B6
// r_draw.c:264   dc_czbuf_yh[dc_x] = dc_yh;
  MOV          dc_czbuf_yh, RQ13
  MOV.L        dc_x, RD12
  MOV.L        dc_yh, RD11
  MOV.L        RD11, (RQ13, RD12)

.L008025B6:
  BSR          .L008025B7, R0

.L008025B4:
  MOV          dc_czbuf_sc, RQ13
  MOV.L        dc_x, RD12
  MOV.L        (RQ13, RD12), RQ11
  MOV.L        dc_scale, RD13
  BRGE.L       RQ11, RD13, .L008025B8
// r_draw.c:267   {
  MOV          dc_czbuf_yl, RQ13
  MOV.L        dc_x, RD12
  MOV.L        dc_yl, RD11
  MOV.L        RD11, (RQ13, RD12)
// r_draw.c:269   dc_czbuf_yh[dc_x] = dc_yh;
  MOV          dc_czbuf_yh, RQ13
  MOV.L        dc_yh, RD11
  MOV.L        RD11, (RQ13, RD12)
// r_draw.c:270   dc_czbuf_sc[dc_x] = dc_scale;
  MOV          dc_czbuf_sc, RQ13
  MOV.L        dc_scale, RD11
  MOV.L        RD11, (RQ13, RD12)

.L008025B8:

.L008025B7:

.L008025B3:
// r_draw.c:285   colormap = dc_colormap;
  MOV.Q        dc_colormap, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, (R2, 32)
// r_draw.c:286   dest = ylookup[dc_yl] + columnofs[dc_x];
  MOV          ylookup, RQ13
  MOV.L        dc_yl, RD11
  MOV.Q        (RQ13, RD11), RQ10
  MOV          columnofs, RQ13
  MOV.L        dc_x, RD17
  MOV.L        (RQ13, RD17), RQ16
  LEA.W        RQ10, RQ16, RQ9
  MOV.Q        RQ10, (R2, 8)
// r_draw.c:288   fracstep = dc_iscale<<9;
  MOV.L        dc_iscale, RD13
  SHAD.L       RD13, 9, RQ16
  ADDU.L       RQ16, R0, RD17
  MOV.L        RD17, (R2, 28)
// r_draw.c:289   frac = (dc_texturemid + (dc_yl-centery)*dc_iscale)<<9;
  MOV.L        centery, RD15
  SUBS.L       RD11, RD15, RQ16
  MULS.L       RQ16, RD13, RQ11
  MOV.L        dc_texturemid, RD13
  ADDS.L       RD13, RQ11, RQ16
  SHAD.L       RQ16, 9, RD18
  ADDU.L       RD18, R0, RD18
// r_draw.c:295   while (count >= 8)
  BSR          .L008025BB, R0

.L008025B9:
// r_draw.c:324   c0 = frac>>25; frac += fracstep; c0 = source[c0];
  SHLR         RD18, 25, RD8
  MOVU.L       (R2, 28), RD13
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD8), RD8
// r_draw.c:325   c1 = frac>>25; frac += fracstep; c1 = source[c1];
  SHLR         RD18, 25, RD23
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD23), RD23
// r_draw.c:326   c2 = frac>>25; frac += fracstep; c2 = source[c2];
  SHLR         RD18, 25, RD22
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD22), RD22
// r_draw.c:327   c3 = frac>>25; frac += fracstep; c3 = source[c3];
  SHLR         RD18, 25, RD21
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD21), RD21
// r_draw.c:328   c0 = colormap[c0];	c1 = colormap[c1];
  MOV.Q        (R2, 32), RQ12
  MOVU.W       (RQ12, RD8), RD8
  MOVU.W       (RQ12, RD23), RD23
// r_draw.c:329   c2 = colormap[c2];	c3 = colormap[c3];
  MOVU.W       (RQ12, RD22), RD22
  MOVU.W       (RQ12, RD21), RD21
// r_draw.c:330   dest[0            ] = c0;	dest[SCREENWIDTH  ] = c1;
  MOVU.W       RD8, (RQ9, 0)
  MOVU.W       RD23, (RQ9, 640)
// r_draw.c:331   dest[SCREENWIDTH*2] = c2;	dest[SCREENWIDTH*3] = c3;
  MOVU.W       RD22, (RQ9, 1280)
  MOVU.W       RD21, (RQ9, 1920)
// r_draw.c:333   c0 = frac>>25; frac += fracstep; c0 = source[c0];
  SHLR         RD18, 25, RD8
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD8), RD8
// r_draw.c:334   c1 = frac>>25; frac += fracstep; c1 = source[c1];
  SHLR         RD18, 25, RD23
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD23), RD23
// r_draw.c:335   c2 = frac>>25; frac += fracstep; c2 = source[c2];
  SHLR         RD18, 25, RD22
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD22), RD22
// r_draw.c:336   c3 = frac>>25; frac += fracstep; c3 = source[c3];
  SHLR         RD18, 25, RD21
  ADDU.L       RD18, RD13, RD18
  MOVU.B       (RQ20, RD21), RD21
// r_draw.c:337   c0 = colormap[c0];	c1 = colormap[c1];
  MOVU.W       (RQ12, RD8), RD8
  MOVU.W       (RQ12, RD23), RD23
// r_draw.c:338   c2 = colormap[c2];	c3 = colormap[c3];
  MOVU.W       (RQ12, RD22), RD22
  MOVU.W       (RQ12, RD21), RD21
// r_draw.c:339   dest[SCREENWIDTH*4] = c0;	dest[SCREENWIDTH*5] = c1;
  ADD          R0, 1280, R5
  MOVU.W       RD8, (RQ9, R5)
  ADD          R0, 1600, R5
  MOVU.W       RD23, (RQ9, R5)
// r_draw.c:340   dest[SCREENWIDTH*6] = c2;	dest[SCREENWIDTH*7] = c3;
  ADD          R0, 1920, R5
  MOVU.W       RD22, (RQ9, R5)
  LDIZ         2240, R5
  MOVU.W       RD21, (RQ9, R5)
// r_draw.c:343   dest += SCREENWIDTH*8;
  ADD          RQ9, 5120, RQ9
// r_draw.c:344   count -= 8;
  MOV.L        (R2, 44), RD11
  ADDS.L       RD11, -8, RD11
  MOV.L        RD11, (R2, 44)

.L008025BB:
  MOV.L        (R2, 44), RD13
  BRGE.L       8, RD13, .L008025B9

.L008025BA:
// r_draw.c:347   while (count > 0)
  BSR          .L008025BE, R0

.L008025BC:
// r_draw.c:348   {
  SHLR         RD18, 25, RQ13
  MOVU.B       (RQ20, RQ13), RQ12
  MOV.Q        (R2, 32), RQ11
  MOVU.W       (RQ11, RQ12), RQ13
  MOVU.W       RQ13, (RQ9, 0)
// r_draw.c:350   dest += SCREENWIDTH;
  ADD          RQ9, 640, RQ9
// r_draw.c:351   frac += fracstep;
  MOVU.L       (R2, 28), RD10
  ADDU.L       RD18, RD10, RD18
// r_draw.c:352   count--;
  MOV.L        (R2, 44), RD17
  ADDS.L       RD17, -1, RD17
  MOV.L        RD17, (R2, 44)

.L008025BE:
  MOV.L        (R2, 44), RD13
  BRGT.L       R0, RD13, .L008025BC

.L008025BD:

.L00C01F8A:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

P_InitPicAnims:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
// p_spec.c:155   j = 256;
  ADD          R0, 256, RD21
// p_spec.c:158   lastanim = anims;
  MOV          anims, RQ20
  ADD          RQ20, 0, RQ27
  MOV.Q        RQ27, lastanim
// p_spec.c:159   for (i=0 ; animdefs[i].istexture != -1 ; i++)
  ADD          R0, 0, RD9
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       -1, RQ18, .L00802083

.L00802081:
// p_spec.c:160   {
  ADDS.L       RD21, -1, RD21
// p_spec.c:162   if(j<0)
  BRGE.L       R0, RD21, .L00802084
// p_spec.c:163   __debugbreak();

P_InitPicAnims.debugbreak_L03A9:
  BRK          937

.L00802084:
// p_spec.c:165   if (animdefs[i].istexture)
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.L       R0, RQ18, .L00802085
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 10, RQ10
  BSR          R_CheckTextureNumForName, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       -1, RQ18, .L00802082
// p_spec.c:171   lastanim->picnum = R_TextureNumForName (animdefs[i].endname);
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 1, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 4)
// p_spec.c:172   lastanim->basepic = R_TextureNumForName (animdefs[i].startname);
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 10, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 8)
  BSR          .L00802086, R0

.L00802085:
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 10, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       -1, RQ18, .L00802082
// p_spec.c:179   lastanim->picnum = R_FlatNumForName (animdefs[i].endname);
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 1, RQ10
  BSR          R_FlatNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 4)
// p_spec.c:180   lastanim->basepic = R_FlatNumForName (animdefs[i].startname);
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 10, RQ10
  BSR          R_FlatNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 8)

.L00802086:
// p_spec.c:183   n = lastanim->picnum - lastanim->basepic + 1;
  MOV.Q        lastanim, RQ20
  MOV.L        (RQ20, 4), RQ18
  MOV.L        (RQ20, 8), RQ8
  SUBS.L       RQ18, RQ8, RQ23
  ADDS.L       RQ23, 1, RD22
// p_spec.c:184   if((n<2) || (n>32))
  ADD          R0, 2, R5
  CMPLT.Q      RD22, R5, RQ18
  ADD          R0, 32, R5
  CMPGT.Q      RD22, R5, RQ8
  OR           RQ18, RQ8, RQ23
  BRNE.L       R0, RQ23, .L00802082
// p_spec.c:187   lastanim->istexture = animdefs[i].istexture;
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.B        (RQ27, 0), RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 0)
// p_spec.c:188   lastanim->numpics = n;
  MOV.L        RD22, (RQ20, 12)
// p_spec.c:190   if (lastanim->numpics < 2)
  MOV.L        (RQ20, 12), RQ8
  BRGE.L       2, RQ8, .L00802087
// p_spec.c:191   I_Error ("P_InitPicAnims: bad cycle from %s to %s",
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 1, RQ12
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, 10, RQ11
  MOV          .L00C01F97, RQ10
  BSR          I_Error, R1

.L00802087:
// p_spec.c:195   lastanim->speed = animdefs[i].speed;
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        (RQ27, 20), RQ18
  MOV.Q        lastanim, RQ20
  MOV.L        RQ18, (RQ20, 16)
// p_spec.c:196   lastanim++;
  ADD          RQ20, 20, RQ20
  MOV.Q        RQ20, lastanim

.L00802082:
  ADDS.L       RD9, 1, RD9
  MOV          animdefs, RQ20
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       -1, RQ18, .L00802081

.L00802083:

.L00C01F95:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

S_SetMusicVolume:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// s_sound.c:622   {
  CMPLT.Q      RD18, R0, RQ9
  ADD          R0, 127, R5
  CMPGT.Q      RD18, R5, RQ8
  OR           RQ9, RQ8, RQ23
  BREQ.L       R0, RQ23, .L00802D69
// s_sound.c:624   {
  MOV          .L00C01F9E, RQ10
  ADD          RD18, 0, RD11
  BSR          I_Error, R1

.L00802D69:
// s_sound.c:629   I_SetMusicVolume(127);
  ADD          R0, 127, RD10
  BSR          I_SetMusicVolume, R1
// s_sound.c:630   I_SetMusicVolume(volume);
  ADD          RD18, 0, RD10
  BSR          I_SetMusicVolume, R1
// s_sound.c:631   snd_MusicVolume = volume;
  MOV.L        RD18, snd_MusicVolume

.L00C01F9D:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MmapV:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -464, R2
  MOV.Q        RQ10, (R2, 136)
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
  MOV.L        RD13, (R2, 120)
  MOV.L        RD14, (R2, 116)
  MOV.Q        RQ15, (R2, 104)
  ADD          R2, 144, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_mmap.c:273   
// tk_core/tk_mmap.c:279   
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (R2, 88)
// tk_core/tk_mmap.c:280   
  ADD          R2, 144, RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        (R2, 136), RQ23
  MOV.Q        RQ23, (RQ8, 0)
// tk_core/tk_mmap.c:281   
  ADD          RQ9, 8, RQ8
  MOV.Q        (R2, 128), RQ22
  MOV.Q        RQ22, (RQ8, 0)
// tk_core/tk_mmap.c:282   
  ADD          RQ9, 16, RQ8
  MOV.L        (R2, 124), RD21
  MOV.L        RD21, (RQ8, 0)
// tk_core/tk_mmap.c:283   
  ADD          RQ9, 24, RQ8
  MOV.L        (R2, 120), RD20
  MOV.L        RD20, (RQ8, 0)
// tk_core/tk_mmap.c:284   
  ADD          RQ9, 32, RQ8
  MOV.L        (R2, 116), RD27
  MOV.L        RD27, (RQ8, 0)
// tk_core/tk_mmap.c:285   
  ADD          RQ9, 40, RQ8
  MOV.Q        (R2, 104), RQ26
  MOV.Q        RQ26, (RQ8, 0)
// tk_core/tk_mmap.c:286   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4112, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmap.c:290   
  MOV.Q        (R2, 88), RQ10

.L00C01FA4:
  ADD          R2, 464, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

W_CheckZonePointerSane:
// w_wad.c:2042   pb=(long long)ptr;
  ADD          RQ10, 0, RQ13
// w_wad.c:2043   if((pb&15) || (pb>>48))
  ADD          R0, 15, RQ12
  BTSTN.Q      RQ12, RQ13, .L0080297F
  SHAR.Q       RQ13, 48, RQ12
  BRNE.Q       R0, RQ12, .L0080297F
  BSR          .L0080297E, R0

.L0080297F:
// w_wad.c:2044   {

W_CheckZonePointerSane.debugbreak_L03AF:
  BRK          943

.L0080297E:

.L00C01FA5:
  JSR          R1, 0, R0

NetbufferSize:
// d_net.c:97   {
  ADD          RQ0, 8, RQ13
  MOV.Q        netbuffer, RQ12
  MOVU.B       (RQ12, 7), RQ11
  LEA.Q        RQ13, RQ11, RQ10
  ADD          RQ10, 0, RQ17
  ADDS.L       RQ17, 0, RQ11
  ADDS.L       RQ11, 0, RD10

.L00C01FAC:
  JSR          R1, 0, R0

TK_ExitV:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -424, R2
  MOV.L        RD10, (R2, 108)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_mmpage.c:738   
// tk_core/tk_mmpage.c:742   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 88)
// tk_core/tk_mmpage.c:743   
  ADD          R2, 112, RQ8
  ADD          RQ8, 0, RQ23
  MOV.L        (R2, 108), RD22
  MOV.L        RD22, (RQ23, 0)
// tk_core/tk_mmpage.c:744   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4099, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1

.L00C01FB2:
  ADD          R2, 424, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

STlib_updateBinIcon:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 164)
// st_lib.c:304   if(!bi->p)
  MOV.Q        (RQ8, 32), RQ9
  BREQ.Q       R0, RQ9, .L00C01FB8
// st_lib.c:307   if (*bi->on
  MOV.Q        (RQ8, 24), RQ9
  MOV.L        (RQ9, 0), RQ18
  BREQ.L       R0, RQ18, .L00802B7A
  MOV.L        (RQ8, 8), RQ18
  MOV.Q        (RQ8, 16), RQ9
  MOV.L        (RQ9, 0), RQ23
  BRNE.Q       RQ23, RQ18, .L00802B7B
  MOV.L        (R2, 164), RD13
  BRNE.L       R0, RD13, .L00802B7B
  BSR          .L00802B7A, R0

.L00802B7B:
// st_lib.c:309   {
  MOV.L        (RQ8, 0), RQ18
  MOV.Q        (RQ8, 32), RQ9
  MOV.W        (RQ9, 4), RQ23
  SUBS.L       RQ18, RQ23, RD21
// st_lib.c:311   y = bi->y - SHORT(bi->p->topoffset);
  MOV.L        (RQ8, 4), RQ18
  MOV.W        (RQ9, 6), RQ23
  SUBS.L       RQ18, RQ23, RD22
// st_lib.c:312   w = SHORT(bi->p->width);
  MOV.W        (RQ9, 0), RD20
// st_lib.c:313   h = SHORT(bi->p->height);
  MOV.W        (RQ9, 2), RD13
  MOV.L        RD13, (R2, 160)
  ADDS.L       RD22, -168, RQ18
  BRGE.L       R0, RQ18, .L00802B7E
// st_lib.c:316   I_Error("updateBinIcon: y - ST_Y < 0");
  MOV          .L00C01FB9, RQ10
  BSR          I_Error, R1

.L00802B7E:
  MOV.Q        (RQ8, 16), RQ9
  MOV.L        (RQ9, 0), RQ18
  BREQ.L       R0, RQ18, .L00802B7F
// st_lib.c:319   V_DrawPatchDirect(bi->x, bi->y, FG, bi->p);
  MOV.Q        (RQ8, 32), RQ9
  MOV.L        (RQ8, 4), RQ18
  MOV.L        (RQ8, 0), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ9, 0, RQ13
  BSR          V_DrawPatchDirect, R1
  BSR          .L00802B80, R0

.L00802B7F:
// st_lib.c:321   V_CopyRect(x, y-ST_Y, BG, w, h, x, y, FG);
  ADDS.L       RD22, -168, RQ18
  ADD          RD21, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 4, RD12
  ADD          RD20, 0, RD13
  MOV.L        (R2, 160), RD14
  ADD          RD21, 0, RD15
  ADD          RD22, 0, RD16
  ADD          R0, 0, RD17
  BSR          V_CopyRect, R1

.L00802B80:
  MOVU.B       st_oddframe, RD13
  BRNE.L       R0, RD13, .L00802B81
// st_lib.c:324   bi->oldval = *bi->val;
  MOV.Q        (RQ8, 16), RQ9
  MOV.L        (RQ9, 0), RQ18
  MOV.L        RQ18, (RQ8, 8)

.L00802B81:

.L00802B7A:

.L00C01FB8:
  ADD          R2, 400, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

G_DoNewGame:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
// g_game.c:1369   {
  MOV.L        RD0, demoplayback
// g_game.c:1371   netdemo = false;
  MOV.L        RD0, netdemo
// g_game.c:1372   netgame = false;
  MOV.L        RD0, netgame
// g_game.c:1373   deathmatch = false;
  MOV.L        RD0, deathmatch
// g_game.c:1374   playeringame[1] = playeringame[2] = playeringame[3] = 0;
  MOV          playeringame, RQ9
  MOV.L        RD0, (RQ9, 12)
  MOV.L        RD0, (RQ9, 8)
  MOV.L        RD0, (RQ9, 4)
// g_game.c:1375   respawnparm = false;
  MOV.L        RD0, respawnparm
// g_game.c:1376   fastparm = false;
  MOV.L        RD0, fastparm
// g_game.c:1377   nomonsters = false;
  MOV.L        RD0, nomonsters
// g_game.c:1378   consoleplayer = 0;
  MOV.L        RD0, consoleplayer
// g_game.c:1379   G_InitNew (d_skill, d_episode, d_map);
  MOV.L        d_skill, RD10
  MOV.L        d_episode, RD11
  MOV.L        d_map, RD12
  BSR          G_InitNew, R1
// g_game.c:1380   gameaction = ga_nothing;
  MOV.L        RD0, gameaction

.L00C01FBF:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

AM_activateNewScale:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -312, R2
// am_map.c:330   {
  MOV.L        TU7A00C41B/m_w, RD9
  ADD          RD9, 0, RQ18
  ADD          R0, 2, RD8
  DIVS.L       RQ18, RD8, RQ18
  MOV.L        TU7A00C41B/m_x, RD23
  ADDS.L       RD23, RQ18, RD23
  MOV.L        RD23, TU7A00C41B/m_x
// am_map.c:332   m_y += m_h/2;
  MOV.L        TU7A00C41B/m_h, RQ18
  DIVS.L       RQ18, RD8, RQ18
  MOV.L        TU7A00C41B/m_y, RD23
  ADDS.L       RD23, RQ18, RD23
  MOV.L        RD23, TU7A00C41B/m_y
// am_map.c:333   m_w = FTOM(f_w);
  MOV.L        TU7A00C41B/f_w, RD23
  SHAD.L       RD23, 16, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, TU7A00C41B/m_w
// am_map.c:334   m_h = FTOM(f_h);
  MOV.L        TU7A00C41B/f_h, RD9
  SHAD.L       RD9, 16, RQ18
  ADD          RQ18, 0, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RD9
// am_map.c:335   m_x -= m_w/2;
  MOV.L        TU7A00C41B/m_w, RD23
  ADD          RD23, 0, RQ18
  DIVS.L       RQ18, RD8, RQ18
  MOV.L        TU7A00C41B/m_x, RD22
  SUBS.L       RD22, RQ18, RD22
// am_map.c:336   m_y -= m_h/2;
  ADD          RD9, 0, RQ18
  DIVS.L       RQ18, RD8, RQ18
  MOV.L        TU7A00C41B/m_y, RD21
  SUBS.L       RD21, RQ18, RD21
// am_map.c:337   m_x2 = m_x + m_w;
  ADDS.L       RD22, RD23, RD8
  MOV.L        RD8, TU7A00C41B/m_x2
  MOV.L        RD22, TU7A00C41B/m_x
// am_map.c:338   m_y2 = m_y + m_h;
  ADDS.L       RD21, RD9, RD8
  MOV.L        RD8, TU7A00C41B/m_y2
  MOV.L        RD21, TU7A00C41B/m_y
  MOV.L        RD9, TU7A00C41B/m_h

.L00C01FC5:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

M_DrawEpisode:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 54, RD18
  ADD          R0, 38, RD9
  MOV          .L00C01FCC, RQ23
// m_menu.c:929   V_DrawPatchDirectName (54,38,0, "M_EPISOD");
  ADD          R0, 54, RD10
  ADD          R0, 38, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C01FCB:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_rename:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -1536, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.Q        RQ11, (R2, 160)
  MOV.Q        RQ12, (R2, 152)
  MOV.Q        RQ13, (R2, 144)
  MOV.Q        RQ14, (R2, 136)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 128)
  ADD          R2, 704, RQ6
  MOV.Q        RQ6, (R2, 120)
  ADD          R2, 1232, RQ6
  MOV.Q        RQ6, (R2, 112)
// tk_vf_sysc.c:155   
// tk_vf_sysc.c:157   
// tk_vf_sysc.c:158   
// tk_vf_sysc.c:169   
  ADD          R2, 176, RQ10
  MOV.Q        (R2, 152), RQ11
  BSR          strcpy, R1
// tk_vf_sysc.c:170   
  ADD          R2, 704, RQ10
  MOV.Q        (R2, 144), RQ11
  BSR          strcpy, R1
// tk_vf_sysc.c:174   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 104)
// tk_vf_sysc.c:176   
  ADD          R2, 1232, RQ8
  ADD          RQ8, 0, RQ23
  ADD          R2, 176, RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_vf_sysc.c:177   
  ADD          RQ8, 8, RQ23
  ADD          R2, 704, RQ21
  MOV.Q        RQ21, (RQ23, 0)
// tk_vf_sysc.c:178   
  ADD          RQ8, 16, RQ23
  MOV.Q        (R2, 136), RQ20
  MOV.Q        RQ20, (RQ23, 0)
// tk_vf_sysc.c:179   
  ADD          R2, 104, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4131, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
  ADD          RQ10, 0, RD18
// tk_vf_sysc.c:180   
  BRGT.L       R0, RD18, .L00800B33
// tk_vf_sysc.c:181   
  ADD          R0, -1, RD10
  BSR          .L00C01FD2, R0

.L00800B33:
// tk_vf_sysc.c:183   
  ADD          RD18, 0, RD10

.L00C01FD2:
  ADD          R2, 1536, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_AcsRun_SoundSequence:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  MOV          .L00C01FD9, RQ18
// p_acspec.c:832   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          printf, R1

.L00C01FD8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

TKMM_GetZoneTag:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmpage.c:1129   
  BRNE.Q       R0, RQ8, .L008009A8
// tk_core/tk_mmpage.c:1130   
  ADD          R0, -1, RD10
  BSR          .L00C01FDF, R0

.L008009A8:
// tk_core/tk_mmpage.c:1132   
  ADD          RQ8, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:1133   
  BRNE.Q       R0, RQ18, .L008009A9
// tk_core/tk_mmpage.c:1134   
  ADD          R0, -1, RD10
  BSR          .L00C01FDF, R0

.L008009A9:
// tk_core/tk_mmpage.c:1136   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 8, RD21
  BTST.L       RD21, RQ9, .L008009AA
// tk_core/tk_mmpage.c:1137   
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          TKMM_MMCell_GetLnkObjCellHeadPtr, R1
  ADD          RQ10, 0, RQ23
// tk_core/tk_mmpage.c:1139   
  MOV.Q        (RQ23, 0), RQ22
// tk_core/tk_mmpage.c:1140   
  SHLR.Q       RQ22, 16, RQ21
  AND          RQ21, 0x0000FFFF, RQ21
  ADDS.L       RQ21, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C01FDF, R0

.L008009AA:
// tk_core/tk_mmpage.c:1143   
  MOVU.W       (RQ18, 2), RQ9
  AND          RQ9, 0x0000FFFF, RD10

.L00C01FDF:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_GetTagInfoForName:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ22
// tk_core/lva_tagobj.c:59   
  ADD          RQ22, 0, RQ10
  BSR          TKMM_LVA_HashName, R1
  ADDS.L       RQ10, 0, RQ8
  AND          RQ8, 63, RD21
// tk_core/lva_tagobj.c:60   
  MOV          tkmm_lva_taghash, RQ20
  MOV.W        (RQ20, RD21), RD23
// tk_core/lva_tagobj.c:61   
  BSR          .L00800E03, R0

.L00800E04:
// tk_core/lva_tagobj.c:62   
  MOV          tkmm_lva_tagarr, RQ20
  MOV.Q        (RQ20, RD23), RQ18
// tk_core/lva_tagobj.c:64   
  BREQ.Q       R0, RQ18, .L00800E05
  MOV.Q        (RQ18, 0), RQ9
  BREQ.Q       R0, RQ9, .L00800E05

.L00800E06:
// tk_core/lva_tagobj.c:66   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00800E07
// tk_core/lva_tagobj.c:67   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01FE5, R0

.L00800E07:
// tk_core/lva_tagobj.c:68   
  MOV.W        (RQ18, 10), RD23

.L00800E03:
  BRGT.L       R0, RD23, .L00800E04

.L00800E05:
// tk_core/lva_tagobj.c:71   
  MOV.L        tkmm_lva_ntag, RD20
  MOV.L        RD20, (R2, 84)
  ADDS.L       RD20, 1, RD20
  MOV.L        RD20, tkmm_lva_ntag
// tk_core/lva_tagobj.c:72   
  ADD          R0, 16, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagobj.c:73   
  ADD          RQ22, 0, RQ10
  BSR          TKMM_LVA_Strdup, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, (RQ18, 0)
// tk_core/lva_tagobj.c:74   
  MOV.L        (R2, 84), RD20
  MOV.W        RD20, (RQ18, 8)
// tk_core/lva_tagobj.c:75   
  MOV          tkmm_lva_taghash, RQ27
  MOV.W        (RQ27, RD21), RQ8
  MOV.W        RQ8, (RQ18, 10)
// tk_core/lva_tagobj.c:76   
  MOV.W        RD20, (RQ27, RD21)
// tk_core/lva_tagobj.c:77   
  MOV          tkmm_lva_tagarr, RQ27
  MOV.Q        RQ18, (RQ27, RD20)
// tk_core/lva_tagobj.c:78   
  ADD          RQ18, 0, RQ10
  BSR          .L00C01FE5, R0
// tk_core/lva_tagobj.c:101   

.L00C01FE5:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_YieldCurrentThreadA:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_irq.c:2060   
// tk_core/tk_irq.c:2080   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 88)
// tk_core/tk_irq.c:2081   
  ADD          R2, 112, RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        (R2, 104), RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_core/tk_irq.c:2082   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4120, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_irq.c:2083   

.L00C01FEB:
  ADD          R2, 424, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

__get_stdin:
// pdpc201/stdio.c:138   
  MOV          __stdin, RQ13
  ADD          RQ13, 0, RQ10

.L00C01FEC:
  JSR          R1, 0, R0
  .balign 4

F_CastResponder:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// f_finale.c:528   {
  MOV.L        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L00C009B2
// f_finale.c:532   if (castdeath)
  MOV.L        castdeath, RD8
  BREQ.L       R0, RD8, .L0080130C
// f_finale.c:533   return true;			// already in dying frames
  ADD          R0, 1, RD10
  BSR          .L00C01FF2, R0

.L0080130C:
// f_finale.c:536   castdeath = true;
  ADD          R0, 1, RD8
  MOV.L        RD8, castdeath
// f_finale.c:537   caststate = &states[mobjinfo[castorder[castnum].type].deathstate];
  MOV          castorder, RQ8
  MOV.L        castnum, RD23
  SHAD.L       RD23, 4, RQ22
  ADD          RQ8, RQ22, RQ22
  MOV.L        (RQ22, 8), RQ18
  MOV          mobjinfo, RQ13
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 48), RQ18
  MOV          states, RQ11
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ10
  ADD          RQ11, RQ10, RQ10
// f_finale.c:538   casttics = caststate->tics;
  MOV.L        (RQ10, 8), RD11
  MOV.Q        RQ10, caststate
  MOV.L        RD11, casttics
// f_finale.c:539   castframes = 0;
  MOV.L        RD0, castframes
// f_finale.c:540   castattacking = false;
  MOV.L        RD0, castattacking
// f_finale.c:541   if (mobjinfo[castorder[castnum].type].deathsound)
  SHAD.L       RD23, 4, RQ22
  ADD          RQ8, RQ22, RQ22
  MOV.L        (RQ22, 8), RQ18
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 56), RQ18
  BREQ.L       R0, RQ18, .L0080130D
// f_finale.c:542   S_StartSound (NULL, mobjinfo[castorder[castnum].type].deathsound);
  MOV          castorder, RQ8
  MOV.L        castnum, RD23
  SHAD.L       RD23, 4, RQ22
  ADD          RQ8, RQ22, RQ22
  MOV.L        (RQ22, 8), RQ18
  MOV          mobjinfo, RQ8
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ23
  ADD          RQ8, RQ23, RQ23
  MOV.L        (RQ23, 56), RQ18
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          S_StartSound, R1

.L0080130D:
// f_finale.c:544   return true;
  ADD          R0, 1, RD10
  BSR          .L00C01FF2, R0

.L00C009B2:
  ADD          R0, 0, RQ10

.L00C01FF2:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

dlerror:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          R0, 5, RD8
// pdpc201/bt_dlfcn.c:14   
  ADD          RQ0, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 5, RD12
  BSR          TK_DlSymA, R1

.L00C01FF8:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R8
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

HUlib_drawSText:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
// hu_lib.c:237   if(!s || !s->on)
  BREQ.Q       R0, RQ9, .L00C01FFE
  MOV.Q        (RQ9, 456), RQ22
  BREQ.Q       R0, RQ22, .L00C01FFE

.L00802D03:
// hu_lib.c:240   if (!*s->on)
  MOV.Q        (RQ9, 456), RQ22
  MOV.L        (RQ22, 0), RQ18
  BREQ.L       R0, RQ18, .L00C01FFE
// hu_lib.c:244   for (i=0 ; i<s->h ; i++)
  ADD          RD0, 0, RD23
  MOV.L        (RQ9, 448), RQ18
  BRGE.L       RQ18, RD23, .L00802D07

.L00802D05:
// hu_lib.c:245   {
  MOV.L        (RQ9, 452), RQ18
  SUBS.L       RQ18, RD23, RD8
// hu_lib.c:247   if (idx < 0)
  BRGE.L       R0, RD8, .L00802D08
// hu_lib.c:248   idx += s->h; // handle queue of lines
  MOV.L        (RQ9, 448), RQ18
  ADDS.L       RD8, RQ18, RD8

.L00802D08:
// hu_lib.c:250   l = &s->l[idx];
  ADD          RQ9, 0, RQ22
  ADD          R0, 112, R5
  MUL.L        RD8, R5, RQ21
  ADD          RQ22, RQ21, RQ21
// hu_lib.c:253   HUlib_drawTextLine(l, false); // no cursor, please
  ADD          RQ21, 0, RQ10
  ADD          R0, 0, RD11
  BSR          HUlib_drawTextLine, R1
  ADDS.L       RD23, 1, RD23
  MOV.L        (RQ9, 448), RQ18
  BRLT.L       RQ18, RD23, .L00802D05

.L00802D07:

.L00C01FFE:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_LoadNodes:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 124)
// p_setup.c:312   lsz = W_LumpLength (lump);
  MOV.L        (R2, 124), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD27
// p_setup.c:313   if(lsz % sizeof(mapnode_t))
  ADD          R0, 28, R5
  MODS.L       RD27, R5, RQ18
  MOV.L        RD27, (R2, 108)
  BREQ.L       R0, RQ18, .L00801EE5
// p_setup.c:314   __debugbreak();

P_LoadNodes.debugbreak_L03B5:
  BRK          949

.L00801EE5:
// p_setup.c:316   numnodes = lsz / sizeof(mapnode_t);
  MOV.L        (R2, 108), RD27
  ADD          R0, 28, R5
  DIVS.L       RD27, R5, RD26
// p_setup.c:317   nodes = Z_Malloc ((numnodes+4)*sizeof(node_t),PU_LEVEL_NODE,0);	
  ADDS.L       RD26, 4, RQ18
  MOV.L        RD26, numnodes
  ADD          R0, 52, R5
  MULS.L       RQ18, R5, RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 57, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, nodes
// p_setup.c:318   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 124), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ26
// p_setup.c:320   mn = (mapnode_t *)data;
  ADD          RQ26, 0, RQ21
  MOV.Q        RQ26, (R2, 112)
// p_setup.c:321   no = nodes;
  MOV.Q        nodes, RQ22
// p_setup.c:323   for (i=0 ; i<numnodes ; i++, no++, mn++)
  ADD          R0, 0, RD20
  MOV.L        numnodes, RD25
  BRGE.L       RD25, RD20, .L00801EE8

.L00801EE6:
// p_setup.c:324   {
  MOV.W        (RQ21, 0), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ22, 0)
// p_setup.c:326   no->y = SHORT(mn->y)<<FRACBITS;
  MOV.W        (RQ21, 2), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ22, 4)
// p_setup.c:327   no->dx = SHORT(mn->dx)<<FRACBITS;
  MOV.W        (RQ21, 4), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ22, 8)
// p_setup.c:328   no->dy = SHORT(mn->dy)<<FRACBITS;
  MOV.W        (RQ21, 6), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ22, 12)
// p_setup.c:329   for (j=0 ; j<2 ; j++)
  ADD          R0, 0, RD8

.L00801EE9:
// p_setup.c:330   {
  ADD          RQ21, 24, RQ27
  MOVU.W       (RQ27, RD8), RQ18
  ADD          RQ22, 48, RQ27
  MOVU.W       RQ18, (RQ27, RD8)
// p_setup.c:332   for (k=0 ; k<4 ; k++)
  ADD          R0, 0, RD9

.L00801EEC:
// p_setup.c:333   no->bbox[j][k] = SHORT(mn->bbox[j][k])<<FRACBITS;
  ADD          RQ21, 8, RQ27
  LEA.Q        RQ27, RD8, RQ26
  MOV.W        (RQ26, RD9), RQ18
  SHAD.L       RQ18, 16, RQ23
  ADD          RQ22, 16, RQ27
  SHAD.L       RD8, 4, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RQ23, (RQ26, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L00801EEC

.L00801EEE:
  ADDS.L       RD8, 1, RD8
  BRLT.L       2, RD8, .L00801EE9

.L00801EEB:
  ADD          RD20, 0, RQ18
  ADDS.L       RD20, 1, RD20
  MOV.Q        RQ22, (R2, 80)
  ADD          RQ22, 52, RQ22
  MOV.Q        RQ21, (R2, 72)
  ADD          RQ21, 28, RQ21
  MOV.L        numnodes, RD27
  BRLT.L       RD27, RD20, .L00801EE6

.L00801EE8:
// p_setup.c:337   Z_ChangeTag (nodes, PU_LEVEL_NODE);  //BGB: Debug
  MOV.Q        nodes, RQ10
  ADD          R0, 57, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:339   Z_Free (data);
  MOV.Q        (R2, 112), RQ10
  BSR          Z_Free, R1

.L00C02009:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

P_NightmareRespawn:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ23
// p_mobj.c:393   x = mobj->spawnpoint.x << FRACBITS; 
  ADD          RQ23, 204, RQ27
  MOV.W        (RQ27, 2), RQ18
  SHAD.L       RQ18, 16, RD20
// p_mobj.c:394   y = mobj->spawnpoint.y << FRACBITS; 
  MOV.W        (RQ27, 4), RQ18
  SHAD.L       RQ18, 16, RD26
  MOV.L        RD26, (R2, 132)
// p_mobj.c:397   if (!P_CheckPosition (mobj, x, y) ) 
  ADD          RQ23, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RD26, 0, RD12
  BSR          P_CheckPosition, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02010
// p_mobj.c:402   mo = P_SpawnMobj (mobj->x,
  MOV.Q        (RQ23, 88), RQ21
  MOV.Q        (RQ21, 0), RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.L        (RQ23, 28), RQ8
  MOV.L        (RQ23, 24), RQ22
  ADD          RQ22, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ9
// p_mobj.c:406   S_StartSound (mo, sfx_telept);
  ADD          RQ9, 0, RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_mobj.c:409   ss = R_PointInSubsector (x,y); 
  ADD          RD20, 0, RD10
  MOV.L        (R2, 132), RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ26
// p_mobj.c:411   mo = P_SpawnMobj (x, y, ss->sector->floorheight , MT_TFOG); 
  MOV.Q        (RQ26, 0), RQ21
  MOV.Q        RQ26, (R2, 120)
  MOV.L        (RQ21, 0), RQ8
  ADD          RD20, 0, RD10
  MOV.L        (R2, 132), RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ9
// p_mobj.c:413   S_StartSound (mo, sfx_telept);
  ADD          RQ9, 0, RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_mobj.c:416   mthing = &mobj->spawnpoint;
  ADD          RQ23, 204, RQ21
  MOV.Q        RQ21, (R2, 112)
// p_mobj.c:419   if (mobj->info->flags & MF_SPAWNCEILING)
  MOV.Q        (RQ23, 136), RQ27
  MOV.L        (RQ27, 84), RQ8
  ADD          R0, 256, RD25
  BTST.L       RD25, RQ8, .L00802292
// p_mobj.c:420   z = ONCEILINGZ;
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, (R2, 128)
  BSR          .L00802293, R0

.L00802292:
// p_mobj.c:422   z = ONFLOORZ;
  LUI          0xFFFFFFFFFFF80000, RD27
  MOV.L        RD27, (R2, 128)

.L00802293:
// p_mobj.c:425   mo = P_SpawnMobj (x,y,z, mobj->type);
  MOV.L        (RQ23, 128), RQ22
  ADD          RD20, 0, RD10
  MOV.L        (R2, 132), RD11
  MOV.L        (R2, 128), RD12
  ADD          RQ22, 0, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ9
// p_mobj.c:426   mo->spawnpoint = mobj->spawnpoint;	
  ADD          RQ23, 204, RQ27
  ADD          RQ9, 204, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        (RQ27, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.L        (RQ27, 16), RQ11
  MOV.L        RQ11, (RQ10, 16)
// p_mobj.c:427   mo->angle = ANG45 * (mthing->angle/45);
  MOV.Q        (R2, 112), RQ26
  MOV.W        (RQ26, 8), RQ18
  ADD          R0, 45, R5
  DIVS.L       RQ18, R5, RQ8
  SHAD.L       RQ8, 29, RQ22
  MOVU.L       RQ22, (RQ9, 56)
// p_mobj.c:429   if (mthing->options & MTF_AMBUSH)
  MOV.W        (RQ26, 12), RQ18
  ADD          R0, 8, RD25
  BTST.L       RD25, RQ18, .L00802294
// p_mobj.c:430   mo->flags |= MF_AMBUSH;
  MOV.L        (RQ9, 160), RQ8
  OR           RQ8, 32, RQ22
  MOV.L        RQ22, (RQ9, 160)

.L00802294:
// p_mobj.c:432   mo->reactiontime = 18;
  ADD          R0, 18, RD27
  MOV.L        RD27, (RQ9, 184)
// p_mobj.c:435   P_RemoveMobj (mobj);
  ADD          RQ23, 0, RQ10
  BSR          P_RemoveMobj, R1

.L00C02010:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

M_Options:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// m_menu.c:1012   {
  MOV          OptionsDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C02016:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

mprotect:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.L        RD12, (R2, 76)
// pdpc201/bt_mman.c:29   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.L        (R2, 76), RD12
  BSR          tk_mprotect, R1

.L00C0201C:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

strtol:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 96)
  MOV.L        RD12, (R2, 92)
// pdpc201/stdlib.c:1012   
  ADD          R0, 0, RD22
// pdpc201/stdlib.c:1014   
  BSR          .L00800769, R0

.L0080076A:
// pdpc201/stdlib.c:1015   
  ADD          RQ9, 1, RQ9

.L00800769:
  MOV.B        (RQ9, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isspace, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L0080076A

.L0080076B:
// pdpc201/stdlib.c:1017   
  MOV.B        (RQ9, 0), RQ8
  BRNE.Q       45, RQ8, .L0080076C
// pdpc201/stdlib.c:1019   
  ADD          R0, 1, RD22
// pdpc201/stdlib.c:1021   
  ADD          RQ9, 1, RQ9
  BSR          .L0080076D, R0

.L0080076C:
  MOV.B        (RQ9, 0), RQ18
  BRNE.Q       43, RQ18, .L0080076E
// pdpc201/stdlib.c:1024   
  ADD          RQ9, 1, RQ9

.L0080076E:

.L0080076D:
// pdpc201/stdlib.c:1026   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 96), RQ11
  MOV.L        (R2, 92), RD12
  BSR          strtoul, R1
  ADD          RQ10, 0, RQ23
// pdpc201/stdlib.c:1028   
  BREQ.L       R0, RD22, .L0080076F
// pdpc201/stdlib.c:1029   
  SUB          R0, RQ23, RQ20
  ADD          RQ20, 0, RQ21
  BSR          .L00800770, R0

.L0080076F:
// pdpc201/stdlib.c:1033   
  ADD          RQ23, 0, RQ21

.L00800770:
// pdpc201/stdlib.c:1035   
  ADD          RQ21, 0, RQ10

.L00C02022:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_DropWeapon:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
// p_pspr.c:268   {
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ8
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ23
  ADD          RQ8, RQ23, RQ23
  MOV.L        (RQ23, 8), RQ18
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          P_SetPsprite, R1

.L00C02028:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

R_ClipPassWallSegment:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 108)
  ADD          RD11, 0, RD21
// r_bsp.c:214   if(first>last)
  MOV.L        (R2, 108), RD13
  BRLE.L       RD21, RD13, .L008023D7
// r_bsp.c:215   {

R_ClipPassWallSegment.debugbreak_L03C0:
  BRK          960

.L008023D7:
// r_bsp.c:221   if(r_ispolyobj)
  MOVU.B       r_ispolyobj, RD13
  BREQ.L       R0, RD13, .L008023D8
// r_bsp.c:222   {

R_ClipPassWallSegment.debugbreak_L03C1:
  BRK          961
// r_bsp.c:224   R_StoreWallRange (first, last);
  MOV.L        (R2, 108), RD10
  ADD          RD21, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:225   return;
  BSR          .L00C02038, R0

.L008023D8:
// r_bsp.c:231   start = solidsegs;
  MOV          solidsegs, RQ9
// r_bsp.c:232   while (start->last < first-1)
  BSR          .L008023DB, R0

.L008023D9:
// r_bsp.c:233   start++;
  ADD          RQ9, 8, RQ9

.L008023DB:
  MOV.L        (RQ9, 4), RQ18
  MOV.L        (R2, 108), RD13
  ADDS.L       RD13, -1, RQ8
  BRLT.L       RQ8, RQ18, .L008023D9

.L008023DA:
// r_bsp.c:235   if (first < start->first)
  MOV.L        (RQ9, 0), RQ18
  MOV.L        (R2, 108), RD13
  BRGE.L       RQ18, RD13, .L008023DC
  MOV.L        (RQ9, 0), RQ8
  ADDS.L       RQ8, -1, RQ18
  BRGE.L       RQ18, RD21, .L008023DD
// r_bsp.c:240   R_StoreWallRange (first, last);
  MOV.L        (R2, 108), RD10
  ADD          RD21, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:241   return;
  BSR          .L00C02038, R0

.L008023DD:
// r_bsp.c:245   R_StoreWallRange (first, start->first - 1);
  MOV.L        (RQ9, 0), RQ8
  ADDS.L       RQ8, -1, RQ18
  MOV.L        (R2, 108), RD10
  ADD          RQ18, 0, RD11
  BSR          R_StoreWallRange, R1

.L008023DC:
// r_bsp.c:249   if (last <= start->last)
  MOV.L        (RQ9, 4), RQ8
  BRLE.L       RQ8, RD21, .L00C02038
// r_bsp.c:252   while (last >= (start+1)->first-1)
  BSR          .L008023E0, R0

.L008023DE:
// r_bsp.c:255   R_StoreWallRange (start->last + 1, (start+1)->first - 1);
  ADD          RQ9, 8, RQ22
  MOV.L        (RQ22, 0), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV.L        (RQ9, 4), RQ18
  ADDS.L       RQ18, 1, RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          R_StoreWallRange, R1
// r_bsp.c:256   start++;
  ADD          RQ9, 8, RQ9
// r_bsp.c:258   if (last <= start->last)
  MOV.L        (RQ9, 4), RQ18
  BRLE.L       RQ18, RD21, .L00C02038

.L008023E0:
  ADD          RQ9, 8, RQ22
  MOV.L        (RQ22, 0), RQ23
  ADDS.L       RQ23, -1, RQ18
  BRGE.L       RQ18, RD21, .L008023DE

.L008023DF:
// r_bsp.c:263   R_StoreWallRange (start->last + 1, last);
  MOV.L        (RQ9, 4), RQ8
  ADDS.L       RQ8, 1, RQ23
  ADD          RQ23, 0, RD10
  ADD          RD21, 0, RD11
  BSR          R_StoreWallRange, R1

.L00C02038:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_sysc_fsend:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  MOV.X        R26, (R2, 72)
  MOV.X        R18, (R2, 8)
  MOV.X        R22, (R2, 40)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -464, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.L        RD11, (R2, 148)
  MOV.Q        RQ12, (R2, 136)
  MOV.L        RD13, (R2, 132)
  MOV.L        RD14, (R2, 128)
  MOV.Q        RQ15, (R2, 120)
  MOV.L        RD16, (R2, 116)
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 104)
// tk_vf_sysc.c:311   
// tk_vf_sysc.c:316   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 96)
// tk_vf_sysc.c:317   
  MOV.Q        (R2, 152), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 160, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:318   
  ADD          RQ23, 8, RQ21
  MOV.L        (R2, 148), RD20
  MOV.L        RD20, (RQ21, 0)
// tk_vf_sysc.c:319   
  ADD          RQ23, 16, RQ21
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ21, 0)
// tk_vf_sysc.c:320   
  ADD          RQ23, 24, RQ21
  MOV.L        (R2, 132), RD26
  MOV.L        RD26, (RQ21, 0)
// tk_vf_sysc.c:321   
  ADD          RQ23, 32, RQ21
  MOV.L        (R2, 128), RD25
  MOV.L        RD25, (RQ21, 0)
// tk_vf_sysc.c:322   
  ADD          RQ23, 40, RQ21
  MOV.Q        (R2, 120), RQ24
  MOV.Q        RQ24, (RQ21, 0)
// tk_vf_sysc.c:323   
  ADD          RQ23, 48, RQ21
  MOV.L        (R2, 116), RD19
  MOV.L        RD19, (RQ21, 0)
// tk_vf_sysc.c:324   
  ADD          R2, 96, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4144, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          tk_syscall, R1
// tk_vf_sysc.c:325   

.L00C02040:
  ADD          R2, 464, R2
  MOV.Q        (R2, 88), RQ1
  MOV.Q        (R2, 0), R9
  MOV.X        (R2, 8), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawTime:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  ADD          RD10, 0, RD22
  ADD          RD11, 0, RD21
  ADD          RD12, 0, RD23
// wi_stuff.c:720   if (t<0)
  BRLT.L       R0, RD23, .L00C02046
// wi_stuff.c:723   if (t <= 61*59)
  LDIZ         3599, RD20
  BRGT.L       RD20, RD23, .L008029D0
// wi_stuff.c:724   {
  ADD          R0, 1, RD9
// wi_stuff.c:727   do

.L008029D1:
// wi_stuff.c:728   {
  DIVS.L       RD23, RD9, RQ18
  ADD          R0, 60, R5
  MODS.L       RQ18, R5, RD20
  MOV.L        RD20, (R2, 80)
// wi_stuff.c:730   x = WI_drawNum(x, y, n, 2) - SHORT(colon->width);
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  ADD          RD20, 0, RD12
  ADD          R0, 2, RD13
  BSR          WI_drawNum, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        TU7A00CB85/colon, RQ27
  MOV.W        (RQ27, 0), RQ8
  SUBS.L       RQ18, RQ8, RD22
// wi_stuff.c:731   div *= 60;
  ADD          R0, 60, R5
  MULS.L       RD9, R5, RD9
// wi_stuff.c:734   if (div==60 || t / div)
  BREQ.Q       60, RD9, .L008029D5
  DIVS.L       RD23, RD9, RQ18
  BRNE.L       R0, RQ18, .L008029D5
  BSR          .L008029D4, R0

.L008029D5:
// wi_stuff.c:735   V_DrawPatch(x, y, FB, colon);
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/colon, RQ13
  BSR          V_DrawPatch, R1

.L008029D4:
  DIVS.L       RD23, RD9, RQ8
  BRNE.L       R0, RQ8, .L008029D1
  BSR          .L008029D7, R0

.L008029D0:
// wi_stuff.c:742   V_DrawPatch(x - SHORT(sucks->width), y, FB, sucks); 
  MOV.Q        TU7A00CB85/sucks, RQ20
  MOV.W        (RQ20, 0), RQ18
  SUBS.L       RD22, RQ18, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/sucks, RQ13
  BSR          V_DrawPatch, R1

.L008029D7:

.L00C02046:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_unlink:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_vfile.c:512   
  ADD          RQ0, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_unlink2, R1

.L00C0204C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R8
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

D_Display:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
// d_main.c:208   if (nodrawers)
  MOV.L        nodrawers, RD27
  BRNE.L       R0, RD27, .L00C02052
// d_main.c:211   redrawsbar = false;
  MOV.L        RD0, (R2, 132)
// d_main.c:214   if (setsizeneeded)
  MOV.L        setsizeneeded, RD27
  BREQ.L       R0, RD27, .L00801366
// d_main.c:215   {
  BSR          R_ExecuteSetViewSize, R1
// d_main.c:217   oldgamestate = -1;					  // force background redraw
  ADD          R0, -1, RD27
  MOV.L        RD27, D_Display/oldgamestate!18
// d_main.c:218   borderdrawcount = 3;
  ADD          R0, 3, RD27
  MOV.L        RD27, D_Display/borderdrawcount!18

.L00801366:
// d_main.c:221   wipegamestate = gamestate;		//BGB: wipe doesn't seem to work with 16bpp
  MOV.L        gamestate, RD26
  ADD          RD26, 0, RD27
// d_main.c:224   if (gamestate != wipegamestate)
  MOV.L        RD27, wipegamestate
  BREQ.Q       RD27, RD26, .L00801367
// d_main.c:225   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)
// d_main.c:227   wipe_StartScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 200, RD13
  BSR          wipe_StartScreen, R1
  BSR          .L00801368, R0

.L00801367:
// d_main.c:230   {
  MOV.L        RD0, (R2, 136)

.L00801368:
// d_main.c:234   if (gamestate == GS_LEVEL && gametic)
  MOV.L        gamestate, RD27
  BRNE.L       R0, RD27, .L00801369
  MOV.L        gametic, RD27
  BREQ.L       R0, RD27, .L00801369

.L0080136A:
// d_main.c:235   HU_Erase();
  BSR          HU_Erase, R1

.L00801369:
// d_main.c:238   switch (gamestate)
  MOV.L        gamestate, RD27
  BREQ.L       R0, RD27, .L0080136D
  MOV.L        gamestate, RD27
  BREQ.Q       1, RD27, .L0080136E
  MOV.L        gamestate, RD27
  BREQ.Q       2, RD27, .L0080136F
  MOV.L        gamestate, RD27
  BREQ.Q       3, RD27, .L00801370
  BSR          .L0080136C, R0

.L0080136D:
// d_main.c:240   case GS_LEVEL:
  MOV.L        gametic, RD27
  BREQ.L       R0, RD27, .L0080136C
// d_main.c:243   if (automapactive)
  MOV.L        automapactive, RD27
  BREQ.L       R0, RD27, .L00801371
// d_main.c:244   AM_Drawer ();
  BSR          AM_Drawer, R1

.L00801371:
// d_main.c:245   if (wipe || (viewheight != 200 && fullscreen) )
  MOV.L        (R2, 136), RD27
  BRNE.L       R0, RD27, .L00801373
  MOV.L        viewheight, RD27
  BREQ.Q       200, RD27, .L00801372
  MOV.L        D_Display/fullscreen!18, RD27
  BREQ.L       R0, RD27, .L00801372

.L00801373:
// d_main.c:246   redrawsbar = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00801372:
// d_main.c:247   if (inhelpscreensstate && !inhelpscreens)
  MOV.L        D_Display/inhelpscreensstate!18, RD27
  BREQ.L       R0, RD27, .L00801376
  MOV.L        inhelpscreens, RD27
  BRNE.L       R0, RD27, .L00801376

.L00801377:
// d_main.c:248   redrawsbar = true;			  // just put away the help screen
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00801376:
// d_main.c:249   ST_Drawer (viewheight == 200, redrawsbar );
  MOV.L        viewheight, RD27
  ADD          R0, 200, R5
  CMPEQ.Q      RD27, R5, RQ22
  ADD          RQ22, 0, RD10
  MOV.L        (R2, 132), RD11
  BSR          ST_Drawer, R1
// d_main.c:250   fullscreen = viewheight == 200;
  MOV.L        viewheight, RD27
  ADD          R0, 200, R5
  CMPEQ.Q      RD27, R5, RD26
  MOV.L        RD26, D_Display/fullscreen!18
// d_main.c:251   break;
  BSR          .L0080136C, R0

.L0080136E:
// d_main.c:253   case GS_INTERMISSION:
  BSR          WI_Drawer, R1
// d_main.c:255   break;
  BSR          .L0080136C, R0

.L0080136F:
// d_main.c:257   case GS_FINALE:
  BSR          F_Drawer, R1
// d_main.c:259   break;
  BSR          .L0080136C, R0

.L00801370:
// d_main.c:261   case GS_DEMOSCREEN:
  BSR          D_PageDrawer, R1
// d_main.c:263   break;

.L0080136C:
// d_main.c:267   I_UpdateNoBlit ();
  BSR          I_UpdateNoBlit, R1
// d_main.c:270   if (gamestate == GS_LEVEL && !automapactive && gametic)
  MOV.L        gamestate, RD27
  CMPEQ.Q      RD27, R0, RQ22
  MOV.L        automapactive, RD27
  CMPEQ.Q      RD27, R0, RQ21
  BTST.L       RQ21, RQ22, .L00801379
  MOV.L        gametic, RD27
  BREQ.L       R0, RD27, .L00801379

.L0080137A:
// d_main.c:271   R_RenderPlayerView (&players[displayplayer]);
  MOV          players, RQ27
  MOV.L        displayplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ10
  ADD          RQ27, RQ10, RQ10
  MOV.Q        RQ10, (R2, 104)
  BSR          R_RenderPlayerView, R1

.L00801379:
// d_main.c:273   if (gamestate == GS_LEVEL && gametic)
  MOV.L        gamestate, RD27
  BRNE.L       R0, RD27, .L0080137C
  MOV.L        gametic, RD27
  BREQ.L       R0, RD27, .L0080137C

.L0080137D:
// d_main.c:274   HU_Drawer ();
  BSR          HU_Drawer, R1

.L0080137C:
// d_main.c:277   if (gamestate != oldgamestate && gamestate != GS_LEVEL)
  MOV.L        gamestate, RD27
  MOV.L        D_Display/oldgamestate!18, RD26
  CMPNE.Q      RD27, RD26, RQ22
  CMPNE.Q      RD27, R0, RQ21
  BTST.L       RQ21, RQ22, .L0080137F
// d_main.c:278   {
  MOV          .L00C02053, RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpName, R1
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        (R2, 104), RQ10
  BSR          I_SetPalette, R1
// d_main.c:280   I_SetPaletteIndex (0);
  ADD          R0, 0, RD10
  BSR          I_SetPaletteIndex, R1

.L0080137F:
// d_main.c:284   if (gamestate == GS_LEVEL && oldgamestate != GS_LEVEL)
  MOV.L        gamestate, RD27
  CMPEQ.Q      RD27, R0, RQ22
  MOV.L        D_Display/oldgamestate!18, RD27
  CMPNE.Q      RD27, R0, RQ21
  BTST.L       RQ21, RQ22, .L00801380
// d_main.c:285   {
  MOV.L        RD0, D_Display/viewactivestate!18
// d_main.c:287   R_FillBackScreen ();	// draw the pattern into the back screen
  BSR          R_FillBackScreen, R1

.L00801380:
// d_main.c:291   if (gamestate == GS_LEVEL && !automapactive && scaledviewwidth != 320)
  MOV.L        gamestate, RD27
  CMPEQ.Q      RD27, R0, RQ22
  MOV.L        automapactive, RD27
  CMPEQ.Q      RD27, R0, RQ21
  AND          RQ22, RQ21, RQ20
  MOV.L        scaledviewwidth, RD27
  ADD          R0, 320, R5
  CMPNE.Q      RD27, R5, RQ22
  BTST.L       RQ22, RQ20, .L00801381
  MOV.L        menuactive, RD27
  BRNE.L       R0, RD27, .L00801383
  MOV.L        D_Display/menuactivestate!18, RD27
  BRNE.L       R0, RD27, .L00801383

.L00801384:
  MOV.L        D_Display/viewactivestate!18, RD27
  BREQ.L       R0, RD27, .L00801383
  BSR          .L00801382, R0

.L00801383:
// d_main.c:294   borderdrawcount = 3;
  ADD          R0, 3, RD27
  MOV.L        RD27, D_Display/borderdrawcount!18

.L00801382:
  MOV.L        D_Display/borderdrawcount!18, RD27
  BREQ.L       R0, RD27, .L00801386
// d_main.c:296   {
  BSR          R_DrawViewBorder, R1
// d_main.c:298   borderdrawcount--;
  MOV.L        D_Display/borderdrawcount!18, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, D_Display/borderdrawcount!18

.L00801386:

.L00801381:
// d_main.c:302   menuactivestate = menuactive;
  MOV.L        menuactive, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, D_Display/menuactivestate!18
// d_main.c:303   viewactivestate = viewactive;
  MOV.L        viewactive, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, D_Display/viewactivestate!18
// d_main.c:304   inhelpscreensstate = inhelpscreens;
  MOV.L        inhelpscreens, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, D_Display/inhelpscreensstate!18
// d_main.c:305   oldgamestate = wipegamestate = gamestate;
  MOV.L        gamestate, RD27
  MOV.L        RD27, wipegamestate
  MOV.L        RD27, D_Display/oldgamestate!18
// d_main.c:308   if (paused)
  MOV.L        paused, RD27
  BREQ.L       R0, RD27, .L00801387
  MOV.L        automapactive, RD27
  BREQ.L       R0, RD27, .L00801388
// d_main.c:311   y = 4;
  ADD          R0, 4, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L00801389, R0

.L00801388:
// d_main.c:313   y = viewwindowy+4;
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, 4, RD26
  MOV.L        RD26, (R2, 140)

.L00801389:
// d_main.c:314   V_DrawPatchDirect(viewwindowx+(scaledviewwidth-68)/2,
  MOV          .L00C02054, RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpName, R1
  MOV.Q        RQ10, (R2, 104)
  MOV.L        scaledviewwidth, RD27
  ADDS.L       RD27, -68, RQ20
  ADD          RQ20, 0, RQ22
  ADD          R0, 2, RD27
  DIVS.L       RQ22, RD27, RQ22
  MOV.L        viewwindowx, RD26
  ADDS.L       RD26, RQ22, RQ21
  ADD          RQ21, 0, RD10
  MOV.L        (R2, 140), RD11
  ADD          R0, 0, RD12
  MOV.Q        (R2, 104), RQ13
  BSR          V_DrawPatchDirect, R1

.L00801387:
// d_main.c:320   M_Drawer ();		  // menu is drawn even on top of everything
  BSR          M_Drawer, R1
// d_main.c:321   NetUpdate ();		 // send out any new accumulation
  BSR          NetUpdate, R1
// d_main.c:325   if (!wipe)
  MOV.L        (R2, 136), RD27
  BRNE.L       R0, RD27, .L0080138A
// d_main.c:326   {
  BSR          I_FinishUpdate, R1
// d_main.c:328   return;
  BSR          .L00C02052, R0

.L0080138A:
// d_main.c:332   wipe_EndScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 200, RD13
  BSR          wipe_EndScreen, R1
// d_main.c:334   wipestart = I_GetTime () - 1;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ20
  ADDS.L       RQ20, -1, RD23
// d_main.c:336   do

.L0080138B:
// d_main.c:337   {

.L0080138E:
// d_main.c:339   {
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RD18
// d_main.c:341   tics = nowtime - wipestart;
  SUBS.L       RD18, RD23, RD9
  BREQ.L       R0, RD9, .L0080138E
// d_main.c:344   wipestart = nowtime;
  ADD          RD18, 0, RD23
// d_main.c:345   done = wipe_ScreenWipe(wipe_Melt
  ADD          R0, 1, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          R0, 320, RD13
  ADD          R0, 200, RD14
  ADDS.L       RD9, 0, RD15
  BSR          wipe_ScreenWipe, R1
  ADDS.L       RQ10, 0, RD8
// d_main.c:347   I_UpdateNoBlit ();
  BSR          I_UpdateNoBlit, R1
// d_main.c:348   M_Drawer ();							// menu is drawn even on top of wipes
  BSR          M_Drawer, R1
// d_main.c:349   I_FinishUpdate ();					  // page flip or blit buffer
  BSR          I_FinishUpdate, R1
  BREQ.L       R0, RD8, .L0080138B

.L00C02052:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

TKMM_MMList_MProtectCat:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ9
  ADD          RD11, 0, RD23
  ADDS.L       RD12, 0, RD8
  ADD          R0, 3, RD22
  ADD          R0, 4, RD21
  ADD          R0, 7, RD20
// tk_core/tk_mmllist.c:155   
  BREQ.Q       R0, RQ9, .L00C0205A
// tk_core/tk_mmllist.c:160   
  BRNE.L       R0, RD8, .L00800A06
// tk_core/tk_mmllist.c:161   
  ADDS.L       RD23, 0, RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 3, RD12
  BSR          tk_mprotect, R1
// tk_core/tk_mmllist.c:164   
  BSR          .L00C0205A, R0

.L00800A06:
// tk_core/tk_mmllist.c:165   
  BRNE.Q       4, RD8, .L00800A07
// tk_core/tk_mmllist.c:167   
  ADDS.L       RD23, 0, RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 7, RD12
  BSR          tk_mprotect, R1
// tk_core/tk_mmllist.c:170   
  BSR          .L00C0205A, R0

.L00800A07:
// tk_core/tk_mmllist.c:171   

.L00C0205A:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_InitTagOpr:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R22, (R2, 24)
  ADD          R2, -328, R2
  ADD          R0, 24, RD9
  ADD          R0, 20, RD8
  ADD          R0, 1, RD22
// tk_core/lva_tagopr.c:399   
  MOV          tkmm_lva_opradd_bigi, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:402   
  MOV          tkmm_lva_oprsub_bigi, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 1, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:406   
  MOV          tkmm_lva_oprmul_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 2, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:409   
  MOV          tkmm_lva_oprdiv_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 3, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:412   
  MOV          tkmm_lva_oprmod_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 4, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:416   
  MOV          tkmm_lva_oprand_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 5, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:419   
  MOV          tkmm_lva_opror_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 6, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:422   
  MOV          tkmm_lva_oprxor_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 24, RD11
  ADD          R0, 7, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:427   
  MOV          tkmm_lva_opradd_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:430   
  MOV          tkmm_lva_oprsub_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 1, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:434   
  MOV          tkmm_lva_oprmul_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 2, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:437   
  MOV          tkmm_lva_oprdiv_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 3, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:440   
  MOV          tkmm_lva_oprmod_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 4, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:444   
  MOV          tkmm_lva_oprand_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 5, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:447   
  MOV          tkmm_lva_opror_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 6, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:450   
  MOV          tkmm_lva_oprxor_bigig, RQ18
  ADD          R0, 24, RD10
  ADD          R0, 20, RD11
  ADD          R0, 7, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:455   
  MOV          tkmm_lva_opradd_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:458   
  MOV          tkmm_lva_oprsub_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 1, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:462   
  MOV          tkmm_lva_oprmul_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 2, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:465   
  MOV          tkmm_lva_oprdiv_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 3, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:468   
  MOV          tkmm_lva_oprmod_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 4, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:472   
  MOV          tkmm_lva_oprand_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 5, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:475   
  MOV          tkmm_lva_opror_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 6, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1
// tk_core/lva_tagopr.c:478   
  MOV          tkmm_lva_oprxor_bigig, RQ18
  ADD          R0, 20, RD10
  ADD          R0, 24, RD11
  ADD          R0, 7, RD12
  ADD          RQ18, 0, RQ13
  BSR          TKMM_LVA_RegisterBinOp, R1

.L00C02060:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

ST_doRefresh:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// st_stuff.c:1129   {
  MOV.L        TU7A00CB73/st_firsttime, RD18
  AND          RD18, 255, RD9
  MOV.B        RD9, st_firsttime_last
// st_stuff.c:1131   st_firsttime = false;
  ADD          R0, 0, RD18
  MOV.L        RD18, TU7A00CB73/st_firsttime
// st_stuff.c:1134   ST_refreshBackground();
  BSR          ST_refreshBackground, R1
// st_stuff.c:1137   ST_drawWidgets(true);
  ADD          R0, 1, RD10
  BSR          ST_drawWidgets, R1

.L00C02066:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

A_PainShootSkull:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.L        RD11, (R2, 148)
// p_enemy.c:1498   count = 0;
  ADD          R0, 0, RD21
// p_enemy.c:1500   currentthinker = thinkercap.next;
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ18
// p_enemy.c:1501   while (currentthinker != &thinkercap)
  BSR          .L00801B7A, R0

.L00801B78:
// p_enemy.c:1502   {
  ADD          RQ18, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          P_MobjThinker, RQ20
  BRNE.Q       RQ20, RQ8, .L00801B7B
  MOV.L        (RQ18, 128), RQ9
  BRNE.Q       18, RQ9, .L00801B7B

.L00801B7C:
// p_enemy.c:1505   count++;
  ADDS.L       RD21, 1, RD21

.L00801B7B:
// p_enemy.c:1506   currentthinker = currentthinker->next;
  MOV.Q        (RQ18, 8), RQ18

.L00801B7A:
  MOV          thinkercap, RQ8
  BRNE.Q       RQ8, RQ18, .L00801B78

.L00801B79:
// p_enemy.c:1511   if (count > 20)
  ADD          R0, 20, RD27
  BRGT.L       RD27, RD21, .L00C0206C
// p_enemy.c:1516   an = angle >> ANGLETOFINESHIFT;
  MOVU.L       (R2, 148), RD27
  SHLR         RD27, 19, RD26
// p_enemy.c:1518   prestep =
  MOV.Q        (R2, 152), RQ25
  MOV.Q        (RQ25, 136), RQ20
  MOV.L        (RQ20, 64), RQ9
  MOV          mobjinfo, RQ24
  ADD          RQ24, 1656, RQ19
  MOV.L        (RQ19, 64), RQ23
  ADDS.L       RQ9, RQ23, RQ22
  ADD          R0, 3, R5
  MULS.L       RQ22, R5, RQ9
  ADD          RQ9, 0, RQ23
  ADD          R0, 2, RD24
  DIVS.L       RQ23, RD24, RQ23
  ADDS.L       RQ23, 0x00040000, RD27
  MOV.L        RD27, (R2, 120)
// p_enemy.c:1522   x = actor->x + FixedMul (prestep, finecosine[an]);
  MOV.L        (RQ25, 24), RQ22
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD26), RQ9
  MOV.L        RD26, (R2, 124)
  MOV.L        (R2, 120), RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ22, RQ23, RD27
  MOV.L        RD27, (R2, 144)
// p_enemy.c:1523   y = actor->y + FixedMul (prestep, finesine[an]);
  MOV.L        (RQ25, 28), RQ22
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD26), RQ9
  MOV.L        (R2, 120), RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ22, RQ23, RD27
  MOV.L        RD27, (R2, 140)
// p_enemy.c:1524   z = actor->z + 8*FRACUNIT;
  MOV.L        (RQ25, 32), RQ22
  ADDS.L       RQ22, 0x00080000, RD19
  MOV.L        RD19, (R2, 136)
// p_enemy.c:1526   newmobj = P_SpawnMobj (x , y, z, MT_SKULL);
  MOV.L        (R2, 144), RD10
  ADD          RD27, 0, RD11
  ADD          RD19, 0, RD12
  ADD          R0, 18, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ26
// p_enemy.c:1529   if (!P_TryMove (newmobj, newmobj->x, newmobj->y))
  MOV.L        (RQ26, 28), RQ9
  MOV.L        (RQ26, 24), RQ23
  MOV.Q        RQ26, (R2, 128)
  ADD          RQ26, 0, RQ10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_TryMove, R1
  ADD          RQ10, 0, RQ22
  BRNE.L       R0, RQ22, .L00801B7E
// p_enemy.c:1532   P_DamageMobj (newmobj,actor,actor,10000);	
  MOV.Q        (R2, 128), RQ10
  MOV.Q        (R2, 152), RQ11
  MOV.Q        (R2, 152), RQ12
  LDIZ         10000, RD13
  BSR          P_DamageMobj, R1
// p_enemy.c:1533   return;
  BSR          .L00C0206C, R0

.L00801B7E:
// p_enemy.c:1536   newmobj->target = actor->target;
  MOV.Q        (R2, 152), RQ27
  MOV.Q        (RQ27, 176), RQ8
  MOV.Q        (R2, 128), RQ26
  MOV.Q        RQ8, (RQ26, 176)
// p_enemy.c:1537   A_SkullAttack (newmobj);
  ADD          RQ26, 0, RQ10
  BSR          A_SkullAttack, R1

.L00C0206C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

__lva_flonump:
// pdpc201/btshx_lva.c:155   
  SHLR.Q       RQ10, 62, RQ13
  ADD          R0, 2, RQ12
  CMPEQ.Q      RQ13, RQ12, RQ11
  ADDS.L       RQ11, 0, RD10

.L00C0206D:
  JSR          R1, 0, R0
  .balign 4

AM_Start:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// am_map.c:582   if (!stopped) AM_Stop();
  MOV.L        TU7A00C41B/stopped, RD13
  BRNE.L       R0, RD13, .L008017B0
  BSR          AM_Stop, R1

.L008017B0:
// am_map.c:583   stopped = false;
  MOV.L        RD0, TU7A00C41B/stopped
// am_map.c:584   if (lastlevel != gamemap || lastepisode != gameepisode)
  MOV.L        AM_Start/lastlevel!24, RD13
  MOV.L        gamemap, RD12
  CMPNE.Q      RD13, RD12, RQ18
  MOV.L        AM_Start/lastepisode!24, RD13
  MOV.L        gameepisode, RD12
  CMPNE.Q      RD13, RD12, RQ9
  OR           RQ18, RQ9, RQ8
  BREQ.L       R0, RQ8, .L008017B1
// am_map.c:585   {
  BSR          AM_LevelInit, R1
// am_map.c:587   lastlevel = gamemap;
  MOV.L        gamemap, RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, AM_Start/lastlevel!24
// am_map.c:588   lastepisode = gameepisode;
  MOV.L        gameepisode, RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, AM_Start/lastepisode!24

.L008017B1:
// am_map.c:589   }
  BSR          AM_initVariables, R1
// am_map.c:591   AM_loadPics();
  BSR          AM_loadPics, R1

.L00C02073:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

thrd_yield:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// pdpc201/threads.c:147   
  BSR          TK_YieldCurrentThread, R1

.L00C02079:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

tk_print_float:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -416, R2
  MOV.Q        RQ10, (R2, 88)
// tk_core/tk_puts.c:1310   
  ADD          RD0, 0, RD18
// tk_core/tk_puts.c:1311   
  MOV.Q        (R2, 88), RQ46
  FCMP/GT      RQ0, RQ46, RQ6
  BREQ.Q       RQ6, R0, .L00800C54
// tk_core/tk_puts.c:1312   
  MOV.Q        (R2, 88), RQ46
  FNEG         RQ46, RQ46
  MOV.Q        RQ46, (R2, 88)
  ADD          R0, 1, RD18

.L00800C54:
// tk_core/tk_puts.c:1318   
  MOV.Q        (R2, 88), RQ46
  FSTCI        RQ46, RD9
// tk_core/tk_puts.c:1319   
  FLDCI        RD9, RQ47
  FSUB         RQ46, RQ47, RQ48
  ADD          R0, 0x412E8480, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ49
  FMUL         RQ48, RQ49, RQ47
  FSTCI        RQ47, RD8
// tk_core/tk_puts.c:1321   
  BREQ.L       R0, RD18, .L00800C55
  ADD          R0, 45, RD10
  BSR          tk_putc, R1

.L00800C55:
// tk_core/tk_puts.c:1322   
  ADDS.L       RD9, 0, RD10
  BSR          tk_print_decimal, R1
// tk_core/tk_puts.c:1323   
  ADD          R0, 46, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1324   
  ADDS.L       RD8, 0, RD10
  ADD          R0, 6, RD11
  BSR          tk_print_decimal_n, R1

.L00C0207F:
  ADD          R2, 416, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BossDeath:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -464, R2
  ADD          RQ10, 0, RQ22
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 112)
// p_enemy.c:1646   line_t	junk;
// p_enemy.c:1649   if ( gamemode == commercial)
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00801B8C
  MOV.L        gamemap, RD27
  ADD          R0, 7, RD26
  BRNE.Q       RD26, RD27, .L00C02085
  MOV.L        (RQ22, 128), RQ18
  BREQ.Q       8, RQ18, .L00801B8D
  MOV.L        (RQ22, 128), RQ18
  BREQ.Q       20, RQ18, .L00801B8D
  BSR          .L00C02085, R0

.L00801B8D:
  BSR          .L00801B8F, R0

.L00801B8C:
// p_enemy.c:1659   {
  MOV.L        gameepisode, RD27
  BREQ.Q       1, RD27, .L00801B91
  MOV.L        gameepisode, RD27
  BREQ.Q       2, RD27, .L00801B92
  MOV.L        gameepisode, RD27
  BREQ.Q       3, RD27, .L00801B93
  MOV.L        gameepisode, RD27
  BREQ.Q       4, RD27, .L00801B94
  BSR          .L00801B95, R0

.L00801B91:
// p_enemy.c:1662   case 1:
  MOV.L        gamemap, RD27
  ADD          R0, 8, RD26
  BRNE.Q       RD26, RD27, .L00C02085
// p_enemy.c:1666   if (mo->type != MT_BRUISER)
  MOV.L        (RQ22, 128), RQ18
  ADD          R0, 15, RD27
  BRNE.Q       RD27, RQ18, .L00C02085
// p_enemy.c:1668   break;
  BSR          .L00801B90, R0

.L00801B92:
// p_enemy.c:1670   case 2:
  MOV.L        gamemap, RD27
  ADD          R0, 8, RD26
  BRNE.Q       RD26, RD27, .L00C02085
// p_enemy.c:1674   if (mo->type != MT_CYBORG)
  MOV.L        (RQ22, 128), RQ18
  ADD          R0, 21, RD27
  BRNE.Q       RD27, RQ18, .L00C02085
// p_enemy.c:1676   break;
  BSR          .L00801B90, R0

.L00801B93:
// p_enemy.c:1678   case 3:
  MOV.L        gamemap, RD27
  ADD          R0, 8, RD26
  BRNE.Q       RD26, RD27, .L00C02085
// p_enemy.c:1682   if (mo->type != MT_SPIDER)
  MOV.L        (RQ22, 128), RQ18
  ADD          R0, 19, RD27
  BRNE.Q       RD27, RQ18, .L00C02085
// p_enemy.c:1685   break;
  BSR          .L00801B90, R0

.L00801B94:
// p_enemy.c:1687   case 4:
  MOV.L        gamemap, RD27
  BREQ.Q       6, RD27, .L00801B97
  MOV.L        gamemap, RD27
  BREQ.Q       8, RD27, .L00801B98
  BSR          .L00801B99, R0

.L00801B97:
// p_enemy.c:1690   case 6:
  MOV.L        (RQ22, 128), RQ18
  ADD          R0, 21, RD27
  BRNE.Q       RD27, RQ18, .L00C02085
// p_enemy.c:1693   break;
  BSR          .L00801B96, R0

.L00801B98:
// p_enemy.c:1695   case 8: 
  MOV.L        (RQ22, 128), RQ18
  ADD          R0, 19, RD27
  BRNE.Q       RD27, RQ18, .L00C02085
// p_enemy.c:1698   break;
  BSR          .L00801B96, R0

.L00801B99:
// p_enemy.c:1700   default:
  BSR          .L00C02085, R0
// p_enemy.c:1702   break;

.L00801B96:
// p_enemy.c:1703   }
  BSR          .L00801B90, R0

.L00801B95:
// p_enemy.c:1706   default:
  MOV.L        gamemap, RD27
  ADD          R0, 8, RD26
  BRNE.Q       RD26, RD27, .L00C02085
// p_enemy.c:1709   break;

.L00801B90:

.L00801B8F:
// p_enemy.c:1716   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD8

.L00801B9A:
// p_enemy.c:1717   if (playeringame[i] && players[i].health > 0)
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BREQ.L       R0, RQ18, .L00801B9D
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 36), RQ18
  BRLE.L       R0, RQ18, .L00801B9D
  BSR          .L00801B9C, R0

.L00801B9D:
  ADDS.L       RD8, 1, RD8
  BRLT.L       4, RD8, .L00801B9A

.L00801B9C:
// p_enemy.c:1720   if (i==MAXPLAYERS)
  ADD          R0, 4, RD27
  BREQ.Q       RD27, RD8, .L00C02085
// p_enemy.c:1725   for (th = thinkercap.next ; th != &thinkercap ; th=th->next)
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ23
  ADD          RQ27, 0, RQ9
  BREQ.Q       RQ9, RQ23, .L00801BA1

.L00801B9F:
// p_enemy.c:1726   {
  ADD          RQ23, 16, RQ27
  MOV.Q        (RQ27, 0), RQ9
  MOV          P_MobjThinker, RQ26
  BRNE.Q       RQ26, RQ9, .L00801BA0
// p_enemy.c:1730   mo2 = (mobj_t *)th;
  ADD          RQ23, 0, RQ21
// p_enemy.c:1731   if (mo2 != mo
  BREQ.Q       RQ22, RQ21, .L00801BA2
  MOV.L        (RQ21, 128), RQ18
  MOV.L        (RQ22, 128), RQ20
  BRNE.Q       RQ20, RQ18, .L00801BA2

.L00801BA3:
  MOV.L        (RQ21, 164), RQ18
  BRLE.L       R0, RQ18, .L00801BA2
  BSR          .L00C02085, R0

.L00801BA2:

.L00801BA0:
  MOV.Q        (RQ23, 8), RQ23
  MOV          thinkercap, RQ9
  BRNE.Q       RQ9, RQ23, .L00801B9F

.L00801BA1:
// p_enemy.c:1741   if ( gamemode == commercial)
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00801BA5
  MOV.L        gamemap, RD27
  BRNE.Q       7, RD27, .L00801BA6
  MOV.L        (RQ22, 128), RQ20
  BRNE.Q       8, RQ20, .L00801BA7
// p_enemy.c:1746   {
  ADD          R0, 666, RD27
  ADD          R2, 128, RQ26
  MOV.W        RD27, (RQ26, 28)
// p_enemy.c:1748   EV_DoFloor(&junk,lowerFloorToLowest);
  ADD          RQ26, 0, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_enemy.c:1749   return;
  BSR          .L00C02085, R0

.L00801BA7:
  MOV.L        (RQ22, 128), RQ20
  BRNE.Q       20, RQ20, .L00801BA8
// p_enemy.c:1753   {
  ADD          R0, 667, RD27
  ADD          R2, 128, RQ26
  MOV.W        RD27, (RQ26, 28)
// p_enemy.c:1755   EV_DoFloor(&junk,raiseToTexture);
  ADD          RQ26, 0, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoFloor, R1
// p_enemy.c:1756   return;
  BSR          .L00C02085, R0

.L00801BA8:

.L00801BA6:
  BSR          .L00801BA9, R0

.L00801BA5:
// p_enemy.c:1761   {
  MOV.L        gameepisode, RD27
  BREQ.Q       1, RD27, .L00801BAB
  MOV.L        gameepisode, RD27
  BREQ.Q       4, RD27, .L00801BAC
  BSR          .L00801BAA, R0

.L00801BAB:
// p_enemy.c:1764   case 1:
  ADD          R0, 666, RD27
  ADD          R2, 128, RQ26
  MOV.W        RD27, (RQ26, 28)
// p_enemy.c:1766   EV_DoFloor (&junk, lowerFloorToLowest);
  MOV.Q        RQ26, (R2, 72)
  MOV.Q        (R2, 72), RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_enemy.c:1767   return;
  BSR          .L00C02085, R0
// p_enemy.c:1768   break;
  BSR          .L00801BAA, R0

.L00801BAC:
// p_enemy.c:1770   case 4:
  MOV.L        gamemap, RD27
  BREQ.Q       6, RD27, .L00801BAE
  MOV.L        gamemap, RD27
  BREQ.Q       8, RD27, .L00801BAF
  BSR          .L00801BAD, R0

.L00801BAE:
// p_enemy.c:1773   case 6:
  ADD          R0, 666, RD27
  ADD          R2, 128, RQ26
  MOV.W        RD27, (RQ26, 28)
// p_enemy.c:1775   EV_DoDoor (&junk, blazeOpen);
  ADD          RQ26, 0, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoDoor, R1
// p_enemy.c:1776   return;
  BSR          .L00C02085, R0
// p_enemy.c:1777   break;
  BSR          .L00801BAD, R0

.L00801BAF:
// p_enemy.c:1779   case 8:
  ADD          R0, 666, RD27
  ADD          R2, 128, RQ26
  MOV.W        RD27, (RQ26, 28)
// p_enemy.c:1781   EV_DoFloor (&junk, lowerFloorToLowest);
  MOV.Q        RQ26, (R2, 72)
  MOV.Q        (R2, 72), RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_enemy.c:1782   return;
  BSR          .L00C02085, R0
// p_enemy.c:1783   break;

.L00801BAD:

.L00801BAA:

.L00801BA9:
// p_enemy.c:1788   G_ExitLevel ();
  BSR          G_ExitLevel, R1

.L00C02085:
  ADD          R2, 464, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

TkClGetInterface:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ22
// pdpc201/btshx_supa.c:825   
  MOV.Q        tk_clib_iface_list, RQ18
// pdpc201/btshx_supa.c:826   
  BSR          .L00800FC3, R0

.L00800FC4:
// pdpc201/btshx_supa.c:827   
  MOV.Q        (RQ18, 8), RQ9
  BRNE.Q       RQ23, RQ9, .L00800FC5
  MOV.Q        (RQ18, 16), RQ9
  BRNE.Q       RQ22, RQ9, .L00800FC5

.L00800FC6:
// pdpc201/btshx_supa.c:829   
  MOV.Q        (RQ18, 24), RQ8
  ADD          RQ8, 0, RQ10
  BSR          .L00C0208B, R0

.L00800FC5:
// pdpc201/btshx_supa.c:830   
  MOV.Q        (RQ18, 0), RQ18

.L00800FC3:
  BRNE.Q       R0, RQ18, .L00800FC4

.L00800FC7:
// pdpc201/btshx_supa.c:833   
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          TK_DlGetApiContextA, R1
  ADD          RQ10, 0, RQ21
// pdpc201/btshx_supa.c:834   
  MOV.Q        RQ21, (R2, 88)
  BREQ.Q       R0, RQ21, .L00800FC8
// pdpc201/btshx_supa.c:835   
  MOV.Q        (R2, 88), RQ10
  BSR          .L00C0208B, R0

.L00800FC8:
// pdpc201/btshx_supa.c:836   
  ADD          RQ0, 0, RQ10

.L00C0208B:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tkmm_bigint_or:
// tk_core/tku_bigint.c:166   

.L00C0208C:
  JSR          R1, 0, R0

M_SizeDisplay:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RD10, 0, RD18
// m_menu.c:1198   {
  BREQ.L       R0, RD18, .L00801679
  BREQ.Q       1, RD18, .L0080167A
  BSR          .L00801678, R0

.L00801679:
// m_menu.c:1201   case 0:
  MOV.L        screenSize, RD13
  BRLE.L       R0, RD13, .L0080167B
// m_menu.c:1203   {
  MOV.L        screenblocks, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, screenblocks
// m_menu.c:1205   screenSize--;
  MOV.L        screenSize, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, screenSize

.L0080167B:
// m_menu.c:1206   }
  BSR          .L00801678, R0

.L0080167A:
// m_menu.c:1208   case 1:
  MOV.L        screenSize, RD13
  BRGE.L       8, RD13, .L0080167C
// m_menu.c:1210   {
  MOV.L        screenblocks, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, screenblocks
// m_menu.c:1212   screenSize++;
  MOV.L        screenSize, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, screenSize

.L0080167C:
// m_menu.c:1213   }

.L00801678:
// m_menu.c:1218   R_SetViewSize (screenblocks, detailLevel);
  MOV.L        screenblocks, RD10
  MOV.L        detailLevel, RD11
  BSR          R_SetViewSize, R1

.L00C02092:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

F_StartCast:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R21, (R2, 16)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -336, R2
// f_finale.c:403   {
  ADD          R0, -1, RD8
  MOV.L        RD8, wipegamestate
// f_finale.c:405   castnum = 0;
  ADD          RD0, 0, RD8
// f_finale.c:406   caststate = &states[mobjinfo[castorder[castnum].type].seestate];
  MOV          castorder, RQ23
  SHAD.L       RD8, 4, RQ22
  ADD          RQ23, RQ22, RQ22
  MOV.L        RD8, castnum
  MOV.L        (RQ22, 8), RQ18
  MOV          mobjinfo, RQ8
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ23
  ADD          RQ8, RQ23, RQ23
  MOV.L        (RQ23, 12), RQ18
  MOV          states, RQ8
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ8, RQ21, RQ21
// f_finale.c:407   casttics = caststate->tics;
  MOV.L        (RQ21, 8), RD8
  MOV.Q        RQ21, caststate
  MOV.L        RD8, casttics
// f_finale.c:408   castdeath = false;
  MOV.L        RD0, castdeath
// f_finale.c:409   finalestage = 2;	
  ADD          R0, 2, RD8
  MOV.L        RD8, finalestage
// f_finale.c:410   castframes = 0;
  MOV.L        RD0, castframes
// f_finale.c:411   castonmelee = 0;
  MOV.L        RD0, castonmelee
// f_finale.c:412   castattacking = false;
  MOV.L        RD0, castattacking
// f_finale.c:413   S_ChangeMusic(mus_evil, true);
  ADD          R0, 63, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1

.L00C02098:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R21
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_FindPolyObjForId:
// r_polyobj.c:79   thinker = thinkercap.next;
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 8), RQ12
// r_polyobj.c:80   for (thinker = thinkercap.next;
  MOV.Q        (RQ13, 8), RQ12
  ADD          RQ13, 0, RQ11
  BREQ.Q       RQ11, RQ12, .L008026F0

.L008026EE:
// r_polyobj.c:83   {
  ADD          RQ12, 16, RQ13
  MOV.Q        (RQ13, 0), RQ11
  MOV          P_MobjThinker, RQ17
  ADD          RQ17, 0, RQ16
  BRNE.Q       RQ16, RQ11, .L008026EF
// r_polyobj.c:87   m = (mobj_t *)thinker;
  ADD          RQ12, 0, RQ17
// r_polyobj.c:90   if (m->type != MT_POLYOBJ0)
  MOV.L        (RQ17, 128), RQ15
  BRNE.Q       137, RQ15, .L008026EF
// r_polyobj.c:93   if (m->spawnpoint.angle == tid)
  ADD          RQ17, 204, RQ14
  MOV.W        (RQ14, 8), RQ15
  BRNE.Q       RD10, RQ15, .L008026F1
// r_polyobj.c:94   return(m);
  ADD          RQ17, 0, RQ10
  JSR          R1, 0, R0

.L008026F1:

.L008026EF:
  MOV.Q        (RQ12, 8), RQ12
  MOV          thinkercap, RQ31
  ADD          RQ31, 0, RQ11
  BRNE.Q       RQ11, RQ12, .L008026EE

.L008026F0:
// r_polyobj.c:95   }
  ADD          RQ0, 0, RQ10

.L00C02099:
  JSR          R1, 0, R0
  .balign 4

w_close:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD18
// w_wad.c:249   if(hdl<0)
  BRGE.L       R0, RD18, .L00802893
// w_wad.c:250   __debugbreak();

w_close.debugbreak_L03D1:
  BRK          977

.L00802893:
// w_wad.c:252   if(hdl>=32)
  BRLT.L       32, RD18, .L00802894
// w_wad.c:253   __debugbreak();

w_close.debugbreak_L03D2:
  BRK          978

.L00802894:
// w_wad.c:256   fd=w_openfiles[hdl];
  MOV          w_openfiles, RQ21
  MOV.Q        (RQ21, RD18), RQ8
// w_wad.c:257   if(!fd)
  BRNE.Q       R0, RQ8, .L00802895
// w_wad.c:258   __debugbreak();

w_close.debugbreak_L03D3:
  BRK          979

.L00802895:
// w_wad.c:261   fclose(w_openfiles[hdl]);
  MOV          w_openfiles, RQ21
  MOV.Q        (RQ21, RD18), RQ23
  ADD          RQ23, 0, RQ10
  BSR          fclose, R1
// w_wad.c:262   w_m_openfiles&=~(1<<hdl);
  ADD          R0, 1, RD21
  SHAD.L       RD21, RD18, RQ9
  XOR          RQ9, -1, RQ22
  ADDU.L       RQ22, R0, RQ9
  MOVU.L       w_m_openfiles, RD13
  AND          RD13, RQ9, RD13
  MOV.L        RD13, w_m_openfiles
// w_wad.c:263   w_openfiles[hdl]=NULL;
  MOV          w_openfiles, RQ13
  MOV.Q        RQ0, (RQ13, RD18)
// w_wad.c:264   return(0);
  ADD          R0, 0, RD10

.L00C020AE:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_sysc_readdir:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -408, R2
  ADD          RQ10, 0, RQ8
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:349   
// tk_vf_sysc.c:354   
  ADD          R0, 0, RQ22
  MOV.Q        RQ22, (R2, 88)
// tk_vf_sysc.c:355   
  MOV.L        (RQ8, 64), RQ23
  ADD          R2, 112, RQ22
  ADD          RQ22, 0, RQ21
  MOV.L        RQ23, (RQ21, 0)
// tk_vf_sysc.c:356   
  MOV.Q        (RQ8, 24), RQ18
  ADD          RQ22, 8, RQ21
  MOV.Q        RQ18, (RQ21, 0)
// tk_vf_sysc.c:357   
  ADD          RQ22, 16, RQ21
  ADD          R0, 544, RD20
  MOV.L        RD20, (RQ21, 0)
// tk_vf_sysc.c:358   
  ADD          RQ22, 24, RQ21
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ21, 0)
// tk_vf_sysc.c:359   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4134, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ22, 0, RQ13
  BSR          tk_syscall, R1
  ADDS.L       RQ10, 0, RD9
// tk_vf_sysc.c:360   
  BRGT.L       R0, RD9, .L00800B36
// tk_vf_sysc.c:361   
  ADD          RQ0, 0, RQ10
  BSR          .L00C020B7, R0

.L00800B36:
// tk_vf_sysc.c:362   
  MOV.Q        (RQ8, 24), RQ18
  ADD          RQ18, 0, RQ10

.L00C020B7:
  ADD          R2, 408, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

tk_fioctl:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 116)
  MOV.Q        RQ12, (R2, 104)
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1152   
  BREQ.Q       R0, RQ9, .L00800B8F
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B8F
  BSR          .L00800B90, R0

.L00800B8F:
// tk_core/tk_vfile.c:1154   

tk_fioctl.debugbreak_L03DE:
  BRK          990

.L00800B90:
// tk_core/tk_vfile.c:1156   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B91
// tk_core/tk_vfile.c:1157   

tk_fioctl.debugbreak_L03DF:
  BRK          991

.L00800B91:
// tk_core/tk_vfile.c:1159   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 144), RQ8
  BREQ.Q       R0, RQ8, .L00800B92
// tk_core/tk_vfile.c:1160   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 144), RQ22
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 116), RD11
  MOV.Q        (R2, 104), RQ12
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C020C7, R0

.L00800B92:
// tk_core/tk_vfile.c:1161   
  ADD          R0, -1, RD10

.L00C020C7:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

M_QuickSaveResponse:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD18
  ADD          R0, 121, RD9
// m_menu.c:695   {
  BRNE.Q       121, RD18, .L00801642
// m_menu.c:697   {
  MOV.L        quickSaveSlot, RD10
  BSR          M_DoSave, R1
// m_menu.c:699   S_StartSound(NULL,sfx_swtchx);
  ADD          RQ0, 0, RQ10
  ADD          R0, 24, RD11
  BSR          S_StartSound, R1

.L00801642:

.L00C020CF:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

R_RenderPlayerView:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
// r_main.c:1006   {	
  ADD          RQ9, 0, RQ10
  BSR          R_SetupFrame, R1
// r_main.c:1010   R_ClearClipSegs ();
  BSR          R_ClearClipSegs, R1
// r_main.c:1011   R_ClearDrawSegs ();
  BSR          R_ClearDrawSegs, R1
// r_main.c:1012   R_ClearPlanes ();
  BSR          R_ClearPlanes, R1
// r_main.c:1013   R_ClearSprites ();
  BSR          R_ClearSprites, R1
// r_main.c:1016   NetUpdate ();
  BSR          NetUpdate, R1
// r_main.c:1020   R_RenderBSPNode (numnodes-1);
  MOV.L        numnodes, RD8
  ADDS.L       RD8, -1, RQ18
  ADD          RQ18, 0, RD10
  BSR          R_RenderBSPNode, R1
// r_main.c:1023   NetUpdate ();
  BSR          NetUpdate, R1
// r_main.c:1026   R_DrawPlanes ();
  BSR          R_DrawPlanes, R1
// r_main.c:1029   NetUpdate ();
  BSR          NetUpdate, R1
// r_main.c:1032   R_DrawMasked ();
  BSR          R_DrawMasked, R1
// r_main.c:1035   NetUpdate ();				
  BSR          NetUpdate, R1

.L00C020D5:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMList_GetPtrHeapIndex:
// tk_core/tk_mmllist.c:812   
  ADD          RQ10, 0, RQ13
// tk_core/tk_mmllist.c:813   
  MOV.L        tkmm_mmlist_n_vrm, RD12
  ADDS.L       RD12, 0, RD11
// tk_core/tk_mmllist.c:814   
  ADD          R0, 0, RD17
  BRGE.L       RD11, RD17, .L00800A55

.L00800A56:
// tk_core/tk_mmllist.c:815   
  MOV          tkmm_mmlist_vrm_brkbuf, RQ12
  MOV.Q        (RQ12, RD17), RQ16
// tk_core/tk_mmllist.c:817   
  MOV          tkmm_mmlist_vrm_brkend, RQ15
  MOV.Q        (RQ15, RD17), RQ14
// tk_core/tk_mmllist.c:818   
  CMPGE.Q      RQ13, RQ16, RQ31
  CMPGT.Q      RQ14, RQ13, RQ30
  BTST.L       RQ30, RQ31, .L00800A57
// tk_core/tk_mmllist.c:819   
  ADD          RD17, 0, RD10
  JSR          R1, 0, R0

.L00800A57:
  ADDS.L       RD17, 1, RD17
  BRLT.L       RD11, RD17, .L00800A56

.L00800A55:
// tk_core/tk_mmllist.c:822   
  ADD          R0, -1, RD10

.L00C020D6:
  JSR          R1, 0, R0

P_UnsetThingPosition:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  ADD          RQ10, 0, RQ18
// p_maputl.c:356   if ( ! (thing->flags & MF_NOSECTOR) )
  MOV.L        (RQ18, 160), RQ8
  ADD          R0, 8, RD13
  BTSTN.L      RD13, RQ8, .L00801DD6
  MOV.Q        (RQ18, 40), RQ9
  BREQ.Q       R0, RQ9, .L00801DD7
// p_maputl.c:361   thing->snext->sprev = thing->sprev;
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 40), RQ23
  MOV.Q        RQ9, (RQ23, 48)

.L00801DD7:
  MOV.Q        (RQ18, 48), RQ9
  BREQ.Q       R0, RQ9, .L00801DD8
// p_maputl.c:364   thing->sprev->snext = thing->snext;
  MOV.Q        (RQ18, 40), RQ23
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        RQ23, (RQ9, 40)
  BSR          .L00801DD9, R0

.L00801DD8:
// p_maputl.c:366   thing->subsector->sector->thinglist = thing->snext;
  MOV.Q        (RQ18, 40), RQ23
  MOV.Q        (RQ18, 88), RQ9
  MOV.Q        (RQ9, 0), RQ21
  MOV.Q        RQ23, (RQ21, 96)

.L00801DD9:

.L00801DD6:
// p_maputl.c:369   if ( ! (thing->flags & MF_NOBLOCKMAP) )
  MOV.L        (RQ18, 160), RQ8
  ADD          R0, 16, RD13
  BTSTN.L      RD13, RQ8, .L00801DDA
  MOV.Q        (RQ18, 72), RQ9
  BREQ.Q       R0, RQ9, .L00801DDB
// p_maputl.c:374   thing->bnext->bprev = thing->bprev;
  MOV.Q        (RQ18, 80), RQ23
  MOV.Q        (RQ18, 72), RQ21
  MOV.Q        RQ23, (RQ21, 80)

.L00801DDB:
  MOV.Q        (RQ18, 80), RQ9
  BREQ.Q       R0, RQ9, .L00801DDC
// p_maputl.c:377   thing->bprev->bnext = thing->bnext;
  MOV.Q        (RQ18, 72), RQ23
  MOV.Q        (RQ18, 80), RQ21
  MOV.Q        RQ23, (RQ21, 72)
  BSR          .L00801DDD, R0

.L00801DDC:
// p_maputl.c:379   {
  MOV.L        (RQ18, 24), RQ8
  MOV.L        bmaporgx, RD13
  SUBS.L       RQ8, RD13, RQ22
  SHAR         RQ22, 23, RD13
// p_maputl.c:381   blocky = (thing->y - bmaporgy)>>MAPBLOCKSHIFT;
  MOV.L        (RQ18, 28), RQ8
  MOV.L        bmaporgy, RD12
  SUBS.L       RQ8, RD12, RQ22
  SHAR         RQ22, 23, RD12
  CMPGE.Q      RD13, R0, RQ8
  MOV.L        bmapwidth, RD11
  CMPGT.Q      RD11, RD13, RQ22
  MOV.L        RD13, (R2, 52)
  AND          RQ8, RQ22, RQ20
  CMPGE.Q      RD12, R0, RQ8
  AND          RQ20, RQ8, RQ22
  MOV.L        bmapheight, RD11
  CMPGT.Q      RD11, RD12, RQ20
  MOV.L        RD12, (R2, 48)
  BTST.L       RQ20, RQ22, .L00801DDE
// p_maputl.c:385   {
  MOV.Q        (RQ18, 72), RQ9
  MOV.L        (R2, 48), RD13
  MOV.L        bmapwidth, RD12
  MULS.L       RD13, RD12, RQ22
  MOV.L        (R2, 52), RD12
  ADDS.L       RQ22, RD12, RQ20
  MOV.Q        blocklinks, RQ11
  MOV.Q        RQ9, (RQ11, RQ20)

.L00801DDE:

.L00801DDD:

.L00801DDA:

.L00C020D7:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

R_CheckSpriteLump:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD22
// r_data.c:1702   if(spritewidth[idx] || spriteoffset[idx] || spritetopoffset[idx])
  MOV.Q        spritewidth, RQ21
  MOV.L        (RQ21, RD22), RQ18
  BRNE.L       R0, RQ18, .L00C020DD
  MOV.Q        spriteoffset, RQ21
  MOV.L        (RQ21, RD22), RQ18
  BRNE.L       R0, RQ18, .L00C020DD

.L00802539:
  MOV.Q        spritetopoffset, RQ21
  MOV.L        (RQ21, RD22), RQ18
  BRNE.L       R0, RQ18, .L00C020DD

.L00802538:
// r_data.c:1705   i=idx;
  ADD          RD22, 0, RD9
// r_data.c:1707   lump = firstspritelump+i;
  MOV.L        firstspritelump, RD20
  ADDS.L       RD20, RD9, RD21
  MOV.L        RD21, (R2, 88)
// r_data.c:1711   patch = W_CachePatchNum (firstspritelump+i, PU_CACHE);
  ADDS.L       RD20, RD9, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ23
// r_data.c:1714   spritewidth[i] = (patch->width)<<FRACBITS;
  MOV.W        (RQ23, 0), RQ18
  SHAD.L       RQ18, 16, RQ8
  MOV.Q        spritewidth, RQ20
  MOV.L        RQ8, (RQ20, RD9)
// r_data.c:1716   spriteoffset[i] = (patch->leftoffset)<<FRACBITS;
  MOV.W        (RQ23, 4), RQ18
  SHAD.L       RQ18, 16, RQ8
  MOV.Q        spriteoffset, RQ20
  MOV.L        RQ8, (RQ20, RD9)
// r_data.c:1718   spritetopoffset[i] = (patch->topoffset)<<FRACBITS;
  MOV.W        (RQ23, 6), RQ18
  SHAD.L       RQ18, 16, RQ8
  MOV.Q        spritetopoffset, RQ20
  MOV.L        RQ8, (RQ20, RD9)

.L00C020DD:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMList_MallocCat:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -312, R2
  ADDS.L       RD10, 0, RD8
  ADD          RD11, 0, RD23
// tk_core/tk_mmllist.c:724   
  ADDS.L       RD8, 0, RD10
  ADD          RD23, 0, RD11
  BSR          TKMM_MMList_AllocObjCat, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmllist.c:725   
  ADD          RQ18, 16, RQ22
  ADD          RQ22, 0, RQ9
// tk_core/tk_mmllist.c:726   
  ADD          R0, 3, RD21
// tk_core/tk_mmllist.c:727   
  BRNE.Q       RQ9, RQ18, .L00800A4B
// tk_core/tk_mmllist.c:728   

TKMM_MMList_MallocCat.debugbreak_L03E5:
  BRK          997

.L00800A4B:
// tk_core/tk_mmllist.c:729   
  ADD          RQ9, 0, RQ10

.L00C020E8:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tkmm_lva_oprdiv_bigig:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -408, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 128)
// tk_core/lva_tagopr.c:330   
  ADD          RQ9, 0, RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  MOV.X        RQ10, (R2, 112)
// tk_core/lva_tagopr.c:331   
  MOV.Q        (R2, 128), RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
// tk_core/lva_tagopr.c:332   
  ADD          RQ22, 0, RQ12
  ADD          RQ23, 0, RQ13
  MOV.X        (R2, 112), RQ10
  BSR          __xli_sdiv, R1
  MOV.X        RQ10, (R2, 80)
// tk_core/lva_tagopr.c:333   
  MOV.X        RQ22, (R2, 96)
  MOV.X        (R2, 80), RQ10
  BSR          TKMM_LVA_NewBigInt, R1

.L00C020EF:
  ADD          R2, 408, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

frexp:
  ADD          R2, -56, R2
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R56, (R2, 48)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
// pdpc201/math.c:987   
  ADD          RQ0, 0, RQ21
  MOV.Q        RQ21, (R2, 104)
// pdpc201/math.c:988   
  ADD          R2, 120, RQ8
  ADD          R2, 104, RQ9
  MOV.Q        (RQ8, 0), RQ10
  MOV.Q        RQ10, (RQ9, 0)
// pdpc201/math.c:990   
  MOV.Q        (R2, 104), RQ21
  SHLR.Q       RQ21, 52, RQ18
  AND          RQ18, 2047, RQ18
  ADD          RQ18, -1023, RQ22
  ADDS.L       RQ22, 0, RD23
// pdpc201/math.c:991   
  SHAD.Q       RD23, 52, RQ18
  SUB          RQ21, RQ18, RQ21
  MOV.Q        RQ21, (R2, 104)
// pdpc201/math.c:992   
  ADD          R0, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        RQ56, (R2, 96)
// pdpc201/math.c:993   
  MOV.Q        (R2, 112), RQ21
  MOV.L        RD23, (RQ21, 0)
// pdpc201/math.c:994   
  ADD          R2, 104, RQ8
  ADD          R2, 96, RQ9
  MOV.Q        (RQ8, 0), RQ10
  MOV.Q        RQ10, (RQ9, 0)
// pdpc201/math.c:995   
  MOV.Q        (R2, 96), RQ10

.L00C020F5:
  ADD          R2, 424, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R56
  ADD          R2, 56, R2
  JSR          R1, 0, R0

P_SpawnPlayerMissile:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
  MOV.L        RD11, (R2, 116)
// p_mobj.c:1008   an = source->angle;
  MOVU.L       (RQ22, 56), RD8
// p_mobj.c:1009   slope = P_AimLineAttack (source, an, 16*64*FRACUNIT);
  ADD          RQ22, 0, RQ10
  ADDU.L       RD8, R0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD21
// p_mobj.c:1011   if (!linetarget)
  MOV.Q        linetarget, RQ27
  BRNE.Q       R0, RQ27, .L008022DA
// p_mobj.c:1012   {
  LUI          16384, R5
  ADDU.L       R5, RD8, RD8
// p_mobj.c:1014   slope = P_AimLineAttack (source, an, 16*64*FRACUNIT);
  ADD          RQ22, 0, RQ10
  ADDU.L       RD8, R0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD21
  MOV.Q        linetarget, RQ27
  BRNE.Q       R0, RQ27, .L008022DB
// p_mobj.c:1017   {
  LUI          -32768, R5
  ADDU.L       R5, RD8, RD8
// p_mobj.c:1019   slope = P_AimLineAttack (source, an, 16*64*FRACUNIT);
  ADD          RQ22, 0, RQ10
  ADDU.L       RD8, R0, RD11
  LUI          16384, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD21

.L008022DB:
  MOV.Q        linetarget, RQ27
  BRNE.Q       R0, RQ27, .L008022DC
// p_mobj.c:1023   {
  MOVU.L       (RQ22, 56), RD8
// p_mobj.c:1025   slope = 0;
  ADD          R0, 0, RD21

.L008022DC:

.L008022DA:
// p_mobj.c:1029   x = source->x;
  MOV.L        (RQ22, 24), RD27
  MOV.L        RD27, (R2, 112)
// p_mobj.c:1030   y = source->y;
  MOV.L        (RQ22, 28), RD26
  MOV.L        RD26, (R2, 108)
// p_mobj.c:1031   z = source->z + 4*8*FRACUNIT;
  MOV.L        (RQ22, 32), RQ18
  ADDS.L       RQ18, 0x00200000, RD25
  MOV.L        RD25, (R2, 104)
// p_mobj.c:1033   th = P_SpawnMobj (x,y,z, type);
  ADD          RD27, 0, RD10
  ADD          RD26, 0, RD11
  ADD          RD25, 0, RD12
  MOV.L        (R2, 116), RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ9
// p_mobj.c:1035   if (th->info->seesound)
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 16), RQ18
  BREQ.L       R0, RQ18, .L008022DD
// p_mobj.c:1036   S_StartSound (th, th->info->seesound);
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 16), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          S_StartSound, R1

.L008022DD:
// p_mobj.c:1038   th->target = source;
  MOV.Q        RQ22, (RQ9, 176)
// p_mobj.c:1039   th->angle = an;
  MOVU.L       RD8, (RQ9, 56)
// p_mobj.c:1040   th->momx = FixedMul( th->info->speed,
  SHLR         RD8, 19, RQ18
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RQ18), RQ26
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ26, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ20
  MOV.L        RQ20, (RQ9, 112)
// p_mobj.c:1042   th->momy = FixedMul( th->info->speed,
  SHLR         RD8, 19, RQ18
  MOV          finesine, RQ27
  MOV.L        (RQ27, RQ18), RQ26
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ26, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ9, 116)
// p_mobj.c:1044   th->momz = FixedMul( th->info->speed, slope);
  MOV.Q        (RQ9, 136), RQ23
  MOV.L        (RQ23, 60), RQ26
  ADD          RQ26, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ20
  MOV.L        RQ20, (RQ9, 120)
// p_mobj.c:1046   P_CheckMissileSpawn (th);
  ADD          RQ9, 0, RQ10
  BSR          P_CheckMissileSpawn, R1

.L00C020FB:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

WI_Ticker:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          R0, 1, RD23
// wi_stuff.c:1541   bcnt++;	
  MOV.L        TU7A00CB85/bcnt, RD13
  ADDS.L       RD13, 1, RD13
// wi_stuff.c:1543   if (bcnt == 1)
  MOV.L        RD13, TU7A00CB85/bcnt
  BRNE.Q       1, RD13, .L00802A8C
  MOV.L        gamemode, RD13
  ADD          R0, 2, R5
  CMPEQ.Q      RD13, R5, RQ18
  ADD          R0, 5, R5
  CMPEQ.Q      RD13, R5, RQ9
  OR           RQ18, RQ9, RQ8
  BREQ.L       R0, RQ8, .L00802A8D
// wi_stuff.c:1548   S_ChangeMusic(mus_dm2int, true);
  ADD          R0, 67, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1
  BSR          .L00802A8E, R0

.L00802A8D:
// wi_stuff.c:1550   S_ChangeMusic(mus_inter, true); 
  ADD          R0, 28, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1

.L00802A8E:

.L00802A8C:
// wi_stuff.c:1553   WI_checkForAccelerate();
  BSR          WI_checkForAccelerate, R1
// wi_stuff.c:1555   switch (state)
  MOV.L        TU7A00CB85/state, RD13
  BREQ.L       R0, RD13, .L00802A90
  MOV.L        TU7A00CB85/state, RD13
  BREQ.Q       1, RD13, .L00802A91
  MOV.L        TU7A00CB85/state, RD13
  BREQ.Q       -1, RD13, .L00802A92
  BSR          .L00802A8F, R0

.L00802A90:
// wi_stuff.c:1557   case StatCount:
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00802A93
// wi_stuff.c:1558   if (deathmatch) WI_updateDeathmatchStats();
  BSR          WI_updateDeathmatchStats, R1
  BSR          .L00802A94, R0

.L00802A93:
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L00802A95
// wi_stuff.c:1559   else if (netgame) WI_updateNetgameStats();
  BSR          WI_updateNetgameStats, R1
  BSR          .L00802A96, R0

.L00802A95:
// wi_stuff.c:1560   else WI_updateStats();
  BSR          WI_updateStats, R1

.L00802A96:

.L00802A94:
// wi_stuff.c:1561   break;
  BSR          .L00802A8F, R0

.L00802A91:
// wi_stuff.c:1563   case ShowNextLoc:
  BSR          WI_updateShowNextLoc, R1
// wi_stuff.c:1565   break;
  BSR          .L00802A8F, R0

.L00802A92:
// wi_stuff.c:1567   case NoState:
  BSR          WI_updateNoState, R1
// wi_stuff.c:1569   break;

.L00802A8F:

.L00C02101:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

M_DrawSound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// m_menu.c:820   V_DrawPatchDirectName (60,38,0, "M_SVOL");
  ADD          R0, 60, RD10
  ADD          R0, 38, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02108, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:822   M_DrawThermo(SoundDef.x,SoundDef.y+LINEHEIGHT*(sfx_vol+1),
  MOV          SoundDef, RQ8
  MOV.W        (RQ8, 34), RQ9
  ADDS.L       RQ9, 16, RQ18
  MOV.W        (RQ8, 32), RQ9
  SHAD.Q       RQ9, 48, RD10
  SHAR.Q       RD10, 48, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 16, RD12
  MOV.L        snd_SfxVolume, RD13
  BSR          M_DrawThermo, R1
// m_menu.c:825   M_DrawThermo(SoundDef.x,SoundDef.y+LINEHEIGHT*(music_vol+1),
  MOV          SoundDef, RQ8
  MOV.W        (RQ8, 34), RQ18
  ADDS.L       RQ18, 48, RQ9
  MOV.W        (RQ8, 32), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 16, RD12
  MOV.L        snd_MusicVolume, RD13
  BSR          M_DrawThermo, R1

.L00C02107:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

fwriteSlow:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.Q        RQ11, (R2, 144)
  MOV.Q        RQ12, (R2, 136)
  ADD          RQ13, 0, RQ18
  MOV.Q        RQ14, (R2, 120)
  ADD          RQ15, 0, RQ21
// pdpc201/stdio.c:1063   
  ADD          RQ0, 0, RQ13
  MOV.Q        RQ13, (R2, 104)
// pdpc201/stdio.c:1073   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ18, 48), RQ8
  BRNE.Q       RQ8, RQ9, .L00800371
// pdpc201/stdio.c:1074   
  MOV.Q        (RQ18, 16), RQ23
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 24), RQ8
  SUB          RQ9, RQ8, RQ22
  ADD          RQ23, RQ22, RQ20
  MOV.Q        RQ20, (RQ18, 16)
// pdpc201/stdio.c:1076   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:1077   
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ18, 84)

.L00800371:
// pdpc201/stdio.c:1081   
  ADD          R2, 104, RQ8
  MOV.Q        (R2, 152), RQ10
  ADD          RQ18, 0, RQ11
  MOV.Q        (R2, 120), RQ12
  ADD          RQ8, 0, RQ13
  BSR          fwriteSlowB, R1
// pdpc201/stdio.c:1090   
  MOV.Q        (R2, 136), RQ13
  BRNE.Q       1, RQ13, .L00800372
  MOV.Q        (R2, 104), RQ13
  MOV.Q        (R2, 144), RQ12
  BRNE.Q       RQ12, RQ13, .L00800373
// pdpc201/stdio.c:1093   
  ADD          R0, 1, RQ23
  MOV.Q        RQ23, (RQ21, 0)
  BSR          .L00800374, R0

.L00800373:
// pdpc201/stdio.c:1097   
  ADD          R0, 0, RQ22
  MOV.Q        RQ22, (RQ21, 0)

.L00800374:
  BSR          .L00800375, R0

.L00800372:
  MOV.Q        (R2, 144), RQ13
  BRNE.Q       1, RQ13, .L00800376
// pdpc201/stdio.c:1102   
  MOV.Q        (R2, 104), RQ13
  MOV.Q        RQ13, (RQ21, 0)
  BSR          .L00800377, R0

.L00800376:
// pdpc201/stdio.c:1106   
  MOV.Q        (R2, 104), RQ13
  MOV.Q        (R2, 144), RQ12
  DIVU.Q       RQ13, RQ12, RQ20
  MOV.Q        RQ20, (RQ21, 0)

.L00800377:

.L00800375:
// pdpc201/stdio.c:1108   

.L00C0210E:
  ADD          R2, 384, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

A_Hoof:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 84, RD9
// p_enemy.c:1793   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 84, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1795   A_Chase (mo);
  ADD          RQ18, 0, RQ10
  BSR          A_Chase, R1

.L00C02114:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

signal:
  ADD          R2, -8, R2
  MOV.Q        R18, (R2, 0)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 12)
  ADD          RQ11, 0, RQ18
// pdpc201/signal.c:36   
  MOV          handlers, RQ13
  MOV.L        (R2, 12), RD12
  MOV.Q        RQ18, (RQ13, RD12)
// pdpc201/signal.c:38   
  ADD          RQ18, 0, RQ10

.L00C02115:
  ADD          R2, 312, R2
  MOV.Q        (R2, 0), R18
  ADD          R2, 8, R2
  JSR          R1, 0, R0

P_AcsThingRemove:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 92)
// p_acspec.c:114   idx=NULL;
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 80)
// p_acspec.c:115   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 80, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 92), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:116   while(obj)
  BSR          .L0080189D, R0

.L0080189B:
// p_acspec.c:119   P_RemoveMobj(obj);
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveMobj, R1
// p_acspec.c:121   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 80, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 92), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18

.L0080189D:
  BRNE.Q       R0, RQ18, .L0080189B

.L0080189C:

.L00C0211B:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

__xli_smod:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R20, (R2, 0)
  MOV.X        R22, (R2, 16)
  ADD          R2, -392, R2
  MOV.X        RQ10, (R2, 128)
  MOV.X        RQ12, (R2, 112)
// pdpc201/btshx_xli.c:876   
  MOV.X        (R2, 128), RQ10
  MOV.X        (R2, 112), RQ12
  BSR          __xli_sdiv, R1
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
// pdpc201/btshx_xli.c:877   
  MOV.X        (R2, 112), RQ12
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          __xli_smul, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 128), RQ10
  BSR          __xli_sub, R1
  MOV.X        RQ10, (R2, 80)
// pdpc201/btshx_xli.c:881   
  MOV.X        RQ22, (R2, 96)
  MOV.X        (R2, 80), RQ10

.L00C02121:
  ADD          R2, 392, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R20
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

F_StartFinale:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
// f_finale.c:98   {
  MOV.L        RD0, gameaction
// f_finale.c:100   gamestate = GS_FINALE;
  ADD          R0, 2, RD18
  MOV.L        RD18, gamestate
// f_finale.c:101   viewactive = false;
  MOV.L        RD0, viewactive
// f_finale.c:102   automapactive = false;
  MOV.L        RD0, automapactive
// f_finale.c:107   switch ( gamemode )
  MOV.L        gamemode, RD18
  BREQ.L       R0, RD18, .L008012AA
  MOV.L        gamemode, RD18
  BREQ.Q       1, RD18, .L008012AB
  MOV.L        gamemode, RD18
  BREQ.Q       3, RD18, .L008012AC
  MOV.L        gamemode, RD18
  BREQ.Q       2, RD18, .L008012AD
  BSR          .L008012AE, R0

.L008012AA:

.L008012AB:

.L008012AC:
// f_finale.c:114   {
  ADD          R0, 31, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1
// f_finale.c:117   switch (gameepisode)
  MOV.L        gameepisode, RD18
  BREQ.Q       1, RD18, .L008012B0
  MOV.L        gameepisode, RD18
  BREQ.Q       2, RD18, .L008012B1
  MOV.L        gameepisode, RD18
  BREQ.Q       3, RD18, .L008012B2
  MOV.L        gameepisode, RD18
  BREQ.Q       4, RD18, .L008012B3
  BSR          .L008012B4, R0

.L008012B0:
// f_finale.c:119   case 1:
  MOV          .L00C02128, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:121   finaletext = e1text;
  MOV.Q        e1text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:122   break;
  BSR          .L008012AF, R0

.L008012B1:
// f_finale.c:123   case 2:
  MOV          .L00C02129, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:125   finaletext = e2text;
  MOV.Q        e2text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:126   break;
  BSR          .L008012AF, R0

.L008012B2:
// f_finale.c:127   case 3:
  MOV          .L00C0212A, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:129   finaletext = e3text;
  MOV.Q        e3text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:130   break;
  BSR          .L008012AF, R0

.L008012B3:
// f_finale.c:131   case 4:
  MOV          .L00C0212B, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:133   finaletext = e4text;
  MOV.Q        e4text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:134   break;
  BSR          .L008012AF, R0

.L008012B4:
// f_finale.c:137   break;

.L008012AF:
// f_finale.c:138   }
  BSR          .L008012A9, R0

.L008012AD:
// f_finale.c:144   {
  ADD          R0, 65, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1
// f_finale.c:147   switch (gamemap)
  MOV.L        gamemap, RD18
  BREQ.Q       6, RD18, .L008012B6
  MOV.L        gamemap, RD18
  BREQ.Q       11, RD18, .L008012B7
  MOV.L        gamemap, RD18
  BREQ.Q       20, RD18, .L008012B8
  MOV.L        gamemap, RD18
  BREQ.Q       30, RD18, .L008012B9
  MOV.L        gamemap, RD18
  BREQ.Q       15, RD18, .L008012BA
  MOV.L        gamemap, RD18
  BREQ.Q       31, RD18, .L008012BB
  BSR          .L008012BC, R0

.L008012B6:
// f_finale.c:149   case 6:
  MOV          .L00C0212C, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:151   finaletext = c1text;
  MOV.Q        c1text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:152   break;
  BSR          .L008012B5, R0

.L008012B7:
// f_finale.c:153   case 11:
  MOV          .L00C0212D, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:155   finaletext = c2text;
  MOV.Q        c2text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:156   break;
  BSR          .L008012B5, R0

.L008012B8:
// f_finale.c:157   case 20:
  MOV          .L00C0212E, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:159   finaletext = c3text;
  MOV.Q        c3text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:160   break;
  BSR          .L008012B5, R0

.L008012B9:
// f_finale.c:161   case 30:
  MOV          .L00C0212F, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:163   finaletext = c4text;
  MOV.Q        c4text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:164   break;
  BSR          .L008012B5, R0

.L008012BA:
// f_finale.c:165   case 15:
  MOV          .L00C02130, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:167   finaletext = c5text;
  MOV.Q        c5text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:168   break;
  BSR          .L008012B5, R0

.L008012BB:
// f_finale.c:169   case 31:
  MOV          .L00C02131, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:171   finaletext = c6text;
  MOV.Q        c6text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:172   break;
  BSR          .L008012B5, R0

.L008012BC:
// f_finale.c:175   break;

.L008012B5:
// f_finale.c:176   }
  BSR          .L008012A9, R0

.L008012AE:
// f_finale.c:182   default:
  ADD          R0, 65, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1
// f_finale.c:184   finaleflat = "F_SKY1"; // Not used anywhere else.
  MOV          .L00C016E7, RQ18
  ADD          RQ18, 0, RQ13
  MOV.Q        RQ13, finaleflat
// f_finale.c:185   finaletext = c1text;  // FIXME - other text, music?
  MOV.Q        c1text, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, finaletext
// f_finale.c:186   break;

.L008012A9:
// f_finale.c:189   finalestage = 0;
  MOV.L        RD0, finalestage
// f_finale.c:190   finalecount = 0;
  MOV.L        RD0, finalecount

.L00C02127:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

P_PadRejectArray:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// p_setup.c:1071   unsigned int rejectpad[4] =
  ADD          R2, 128, RQ27
  MOVU.L       RD0, (RQ27, 0)
  MOVU.L       RD0, (RQ27, 4)
  ADD          R0, 50, RD26
  MOVU.L       RD26, (RQ27, 8)
  ADD          R0, 0x001D4A11, RD25
  MOVU.L       RD25, (RQ27, 12)
// p_setup.c:1079   printf("P_PadRejectArray: Do Reject Pad, Len=%d\n", len);
  MOV          .L00C02138, RQ10
  MOVU.L       (R2, 116), RD11
  BSR          printf, R1
// p_setup.c:1081   rejectpad[0] = ((totallines * 4 + 3) & ~3) + 24;
  MOV.L        totallines, RD13
  SHAD.L       RD13, 2, RQ18
  ADDS.L       RQ18, 3, RQ8
  AND          RQ8, -4, RQ18
  ADDS.L       RQ18, 24, RQ8
  MOVU.L       RQ8, (RQ27, 0)
// p_setup.c:1083   dest = array;
  MOV.Q        (R2, 120), RQ23
// p_setup.c:1084   len1 = len;
  MOVU.L       (R2, 116), RD22
// p_setup.c:1085   if(len1 > sizeof(rejectpad))
  BRLEU.L      16, RD22, .L0080202A
// p_setup.c:1086   len1 = sizeof(rejectpad);
  ADD          R0, 16, RD22

.L0080202A:
// p_setup.c:1088   for (i=0; i<len1; i++)
  ADD          R0, 0, RD9
  BRGEU.L      RD22, RD9, .L0080202D

.L0080202B:
// p_setup.c:1089   {
  AND          RD9, 3, RD20
// p_setup.c:1091   *dest++ = (rejectpad[i>>2]>>(j*8))&255;
  SHLR         RD9, 2, RQ18
  ADD          R2, 128, RQ27
  MOVU.L       (RQ27, RQ18), RQ8
  SHAD.L       RD20, 3, RQ18
  ADDU.L       RQ18, R0, RQ18
  SHLR         RQ8, RQ18, RQ26
  AND          RQ26, 255, RQ18
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  MOVU.B       RQ18, (RQ21, 0)
  ADDS.L       RD9, 1, RD9
  ADDU.L       RD9, R0, RD9
  ADDU.L       RD9, R0, RD9
  BRLTU.L      RD22, RD9, .L0080202B

.L0080202D:
// p_setup.c:1094   if (len > len1)
  MOVU.L       (R2, 116), RD27
  BRLEU.L      RD22, RD27, .L0080202E
// p_setup.c:1095   {
  MOVU.L       (R2, 116), RD27
  SUBU.L       RD27, RD22, RQ18
  MOV          .L00C02139, RQ10
  ADD          RQ18, 0, RD11
  BSR          printf, R1
// p_setup.c:1097   memset(array + len1, 0, len - len1);
  SUBU.L       RD27, RD22, RQ8
  MOV.Q        (R2, 120), RQ26
  ADD          RQ26, RD22, RQ21
  ADD          RQ21, 0, RQ10
  ADD          R0, 0, RD11
  ADDU.L       RQ8, R0, RD12
  BSR          memset, R1

.L0080202E:

.L00C02137:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

M_DrawReadThis1:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
// m_menu.c:766   {
  ADD          R0, 1, RD9
  MOV.L        RD9, inhelpscreens
// m_menu.c:768   switch ( gamemode )
  MOV.L        gamemode, RD9
  BREQ.Q       2, RD9, .L00801649
  MOV.L        gamemode, RD9
  BREQ.L       R0, RD9, .L0080164A
  MOV.L        gamemode, RD9
  BREQ.Q       1, RD9, .L0080164B
  MOV.L        gamemode, RD9
  BREQ.Q       3, RD9, .L0080164C
  BSR          .L0080164D, R0

.L00801649:
// m_menu.c:772   V_DrawPatchDirectName (0,0,0,"HELP");
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02140, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:773   break;
  BSR          .L00801648, R0

.L0080164A:

.L0080164B:

.L0080164C:
// m_menu.c:778   V_DrawPatchDirectName (0,0,0, "HELP1");
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02141, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:779   break;
  BSR          .L00801648, R0

.L0080164D:
// m_menu.c:780   default:

.L00801648:
// m_menu.c:782   }

.L00C0213F:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMList_SetTag:
// tk_core/tk_mmllist.c:927   
  BRNE.Q       R0, RQ10, .L00800A64
  ADD          R0, -1, RD10
  JSR          R1, 0, R0

.L00800A64:
// tk_core/tk_mmllist.c:928   
  ADD          RQ10, -16, RQ13
  ADD          RQ13, 0, RQ12
// tk_core/tk_mmllist.c:929   
  ADD          R0, 2, RD17
// tk_core/tk_mmllist.c:930   
  MOVU.W       RD11, (RQ12, 0)
// tk_core/tk_mmllist.c:931   
  ADD          R0, 3, RD16
// tk_core/tk_mmllist.c:932   
  ADD          R0, 0, RD10

.L00C02142:
  JSR          R1, 0, R0

PIT_AddLineIntercepts:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -392, R2
  ADD          RQ10, 0, RQ22
// p_maputl.c:602   divline_t		dl;
// p_maputl.c:605   if ( trace.dx > FRACUNIT*16
  MOV          trace, RQ27
  MOV.L        (RQ27, 8), RQ18
  LUI          256, RD27
  BRGT.L       RD27, RQ18, .L00801DEF
  MOV          trace, RQ27
  MOV.L        (RQ27, 12), RQ18
  LUI          256, RD27
  BRGT.L       RD27, RQ18, .L00801DEF

.L00801DF1:
  MOV          trace, RQ27
  MOV.L        (RQ27, 8), RQ18
  LUI          -256, RD27
  BRLT.L       RD27, RQ18, .L00801DEF

.L00801DF0:
  MOV          trace, RQ27
  MOV.L        (RQ27, 12), RQ18
  LUI          -256, RD27
  BRLT.L       RD27, RQ18, .L00801DEF
  BSR          .L00801DEE, R0

.L00801DEF:
// p_maputl.c:609   {
  MOV          trace, RQ23
  MOV.Q        (RQ22, 0), RQ8
  MOV.L        (RQ8, 4), RQ18
  MOV.L        (RQ8, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_PointOnDivlineSide, R1
  ADD          RQ10, 0, RD21
// p_maputl.c:611   s2 = P_PointOnDivlineSide (ld->v2->x, ld->v2->y, &trace);
  MOV          trace, RQ23
  MOV.Q        (RQ22, 8), RQ8
  MOV.L        (RQ8, 4), RQ9
  MOV.L        (RQ8, 0), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_PointOnDivlineSide, R1
  ADD          RQ10, 0, RD20
  BSR          .L00801DF3, R0

.L00801DEE:
// p_maputl.c:614   {
  MOV          trace, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        (RQ27, 0), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD21
// p_maputl.c:616   s2 = P_PointOnLineSide (trace.x+trace.dx, trace.y+trace.dy, ld);
  MOV          trace, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        (RQ27, 12), RQ18
  ADDS.L       RQ9, RQ18, RQ11
  MOV.L        (RQ27, 0), RQ18
  MOV.L        (RQ27, 8), RQ9
  ADDS.L       RQ18, RQ9, RQ10
  ADD          RQ22, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD20

.L00801DF3:
// p_maputl.c:619   if (s1 == s2)
  BRNE.Q       RD20, RD21, .L00801DF4
// p_maputl.c:620   return true;	// line isn't crossed
  ADD          R0, 1, RD10
  BSR          .L00C02148, R0

.L00801DF4:
// p_maputl.c:623   P_MakeDivline (ld, &dl);
  ADD          R2, 128, RQ23
  ADD          RQ22, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          P_MakeDivline, R1
// p_maputl.c:624   frac = P_InterceptVector (&trace, &dl);
  ADD          R2, 128, RQ8
  MOV          trace, RQ23
  ADD          RQ23, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_InterceptVector, R1
  ADD          RQ10, 0, RD27
// p_maputl.c:626   if (frac < 0)
  MOV.L        RD27, (R2, 148)
  BRGE.L       R0, RD27, .L00801DF5
// p_maputl.c:627   return true;	// behind source
  ADD          R0, 1, RD10
  BSR          .L00C02148, R0

.L00801DF5:
// p_maputl.c:630   if (earlyout
  MOV.L        earlyout, RD27
  BREQ.L       R0, RD27, .L00801DF6
  MOV.L        (R2, 148), RD27
  LUI          16, RD13
  BRGE.L       RD13, RD27, .L00801DF6

.L00801DF7:
  MOV.Q        (RQ22, 72), RQ8
  BRNE.Q       R0, RQ8, .L00801DF6
  BSR          .L00C00A4A, R0

.L00801DF6:
// p_maputl.c:638   intercept_p->frac = frac;
  MOV.L        (R2, 148), RD27
  MOV.Q        intercept_p, RQ13
  MOV.L        RD27, (RQ13, 0)
// p_maputl.c:639   intercept_p->isaline = true;
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ13, 4)
// p_maputl.c:640   intercept_p->d.line = ld;
  ADD          RQ13, 8, RQ11
  MOV.Q        RQ22, (RQ11, 0)
// p_maputl.c:641   intercept_p++;
  ADD          RQ13, 16, RQ13
  MOV.Q        RQ13, intercept_p
// p_maputl.c:643   return true;	// continue
  ADD          R0, 1, RD10
  BSR          .L00C02148, R0

.L00C00A4A:
  ADD          R0, 0, RQ10

.L00C02148:
  ADD          R2, 392, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

__bind:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -400, R2
  MOV.L        RD10, (R2, 140)
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
// pdpc201/btshx_supa.c:541   
  MOV          btshx_tk_handles, RQ23
  MOV.L        (R2, 140), RD22
  MOV.Q        (RQ23, RD22), RQ9
// pdpc201/btshx_supa.c:542   
  ADD          RQ9, 0, RQ10
  LDIZ         16390, RD11
  ADD          RQ0, 0, RQ12
  ADD          R0, 0, RD13
  ADD          R0, 0, RD14
  MOV.Q        (R2, 128), RQ15
  MOV.L        (R2, 124), RD16
  BSR          tk_fsend, R1
  ADD          RQ10, 0, RD18
// pdpc201/btshx_supa.c:543   
  ADDS.L       RD18, 0, RQ8
  ADD          RQ8, 0, RQ10

.L00C0214E:
  ADD          R2, 400, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

__init_stdin:
// pdpc201/stdio.c:122   
  MOV          TU61F874B9/permFiles, RQ13
  ADD          RQ13, 0, RQ12
// pdpc201/stdio.c:124   
  ADD          RQ13, 112, RQ11
// pdpc201/stdio.c:125   
  ADD          RQ13, 224, RQ10
// pdpc201/stdio.c:127   
  ADD          R0, 0x01414237, RD17
  MOV.L        RD17, (RQ12, 4)
// pdpc201/stdio.c:128   
  MOV.L        RD17, (RQ12, 108)
// pdpc201/stdio.c:130   
  MOV.L        RD17, (RQ11, 4)
// pdpc201/stdio.c:131   
  MOV.L        RD17, (RQ11, 108)
// pdpc201/stdio.c:133   
  MOV.L        RD17, (RQ10, 4)
// pdpc201/stdio.c:134   
  MOV.L        RD17, (RQ10, 108)
  MOV.Q        RQ12, __stdin
  MOV.Q        RQ11, __stdout
  MOV.Q        RQ10, __stderr

.L00C0214F:
  JSR          R1, 0, R0
  .balign 4

dlopen:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// pdpc201/bt_dlfcn.c:9   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  BSR          TK_DlOpenA, R1

.L00C02155:
  ADD          R2, 384, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

_locale_is_utf8:
// pdpc201/locale.c:61   
  MOV.L        locale_flags, RD13
  AND          RD13, 1, RQ12
  CMPNE.Q      RQ12, R0, RQ11
  ADDS.L       RQ11, 0, RD10

.L00C02156:
  JSR          R1, 0, R0

T_FireFlicker:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
// p_lights.c:51   if (--flick->count)
  MOV.L        (RQ8, 32), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV.L        RQ9, (RQ8, 32)
  BRNE.L       R0, RQ9, .L00C0215C
// p_lights.c:54   amount = (P_Random()&3)*16;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 3, RQ9
  SHAD.L       RQ9, 4, RD22
// p_lights.c:56   if (flick->sector->lightlevel - amount < flick->minlight)
  MOV.Q        (RQ8, 24), RQ23
  MOV.W        (RQ23, 12), RQ18
  SUBS.L       RQ18, RD22, RQ9
  MOV.L        RD22, (R2, 100)
  MOV.L        (RQ8, 40), RQ18
  BRGE.L       RQ18, RQ9, .L00801CF0
// p_lights.c:57   flick->sector->lightlevel = flick->minlight;
  MOV.L        (RQ8, 40), RQ9
  MOV.Q        (RQ8, 24), RQ23
  MOV.W        RQ9, (RQ23, 12)
  BSR          .L00801CF1, R0

.L00801CF0:
// p_lights.c:59   flick->sector->lightlevel = flick->maxlight - amount;
  MOV.L        (RQ8, 36), RQ18
  MOV.L        (R2, 100), RD22
  SUBS.L       RQ18, RD22, RQ9
  MOV.Q        (RQ8, 24), RQ23
  MOV.W        RQ9, (RQ23, 12)

.L00801CF1:
// p_lights.c:61   flick->count = 4;
  ADD          R0, 4, RD22
  MOV.L        RD22, (RQ8, 32)

.L00C0215C:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_print_hex_n:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
  ADDS.L       RD11, 0, RD8
// tk_core/tk_puts.c:1163   
  BRLE.L       16, RD8, .L00800C2C
// tk_core/tk_puts.c:1168   
  MOV          .L00C02168, RQ10
  BSR          tk_puts, R1
// tk_core/tk_puts.c:1169   
  ADDU.L       RD8, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_print_hex, R1
// tk_core/tk_puts.c:1170   
  MOV          .L00C02169, RQ10
  BSR          tk_puts, R1
// tk_core/tk_puts.c:1171   
  ADDU.L       RQ23, R0, RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_print_hex, R1
// tk_core/tk_puts.c:1173   
  MOV          .L00C01210, RQ10
  BSR          tk_puts, R1
// tk_core/tk_puts.c:1174   

tk_print_hex_n.debugbreak_L03EB:
  BRK          1003

.L00800C2C:
// tk_core/tk_puts.c:1177   
  BRLE.L       8, RD8, .L00800C2D
  BRLE.L       15, RD8, .L00800C2E
// tk_core/tk_puts.c:1179   
  SHLR.Q       RQ23, 60, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C2E:
  BRLE.L       14, RD8, .L00800C2F
// tk_core/tk_puts.c:1180   
  SHLR.Q       RQ23, 56, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C2F:
  BRLE.L       13, RD8, .L00800C30
// tk_core/tk_puts.c:1181   
  SHLR.Q       RQ23, 52, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C30:
  BRLE.L       12, RD8, .L00800C31
// tk_core/tk_puts.c:1182   
  SHLR.Q       RQ23, 48, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C31:
  BRLE.L       11, RD8, .L00800C32
// tk_core/tk_puts.c:1183   
  SHLR.Q       RQ23, 44, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C32:
  BRLE.L       10, RD8, .L00800C33
// tk_core/tk_puts.c:1184   
  SHLR.Q       RQ23, 40, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C33:
  BRLE.L       9, RD8, .L00800C34
// tk_core/tk_puts.c:1185   
  SHLR.Q       RQ23, 36, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C34:
  BRLE.L       8, RD8, .L00800C35
// tk_core/tk_puts.c:1186   
  SHLR.Q       RQ23, 32, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C35:

.L00800C2D:
// tk_core/tk_puts.c:1189   
  BRLE.L       7, RD8, .L00800C36
  SHLR.Q       RQ23, 28, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C36:
// tk_core/tk_puts.c:1190   
  BRLE.L       6, RD8, .L00800C37
  SHLR.Q       RQ23, 24, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C37:
// tk_core/tk_puts.c:1191   
  BRLE.L       5, RD8, .L00800C38
  SHLR.Q       RQ23, 20, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C38:
// tk_core/tk_puts.c:1192   
  BRLE.L       4, RD8, .L00800C39
  SHLR.Q       RQ23, 16, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C39:
// tk_core/tk_puts.c:1193   
  BRLE.L       3, RD8, .L00800C3A
  SHLR.Q       RQ23, 12, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C3A:
// tk_core/tk_puts.c:1194   
  BRLE.L       2, RD8, .L00800C3B
  SHLR.Q       RQ23, 8, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C3B:
// tk_core/tk_puts.c:1195   
  BRLE.L       1, RD8, .L00800C3C
  SHLR.Q       RQ23, 4, RQ9
  AND          RQ9, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C3C:
// tk_core/tk_puts.c:1196   
  BRLE.L       R0, RD8, .L00800C3D
  AND          RQ23, 15, RQ9
  MOV.Q        tk_print_hex_n/chrs!1792, RQ22
  MOV.B        (RQ22, RQ9), RQ18
  ADD          RQ18, 0, RD10
  BSR          tk_putc, R1

.L00800C3D:

.L00C02167:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_AcsRun_PrintString:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ23
  ADD          RD11, 0, RD22
// p_acspec.c:1036   s=NULL;
  ADD          R0, 0, RQ9
// p_acspec.c:1037   if((val>=0) && (val<p_acsvm_strs_num))
  CMPGE.Q      RD22, R0, RQ18
  MOV.L        p_acsvm_strs_num, RD27
  CMPGT.Q      RD27, RD22, RQ8
  BTST.L       RQ8, RQ18, .L0080194C
// p_acspec.c:1038   s=p_acsvm_strs_ptr[val];
  MOV          p_acsvm_strs_ptr, RQ27
  MOV.Q        (RQ27, RD22), RQ9

.L0080194C:
// p_acspec.c:1039   if(!s)s="(NULL)";
  BRNE.Q       R0, RQ9, .L0080194D
  MOV          .L00C02171, RQ9

.L0080194D:
// p_acspec.c:1041   t=run->prnbuf+run->prnpos;
  ADD          RQ23, 1072, RQ27
  MOVU.B       (RQ23, 1328), RQ18
  ADD          RQ27, RQ18, RQ21
// p_acspec.c:1042   sprintf(t, "%s", s);
  ADD          RQ21, 0, RQ10
  MOV          .L00C02172, RQ11
  ADD          RQ9, 0, RQ12
  BSR          sprintf, R1
// p_acspec.c:1043   run->prnpos+=strlen(t);
  MOVU.B       (RQ23, 1328), RQ8
  ADD          RQ21, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ20
  AND          RQ8, 255, RQ26
  ADD          RQ26, RQ20, RQ25
  AND          RQ25, 255, RQ18
  MOVU.B       RQ18, (RQ23, 1328)

.L00C02170:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

A_CyberAttack:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 33, RD8
// p_enemy.c:1003   {	
  MOV.Q        (RQ18, 176), RQ9
  BREQ.Q       R0, RQ9, .L00C02178
// p_enemy.c:1007   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1008   P_SpawnMissile (actor, actor->target, MT_ROCKET);
  MOV.Q        (RQ18, 176), RQ9
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 33, RD12
  BSR          P_SpawnMissile, R1

.L00C02178:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TKMM_MProtectV:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -464, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_mmap.c:313   
// tk_core/tk_mmap.c:316   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 88)
// tk_core/tk_mmap.c:317   
  ADD          R2, 128, RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        (R2, 120), RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_core/tk_mmap.c:318   
  ADD          RQ8, 8, RQ23
  MOV.Q        (R2, 112), RQ21
  MOV.Q        RQ21, (RQ23, 0)
// tk_core/tk_mmap.c:319   
  ADD          RQ8, 16, RQ23
  MOV.L        (R2, 108), RD20
  MOV.L        RD20, (RQ23, 0)
// tk_core/tk_mmap.c:320   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4114, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmap.c:321   
  MOV.Q        (R2, 88), RQ13
  ADDS.L       RQ13, 0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C0217E:
  ADD          R2, 464, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

R_ScaleFromGlobalAngle:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -296, R2
  ADD          RD10, 0, RD20
// r_main.c:500   anglea = ANG90 + (visangle-viewangle);
  MOVU.L       viewangle, RD27
  SUBU.L       RD20, RD27, RQ18
  ADD          RQ18, 0, RD8
  LUI          0x00040000, RD27
  ADDS.L       RD8, RD27, RD8
// r_main.c:501   angleb = ANG90 + (visangle-rw_normalangle);
  MOVU.L       rw_normalangle, RD26
  SUBU.L       RD20, RD26, RQ18
  ADD          RQ18, 0, RD23
  ADDS.L       RD23, RD27, RD23
// r_main.c:503   anglea = anglea>>ANGLETOFINESHIFT;
  SHAR         RD8, 19, RD8
// r_main.c:504   angleb = angleb>>ANGLETOFINESHIFT;
  SHAR         RD23, 19, RD23
// r_main.c:505   anglea &= (FINEANGLES-1);
  LDIZ         8191, RD26
  AND          RD8, RD26, RD8
// r_main.c:506   angleb &= (FINEANGLES-1);
  AND          RD23, RD26, RD23
// r_main.c:509   sinea = finesine[anglea];	
  MOV          finesine, RQ25
  MOV.L        (RQ25, RD8), RD27
  MOV.L        RD27, (R2, 88)
// r_main.c:510   sineb = finesine[angleb];
  MOV.L        (RQ25, RD23), RD26
  MOV.L        RD26, (R2, 84)
// r_main.c:511   num = FixedMul(projection,sineb)<<detailshift;
  MOV.L        projection, RD10
  ADD          RD26, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        detailshift, RD25
  SHAD.L       RQ18, RD25, RD21
// r_main.c:512   den = FixedMul(rw_distance,sinea);
  MOV.L        rw_distance, RD10
  ADD          RD27, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD22
// r_main.c:514   if (den > num>>16)
  SHAR         RD21, 16, RQ18
  BRLE.L       RQ18, RD22, .L00802661
// r_main.c:515   {
  ADD          RD21, 0, RD10
  ADD          RD22, 0, RD11
  BSR          FixedDiv, R1
  ADDS.L       RQ10, 0, RD9
  LUI          1024, RD27
  BRLE.L       RD27, RD9, .L00802662
// r_main.c:519   scale = 64*FRACUNIT;
  LUI          1024, RD9
  BSR          .L00802663, R0

.L00802662:
  BRGE.L       256, RD9, .L00802664
// r_main.c:521   scale = 256;
  ADD          R0, 256, RD9

.L00802664:

.L00802663:
  BSR          .L00802665, R0

.L00802661:
// r_main.c:524   scale = 64*FRACUNIT;
  LUI          1024, RD9

.L00802665:
// r_main.c:526   return scale;
  ADDS.L       RD9, 0, RD10

.L00C02184:
  ADD          R2, 296, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

Z_Init:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// z_zone.c:109   size = 0;
  ADD          R0, 0, RD21
  MOV.L        RD21, (R2, 108)
// z_zone.c:110   mainzone = (memzone_t *)I_ZoneBase (&size);
  ADD          R2, 108, RQ8
  ADD          RQ8, 0, RQ10
  BSR          I_ZoneBase, R1
  ADD          RQ10, 0, RQ9
  ADD          RQ9, 0, RQ21
// z_zone.c:111   mainzone->size = size;
  MOV.L        (R2, 108), RD20
  MOV.L        RD20, (RQ21, 0)
// z_zone.c:114   block = (memblock_t *)( (byte *)mainzone + sizeof(memzone_t) );
  ADD          RQ21, 0, RQ8
  ADD          RQ8, 64, RQ9
  ADD          RQ9, 0, RQ18
// z_zone.c:115   mainzone->blocklist.next = block;
  ADD          RQ21, 8, RQ20
  MOV.Q        RQ18, (RQ20, 32)
// z_zone.c:116   mainzone->blocklist.prev = block;
  MOV.Q        RQ18, (RQ20, 40)
// z_zone.c:118   mainzone->blocklist.user = (void *)mainzone;
  ADD          RQ21, 0, RQ8
  MOV.Q        RQ8, (RQ20, 16)
// z_zone.c:119   mainzone->blocklist.tag = PU_STATIC;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ20, 8)
// z_zone.c:120   mainzone->blocklist.id = ZONEID;
  ADD          R0, 0x001D4A11, RD26
  MOV.L        RD26, (RQ20, 0)
// z_zone.c:121   mainzone->rover = block;
  MOV.Q        RQ18, (RQ21, 56)
// z_zone.c:123   block->prev = block->next = &mainzone->blocklist;
  ADD          RQ21, 8, RQ9
  MOV.Q        RQ9, (RQ18, 32)
  MOV.Q        RQ9, (RQ18, 40)
// z_zone.c:126   block->user = NULL;
  MOV.Q        RQ0, (RQ18, 16)
// z_zone.c:128   block->id = 0;
  MOV.L        RD0, (RQ18, 0)
// z_zone.c:130   block->size = mainzone->size - sizeof(memzone_t);
  MOV.L        (RQ21, 0), RQ23
  MOV.Q        RQ21, mainzone
  ADDS.L       RQ23, -64, RQ22
  MOV.L        RQ22, (RQ18, 4)
// z_zone.c:132   if(((long)block)&15)
  ADD          R0, 15, RQ21
  BTST.Q       RQ21, RQ18, .L00802D91
// z_zone.c:133   __debugbreak();

Z_Init.debugbreak_L03F1:
  BRK          1009

.L00802D91:

.L00C0218F:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

raise:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADDS.L       RD10, 0, RD9
// pdpc201/signal.c:43   
  MOV          handlers, RQ8
  MOV.Q        (RQ8, RD9), RQ18
  ADDS.L       RD9, 0, RD10
  JSR          RQ18, 0, R1
// pdpc201/signal.c:45   
  ADD          R0, 0, RD10

.L00C02196:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

S_StopMusic:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// s_sound.c:705   {
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  BREQ.Q       R0, RQ8, .L00802D70
  MOV.L        TU7A00CA3E/mus_paused, RD8
  BREQ.L       R0, RD8, .L00802D71
// s_sound.c:709   I_ResumeSong(mus_playing->handle);
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.L        (RQ8, 24), RQ18
  ADD          RQ18, 0, RD10
  BSR          I_ResumeSong, R1

.L00802D71:
// s_sound.c:711   I_StopSong(mus_playing->handle);
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.L        (RQ8, 24), RQ18
  ADD          RQ18, 0, RD10
  BSR          I_StopSong, R1
// s_sound.c:712   I_UnRegisterSong(mus_playing->handle);
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.L        (RQ8, 24), RQ18
  ADD          RQ18, 0, RD10
  BSR          I_UnRegisterSong, R1
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.Q        (RQ8, 16), RQ9
  BREQ.Q       R0, RQ9, .L00802D72
// s_sound.c:715   Z_ChangeTag(mus_playing->data, PU_CACHE);
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.Q        (RQ8, 16), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802D72:
// s_sound.c:717   mus_playing->data = 0;
  ADD          R0, 0, RQ9
  MOV.Q        TU7A00CA3E/mus_playing, RQ8
  MOV.Q        RQ9, (RQ8, 16)
// s_sound.c:718   mus_playing = 0;
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, TU7A00CA3E/mus_playing

.L00802D70:

.L00C0219C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

tk_sysc_fwrite:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.X        R22, (R2, 32)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R27, (R2, 48)
  MOV.X        R20, (R2, 16)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  MOV.Q        RQ13, (R2, 104)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:228   
// tk_vf_sysc.c:233   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 88)
// tk_vf_sysc.c:234   
  MOV.Q        (R2, 104), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 128, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:235   
  ADD          RQ23, 8, RQ21
  MOV.Q        (R2, 120), RQ20
  MOV.Q        RQ20, (RQ21, 0)
// tk_vf_sysc.c:236   
  MOV.L        (R2, 116), RD27
  MOV.L        (R2, 112), RD23
  MULS.L       RD27, RD23, RQ18
  ADD          R2, 128, RQ22
  ADD          RQ22, 16, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:237   
  ADD          R2, 88, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4137, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ22, 0, RQ13
  BSR          tk_syscall, R1
// tk_vf_sysc.c:238   

.L00C021A2:
  ADD          R2, 432, R2
  MOV.Q        (R2, 56), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R20
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_initStats:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -328, R2
// wi_stuff.c:1350   {
  MOV.L        RD0, TU7A00CB85/state
// wi_stuff.c:1352   acceleratestage = 0;
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:1353   sp_state = 1;
  ADD          R0, 1, RD9
  MOV.L        RD9, TU7A00CB85/sp_state
// wi_stuff.c:1354   cnt_kills[0] = cnt_items[0] = cnt_secret[0] = -1;
  MOV          TU7A00CB85/cnt_secret, RQ9
  ADD          R0, -1, RD8
  MOV.L        RD8, (RQ9, 0)
  MOV          TU7A00CB85/cnt_items, RQ9
  MOV.L        RD8, (RQ9, 0)
  MOV          TU7A00CB85/cnt_kills, RQ9
  MOV.L        RD8, (RQ9, 0)
// wi_stuff.c:1355   cnt_time = cnt_par = -1;
  MOV.L        RD8, TU7A00CB85/cnt_par
  MOV.L        RD8, TU7A00CB85/cnt_time
// wi_stuff.c:1356   cnt_pause = TICRATE;
  ADD          R0, 35, RD9
  MOV.L        RD9, TU7A00CB85/cnt_pause
// wi_stuff.c:1358   WI_initAnimatedBack();
  BSR          WI_initAnimatedBack, R1

.L00C021A8:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

A_FireBFG:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:569   {
  ADD          RQ8, 160, RQ23
  MOV.L        (RQ8, 116), RQ9
  MOV          weaponinfo, RQ22
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ9
  MOV.L        (RQ23, RQ9), RQ18
  ADDS.L       RQ18, -40, RQ9
  MOV.L        (RQ8, 116), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ18
  MOV.L        RQ9, (RQ23, RQ18)
// p_pspr.c:571   P_SpawnPlayerMissile (player->mo, MT_BFG);
  MOV.Q        (RQ8, 0), RQ23
  MOV.Q        RQ23, (R2, 88)
  ADD          RQ23, 0, RQ10
  ADD          R0, 35, RD11
  BSR          P_SpawnPlayerMissile, R1

.L00C021AE:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

__rename2:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -1504, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 144)
  ADD          RQ12, 0, RQ8
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 128)
  ADD          R2, 688, RQ6
  MOV.Q        RQ6, (R2, 120)
// pdpc201/btshx_supa.c:614   
// pdpc201/btshx_supa.c:616   
// pdpc201/btshx_supa.c:621   
  MOV.B        (RQ8, 0), RQ18
  BRNE.Q       83, RQ18, .L00800FB7
// pdpc201/btshx_supa.c:622   
  ADD          R2, 160, RQ10
  ADD          RQ9, 0, RQ11
  BSR          strcpy, R1
  BSR          .L00800FB8, R0

.L00800FB7:
// pdpc201/btshx_supa.c:625   
  ADD          R2, 160, RQ10
  ADD          R0, 512, RD11
  ADD          RQ9, 0, RQ12
  BSR          TK_Env_GetCwdQualifyName, R1
// pdpc201/btshx_supa.c:627   
  ADD          R2, 160, RQ10
  ADD          R2, 160, RQ11
  BSR          TKSH_NormalizePath, R1

.L00800FB8:
// pdpc201/btshx_supa.c:630   
  ADD          R2, 688, RQ10
  ADD          R0, 512, RD11
  MOV.Q        (R2, 144), RQ12
  BSR          TK_Env_GetCwdQualifyName, R1
// pdpc201/btshx_supa.c:631   
  ADD          R2, 688, RQ10
  ADD          R2, 688, RQ11
  BSR          TKSH_NormalizePath, R1
// pdpc201/btshx_supa.c:635   
  ADD          R2, 160, RQ10
  ADD          R2, 688, RQ11
  ADD          RQ8, 0, RQ12
  BSR          tk_rename, R1
// pdpc201/btshx_supa.c:636   
  ADD          R0, 0, RD10

.L00C021B4:
  ADD          R2, 1504, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_print_decimal_n:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -608, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// tk_core/tk_puts.c:1272   
// tk_core/tk_puts.c:1277   
  MOV.L        (R2, 92), RD9
  ADD          R0, 0, RD20
// tk_core/tk_puts.c:1278   
  BRGE.L       R0, RD9, .L00800C4D
// tk_core/tk_puts.c:1279   
  SUBS.L       R0, RD9, RD9
  ADD          R0, 1, RD20

.L00800C4D:
// tk_core/tk_puts.c:1284   
  ADD          R2, 96, RQ18
  MOV.L        (R2, 88), RD23
// tk_core/tk_puts.c:1286   
  BSR          .L00800C4E, R0

.L00800C4F:
// tk_core/tk_puts.c:1287   
  ADD          RD9, 0, RD22
  ADD          R0, 10, RD13
  MODS.L       RD22, RD13, RD22
// tk_core/tk_puts.c:1289   
  ADDS.L       RD22, 48, RQ8
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 1, RQ18
  MOV.B        RQ8, (RQ21, 0)
// tk_core/tk_puts.c:1290   
  DIVS.L       RD9, RD13, RD9
// tk_core/tk_puts.c:1291   
  ADDS.L       RD23, -1, RD23

.L00800C4E:
  BRGT.L       R0, RD23, .L00800C4F

.L00800C50:
// tk_core/tk_puts.c:1296   
  BSR          .L00800C51, R0

.L00800C52:
// tk_core/tk_puts.c:1297   
  ADD          RQ18, -1, RQ18
  MOV.B        (RQ18, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          tk_putc, R1

.L00800C51:
  ADD          R2, 96, RQ13
  BRGT.Q       RQ13, RQ18, .L00800C52

.L00800C53:

.L00C021BA:
  ADD          R2, 608, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

M_QuitResponse:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R22, (R2, 24)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD8
// m_menu.c:1124   {
  ADD          R0, 121, RD22
  BRNE.Q       RD22, RD8, .L00C021C0
// m_menu.c:1127   if (!netgame)
  MOV.L        netgame, RD22
  BRNE.L       R0, RD22, .L0080166C
  MOV.L        gamemode, RD22
  BRNE.Q       2, RD22, .L0080166D
// m_menu.c:1130   S_StartSound(NULL,quitsounds2[(gametic>>2)&7]);
  MOV.L        gametic, RD22
  SHLR.Q       RD22, 2, RQ18
  AND          RQ18, 7, RQ18
  MOV          quitsounds2, RQ22
  MOV.L        (RQ22, RQ18), RQ9
  ADD          RQ0, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          S_StartSound, R1
  BSR          .L0080166E, R0

.L0080166D:
// m_menu.c:1132   S_StartSound(NULL,quitsounds[(gametic>>2)&7]);
  MOV.L        gametic, RD22
  SHLR.Q       RD22, 2, RQ18
  AND          RQ18, 7, RQ18
  MOV          quitsounds, RQ22
  MOV.L        (RQ22, RQ18), RQ9
  ADD          RQ0, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          S_StartSound, R1

.L0080166E:
// m_menu.c:1133   I_WaitVBL(105);
  ADD          R0, 105, RD10
  BSR          I_WaitVBL, R1

.L0080166C:
// m_menu.c:1134   }
  BSR          I_Quit, R1

.L00C021C0:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

wipe_shittyColMajorXform:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RD11, 0, RD22
  ADD          RD12, 0, RD20
// f_wipe.c:61   dest = (short*) Z_Malloc(width*height*2*sizeof(short), PU_STATIC, 0);
  MULS.L       RD22, RD20, RQ9
  SHAD.L       RQ9, 1, RQ8
  SHAD.L       RQ8, 1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 104)
// f_wipe.c:63   for(y=0;y<height;y++)
  ADD          R0, 0, RD23
  BRGE.L       RD20, RD23, .L00801334

.L00801332:
// f_wipe.c:64   for(x=0;x<width;x++)
  ADD          R0, 0, RD18
  BRGE.L       RD22, RD18, .L00801337

.L00801335:
// f_wipe.c:65   dest[x*height+y] = array[y*width+x];
  MULS.L       RD23, RD22, RQ9
  ADDS.L       RQ9, RD18, RQ8
  MOV.Q        (R2, 120), RQ27
  MOV.W        (RQ27, RQ8), RQ9
  MULS.L       RD18, RD20, RQ8
  ADDS.L       RQ8, RD23, RQ21
  MOV.Q        (R2, 104), RQ26
  MOV.W        RQ9, (RQ26, RQ21)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD22, RD18, .L00801335

.L00801337:
  ADDS.L       RD23, 1, RD23
  BRLT.L       RD20, RD23, .L00801332

.L00801334:
// f_wipe.c:67   memcpy(array, dest, width*height*2*sizeof(short));
  MULS.L       RD22, RD20, RQ9
  SHAD.L       RQ9, 1, RQ8
  SHAD.L       RQ8, 1, RQ21
  ADDS.L       RQ21, 0, RQ27
  MOV.Q        (R2, 120), RQ10
  MOV.Q        (R2, 104), RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1
// f_wipe.c:69   Z_Free(dest);
  MOV.Q        (R2, 104), RQ10
  BSR          Z_Free, R1

.L00C021C6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

STlib_initBinIcon:
// st_lib.c:283   {
  MOV.L        RD11, (RQ10, 0)
// st_lib.c:285   b->y	= y;
  MOV.L        RD12, (RQ10, 4)
// st_lib.c:286   b->oldval	= 0;
  MOV.L        RD0, (RQ10, 8)
// st_lib.c:287   b->val	= val;
  MOV.Q        RQ14, (RQ10, 16)
// st_lib.c:288   b->on	= on;
  MOV.Q        RQ15, (RQ10, 24)
// st_lib.c:289   b->p	= i;
  MOV.Q        RQ13, (RQ10, 32)

.L00C021C7:
  JSR          R1, 0, R0

TKMM_LVA_HashName:
// tk_core/lva_strdup.c:12   
  ADD          RQ10, 0, RQ13
  ADD          R0, 1, RD12
// tk_core/lva_strdup.c:13   
  BSR          .L00800DDD, R0

.L00800DDE:
// tk_core/lva_strdup.c:14   
  LDIZ         0x0000FFF1, R5
  MULS.L       RD12, R5, RQ11
  MOV.B        (RQ13, 0), RQ17
  ADD          RQ13, 1, RQ13
  ADDS.L       RQ11, RQ17, RD12

.L00800DDD:
  MOV.B        (RQ13, 0), RQ11
  BRNE.L       R0, RQ11, .L00800DDE

.L00800DDF:
  LDIZ         0x0000FFF1, R5
  MULS.L       RD12, R5, RQ17
  ADDS.L       RQ17, 1, RQ11
  ADDS.L       RQ11, 0, RD10

.L00C021C8:
  JSR          R1, 0, R0
  .balign 4

tkmm_lva_oprmod_bigig:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -408, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 128)
// tk_core/lva_tagopr.c:341   
  ADD          RQ9, 0, RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  MOV.X        RQ10, (R2, 112)
// tk_core/lva_tagopr.c:342   
  MOV.Q        (R2, 128), RQ10
  BSR          __lva_conv_toi128, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  SHAR.Q       RQ10, 63, RQ11
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ23
// tk_core/lva_tagopr.c:343   
  ADD          RQ22, 0, RQ12
  ADD          RQ23, 0, RQ13
  MOV.X        (R2, 112), RQ10
  BSR          __xli_smod, R1
  MOV.X        RQ10, (R2, 80)
// tk_core/lva_tagopr.c:344   
  MOV.X        RQ22, (R2, 96)
  MOV.X        (R2, 80), RQ10
  BSR          TKMM_LVA_NewBigInt, R1

.L00C021CE:
  ADD          R2, 408, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

W_Reload:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// w_wad.c:555   {
// w_wad.c:564   if (!reloadname)
  MOV.Q        reloadname, RQ27
  BREQ.Q       R0, RQ27, .L00C021D4
// w_wad.c:568   if ( (handle = w_open (reloadname, "rb")) == -1)
  MOV.Q        reloadname, RQ10
  MOV          .L00C01607, RQ11
  BSR          w_open, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD20
  BRNE.Q       -1, RQ18, .L008028C1
// w_wad.c:569   I_Error ("W_Reload: couldn't open %s",reloadname);
  MOV          .L00C021D5, RQ10
  MOV.Q        reloadname, RQ11
  BSR          I_Error, R1

.L008028C1:
// w_wad.c:571   w_read (handle, &header, sizeof(header));
  ADD          R2, 96, RQ9
  ADD          RD20, 0, RD10
  ADD          RQ9, 0, RQ11
  ADD          R0, 12, RD12
  BSR          w_read, R1
// w_wad.c:572   lumpcount = LONG(header.numlumps);
  ADD          R2, 96, RQ27
  MOV.L        (RQ27, 4), RD21
// w_wad.c:573   header.infotableofs = LONG(header.infotableofs);
  MOV.L        (RQ27, 8), RQ18
  MOV.L        RQ18, (RQ27, 8)
// w_wad.c:574   length = lumpcount*sizeof(filelump_t);
  SHAD.L       RD21, 4, RD26
// w_wad.c:576   fileinfo = malloc (length);
  ADDS.L       RD26, 0, RQ10
  MOV.L        RD26, (R2, 92)
  BSR          malloc, R1
  ADD          RQ10, 0, RQ23
// w_wad.c:577   w_lseek (handle, header.infotableofs, SEEK_SET);
  MOV.L        (RQ27, 8), RQ18
  ADD          RD20, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  BSR          w_lseek, R1
// w_wad.c:578   w_read (handle, fileinfo, length);
  ADD          RD20, 0, RD10
  ADD          RQ23, 0, RQ11
  ADD          RD26, 0, RD12
  BSR          w_read, R1
// w_wad.c:581   lump_p = &lumpinfo[reloadlump];
  MOV.Q        lumpinfo, RQ13
  MOV.L        reloadlump, RD12
  ADD          R0, 40, R5
  MUL.L        RD12, R5, RQ22
  ADD          RQ13, RQ22, RQ22
// w_wad.c:583   for (i=reloadlump ;
  ADDU.L       RD12, R0, RD8
  ADDS.L       RD12, RD21, RQ18
  BRGEU.L      RQ18, RD8, .L008028C4

.L008028C2:
// w_wad.c:586   {
  MOV.Q        lumpcache, RQ27
  MOV.Q        (RQ27, RD8), RQ9
  BREQ.Q       R0, RQ9, .L008028C5
// w_wad.c:588   Z_Free (lumpcache[i]);
  MOV.Q        lumpcache, RQ27
  MOV.Q        (RQ27, RD8), RQ9
  ADD          RQ9, 0, RQ10
  BSR          Z_Free, R1

.L008028C5:
// w_wad.c:590   lump_p->position = LONG(fileinfo->filepos);
  MOV.L        (RQ23, 0), RQ18
  MOV.L        RQ18, (RQ22, 20)
// w_wad.c:591   lump_p->size = LONG(fileinfo->size);
  MOV.L        (RQ23, 4), RQ18
  MOV.L        RQ18, (RQ22, 24)
  ADD          RD8, 0, RQ18
  ADDS.L       RD8, 1, RD8
  ADDU.L       RD8, R0, RD8
  ADDU.L       RD8, R0, RD8
  ADD          RQ22, 0, RQ9
  ADD          RQ22, 40, RQ22
  ADD          RQ23, 0, RQ9
  ADD          RQ23, 16, RQ23
  MOV.L        reloadlump, RD27
  ADDS.L       RD27, RD21, RQ18
  BRLTU.L      RQ18, RD8, .L008028C2

.L008028C4:
// w_wad.c:594   w_close (handle);
  ADD          RD20, 0, RD10
  BSR          w_close, R1

.L00C021D4:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

_fcn_clz128:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  MOV.X        RQ10, (R2, 176)
// pdpc201/btshx_xli.c:727   
  ADD          R0, 0, RQ22
  ADD          R0, 0xFFFFFFFF80000000, RQ23
  LDSH32       RQ23, 0, RQ23
  ADD          RQ22, 0, RQ8
  ADD          RQ23, 0, RQ9
// pdpc201/btshx_xli.c:729   
  ADD          R0, 0, RQ22
  ADD          R0, 0xFFFFFFFFFF000000, RQ23
  LDSH32       RQ23, 0, RQ23
  ADD          RQ22, 0, RQ20
  ADD          RQ23, 0, RQ21
// pdpc201/btshx_xli.c:730   
  ADD          R0, 0, RQ22
  ADD          R0, 0xFFFFFFFFFFFF0000, RQ23
  LDSH32       RQ23, 0, RQ23
  ADD          RQ22, 0, RQ26
  ADD          RQ23, 0, RQ27
// pdpc201/btshx_xli.c:731   
  ADD          R0, 0, RQ22
  ADD          R0, -1, RQ23
  LDSH32       RQ23, 0, RQ23
  ADD          RQ22, 0, RQ24
  ADD          RQ23, 0, RQ25
// pdpc201/btshx_xli.c:732   
  MOV.X        RQ8, (R2, 160)
  ADD          R0, 0, RQ8
  ADD          R0, -1, RQ9
  ADD          RQ8, 0, RQ22
  ADD          RQ9, 0, RQ23
// pdpc201/btshx_xli.c:736   
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ9
  MOV.X        RQ22, (R2, 96)
  MOV.X        RQ20, (R2, 144)
  MOV.X        RQ26, (R2, 128)
  MOV.X        RQ24, (R2, 112)
  ADD          RQ8, 0, RQ12
  ADD          RQ9, 0, RQ13
  MOV.X        (R2, 176), RQ10
  BSR          __xli_cmp_ne, R1
  BRNE.Q       RQ10, R0, .L0080107C
// pdpc201/btshx_xli.c:737   
  ADD          R0, 128, RD10
  BSR          .L00C021DB, R0

.L0080107C:
// pdpc201/btshx_xli.c:739   
  MOV.X        (R2, 176), RQ22
  ADD          RQ22, 0, RQ8
  ADD          RQ23, 0, RQ9
  ADD          R0, 0, RD18
// pdpc201/btshx_xli.c:740   
  MOV.X        RQ8, (R2, 80)
  MOV.X        (R2, 96), RQ12
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          __xli_cmp_tst, R1
  BRNE.Q       RQ10, R0, .L0080107D
// pdpc201/btshx_xli.c:741   
  ADDS.L       RD18, 64, RD18
  ADD          R0, 64, RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_shl, R1
  MOV.X        RQ10, (R2, 80)

.L0080107D:
  MOV.X        (R2, 112), RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_cmp_tst, R1
  BRNE.Q       RQ10, R0, .L0080107E
// pdpc201/btshx_xli.c:743   
  ADDS.L       RD18, 32, RD18
  ADD          R0, 32, RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_shl, R1
  MOV.X        RQ10, (R2, 80)

.L0080107E:
  MOV.X        (R2, 128), RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_cmp_tst, R1
  BRNE.Q       RQ10, R0, .L0080107F
// pdpc201/btshx_xli.c:745   
  ADDS.L       RD18, 16, RD18
  ADD          R0, 16, RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_shl, R1
  MOV.X        RQ10, (R2, 80)

.L0080107F:
// pdpc201/btshx_xli.c:747   
  BSR          .L00801080, R0

.L00801081:
// pdpc201/btshx_xli.c:748   
  ADDS.L       RD18, 8, RD18
  ADD          R0, 8, RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_shl, R1
  MOV.X        RQ10, (R2, 80)

.L00801080:
  MOV.X        (R2, 144), RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_cmp_ntst, R1
  BRNE.Q       RQ10, R0, .L00801081

.L00801082:
// pdpc201/btshx_xli.c:750   
  BSR          .L00801083, R0

.L00801084:
// pdpc201/btshx_xli.c:751   
  ADDS.L       RD18, 1, RD18
  MOV.X        (R2, 80), RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_add, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ9
  ADD          RQ8, 0, RQ22
  ADD          RQ9, 0, RQ23
  MOV.X        RQ22, (R2, 80)

.L00801083:
  MOV.X        (R2, 160), RQ12
  MOV.X        (R2, 80), RQ10
  BSR          __xli_cmp_ntst, R1
  BRNE.Q       RQ10, R0, .L00801084

.L00801085:
// pdpc201/btshx_xli.c:753   
  ADD          RD18, 0, RD10

.L00C021DB:
  ADD          R2, 384, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

WI_initDeathmatchStats:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// wi_stuff.c:883   state = StatCount;
  MOV.L        RD0, TU7A00CB85/state
// wi_stuff.c:884   acceleratestage = 0;
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:885   dm_state = 1;
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU7A00CB85/dm_state
// wi_stuff.c:887   cnt_pause = TICRATE;
  ADD          R0, 35, RQ6
  MOV.L        RQ6, TU7A00CB85/cnt_pause
// wi_stuff.c:889   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L008029EF:
// wi_stuff.c:890   {
  MOV          playeringame, RQ13
  MOV.L        (RQ13, RD9), RQ8
  BREQ.L       R0, RQ8, .L008029F2
// wi_stuff.c:892   {
  ADD          R0, 0, RD18

.L008029F3:
// wi_stuff.c:894   if (playeringame[j])
  MOV          playeringame, RQ13
  MOV.L        (RQ13, RD18), RQ8
  BREQ.L       R0, RQ8, .L008029F6
// wi_stuff.c:895   dm_frags[i][j] = 0;
  MOV          TU7A00CB85/dm_frags, RQ13
  SHAD.L       RD9, 4, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        RD0, (RQ12, RD18)

.L008029F6:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008029F3

.L008029F5:
// wi_stuff.c:897   dm_totals[i] = 0;
  MOV          TU7A00CB85/dm_totals, RQ13
  MOV.L        RD0, (RQ13, RD9)

.L008029F2:
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L008029EF

.L008029F1:
// wi_stuff.c:901   WI_initAnimatedBack();
  BSR          WI_initAnimatedBack, R1

.L00C021E1:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnBlood:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RD12, 0, RD22
  ADD          RD13, 0, RD21
// p_mobj.c:907   z += ((P_Random()-P_Random())<<10);
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ18, RQ23, RQ9
  SHAD.L       RQ9, 10, RQ18
  ADDS.L       RD22, RQ18, RD22
// p_mobj.c:908   th = P_SpawnMobj (x,y,z, MT_BLOOD);
  MOV.L        (R2, 108), RD10
  MOV.L        (R2, 104), RD11
  ADD          RD22, 0, RD12
  ADD          R0, 38, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ8
// p_mobj.c:909   th->momz = FRACUNIT*2;
  LUI          32, RD20
  MOV.L        RD20, (RQ8, 120)
// p_mobj.c:910   th->tics -= P_Random()&3;
  MOV.L        (RQ8, 144), RQ23
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 3, RQ18
  SUBS.L       RQ23, RQ18, RQ9
  MOV.L        RQ9, (RQ8, 144)
// p_mobj.c:912   if (th->tics < 1)
  MOV.L        (RQ8, 144), RQ18
  BRGE.L       1, RQ18, .L008022D1
// p_mobj.c:913   th->tics = 1;
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ8, 144)

.L008022D1:
// p_mobj.c:915   if (damage <= 12 && damage >= 9)
  ADD          R0, 12, R5
  CMPLE.Q      RD21, R5, RQ23
  ADD          R0, 9, R5
  CMPGE.Q      RD21, R5, RQ9
  BTST.L       RQ9, RQ23, .L008022D2
// p_mobj.c:916   P_SetMobjState (th,S_BLOOD2);
  ADD          RQ8, 0, RQ10
  ADD          R0, 91, RD11
  BSR          P_SetMobjState, R1
  BSR          .L008022D3, R0

.L008022D2:
  BRGE.L       9, RD21, .L008022D4
// p_mobj.c:918   P_SetMobjState (th,S_BLOOD3);
  ADD          RQ8, 0, RQ10
  ADD          R0, 92, RD11
  BSR          P_SetMobjState, R1

.L008022D4:

.L008022D3:

.L00C021E7:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

IN_Init:
// i_btesh4.c:492   void IN_Init (void)

.L00C021E8:
  JSR          R1, 0, R0

_msetzone:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// pdpc201/stdlib.c:255   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  MOV.Q        _msetzone_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C021EE:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

I_SMus_ParseEvent:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// i_bgb_mus_btsh.c:760   cs=i_smus_cs;
  MOV.Q        i_smus_cs, RQ27
  MOV.Q        RQ27, (R2, 120)
// i_bgb_mus_btsh.c:761   i=*cs++;
  MOV.Q        (R2, 120), RQ27
  MOVU.B       (RQ27, 0), RD26
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 120)
// i_bgb_mus_btsh.c:763   tg=i;
  ADD          RD26, 0, RD27
  MOV.L        RD26, (R2, 112)
// i_bgb_mus_btsh.c:764   op=(tg>>4)&7;
  SHAR         RD27, 4, RQ22
  AND          RQ22, 7, RD23
// i_bgb_mus_btsh.c:765   ch=tg&15;
  AND          RD27, 15, RD9
  MOV.L        RD27, (R2, 116)
// i_bgb_mus_btsh.c:766   d0=*cs++;
  MOV.Q        (R2, 120), RQ13
  MOVU.B       (RQ13, 0), RD18
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, (R2, 120)
// i_bgb_mus_btsh.c:767   if((op!=0) && (op!=2) && (op!=3) && (op!=7))
  CMPNE.Q      RD23, R0, RQ22
  ADD          R0, 2, R5
  CMPNE.Q      RD23, R5, RQ21
  AND          RQ22, RQ21, RQ20
  ADD          R0, 3, R5
  CMPNE.Q      RD23, R5, RQ22
  AND          RQ20, RQ22, RQ21
  ADD          R0, 7, R5
  CMPNE.Q      RD23, R5, RQ20
  BTST.L       RQ20, RQ21, .L0080126D
  BRNE.Q       1, RD23, .L0080126E
  ADD          R0, 128, RD27
  BTST.L       RD27, RD18, .L0080126F
// i_bgb_mus_btsh.c:772   {
  AND          RD18, 127, RD18
// i_bgb_mus_btsh.c:774   d1=*cs++;
  MOV.Q        (R2, 120), RQ27
  MOVU.B       (RQ27, 0), RD8
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 120)
  BSR          .L00801270, R0

.L0080126F:
// i_bgb_mus_btsh.c:776   {
  MOV.L        I_SMus_ParseEvent/ld1!20, RD8

.L00801270:
// i_bgb_mus_btsh.c:780   ld0=d0;
  MOV.L        RD18, I_SMus_ParseEvent/ld0!20
// i_bgb_mus_btsh.c:781   ld1=d1;
  MOV.L        RD8, I_SMus_ParseEvent/ld1!20
  BSR          .L00801271, R0

.L0080126E:
// i_bgb_mus_btsh.c:783   {
  MOV.Q        (R2, 120), RQ27
  MOVU.B       (RQ27, 0), RD8
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 120)

.L00801271:
  BSR          .L00801272, R0

.L0080126D:
// i_bgb_mus_btsh.c:787   {
  ADD          R0, 0, RD8

.L00801272:
// i_bgb_mus_btsh.c:791   if(i&128)
  MOV.L        (R2, 112), RD27
  ADD          R0, 128, RD26
  BTST.L       RD26, RD27, .L00801273
// i_bgb_mus_btsh.c:792   {
  ADD          R2, 120, RQ10
  BSR          I_SMus_ParseVLI, R1
  ADD          RQ10, 0, RD27
// i_bgb_mus_btsh.c:794   i_smus_tt+=k;
  MOV.L        i_smus_tt, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, i_smus_tt
  MOV.L        RD27, (R2, 108)

.L00801273:
// i_bgb_mus_btsh.c:797   i_smus_cs=cs;
  MOV.Q        (R2, 120), RQ27
// i_bgb_mus_btsh.c:801   if(i_smus_cs>=i_smus_cse)		//End Of Song
  MOV.Q        RQ27, i_smus_cs
  MOV.Q        i_smus_cse, RQ26
  BRLT.Q       RQ26, RQ27, .L00801274
// i_bgb_mus_btsh.c:802   {
  BSR          SMus_SilenceAll, R1
// i_bgb_mus_btsh.c:804   i_smus_cs=i_smus_css;		//Loop
  MOV.Q        i_smus_css, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, i_smus_cs
// i_bgb_mus_btsh.c:805   i_smus_tt=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, i_smus_tt
// i_bgb_mus_btsh.c:806   return(1);
  ADD          R0, 1, RD10
  BSR          .L00C021F4, R0

.L00801274:
// i_bgb_mus_btsh.c:809   switch(op)
  BREQ.L       R0, RD23, .L00801276
  BREQ.Q       1, RD23, .L00801277
  BREQ.Q       2, RD23, .L00801278
  BREQ.Q       3, RD23, .L00801279
  BREQ.Q       4, RD23, .L0080127A
  BREQ.Q       6, RD23, .L0080127B
  BREQ.Q       7, RD23, .L0080127C
  BSR          .L0080127D, R0

.L00801276:
// i_bgb_mus_btsh.c:811   case 0:
  ADDS.L       RD9, 0, RD10
  ADD          RD18, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_NoteOff, R1
// i_bgb_mus_btsh.c:813   break;
  BSR          .L00801275, R0

.L00801277:
// i_bgb_mus_btsh.c:814   case 1:
  ADDS.L       RD9, 0, RD10
  ADD          RD18, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_NoteOn, R1
// i_bgb_mus_btsh.c:816   break;
  BSR          .L00801275, R0

.L00801278:
// i_bgb_mus_btsh.c:817   case 2:
  SHAD.L       RD18, 6, RQ22
  ADDS.L       RD9, 0, RD10
  ADD          RQ22, 0, RD11
  BSR          SMus_PitchBlend, R1
// i_bgb_mus_btsh.c:819   break;
  BSR          .L00801275, R0

.L00801279:
// i_bgb_mus_btsh.c:821   case 3:
  BREQ.Q       10, RD18, .L0080127F
  BREQ.Q       11, RD18, .L00801280
  BREQ.Q       12, RD18, .L00801281
  BREQ.Q       13, RD18, .L00801282
  BREQ.Q       14, RD18, .L00801283
  BSR          .L0080127E, R0

.L0080127F:
// i_bgb_mus_btsh.c:824   case 10: SMus_Controller(ch, 120, 1);		break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 120, RD11
  ADD          R0, 1, RD12
  BSR          SMus_Controller, R1
  BSR          .L0080127E, R0

.L00801280:
// i_bgb_mus_btsh.c:825   case 11: SMus_Controller(ch, 123, 1);		break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 123, RD11
  ADD          R0, 1, RD12
  BSR          SMus_Controller, R1
  BSR          .L0080127E, R0

.L00801281:
// i_bgb_mus_btsh.c:826   case 12: SMus_Controller(ch, 126, 1);		break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 126, RD11
  ADD          R0, 1, RD12
  BSR          SMus_Controller, R1
  BSR          .L0080127E, R0

.L00801282:
// i_bgb_mus_btsh.c:827   case 13: SMus_Controller(ch, 127, 1);		break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 127, RD11
  ADD          R0, 1, RD12
  BSR          SMus_Controller, R1
  BSR          .L0080127E, R0

.L00801283:
// i_bgb_mus_btsh.c:828   case 14: SMus_Controller(ch, 121, 1);		break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 121, RD11
  ADD          R0, 1, RD12
  BSR          SMus_Controller, R1

.L0080127E:
// i_bgb_mus_btsh.c:829   }
  BSR          .L00801275, R0

.L0080127A:
// i_bgb_mus_btsh.c:832   case 4:
  AND          RD18, -1, RQ21
  BRGE.L       5, RQ21, .L00801290
  BREQ.L       R0, RD18, .L00801285
  BREQ.Q       1, RD18, .L00801286
  BREQ.Q       2, RD18, .L00801287
  BREQ.Q       3, RD18, .L00801288
  BREQ.Q       4, RD18, .L00801289

.L00801290:
  BREQ.Q       5, RD18, .L0080128A
  BREQ.Q       6, RD18, .L0080128B
  BREQ.Q       7, RD18, .L0080128C
  BREQ.Q       8, RD18, .L0080128D
  BREQ.Q       9, RD18, .L0080128E
  BSR          .L0080128F, R0

.L00801285:
// i_bgb_mus_btsh.c:835   case 0:		SMus_ProgramChange(ch, d1); break;
  ADDS.L       RD9, 0, RD10
  ADDS.L       RD8, 0, RD11
  BSR          SMus_ProgramChange, R1
  BSR          .L00801284, R0

.L00801286:
// i_bgb_mus_btsh.c:836   case 1:		SMus_Controller(ch,  0, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L00801287:
// i_bgb_mus_btsh.c:837   case 2:		SMus_Controller(ch,  1, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 1, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L00801288:
// i_bgb_mus_btsh.c:838   case 3:		SMus_Controller(ch,  7, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 7, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L00801289:
// i_bgb_mus_btsh.c:839   case 4:		SMus_Controller(ch, 10, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 10, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128A:
// i_bgb_mus_btsh.c:840   case 5:		SMus_Controller(ch, 11, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 11, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128B:
// i_bgb_mus_btsh.c:841   case 6:		SMus_Controller(ch, 91, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 91, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128C:
// i_bgb_mus_btsh.c:842   case 7:		SMus_Controller(ch, 93, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 93, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128D:
// i_bgb_mus_btsh.c:843   case 8:		SMus_Controller(ch, 64, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 64, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128E:
// i_bgb_mus_btsh.c:844   case 9:		SMus_Controller(ch, 67, d1); break;
  ADDS.L       RD9, 0, RD10
  ADD          R0, 67, RD11
  ADDS.L       RD8, 0, RD12
  BSR          SMus_Controller, R1
  BSR          .L00801284, R0

.L0080128F:

.L00801284:
// i_bgb_mus_btsh.c:845   }
  BSR          .L00801275, R0

.L0080127B:
// i_bgb_mus_btsh.c:848   case 6:
  BSR          .L00801275, R0

.L0080127C:
// i_bgb_mus_btsh.c:850   case 7:
  BSR          .L00801275, R0

.L0080127D:
// i_bgb_mus_btsh.c:853   default:
  MOV          .L00C021F5, RQ10
  ADD          RD23, 0, RD11
  BSR          printf, R1

.L00801275:
// i_bgb_mus_btsh.c:858   return(0);
  ADD          R0, 0, RD10

.L00C021F4:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

I_Quit:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// i_btesh4.c:290   {
  BSR          I_ShutdownGraphics, R1
// i_btesh4.c:292   exit(0);
  ADD          R0, 0, RD10
  BSR          exit, R1
// i_btesh4.c:293   __debugbreak();

I_Quit.debugbreak_L03F7:
  BRK          1015

.L00C02200:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

osfopen:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
// pdpc201/stdio.c:590   
  MOV.L        TU61F874B9/modeType, RD21
  BRNE.Q       1, RD21, .L0080031F
// pdpc201/stdio.c:591   
  ADD          R0, 0, RD8
  BSR          .L00800320, R0

.L0080031F:
  MOV.L        TU61F874B9/modeType, RD21
  BRNE.Q       4, RD21, .L00800321
// pdpc201/stdio.c:595   
  ADD          R0, 0, RD8
  BSR          .L00800322, R0

.L00800321:
  MOV.L        TU61F874B9/modeType, RD21
  ADD          R0, 2, R5
  CMPEQ.Q      RD21, R5, RQ9
  ADD          R0, 5, R5
  CMPEQ.Q      RD21, R5, RQ23
  OR           RQ9, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00800323
// pdpc201/stdio.c:599   
  ADD          R0, 1, RD8
  BSR          .L00800324, R0

.L00800323:
  MOV.L        TU61F874B9/modeType, RD21
  ADD          R0, 10, R5
  CMPEQ.Q      RD21, R5, RQ9
  ADD          R0, 7, R5
  CMPEQ.Q      RD21, R5, RQ23
  OR           RQ9, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00800325
// pdpc201/stdio.c:604   
  ADD          R0, 2, RD8
  BSR          .L00800326, R0

.L00800325:
// pdpc201/stdio.c:608   
  ADD          R0, 2, RD8
// pdpc201/stdio.c:613   
  ADD          R0, 1, RD21
  MOV.L        RD21, TU61F874B9/err
// pdpc201/stdio.c:614   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 2, RD21
  MOV.L        RD21, (RQ18, 0)
// pdpc201/stdio.c:616   
  MOV          .L00C02208, RQ10
  MOV.L        TU61F874B9/modeType, RD11
  BSR          tk_printf, R1
// pdpc201/stdio.c:617   
  BSR          .L00C02207, R0

.L00800326:

.L00800324:

.L00800322:

.L00800320:
// pdpc201/stdio.c:620   
  ADD          R0, 0, RD21
  MOV.L        RD21, (R2, 108)
// pdpc201/stdio.c:624   
  ADD          R2, 108, RQ18
  MOV.Q        TU61F874B9/fnm, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RQ18, 0, RQ12
  BSR          __open, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.Q        TU61F874B9/myfile, RQ21
  MOV.L        RQ9, (RQ21, 0)
// pdpc201/stdio.c:625   
  MOV.L        (R2, 108), RD21
  BREQ.L       R0, RD21, .L00800327
// pdpc201/stdio.c:626   
  ADD          R0, 1, RD21
  MOV.L        RD21, TU61F874B9/err
// pdpc201/stdio.c:628   
  MOV.Q        TU61F874B9/myfile, RQ21
  MOV.L        (RQ21, 0), RQ23
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ23, (RQ18, 0)

.L00800327:
// pdpc201/stdio.c:630   

.L00C02207:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_Start:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// st_stuff.c:1550   if (!st_stopped)
  MOV.L        TU7A00CB73/st_stopped, RD13
  BRNE.L       R0, RD13, .L00802C5C
// st_stuff.c:1551   ST_Stop();
  BSR          ST_Stop, R1

.L00802C5C:
// st_stuff.c:1553   ST_initData();
  BSR          ST_initData, R1
// st_stuff.c:1554   ST_createWidgets();
  BSR          ST_createWidgets, R1
// st_stuff.c:1555   st_stopped = false;
  MOV.L        RD0, TU7A00CB73/st_stopped

.L00C0220E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

setlocale:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -376, R2
  MOV.L        RD10, (R2, 124)
  ADD          RQ11, 0, RQ23
// pdpc201/locale.c:75   
  MOV.W        locale_id, RD22
  BRGE.L       R0, RD22, .L0080082B
// pdpc201/locale.c:76   
  MOV.W        RD0, locale_id

.L0080082B:
// pdpc201/locale.c:77   
  MOV.W        locale_id, RD22
  BRLT.L       5, RD22, .L0080082C
// pdpc201/locale.c:78   
  MOV.W        RD0, locale_id

.L0080082C:
// pdpc201/locale.c:80   
  BREQ.Q       R0, RQ23, .L0080082D
  MOV.B        (RQ23, 0), RQ8
  BRNE.L       R0, RQ8, .L0080082D

.L0080082E:
  ADD          RQ23, 0, RQ10
  MOV          .L00C00FE7, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L0080082D

.L0080082F:
// pdpc201/locale.c:81   

setlocale.debugbreak_L03FD:
  BRK          1021

.L0080082D:
// pdpc201/locale.c:83   
  BRNE.Q       RQ0, RQ23, .L00800830
// pdpc201/locale.c:86   
  MOV          locale_list, RQ22
  MOV.W        locale_id, RD21
  SHAD.L       RD21, 4, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C02219, R0
  BSR          .L00800831, R0

.L00800830:
  ADD          RQ23, 0, RQ10
  MOV          .L00C010E4, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00800832
  ADD          RQ23, 0, RQ10
  MOV          .L00C00FE7, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00800832
  BSR          .L00800833, R0

.L00800832:
// pdpc201/locale.c:90   
  ADD          R0, 0, RD22
// pdpc201/locale.c:92   
  MOV          locale_list, RQ21
  ADD          RQ21, 0, RQ13
  MOV.L        (RQ13, 8), RD12
  MOV.L        RD12, locale_flags
// pdpc201/locale.c:93   
  SHAD.L       RD22, 4, RQ13
  ADD          RQ21, RQ13, RQ13
  MOV.W        RD22, locale_id
  MOV.Q        (RQ13, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C02219, R0
  BSR          .L00800834, R0

.L00800833:
// pdpc201/locale.c:97   
  ADD          R0, 0, RD9
  MOV          locale_list, RQ22
  SHAD.L       RD9, 4, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.Q        (RQ21, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800835

.L00800836:
// pdpc201/locale.c:99   
  MOV          locale_list, RQ22
  SHAD.L       RD9, 4, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.Q        (RQ21, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          _stricmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00800837
// pdpc201/locale.c:101   
  SHAD.Q       RD9, 48, RD22
  SHAR.Q       RD22, 48, RD22
  MOV.W        RD22, locale_id
// pdpc201/locale.c:103   
  MOV          locale_list, RQ22
  SHAD.L       RD9, 4, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 8), RD13
  MOV.L        RD13, locale_flags
// pdpc201/locale.c:104   
  SHAD.L       RD9, 4, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.Q        (RQ21, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          .L00C02219, R0

.L00800837:
  ADDS.L       RD9, 1, RD9
  MOV          locale_list, RQ22
  SHAD.L       RD9, 4, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.Q        (RQ21, 0), RQ18
  BRNE.Q       R0, RQ18, .L00800836

.L00800835:
// pdpc201/locale.c:108   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02219, R0

.L00800834:

.L00800831:

.L00C02219:
  ADD          R2, 376, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

EV_StopPlat:
// p_plats.c:278   for (j = 0;j < MAXPLATS;j++)
  ADDS.L       RD0, 0, RD13

.L00801E50:
// p_plats.c:279   if (activeplats[j]
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  BREQ.Q       R0, RQ11, .L00801E53
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 52), RQ17
  BREQ.Q       3, RQ17, .L00801E53

.L00801E55:
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 64), RQ17
  MOV.W        (RQ10, 28), RQ16
  BRNE.Q       RQ16, RQ17, .L00801E53

.L00801E54:
// p_plats.c:282   {
  MOV          activeplats, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 52), RQ17
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        RQ17, (RQ11, 56)
// p_plats.c:284   (activeplats[j])->status = in_stasis;
  MOV.Q        (RQ12, RD13), RQ11
  ADD          R0, 3, RD15
  MOV.L        RD15, (RQ11, 52)
// p_plats.c:285   (activeplats[j])->thinker.function.acv = (actionf_v)NULL;
  ADD          R0, 0, RQ11
  MOV.Q        (RQ12, RD13), RQ14
  ADD          RQ14, 0, RQ31
  ADD          RQ31, 16, RQ30
  MOV.Q        RQ11, (RQ30, 0)

.L00801E53:
  ADDS.L       RD13, 1, RD13
  BRLT.L       30, RD13, .L00801E50

.L00801E52:

.L00C0221B:
  JSR          R1, 0, R0
  .balign 4

P_LoadSectors:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  MOV.L        RD10, (R2, 124)
// p_setup.c:270   lsz = W_LumpLength (lump);
  MOV.L        (R2, 124), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD20
// p_setup.c:271   if(lsz % sizeof(mapsector_t))
  ADD          RD20, 0, RQ21
  ADD          R0, 26, RD27
  MODS.L       RQ21, RD27, RQ21
  BREQ.L       R0, RQ21, .L00801EE1
// p_setup.c:272   __debugbreak();

P_LoadSectors.debugbreak_L0403:
  BRK          1027

.L00801EE1:
// p_setup.c:274   numsectors = lsz / sizeof(mapsector_t);
  ADD          RD20, 0, RD27
  ADD          R0, 26, RD26
  DIVS.L       RD27, RD26, RD27
// p_setup.c:275   sectors = Z_Malloc ((numsectors+4)*sizeof(sector_t),PU_LEVEL_SECT,0);	
  ADDS.L       RD27, 4, RQ21
  MOV.L        RD27, numsectors
  SHAD.L       RQ21, 7, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 56, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, sectors
// p_setup.c:276   memset (sectors, 0, numsectors*sizeof(sector_t));
  MOV.L        numsectors, RD27
  SHAD.L       RD27, 7, RQ21
  ADDS.L       RQ21, 0, RQ27
  MOV.Q        sectors, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// p_setup.c:277   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 124), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ25
// p_setup.c:279   ms = (mapsector_t *)data;
  ADD          RQ25, 0, RQ8
  MOV.Q        RQ25, (R2, 112)
// p_setup.c:280   ss = sectors;
  MOV.Q        sectors, RQ9
// p_setup.c:281   for (i=0 ; i<numsectors ; i++, ss++, ms++)
  ADD          R0, 0, RD22
  MOV.L        numsectors, RD24
  BRGE.L       RD24, RD22, .L00801EE4

.L00801EE2:
// p_setup.c:282   {
  MOV.W        (RQ8, 0), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ9, 0)
// p_setup.c:284   ss->ceilingheight = SHORT(ms->ceilingheight)<<FRACBITS;
  MOV.W        (RQ8, 2), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ9, 4)
// p_setup.c:285   ss->floorpic = R_FlatNumForName(ms->floorpic);
  ADD          RQ8, 4, RQ10
  BSR          R_FlatNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.W        RQ18, (RQ9, 8)
// p_setup.c:286   ss->ceilingpic = R_FlatNumForName(ms->ceilingpic);
  ADD          RQ8, 12, RQ10
  BSR          R_FlatNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.W        RQ18, (RQ9, 10)
// p_setup.c:287   ss->lightlevel = SHORT(ms->lightlevel);
  MOV.W        (RQ8, 20), RQ23
  MOV.W        RQ23, (RQ9, 12)
// p_setup.c:288   ss->special = SHORT(ms->special);
  MOV.W        (RQ8, 22), RQ18
  MOV.W        RQ18, (RQ9, 14)
// p_setup.c:289   ss->tag = SHORT(ms->tag);
  MOV.W        (RQ8, 24), RQ23
  MOV.W        RQ23, (RQ9, 16)
// p_setup.c:290   ss->thinglist = NULL;
  MOV.Q        RQ0, (RQ9, 96)
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, 1, RD22
  ADD          RQ9, 0, RQ27
  ADD          RQ9, 128, RQ9
  ADD          RQ8, 0, RQ27
  ADD          RQ8, 26, RQ8
  MOV.L        numsectors, RD26
  BRLT.L       RD26, RD22, .L00801EE2

.L00801EE4:
// p_setup.c:293   Z_ChangeTag (sectors, PU_LEVEL_SECT);  //BGB: Debug
  MOV.Q        sectors, RQ10
  ADD          R0, 56, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:295   Z_Free (data);
  MOV.Q        (R2, 112), RQ10
  BSR          Z_Free, R1

.L00C02226:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

P_AcsShootSpecialLine:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ8
  LDIZ         5120, RD21
  LDIZ         15360, RD20
// p_acspec.c:529   if (!thing->player)
  MOV.Q        (RQ22, 192), RQ23
  BREQ.Q       R0, RQ23, .L00C0222D
// p_acspec.c:534   switch(line->flags&0x3C00)
  MOV.W        (RQ8, 24), RQ9
  ADD          RQ9, 0, RQ18
  AND          RQ18, RD20, RQ18
  AND          RQ18, -1, RQ9
  BRGE.L       RD21, RQ9, .L00801905
  ADD          R0, 1024, RD27
  BREQ.Q       RD27, RQ18, .L008018FC
  LDIZ         2048, RD27
  BREQ.Q       RD27, RQ18, .L008018FD
  LDIZ         3072, RD27
  BREQ.Q       RD27, RQ18, .L008018FE
  LUI          1, RD27
  BREQ.Q       RD27, RQ18, .L008018FF
  BSR          .L00801904, R0

.L00801905:
  BREQ.Q       RD21, RQ18, .L00801900
  LDIZ         6144, RD27
  BREQ.Q       RD27, RQ18, .L00801901
  LDIZ         10240, RD27
  BREQ.Q       RD27, RQ18, .L00801902
  LDIZ         14336, RD27
  BREQ.Q       RD27, RQ18, .L00801903
  BSR          .L00801904, R0

.L008018FC:
// p_acspec.c:536   case 0x0400:
  BSR          .L008018FB, R0

.L008018FD:
// p_acspec.c:538   case 0x0800:
  BSR          .L00C0222D, R0

.L008018FE:
// p_acspec.c:540   case 0x0C00:
  BSR          .L008018FB, R0

.L008018FF:
// p_acspec.c:542   case 0x1000:
  BSR          .L00C0222D, R0

.L00801900:
// p_acspec.c:544   case 0x1400:
  BSR          .L00C0222D, R0

.L00801901:
// p_acspec.c:546   case 0x1800:
  BSR          .L00C0222D, R0

.L00801902:

.L00801903:
// p_acspec.c:549   case 0x3800:
  BSR          .L00C0222D, R0

.L00801904:
// p_acspec.c:551   default:

.L008018FB:
// p_acspec.c:555   spop = line->special;
  MOV.W        (RQ8, 26), RD27
  MOV.L        RD27, (R2, 92)
// p_acspec.c:557   printf("P_AcsShootSpecialLine: %d\n", line->acs_spec);	
  MOVU.B       (RQ8, 30), RQ9
  MOV          .L00C0222E, RQ10
  AND          RQ9, 255, RD11
  BSR          printf, R1
// p_acspec.c:559   P_AcsDoSpecialLine(thing, line);
  ADD          RQ22, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_AcsDoSpecialLine, R1

.L00C0222D:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

I_ResumeSong:
// i_bgb_mus_btsh.c:1101   i_mus_pause=0;
  ADDS.L       RD0, 0, RD13
  MOV.L        RD13, i_mus_pause

.L00C0222F:
  JSR          R1, 0, R0

WI_updateAnimatedBack:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
// wi_stuff.c:557   if (gamemode == commercial)
  MOV.L        gamemode, RD20
  ADD          R0, 2, RD27
  BREQ.Q       RD27, RD20, .L00C02235
// wi_stuff.c:559   if (gamemode == hexen)
  MOV.L        gamemode, RD20
  ADD          R0, 5, RD27
  BREQ.Q       RD27, RD20, .L00C02235
// wi_stuff.c:562   if (wbs->epsd > 2)
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ8
  ADD          R0, 2, RD20
  BRGT.L       RD20, RQ8, .L00C02235
// wi_stuff.c:565   for (i=0;i<NUMANIMS[wbs->epsd];i++)
  ADD          R0, 0, RD21
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ8
  MOV          TU7A00CB85/NUMANIMS, RQ20
  MOV.L        (RQ20, RQ8), RQ18
  BRGE.L       RQ18, RD21, .L008029B4

.L008029B2:
// wi_stuff.c:568   a = &wi_anims[wbs->epsd][i];
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ8
  MOV          TU7A00CB85/wi_anims, RQ20
  MOV.Q        (RQ20, RQ8), RQ27
  ADD          R0, 72, R5
  MUL.L        RD21, R5, RQ9
  ADD          RQ27, RQ9, RQ9
// wi_stuff.c:570   if (bcnt == a->nexttic)
  MOV.L        (RQ9, 56), RQ8
  MOV.L        TU7A00CB85/bcnt, RD20
  BRNE.Q       RQ8, RD20, .L008029B5
// wi_stuff.c:571   {
  MOV.L        (RQ9, 0), RQ18
  BREQ.L       R0, RQ18, .L008029B7
  BREQ.Q       1, RQ18, .L008029B8
  BREQ.Q       2, RQ18, .L008029B9
  BSR          .L008029B6, R0

.L008029B7:
// wi_stuff.c:574   case ANIM_ALWAYS:
  MOV.L        (RQ9, 64), RQ8
  ADDS.L       RQ8, 1, RQ18
  MOV.L        RQ18, (RQ9, 64)
  MOV.L        (RQ9, 8), RQ8
  BRLT.L       RQ8, RQ18, .L008029BA
// wi_stuff.c:575   if (++a->ctr >= a->nanims) a->ctr = 0;
  MOV.L        RD0, (RQ9, 64)

.L008029BA:
// wi_stuff.c:576   a->nexttic = bcnt + a->period;
  MOV.L        (RQ9, 4), RQ18
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, RQ18, RQ8
  MOV.L        RQ8, (RQ9, 56)
// wi_stuff.c:577   break;
  BSR          .L008029B6, R0

.L008029B8:
// wi_stuff.c:579   case ANIM_RANDOM:
  MOV.L        (RQ9, 64), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ9, 64)
// wi_stuff.c:581   if (a->ctr == a->nanims)
  MOV.L        (RQ9, 64), RQ18
  MOV.L        (RQ9, 8), RQ8
  BRNE.Q       RQ8, RQ18, .L008029BB
// wi_stuff.c:582   {
  ADD          R0, -1, RD20
  MOV.L        RD20, (RQ9, 64)
// wi_stuff.c:584   a->nexttic = bcnt+a->data2+(M_Random()%a->data1);
  MOV.L        (RQ9, 24), RQ18
  MOV.L        TU7A00CB85/bcnt, RD27
  ADDS.L       RD27, RQ18, RQ8
  BSR          M_Random, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ9, 20), RQ23
  MODS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ8, RQ22, RQ18
  MOV.L        RQ18, (RQ9, 56)
  BSR          .L008029BC, R0

.L008029BB:
// wi_stuff.c:586   else a->nexttic = bcnt + a->period;
  MOV.L        (RQ9, 4), RQ23
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, RQ23, RQ22
  MOV.L        RQ22, (RQ9, 56)

.L008029BC:
// wi_stuff.c:587   break;
  BSR          .L008029B6, R0

.L008029B9:
// wi_stuff.c:591   if (!(state == StatCount && i == 7)
  MOV.L        TU7A00CB85/state, RD20
  CMPEQ.Q      RD20, R0, RQ8
  ADD          R0, 7, R5
  CMPEQ.Q      RD21, R5, RQ18
  BTSTN.L      RQ18, RQ8, .L008029BD
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 12), RQ23
  MOV.L        (RQ9, 20), RQ22
  BRNE.Q       RQ22, RQ23, .L008029BD

.L008029BE:
// wi_stuff.c:593   {
  MOV.L        (RQ9, 64), RQ8
  ADDS.L       RQ8, 1, RQ18
  MOV.L        RQ18, (RQ9, 64)
  MOV.L        (RQ9, 64), RQ23
  MOV.L        (RQ9, 8), RQ22
  BRNE.Q       RQ22, RQ23, .L008029C0
// wi_stuff.c:595   if (a->ctr == a->nanims) a->ctr--;
  MOV.L        (RQ9, 64), RQ8
  ADDS.L       RQ8, -1, RQ18
  MOV.L        RQ18, (RQ9, 64)

.L008029C0:
// wi_stuff.c:596   a->nexttic = bcnt + a->period;
  MOV.L        (RQ9, 4), RQ23
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, RQ23, RQ22
  MOV.L        RQ22, (RQ9, 56)

.L008029BD:
// wi_stuff.c:597   }

.L008029B6:

.L008029B5:
  ADDS.L       RD21, 1, RD21
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ8
  MOV          TU7A00CB85/NUMANIMS, RQ20
  MOV.L        (RQ20, RQ8), RQ18
  BRLT.L       RQ18, RD21, .L008029B2

.L008029B4:

.L00C02235:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

W_GetNumForCache:
// w_wad.c:2141   for(i=0; i<numlumps; i++)
  ADD          R0, 0, RD13
  MOV.L        numlumps, RD12
  BRGE.L       RD12, RD13, .L0080298F

.L0080298D:
// w_wad.c:2142   {
  MOV.Q        lumpcache, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  BRNE.Q       RQ10, RQ11, .L00802990
// w_wad.c:2144   return(i);
  ADDS.L       RD13, 0, RD10
  JSR          R1, 0, R0

.L00802990:
  ADDS.L       RD13, 1, RD13
  MOV.L        numlumps, RD12
  BRLT.L       RD12, RD13, .L0080298D

.L0080298F:
// w_wad.c:2145   }
  ADD          R0, -1, RD10

.L00C02236:
  JSR          R1, 0, R0

M_QuickSave:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// m_menu.c:704   {
  MOV.L        usergame, RD9
  BRNE.L       R0, RD9, .L00801643
// m_menu.c:706   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// m_menu.c:708   return;
  BSR          .L00C0223C, R0

.L00801643:
// m_menu.c:711   if (gamestate != GS_LEVEL)
  MOV.L        gamestate, RD9
  BRNE.L       R0, RD9, .L00C0223C
// m_menu.c:714   if (quickSaveSlot < 0)
  MOV.L        quickSaveSlot, RD9
  BRGE.L       R0, RD9, .L00801644
// m_menu.c:715   {
  BSR          M_StartControlPanel, R1
// m_menu.c:717   M_ReadSaveStrings();
  BSR          M_ReadSaveStrings, R1
// m_menu.c:718   M_SetupNextMenu(&SaveDef);
  MOV          SaveDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1
// m_menu.c:719   quickSaveSlot = -2;	// means to pick a slot now
  ADD          R0, -2, RD9
  MOV.L        RD9, quickSaveSlot
// m_menu.c:720   return;
  BSR          .L00C0223C, R0

.L00801644:
// m_menu.c:721   }
  MOV          savegamestrings, RQ9
  MOV.L        quickSaveSlot, RD8
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ18
  ADD          RQ9, RQ18, RQ18
  MOV          tempstring, RQ10
  MOV          .L00C0223D, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sprintf, R1
// m_menu.c:723   M_StartMessage(tempstring,M_QuickSaveResponse,true);
  MOV          M_QuickSaveResponse, RQ18
  MOV          tempstring, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 1, RD12
  BSR          M_StartMessage, R1

.L00C0223C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_SetupAcsImage:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 116)
// p_acspec.c:636   if(p_acsvm_imgdat)
  MOV.Q        p_acsvm_imgdat, RQ13
  BREQ.Q       R0, RQ13, .L00801912
// p_acspec.c:637   {
  MOV.Q        p_acsvm_imgdat, RQ10
  BSR          Z_Free, R1
// p_acspec.c:639   p_acsvm_imgdat = NULL;
  MOV.Q        RQ0, p_acsvm_imgdat

.L00801912:
// p_acspec.c:642   if((data[0]!='A') || (data[1]!='C') ||
  MOVU.B       (RQ21, 0), RQ23
  ADD          R0, 65, RD13
  BRNE.Q       RD13, RQ23, .L00C02243
  MOVU.B       (RQ21, 1), RQ23
  ADD          R0, 67, RD13
  BRNE.Q       RD13, RQ23, .L00C02243

.L00801915:
  MOVU.B       (RQ21, 2), RQ23
  ADD          R0, 83, RD13
  BRNE.Q       RD13, RQ23, .L00C02243

.L00801914:
  MOVU.B       (RQ21, 3), RQ23
  BRNE.L       R0, RQ23, .L00C02243

.L00801913:
// p_acspec.c:648   p_acsvm_imgdat = data;
  MOV.Q        RQ21, p_acsvm_imgdat
// p_acspec.c:649   p_acsvm_imgsz = sz;
  MOV.L        (R2, 116), RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, p_acsvm_imgsz
// p_acspec.c:651   dofs=*(int *)(data+4);
  ADD          RQ21, 4, RQ8
  MOV.L        (RQ8, 0), RD12
// p_acspec.c:652   p_acsvm_scr_num=*(int *)(data+dofs);
  ADD          RQ21, RD12, RQ8
  MOV.L        RD12, (R2, 100)
  MOV.L        (RQ8, 0), RD11
// p_acspec.c:654   for(i=0; i<p_acsvm_scr_num; i++)
  ADD          R0, 0, RD18
  MOV.L        RD11, p_acsvm_scr_num
  BRGE.L       RD11, RD18, .L00801919

.L00801917:
// p_acspec.c:655   {
  MOV.L        (R2, 100), RD13
  ADD          RQ21, RD13, RQ8
  ADD          RQ8, 4, RQ22
  ADD          R0, 3, R5
  MULS.L       RD18, R5, RQ23
  MOV.L        (RQ22, RQ23), RQ9
  MOV          p_acsvm_scr_idn, RQ12
  MOV.L        RQ9, (RQ12, RD18)
// p_acspec.c:657   p_acsvm_scr_ofs[i]=((int *)(data+dofs+4))[i*3+1];
  ADD          RQ21, RD13, RQ8
  ADD          RQ8, 4, RQ22
  ADD          R0, 3, R5
  MULS.L       RD18, R5, RQ9
  SHAD.Q       RQ9, 2, R5
  ADD          RQ22, R5, R5
  MOV.L        (R5, 4), RQ9
  MOV          p_acsvm_scr_ofs, RQ12
  MOV.L        RQ9, (RQ12, RD18)
// p_acspec.c:658   p_acsvm_scr_arn[i]=((int *)(data+dofs+4))[i*3+2];
  ADD          RQ21, RD13, RQ8
  ADD          RQ8, 4, RQ22
  ADD          R0, 3, R5
  MULS.L       RD18, R5, RQ9
  SHAD.Q       RQ9, 2, R5
  ADD          RQ22, R5, R5
  MOV.L        (R5, 8), RQ9
  MOV          p_acsvm_scr_arn, RQ12
  MOV.L        RQ9, (RQ12, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.L        p_acsvm_scr_num, RD12
  BRLT.L       RD12, RD18, .L00801917

.L00801919:
// p_acspec.c:661   sofs = dofs+4+(p_acsvm_scr_num*12);
  MOV.L        (R2, 100), RD13
  ADDS.L       RD13, 4, RQ23
  MOV.L        p_acsvm_scr_num, RD12
  ADD          R0, 12, R5
  MULS.L       RD12, R5, RQ9
  ADDS.L       RQ23, RQ9, RD12
// p_acspec.c:662   p_acsvm_strs_num=*(int *)(data+sofs);
  ADD          RQ21, RD12, RQ8
  MOV.L        RD12, (R2, 96)
  MOV.L        (RQ8, 0), RD11
// p_acspec.c:664   for(i=0; i<p_acsvm_strs_num; i++)
  ADD          R0, 0, RD18
  MOV.L        RD11, p_acsvm_strs_num
  BRGE.L       RD11, RD18, .L0080191C

.L0080191A:
// p_acspec.c:665   {
  MOV.L        (R2, 96), RD13
  ADD          RQ21, RD13, RQ22
  ADD          RQ22, 4, RQ8
  MOV.L        (RQ8, RD18), RD20
// p_acspec.c:667   p_acsvm_strs_ofs[i]=j;
  MOV          p_acsvm_strs_ofs, RQ12
  MOV.L        RD20, (RQ12, RD18)
// p_acspec.c:669   if((j>0) && (j<sz))
  CMPGT.Q      RD20, R0, RQ9
  MOV.L        (R2, 116), RD12
  CMPGT.Q      RD12, RD20, RQ23
  BTST.L       RQ23, RQ9, .L0080191D
// p_acspec.c:670   {
  ADD          RQ21, RD20, RQ8
  ADD          RQ8, 0, RQ13
// p_acspec.c:672   p_acsvm_strs_ptr[i]=s;
  MOV          p_acsvm_strs_ptr, RQ12
  MOV.Q        RQ13, (RQ12, RD18)
  MOV.Q        RQ13, (R2, 104)
  BSR          .L0080191E, R0

.L0080191D:
// p_acspec.c:674   {
  MOV          p_acsvm_strs_ptr, RQ13
  MOV.Q        RQ0, (RQ13, RD18)

.L0080191E:
  ADDS.L       RD18, 1, RD18
  MOV.L        p_acsvm_strs_num, RD13
  BRLT.L       RD13, RD18, .L0080191A

.L0080191C:
// p_acspec.c:679   p_acsvm_newmap=1;
  ADD          R0, 1, RD13
  MOV.L        RD13, p_acsvm_newmap

.L00C02243:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

HU_Stop:
// hu_stuff.c:432   {
  ADDS.L       RD0, 0, RD13
  MOV.L        RD13, TU7A00CA82/headsupactive

.L00C02244:
  JSR          R1, 0, R0

AM_LevelInit:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// am_map.c:543   {
  MOV.L        RD0, TU7A00C41B/leveljuststarted
// am_map.c:546   f_x = f_y = 0;
  MOV.L        RD0, TU7A00C41B/f_y
  MOV.L        RD0, TU7A00C41B/f_x
// am_map.c:547   f_w = finit_width;
  MOV.L        TU7A00C41B/finit_width, RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, TU7A00C41B/f_w
// am_map.c:548   f_h = finit_height;
  MOV.L        TU7A00C41B/finit_height, RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, TU7A00C41B/f_h
// am_map.c:550   AM_clearMarks();
  BSR          AM_clearMarks, R1
// am_map.c:552   AM_findMinMaxBoundaries();
  BSR          AM_findMinMaxBoundaries, R1
// am_map.c:553   scale_mtof = FixedDiv(min_scale_mtof, (int) (0.7*FRACUNIT));
  MOV.L        TU7A00C41B/min_scale_mtof, RD10
  LDIZ         0x0000B333, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD18
// am_map.c:554   if (scale_mtof > max_scale_mtof)
  MOV.L        RD18, TU7A00C41B/scale_mtof
  MOV.L        TU7A00C41B/max_scale_mtof, RD9
  BRLE.L       RD9, RD18, .L008017AF
// am_map.c:555   scale_mtof = min_scale_mtof;
  MOV.L        TU7A00C41B/min_scale_mtof, RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, TU7A00C41B/scale_mtof

.L008017AF:
// am_map.c:556   scale_ftom = FixedDiv(FRACUNIT, scale_mtof);
  LUI          16, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_ftom

.L00C0224A:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

A_CheckReload:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ11, (R2, 64)
// p_pspr.c:371   {
  ADD          RQ18, 0, RQ10
  BSR          P_CheckAmmo, R1

.L00C02250:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

A_SpawnSound:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 95, RD9
// p_enemy.c:1964   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 95, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1966   A_SpawnFly(mo);
  ADD          RQ18, 0, RQ10
  BSR          A_SpawnFly, R1

.L00C02256:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_opradd_bigi:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -472, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.Q        RQ11, (R2, 80)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:261   
// tk_core/lva_tagopr.c:263   
  MOV.Q        (R2, 88), RQ10
  MOV.Q        (R2, 80), RQ11
  ADD          R2, 96, RQ12
  BSR          tkmm_bigint_add, R1
// tk_core/lva_tagopr.c:264   
  ADD          R2, 96, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C0225C:
  ADD          R2, 472, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

_msettag:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// pdpc201/stdlib.c:245   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  MOV.Q        _msettag_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C02262:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

I_InitTkGdi:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -312, R2
// i_btesh4.c:2043   {
  MOV.Q        i_dibinfo, RQ18
  BRNE.Q       R0, RQ18, .L00C02268
// i_btesh4.c:2048   i_dibinfo = malloc(sizeof(TKGDI_BITMAPINFOHEADER));
  ADD          R0, 40, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, i_dibinfo
// i_btesh4.c:2049   memset(i_dibinfo, 0, sizeof(TKGDI_BITMAPINFOHEADER));
  MOV.Q        i_dibinfo, RQ18
  MOV.Q        RQ0, (RQ18, 0)
  MOV.Q        RQ0, (RQ18, 8)
  MOV.Q        RQ0, (RQ18, 16)
  MOV.Q        RQ0, (RQ18, 24)
  MOV.Q        RQ0, (RQ18, 32)
// i_btesh4.c:2051   i_dibinfo->biSize=sizeof(TKGDI_BITMAPINFOHEADER);
  ADD          R0, 40, RD18
  MOV.Q        i_dibinfo, RQ9
  MOVU.L       RD18, (RQ9, 0)
// i_btesh4.c:2052   i_dibinfo->biWidth=320;
  ADD          R0, 320, RD8
  MOV.L        RD8, (RQ9, 4)
// i_btesh4.c:2053   i_dibinfo->biHeight=200;
  ADD          R0, 200, RD23
  MOV.L        RD23, (RQ9, 8)
// i_btesh4.c:2061   i_dibinfo->biBitCount=16;
  ADD          R0, 16, RD18
  MOVU.W       RD18, (RQ9, 14)
// i_btesh4.c:2065   i_hDc=tkgCreateDisplay(i_dibinfo);
  MOV.Q        i_dibinfo, RQ10
  BSR          tkgCreateDisplay, R1
  MOV.L        RQ10, i_hDc
// i_btesh4.c:2066   tkgSetWindowTitle(i_hDc, "Doom");
  MOV.L        i_hDc, RD10
  MOV          .L00C02269, RQ11
  BSR          tkgSetWindowTitle, R1
// i_btesh4.c:2077   i_dibinfo->biHeight=-200;
  ADD          R0, -200, RD9
  MOV.Q        i_dibinfo, RQ8
  MOV.L        RD9, (RQ8, 8)
// i_btesh4.c:2079   screen_fbuf=tkgTryMapFrameBuffer(i_hDc, i_dibinfo);
  MOV.L        i_hDc, RD10
  MOV.Q        i_dibinfo, RQ11
  BSR          tkgTryMapFrameBuffer, R1
  MOV.Q        RQ10, screen_fbuf

.L00C02268:
  ADD          R2, 312, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

D_DoomLoop:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R56, (R2, 32)
  MOV.Q        R57, (R2, 40)
  ADD          R2, -456, R2
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// d_main.c:460   printf("D_DoomLoop: A0\n");
  MOV          .L00C02270, RQ10
  BSR          printf, R1
// d_main.c:462   if (demorecording)
  MOV.L        demorecording, RD9
  BREQ.L       R0, RD9, .L00801397
// d_main.c:463   G_BeginRecording ();
  BSR          G_BeginRecording, R1

.L00801397:
// d_main.c:465   if (M_CheckParm ("-debugfile"))
  MOV          .L00C02271, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801398
// d_main.c:466   {
// d_main.c:468   sprintf (filename,"debug%i.txt",consoleplayer);
  ADD          R2, 112, RQ10
  MOV          .L00C02272, RQ11
  MOV.L        consoleplayer, RD12
  BSR          sprintf, R1
// d_main.c:469   printf ("debug output to: %s\n",filename);
  MOV          .L00C02273, RQ10
  ADD          R2, 112, RQ11
  BSR          printf, R1
// d_main.c:470   debugfile = fopen (filename,"w");
  ADD          R2, 112, RQ10
  MOV          .L00C02274, RQ11
  BSR          fopen, R1
  MOV.Q        RQ10, debugfile

.L00801398:
// d_main.c:473   printf("D_DoomLoop: A1\n");
  MOV          .L00C02275, RQ10
  BSR          printf, R1
// d_main.c:475   I_InitGraphics ();
  BSR          I_InitGraphics, R1
// d_main.c:477   d_snd_acctime+=75;
  ADD          R0, 0x4052C000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        d_snd_acctime, RQ57
  FADD         RQ57, RQ56, RQ57
  MOV.Q        RQ57, d_snd_acctime
// d_main.c:479   printf("D_DoomLoop: A2, d_snd_acctime=%f\n", d_snd_acctime);
  MOV          .L00C02276, RQ10
  MOV.Q        d_snd_acctime, RQ11
  BSR          printf, R1
// d_main.c:482   while (!gfxdrv_kill)
  BSR          .L0080139B, R0

.L00801399:
// d_main.c:485   d_main_curtime = I_GetTimeMs();
  BSR          I_GetTimeMs, R1
  ADDS.L       RQ10, 0, RD9
// d_main.c:486   dt = d_main_curtime - d_main_lasttime;
  MOV.L        d_main_lasttime, RD23
  SUBS.L       RD9, RD23, RD8
  MOV.L        RD8, (R2, 108)
// d_main.c:487   d_main_lasttime = d_main_curtime;
  ADD          RD9, 0, RD23
  MOV.L        RD23, d_main_lasttime
  MOV.L        RD9, d_main_curtime
// d_main.c:490   I_StartFrame ();				
  BSR          I_StartFrame, R1
// d_main.c:493   if (singletics)
  MOV.L        singletics, RD9
  BREQ.L       R0, RD9, .L0080139C
// d_main.c:494   {
  BSR          I_StartTic, R1
// d_main.c:496   D_ProcessEvents ();
  BSR          D_ProcessEvents, R1
// d_main.c:497   G_BuildTiccmd (&netcmds[consoleplayer][maketic%BACKUPTICS]);
  MOV          netcmds, RQ9
  MOV.L        consoleplayer, RD8
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ23
  ADD          RQ9, RQ23, RQ23
  MOV.L        maketic, RQ18
  ADD          R0, 12, RD9
  MODS.L       RQ18, RD9, RQ18
  LEA.Q        RQ23, RQ18, RQ10
  BSR          G_BuildTiccmd, R1
  MOV.L        advancedemo, RD8
  BREQ.L       R0, RD8, .L0080139D
// d_main.c:499   D_DoAdvanceDemo ();
  BSR          D_DoAdvanceDemo, R1

.L0080139D:
// d_main.c:500   M_Ticker ();
  BSR          M_Ticker, R1
// d_main.c:501   G_Ticker ();
  BSR          G_Ticker, R1
// d_main.c:502   gametic++;
  MOV.L        gametic, RD9
  ADDS.L       RD9, 1, RD9
  MOV.L        RD9, gametic
// d_main.c:503   maketic++;
  MOV.L        maketic, RD9
  ADDS.L       RD9, 1, RD9
  MOV.L        RD9, maketic
  BSR          .L0080139E, R0

.L0080139C:
// d_main.c:506   {
  BSR          TryRunTics, R1

.L0080139E:
// d_main.c:510   S_UpdateSounds (players[consoleplayer].mo);// move positional sounds
  MOV          players, RQ9
  MOV.L        consoleplayer, RD8
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ23
  ADD          RQ9, RQ23, RQ23
  MOV.Q        (RQ23, 0), RQ10
  BSR          S_UpdateSounds, R1
// d_main.c:513   D_Display ();
  BSR          D_Display, R1
// d_main.c:515   D_UpdateSound();
  BSR          D_UpdateSound, R1

.L0080139B:
  MOV.L        gfxdrv_kill, RD9
  BREQ.L       R0, RD9, .L00801399

.L0080139A:

.L00C0226F:
  ADD          R2, 456, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  MOV.Q        (R2, 32), R56
  MOV.Q        (R2, 40), R57
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

I_SubmitSound2:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -296, R2
  MOV.L        RD10, (R2, 108)
// i_sound_btsh.c:952   if(!i_snd_info)
  MOV.Q        i_snd_info, RQ27
  BRNE.Q       R0, RQ27, .L008011F7
// i_sound_btsh.c:953   {
  MOV          i_snd_t_info, RQ27
  MOV.Q        RQ27, i_snd_info
// i_sound_btsh.c:955   memset(i_snd_info, 0, sizeof(TKGDI_WAVEFORMATEX));
  MOV.Q        i_snd_info, RQ26
  MOV.L        RQ0, (RQ26, 0)
  MOV.L        RQ0, (RQ26, 4)
  MOV.L        RQ0, (RQ26, 8)
  MOV.L        RQ0, (RQ26, 12)
  MOV.L        RQ0, (RQ26, 16)
// i_sound_btsh.c:957   i_snd_info->wFormatTag=TKGDI_WAVE_FORMAT_PCM;
  ADD          R0, 1, RD26
  MOV.Q        i_snd_info, RQ25
  MOVU.W       RD26, (RQ25, 0)
// i_sound_btsh.c:958   i_snd_info->nChannels=2;
  ADD          R0, 2, RD24
  MOVU.W       RD24, (RQ25, 2)
// i_sound_btsh.c:959   i_snd_info->nSamplesPerSec=16000;
  LDIZ         16000, RD19
  MOVU.L       RD19, (RQ25, 4)
// i_sound_btsh.c:960   i_snd_info->nAvgBytesPerSec=16000*4;
  LDIZ         0x0000FA00, RD27
  MOVU.L       RD27, (RQ25, 8)
// i_sound_btsh.c:961   i_snd_info->nBlockAlign=4;
  ADD          R0, 4, RD27
  MOVU.W       RD27, (RQ25, 12)
// i_sound_btsh.c:962   i_snd_info->wBitsPerSample=16;
  ADD          R0, 16, RD26
  MOVU.W       RD26, (RQ25, 14)
// i_sound_btsh.c:963   i_snd_info->cbSize=sizeof(TKGDI_WAVEFORMATEX);
  ADD          R0, 20, RD24
  MOVU.W       RD24, (RQ25, 16)
// i_sound_btsh.c:965   hSndDev = tkgCreateAudioDevice(0, TKGDI_FCC_auds, i_snd_info);
  ADD          R0, 0, RD10
  ADD          R0, 0x73647561, RD11
  MOV.Q        i_snd_info, RQ12
  BSR          tkgCreateAudioDevice, R1
  MOV.L        RQ10, hSndDev
// i_sound_btsh.c:966   mixbuf2 = tkgGlobalAlloc(SAMPLECOUNT*2*2*sizeof(short));
  LDIZ         2048, RQ10
  BSR          tkgGlobalAlloc, R1
  MOV.Q        RQ10, I_SubmitSound2/mixbuf2!42

.L008011F7:
// i_sound_btsh.c:970   n=(SAMPLECOUNT*1486)>>10;
  ADD          R0, 371, RD8
// i_sound_btsh.c:972   iss_curms=TK_GetTimeMs();
  BSR          TK_GetTimeMs, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ23, 0, RD27
// i_sound_btsh.c:973   dt=iss_curms-iss_lastms;
  MOV.L        TU7A00C73C/iss_lastms, RD25
  SUBS.L       RD27, RD25, RD26
// i_sound_btsh.c:974   iss_lastms=iss_curms;
  ADD          RD27, 0, RD25
  MOV.L        RD25, TU7A00C73C/iss_lastms
  MOV.L        RD27, TU7A00C73C/iss_curms
// i_sound_btsh.c:975   ns=dt*16;
  SHAD.L       RD26, 4, RD22
  MOV.L        RD26, (R2, 92)
// i_sound_btsh.c:976   if(ns<0)ns=0;
  BRGE.L       R0, RD22, .L008011F8
  ADD          R0, 0, RD22

.L008011F8:
// i_sound_btsh.c:977   if(ns>n)ns=n;
  BRLE.L       RD8, RD22, .L008011F9
  ADD          RD8, 0, RD22

.L008011F9:
// i_sound_btsh.c:979   i_soundframe_ms = dt;
  MOV.L        (R2, 92), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, i_soundframe_ms
// i_sound_btsh.c:981   if(ns<=0)
  BRLE.L       R0, RD22, .L00C0227C
// i_sound_btsh.c:992   n=(SAMPLECOUNT*1486)>>10;
  ADD          R0, 371, RD8
// i_sound_btsh.c:993   mix1=mixbuffer; mix2=mixbuf2;
  MOV          mixbuffer, RQ20
  MOV.Q        I_SubmitSound2/mixbuf2!42, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 96)
// i_sound_btsh.c:994   k=0;
  ADD          RD0, 0, RD9
// i_sound_btsh.c:995   for(i=0; i<n; i++)
  ADD          R0, 0, RD18
  BRGE.L       RD8, RD18, .L008011FC

.L008011FA:
// i_sound_btsh.c:999   j=k>>12;
  SHAR         RD9, 12, RD21
// i_sound_btsh.c:1000   k+=2822;
  ADDS.L       RD9, 2822, RD9
// i_sound_btsh.c:1005   ((u32 *)mix2)[i]=((u32 *)mix1)[j];
  MOVU.L       (RQ20, RD21), RQ23
  MOV.Q        (R2, 96), RQ27
  MOVU.L       RQ23, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD8, RD18, .L008011FA

.L008011FC:
// i_sound_btsh.c:1009   if(ns>0)
  BRLE.L       R0, RD22, .L008011FD
  MOV.L        (R2, 108), RD27
  ADD          R0, 1, RD26
  BTST.L       RD26, RD27, .L008011FE
// i_sound_btsh.c:1015   tkgWriteSamples(hSndDev, mixbuf2, n, n);
  MOV.L        hSndDev, RD10
  MOV.Q        I_SubmitSound2/mixbuf2!42, RQ11
  ADDS.L       RD8, 0, RD12
  ADDS.L       RD8, 0, RD13
  BSR          tkgWriteSamples, R1
  BSR          .L008011FF, R0

.L008011FE:
// i_sound_btsh.c:1020   tkgWriteSamples(hSndDev, mixbuf2, ns, n);
  MOV.L        hSndDev, RD10
  MOV.Q        I_SubmitSound2/mixbuf2!42, RQ11
  ADD          RD22, 0, RD12
  ADDS.L       RD8, 0, RD13
  BSR          tkgWriteSamples, R1

.L008011FF:

.L008011FD:
// i_sound_btsh.c:1025   I_MusicSubmit();
  BSR          I_MusicSubmit, R1

.L00C0227C:
  ADD          R2, 296, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

P_Ticker:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// p_tick.c:139   if (paused)
  MOV.L        paused, RD8
  BRNE.L       R0, RD8, .L00C02282
// p_tick.c:143   if ( !netgame
  MOV.L        netgame, RD8
  BRNE.L       R0, RD8, .L00802310
  MOV.L        menuactive, RD8
  BREQ.L       R0, RD8, .L00802310

.L00802312:
  MOV.L        demoplayback, RD8
  BRNE.L       R0, RD8, .L00802310

.L00802311:
  MOV          players, RQ8
  MOV.L        consoleplayer, RD13
  ADD          R0, 320, R5
  MUL.L        RD13, R5, RQ12
  ADD          RQ8, RQ12, RQ12
  MOV.L        (RQ12, 20), RQ9
  BREQ.Q       1, RQ9, .L00802310
  BSR          .L00C02282, R0

.L00802310:
// p_tick.c:152   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802314:
// p_tick.c:153   {
  MOV          playeringame, RQ8
  MOV.L        (RQ8, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802317
// p_tick.c:155   P_PlayerThink (&players[i]);
  MOV          players, RQ8
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ10
  ADD          RQ8, RQ10, RQ10
  BSR          P_PlayerThink, R1

.L00802317:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802314

.L00802316:
// p_tick.c:158   P_RunThinkers ();
  BSR          P_RunThinkers, R1
// p_tick.c:159   P_UpdateSpecials ();
  BSR          P_UpdateSpecials, R1
// p_tick.c:160   P_RespawnSpecials ();
  BSR          P_RespawnSpecials, R1
// p_tick.c:165   leveltime++;	
  MOV.L        leveltime, RD8
  ADDS.L       RD8, 1, RD8
  MOV.L        RD8, leveltime

.L00C02282:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_AcsUseSpecialLine:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ22
  ADD          RQ11, 0, RQ8
  MOV.L        RD12, (R2, 92)
  LDIZ         5120, RD20
// p_acspec.c:575   switch(line->flags&0x3C00)
  MOV.W        (RQ8, 24), RQ9
  AND          RQ9, 15360, RQ18
  AND          RQ18, -1, RQ9
  BRGE.L       RD20, RQ9, .L00801911
  ADD          R0, 1024, RD13
  BREQ.Q       RD13, RQ18, .L00801907
  LDIZ         2048, RD13
  BREQ.Q       RD13, RQ18, .L00801908
  LDIZ         3072, RD13
  BREQ.Q       RD13, RQ18, .L00801909
  LUI          1, RD13
  BREQ.Q       RD13, RQ18, .L0080190A
  BSR          .L00801910, R0

.L00801911:
  BREQ.Q       RD20, RQ18, .L0080190B
  LDIZ         6144, RD13
  BREQ.Q       RD13, RQ18, .L0080190C
  LDIZ         9216, RD13
  BREQ.Q       RD13, RQ18, .L0080190D
  LDIZ         10240, RD13
  BREQ.Q       RD13, RQ18, .L0080190E
  LDIZ         14336, RD13
  BREQ.Q       RD13, RQ18, .L0080190F
  BSR          .L00801910, R0

.L00801907:
// p_acspec.c:577   case 0x0400:
  MOV.Q        (RQ22, 192), RQ23
  BREQ.Q       R0, RQ23, .L00C00ACF
// p_acspec.c:580   break;
  BSR          .L00801906, R0

.L00801908:
// p_acspec.c:581   case 0x0800:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L00801909:
// p_acspec.c:583   case 0x0C00:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L0080190A:
// p_acspec.c:585   case 0x1000:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L0080190B:
// p_acspec.c:587   case 0x1400:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L0080190C:
// p_acspec.c:589   case 0x1800:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L0080190D:
// p_acspec.c:591   case 0x2400:
  BSR          .L00801906, R0

.L0080190E:

.L0080190F:
// p_acspec.c:594   case 0x3800:
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L00801910:
// p_acspec.c:596   default:

.L00801906:
// p_acspec.c:600   printf("P_AcsUseSpecialLine: %d\n", line->acs_spec);	
  MOVU.B       (RQ8, 30), RQ9
  MOV          .L00C02289, RQ10
  AND          RQ9, 255, RD11
  BSR          printf, R1
// p_acspec.c:602   P_AcsDoSpecialLine(thing, line);
  ADD          RQ22, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_AcsDoSpecialLine, R1
// p_acspec.c:604   return false;
  ADD          R0, 0, RD10
  BSR          .L00C02288, R0

.L00C00ACF:
  ADD          R0, 0, RQ10

.L00C02288:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_AcsAllocRun:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R22, (R2, 24)
  ADD          R2, -328, R2
// p_acspec.c:690   for(i=0; i<p_acsvm_nrun; i++)
  ADD          RD0, 0, RD18
  MOV.L        p_acsvm_nrun, RD22
  BRGE.L       RD22, RD18, .L00801921

.L0080191F:
// p_acspec.c:691   {
  MOV          p_acsvm_run, RQ22
  ADD          R0, 167, R5
  MUL.L        RD18, R5, RQ13
  LEA.Q        RQ22, RQ13, RQ13
  MOV.W        (RQ13, 2), RQ8
  BRGE.L       R0, RQ8, .L00801922
// p_acspec.c:693   {
  MOV          p_acsvm_run, RQ22
  ADD          R0, 167, R5
  MUL.L        RD18, R5, RQ9
  LEA.Q        RQ22, RQ9, RQ9
// p_acspec.c:695   memset(tmp, 0, sizeof(p_acsrun_t));
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 1336, RQ12
  BSR          memset, R1
// p_acspec.c:696   return(tmp);
  ADD          RQ9, 0, RQ10
  BSR          .L00C0228F, R0

.L00801922:
  ADDS.L       RD18, 1, RD18
  MOV.L        p_acsvm_nrun, RD22
  BRLT.L       RD22, RD18, .L0080191F

.L00801921:
// p_acspec.c:700   if(p_acsvm_nrun<256)
  MOV.L        p_acsvm_nrun, RD22
  BRGE.L       256, RD22, .L00801923
// p_acspec.c:701   {
  MOV.L        p_acsvm_nrun, RD22
  ADD          RD22, 0, RD18
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, p_acsvm_nrun
// p_acspec.c:703   tmp=p_acsvm_run+i;
  MOV          p_acsvm_run, RQ22
  ADD          R0, 167, R5
  MUL.L        RD18, R5, RQ9
  LEA.Q        RQ22, RQ9, RQ9
// p_acspec.c:704   memset(tmp, 0, sizeof(p_acsrun_t));
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 1336, RQ12
  BSR          memset, R1
// p_acspec.c:705   return(tmp);
  ADD          RQ9, 0, RQ10
  BSR          .L00C0228F, R0

.L00801923:
// p_acspec.c:708   return(NULL);
  ADD          RQ0, 0, RQ10

.L00C0228F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_Drawer:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 76)
  MOV.L        RD11, (R2, 72)
// st_stuff.c:1156   if(st_diddraweven == 3)
  MOVU.B       st_diddraweven, RD13
  BRNE.Q       3, RD13, .L00802C24
// st_stuff.c:1157   st_diddraweven = 0;
  MOV.B        RD0, st_diddraweven

.L00802C24:
// st_stuff.c:1159   st_statusbaron = (!fullscreen) || automapactive;
  MOV.L        (R2, 76), RD13
  BREQ.L       R0, RD13, .L00802C25
  MOV.L        automapactive, RD13
  BRNE.L       R0, RD13, .L00802C25
  ADD          RD0, 0, RQ18
  BSR          .L00802C26, R0

.L00802C25:
  ADD          R0, 1, RQ18

.L00802C26:
  MOV.L        RQ18, TU7A00CB73/st_statusbaron
// st_stuff.c:1160   st_firsttime = st_firsttime || refresh;
  MOV.L        TU7A00CB73/st_firsttime, RD13
  BRNE.L       R0, RD13, .L00802C29
  MOV.L        (R2, 72), RD13
  BRNE.L       R0, RD13, .L00802C29
  ADD          RD0, 0, RQ18
  BSR          .L00802C2A, R0

.L00802C29:
  ADD          R0, 1, RQ18

.L00802C2A:
  MOV.L        RQ18, TU7A00CB73/st_firsttime
// st_stuff.c:1163   ST_doPaletteStuff();
  BSR          ST_doPaletteStuff, R1
// st_stuff.c:1166   if(st_didsbar>0)
  MOVU.B       st_didsbar, RD13
  BRLE.L       R0, RD13, .L00802C2D
// st_stuff.c:1167   st_didsbar--;
  MOVU.B       st_didsbar, RD13
  ADDS.L       RD13, -1, RD13
  ADDU.L       RD13, R0, RD13
  AND          RD13, 255, RD13
  MOV.B        RD13, st_didsbar

.L00802C2D:
// st_stuff.c:1171   if (st_firsttime || st_firsttime_last)
  MOV.L        TU7A00CB73/st_firsttime, RD13
  BRNE.L       R0, RD13, .L00802C2F
  MOVU.B       st_firsttime_last, RD13
  BRNE.L       R0, RD13, .L00802C2F
  BSR          .L00802C2E, R0

.L00802C2F:
// st_stuff.c:1172   {
  BSR          ST_doRefresh, R1
// st_stuff.c:1174   st_didsbar = 8;
  ADD          R0, 8, RD13
  MOV.B        RD13, st_didsbar
  BSR          .L00802C31, R0

.L00802C2E:
// st_stuff.c:1177   else ST_diffDraw();
  BSR          ST_diffDraw, R1

.L00802C31:

.L00C02295:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tk_con_disable:
// tk_core/tk_puts.c:99   

.L00C02296:
  JSR          R1, 0, R0

M_QuickLoadResponse:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD18
  ADD          R0, 121, RD9
// m_menu.c:732   {
  BRNE.Q       121, RD18, .L00801645
// m_menu.c:734   {
  MOV.L        quickSaveSlot, RD10
  BSR          M_LoadSelect, R1
// m_menu.c:736   S_StartSound(NULL,sfx_swtchx);
  ADD          RQ0, 0, RQ10
  ADD          R0, 24, RD11
  BSR          S_StartSound, R1

.L00801645:

.L00C0229C:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_AcsRun_ActivatorSound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C022A3, RQ18
// p_acspec.c:1081   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C022A2:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

fopen2:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// pdpc201/stdio.c:340   
  MOV.Q        TU61F874B9/myfile, RQ18
  BRNE.Q       R0, RQ18, .L008002DF
// pdpc201/stdio.c:342   

fopen2.debugbreak_L0409:
  BRK          1033

.L008002DF:
// pdpc201/stdio.c:346   
  BSR          checkMode, R1
// pdpc201/stdio.c:347   
  MOV.L        TU61F874B9/err, RD18
  BRNE.L       R0, RD18, .L008002E0
// pdpc201/stdio.c:348   
  MOV.Q        TU61F874B9/myfile, RQ18
  ADD          RQ18, 104, RQ9
  ADD          RQ9, 0, RQ10
  MOV.Q        TU61F874B9/modus, RQ11
  BSR          strcpy, R1
// pdpc201/stdio.c:350   
  BSR          osfopen, R1
  MOV.L        TU61F874B9/err, RD18
  BRNE.L       R0, RD18, .L008002E1
// pdpc201/stdio.c:352   
  MOV          __userFiles, RQ18
  MOV.L        TU61F874B9/spareSpot, RD9
  MOV.Q        TU61F874B9/myfile, RQ8
  MOV.Q        RQ8, (RQ18, RD9)
// pdpc201/stdio.c:354   
  MOV.L        RD9, (RQ8, 12)
// pdpc201/stdio.c:355   
  BSR          fopen3, R1

.L008002E1:

.L008002E0:
// pdpc201/stdio.c:363   

.L00C022AE:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

Z_FreeTags:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
// z_zone.c:407   for (block = mainzone->blocklist.next ;
  MOV.Q        mainzone, RQ13
  ADD          RQ13, 8, RQ12
  MOV.Q        (RQ12, 32), RQ18
  ADD          RQ13, 8, RQ9
  BREQ.Q       RQ9, RQ18, .L00802DAF

.L00802DAD:
// z_zone.c:412   next = block->next;
  MOV.Q        (RQ18, 32), RQ23
// z_zone.c:415   if (!block->user)
  MOV.Q        (RQ18, 16), RQ9
  BREQ.Q       R0, RQ9, .L00802DAE
// z_zone.c:418   if (block->tag >= lowtag && block->tag <= hightag)
  MOV.L        (RQ18, 8), RQ8
  MOV.L        (R2, 92), RD13
  BRLT.L       RD13, RQ8, .L00802DB0
  MOV.L        (RQ18, 8), RQ8
  MOV.L        (R2, 88), RD13
  BRGT.L       RD13, RQ8, .L00802DB0

.L00802DB1:
// z_zone.c:419   Z_Free ( (byte *)block+sizeof(memblock_t));
  ADD          RQ18, 48, RQ9
  ADD          RQ9, 0, RQ10
  BSR          Z_Free, R1

.L00802DB0:

.L00802DAE:
  ADD          RQ23, 0, RQ18
  MOV.Q        mainzone, RQ13
  ADD          RQ13, 8, RQ9
  BRNE.Q       RQ9, RQ18, .L00802DAD

.L00802DAF:

.L00C022B5:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

A_PlayerScream:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
  ADD          R0, 57, RD23
// p_enemy.c:2030   int		sound = sfx_pldeth;
  ADD          RD23, 0, RD18
// p_enemy.c:2032   if ( (gamemode == commercial)
  MOV.L        gamemode, RD13
  BRNE.Q       2, RD13, .L00801BCE
  MOV.L        (RQ8, 164), RQ9
  BRGE.L       -50, RQ9, .L00801BCE

.L00801BCF:
// p_enemy.c:2037   sound = sfx_pdiehi;
  ADD          R0, 58, RD18

.L00801BCE:
// p_enemy.c:2040   S_StartSound (mo, sound);
  ADD          RQ8, 0, RQ10
  ADD          RD18, 0, RD11
  BSR          S_StartSound, R1

.L00C022BB:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

G_RecordDemo:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 88)
// g_game.c:1556   usergame = false;
  MOV.L        RD0, usergame
// g_game.c:1557   strcpy (demoname, name);
  MOV          demoname, RQ10
  MOV.Q        (R2, 88), RQ11
  BSR          strcpy, R1
// g_game.c:1558   strcat (demoname, ".lmp");
  MOV          demoname, RQ10
  MOV          .L00C022C2, RQ11
  BSR          strcat, R1
// g_game.c:1559   maxsize = 0x20000;
  LUI          32, RD8
// g_game.c:1560   i = M_CheckParm ("-maxdemo");
  MOV          .L00C022C3, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RD9
// g_game.c:1561   if (i && i<myargc-1)
  BREQ.L       R0, RD9, .L00801616
  MOV.L        myargc, RD22
  ADDS.L       RD22, -1, RQ18
  BRGE.L       RQ18, RD9, .L00801616

.L00801617:
// g_game.c:1562   maxsize = atoi(myargv[i+1])*1024;
  ADDS.L       RD9, 1, RQ18
  MOV.Q        myargv, RQ22
  MOV.Q        (RQ22, RQ18), RQ23
  ADD          RQ23, 0, RQ10
  BSR          atoi, R1
  ADD          RQ10, 0, RQ18
  SHAD.L       RQ18, 10, RD8

.L00801616:
// g_game.c:1563   demobuffer = Z_Malloc (maxsize,PU_STATIC,NULL);
  ADDS.L       RD8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ22
// g_game.c:1564   demoend = demobuffer + maxsize;
  ADD          RQ22, RD8, RQ21
  MOV.Q        RQ21, demoend
  MOV.Q        RQ22, demobuffer
// g_game.c:1566   demorecording = true;
  ADD          R0, 1, RD22
  MOV.L        RD22, demorecording

.L00C022C1:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_SetTag:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ22
  ADD          RD11, 0, RD21
// tk_core/tk_mmpage.c:1101   
  BRNE.Q       R0, RQ22, .L008009A5
// tk_core/tk_mmpage.c:1102   
  ADD          R0, -1, RD10
  BSR          .L00C022C9, R0

.L008009A5:
// tk_core/tk_mmpage.c:1104   
  ADD          RQ22, 0, RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmpage.c:1105   
  BRNE.Q       R0, RQ9, .L008009A6
// tk_core/tk_mmpage.c:1106   
  ADD          R0, -1, RD10
  BSR          .L00C022C9, R0

.L008009A6:
// tk_core/tk_mmpage.c:1108   
  MOVU.B       (RQ9, 4), RQ18
  ADD          R0, 8, RD20
  BTST.L       RD20, RQ18, .L008009A7
// tk_core/tk_mmpage.c:1109   
  ADD          RQ9, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          TKMM_MMCell_GetLnkObjCellHeadPtr, R1
  ADD          RQ10, 0, RQ23
// tk_core/tk_mmpage.c:1111   
  MOV.Q        (RQ23, 0), RQ8
// tk_core/tk_mmpage.c:1112   
  AND          RQ8, 0xFFFFFFFFFFFF0000, RQ8
// tk_core/tk_mmpage.c:1113   
  ADD          RD21, 0, RQ18
  AND          RQ18, 0x0000FFFF, RQ18
  ADDS.L       RQ18, 0, RQ20
  OR           RQ8, RQ20, RQ8
// tk_core/tk_mmpage.c:1114   
  MOV.Q        RQ8, (RQ23, 0)
// tk_core/tk_mmpage.c:1115   
  AND          RD21, 0x0000FFFF, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C022C9, R0

.L008009A7:
// tk_core/tk_mmpage.c:1118   
  MOVU.W       RD21, (RQ9, 0)
// tk_core/tk_mmpage.c:1119   
  MOVU.W       (RQ9, 0), RQ18
  ADD          RQ18, 0, RD10

.L00C022C9:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

G_WriteDemoTiccmd:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
// g_game.c:1528   {
  MOV          gamekeydown, RQ13
  MOV.L        (RQ13, 452), RQ18
  BREQ.L       R0, RQ18, .L00801614
// g_game.c:1530   G_CheckDemoStatus ();
  BSR          G_CheckDemoStatus, R1

.L00801614:
// g_game.c:1531   *demo_p++ = cmd->forwardmove;
  MOV.B        (RQ8, 0), RQ18
  MOV.Q        demo_p, RQ13
  ADD          RQ13, 0, RQ9
  ADD          RQ13, 1, RQ13
  MOVU.B       RQ18, (RQ9, 0)
// g_game.c:1532   *demo_p++ = cmd->sidemove;
  MOV.B        (RQ8, 1), RQ18
  ADD          RQ13, 0, RQ9
  ADD          RQ13, 1, RQ13
  MOVU.B       RQ18, (RQ9, 0)
// g_game.c:1533   *demo_p++ = (cmd->angleturn+128)>>8;
  MOV.W        (RQ8, 2), RQ18
  ADDS.L       RQ18, 128, RQ23
  SHAR         RQ23, 8, RQ18
  ADD          RQ13, 0, RQ9
  ADD          RQ13, 1, RQ13
  MOVU.B       RQ18, (RQ9, 0)
// g_game.c:1534   *demo_p++ = cmd->buttons;
  MOVU.B       (RQ8, 7), RQ23
  ADD          RQ13, 0, RQ9
  ADD          RQ13, 1, RQ13
  MOVU.B       RQ23, (RQ9, 0)
// g_game.c:1535   demo_p -= 4;
  ADD          RQ13, -4, RQ13
// g_game.c:1536   if (demo_p > demoend - 16)
  MOV.Q        demoend, RQ12
  ADD          RQ12, -16, RQ9
  MOV.Q        RQ13, demo_p
  BRLE.Q       RQ9, RQ13, .L00801615
// g_game.c:1539   G_CheckDemoStatus ();
  BSR          G_CheckDemoStatus, R1
// g_game.c:1540   return;
  BSR          .L00C022CF, R0

.L00801615:
// g_game.c:1543   G_ReadDemoTiccmd (cmd);			// make SURE it is exactly the same
  ADD          RQ8, 0, RQ10
  BSR          G_ReadDemoTiccmd, R1

.L00C022CF:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

M_FinishReadThis:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1086   {
  ADD          RD0, 0, RD9
// m_menu.c:1088   M_SetupNextMenu(&MainDef);
  MOV          MainDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C022D5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

vprintf:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -1648, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// pdpc201/stdio.c:247   
// pdpc201/stdio.c:252   
  ADD          R2, 128, RQ10
  MOV.Q        (R2, 120), RQ11
  MOV.Q        (R2, 112), RQ12
  BSR          vsprintf, R1
  ADD          RQ10, 0, RD18
// pdpc201/stdio.c:254   
  ADD          R2, 128, RQ10
  BSR          tk_puts, R1
// pdpc201/stdio.c:256   
  ADD          RD18, 0, RD10

.L00C022DB:
  ADD          R2, 1648, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_StartScreen:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 76)
  MOV.L        RD11, (R2, 72)
  MOV.L        RD12, (R2, 68)
  MOV.L        RD13, (R2, 64)
// f_wipe.c:244   {
  MOV          screens, RQ18
  MOV.Q        (RQ18, 16), RQ9
  MOV.Q        RQ9, TU7A00C589/wipe_scr_start
// f_wipe.c:246   I_ReadScreen(wipe_scr_start);
  MOV.Q        TU7A00C589/wipe_scr_start, RQ10
  BSR          I_ReadScreen, R1
// f_wipe.c:247   return 0;
  ADD          R0, 0, RD10

.L00C022E1:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

__connect:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -416, R2
  MOV.L        RD10, (R2, 156)
  MOV.Q        RQ11, (R2, 144)
  MOV.L        RD12, (R2, 140)
  MOV.L        RD13, (R2, 136)
// pdpc201/btshx_supa.c:551   
  MOV          btshx_tk_handles, RQ23
  MOV.L        (R2, 156), RD22
  MOV.Q        (RQ23, RD22), RQ9
// pdpc201/btshx_supa.c:552   
  ADD          R0, -1, RD23
  MOV.L        RD23, (R2, 132)
// pdpc201/btshx_supa.c:553   
  ADD          R2, 132, RQ8
  ADD          RQ9, 0, RQ10
  LDIZ         16392, RD11
  ADD          RQ8, 0, RQ12
  ADD          R0, 4, RD13
  ADD          R0, 0, RD14
  MOV.Q        (R2, 144), RQ15
  MOV.L        (R2, 140), RD16
  BSR          tk_frecv, R1
  ADD          RQ10, 0, RD18
// pdpc201/btshx_supa.c:554   
  BRGE.L       R0, RD18, .L00800FB5
// pdpc201/btshx_supa.c:555   
  ADD          R0, -1, RD10
  BSR          .L00C022E7, R0

.L00800FB5:
// pdpc201/btshx_supa.c:556   
  MOV.L        (R2, 132), RD10

.L00C022E7:
  ADD          R2, 416, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_Strdup:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 99, RD8
// tk_core/lva_strdup.c:215   
  ADD          RQ9, 0, RQ10
  ADD          R0, 99, RD11
  BSR          TKMM_LVA_StrdupPfx, R1

.L00C022ED:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

TkClGetProcAddressSv:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 88)
// pdpc201/bt_libcgpa.c:113   
  ADD          RD0, 0, RD18

.L0080112B:
// pdpc201/bt_libcgpa.c:114   
  MOV          tkclgpa_symbols, RQ13
  SHAD.L       RD18, 4, RQ23
  ADD          RQ13, RQ23, RQ23
// pdpc201/bt_libcgpa.c:116   
  MOV.Q        (RQ23, 0), RQ9
// pdpc201/bt_libcgpa.c:117   
  BREQ.Q       R0, RQ9, .L0080112C
// pdpc201/bt_libcgpa.c:118   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 88), RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L0080112D
// pdpc201/bt_libcgpa.c:119   
  MOV.Q        (RQ23, 8), RQ22
  ADD          RQ22, 0, RQ10
  BSR          .L00C022F3, R0

.L0080112D:
  ADDS.L       RD18, 1, RD18
  BSR          .L0080112B, R0

.L0080112C:
// pdpc201/bt_libcgpa.c:120   
  ADD          RQ0, 0, RQ10

.L00C022F3:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

D_UpdateSound:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
// d_main.c:375   if(i_sound_init<=0)
  MOV.L        i_sound_init, RD21
  BRLE.L       R0, RD21, .L00C022FE
// d_main.c:378   d_snd_curtime = I_GetTimeMs();
  BSR          I_GetTimeMs, R1
  ADD          RQ10, 0, RD21
// d_main.c:379   dt = d_snd_curtime - d_snd_lasttime;
  MOV.L        d_snd_lasttime, RD20
  SUBS.L       RD21, RD20, RD9
// d_main.c:380   d_snd_lasttime = d_snd_curtime;
  ADD          RD21, 0, RD20
  MOV.L        RD20, d_snd_lasttime
  MOV.L        RD21, d_snd_curtime
// d_main.c:382   if((dt<0) || (dt>1000))
  CMPLT.Q      RD9, R0, RQ8
  ADD          R0, 1000, R5
  CMPGT.Q      RD9, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BRNE.L       R0, RQ22, .L00C022FE
// d_main.c:386   d_snd_acctime+=dt;
  FLDCI        RD9, RQ20
  MOV.Q        d_snd_acctime, RQ21
  FADD         RQ21, RQ20, RQ21
// d_main.c:392   if(d_snd_acctime>2040.0)
  MOV.Q        RQ21, d_snd_acctime
  ADD          R0, 0x409FE000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ46
  FCMP/GT      RQ21, RQ46, RQ6
  BREQ.Q       RQ6, R0, .L00801391
// d_main.c:398   printf("D_UpdateSound: d_snd_acctime=%f dt=%d\n",
  MOV          .L00C022FF, RQ10
  MOV.Q        d_snd_acctime, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          printf, R1
// d_main.c:400   d_snd_acctime=0;
  MOV.Q        RQ0, d_snd_acctime

.L00801391:
// d_main.c:404   if(d_snd_acctime<-250.0)
  MOV.Q        d_snd_acctime, RQ20
  ADD          R0, 0xFFFFFFFFC06F4000, RQ21
  LDSH32       RQ21, 0, RQ21
  FCMP/GT      RQ21, RQ20, RQ6
  BREQ.Q       RQ6, R0, .L00801392
// d_main.c:405   {
  MOV          .L00C022FF, RQ10
  MOV.Q        d_snd_acctime, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          printf, R1
// d_main.c:408   d_snd_acctime=0;
  MOV.Q        RQ0, d_snd_acctime

.L00801392:
// d_main.c:416   {
  ADD          R0, 90, RD18
// d_main.c:418   while(d_snd_acctime>0)
  BSR          .L00801395, R0

.L00801393:
// d_main.c:419   {
  ADDS.L       RD18, -1, RD18
// d_main.c:421   if(n<0)
  BRGE.L       R0, RD18, .L00801396
// d_main.c:422   { __debugbreak(); }

D_UpdateSound.debugbreak_L040F:
  BRK          1039

.L00801396:
// d_main.c:424   I_UpdateSound();
  BSR          I_UpdateSound, R1
// d_main.c:425   I_SubmitSound2(1);
  ADD          R0, 1, RD10
  BSR          I_SubmitSound2, R1
// d_main.c:427   d_snd_acctime-=23.22;
  ADD          R0, 0x40373851, RQ20
  LDSH32       RQ20, 0x00000000EB851EB8, RQ20
  MOV.Q        d_snd_acctime, RQ21
  FSUB         RQ21, RQ20, RQ21
  MOV.Q        RQ21, d_snd_acctime

.L00801395:
  MOV.Q        d_snd_acctime, RQ20
  FCMP/GT      RQ20, RQ0, RQ6
  BRNE.Q       RQ6, R0, .L00801393

.L00801394:

.L00C022FE:
  ADD          R2, 384, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

_mgetbase:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdlib.c:235   
  ADD          RQ9, 0, RQ10
  MOV.Q        _mgetbase_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C02306:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

A_PainAttack:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:1546   {
  MOV.Q        (RQ18, 176), RQ9
  BREQ.Q       R0, RQ9, .L00C0230C
// p_enemy.c:1550   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1551   A_PainShootSkull (actor, actor->angle);
  MOVU.L       (RQ18, 56), RQ8
  ADD          RQ18, 0, RQ10
  ADDU.L       RQ8, R0, RD11
  BSR          A_PainShootSkull, R1

.L00C0230C:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

STlib_initPercent:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  ADDS.L       RD11, 0, RD8
  ADD          RD12, 0, RD23
  ADD          RQ13, 0, RQ22
  ADD          RQ14, 0, RQ21
  ADD          RQ15, 0, RQ20
  ADD          RQ16, 0, RQ26
  ADD          R0, 3, RD27
// st_lib.c:177   {
  ADD          RQ9, 0, RQ18
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD23, 0, RD12
  ADD          RQ22, 0, RQ13
  ADD          RQ21, 0, RQ14
  ADD          RQ20, 0, RQ15
  ADD          R0, 3, RD16
  BSR          STlib_initNum, R1
// st_lib.c:179   p->p = percent;
  MOV.Q        RQ26, (RQ9, 48)

.L00C02312:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

tk_sysc_opendir:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R20, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -952, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  ADD          RQ12, 0, RQ22
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
  ADD          R2, 656, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_vf_sysc.c:122   
// tk_vf_sysc.c:124   
// tk_vf_sysc.c:131   
  ADD          R2, 128, RQ10
  ADD          RQ22, 0, RQ11
  BSR          strcpy, R1
// tk_vf_sysc.c:133   
  MOV          .L00C02319, RQ10
  ADD          RQ22, 0, RQ11
  ADD          R2, 128, RQ12
  BSR          tk_dbg_printf, R1
// tk_vf_sysc.c:135   
  ADD          R0, 0, RQ20
  MOV.Q        RQ20, (R2, 80)
// tk_vf_sysc.c:137   
  ADD          R2, 656, RQ20
  ADD          RQ20, 0, RQ27
  ADD          R2, 128, RQ26
  MOV.Q        RQ26, (RQ27, 0)
// tk_vf_sysc.c:138   
  ADD          R2, 80, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4129, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ20, 0, RQ13
  BSR          tk_syscall, R1
  ADDS.L       RQ10, 0, RD8
// tk_vf_sysc.c:139   
  BRGT.L       R0, RD8, .L00800B32
// tk_vf_sysc.c:140   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02318, R0

.L00800B32:
// tk_vf_sysc.c:142   
  ADD          R0, 544, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ23
// tk_vf_sysc.c:143   
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 544, RQ12
  BSR          memset, R1
// tk_vf_sysc.c:145   
  BSR          tk_alloc_dir, R1
  ADD          RQ10, 0, RQ18
// tk_vf_sysc.c:146   
  MOV          tk_vfile_sysc_vt, RQ9
  MOV.Q        RQ9, (RQ18, 0)
// tk_vf_sysc.c:147   
  MOV.L        RD8, (RQ18, 64)
// tk_vf_sysc.c:148   
  MOV.Q        RQ23, (RQ18, 24)
// tk_vf_sysc.c:150   
  ADD          RQ18, 0, RQ10

.L00C02318:
  ADD          R2, 952, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_FindMObjForTid:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 92)
// p_telept.c:68   thinker = thinkercap.next;
  MOV          thinkercap, RQ13
  MOV.Q        (RQ13, 8), RQ18
// p_telept.c:69   for (thinker = thinkercap.next;
  MOV.Q        (RQ13, 8), RQ18
  ADD          RQ13, 0, RQ23
  BREQ.Q       RQ23, RQ18, .L008022E8

.L008022E6:
// p_telept.c:74   if (!EV_CheckThinkerIsMObjP(thinker))
  ADD          RQ18, 0, RQ10
  BSR          EV_CheckThinkerIsMObjP, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008022E7
// p_telept.c:77   m = (mobj_t *)thinker;
  ADD          RQ18, 0, RQ8
// p_telept.c:78   if (m->spawnpoint.tid == tid)
  ADD          RQ8, 204, RQ13
  MOV.W        (RQ13, 0), RQ9
  MOV.L        (R2, 92), RD12
  BRNE.Q       RD12, RQ9, .L008022E9
// p_telept.c:79   return(m);
  ADD          RQ8, 0, RQ10
  BSR          .L00C0231F, R0

.L008022E9:

.L008022E7:
  MOV.Q        (RQ18, 8), RQ18
  MOV          thinkercap, RQ23
  BRNE.Q       RQ23, RQ18, .L008022E6

.L008022E8:
// p_telept.c:80   }
  ADD          RQ0, 0, RQ10

.L00C0231F:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

tkgCreateDisplay:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 32)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 104)
  MOV          .L00C02326, RQ21
// tk_gdi/tkg_display.c:281   
  ADD          RQ21, 0, RQ10
  BSR          tk_printf, R1
// tk_gdi/tkg_display.c:282   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:284   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ10
  MOV.Q        (R2, 104), RQ11
  BSR          TKGDI_CopyBitmapInfo, R1
// tk_gdi/tkg_display.c:287   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 40), RQ8
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0x61657263, RD12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C02325:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.Q        (R2, 32), R23
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

msync:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.L        RD12, (R2, 76)
// pdpc201/bt_mman.c:31   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.L        (R2, 76), RD12
  BSR          tk_msync, R1

.L00C0232C:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

HUlib_delCharFromTextLine:
// hu_lib.c:90   if (!t->len) return false;
  MOV.L        (RQ10, 104), RQ13
  BRNE.L       R0, RQ13, .L00802CDE
  ADD          R0, 0, RD10
  JSR          R1, 0, R0
  BSR          .L00802CDF, R0

.L00802CDE:
// hu_lib.c:92   {
  ADD          RQ10, 20, RQ12
  MOV.L        (RQ10, 104), RQ13
  ADDS.L       RQ13, -1, RQ11
  MOV.L        RQ11, (RQ10, 104)
  MOV.B        RD0, (RQ12, RQ11)
// hu_lib.c:94   t->needsupdate = 4;
  ADD          R0, 4, RD17
  MOV.L        RD17, (RQ10, 108)
// hu_lib.c:95   return true;
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00802CDF:

.L00C0232D:
  JSR          R1, 0, R0

AM_drawGrid:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.L        RD10, (R2, 124)
// am_map.c:1089   mline_t ml;
// am_map.c:1092   start = m_x;
  MOV.L        TU7A00C41B/m_x, RD22
// am_map.c:1093   if ((start-bmaporgx)%(MAPBLOCKUNITS<<FRACBITS))
  MOV.L        bmaporgx, RD27
  SUBS.L       RD22, RD27, RQ8
  ADD          RQ8, 0, RQ20
  LUI          2048, RD27
  MODS.L       RQ20, RD27, RQ20
  BREQ.L       R0, RQ20, .L00801844
// am_map.c:1094   start += (MAPBLOCKUNITS<<FRACBITS)
  MOV.L        bmaporgx, RD27
  SUBS.L       RD22, RD27, RQ8
  ADD          RQ8, 0, RQ20
  LUI          2048, RD27
  MODS.L       RQ20, RD27, RQ20
  SUBS.L       RD27, RQ20, RQ8
  ADDS.L       RD22, RQ8, RD22

.L00801844:
// am_map.c:1096   end = m_x + m_w;
  MOV.L        TU7A00C41B/m_x, RD27
  MOV.L        TU7A00C41B/m_w, RD26
  ADDS.L       RD27, RD26, RD21
// am_map.c:1099   ml.a.y = m_y;
  ADD          R2, 96, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        TU7A00C41B/m_y, RD13
  MOV.L        RD13, (RQ26, 4)
// am_map.c:1100   ml.b.y = m_y+m_h;
  MOV.L        TU7A00C41B/m_h, RD12
  ADDS.L       RD13, RD12, RQ8
  ADD          RQ27, 8, RQ26
  MOV.L        RQ8, (RQ26, 4)
// am_map.c:1101   for (x=start; x<end; x+=(MAPBLOCKUNITS<<FRACBITS))
  ADD          RD22, 0, RD18
  BRGE.L       RD21, RD18, .L00801847

.L00801845:
// am_map.c:1102   {
  ADD          R2, 96, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        RD18, (RQ26, 0)
// am_map.c:1104   ml.b.x = x;
  ADD          RQ27, 8, RQ26
  MOV.L        RD18, (RQ26, 0)
// am_map.c:1105   AM_drawMline(&ml, color);
  ADD          RQ27, 0, RQ23
  ADD          RQ23, 0, RQ10
  MOV.L        (R2, 124), RD11
  BSR          AM_drawMline, R1
  ADDS.L       RD18, 0x00800000, RD18
  BRLT.L       RD21, RD18, .L00801845

.L00801847:
// am_map.c:1109   start = m_y;
  MOV.L        TU7A00C41B/m_y, RD22
// am_map.c:1110   if ((start-bmaporgy)%(MAPBLOCKUNITS<<FRACBITS))
  MOV.L        bmaporgy, RD27
  SUBS.L       RD22, RD27, RQ8
  ADD          RQ8, 0, RQ20
  LUI          2048, RD27
  MODS.L       RQ20, RD27, RQ20
  BREQ.L       R0, RQ20, .L00801848
// am_map.c:1111   start += (MAPBLOCKUNITS<<FRACBITS)
  MOV.L        bmaporgy, RD27
  SUBS.L       RD22, RD27, RQ8
  ADD          RQ8, 0, RQ20
  LUI          2048, RD27
  MODS.L       RQ20, RD27, RQ20
  SUBS.L       RD27, RQ20, RQ8
  ADDS.L       RD22, RQ8, RD22

.L00801848:
// am_map.c:1113   end = m_y + m_h;
  MOV.L        TU7A00C41B/m_y, RD27
  MOV.L        TU7A00C41B/m_h, RD26
  ADDS.L       RD27, RD26, RD21
// am_map.c:1116   ml.a.x = m_x;
  ADD          R2, 96, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        TU7A00C41B/m_x, RD13
  MOV.L        RD13, (RQ26, 0)
// am_map.c:1117   ml.b.x = m_x + m_w;
  MOV.L        TU7A00C41B/m_w, RD12
  ADDS.L       RD13, RD12, RQ8
  ADD          RQ27, 8, RQ26
  MOV.L        RQ8, (RQ26, 0)
// am_map.c:1118   for (y=start; y<end; y+=(MAPBLOCKUNITS<<FRACBITS))
  ADD          RD22, 0, RD9
  BRGE.L       RD21, RD9, .L0080184B

.L00801849:
// am_map.c:1119   {
  ADD          R2, 96, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        RD9, (RQ26, 4)
// am_map.c:1121   ml.b.y = y;
  ADD          RQ27, 8, RQ26
  MOV.L        RD9, (RQ26, 4)
// am_map.c:1122   AM_drawMline(&ml, color);
  ADD          RQ27, 0, RQ23
  ADD          RQ23, 0, RQ10
  MOV.L        (R2, 124), RD11
  BSR          AM_drawMline, R1
  ADDS.L       RD9, 0x00800000, RD9
  BRLT.L       RD21, RD9, .L00801849

.L0080184B:

.L00C02333:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_vf_addmount:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_vfile.c:48   
  BRNE.Q       R0, RQ9, .L00800A74
// tk_core/tk_vfile.c:49   
  ADD          R0, -1, RD10
  BSR          .L00C02343, R0

.L00800A74:
// tk_core/tk_vfile.c:50   
  MOV.Q        (RQ9, 0), RQ21
  BRNE.Q       R0, RQ21, .L00800A75
// tk_core/tk_vfile.c:51   

tk_vf_addmount.debugbreak_L041A:
  BRK          1050

.L00800A75:
// tk_core/tk_vfile.c:53   
  MOV.Q        (RQ9, 0), RQ21
  MOV.Q        (RQ21, 0), RQ20
  BRNE.Q       R0, RQ20, .L00800A76
// tk_core/tk_vfile.c:54   

tk_vf_addmount.debugbreak_L041B:
  BRK          1051

.L00800A76:
// tk_core/tk_vfile.c:58   
  ADD          R0, 0x1234ABCD, RD27
  MOV.L        RD27, (RQ9, 36)
// tk_core/tk_vfile.c:60   
  MOV.L        RD0, (RQ9, 32)
// tk_core/tk_vfile.c:61   
  MOV.Q        (RQ9, 16), RQ21
  BREQ.Q       R0, RQ21, .L00800A77
// tk_core/tk_vfile.c:62   
  MOV.Q        (RQ9, 16), RQ20
  ADD          RQ20, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RQ8
  MOV.L        RQ8, (RQ9, 32)

.L00800A77:
// tk_core/tk_vfile.c:64   
  MOV.Q        tk_vf_mount, RQ18
  ADD          R0, 0, RQ22
// tk_core/tk_vfile.c:65   
  BSR          .L00800A78, R0

.L00800A79:
// tk_core/tk_vfile.c:66   
  MOV.L        (RQ9, 32), RQ8
  MOV.L        (RQ18, 32), RQ23
  BRGE.L       RQ23, RQ8, .L00800A7A
// tk_core/tk_vfile.c:69   
  ADD          RQ18, 0, RQ22
// tk_core/tk_vfile.c:70   
  MOV.Q        (RQ18, 8), RQ18

.L00800A78:
  BRNE.Q       R0, RQ18, .L00800A79

.L00800A7A:
// tk_core/tk_vfile.c:73   
  BREQ.Q       R0, RQ22, .L00800A7B
// tk_core/tk_vfile.c:74   
  MOV.Q        RQ18, (RQ9, 8)
// tk_core/tk_vfile.c:76   
  MOV.Q        RQ9, (RQ22, 8)
  BSR          .L00800A7C, R0

.L00800A7B:
// tk_core/tk_vfile.c:78   
  MOV.Q        tk_vf_mount, RQ27
  MOV.Q        RQ27, (RQ9, 8)
// tk_core/tk_vfile.c:80   
  ADD          RQ9, 0, RQ27
  MOV.Q        RQ27, tk_vf_mount

.L00800A7C:

.L00C02343:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

G_DeathMatchSpawnPlayer:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD23
// g_game.c:925   selections = deathmatch_p - deathmatchstarts;
  MOV.Q        deathmatch_p, RQ20
  MOV          deathmatchstarts, RQ27
  ADD          RQ20, 0, RQ21
  SUB          RQ21, RQ27, RQ21
  ADD          R0, 20, RD20
  DIVS.L       RQ21, RD20, RQ21
  ADDS.L       RQ21, 0, RD22
// g_game.c:926   if (selections < 4)
  BRGE.L       4, RD22, .L0080159B
// g_game.c:927   I_Error ("Only %i deathmatch spots, 4 required", selections);
  MOV          .L00C0234C, RQ10
  ADD          RD22, 0, RD11
  BSR          I_Error, R1

.L0080159B:
// g_game.c:929   for (j=0 ; j<20 ; j++)
  ADD          R0, 0, RD8

.L0080159C:
// g_game.c:930   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  MODS.L       RQ18, RD22, RD9
// g_game.c:932   if (G_CheckSpot (playernum, &deathmatchstarts[i]) )
  MOV          deathmatchstarts, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ11
  ADD          RQ20, RQ11, RQ11
  ADD          RD23, 0, RD10
  BSR          G_CheckSpot, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080159F
// g_game.c:933   {
  ADDS.L       RD23, 1, RQ18
  MOV          deathmatchstarts, RQ20
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.W        RQ18, (RQ27, 10)
// g_game.c:935   P_SpawnPlayer (&deathmatchstarts[i]);
  ADD          R0, 20, R5
  MUL.L        RD9, R5, RQ10
  ADD          RQ20, RQ10, RQ10
  BSR          P_SpawnPlayer, R1
// g_game.c:936   return;
  BSR          .L00C0234B, R0

.L0080159F:
  ADDS.L       RD8, 1, RD8
  BRLT.L       20, RD8, .L0080159C

.L0080159E:
// g_game.c:941   P_SpawnPlayer (&playerstarts[playernum]);
  MOV          playerstarts, RQ20
  ADD          R0, 20, R5
  MUL.L        RD23, R5, RQ10
  ADD          RQ20, RQ10, RQ10
  BSR          P_SpawnPlayer, R1

.L00C0234B:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

tk_unlink2:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 136)
  ADD          RQ11, 0, RQ21
// tk_core/tk_vfile.c:466   
  BSR          tk_vfile_init, R1
// tk_core/tk_vfile.c:468   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       46, RQ22, .L00800AB1
  MOV.B        (RQ21, 1), RQ22
  BRNE.Q       47, RQ22, .L00800AB1

.L00800AB2:
// tk_core/tk_vfile.c:469   
  ADD          RQ21, 2, RQ21

.L00800AB1:
// tk_core/tk_vfile.c:470   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       47, RQ22, .L00800AB3
// tk_core/tk_vfile.c:471   
  ADD          RQ21, 1, RQ21

.L00800AB3:
// tk_core/tk_vfile.c:476   
  MOV.Q        tk_vf_mount, RQ9
// tk_core/tk_vfile.c:477   
  BSR          .L00800AB4, R0

.L00800AB5:
// tk_core/tk_vfile.c:478   
  ADD          RQ21, 0, RQ23
// tk_core/tk_vfile.c:480   
  MOV.Q        (RQ9, 16), RQ8
  BREQ.Q       R0, RQ8, .L00800AB6
  MOV.L        (RQ9, 32), RQ22
  BRLE.L       R0, RQ22, .L00800AB6

.L00800AB7:
  MOV.L        (RQ9, 32), RQ22
  MOV.Q        (RQ9, 16), RQ8
  ADDS.L       RQ22, 0, RQ12
  ADD          RQ8, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00800AB8
// tk_core/tk_vfile.c:483   
  MOV.Q        (RQ9, 8), RQ9
// tk_core/tk_vfile.c:485   
  BSR          .L00800AB4, R0

.L00800AB8:
// tk_core/tk_vfile.c:486   
  MOV.L        (RQ9, 32), RQ18
  ADD          RQ23, RQ18, RQ23
  MOV.B        (RQ23, 0), RQ18
  BREQ.L       R0, RQ18, .L00800AB9
  MOV.B        (RQ23, 0), RQ18
  BREQ.Q       47, RQ18, .L00800AB9

.L00800ABA:
  ADD          RQ23, -1, RQ8
  MOV.B        (RQ8, 0), RQ18
  BREQ.Q       58, RQ18, .L00800AB9

.L00800ABB:
// tk_core/tk_vfile.c:489   
  MOV.Q        (RQ9, 8), RQ9
// tk_core/tk_vfile.c:491   
  BSR          .L00800AB4, R0

.L00800AB9:
  MOV.B        (RQ23, 0), RQ18
  BRNE.Q       47, RQ18, .L00800ABC
// tk_core/tk_vfile.c:494   
  ADD          RQ23, 1, RQ23

.L00800ABC:

.L00800AB6:
// tk_core/tk_vfile.c:498   
  MOV.Q        (RQ9, 0), RQ8
  MOV.Q        (RQ8, 40), RQ20
  BREQ.Q       R0, RQ20, .L00800ABD
// tk_core/tk_vfile.c:499   
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ20
  MOV.Q        (RQ8, 40), RQ27
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 136), RQ11
  ADD          RQ23, 0, RQ12
  ADD          RQ20, 0, RQ29
  JSR          RQ27, 0, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD26
  MOV.L        RD26, (R2, 124)
  BRLT.L       R0, RD26, .L00800ABE
// tk_core/tk_vfile.c:502   
  MOV.L        (R2, 124), RD10
  BSR          .L00C02352, R0

.L00800ABE:

.L00800ABD:
// tk_core/tk_vfile.c:503   
  MOV.Q        (RQ9, 8), RQ9

.L00800AB4:
  BRNE.Q       R0, RQ9, .L00800AB5

.L00800ABF:
// tk_core/tk_vfile.c:507   
  MOV          .L00C02353, RQ10
  ADD          RQ21, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:508   
  ADD          R0, -1, RD10

.L00C02352:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

P_ArchiveThinkers:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// p_saveg.c:234   for (th = thinkercap.next ; th != &thinkercap ; th=th->next)
  MOV          thinkercap, RQ20
  MOV.Q        (RQ20, 8), RQ22
  ADD          RQ20, 0, RQ18
  BREQ.Q       RQ18, RQ22, .L00802340

.L0080233E:
// p_saveg.c:235   {
  ADD          RQ22, 16, RQ20
  MOV.Q        (RQ20, 0), RQ18
  MOV          P_MobjThinker, RQ21
  BRNE.Q       RQ21, RQ18, .L00802341
// p_saveg.c:237   {
  MOV.Q        save_p, RQ20
  ADD          RQ20, 0, RQ18
  ADD          RQ20, 1, RQ20
  ADD          R0, 1, RD27
  MOVU.B       RD27, (RQ18, 0)
// p_saveg.c:239   PADSAVEP();
  ADD          RQ20, 0, RQ9
  AND          RQ9, 3, RQ23
  ADD          R0, 4, RQ26
  SUB          RQ26, RQ23, RQ9
  AND          RQ9, 3, RQ23
  ADD          RQ20, RQ23, RQ20
// p_saveg.c:240   mobj = (mobj_t *)save_p;
  ADD          RQ20, 0, RQ8
  MOV.Q        RQ20, save_p
// p_saveg.c:241   memcpy (mobj, th, sizeof(*mobj));
  ADD          RQ8, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          __memcpy64_232, R1
// p_saveg.c:242   save_p += sizeof(*mobj);
  MOV.Q        save_p, RQ20
  ADD          RQ20, 232, RQ20
  MOV.Q        RQ20, save_p
// p_saveg.c:243   mobj->state = (state_t *)(mobj->state - states);
  MOV.Q        (RQ8, 152), RQ18
  MOV          states, RQ20
  ADD          RQ18, 0, RQ9
  SUB          RQ9, RQ20, RQ9
  ADD          R0, 40, RD20
  DIVS.L       RQ9, RD20, RQ9
  MOV.Q        RQ9, (RQ8, 152)
  MOV.Q        (RQ8, 192), RQ18
  BREQ.Q       R0, RQ18, .L00802342
// p_saveg.c:246   mobj->player = (player_t *)((mobj->player-players) + 1);
  MOV.Q        (RQ8, 192), RQ21
  MOV          players, RQ20
  ADD          RQ21, 0, RQ9
  SUB          RQ9, RQ20, RQ9
  ADD          R0, 320, RD20
  DIVS.L       RQ9, RD20, RQ9
  ADD          RQ9, 1, RQ23
  MOV.Q        RQ23, (RQ8, 192)

.L00802342:
// p_saveg.c:247   continue;
  BSR          .L0080233F, R0

.L00802341:

.L0080233F:
  MOV.Q        (RQ22, 8), RQ22
  MOV          thinkercap, RQ18
  BRNE.Q       RQ18, RQ22, .L0080233E

.L00802340:
// p_saveg.c:254   *save_p++ = tc_end;	
  MOV.Q        save_p, RQ20
  ADD          RQ20, 0, RQ21
  ADD          RQ20, 1, RQ20
  MOV.Q        RQ20, save_p
  MOVU.B       RD0, (RQ21, 0)

.L00C02359:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

__exita:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// pdpc201/btshx_supa.c:868   
  BSR          tk_iskernel, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800FCF
// pdpc201/btshx_supa.c:870   
  MOV.L        (R2, 76), RD10
  BSR          TK_ExitV, R1

.L00800FCF:
// pdpc201/btshx_supa.c:871   

__exita.debugbreak_L0421:
  BRK          1057

.L00C02364:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsLookupRun:
// p_acspec.c:716   if(map<=0)
  BRGT.L       R0, RD11, .L00801924
// p_acspec.c:717   map=gamemap;
  MOV.L        gamemap, RD13
  ADDS.L       RD13, 0, RD11

.L00801924:
// p_acspec.c:719   for(i=0; i<p_acsvm_nrun; i++)
  ADD          R0, 0, RD13
  MOV.L        p_acsvm_nrun, RD12
  BRGE.L       RD12, RD13, .L00801927

.L00801925:
// p_acspec.c:720   {
  MOV          p_acsvm_run, RQ12
  ADD          R0, 167, R5
  MUL.L        RD13, R5, RQ17
  LEA.Q        RQ12, RQ17, RQ17
  MOV.W        (RQ17, 2), RQ16
  BRNE.Q       RD11, RQ16, .L00801928
  MOV          p_acsvm_run, RQ12
  ADD          R0, 167, R5
  MUL.L        RD13, R5, RQ17
  LEA.Q        RQ12, RQ17, RQ17
  MOV.W        (RQ17, 0), RQ16
  BRNE.Q       RD10, RQ16, .L00801928

.L00801929:
// p_acspec.c:723   {
  MOV          p_acsvm_run, RQ12
  ADD          R0, 167, R5
  MUL.L        RD13, R5, RQ15
  LEA.Q        RQ12, RQ15, RQ15
// p_acspec.c:725   return(tmp);
  ADD          RQ15, 0, RQ10
  JSR          R1, 0, R0

.L00801928:
  ADDS.L       RD13, 1, RD13
  MOV.L        p_acsvm_nrun, RD12
  BRLT.L       RD12, RD13, .L00801925

.L00801927:
// p_acspec.c:729   return(NULL);
  ADD          RQ0, 0, RQ10

.L00C02366:
  JSR          R1, 0, R0

STlib_updatePercent:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ8
  ADD          RD11, 0, RD22
// st_lib.c:189   {
  BREQ.L       R0, RD22, .L00802B69
  ADD          RQ8, 0, RQ21
  MOV.Q        (RQ21, 24), RQ18
  MOV.L        (RQ18, 0), RQ9
  BREQ.L       R0, RQ9, .L00802B69

.L00802B6A:
// st_lib.c:191   V_DrawPatchDirect(per->n.x, per->n.y, FG, per->p);
  MOV.Q        (RQ8, 48), RQ18
  ADD          RQ8, 0, RQ21
  MOV.L        (RQ21, 4), RQ9
  MOV.L        (RQ21, 0), RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802B69:
// st_lib.c:193   STlib_updateNum(&per->n, refresh);
  ADD          RQ8, 0, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          STlib_updateNum, R1

.L00C0236C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawFuzzColumnLow:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -312, R2
// r_draw.c:695   if (!dc_yl)
  MOV.L        dc_yl, RD13
  BRNE.L       R0, RD13, .L008025D0
// r_draw.c:696   dc_yl = 1;
  ADD          R0, 1, RD13
  MOV.L        RD13, dc_yl

.L008025D0:
// r_draw.c:699   if (dc_yh == viewheight-1)
  MOV.L        viewheight, RD13
  ADDS.L       RD13, -1, RQ9
  MOV.L        dc_yh, RD13
  BRNE.Q       RQ9, RD13, .L008025D1
// r_draw.c:700   dc_yh = viewheight - 2;
  MOV.L        viewheight, RD13
  ADDS.L       RD13, -2, RD12
  MOV.L        RD12, dc_yh

.L008025D1:
// r_draw.c:702   count = dc_yh - dc_yl;
  MOV.L        dc_yh, RD13
  MOV.L        dc_yl, RD12
  SUBS.L       RD13, RD12, RD22
// r_draw.c:705   if (count < 0)
  BRLT.L       R0, RD22, .L00C02372
// r_draw.c:709   fuzzmask = fuzzseed >> 16;
  MOV.Q        R_DrawFuzzColumnLow/fuzzseed!27, RQ13
  SHLR.Q       RQ13, 16, RQ12
// r_draw.c:711   fuzzseed = (fuzzseed << 1) + (fuzzseed>>7) + (fuzzseed>>17) + 1;
  SHLD.Q       RQ13, 1, RQ21
  SHLR.Q       RQ13, 7, RQ11
  ADD          RQ21, RQ11, RQ10
  SHLR.Q       RQ13, 17, RQ21
  ADD          RQ10, RQ21, RQ11
  ADD          RQ11, 1, RQ13
// r_draw.c:712   fuzzmask += fuzzseed;
  ADD          RQ12, RQ13, RQ12
  MOV.Q        RQ12, (R2, 56)
  MOV.Q        RQ13, R_DrawFuzzColumnLow/fuzzseed!27
// r_draw.c:715   dest = ylookup[dc_yl] + columnofs[dc_x<<1];
  MOV          ylookup, RQ13
  MOV.L        dc_yl, RD17
  MOV.Q        (RQ13, RD17), RQ16
  MOV.L        dc_x, RD13
  SHAD.L       RD13, 1, RQ9
  MOV          columnofs, RQ13
  MOV.L        (RQ13, RQ9), RQ23
  LEA.W        RQ16, RQ23, RQ8
// r_draw.c:718   fracstep = dc_iscale;
  MOV.L        dc_iscale, RD13
// r_draw.c:719   frac = dc_texturemid + (dc_yl-centery)*fracstep;
  MOV.L        centery, RD15
  SUBS.L       RD17, RD15, RQ9
  MULS.L       RQ9, RD13, RQ23
  MOV.L        RD13, (R2, 48)
  MOV.L        dc_texturemid, RD15
  ADDS.L       RD15, RQ23, RD17
  MOV.L        RD17, (R2, 52)
// r_draw.c:724   do

.L008025D2:
// r_draw.c:727   fuzzofs = -FUZZOFF;
  ADD          R0, -320, RD20
// r_draw.c:728   if((fuzzmask>>fuzzpos)&1)
  MOV.L        fuzzpos, RQ23
  MOV.Q        (R2, 56), RQ13
  SHLR.Q       RQ13, RQ23, RQ21
  ADD          R0, 1, RQ12
  BTST.Q       RQ12, RQ21, .L008025D5
// r_draw.c:729   fuzzofs = FUZZOFF;
  ADD          R0, 320, RD20

.L008025D5:
// r_draw.c:732   px=dest[fuzzofs];
  MOVU.W       (RQ8, RD20), RD18
// r_draw.c:737   px= px - ((px&0x739C)>>1);
  AND          RD18, 29596, RQ9
  SHAR         RQ9, 1, RQ23
  SUBS.L       RD18, RQ23, RD18
// r_draw.c:739   dest[0] = px;
  MOVU.W       RD18, (RQ8, 0)
// r_draw.c:740   dest[1] = px;
  MOVU.W       RD18, (RQ8, 2)
// r_draw.c:743   if (++fuzzpos == FUZZTABLE)
  MOV.L        fuzzpos, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, fuzzpos
  BRNE.Q       50, RD13, .L008025D6
// r_draw.c:744   fuzzpos = 0;
  MOV.L        RD0, fuzzpos

.L008025D6:
// r_draw.c:746   dest += SCREENWIDTH;
  ADD          RQ8, 640, RQ8
// r_draw.c:748   frac += fracstep;
  MOV.L        (R2, 48), RD13
  MOV.L        (R2, 52), RD12
  ADDS.L       RD12, RD13, RD12
  MOV.L        RD12, (R2, 52)
  ADD          RD22, 0, RQ9
  ADDS.L       RD22, -1, RD22
  BRNE.L       R0, RQ9, .L008025D2

.L00C02372:
  ADD          R2, 312, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

perror:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
// pdpc201/stdio.c:2669   
  BREQ.Q       RQ0, RQ8, .L008004B3
  MOV.B        (RQ8, 0), RQ9
  BREQ.L       R0, RQ9, .L008004B3

.L008004B4:
// pdpc201/stdio.c:2671   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ18, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          strerror, R1
  ADD          RQ10, 0, RQ18
  MOV          .L00C02379, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RQ18, 0, RQ12
  BSR          printf, R1
  BSR          .L008004B5, R0

.L008004B3:
// pdpc201/stdio.c:2674   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ18, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          strerror, R1
  ADD          RQ10, 0, RQ18
  MOV          .L00C0237A, RQ10
  ADD          RQ18, 0, RQ11
  BSR          printf, R1

.L008004B5:
// pdpc201/stdio.c:2678   

.L00C02378:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

__smodsi3:
// pdpc201/btshx_supdll.c:469   
  DIVS.L       RD10, RD11, RD13
// pdpc201/btshx_supdll.c:470   
  MULS.L       RD13, RD11, RQ12
  SUBS.L       RD10, RQ12, RD17
// pdpc201/btshx_supdll.c:471   
  ADD          RD17, 0, RD10

.L00C0237B:
  JSR          R1, 0, R0
  .balign 4

R_SetupFrame:
  ADD          R2, -48, R2
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  ADD          R2, -288, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        fixedcolormap, RQ21
// r_main.c:911   if(!player || !player->mo)
  BREQ.Q       R0, RQ9, .L0080269E
  MOV.Q        (RQ9, 0), RQ23
  BREQ.Q       R0, RQ23, .L0080269E
  BSR          .L0080269D, R0

.L0080269E:
// r_main.c:912   {
  MOV.L        RD0, viewx
// r_main.c:914   viewy = 0;
  MOV.L        RD0, viewy
// r_main.c:915   viewangle = 0;
  MOV.L        RD0, viewangle
// r_main.c:918   viewz = 0;
  MOV.L        RD0, viewz
// r_main.c:919   return;
  BSR          .L00C0237C, R0

.L0080269D:
// r_main.c:922   if (!detailshift)
  MOV.L        detailshift, RD13
  BRNE.L       R0, RD13, .L008026A0
// r_main.c:923   {
  MOV          R_DrawColumn, RQ12
  ADD          RQ12, 0, RQ13
  MOV.Q        RQ12, colfunc
// r_main.c:925   wallcolfunc = basecolfunc;
  MOV.Q        RQ13, wallcolfunc
  MOV.Q        RQ13, basecolfunc
// r_main.c:931   sprcolfunc = R_DrawColumn;
  MOV.Q        RQ12, sprcolfunc
// r_main.c:932   fuzzcolfunc = R_DrawFuzzColumn;
  MOV          R_DrawFuzzColumn, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, fuzzcolfunc
// r_main.c:933   transcolfunc = R_DrawTranslatedColumn;
  MOV          R_DrawTranslatedColumn, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, transcolfunc
// r_main.c:938   spanfunc = R_DrawSpan;
  MOV          R_DrawSpan, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, spanfunc
  BSR          .L008026A1, R0

.L008026A0:
// r_main.c:949   {
  MOV          R_DrawColumnLow, RQ12
  ADD          RQ12, 0, RQ13
  MOV.Q        RQ12, colfunc
// r_main.c:951   wallcolfunc = basecolfunc;
  MOV.Q        RQ13, wallcolfunc
  MOV.Q        RQ13, basecolfunc
// r_main.c:957   sprcolfunc = R_DrawColumnLow;
  MOV.Q        RQ12, sprcolfunc
// r_main.c:958   fuzzcolfunc = R_DrawFuzzColumnLow;
  MOV          R_DrawFuzzColumnLow, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, fuzzcolfunc
// r_main.c:959   transcolfunc = R_DrawTranslatedColumn;
  MOV          R_DrawTranslatedColumn, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, transcolfunc
// r_main.c:964   spanfunc = R_DrawSpanLow;
  MOV          R_DrawSpanLow, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, spanfunc

.L008026A1:
// r_main.c:968   viewplayer = player;
  MOV.Q        RQ9, viewplayer
// r_main.c:969   viewx = player->mo->x;
  MOV.Q        (RQ9, 0), RQ23
  MOV.L        (RQ23, 24), RD13
  MOV.L        RD13, viewx
// r_main.c:970   viewy = player->mo->y;
  MOV.L        (RQ23, 28), RD13
  MOV.L        RD13, viewy
// r_main.c:971   viewangle = player->mo->angle + viewangleoffset;
  MOVU.L       (RQ23, 56), RQ8
  MOV.L        viewangleoffset, RD13
  ADDU.L       RD13, R0, RQ22
  ADDU.L       RQ8, RQ22, RD13
// r_main.c:972   extralight = player->extralight;
  MOV.L        (RQ9, 248), RD12
  MOV.L        RD12, extralight
// r_main.c:974   viewz = player->viewz;
  MOV.L        (RQ9, 20), RD12
  MOV.L        RD12, viewz
// r_main.c:976   viewsin = finesine[viewangle>>ANGLETOFINESHIFT];
  SHLR         RD13, 19, RQ8
  MOV          finesine, RQ12
  MOV.L        (RQ12, RQ8), RD11
  MOV.L        RD11, viewsin
// r_main.c:977   viewcos = finecosine[viewangle>>ANGLETOFINESHIFT];
  SHLR         RD13, 19, RQ22
  MOV.L        RD13, viewangle
  MOV.Q        finecosine, RQ13
  MOV.L        (RQ13, RQ22), RD12
  MOV.L        RD12, viewcos
// r_main.c:979   sscount = 0;
  MOV.L        RD0, sscount
// r_main.c:981   if (player->fixedcolormap)
  MOV.L        (RQ9, 252), RQ8
  BREQ.L       R0, RQ8, .L008026A2
// r_main.c:982   {
  MOV.L        (RQ9, 252), RQ22
  SHAD.L       RQ22, 8, RQ8
  MOV.Q        colormaps, RQ13
  LEA.W        RQ13, RQ8, RQ21
// r_main.c:988   walllights = scalelightfixed;
  MOV          scalelightfixed, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, walllights
// r_main.c:990   for (i=0 ; i<MAXLIGHTSCALE ; i++)
  ADD          RD0, 0, RD18

.L008026A3:
// r_main.c:991   scalelightfixed[i] = fixedcolormap;
  MOV          scalelightfixed, RQ13
  MOV.Q        RQ21, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       48, RD18, .L008026A3

.L008026A5:
  BSR          .L008026A6, R0

.L008026A2:
// r_main.c:994   fixedcolormap = 0;
  ADD          R0, 0, RQ21

.L008026A6:
// r_main.c:996   framecount++;
  MOV.L        framecount, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, framecount
// r_main.c:997   validcount++;
  MOV.L        validcount, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, validcount

.L00C0237C:
  MOV.Q        RQ21, fixedcolormap
  ADD          R2, 288, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 48, R2
  JSR          R1, 0, R0
  .balign 4

TK_Env_GetCwd:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADDS.L       RD11, 0, RD8
  MOV          .L00C02383, RQ18
// tk_core/tk_env.c:158   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADDS.L       RD8, 0, RD12
  BSR          TK_Env_GetEnvVarI, R1

.L00C02382:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

A_XScream:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 31, RD9
// p_enemy.c:1606   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 31, RD11
  BSR          S_StartSound, R1

.L00C02389:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tk_ralloc:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -320, R2
  ADDS.L       RD10, 0, RD9
// tk_core/tk_puts.c:1639   
  MOV.Q        tk_ralloc_bufs, RQ23
  BRNE.Q       R0, RQ23, .L00800C82
// tk_core/tk_puts.c:1640   
  LUI          1, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ23
// tk_core/tk_puts.c:1642   
  ADD          RQ23, 4096, RQ22
  MOV.Q        RQ22, tk_ralloc_bufe
// tk_core/tk_puts.c:1643   
  MOV.Q        RQ23, tk_ralloc_bufr
  MOV.Q        RQ23, tk_ralloc_bufs

.L00800C82:
// tk_core/tk_puts.c:1646   
  MOV.Q        tk_ralloc_bufr, RQ23
  ADD          RQ23, RD9, RQ18
  MOV.Q        tk_ralloc_bufe, RQ23
  BRLT.Q       RQ23, RQ18, .L00800C83
// tk_core/tk_puts.c:1647   
  MOV.Q        tk_ralloc_bufs, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, tk_ralloc_bufr

.L00800C83:
// tk_core/tk_puts.c:1651   
  MOV.Q        tk_ralloc_bufr, RQ23
  ADD          RQ23, 0, RQ8
// tk_core/tk_puts.c:1652   
  ADD          RQ23, RD9, RQ23
  MOV.Q        RQ23, tk_ralloc_bufr
// tk_core/tk_puts.c:1653   
  ADD          RQ8, 0, RQ10

.L00C0238F:
  ADD          R2, 320, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

tkgBlitSubImage:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.X        R18, (R2, 16)
  MOV.Q        R21, (R2, 32)
  MOV.X        R24, (R2, 56)
  ADD          R2, -480, R2
  MOV.L        RD10, (R2, 284)
  MOV.L        RD11, (R2, 280)
  MOV.L        RD12, (R2, 276)
  MOV.Q        RQ13, (R2, 264)
  MOV.Q        RQ14, (R2, 256)
  MOV.L        RD15, (R2, 252)
  MOV.L        RD16, (R2, 248)
  MOV.L        RD17, (R2, 244)
// tk_gdi/tkg_display.c:130   
// tk_gdi/tkg_display.c:134   
  ADD          R2, 224, RQ18
  ADD          RQ18, 0, RQ9
// tk_gdi/tkg_display.c:135   
  ADD          R2, 208, RQ18
  ADD          RQ18, 0, RQ8
// tk_gdi/tkg_display.c:136   
  MOV.L        (R2, 252), RD27
  MOV.L        RD27, (RQ9, 0)
// tk_gdi/tkg_display.c:137   
  MOV.L        (R2, 248), RD26
  MOV.L        RD26, (RQ9, 4)
// tk_gdi/tkg_display.c:138   
  MOV.L        (R2, 244), RD25
  MOV.L        RD25, (RQ9, 8)
// tk_gdi/tkg_display.c:139   
  MOV.L        (R2, 576), RD24
  MOV.L        RD24, (RQ9, 12)
// tk_gdi/tkg_display.c:141   
  MOV.L        (R2, 280), RD19
  MOV.L        RD19, (RQ8, 0)
// tk_gdi/tkg_display.c:142   
  MOV.L        (R2, 276), RD27
  MOV.L        RD27, (RQ8, 4)
// tk_gdi/tkg_display.c:143   
  MOV.L        RD25, (RQ8, 8)
// tk_gdi/tkg_display.c:144   
  MOV.L        RD24, (RQ8, 12)
// tk_gdi/tkg_display.c:155   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ23
// tk_gdi/tkg_display.c:157   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ10
  MOV.Q        (R2, 264), RQ11
  BSR          TKGDI_CopyBitmapInfo, R1
// tk_gdi/tkg_display.c:159   
  MOV.Q        (RQ23, 0), RQ18
  MOV.Q        (RQ18, 216), RQ21
  ADD          R0, 0x12345678, RQ13
  BRNE.Q       RQ13, RQ21, .L00800114
// tk_gdi/tkg_display.c:160   
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ21
  MOV.Q        (RQ18, 128), RQ22
  ADD          RQ23, 0, RQ10
  MOV.L        (R2, 284), RD11
  ADD          RQ8, 0, RQ12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  MOV.Q        (R2, 256), RQ14
  ADD          RQ9, 0, RQ15
  ADD          RQ21, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C02395, R0

.L00800114:
// tk_gdi/tkg_display.c:169   
  MOV          .L00C02396, RQ10
  BSR          tk_printf, R1
// tk_gdi/tkg_display.c:171   
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ22
  MOV.Q        (RQ18, 24), RQ27
  ADD          RQ23, 0, RQ10
  MOV.L        (R2, 284), RD11
  MOV.L        (R2, 280), RD12
  MOV.L        (R2, 276), RD13
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ14
  MOV.Q        (R2, 256), RQ15
  MOV.L        (R2, 252), RD16
  MOV.L        (R2, 248), RD17
  MOV.L        (R2, 244), RD6
  MOV.L        RD6, (R2, 0)
  MOV.L        (R2, 576), RD7
  MOV.L        RD7, (R2, 8)
  ADD          RQ22, 0, RQ29
  JSR          RQ27, 0, R1

.L00C02395:
  ADD          R2, 480, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.Q        (R2, 32), R21
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_DlSymA:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RQ11, 0, RQ9
  ADDS.L       RD12, 0, RD8
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_rwad.c:938   
// tk_core/tk_rwad.c:951   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 88)
// tk_core/tk_rwad.c:952   
  ADD          R2, 128, RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        (R2, 120), RQ21
  MOV.Q        RQ21, (RQ22, 0)
// tk_core/tk_rwad.c:953   
  ADD          RQ23, 8, RQ22
  MOV.Q        RQ9, (RQ22, 0)
// tk_core/tk_rwad.c:954   
  ADD          RQ23, 16, RQ22
  MOV.L        RD8, (RQ22, 0)
// tk_core/tk_rwad.c:955   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4127, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_rwad.c:957   
  MOV          .L00C0239D, RQ10
  ADD          RQ9, 0, RQ11
  MOV.Q        (R2, 88), RQ12
  ADDS.L       RD8, 0, RD13
  BSR          tk_printf, R1
// tk_core/tk_rwad.c:959   
  MOV.Q        (R2, 88), RQ10

.L00C0239C:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_rename:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R23, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ23
  MOV.Q        RQ12, (R2, 72)
// tk_core/tk_vfile.c:765   
  ADD          RQ0, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RQ23, 0, RQ12
  MOV.Q        (R2, 72), RQ13
  BSR          tk_rename2, R1

.L00C023A3:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R23
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

D_CheckNetGame:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.X        R26, (R2, 48)
  MOV.X        R20, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R22, (R2, 40)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          R0, 1, RD20
// d_net.c:584   for (i=0 ; i<MAXNETNODES ; i++)
  ADD          RD0, 0, RD18

.L00801496:
// d_net.c:585   {
  MOV          nodeingame, RQ27
  MOV.L        RD0, (RQ27, RD18)
// d_net.c:587   nettics[i] = 0;
  MOV          nettics, RQ27
  MOV.L        RD0, (RQ27, RD18)
// d_net.c:588   remoteresend[i] = false;		// set when local needs tics
  MOV          remoteresend, RQ27
  MOV.L        RD0, (RQ27, RD18)
// d_net.c:589   resendto[i] = 0;				// which tic to start sending
  MOV          resendto, RQ27
  MOV.L        RD0, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       8, RD18, .L00801496

.L00801498:
// d_net.c:593   I_InitNetwork ();
  BSR          I_InitNetwork, R1
// d_net.c:594   if (doomcom->id != DOOMCOM_ID)
  MOV.Q        doomcom, RQ27
  MOV.Q        (RQ27, 0), RQ22
  ADD          R0, 0x12345678, RQ27
  BREQ.Q       RQ27, RQ22, .L00801499
// d_net.c:595   I_Error ("Doomcom buffer invalid!");
  MOV          .L00C023AA, RQ10
  BSR          I_Error, R1

.L00801499:
// d_net.c:597   netbuffer = &doomcom->data;
  MOV.Q        doomcom, RQ27
  ADD          RQ27, 40, RQ21
  MOV.Q        RQ21, netbuffer
// d_net.c:598   consoleplayer = displayplayer = doomcom->consoleplayer;
  MOV.W        (RQ27, 32), RQ8
  MOV.L        RQ8, displayplayer
  MOV.L        RQ8, consoleplayer
// d_net.c:599   if (netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L0080149A
// d_net.c:600   D_ArbitrateNetStart ();
  BSR          D_ArbitrateNetStart, R1

.L0080149A:
// d_net.c:602   printf ("startskill %i  deathmatch: %i  startmap: %i  startepisode: %i\n",
  MOV          .L00C023AB, RQ10
  MOV.L        startskill, RD11
  MOV.L        deathmatch, RD12
  MOV.L        startmap, RD13
  MOV.L        startepisode, RD14
  BSR          printf, R1
// d_net.c:606   ticdup = doomcom->ticdup;
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 18), RD26
// d_net.c:609   maxsend = BACKUPTICS/(2*ticdup)-1;
  SHAD.L       RD26, 1, RQ8
  MOV.L        RD26, ticdup
  ADD          R0, 12, RD27
  DIVS.L       RD27, RQ8, RQ9
  ADDS.L       RQ9, -1, RD26
// d_net.c:610   if (maxsend<1)
  MOV.L        RD26, maxsend
  BRGE.L       1, RD26, .L0080149B
// d_net.c:611   maxsend = 1;
  MOV.L        RD20, maxsend

.L0080149B:
// d_net.c:613   for (i=0 ; i<doomcom->numplayers ; i++)
  ADD          RD0, 0, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 34), RQ8
  BRGE.L       RQ8, RD18, .L0080149E

.L0080149C:
// d_net.c:614   playeringame[i] = true;
  MOV          playeringame, RQ27
  MOV.L        RD20, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 34), RQ9
  BRLT.L       RQ9, RD18, .L0080149C

.L0080149E:
// d_net.c:615   for (i=0 ; i<doomcom->numnodes ; i++)
  ADD          RD0, 0, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ8
  BRGE.L       RQ8, RD18, .L008014A1

.L0080149F:
// d_net.c:616   nodeingame[i] = true;
  MOV          nodeingame, RQ27
  MOV.L        RD20, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ9
  BRLT.L       RQ9, RD18, .L0080149F

.L008014A1:
// d_net.c:618   printf ("player %i of %i (%i nodes)\n",
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ8
  MOV.W        (RQ27, 34), RQ9
  MOV.L        consoleplayer, RD27
  ADDS.L       RD27, 1, RQ26
  MOV          .L00C023AC, RQ10
  ADD          RQ26, 0, RD11
  SHAD.Q       RQ9, 48, RD12
  SHAR.Q       RD12, 48, RD12
  SHAD.Q       RQ8, 48, RD13
  SHAR.Q       RD13, 48, RD13
  BSR          printf, R1

.L00C023A9:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

ST_Stop:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// st_stuff.c:1560   {
  MOV.L        TU7A00CB73/st_stopped, RD13
  BRNE.L       R0, RD13, .L00C023B2
// st_stuff.c:1564   I_SetPalette (W_CacheLumpNum (lu_palette, PU_CACHE));
  MOV.L        TU7A00CB73/lu_palette, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          I_SetPalette, R1
// st_stuff.c:1565   I_SetPaletteIndex (0);
  ADD          R0, 0, RD10
  BSR          I_SetPaletteIndex, R1
// st_stuff.c:1567   st_stopped = true;
  ADD          R0, 1, RD13
  MOV.L        RD13, TU7A00CB73/st_stopped

.L00C023B2:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

A_StartFire:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 92, RD9
// p_enemy.c:1279   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 92, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1281   A_Fire(actor);
  ADD          RQ18, 0, RQ10
  BSR          A_Fire, R1

.L00C023B8:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_PageAllocV:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -440, R2
  ADD          RD10, 0, RD18
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_mmpage.c:683   
// tk_core/tk_mmpage.c:687   
  BRGT.L       R0, RD18, .L0080098E
// tk_core/tk_mmpage.c:688   

TKMM_PageAllocV.debugbreak_L0436:
  BRK          1078

.L0080098E:
// tk_core/tk_mmpage.c:692   
  LUI          8192, RD13
  BRLT.L       RD13, RD18, .L0080098F
// tk_core/tk_mmpage.c:693   

TKMM_PageAllocV.debugbreak_L0437:
  BRK          1079

.L0080098F:
// tk_core/tk_mmpage.c:699   
  MOV.Q        RQ0, (R2, 88)
// tk_core/tk_mmpage.c:700   
  ADD          R2, 112, RQ13
  ADD          RQ13, 0, RQ12
  MOV.L        RD18, (RQ12, 0)
// tk_core/tk_mmpage.c:703   
  ADD          RQ13, 0, RQ9
// tk_core/tk_mmpage.c:704   
  MOV.L        (RQ9, 0), RQ8
  BRNE.L       R0, RQ8, .L00800990
// tk_core/tk_mmpage.c:705   

TKMM_PageAllocV.debugbreak_L0438:
  BRK          1080

.L00800990:
// tk_core/tk_mmpage.c:710   
  ADD          R2, 88, RQ23
  ADD          RQ0, 0, RQ10
  LDIZ         4100, RD11
  ADD          RQ23, 0, RQ12
  ADD          R2, 112, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmpage.c:715   
  MOV.Q        (R2, 88), RQ13
  BRNE.Q       R0, RQ13, .L00800991
// tk_core/tk_mmpage.c:716   

TKMM_PageAllocV.debugbreak_L0439:
  BRK          1081

.L00800991:
// tk_core/tk_mmpage.c:721   
  MOV.Q        (R2, 88), RQ10

.L00C023D2:
  ADD          R2, 440, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

A_FatAttack3:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 104)
// p_enemy.c:1430   A_FaceTarget (actor);
  MOV.Q        (R2, 104), RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1432   mo = P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (R2, 104), RQ20
  MOV.Q        (RQ20, 176), RQ23
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ18
// p_enemy.c:1433   mo->angle -= FATSPREAD/2;
  MOVU.L       (RQ18, 56), RQ9
  LUI          -16384, R5
  ADDU.L       R5, RQ9, RQ22
  MOVU.L       RQ22, (RQ18, 56)
// p_enemy.c:1434   an = mo->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ18, 56), RQ9
  SHLR         RQ9, 19, RD21
// p_enemy.c:1435   mo->momx = FixedMul (mo->info->speed, finecosine[an]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD21), RQ22
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 60), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ22, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 112)
// p_enemy.c:1436   mo->momy = FixedMul (mo->info->speed, finesine[an]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD21), RQ9
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 60), RQ22
  ADD          RQ22, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 116)
// p_enemy.c:1438   mo = P_SpawnMissile (actor, actor->target, MT_FATSHOT);
  MOV.Q        (RQ20, 176), RQ23
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 9, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ18
// p_enemy.c:1439   mo->angle += FATSPREAD/2;
  MOVU.L       (RQ18, 56), RQ9
  LUI          16384, R5
  ADDU.L       R5, RQ9, RQ22
  MOVU.L       RQ22, (RQ18, 56)
// p_enemy.c:1440   an = mo->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ18, 56), RQ8
  SHLR         RQ8, 19, RD21
// p_enemy.c:1441   mo->momx = FixedMul (mo->info->speed, finecosine[an]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD21), RQ9
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 60), RQ22
  ADD          RQ22, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 112)
// p_enemy.c:1442   mo->momy = FixedMul (mo->info->speed, finesine[an]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD21), RQ9
  MOV.Q        (RQ18, 136), RQ23
  MOV.L        (RQ23, 60), RQ22
  ADD          RQ22, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 116)

.L00C023DC:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

G_SaveGame:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 76)
  MOV.Q        RQ11, (R2, 64)
// g_game.c:1287   {
  MOV.L        (R2, 76), RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, savegameslot
// g_game.c:1289   strcpy (savedescription, description);
  MOV          savedescription, RQ10
  MOV.Q        (R2, 64), RQ11
  BSR          strcpy, R1
// g_game.c:1290   sendsave = true;
  ADD          R0, 1, RD9
  MOV.L        RD9, sendsave

.L00C023E2:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

I_SetPaletteIndex:
  ADD          R2, -48, R2
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 32)
  ADD          R2, -256, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        vid_flashblend, RD8
  ADD          R0, 0x00017C00, RD23
  ADD          R0, 0x00017C1F, RD22
  ADD          R0, 0x00027FE0, RD21
// i_btesh4.c:452   {
  AND          RD9, -1, RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 23, RQ6
  BRGTU.Q      RQ6, RQ10, .L00801154
  LEA.B        .L00C80015, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80015:
  BSR          .L0080113D, R0
  BSR          .L0080113E, R0
  BSR          .L0080113F, R0
  BSR          .L00801140, R0
  BSR          .L00801141, R0
  BSR          .L00801142, R0
  BSR          .L00801143, R0
  BSR          .L00801144, R0
  BSR          .L00801145, R0
  BSR          .L00801146, R0
  BSR          .L00801147, R0
  BSR          .L00801148, R0
  BSR          .L00801149, R0
  BSR          .L0080114A, R0
  BSR          .L0080114B, R0
  BSR          .L0080114C, R0
  BSR          .L0080114D, R0
  BSR          .L0080114E, R0
  BSR          .L0080114F, R0
  BSR          .L00801150, R0
  BSR          .L00801151, R0
  BSR          .L00801152, R0
  BSR          .L00801153, R0
  BSR          .L00801154, R0

.L0080113D:
// i_btesh4.c:455   case 0:		vid_flashblend = 0;						break;
  ADD          RD0, 0, RD8
  BSR          .L0080113C, R0

.L0080113E:
// i_btesh4.c:456   case 1:		vid_flashblend = (1<<16)|I_PIX16_RED;	break;
  ADD          RD23, 0, RD8
  BSR          .L0080113C, R0

.L0080113F:
// i_btesh4.c:457   case 2:		vid_flashblend = (1<<16)|I_PIX16_RED;	break;
  ADD          RD23, 0, RD8
  BSR          .L0080113C, R0

.L00801140:
// i_btesh4.c:458   case 3:		vid_flashblend = (2<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00027C00, RD8
  BSR          .L0080113C, R0

.L00801141:
// i_btesh4.c:459   case 4:		vid_flashblend = (3<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00037C00, RD8
  BSR          .L0080113C, R0

.L00801142:
// i_btesh4.c:460   case 5:		vid_flashblend = (4<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00047C00, RD8
  BSR          .L0080113C, R0

.L00801143:
// i_btesh4.c:461   case 6:		vid_flashblend = (5<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00057C00, RD8
  BSR          .L0080113C, R0

.L00801144:
// i_btesh4.c:462   case 7:		vid_flashblend = (6<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00067C00, RD8
  BSR          .L0080113C, R0

.L00801145:
// i_btesh4.c:463   case 8:		vid_flashblend = (7<<16)|I_PIX16_RED;	break;
  ADD          R0, 0x00077C00, RD8
  BSR          .L0080113C, R0

.L00801146:
// i_btesh4.c:465   case 9:		vid_flashblend = (1<<16)|I_PIX16_YEL;	break;
  ADD          R0, 0x00017FE0, RD8
  BSR          .L0080113C, R0

.L00801147:
// i_btesh4.c:466   case 10:	vid_flashblend = (2<<16)|I_PIX16_YEL;	break;
  ADD          RD21, 0, RD8
  BSR          .L0080113C, R0

.L00801148:
// i_btesh4.c:467   case 11:	vid_flashblend = (3<<16)|I_PIX16_YEL;	break;
  ADD          R0, 0x00037FE0, RD8
  BSR          .L0080113C, R0

.L00801149:
// i_btesh4.c:468   case 12:	vid_flashblend = (4<<16)|I_PIX16_YEL;	break;
  ADD          R0, 0x00047FE0, RD8
  BSR          .L0080113C, R0

.L0080114A:
// i_btesh4.c:470   case 13:	vid_flashblend = (1<<16)|I_PIX16_PURP;	break;
  ADD          RD22, 0, RD8
  BSR          .L0080113C, R0

.L0080114B:
// i_btesh4.c:471   case 14:	vid_flashblend = (1<<16)|I_PIX16_PURP;	break;
  ADD          RD22, 0, RD8
  BSR          .L0080113C, R0

.L0080114C:
// i_btesh4.c:472   case 15:	vid_flashblend = (2<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00027C1F, RD8
  BSR          .L0080113C, R0

.L0080114D:
// i_btesh4.c:473   case 16:	vid_flashblend = (3<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00037C1F, RD8
  BSR          .L0080113C, R0

.L0080114E:
// i_btesh4.c:474   case 17:	vid_flashblend = (4<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00047C1F, RD8
  BSR          .L0080113C, R0

.L0080114F:
// i_btesh4.c:475   case 18:	vid_flashblend = (5<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00057C1F, RD8
  BSR          .L0080113C, R0

.L00801150:
// i_btesh4.c:476   case 19:	vid_flashblend = (6<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00067C1F, RD8
  BSR          .L0080113C, R0

.L00801151:
// i_btesh4.c:477   case 20:	vid_flashblend = (7<<16)|I_PIX16_PURP;	break;
  ADD          R0, 0x00077C1F, RD8
  BSR          .L0080113C, R0

.L00801152:
// i_btesh4.c:479   case 21:	vid_flashblend = (2<<16)|I_PIX16_BLUE;	break;
  ADD          R0, 0x0002001F, RD8
  BSR          .L0080113C, R0

.L00801153:
// i_btesh4.c:480   case 22:	vid_flashblend = (2<<16)|I_PIX16_YEL;	break;
  ADD          RD21, 0, RD8
  BSR          .L0080113C, R0

.L00801154:
// i_btesh4.c:482   default:
  ADD          RD0, 0, RD8
// i_btesh4.c:484   break;

.L0080113C:

.L00C023E8:
  MOV.L        RD8, vid_flashblend
  ADD          R2, 256, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 48, R2
  JSR          R1, 0, R0
  .balign 4

tk_sysc_init:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// tk_vf_sysc.c:62   
  MOV          tk_vfile_sysc_vt, RQ18
  ADD          RQ18, 0, RQ10
  BSR          tk_vf_register, R1
// tk_vf_sysc.c:64   
  ADD          R0, 1, RD10

.L00C023EE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

P_CalcHeight:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
// p_user.c:89   player->bob =
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 112), RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 116), RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ8, RQ23, RQ9
  MOV.L        RQ9, (RQ18, 32)
// p_user.c:93   player->bob >>= 2;
  MOV.L        (RQ18, 32), RQ8
  SHAR         RQ8, 2, RQ23
  MOV.L        RQ23, (RQ18, 32)
// p_user.c:95   if (player->bob>MAXBOB)
  MOV.L        (RQ18, 32), RQ9
  LUI          256, RD20
  BRLE.L       RD20, RQ9, .L00802375
// p_user.c:96   player->bob = MAXBOB;
  LUI          256, RD20
  MOV.L        RD20, (RQ18, 32)

.L00802375:
// p_user.c:98   if ((player->cheats & CF_NOMOMENTUM) || !onground)
  MOV.L        (RQ18, 200), RQ8
  ADD          R0, 4, RD20
  BTSTN.L      RD20, RQ8, .L00802377
  MOV.L        onground, RD20
  BREQ.L       R0, RD20, .L00802377
  BSR          .L00802376, R0

.L00802377:
// p_user.c:99   {
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 32), RQ9
  ADDS.L       RQ9, 0x00290000, RQ8
  MOV.L        RQ8, (RQ18, 20)
  MOV.L        (RQ18, 20), RQ23
  MOV.L        (RQ22, 100), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ8
  BRLE.L       RQ8, RQ23, .L00802379
// p_user.c:103   player->viewz = player->mo->ceilingz-4*FRACUNIT;
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 100), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ8
  MOV.L        RQ8, (RQ18, 20)

.L00802379:
// p_user.c:105   player->viewz = player->mo->z + player->viewheight;
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 32), RQ9
  MOV.L        (RQ18, 24), RQ8
  ADDS.L       RQ9, RQ8, RQ23
  MOV.L        RQ23, (RQ18, 20)
// p_user.c:106   return;
  BSR          .L00C023F4, R0

.L00802376:
// p_user.c:110   angle = ((FINEANGLES/20)*leveltime)&FINEMASK;
  MOV.L        leveltime, RD20
  ADD          R0, 409, R5
  MULS.L       RD20, R5, RQ9
  AND          RQ9, 8191, RD20
// p_user.c:111   bob = FixedMul ( player->bob/2, finesine[angle]);
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD20), RQ8
  MOV.L        RD20, (R2, 100)
  MOV.L        (RQ18, 32), RQ23
  ADD          RQ23, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD21
// p_user.c:115   if (player->playerstate == PST_LIVE)
  MOV.L        (RQ18, 8), RQ8
  BRNE.L       R0, RQ8, .L0080237A
// p_user.c:116   {
  MOV.L        (RQ18, 24), RQ23
  MOV.L        (RQ18, 28), RQ9
  ADDS.L       RQ23, RQ9, RQ8
  MOV.L        RQ8, (RQ18, 24)
  MOV.L        (RQ18, 24), RQ23
  LUI          656, RD20
  BRLE.L       RD20, RQ23, .L0080237B
// p_user.c:120   {
  LUI          656, RD20
  MOV.L        RD20, (RQ18, 24)
// p_user.c:122   player->deltaviewheight = 0;
  MOV.L        RD0, (RQ18, 28)

.L0080237B:
  MOV.L        (RQ18, 24), RQ9
  LUI          328, RD20
  BRGE.L       RD20, RQ9, .L0080237C
// p_user.c:126   {
  LUI          328, RD20
  MOV.L        RD20, (RQ18, 24)
  MOV.L        (RQ18, 28), RQ8
  BRGT.L       R0, RQ8, .L0080237D
// p_user.c:129   player->deltaviewheight = 1;
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ18, 28)

.L0080237D:

.L0080237C:
  MOV.L        (RQ18, 28), RQ23
  BREQ.L       R0, RQ23, .L0080237E
// p_user.c:133   {
  MOV.L        (RQ18, 28), RQ9
  ADDS.L       RQ9, 16384, RQ8
  MOV.L        RQ8, (RQ18, 28)
  MOV.L        (RQ18, 28), RQ23
  BRNE.L       R0, RQ23, .L0080237F
// p_user.c:136   player->deltaviewheight = 1;
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ18, 28)

.L0080237F:

.L0080237E:

.L0080237A:
// p_user.c:138   }
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 32), RQ9
  MOV.L        (RQ18, 24), RQ8
  ADDS.L       RQ9, RQ8, RQ23
  ADDS.L       RQ23, RD21, RQ9
  MOV.L        RQ9, (RQ18, 20)
// p_user.c:141   if (player->viewz > player->mo->ceilingz-4*FRACUNIT)
  MOV.L        (RQ18, 20), RQ8
  MOV.L        (RQ22, 100), RQ23
  ADDS.L       RQ23, 0xFFFFFFFFFFFC0000, RQ9
  BRLE.L       RQ9, RQ8, .L00802380
// p_user.c:142   player->viewz = player->mo->ceilingz-4*FRACUNIT;
  MOV.Q        (RQ18, 0), RQ22
  MOV.L        (RQ22, 100), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ8
  MOV.L        RQ8, (RQ18, 20)

.L00802380:

.L00C023F4:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BruisAttack:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:1016   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C023FA
// p_enemy.c:1019   if (P_CheckMeleeRange (actor))
  ADD          RQ9, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B5B
// p_enemy.c:1020   {
  ADD          RQ9, 0, RQ10
  ADD          R0, 55, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1022   damage = (P_Random()%8+1)*10;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 8, RD22
  MODS.L       RQ23, RD22, RQ23
  ADDS.L       RQ23, 1, RQ18
  ADD          R0, 10, R5
  MULS.L       RQ18, R5, RD21
  MOV.L        RD21, (R2, 100)
// p_enemy.c:1023   P_DamageMobj (actor->target, actor, actor, damage);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          RD21, 0, RD13
  BSR          P_DamageMobj, R1
// p_enemy.c:1024   return;
  BSR          .L00C023FA, R0

.L00801B5B:
// p_enemy.c:1028   P_SpawnMissile (actor, actor->target, MT_BRUISERSHOT);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 16, RD12
  BSR          P_SpawnMissile, R1

.L00C023FA:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_sysc_fread:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.X        R22, (R2, 32)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R27, (R2, 48)
  MOV.X        R20, (R2, 16)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.L        RD12, (R2, 112)
  MOV.Q        RQ13, (R2, 104)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:214   
// tk_vf_sysc.c:219   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 88)
// tk_vf_sysc.c:220   
  MOV.Q        (R2, 104), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 128, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:221   
  ADD          RQ23, 8, RQ21
  MOV.Q        (R2, 120), RQ20
  MOV.Q        RQ20, (RQ21, 0)
// tk_vf_sysc.c:222   
  MOV.L        (R2, 116), RD27
  MOV.L        (R2, 112), RD23
  MULS.L       RD27, RD23, RQ18
  ADD          R2, 128, RQ22
  ADD          RQ22, 16, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:223   
  ADD          R2, 88, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4136, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ22, 0, RQ13
  BSR          tk_syscall, R1
// tk_vf_sysc.c:224   

.L00C02400:
  ADD          R2, 432, R2
  MOV.Q        (R2, 56), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R20
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

I_StopSound:
// i_sound_btsh.c:587   handle = 0;
  ADD          R0, 0, RD10

.L00C02401:
  JSR          R1, 0, R0

P_LoadSubsectors:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  MOV.L        RD10, (R2, 108)
// p_setup.c:235   lsz = W_LumpLength (lump);
  MOV.L        (R2, 108), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD20
// p_setup.c:236   if(lsz % sizeof(mapsubsector_t))
  ADD          RD20, 0, RQ21
  ADD          R0, 4, RD27
  MODS.L       RQ21, RD27, RQ21
  BREQ.L       R0, RQ21, .L00801EDD
// p_setup.c:237   __debugbreak();

P_LoadSubsectors.debugbreak_L043F:
  BRK          1087

.L00801EDD:
// p_setup.c:239   numsubsectors = lsz / sizeof(mapsubsector_t);
  ADD          RD20, 0, RD27
  ADD          R0, 4, RD26
  DIVS.L       RD27, RD26, RD27
// p_setup.c:240   subsectors = Z_Malloc (numsubsectors*sizeof(subsector_t),PU_LEVEL_SUBS,0);	
  SHAD.L       RD27, 4, RQ21
  MOV.L        RD27, numsubsectors
  ADD          RQ21, 0, RD10
  ADD          R0, 55, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, subsectors
// p_setup.c:241   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 108), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ27
// p_setup.c:243   ms = (mapsubsector_t *)data;
  ADD          RQ27, 0, RQ9
  MOV.Q        RQ27, (R2, 96)
// p_setup.c:244   memset (subsectors,0, numsubsectors*sizeof(subsector_t));
  MOV.L        numsubsectors, RD25
  SHAD.L       RD25, 4, RQ21
  ADDS.L       RQ21, 0, RQ25
  MOV.Q        subsectors, RQ10
  ADD          R0, 0, RD11
  ADD          RQ25, 0, RQ12
  BSR          memset, R1
// p_setup.c:245   ss = subsectors;
  MOV.Q        subsectors, RQ18
// p_setup.c:247   for (i=0 ; i<numsubsectors ; i++, ss++, ms++)
  ADD          R0, 0, RD23
  MOV.L        numsubsectors, RD13
  BRGE.L       RD13, RD23, .L00801EE0

.L00801EDE:
// p_setup.c:248   {
  MOV.W        (RQ9, 0), RQ8
  MOV.W        RQ8, (RQ18, 8)
// p_setup.c:250   ss->firstline = SHORT(ms->firstseg);
  MOV.W        (RQ9, 2), RQ8
  MOV.W        RQ8, (RQ18, 10)
  ADD          RD23, 0, RQ8
  ADDS.L       RD23, 1, RD23
  ADD          RQ18, 0, RQ22
  ADD          RQ18, 16, RQ18
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 4, RQ9
  MOV.L        numsubsectors, RD27
  BRLT.L       RD27, RD23, .L00801EDE

.L00801EE0:
// p_setup.c:253   Z_ChangeTag (subsectors, PU_LEVEL_SUBS);  //BGB: Debug
  MOV.Q        subsectors, RQ10
  ADD          R0, 55, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:255   Z_Free (data);
  MOV.Q        (R2, 96), RQ10
  BSR          Z_Free, R1

.L00C0240C:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

getsfx:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.Q        RQ11, (R2, 160)
  MOV.Q        RQ12, (R2, 152)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 112)
// i_sound_btsh.c:156   char				name[40];
// i_sound_btsh.c:162   sprintf(name, "ds%s", sfxname);
  ADD          R2, 176, RQ10
  MOV          .L00C01B3C, RQ11
  MOV.Q        (R2, 168), RQ12
  BSR          sprintf, R1
// i_sound_btsh.c:201   sfxlump = W_CheckNumForName(name);
  ADD          R2, 176, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RD22
// i_sound_btsh.c:202   if ( sfxlump < 0 )
  BRGE.L       R0, RD22, .L008011A1
// i_sound_btsh.c:203   {
  MOV          .L00C0241E, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RD22
  BRGE.L       R0, RD22, .L008011A2
// i_sound_btsh.c:206   sfxlump = W_CheckNumForName("STFPOW");
  MOV          .L00C0241F, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RD22

.L008011A2:
  BRGE.L       R0, RD22, .L008011A3
// i_sound_btsh.c:208   sfxlump = W_CheckNumForName("TICTOC");
  MOV          .L00C02420, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RD22

.L008011A3:

.L008011A1:
// i_sound_btsh.c:212   if(sfxlump<0)
  BRGE.L       R0, RD22, .L008011A4
// i_sound_btsh.c:213   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C0241D, R0

.L008011A4:
// i_sound_btsh.c:215   size = W_LumpLength( sfxlump );
  ADD          RD22, 0, RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD27
// i_sound_btsh.c:217   if(size<=0)
  MOV.L        RD27, (R2, 136)
  BRGT.L       R0, RD27, .L008011A5
// i_sound_btsh.c:218   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C0241D, R0

.L008011A5:
// i_sound_btsh.c:226   sfx = (unsigned char*)W_CacheLumpNum( sfxlump, PU_SOUND );
  ADD          RD22, 0, RD10
  ADD          R0, 2, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ26
// i_sound_btsh.c:228   if(!sfx)
  MOV.Q        RQ26, (R2, 144)
  BRNE.Q       R0, RQ26, .L008011A6
// i_sound_btsh.c:229   { __debugbreak(); }

getsfx.debugbreak_L044A:
  BRK          1098

.L008011A6:
// i_sound_btsh.c:231   tg	= ((short *)sfx)[0];
  MOV.Q        (R2, 144), RQ27
  MOV.W        (RQ27, 0), RD26
// i_sound_btsh.c:232   rt	= ((short *)sfx)[1];
  MOV.W        (RQ27, 2), RD25
  MOV.L        RD25, (R2, 132)
// i_sound_btsh.c:233   len	= ((short *)sfx)[2];
  MOV.W        (RQ27, 4), RD21
// i_sound_btsh.c:235   if(tg==7)
  MOV.L        RD26, (R2, 128)
  BRNE.Q       7, RD26, .L008011A7
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, -8, RQ26
  SHAD.L       RQ26, 1, RQ18
  BRLE.L       RQ18, RD21, .L008011A8
// i_sound_btsh.c:238   len=(size-8)*2;
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, -8, RQ26
  SHAD.L       RQ26, 1, RD21

.L008011A8:
  BSR          .L008011A9, R0

.L008011A7:
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, -8, RQ18
  BRLE.L       RQ18, RD21, .L008011AA
// i_sound_btsh.c:242   len=size-8;
  MOV.L        (R2, 136), RD27
  ADDS.L       RD27, -8, RD21

.L008011AA:

.L008011A9:
// i_sound_btsh.c:245   if(len<=0)
  BRGT.L       R0, RD21, .L008011AB
// i_sound_btsh.c:246   return(NULL);
  ADD          RQ0, 0, RQ10
  BSR          .L00C0241D, R0

.L008011AB:
// i_sound_btsh.c:252   paddedsize = ((len + (SAMPLECOUNT-1)) / SAMPLECOUNT) * SAMPLECOUNT;
  ADDS.L       RD21, 255, RQ27
  ADD          RQ27, 0, RQ18
  ADD          R0, 256, RD26
  DIVS.L       RQ18, RD26, RQ18
  SHAD.L       RQ18, 8, RD25
// i_sound_btsh.c:256   paddedsfx = (unsigned char*)Z_Malloc( paddedsize+16, PU_SOUND, 0 );
  ADDS.L       RD25, 16, RQ27
  MOV.L        RD25, (R2, 120)
  ADD          RQ27, 0, RD10
  ADD          R0, 2, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ24
  ADD          RQ24, 0, RQ20
// i_sound_btsh.c:262   if(!paddedsfx)
  BRNE.Q       R0, RQ20, .L008011AC
// i_sound_btsh.c:263   { __debugbreak(); }

getsfx.debugbreak_L044B:
  BRK          1099

.L008011AC:
// i_sound_btsh.c:265   if(tg==7)
  MOV.L        (R2, 128), RD27
  BRNE.Q       7, RD27, .L008011AD
// i_sound_btsh.c:266   {
  MOV.L        (R2, 120), RD27
  ADDS.L       RD27, 8, RQ26
  ADDS.L       RQ26, 0, RQ25
  ADD          RQ20, 0, RQ10
  ADD          R0, 128, RD11
  ADD          RQ25, 0, RQ12
  BSR          memset, R1
// i_sound_btsh.c:269   pred=128;
  ADD          R0, 128, RD24
  MOV.L        RD24, (R2, 124)
// i_sound_btsh.c:270   for(i=0; i<len; i++)
  ADD          R0, 0, RD9
  BRGE.L       RD21, RD9, .L008011B0

.L008011AE:
// i_sound_btsh.c:271   {
  ADD          RD9, 0, RQ18
  ADD          R0, 2, RD27
  DIVS.L       RQ18, RD27, RQ18
  MOV.Q        (R2, 144), RQ26
  ADD          RQ26, RQ18, R5
  MOVU.B       (R5, 8), RD23
// i_sound_btsh.c:273   j=((j>>((i&1)*4))&15)-7;
  AND          RD9, 1, RQ18
  SHAD.L       RQ18, 2, RQ8
  SHAR         RD23, RQ8, RQ18
  AND          RQ18, 15, RQ8
  ADDS.L       RQ8, -7, RD23
// i_sound_btsh.c:274   if(j>=0)
  BRLT.L       R0, RD23, .L008011B1
// i_sound_btsh.c:275   k=j*j;
  MULS.L       RD23, RD23, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L008011B2, R0

.L008011B1:
// i_sound_btsh.c:277   k=-(j*j);
  MULS.L       RD23, RD23, RQ18
  SUBS.L       R0, RQ18, RD27
  MOV.L        RD27, (R2, 140)

.L008011B2:
// i_sound_btsh.c:278   pred=pred+k;
  MOV.L        (R2, 140), RD27
  MOV.L        (R2, 124), RD26
  ADDS.L       RD26, RD27, RD26
// i_sound_btsh.c:279   paddedsfx[8+i]=pred;
  ADD          RQ20, RD9, R5
  MOVU.B       RD26, (R5, 8)
  ADDS.L       RD9, 1, RD9
  MOV.L        RD26, (R2, 124)
  BRLT.L       RD21, RD9, .L008011AE

.L008011B0:
  BSR          .L008011B3, R0

.L008011AD:
// i_sound_btsh.c:286   memcpy(	paddedsfx, sfx, len );
  ADDS.L       RD21, 0, RQ27
  ADD          RQ20, 0, RQ10
  MOV.Q        (R2, 144), RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1
// i_sound_btsh.c:288   for (i=len ; i<paddedsize+8 ; i++)
  ADD          RD21, 0, RD9
  MOV.L        (R2, 120), RD26
  ADDS.L       RD26, 8, RQ8
  BRGE.L       RQ8, RD9, .L008011B6

.L008011B4:
// i_sound_btsh.c:289   paddedsfx[i] = 128;
  ADD          R0, 128, RD27
  MOVU.B       RD27, (RQ20, RD9)
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 120), RD26
  ADDS.L       RD26, 8, RQ18
  BRLT.L       RQ18, RD9, .L008011B4

.L008011B6:

.L008011B3:
// i_sound_btsh.c:293   Z_Free( sfx );
  MOV.Q        (R2, 144), RQ10
  BSR          Z_Free, R1
// i_sound_btsh.c:296   *rlen = paddedsize;
  MOV.Q        (R2, 160), RQ27
  MOV.L        (R2, 120), RD26
  MOV.L        RD26, (RQ27, 0)
// i_sound_btsh.c:297   *rrate = rt;
  MOV.Q        (R2, 152), RQ25
  MOV.L        (R2, 132), RD24
  MOV.L        RD24, (RQ25, 0)
// i_sound_btsh.c:300   return (void *) (paddedsfx + 8);
  ADD          RQ20, 8, RQ13
  ADD          RQ13, 0, RQ10

.L00C0241D:
  ADD          R2, 432, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

tmpnam:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2828   
  MOV          tmpnam/buf!387, RQ13
  MOV.B        (RQ13, 7), RQ9
  ADDS.L       RQ9, 1, RQ8
  MOV.B        RQ8, (RQ13, 7)
// pdpc201/stdio.c:2830   
  BRNE.Q       RQ0, RQ18, .L008004C8
// pdpc201/stdio.c:2831   
  MOV          tmpnam/buf!387, RQ10
  BSR          .L00C02428, R0

.L008004C8:
// pdpc201/stdio.c:2833   
  ADD          RQ18, 0, RQ10
  MOV          tmpnam/buf!387, RQ11
  BSR          strcpy, R1
// pdpc201/stdio.c:2835   
  ADD          RQ18, 0, RQ10

.L00C02428:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

D_PageDrawer:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// d_main.c:547   V_DrawPatchDirectName (0,0, 0, pagename);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        pagename, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C0242E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

WI_drawStats:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -312, R2
  ADD          R0, 50, RD21
// wi_stuff.c:1473   if(!num[0])
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, 0), RQ23
  BREQ.Q       R0, RQ23, .L00C02434
// wi_stuff.c:1476   lh = (3*SHORT(num[0]->height))/2;
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV.W        (RQ23, 2), RQ18
  ADD          R0, 3, R5
  MULS.L       RQ18, R5, RQ9
  ADDS.L       RQ9, 0, RD8
  ADD          R0, 2, RD27
  DIVS.L       RD8, RD27, RD8
// wi_stuff.c:1478   WI_slamBackground();
  BSR          WI_slamBackground, R1
// wi_stuff.c:1481   WI_drawAnimatedBack();
  BSR          WI_drawAnimatedBack, R1
// wi_stuff.c:1483   WI_drawLF();
  BSR          WI_drawLF, R1
// wi_stuff.c:1485   V_DrawPatch(SP_STATSX, SP_STATSY, FB, kills);
  ADD          R0, 50, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/kills, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1486   WI_drawPercent(SCREENWIDTH - SP_STATSX, SP_STATSY, cnt_kills[0]);
  MOV          TU7A00CB85/cnt_kills, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADD          R0, 270, RD10
  ADD          R0, 50, RD11
  ADD          RQ18, 0, RD12
  BSR          WI_drawPercent, R1
// wi_stuff.c:1488   V_DrawPatch(SP_STATSX, SP_STATSY+lh, FB, items);
  ADDS.L       RD8, 50, RQ9
  ADD          R0, 50, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/items, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1489   WI_drawPercent(SCREENWIDTH - SP_STATSX, SP_STATSY+lh, cnt_items[0]);
  MOV          TU7A00CB85/cnt_items, RQ26
  MOV.L        (RQ26, 0), RQ18
  ADDS.L       RD8, 50, RQ9
  ADD          R0, 270, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          WI_drawPercent, R1
// wi_stuff.c:1491   V_DrawPatch(SP_STATSX, SP_STATSY+2*lh, FB, sp_secret);
  SHAD.L       RD8, 1, RQ18
  ADDS.L       RQ18, 50, RQ9
  ADD          R0, 50, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/sp_secret, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1492   WI_drawPercent(SCREENWIDTH - SP_STATSX, SP_STATSY+2*lh, cnt_secret[0]);
  MOV          TU7A00CB85/cnt_secret, RQ26
  MOV.L        (RQ26, 0), RQ18
  SHAD.L       RD8, 1, RQ9
  ADDS.L       RQ9, 50, RQ22
  ADD          R0, 270, RD10
  ADD          RQ22, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          WI_drawPercent, R1
// wi_stuff.c:1494   V_DrawPatch(SP_TIMEX, SP_TIMEY, FB, wi_time);
  ADD          R0, 16, RD10
  ADD          R0, 168, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/wi_time, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1495   WI_drawTime(SCREENWIDTH/2 - SP_TIMEX, SP_TIMEY, cnt_time);
  ADD          R0, 144, RD10
  ADD          R0, 168, RD11
  MOV.L        TU7A00CB85/cnt_time, RD12
  BSR          WI_drawTime, R1
// wi_stuff.c:1497   if (wbs->epsd < 3)
  MOV.Q        TU7A00CB85/wbs, RQ26
  MOV.L        (RQ26, 0), RQ18
  BRGE.L       3, RQ18, .L00802A81
// wi_stuff.c:1498   {
  ADD          R0, 176, RD10
  ADD          R0, 168, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/par, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1500   WI_drawTime(SCREENWIDTH - SP_TIMEX, SP_TIMEY, cnt_par);
  ADD          R0, 304, RD10
  ADD          R0, 168, RD11
  MOV.L        TU7A00CB85/cnt_par, RD12
  BSR          WI_drawTime, R1

.L00802A81:

.L00C02434:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_frecv:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  MOV.X        R26, (R2, 72)
  MOV.X        R18, (R2, 8)
  MOV.X        R22, (R2, 40)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -464, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.L        RD11, (R2, 148)
  MOV.Q        RQ12, (R2, 136)
  MOV.L        RD13, (R2, 132)
  MOV.L        RD14, (R2, 128)
  MOV.Q        RQ15, (R2, 120)
  MOV.L        RD16, (R2, 116)
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 104)
// tk_vf_sysc.c:331   
// tk_vf_sysc.c:336   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 96)
// tk_vf_sysc.c:337   
  MOV.Q        (R2, 152), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 160, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:338   
  ADD          RQ23, 8, RQ21
  MOV.L        (R2, 148), RD20
  MOV.L        RD20, (RQ21, 0)
// tk_vf_sysc.c:339   
  ADD          RQ23, 16, RQ21
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ21, 0)
// tk_vf_sysc.c:340   
  ADD          RQ23, 24, RQ21
  MOV.L        (R2, 132), RD26
  MOV.L        RD26, (RQ21, 0)
// tk_vf_sysc.c:341   
  ADD          RQ23, 32, RQ21
  MOV.L        (R2, 128), RD25
  MOV.L        RD25, (RQ21, 0)
// tk_vf_sysc.c:342   
  ADD          RQ23, 40, RQ21
  MOV.Q        (R2, 120), RQ24
  MOV.Q        RQ24, (RQ21, 0)
// tk_vf_sysc.c:343   
  ADD          RQ23, 48, RQ21
  MOV.L        (R2, 116), RD19
  MOV.L        RD19, (RQ21, 0)
// tk_vf_sysc.c:344   
  ADD          R2, 96, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4145, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          tk_syscall, R1
// tk_vf_sysc.c:345   

.L00C0243A:
  ADD          R2, 464, R2
  MOV.Q        (R2, 88), RQ1
  MOV.Q        (R2, 0), R9
  MOV.X        (R2, 8), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

P_CrossSubsector:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -392, R2
  MOV.L        RD10, (R2, 204)
// p_sight.c:149   divline_t		divl;
// p_sight.c:156   if (num>=numsubsectors)
  MOV.L        (R2, 204), RD27
  MOV.L        numsubsectors, RD26
  BRLT.L       RD26, RD27, .L00802066
// p_sight.c:157   I_Error ("P_CrossSubsector: ss %i with numss = %i",
  MOV          .L00C02441, RQ10
  MOV.L        (R2, 204), RD11
  MOV.L        numsubsectors, RD12
  BSR          I_Error, R1

.L00802066:
// p_sight.c:162   sub = &subsectors[num];
  MOV.Q        subsectors, RQ27
  MOV.L        (R2, 204), RD26
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
// p_sight.c:165   count = sub->numlines;
  MOV.W        (RQ25, 8), RD27
// p_sight.c:166   seg = &segs[sub->firstline];
  MOV.W        (RQ25, 10), RQ18
  MOV.Q        RQ25, (R2, 160)
  MOV.Q        segs, RQ24
  ADD          R0, 56, R5
  MUL.L        RQ18, R5, RQ19
  ADD          RQ24, RQ19, RQ19
  MOV.Q        RQ19, (R2, 192)
// p_sight.c:168   for ( ; count ; seg++, count--)
  MOV.L        RD27, (R2, 172)
  BREQ.L       R0, RD27, .L00802069

.L00802067:
// p_sight.c:169   {
  MOV.Q        (R2, 192), RQ27
  MOV.Q        (RQ27, 32), RQ26
// p_sight.c:173   if (line->validcount == validcount)
  MOV.L        (RQ26, 80), RQ18
  MOV.Q        RQ26, (R2, 184)
  MOV.L        validcount, RD25
  BREQ.Q       RD25, RQ18, .L00802068
// p_sight.c:176   line->validcount = validcount;
  MOV.L        validcount, RD27
  MOV.Q        (R2, 184), RQ26
  MOV.L        RD27, (RQ26, 80)
// p_sight.c:178   v1 = line->v1;
  MOV.Q        (RQ26, 0), RQ27
// p_sight.c:179   v2 = line->v2;
  MOV.Q        (RQ26, 8), RQ25
  MOV.Q        RQ25, (R2, 112)
// p_sight.c:180   s1 = P_DivlineSide (v1->x,v1->y, &strace);
  MOV          strace, RQ23
  MOV.L        (RQ27, 4), RQ18
  MOV.L        (RQ27, 0), RQ9
  MOV.Q        RQ27, (R2, 120)
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  MOV.L        RD10, (R2, 180)
// p_sight.c:181   s2 = P_DivlineSide (v2->x, v2->y, &strace);
  MOV          strace, RQ23
  MOV.L        (RQ25, 4), RQ9
  MOV.L        (RQ25, 0), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  ADD          RQ10, 0, RD24
// p_sight.c:184   if (s1 == s2)
  MOV.L        RD24, (R2, 176)
  MOV.L        (R2, 180), RD19
  BREQ.Q       RD24, RD19, .L00802068
// p_sight.c:187   divl.x = v1->x;
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 0), RQ9
  ADD          R2, 128, RQ26
  MOV.L        RQ9, (RQ26, 0)
// p_sight.c:188   divl.y = v1->y;
  MOV.L        (RQ27, 4), RQ18
  MOV.L        RQ18, (RQ26, 4)
// p_sight.c:189   divl.dx = v2->x - v1->x;
  MOV.Q        (R2, 112), RQ25
  MOV.L        (RQ25, 0), RQ9
  MOV.L        (RQ27, 0), RQ18
  SUBS.L       RQ9, RQ18, RQ8
  MOV.L        RQ8, (RQ26, 8)
// p_sight.c:190   divl.dy = v2->y - v1->y;
  MOV.L        (RQ25, 4), RQ18
  MOV.L        (RQ27, 4), RQ9
  SUBS.L       RQ18, RQ9, RQ8
  MOV.L        RQ8, (RQ26, 12)
// p_sight.c:191   s1 = P_DivlineSide (strace.x, strace.y, &divl);
  ADD          RQ26, 0, RQ23
  MOV          strace, RQ24
  MOV.L        (RQ24, 4), RQ9
  MOV.L        (RQ24, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  MOV.L        RD10, (R2, 180)
// p_sight.c:192   s2 = P_DivlineSide (t2x, t2y, &divl);
  ADD          RQ26, 0, RQ23
  MOV.L        t2x, RD10
  MOV.L        t2y, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_DivlineSide, R1
  ADD          RQ10, 0, RD24
// p_sight.c:195   if (s1 == s2)
  MOV.L        RD24, (R2, 176)
  MOV.L        (R2, 180), RD19
  BREQ.Q       RD24, RD19, .L00802068
// p_sight.c:200   if ( !(line->flags & ML_TWOSIDED) )
  MOV.Q        (R2, 184), RQ27
  MOV.W        (RQ27, 24), RQ9
  ADD          R0, 4, RD26
  BTST.L       RD26, RQ9, .L00C00B4F
// p_sight.c:204   front = seg->frontsector;
  MOV.Q        (R2, 192), RQ27
  MOV.Q        (RQ27, 40), RQ22
// p_sight.c:205   back = seg->backsector;
  MOV.Q        (RQ27, 48), RQ21
// p_sight.c:208   if (front->floorheight == back->floorheight
  MOV.L        (RQ22, 0), RQ8
  MOV.L        (RQ21, 0), RQ18
  BRNE.Q       RQ18, RQ8, .L0080206A
  MOV.L        (RQ22, 4), RQ9
  MOV.L        (RQ21, 4), RQ8
  BRNE.Q       RQ8, RQ9, .L0080206A
  BSR          .L00802068, R0

.L0080206A:
// p_sight.c:214   if (front->ceilingheight < back->ceilingheight)
  MOV.L        (RQ22, 4), RQ18
  MOV.L        (RQ21, 4), RQ9
  BRGE.L       RQ9, RQ18, .L0080206C
// p_sight.c:215   opentop = front->ceilingheight;
  MOV.L        (RQ22, 4), RD27
  MOV.L        RD27, (R2, 156)
  BSR          .L0080206D, R0

.L0080206C:
// p_sight.c:217   opentop = back->ceilingheight;
  MOV.L        (RQ21, 4), RD27
  MOV.L        RD27, (R2, 156)

.L0080206D:
// p_sight.c:220   if (front->floorheight > back->floorheight)
  MOV.L        (RQ22, 0), RQ8
  MOV.L        (RQ21, 0), RQ18
  BRLE.L       RQ18, RQ8, .L0080206E
// p_sight.c:221   openbottom = front->floorheight;
  MOV.L        (RQ22, 0), RD27
  MOV.L        RD27, (R2, 152)
  BSR          .L0080206F, R0

.L0080206E:
// p_sight.c:223   openbottom = back->floorheight;
  MOV.L        (RQ21, 0), RD27
  MOV.L        RD27, (R2, 152)

.L0080206F:
// p_sight.c:226   if (openbottom >= opentop)	
  MOV.L        (R2, 152), RD27
  MOV.L        (R2, 156), RD26
  BRGE.L       RD26, RD27, .L00C00B4F
// p_sight.c:229   frac = P_InterceptVector2 (&strace, &divl);
  ADD          R2, 128, RQ23
  MOV          strace, RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          P_InterceptVector2, R1
  MOV.L        RD10, (R2, 108)
// p_sight.c:231   if (front->floorheight != back->floorheight)
  MOV.L        (RQ22, 0), RQ18
  MOV.L        (RQ21, 0), RQ9
  BREQ.Q       RQ9, RQ18, .L00802070
// p_sight.c:232   {
  MOV.L        (R2, 152), RD27
  MOV.L        sightzstart, RD26
  SUBS.L       RD27, RD26, RQ8
  ADDS.L       RQ8, 0, RD10
  MOV.L        (R2, 108), RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD20
  MOV.L        bottomslope, RD26
  BRLE.L       RD26, RD20, .L00802071
// p_sight.c:235   bottomslope = slope;
  MOV.L        RD20, bottomslope

.L00802071:

.L00802070:
// p_sight.c:238   if (front->ceilingheight != back->ceilingheight)
  MOV.L        (RQ22, 4), RQ18
  MOV.L        (RQ21, 4), RQ9
  BREQ.Q       RQ9, RQ18, .L00802072
// p_sight.c:239   {
  MOV.L        (R2, 156), RD27
  MOV.L        sightzstart, RD26
  SUBS.L       RD27, RD26, RQ8
  ADDS.L       RQ8, 0, RD10
  MOV.L        (R2, 108), RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD20
  MOV.L        topslope, RD26
  BRGE.L       RD26, RD20, .L00802073
// p_sight.c:242   topslope = slope;
  MOV.L        RD20, topslope

.L00802073:

.L00802072:
// p_sight.c:245   if (topslope <= bottomslope)
  MOV.L        topslope, RD27
  MOV.L        bottomslope, RD26
  BRLE.L       RD26, RD27, .L00C00B4F

.L00802068:
  MOV.Q        (R2, 192), RQ27
  MOV.Q        RQ27, (R2, 64)
  ADD          RQ27, 56, RQ27
  MOV.Q        RQ27, (R2, 192)
  MOV.L        (R2, 172), RD26
  ADD          RD26, 0, RQ18
  ADDS.L       RD26, -1, RD26
  MOV.L        RD26, (R2, 172)
  BRNE.L       R0, RD26, .L00802067

.L00802069:
// p_sight.c:249   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C02440, R0

.L00C00B4F:
  ADD          R0, 0, RQ10

.L00C02440:
  ADD          R2, 392, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

A_VileTarget:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:1322   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ18
  BREQ.Q       R0, RQ18, .L00C02447
// p_enemy.c:1325   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1327   fog = P_SpawnMobj (actor->target->x,
  MOV.Q        (RQ9, 176), RQ18
  MOV.L        (RQ18, 32), RQ22
  MOV.L        (RQ18, 24), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ23, 0, RD11
  ADD          RQ22, 0, RD12
  ADD          R0, 4, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ8
// p_enemy.c:1331   actor->tracer = fog;
  MOV.Q        RQ8, (RQ9, 224)
// p_enemy.c:1332   fog->target = actor;
  MOV.Q        RQ9, (RQ8, 176)
// p_enemy.c:1333   fog->tracer = actor->target;
  MOV.Q        (RQ9, 176), RQ18
  MOV.Q        RQ18, (RQ8, 224)
// p_enemy.c:1334   A_Fire (fog);
  ADD          RQ8, 0, RQ10
  BSR          A_Fire, R1

.L00C02447:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

I_PauseSong:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -288, R2
  MOV.L        RD10, (R2, 12)
  MOV.L        i_mus_pause, RD18
  ADD          R0, 1, RD9
// i_bgb_mus_btsh.c:1093   i_mus_pause=1;
  ADD          RD9, 0, RD18

.L00C0244D:
  MOV.L        RD18, i_mus_pause
  ADD          R2, 288, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0
  .balign 4

tk_sysc_fseek:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:242   
// tk_vf_sysc.c:248   
  ADD          RQ0, 0, RQ23
  MOV.Q        RQ23, (R2, 88)
// tk_vf_sysc.c:249   
  MOV.Q        (R2, 120), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 128, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:250   
  ADD          RQ23, 8, RQ21
  MOV.Q        (R2, 112), RQ20
  MOV.Q        RQ20, (RQ21, 0)
// tk_vf_sysc.c:251   
  ADD          RQ23, 16, RQ21
  MOV.L        (R2, 108), RD27
  MOV.L        RD27, (RQ21, 0)
// tk_vf_sysc.c:252   
  ADD          R2, 88, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4138, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          tk_syscall, R1
  ADDS.L       RQ10, 0, RD8
// tk_vf_sysc.c:253   
  MOV.Q        (R2, 88), RQ10

.L00C02453:
  ADD          R2, 424, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

I_MusicSubmit:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// i_bgb_mus_btsh.c:975   {
  BSR          I_MusicFineTick, R1

.L00C02459:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

R_InitSpriteLumps:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -304, R2
// r_data.c:1643   firstspritelump = W_GetNumForName ("S_START") + 1;
  MOV          .L00C02460, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 1, RD27
  MOV.L        RD27, firstspritelump
// r_data.c:1644   lastspritelump = W_GetNumForName ("S_END") - 1;
  MOV          .L00C02461, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, -1, RD27
  MOV.L        RD27, lastspritelump
// r_data.c:1646   j=W_CheckNumForNameBase(firstspritelump-1, "S_END");
  MOV.L        firstspritelump, RD27
  ADDS.L       RD27, -1, RQ18
  ADD          RQ18, 0, RD10
  MOV          .L00C02461, RQ11
  BSR          W_CheckNumForNameBase, R1
  ADDS.L       RQ10, 0, RD8
// r_data.c:1647   k=W_CheckNumForNameBase(firstspritelump-1, "S_START");
  MOV.L        firstspritelump, RD27
  ADDS.L       RD27, -1, RQ18
  ADD          RQ18, 0, RD10
  MOV          .L00C02460, RQ11
  BSR          W_CheckNumForNameBase, R1
  ADD          RQ10, 0, RD23
// r_data.c:1648   while((j>0) && (k>0))
  BSR          .L00802533, R0

.L00802531:
// r_data.c:1649   {
  ADDS.L       RD8, -1, RD27
  MOV.L        RD27, lastspritelump
// r_data.c:1651   firstspritelump=k+1;
  ADDS.L       RD23, 1, RD27
// r_data.c:1652   j=W_CheckNumForNameBase(firstspritelump-1, "S_END");
  ADDS.L       RD27, -1, RQ18
  MOV.L        RD27, firstspritelump
  ADD          RQ18, 0, RD10
  MOV          .L00C02461, RQ11
  BSR          W_CheckNumForNameBase, R1
  ADDS.L       RQ10, 0, RD8
// r_data.c:1653   k=W_CheckNumForNameBase(firstspritelump-1, "S_START");
  MOV.L        firstspritelump, RD27
  ADDS.L       RD27, -1, RQ18
  ADD          RQ18, 0, RD10
  MOV          .L00C02460, RQ11
  BSR          W_CheckNumForNameBase, R1
  ADD          RQ10, 0, RD23

.L00802533:
  CMPGT.Q      RD8, R0, RQ18
  CMPGT.Q      RD23, R0, RQ22
  BTSTN.L      RQ22, RQ18, .L00802531

.L00802532:
// r_data.c:1656   numspritelumps = lastspritelump - firstspritelump + 1;
  MOV.L        lastspritelump, RD27
  MOV.L        firstspritelump, RD26
  SUBS.L       RD27, RD26, RQ18
  ADDS.L       RQ18, 1, RD27
// r_data.c:1657   spritewidth = Z_Malloc (
  ADDS.L       RD27, 16, RQ22
  MOV.L        RD27, numspritelumps
  SHAD.L       RQ22, 2, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, spritewidth
// r_data.c:1659   spriteoffset = Z_Malloc (
  MOV.L        numspritelumps, RD27
  ADDS.L       RD27, 16, RQ22
  SHAD.L       RQ22, 2, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, spriteoffset
// r_data.c:1661   spritetopoffset = Z_Malloc (
  MOV.L        numspritelumps, RD27
  ADDS.L       RD27, 16, RQ22
  SHAD.L       RQ22, 2, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, spritetopoffset
// r_data.c:1664   for (i=0 ; i< numspritelumps ; i++)
  ADD          R0, 0, RD9
  MOV.L        numspritelumps, RD27
  BRGE.L       RD27, RD9, .L00802536

.L00802534:
// r_data.c:1665   {
  ADD          R0, 63, RD27
  BTSTN.L      RD27, RD9, .L00802537
// r_data.c:1667   {
  MOV          .L00C00FE6, RQ10
  BSR          printf, R1
// r_data.c:1669   fflush(stdout);
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ21
  MOV.Q        (RQ21, 0), RQ20
  ADD          RQ20, 0, RQ10
  BSR          fflush, R1

.L00802537:
// r_data.c:1673   spritewidth[i] = 0;
  MOV.Q        spritewidth, RQ27
  MOV.L        RD0, (RQ27, RD9)
// r_data.c:1674   spriteoffset[i] = 0;
  MOV.Q        spriteoffset, RQ27
  MOV.L        RD0, (RQ27, RD9)
// r_data.c:1675   spritetopoffset[i] = 0;
  MOV.Q        spritetopoffset, RQ27
  MOV.L        RD0, (RQ27, RD9)
  ADDS.L       RD9, 1, RD9
  MOV.L        numspritelumps, RD27
  BRLT.L       RD27, RD9, .L00802534

.L00802536:

.L00C0245F:
  ADD          R2, 304, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

P_InterceptVector:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
  ADD          RQ11, 0, RQ22
// p_maputl.c:244   den = FixedMul (v1->dy>>8,v2->dx) - FixedMul(v1->dx>>8,v2->dy);
  MOV.L        (RQ21, 8), RQ8
  MOV.L        (RQ22, 12), RQ9
  SHAR         RQ9, 8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        (RQ21, 12), RQ18
  MOV.L        (RQ22, 8), RQ8
  SHAR         RQ8, 8, RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  SUBS.L       RQ9, RQ8, RD20
// p_maputl.c:246   if (den == 0)
  BREQ.L       R0, RD20, .L00C00B58
// p_maputl.c:250   num =
  MOV.L        (RQ22, 12), RQ9
  MOV.L        (RQ22, 0), RQ18
  MOV.L        (RQ21, 0), RQ23
  SUBS.L       RQ18, RQ23, RQ8
  SHAR         RQ8, 8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  MOV.L        (RQ22, 8), RQ8
  MOV.L        (RQ21, 4), RQ9
  MOV.L        (RQ22, 4), RQ18
  SUBS.L       RQ9, RQ18, RQ27
  SHAR         RQ27, 8, RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ23, RQ18, RD26
  MOV.L        RD26, (R2, 108)
// p_maputl.c:254   frac = FixedDiv (num , den);
  ADD          RD26, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedDiv, R1
  BSR          .L00C02467, R0
// p_maputl.c:256   return frac;

.L00C00B58:
  ADD          R0, 0, RQ10

.L00C02467:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawMasked:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// r_things.c:1351   R_SortVisSprites ();
  BSR          R_SortVisSprites, R1
// r_things.c:1353   if (vissprite_p > vissprites)
  MOV.Q        vissprite_p, RQ22
  MOV          vissprites, RQ13
  BRLE.Q       RQ13, RQ22, .L00802860
// r_things.c:1364   for (spr = vsprsortedhead.next ;
  MOV          vsprsortedhead, RQ22
  MOV.Q        (RQ22, 8), RQ9
  ADD          RQ22, 0, RQ8
  BREQ.Q       RQ8, RQ9, .L00802863

.L00802861:
// r_things.c:1369   R_DrawSprite (spr);
  ADD          RQ9, 0, RQ10
  BSR          R_DrawSprite, R1
  MOV.Q        (RQ9, 8), RQ9
  MOV          vsprsortedhead, RQ8
  BRNE.Q       RQ8, RQ9, .L00802861

.L00802863:

.L00802860:
// r_things.c:1375   for (ds=ds_p-1 ; ds >= drawsegs ; ds--)
  MOV.Q        ds_p, RQ22
  ADD          RQ22, -80, RQ18
  MOV          drawsegs, RQ22
  BRLT.Q       RQ22, RQ18, .L00802866

.L00802864:
// r_things.c:1376   if (ds->maskedtexturecol)
  MOV.Q        (RQ18, 72), RQ8
  BREQ.Q       R0, RQ8, .L00802867
// r_things.c:1377   R_RenderMaskedSegRange (ds, ds->x1, ds->x2);
  MOV.L        (RQ18, 12), RQ22
  MOV.L        (RQ18, 8), RQ23
  ADD          RQ18, 0, RQ10
  ADD          RQ23, 0, RD11
  ADD          RQ22, 0, RD12
  BSR          R_RenderMaskedSegRange, R1

.L00802867:
  ADD          RQ18, -80, RQ18
  MOV          drawsegs, RQ22
  BRGE.Q       RQ22, RQ18, .L00802864

.L00802866:
// r_things.c:1381   if (!viewangleoffset)		
  MOV.L        viewangleoffset, RD22
  BRNE.L       R0, RD22, .L00802868
// r_things.c:1382   R_DrawPlayerSprites ();
  BSR          R_DrawPlayerSprites, R1

.L00802868:

.L00C0246D:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_free:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmllist.c:1026   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_Free, R1

.L00C02473:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

__open:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -896, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RD11, 0, RD21
  ADD          RQ12, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 80)
// pdpc201/btshx_supa.c:384   
// pdpc201/btshx_supa.c:390   
  BSR          tk_vfile_init, R1
// pdpc201/btshx_supa.c:392   
  MOV          .L00C01607, RQ22
// pdpc201/btshx_supa.c:393   
  BRNE.Q       1, RD21, .L00800FAA
// pdpc201/btshx_supa.c:394   
  MOV          .L00C01CB2, RQ22

.L00800FAA:
// pdpc201/btshx_supa.c:395   
  BRNE.Q       2, RD21, .L00800FAB
// pdpc201/btshx_supa.c:396   
  MOV          .L00C0247A, RQ22

.L00800FAB:
// pdpc201/btshx_supa.c:398   
  MOV.Q        (R2, 104), RQ20
// pdpc201/btshx_supa.c:399   
  ADD          R2, 112, RQ10
  ADD          R0, 512, RD11
  ADD          RQ20, 0, RQ12
  BSR          TK_Env_GetCwdQualifyName, R1
// pdpc201/btshx_supa.c:400   
  ADD          R2, 112, RQ10
  ADD          R2, 112, RQ11
  BSR          TKSH_NormalizePath, R1
// pdpc201/btshx_supa.c:408   
  ADD          R2, 112, RQ10
  ADD          RQ22, 0, RQ11
  BSR          tk_fopen, R1
  ADD          RQ10, 0, RQ8
// pdpc201/btshx_supa.c:409   
  BRNE.Q       R0, RQ8, .L00800FAC
// pdpc201/btshx_supa.c:414   
  ADD          R0, -3, RD13
  MOV.L        RD13, (RQ9, 0)
// pdpc201/btshx_supa.c:416   
  ADD          R0, -1, RD10
  BSR          .L00C02479, R0

.L00800FAC:
// pdpc201/btshx_supa.c:423   
  MOV.L        RD0, (RQ9, 0)
// pdpc201/btshx_supa.c:425   
  ADD          R0, 3, RD18
  MOV.L        btshx_tk_nhandles, RD13
  BRGE.L       RD13, RD18, .L00800FAD

.L00800FAE:
// pdpc201/btshx_supa.c:426   
  MOV          btshx_tk_handles, RQ13
  MOV.Q        (RQ13, RD18), RQ23
  BRNE.Q       R0, RQ23, .L00800FAF
// pdpc201/btshx_supa.c:430   
  MOV.L        RD0, (RQ9, 0)
// pdpc201/btshx_supa.c:431   
  MOV          btshx_tk_handles, RQ13
  MOV.Q        RQ8, (RQ13, RD18)
// pdpc201/btshx_supa.c:432   
  ADD          RD18, 0, RD10
  BSR          .L00C02479, R0

.L00800FAF:
  ADDS.L       RD18, 1, RD18
  MOV.L        btshx_tk_nhandles, RD13
  BRLT.L       RD13, RD18, .L00800FAE

.L00800FAD:
// pdpc201/btshx_supa.c:436   
  MOV.L        btshx_tk_nhandles, RD13
  BRLT.L       256, RD13, .L00800FB0
// pdpc201/btshx_supa.c:437   
  MOV          .L00C0247B, RQ10
  ADD          R2, 112, RQ11
  BSR          tk_printf, R1
// pdpc201/btshx_supa.c:441   
  ADD          R0, -1, RD13
  MOV.L        RD13, (RQ9, 0)
// pdpc201/btshx_supa.c:442   
  ADD          R0, -1, RD10
  BSR          .L00C02479, R0

.L00800FB0:
// pdpc201/btshx_supa.c:447   
  MOV.L        RD0, (RQ9, 0)
// pdpc201/btshx_supa.c:448   
  MOV.L        btshx_tk_nhandles, RD13
  ADD          RD13, 0, RD18
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, btshx_tk_nhandles
// pdpc201/btshx_supa.c:449   
  MOV          btshx_tk_handles, RQ13
  MOV.Q        RQ8, (RQ13, RD18)
// pdpc201/btshx_supa.c:450   
  ADD          RD18, 0, RD10

.L00C02479:
  ADD          R2, 896, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

F_Ticker:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
// f_finale.c:213   if ( (gamemode == commercial)
  MOV.L        gamemode, RD21
  ADD          R0, 2, R5
  CMPEQ.Q      RD21, R5, RQ9
  MOV.L        finalecount, RD21
  ADD          R0, 50, R5
  CMPGT.Q      RD21, R5, RQ22
  BTST.L       RQ22, RQ9, .L008012BE
// f_finale.c:217   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008012BF:
// f_finale.c:218   if (players[i].cmd.buttons)
  MOV          players, RQ21
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ21, RQ13, RQ13
  ADD          RQ13, 12, RQ21
  MOVU.B       (RQ21, 7), RQ9
  BRNE.L       R0, RQ9, .L008012C1
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008012BF

.L008012C1:
  BRGE.L       4, RD18, .L008012C2
  MOV.L        gamemap, RD21
  BRNE.Q       30, RD21, .L008012C3
// f_finale.c:224   F_StartCast ();
  BSR          F_StartCast, R1
  BSR          .L008012C4, R0

.L008012C3:
// f_finale.c:226   gameaction = ga_worlddone;
  ADD          R0, 8, RD21
  MOV.L        RD21, gameaction

.L008012C4:

.L008012C2:

.L008012BE:
// f_finale.c:231   finalecount++;
  MOV.L        finalecount, RD21
  ADDS.L       RD21, 1, RD21
  MOV.L        RD21, finalecount
// f_finale.c:233   if (finalestage == 2)
  MOV.L        finalestage, RD21
  BRNE.Q       2, RD21, .L008012C5
// f_finale.c:234   {
  BSR          F_CastTicker, R1
// f_finale.c:236   return;
  BSR          .L00C02481, R0

.L008012C5:
// f_finale.c:239   if ( gamemode == commercial)
  MOV.L        gamemode, RD21
  ADD          R0, 2, RD13
  BREQ.Q       RD13, RD21, .L00C02481
// f_finale.c:242   if (!finalestage && finalecount>strlen (finaletext)*TEXTSPEED + TEXTWAIT)
  MOV.L        finalestage, RD21
  BRNE.L       R0, RD21, .L008012C6
  MOV.Q        finaletext, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ8
  SHAD.Q       RQ8, 1, RQ6
  ADD          RQ8, RQ6, RQ23
  ADD          RQ23, 250, RQ8
  MOV.L        finalecount, RD21
  ADDS.L       RD21, 0, RQ23
  BRLEU.Q      RQ8, RQ23, .L008012C6

.L008012C7:
// f_finale.c:243   {
  MOV.L        RD0, finalecount
// f_finale.c:245   finalestage = 1;
  ADD          R0, 1, RD21
  MOV.L        RD21, finalestage
// f_finale.c:246   wipegamestate = -1;		// force a wipe
  ADD          R0, -1, RD21
  MOV.L        RD21, wipegamestate
  MOV.L        gameepisode, RD21
  BRNE.Q       3, RD21, .L008012C9
// f_finale.c:248   S_StartMusic (mus_bunny);
  ADD          R0, 30, RD10
  BSR          S_StartMusic, R1

.L008012C9:

.L008012C6:

.L00C02481:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

R_Subsector:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
  ADD          RD10, 0, RD20
// r_bsp.c:575   if (num>=numsubsectors)
  MOV.L        numsubsectors, RD27
  BRLT.L       RD27, RD20, .L00802403
// r_bsp.c:576   I_Error ("R_Subsector: ss %i with numss = %i",
  MOV          .L00C02488, RQ10
  ADD          RD20, 0, RD11
  MOV.L        numsubsectors, RD12
  BSR          I_Error, R1

.L00802403:
// r_bsp.c:581   sscount++;
  MOV.L        sscount, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, sscount
// r_bsp.c:582   sub = &subsectors[num];
  MOV.Q        subsectors, RQ27
  SHAD.L       RD20, 4, RQ21
  ADD          RQ27, RQ21, RQ21
// r_bsp.c:583   frontsector = sub->sector;
  MOV.Q        (RQ21, 0), RQ27
// r_bsp.c:584   count = sub->numlines;
  MOV.W        (RQ21, 8), RD9
// r_bsp.c:585   line = &segs[sub->firstline];
  MOV.W        (RQ21, 10), RQ23
  MOV.Q        segs, RQ13
  ADD          R0, 56, R5
  MUL.L        RQ23, R5, RQ18
  ADD          RQ13, RQ18, RQ18
// r_bsp.c:587   if (frontsector->floorheight < viewz)
  MOV.L        (RQ27, 0), RQ23
  MOV.Q        RQ27, frontsector
  MOV.L        viewz, RD27
  BRGE.L       RD27, RQ23, .L00802404
// r_bsp.c:588   {
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ23
  MOV.W        (RQ27, 8), RQ22
  MOV.L        (RQ27, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ22, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          R_FindPlane, R1
  MOV.Q        RQ10, floorplane
  BSR          .L00802405, R0

.L00802404:
// r_bsp.c:594   floorplane = NULL;
  MOV.Q        RQ0, floorplane

.L00802405:
// r_bsp.c:596   if (frontsector->ceilingheight > viewz 
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  MOV.L        viewz, RD27
  BRGT.L       RD27, RQ23, .L00802407
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 10), RQ22
  MOV.L        skyflatnum, RD27
  BREQ.Q       RD27, RQ22, .L00802407
  BSR          .L00802406, R0

.L00802407:
// r_bsp.c:598   {
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ8
  MOV.W        (RQ27, 10), RQ23
  MOV.L        (RQ27, 4), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RD11
  SHAD.Q       RQ8, 48, RD12
  SHAR.Q       RD12, 48, RD12
  BSR          R_FindPlane, R1
  MOV.Q        RQ10, ceilingplane
  BSR          .L00802409, R0

.L00802406:
// r_bsp.c:604   ceilingplane = NULL;
  MOV.Q        RQ0, ceilingplane

.L00802409:
// r_bsp.c:606   R_AddSprites (frontsector);	
  MOV.Q        frontsector, RQ10
  BSR          R_AddSprites, R1
// r_bsp.c:608   while (count--)
  BSR          .L0080240C, R0

.L0080240A:
// r_bsp.c:609   {
  ADD          RQ18, 0, RQ10
  BSR          R_AddLine, R1
// r_bsp.c:611   line++;
  ADD          RQ18, 56, RQ18

.L0080240C:
  ADDS.L       RD9, 0, RQ8
  ADDS.L       RD9, -1, RD9
  BRNE.L       R0, RQ8, .L0080240A

.L0080240B:

.L00C02487:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

vfscanf:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -576, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          RQ11, 0, RQ9
  MOV.Q        RQ12, (R2, 72)
// pdpc201/stdio.c:2846   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 72), RQ11
  MOV.Q        (R2, 88), RQ12
  ADD          RQ0, 0, RQ13
  BSR          vvscanf, R1
// pdpc201/stdio.c:2847   

.L00C0248E:
  ADD          R2, 576, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tk_fsend:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -424, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 180)
  MOV.Q        RQ12, (R2, 168)
  MOV.L        RD13, (R2, 164)
  MOV.L        RD14, (R2, 160)
  MOV.Q        RQ15, (R2, 152)
  MOV.L        RD16, (R2, 148)
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1167   
  BREQ.Q       R0, RQ9, .L00800B93
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B93
  BSR          .L00800B94, R0

.L00800B93:
// tk_core/tk_vfile.c:1169   

tk_fsend.debugbreak_L0456:
  BRK          1110

.L00800B94:
// tk_core/tk_vfile.c:1171   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B95
// tk_core/tk_vfile.c:1172   

tk_fsend.debugbreak_L0457:
  BRK          1111

.L00800B95:
// tk_core/tk_vfile.c:1174   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 168), RQ8
  BREQ.Q       R0, RQ8, .L00800B96
// tk_core/tk_vfile.c:1175   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 168), RQ22
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 180), RD11
  MOV.Q        (R2, 168), RQ12
  MOV.L        (R2, 164), RD13
  MOV.L        (R2, 160), RD14
  MOV.Q        (R2, 152), RQ15
  MOV.L        (R2, 148), RD16
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C0249E, R0

.L00800B96:
// tk_core/tk_vfile.c:1178   
  ADD          R0, -1, RD10

.L00C0249E:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

M_StringHeight:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ22
// m_menu.c:1340   if(!hu_font[0])
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, 0), RQ26
  BRNE.Q       R0, RQ26, .L00801685
// m_menu.c:1341   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C024A6, R0

.L00801685:
// m_menu.c:1343   height = SHORT(hu_font[0]->height);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.W        (RQ26, 2), RD20
// m_menu.c:1345   h = height;
  ADD          RD20, 0, RD23
// m_menu.c:1346   for (i = 0;i < strlen(string);i++)
  ADD          R0, 0, RD18
  ADD          RQ22, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RD18, 0, RQ8
  BRGEU.Q      RQ9, RQ8, .L00801688

.L00801686:
// m_menu.c:1347   if (string[i] == '\n')
  MOV.B        (RQ22, RD18), RQ21
  BRNE.Q       10, RQ21, .L00801689
// m_menu.c:1348   h += height;
  ADDS.L       RD23, RD20, RD23

.L00801689:
  ADDS.L       RD18, 1, RD18
  ADD          RQ22, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RD18, 0, RQ8
  BRLTU.Q      RQ9, RQ8, .L00801686

.L00801688:
// m_menu.c:1350   return h;
  ADD          RD23, 0, RD10

.L00C024A6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

tkgWriteSamples:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -392, R2
  MOV.L        RD10, (R2, 140)
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
  MOV.L        RD13, (R2, 120)
// tk_gdi/tkg_display.c:553   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:554   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 112), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 140), RD11
  MOV.Q        (R2, 128), RQ12
  MOV.L        (R2, 124), RD13
  MOV.L        (R2, 120), RD14
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C024AC:
  ADD          R2, 392, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

G_WorldDone:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// g_game.c:1171   {
  ADD          R0, 8, RD18
  MOV.L        RD18, gameaction
// g_game.c:1174   if (secretexit)
  MOV.L        secretexit, RD18
  BREQ.L       R0, RD18, .L008015D7
// g_game.c:1175   players[consoleplayer].didsecret = true;
  MOV          players, RQ18
  MOV.L        consoleplayer, RD13
  ADD          R0, 320, R5
  MUL.L        RD13, R5, RQ12
  ADD          RQ18, RQ12, RQ12
  ADD          R0, 1, RD18
  MOV.L        RD18, (RQ12, 312)

.L008015D7:
// g_game.c:1177   if ( gamemode == commercial )
  MOV.L        gamemode, RD18
  BRNE.Q       2, RD18, .L008015D8
// g_game.c:1178   {
  MOV.L        gamemap, RD18
  BREQ.Q       15, RD18, .L008015DA
  MOV.L        gamemap, RD18
  BREQ.Q       31, RD18, .L008015DB
  MOV.L        gamemap, RD18
  BREQ.Q       6, RD18, .L008015DC
  MOV.L        gamemap, RD18
  BREQ.Q       11, RD18, .L008015DD
  MOV.L        gamemap, RD18
  BREQ.Q       20, RD18, .L008015DE
  MOV.L        gamemap, RD18
  BREQ.Q       30, RD18, .L008015DF
  BSR          .L008015D9, R0

.L008015DA:

.L008015DB:
// g_game.c:1182   case 31:
  MOV.L        secretexit, RD18
  BREQ.L       R0, RD18, .L008015D9

.L008015DC:

.L008015DD:

.L008015DE:

.L008015DF:
// g_game.c:1188   case 30:
  BSR          F_StartFinale, R1
// g_game.c:1190   break;

.L008015D9:

.L008015D8:

.L00C024B2:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

G_DoReborn:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD23
// g_game.c:951   if (!netgame)
  MOV.L        netgame, RD22
  BRNE.L       R0, RD22, .L008015A0
// g_game.c:954   gameaction = ga_loadlevel;
  ADD          R0, 1, RD22
  MOV.L        RD22, gameaction
  BSR          .L008015A1, R0

.L008015A0:
// g_game.c:961   players[playernum].mo->player = NULL;
  MOV          players, RQ22
  ADD          R0, 320, R5
  MUL.L        RD23, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        RQ0, (RQ8, 192)
  MOV.L        deathmatch, RD22
  BREQ.L       R0, RD22, .L008015A2
// g_game.c:965   {
  ADD          RD23, 0, RD10
  BSR          G_DeathMatchSpawnPlayer, R1
// g_game.c:967   return;
  BSR          .L00C024B8, R0

.L008015A2:
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD23, R5, RQ8
  ADD          RQ22, RQ8, RQ8
  ADD          RD23, 0, RD10
  ADD          RQ8, 0, RQ11
  BSR          G_CheckSpot, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008015A3
// g_game.c:971   {
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD23, R5, RQ8
  ADD          RQ22, RQ8, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_SpawnPlayer, R1
// g_game.c:973   return;
  BSR          .L00C024B8, R0

.L008015A3:
// g_game.c:977   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008015A4:
// g_game.c:978   {
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD18, R5, RQ8
  ADD          RQ22, RQ8, RQ8
  ADD          RD23, 0, RD10
  ADD          RQ8, 0, RQ11
  BSR          G_CheckSpot, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008015A7
// g_game.c:980   {
  ADDS.L       RD23, 1, RQ9
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.W        RQ9, (RQ21, 10)
// g_game.c:982   P_SpawnPlayer (&playerstarts[i]);
  ADD          R0, 20, R5
  MUL.L        RD18, R5, RQ8
  ADD          RQ22, RQ8, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_SpawnPlayer, R1
// g_game.c:983   playerstarts[i].type = i+1;		// restore
  ADDS.L       RD18, 1, RQ9
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.W        RQ9, (RQ21, 10)
// g_game.c:984   return;
  BSR          .L00C024B8, R0

.L008015A7:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015A4

.L008015A6:
// g_game.c:987   }
  MOV          playerstarts, RQ22
  ADD          R0, 20, R5
  MUL.L        RD23, R5, RQ8
  ADD          RQ22, RQ8, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_SpawnPlayer, R1

.L008015A1:

.L00C024B8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

I_BaseTiccmd:
// i_btesh4.c:284   {
  MOV          emptycmd, RQ13
  ADD          RQ13, 0, RQ12
  ADD          RQ12, 0, RQ10

.L00C024B9:
  JSR          R1, 0, R0

P_FireWeapon:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
// p_pspr.c:252   if (!P_CheckAmmo (player))
  ADD          RQ9, 0, RQ10
  BSR          P_CheckAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C024BF
// p_pspr.c:255   P_SetMobjState (player->mo, S_PLAY_ATK1);
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          R0, 154, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:256   newstate = weaponinfo[player->readyweapon].atkstate;
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ22
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 16), RD23
// p_pspr.c:257   P_SetPsprite (player, ps_weapon, newstate);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RD23, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:258   P_NoiseAlert (player->mo, player->mo);
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          P_NoiseAlert, R1

.L00C024BF:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

V_DrawBlockCmap:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.L        RD12, (R2, 132)
  ADD          RD13, 0, RD23
  MOV.L        RD14, (R2, 124)
  ADD          RQ15, 0, RQ21
  MOV.Q        RQ16, (R2, 104)
// v_video.c:686   if (x<0
  MOV.L        (R2, 140), RD13
  CMPLT.Q      RD13, R0, RQ9
  ADDS.L       RD13, RD23, RQ8
  ADD          R0, 320, R5
  CMPGT.Q      RQ8, R5, RQ20
  OR           RQ9, RQ20, RQ8
  MOV.L        (R2, 136), RD12
  CMPLT.Q      RD12, R0, RQ20
  OR           RQ8, RQ20, RQ9
  BRNE.L       R0, RQ9, .L00802B37
  MOV.L        (R2, 136), RD13
  MOV.L        (R2, 124), RD12
  ADDS.L       RD13, RD12, RQ8
  BRGT.L       200, RQ8, .L00802B37

.L00802B38:
  MOV.L        (R2, 132), RD13
  ADDU.L       RD13, R0, RQ20
  BRGTU.L      4, RQ20, .L00802B37
  BSR          .L00802B36, R0

.L00802B37:
// v_video.c:691   {
  MOV          .L00C01C31, RQ10
  BSR          I_Error, R1

.L00802B36:
// v_video.c:696   V_MarkRect (x, y, width, height); 
  MOV.L        (R2, 140), RD10
  MOV.L        (R2, 136), RD11
  ADD          RD23, 0, RD12
  MOV.L        (R2, 124), RD13
  BSR          V_MarkRect, R1
// v_video.c:698   dest = screens[scrn] + y*SCREENWIDTH+x; 
  MOV          screens, RQ13
  MOV.L        (R2, 132), RD12
  MOV.Q        (RQ13, RD12), RQ11
  MOV.L        (R2, 136), RD13
  ADD          R0, 320, R5
  MULS.L       RD13, R5, RQ9
  LEA.W        RQ11, RQ9, RQ10
  MOV.L        (R2, 140), RD17
  LEA.W        RQ10, RD17, RQ22
// v_video.c:700   while (height--) 
  BSR          .L00802B3C, R0

.L00802B3A:
// v_video.c:701   {
  ADD          R0, 0, RD18
  BRGE.L       RD23, RD18, .L00802B3F

.L00802B3D:
// v_video.c:708   dest[i]=cmap[src[i]];
  MOVU.B       (RQ21, RD18), RQ9
  MOV.Q        (R2, 104), RQ13
  MOVU.W       (RQ13, RQ9), RQ8
  MOVU.W       RQ8, (RQ22, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD23, RD18, .L00802B3D

.L00802B3F:
// v_video.c:709   }
  ADD          RQ21, RD23, RQ21
// v_video.c:711   dest += SCREENWIDTH; 
  ADD          RQ22, 640, RQ22

.L00802B3C:
  MOV.L        (R2, 124), RD13
  ADD          RD13, 0, RQ20
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, (R2, 124)
  BRNE.L       R0, RQ20, .L00802B3A

.L00802B3B:

.L00C024C5:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

I_Init:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// i_btesh4.c:170   {
  BSR          I_InitSound, R1

.L00C024CB:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

P_GiveBody:
// p_inter.c:234   {
  MOV.L        (RQ10, 36), RQ13
  BRGE.L       100, RQ13, .L00C00B78
// p_inter.c:238   player->health += num;
  MOV.L        (RQ10, 36), RQ13
  ADDS.L       RQ13, RD11, RQ12
  MOV.L        RQ12, (RQ10, 36)
// p_inter.c:239   if (player->health > MAXHEALTH)
  MOV.L        (RQ10, 36), RQ13
  BRLE.L       100, RQ13, .L00801C5C
// p_inter.c:240   player->health = MAXHEALTH;
  ADD          R0, 100, RD17
  MOV.L        RD17, (RQ10, 36)

.L00801C5C:
// p_inter.c:241   player->mo->health = player->health;
  MOV.L        (RQ10, 36), RQ12
  MOV.Q        (RQ10, 0), RQ17
  MOV.L        RQ12, (RQ17, 164)
// p_inter.c:243   return true;
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00C00B78:
  ADD          R0, 0, RQ10

.L00C024CC:
  JSR          R1, 0, R0
  .balign 4

I_ZoneBase:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
// i_btesh4.c:182   *size = mb_used*1024*1024;
  MOV.L        mb_used, RD20
  SHAD.L       RD20, 10, RQ18
  SHAD.L       RQ18, 10, RQ23
  MOV.L        RQ23, (RQ21, 0)
// i_btesh4.c:183   ptr = (byte *) malloc (*size);
  ADDS.L       RQ23, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ22
  ADD          RQ22, 0, RQ8
// i_btesh4.c:185   memset(ptr, 0, *size);
  MOV.L        (RQ21, 0), RQ18
  ADDS.L       RQ18, 0, RQ9
  ADD          RQ8, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ9, 0, RQ12
  BSR          memset, R1
// i_btesh4.c:187   if(((long)ptr)&15)
  ADD          R0, 15, RQ20
  BTST.Q       RQ20, RQ8, .L00801134
// i_btesh4.c:188   __debugbreak();

I_ZoneBase.debugbreak_L045D:
  BRK          1117

.L00801134:
// i_btesh4.c:190   TKMM_Malloc(1);
  ADD          R0, 1, RD10
  BSR          TKMM_Malloc, R1
// i_btesh4.c:191   return ptr;
  ADD          RQ8, 0, RQ10

.L00C024D7:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

M_SaveGame:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// m_menu.c:673   {
  MOV.L        usergame, RD13
  BRNE.L       R0, RD13, .L00801641
// m_menu.c:675   {
  MOV          .L00C024DF, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:677   return;
  BSR          .L00C024DE, R0

.L00801641:
// m_menu.c:680   if (gamestate != GS_LEVEL)
  MOV.L        gamestate, RD13
  BRNE.L       R0, RD13, .L00C024DE
// m_menu.c:683   M_SetupNextMenu(&SaveDef);
  MOV          SaveDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1
// m_menu.c:684   M_ReadSaveStrings();
  BSR          M_ReadSaveStrings, R1

.L00C024DE:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

log:
  ADD          R2, -144, R2
  MOV.Q        RQ1, (R2, 136)
  MOV.Q        R58, (R2, 120)
  MOV.Q        R59, (R2, 128)
  MOV.Q        R52, (R2, 72)
  MOV.Q        R53, (R2, 80)
  MOV.Q        R40, (R2, 40)
  MOV.Q        R41, (R2, 48)
  MOV.Q        R9, (R2, 0)
  MOV.Q        R54, (R2, 88)
  MOV.Q        R55, (R2, 96)
  MOV.X        R24, (R2, 24)
  MOV.Q        R56, (R2, 104)
  MOV.Q        R57, (R2, 112)
  MOV.Q        R50, (R2, 56)
  MOV.Q        R51, (R2, 64)
  MOV.X        R18, (R2, 8)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
// pdpc201/math.c:618   
  MOV.Q        (R2, 120), RQ56
  FCMP/GT      RQ56, RQ0, RQ6
  BRNE.Q       RQ6, R0, .L00800888
// pdpc201/math.c:621   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 33, RD9
  MOV.L        RD9, (RQ18, 0)
// pdpc201/math.c:622   
  ADD          R0, 0x4F16A3A2, RQ10
  LDSH32       RQ10, 0x75D49490, RQ10
  BSR          .L00C024E5, R0

.L00800888:
// pdpc201/math.c:623   
  MOV.Q        (R2, 120), RQ56
  ADD          R0, 0x3FF00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/EQ      RQ56, RQ57, RQ6
  BREQ.Q       RQ6, R0, .L00800889
// pdpc201/math.c:625   
  ADD          RQ0, 0, RQ10
  BSR          .L00C024E5, R0

.L00800889:
// pdpc201/math.c:688   
  ADD          R0, 0, RD9
  MOV.L        RD9, (R2, 112)
  MOV.Q        (R2, 120), RQ57
  FMOV         RQ57, RQ56
// pdpc201/math.c:690   
  ADD          R2, 112, RQ18
  MOV.Q        RQ56, (R2, 80)
  FMOVDI       RQ57, RQ10
  ADD          RQ18, 0, RQ11
  BSR          frexp, R1
  FMOVID       RQ10, RQ56
// pdpc201/math.c:691   
  ADD          R0, 0x3FF00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ58
  FSUB         RQ56, RQ58, RQ56
// pdpc201/math.c:693   
// pdpc201/math.c:695   
  ADD          R0, 2, RD9
  MOV.L        RD9, (R2, 116)
// pdpc201/math.c:696   
  FMOV         RQ56, RQ59
// pdpc201/math.c:697   
  FMOV         RQ56, RQ40
// pdpc201/math.c:699   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:700   
  ADD          R0, 0x3FE00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ50
  FMUL         RQ59, RQ50, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:701   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:702   
  ADD          R0, 0x3FD55555, R5
  LDSH32       R5, 0x55555558, R5
  FMOVID       R5, RQ51
  FMUL         RQ59, RQ51, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:703   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:704   
  ADD          R0, 0x3FD00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ52
  FMUL         RQ59, RQ52, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:705   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:706   
  ADD          R0, 0x3FC99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ53
  FMUL         RQ59, RQ53, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:707   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:708   
  ADD          R0, 0x3FC55555, R5
  LDSH32       R5, 0x55555558, R5
  FMOVID       R5, RQ54
  FMUL         RQ59, RQ54, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:709   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:710   
  ADD          R0, 0x3FC24924, R5
  LDSH32       R5, 0x0000000092492490, R5
  FMOVID       R5, RQ55
  FMUL         RQ59, RQ55, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:711   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:712   
  ADD          R0, 0x3FC00000, RQ19
  LDSH32       RQ19, 0, RQ19
  FMUL         RQ59, RQ19, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:713   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:714   
  ADD          R0, 0x3FBC71C7, RQ24
  LDSH32       RQ24, 0x1C71C718, RQ24
  FMUL         RQ59, RQ24, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:715   
  FMUL         RQ59, RQ56, RQ41
  FNEG         RQ41, RQ59
// pdpc201/math.c:716   
  ADD          R0, 0x3FB99999, RQ25
  LDSH32       RQ25, 0x0000000099999998, RQ25
  FMUL         RQ59, RQ25, RQ41
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:717   
  FMUL         RQ59, RQ56, RQ41
  MOV.Q        RQ56, (R2, 80)
  FNEG         RQ41, RQ59
// pdpc201/math.c:718   
  ADD          R0, 0x3FB745D1, R5
  LDSH32       R5, 0x745D1748, R5
  FMOVID       R5, RQ56
  FMUL         RQ59, RQ56, RQ41
  MOV.Q        RQ59, (R2, 104)
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:720   
  MOV.L        (R2, 112), RD9
  FLDCI        RD9, RQ57
// pdpc201/math.c:721   
  ADD          R0, 0x3FE62E42, RQ9
  LDSH32       RQ9, 0x00000000FEFA39F0, RQ9
  FMUL         RQ57, RQ9, RQ41
  MOV.Q        RQ57, (R2, 88)
  FADD         RQ40, RQ41, RQ40
// pdpc201/math.c:722   
  MOV.Q        RQ40, (R2, 96)
  FMOVDI       RQ40, RQ10

.L00C024E5:
  ADD          R2, 336, R2
  MOV.Q        (R2, 136), RQ1
  MOV.Q        (R2, 0), R9
  MOV.X        (R2, 8), R18
  MOV.X        (R2, 24), R24
  MOV.Q        (R2, 40), R40
  MOV.Q        (R2, 48), R41
  MOV.Q        (R2, 56), R50
  MOV.Q        (R2, 64), R51
  MOV.Q        (R2, 72), R52
  MOV.Q        (R2, 80), R53
  MOV.Q        (R2, 88), R54
  MOV.Q        (R2, 96), R55
  MOV.Q        (R2, 104), R56
  MOV.Q        (R2, 112), R57
  MOV.Q        (R2, 120), R58
  MOV.Q        (R2, 128), R59
  ADD          R2, 144, R2
  JSR          RQ1, 0, R0
  .balign 4

tkgDeviceMidiCommand:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -360, R2
  MOV.L        RD10, (R2, 124)
  MOV.Q        RQ11, (R2, 112)
// tk_gdi/tkg_display.c:528   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:530   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ21
  MOV.Q        (R2, 112), RQ20
  MOV.L        (RQ20, 0), RQ10
  MOV.L        (RQ20, 4), RQ11
  MOV.L        (RQ20, 8), RQ12
  MOV.L        RQ10, (RQ21, 0)
  MOV.L        RQ11, (RQ21, 4)
  MOV.L        RQ12, (RQ21, 8)
// tk_gdi/tkg_display.c:532   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 96), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 124), RD11
  ADD          R0, 0x646D636D, RD12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  ADD          RQ0, 0, RQ14
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C024EB:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

ExtractFileBase:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RQ11, 0, RQ21
// w_wad.c:130   src = path + strlen(path) - 1;
  MOV.Q        (R2, 104), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ20
  MOV.Q        (R2, 104), RQ27
  ADD          RQ27, RQ20, RQ8
  ADD          RQ8, -1, RQ18
// w_wad.c:133   while (src != path
  BSR          .L0080287E, R0

.L0080287C:
// w_wad.c:136   {
  ADD          RQ18, -1, RQ18

.L0080287E:
  MOV.Q        (R2, 104), RQ20
  BREQ.Q       RQ20, RQ18, .L0080287F
  ADD          RQ18, -1, RQ8
  MOV.B        (RQ8, 0), RQ9
  BREQ.Q       92, RQ9, .L0080287F

.L00802880:
  ADD          RQ18, -1, RQ8
  MOV.B        (RQ8, 0), RQ9
  BREQ.Q       47, RQ9, .L0080287F
  BSR          .L0080287C, R0

.L0080287F:

.L0080287D:
// w_wad.c:141   memset (dest,0,8);
  MOV.Q        RQ0, (RQ21, 0)
// w_wad.c:142   length = 0;
  ADD          R0, 0, RD22
// w_wad.c:144   while (*src && *src != '.')
  BSR          .L00802884, R0

.L00802882:
// w_wad.c:145   {
  ADDS.L       RD22, 1, RD22
  BRNE.Q       9, RD22, .L00802885
// w_wad.c:147   I_Error ("Filename base of %s >8 chars",path);
  MOV          .L00C024F2, RQ10
  MOV.Q        (R2, 104), RQ11
  BSR          I_Error, R1

.L00802885:
// w_wad.c:149   *dest++ = toupper((int)*src++);
  MOV.B        (RQ18, 0), RQ9
  ADD          RQ18, 1, RQ18
  ADDS.L       RQ9, 0, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ21, 0, RQ8
  ADD          RQ21, 1, RQ21
  MOV.B        RQ23, (RQ8, 0)

.L00802884:
  MOV.B        (RQ18, 0), RQ9
  BREQ.L       R0, RQ9, .L00802886
  MOV.B        (RQ18, 0), RQ23
  BREQ.Q       46, RQ23, .L00802886
  BSR          .L00802882, R0

.L00802886:

.L00802883:

.L00C024F1:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

TKDFS_NormalizePathUtf8:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RQ11, 0, RQ22
  MOV.L        RD12, (R2, 92)
// tk_core/tk_rwad.c:1596   
  ADD          RQ22, 0, RQ18
// tk_core/tk_rwad.c:1597   
  MOVU.B       (RQ18, 0), RD9
// tk_core/tk_rwad.c:1598   
  BSR          .L00800F91, R0

.L00800F92:
  ADD          RQ18, 0, RQ8
  MOVU.B       (RQ18, 0), RD9
  ADD          RQ8, 1, RQ18

.L00800F91:
  BREQ.L       R0, RD9, .L00800F93
  ADD          R0, 128, RD13
  BTSTN.L      RD13, RD9, .L00800F93
  BSR          .L00800F92, R0

.L00800F93:

.L00800F94:
  SUB          RQ18, RQ22, RQ23
  ADDS.L       RQ23, 0, RD21
// tk_core/tk_rwad.c:1601   
  BRNE.L       R0, RD9, .L00800F95
// tk_core/tk_rwad.c:1602   
  ADDS.L       RD21, 1, RQ20
  ADDS.L       RQ20, 0, RQ23
  MOV.Q        (R2, 104), RQ10
  ADD          RQ22, 0, RQ11
  ADD          RQ23, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_rwad.c:1604   
  ADD          R0, 0, RD10
  BSR          .L00C024F8, R0

.L00800F95:
// tk_core/tk_rwad.c:1607   
  MOV.Q        (R2, 104), RQ10
  ADD          RQ22, 0, RQ11
  MOV.L        (R2, 92), RD12
  BSR          TKDFS_NormalizePathUtf8I, R1
// tk_core/tk_rwad.c:1608   
  ADD          R0, 1, RD10

.L00C024F8:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

tkgModifyDisplay:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -392, R2
  MOV.L        RD10, (R2, 140)
  MOV.L        RD11, (R2, 136)
  MOV.Q        RQ12, (R2, 128)
  MOV.Q        RQ13, (R2, 120)
// tk_gdi/tkg_display.c:404   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:405   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 56), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 140), RD11
  MOVU.L       (R2, 136), RD12
  MOV.Q        (R2, 128), RQ13
  MOV.Q        (R2, 120), RQ14
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C024FE:
  ADD          R2, 392, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_oprsub_bigi:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -472, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.Q        RQ11, (R2, 80)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:273   
// tk_core/lva_tagopr.c:275   
  MOV.Q        (R2, 88), RQ10
  MOV.Q        (R2, 80), RQ11
  ADD          R2, 96, RQ12
  BSR          tkmm_bigint_add, R1
// tk_core/lva_tagopr.c:276   
  ADD          R2, 96, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C02504:
  ADD          R2, 472, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

__sock_setupaddrlenrecv:
// pdpc201/btshx_supa.c:495   
  BREQ.Q       R0, RQ10, .L00800FB4
// pdpc201/btshx_supa.c:497   
  MOV.L        RD0, (RQ10, 0)

.L00800FB4:

.L00C02505:
  JSR          R1, 0, R0

R_InitSkyMap:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -272, R2
  MOV.L        skytexturemid, RD18
  LUI          1600, RD9
// r_sky.c:61   skytexturemid = 100*FRACUNIT;
  ADD          RD9, 0, RD18

.L00C0250B:
  MOV.L        RD18, skytexturemid
  ADD          R2, 272, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0
  .balign 4

F_TextWrite:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
// f_finale.c:276   src = W_CacheFlatName ( finaleflat , PU_CACHE);
  MOV.Q        finaleflat, RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheFlatName, R1
  MOV.Q        RQ10, (R2, 120)
// f_finale.c:277   dest = screens[0];
  MOV          screens, RQ27
  MOV.Q        (RQ27, 0), RQ21
// f_finale.c:279   for (y=0 ; y<SCREENHEIGHT ; y++)
  MOV.L        RD0, (R2, 116)

.L008012CA:
// f_finale.c:294   {
  ADD          R0, 0, RD20

.L008012CD:
// f_finale.c:296   {
  ADD          R0, 0, RD18

.L008012D0:
// f_finale.c:300   dest[w]=colormaps[(src+((y&63)<<6))[w]];
  MOV.L        (R2, 116), RD27
  AND          RD27, 63, RQ8
  SHAD.L       RQ8, 6, RQ9
  MOV.Q        (R2, 120), RQ13
  ADD          RQ13, RQ9, RQ23
  MOVU.B       (RQ23, RD18), RQ8
  MOV.Q        colormaps, RQ12
  MOVU.W       (RQ12, RQ8), RQ9
  MOVU.W       RQ9, (RQ21, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       64, RD18, .L008012D0

.L008012D2:
// f_finale.c:301   }
  ADD          RQ21, 128, RQ21
  ADDS.L       RD20, 1, RD20
  BRLT.L       5, RD20, .L008012CD

.L008012CF:
  MOV.L        (R2, 116), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 116)
  BRLT.L       200, RD27, .L008012CA

.L008012CC:
// f_finale.c:316   V_MarkRect (0, 0, SCREENWIDTH, SCREENHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 200, RD13
  BSR          V_MarkRect, R1
// f_finale.c:319   cx = 10;
  ADD          R0, 10, RD27
  MOV.L        RD27, (R2, 100)
// f_finale.c:320   cy = 10;
  MOV.L        RD27, (R2, 96)
// f_finale.c:321   ch = finaletext;
  MOV.Q        finaletext, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, (R2, 104)
// f_finale.c:323   count = (finalecount - 10)/TEXTSPEED;
  MOV.L        finalecount, RD13
  ADDS.L       RD13, -10, RQ8
  ADDS.L       RQ8, 0, RD13
  ADD          R0, 3, RD11
  DIVS.L       RD13, RD11, RD13
// f_finale.c:324   if (count < 0)
  MOV.L        RD13, (R2, 112)
  BRGE.L       R0, RD13, .L008012D3
// f_finale.c:325   count = 0;
  MOV.L        RD0, (R2, 112)

.L008012D3:
// f_finale.c:326   for ( ; count ; count-- )
  MOV.L        (R2, 112), RD27
  BREQ.L       R0, RD27, .L008012D6

.L008012D4:
// f_finale.c:327   {
  MOV.Q        (R2, 104), RQ27
  MOV.B        (RQ27, 0), RD22
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 104)
// f_finale.c:329   if (!c)
  BREQ.L       R0, RD22, .L008012D6
// f_finale.c:331   if (c == '\n')
  BRNE.Q       10, RD22, .L008012D7
// f_finale.c:332   {
  ADD          R0, 10, RD27
  MOV.L        RD27, (R2, 100)
// f_finale.c:334   cy += 11;
  MOV.L        (R2, 96), RD13
  ADDS.L       RD13, 11, RD13
  MOV.L        RD13, (R2, 96)
// f_finale.c:335   continue;
  BSR          .L008012D5, R0

.L008012D7:
// f_finale.c:338   c = toupper(c) - HU_FONTSTART;
  ADD          RD22, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, -33, RD22
// f_finale.c:339   if (c < 0 || c> HU_FONTSIZE)
  CMPLT.Q      RD22, R0, RQ8
  ADD          R0, 63, R5
  CMPGT.Q      RD22, R5, RQ9
  OR           RQ8, RQ9, RQ27
  BREQ.L       R0, RQ27, .L008012D8
// f_finale.c:340   {
  MOV.L        (R2, 100), RD27
  ADDS.L       RD27, 4, RD27
  MOV.L        RD27, (R2, 100)
// f_finale.c:342   continue;
  BSR          .L008012D5, R0

.L008012D8:
// f_finale.c:345   w = SHORT (hu_font[c]->width);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD22), RQ23
  MOV.W        (RQ23, 0), RD18
// f_finale.c:346   if (cx+w > SCREENWIDTH)
  MOV.L        (R2, 100), RD13
  ADDS.L       RD13, RD18, RQ27
  BRGT.L       320, RQ27, .L008012D6
// f_finale.c:348   V_DrawPatch(cx, cy, 0, hu_font[c]);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD22), RQ23
  MOV.L        (R2, 100), RD10
  MOV.L        (R2, 96), RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:349   cx+=w;
  MOV.L        (R2, 100), RD27
  ADDS.L       RD27, RD18, RD27
  MOV.L        RD27, (R2, 100)

.L008012D5:
  MOV.L        (R2, 112), RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 112)
  BRNE.L       R0, RD27, .L008012D4

.L008012D6:

.L00C02511:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Punch:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 128)
// p_pspr.c:478   damage = (P_Random ()%10+1)<<1;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 10, RD27
  MODS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 1, RQ18
  SHAD.L       RQ18, 1, RD22
// p_pspr.c:480   if (player->powers[pw_strength])	
  MOV.L        (RQ8, 52), RQ18
  BREQ.L       R0, RQ18, .L00801EAC
// p_pspr.c:481   damage *= 10;
  ADD          R0, 10, R5
  MULS.L       RD22, R5, RD22

.L00801EAC:
// p_pspr.c:483   angle = player->mo->angle;
  MOV.Q        (RQ8, 0), RQ27
  MOVU.L       (RQ27, 56), RD23
// p_pspr.c:484   angle += (P_Random()-P_Random())<<18;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ21
  SHAD.L       RQ21, 18, RQ18
  ADDU.L       RD23, RQ18, RD23
// p_pspr.c:485   slope = P_AimLineAttack (player->mo, angle, MELEERANGE);
  MOV.Q        (RQ8, 0), RQ27
  ADD          RQ27, 0, RQ10
  ADD          RD23, 0, RD11
  LUI          1024, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD20
// p_pspr.c:486   P_LineAttack (player->mo, angle, MELEERANGE, slope, damage);
  MOV.Q        (RQ8, 0), RQ27
  ADD          RQ27, 0, RQ10
  ADD          RD23, 0, RD11
  LUI          1024, RD12
  ADD          RD20, 0, RD13
  ADD          RD22, 0, RD14
  BSR          P_LineAttack, R1
// p_pspr.c:489   if (linetarget)
  MOV.Q        linetarget, RQ26
  BREQ.Q       R0, RQ26, .L00801EAD
// p_pspr.c:490   {
  MOV.Q        (RQ8, 0), RQ10
  ADD          R0, 83, RD11
  BSR          S_StartSound, R1
// p_pspr.c:492   player->mo->angle = R_PointToAngle2 (player->mo->x,
  MOV.Q        linetarget, RQ27
  MOV.L        (RQ27, 28), RQ21
  MOV.L        (RQ27, 24), RQ18
  MOV.Q        (RQ8, 0), RQ27
  MOV.L        (RQ27, 28), RQ9
  MOV.L        (RQ27, 24), RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          RQ21, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RQ26
  MOV.Q        (RQ8, 0), RQ27
  MOVU.L       RQ26, (RQ27, 56)
  MOV.Q        RQ26, (R2, 80)

.L00801EAD:

.L00C02517:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

TKMM_MMList_FreeLnkObj:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 1, RD21
// tk_core/tk_mmllist.c:737   
  ADD          R0, 2, RD13
// tk_core/tk_mmllist.c:739   
  MOVU.B       (RQ9, 5), RQ18
  BREQ.Q       90, RQ18, .L00800A4C
// tk_core/tk_mmllist.c:740   
  MOV          .L00C02532, RQ10
  BSR          tk_puts, R1
// tk_core/tk_mmllist.c:742   

TKMM_MMList_FreeLnkObj.debugbreak_L0472:
  BRK          1138
// tk_core/tk_mmllist.c:743   
  ADD          R0, -1, RD10
  BSR          .L00C02531, R0

.L00800A4C:
// tk_core/tk_mmllist.c:746   
  MOVU.B       (RQ9, 6), RQ18
  ADD          R0, -256, RD13
  BTST.L       RD13, RQ18, .L00800A4D
// tk_core/tk_mmllist.c:747   

TKMM_MMList_FreeLnkObj.debugbreak_L0473:
  BRK          1139
// tk_core/tk_mmllist.c:749   
  MOV          .L00C02535, RQ10
  BSR          tk_puts, R1
// tk_core/tk_mmllist.c:750   
  ADD          R0, -1, RD10
  BSR          .L00C02531, R0

.L00800A4D:
// tk_core/tk_mmllist.c:753   
  MOVU.B       (RQ9, 7), RQ18
  ADD          R0, -8, RD13
  BTST.L       RD13, RQ18, .L00800A4E
// tk_core/tk_mmllist.c:754   

TKMM_MMList_FreeLnkObj.debugbreak_L0474:
  BRK          1140

.L00800A4E:
// tk_core/tk_mmllist.c:756   
  MOVU.B       (RQ9, 4), RQ18
  BTST.L       RD21, RQ18, .L00800A4F
// tk_core/tk_mmllist.c:757   

TKMM_MMList_FreeLnkObj.debugbreak_L0475:
  BRK          1141

.L00800A4F:
// tk_core/tk_mmllist.c:762   
  MOVU.B       (RQ9, 7), RQ18
  SHAD.L       RQ18, 8, RQ8
  MOV          tkmm_mmlist_freelist_cat, RQ13
  LEA.Q        RQ13, RQ8, RQ23
// tk_core/tk_mmllist.c:766   
  MOVU.B       (RQ9, 4), RQ18
  OR           RQ18, 1, RQ8
  MOVU.B       RQ8, (RQ9, 4)
// tk_core/tk_mmllist.c:769   
  MOVU.B       (RQ9, 6), RQ18
  MOV.Q        (RQ23, RQ18), RQ22
  ADD          RQ9, 16, RQ13
  MOV.Q        RQ22, (RQ13, 0)
// tk_core/tk_mmllist.c:770   
  MOVU.B       (RQ9, 6), RQ18
  MOV.Q        RQ9, (RQ23, RQ18)
// tk_core/tk_mmllist.c:771   
  ADD          R0, 0, RD10

.L00C02531:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

closedir:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ18
// pdpc201/bt_readdir.c:5   
  ADD          RQ18, 0, RQ10
  BSR          tk_closedir, R1

.L00C0253D:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

AM_loadPics:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          R2, 80, RQ6
  MOV.Q        RQ6, (R2, 72)
// am_map.c:507   char namebuf[9];
// am_map.c:509   for (i=0;i<10;i++)
  ADD          R0, 0, RD18

.L008017A5:
// am_map.c:510   {
  ADD          R2, 80, RQ10
  MOV          .L00C02544, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
// am_map.c:512   marknums[i] = W_CacheLumpName(namebuf, PU_STATIC);
  ADD          R2, 80, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ9
  MOV          TU7A00C41B/marknums, RQ8
  MOV.Q        RQ9, (RQ8, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       10, RD18, .L008017A5

.L008017A7:

.L00C02543:
  ADD          R2, 384, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

A_CPosRefire:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 88)
// p_enemy.c:901   A_FaceTarget (actor);
  MOV.Q        (R2, 88), RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:903   if (P_Random () < 40)
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 40, RD8
  BRLT.L       RD8, RQ18, .L00C0254A
// p_enemy.c:906   if (!actor->target
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  BREQ.Q       R0, RQ9, .L00801B51
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  MOV.L        (RQ9, 164), RQ18
  BRLE.L       R0, RQ18, .L00801B51

.L00801B52:
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 176), RQ9
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B51
  BSR          .L00801B50, R0

.L00801B51:
// p_enemy.c:909   {
  MOV.Q        (R2, 88), RQ8
  MOV.Q        (RQ8, 136), RQ9
  MOV.L        (RQ9, 12), RQ18
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1

.L00801B50:

.L00C0254A:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

exp:
  ADD          R2, -8, R2
  MOV.Q        R18, (R2, 0)
  ADD          R2, -392, R2
  MOV.Q        RQ10, (R2, 40)
// pdpc201/math.c:552   
  ADD          R0, 2, RD18
// pdpc201/math.c:553   
  MOV.Q        (R2, 40), RQ47
  FMOV         RQ47, RQ46
// pdpc201/math.c:554   
  FMOV         RQ47, RQ48
// pdpc201/math.c:570   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FE00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ36
  FMUL         RQ49, RQ36, RQ46
// pdpc201/math.c:571   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:572   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FD55555, R5
  LDSH32       R5, 0x55555558, R5
  FMOVID       R5, RQ37
  FMUL         RQ49, RQ37, RQ46
// pdpc201/math.c:573   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:574   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FD00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ38
  FMUL         RQ49, RQ38, RQ46
// pdpc201/math.c:575   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:576   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FC99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ39
  FMUL         RQ49, RQ39, RQ46
// pdpc201/math.c:577   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:579   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FC55555, R5
  LDSH32       R5, 0x55555558, R5
  FMOVID       R5, RQ42
  FMUL         RQ49, RQ42, RQ46
// pdpc201/math.c:580   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:581   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FC24924, R5
  LDSH32       R5, 0x0000000092492490, R5
  FMOVID       R5, RQ43
  FMUL         RQ49, RQ43, RQ46
// pdpc201/math.c:582   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:583   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FC00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ44
  FMUL         RQ49, RQ44, RQ46
// pdpc201/math.c:584   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:585   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FBC71C7, R5
  LDSH32       R5, 0x1C71C718, R5
  FMOVID       R5, RQ45
  FMUL         RQ49, RQ45, RQ46
// pdpc201/math.c:586   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:588   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FB99999, RQ30
  LDSH32       RQ30, 0x0000000099999998, RQ30
  FMUL         RQ49, RQ30, RQ46
// pdpc201/math.c:589   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:590   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FB745D1, RQ31
  LDSH32       RQ31, 0x745D1748, RQ31
  FMUL         RQ49, RQ31, RQ46
// pdpc201/math.c:591   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:592   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FB55555, RQ14
  LDSH32       RQ14, 0x55555558, RQ14
  FMUL         RQ49, RQ14, RQ46
// pdpc201/math.c:593   
  FADD         RQ48, RQ46, RQ48
// pdpc201/math.c:594   
  FMUL         RQ46, RQ47, RQ49
  ADD          R0, 0x3FB3B13B, RQ15
  LDSH32       RQ15, 0x13B13B10, RQ15
  FMUL         RQ49, RQ15, RQ46
// pdpc201/math.c:595   
  FADD         RQ48, RQ46, RQ48
  MOV.Q        RQ46, (R2, 24)
// pdpc201/math.c:598   
  ADD          R0, 0x3FF00000, RQ16
  LDSH32       RQ16, 0, RQ16
  FADD         RQ48, RQ16, RQ48
// pdpc201/math.c:599   
  MOV.Q        RQ48, (R2, 16)
  FMOVDI       RQ48, RQ10

.L00C0254B:
  ADD          R2, 392, R2
  MOV.Q        (R2, 0), R18
  ADD          R2, 8, R2
  JSR          R1, 0, R0
  .balign 4

R_FillBackScreen:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// r_draw.c:1870   if (scaledviewwidth == 320)
  MOV.L        scaledviewwidth, RD27
  ADD          R0, 320, RD26
  BREQ.Q       RD26, RD27, .L00C02551
// r_draw.c:1873   if ( gamemode == commercial)
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00802622
// r_draw.c:1874   name = name2;
  MOV.Q        R_FillBackScreen/name2!80, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 96)
  BSR          .L00802623, R0

.L00802622:
// r_draw.c:1876   name = name1;
  MOV.Q        R_FillBackScreen/name1!80, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 96)

.L00802623:
// r_draw.c:1879   src = W_CacheFlatName (name, PU_CACHE);
  MOV.Q        (R2, 96), RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheFlatName, R1
  MOV.Q        RQ10, (R2, 120)
// r_draw.c:1880   dest = screens[1];
  MOV          screens, RQ27
  MOV.Q        (RQ27, 8), RQ20
// r_draw.c:1883   cmap = colormaps;
  MOV.Q        colormaps, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 112)
// r_draw.c:1885   for (y=0 ; y<SCREENHEIGHT-SBARHEIGHT ; y++)
  ADD          R0, 0, RD22

.L00802624:
// r_draw.c:1902   {
  ADD          R0, 0, RD23

.L00802627:
// r_draw.c:1904   {
  ADD          R0, 0, RD8

.L0080262A:
// r_draw.c:1907   dest[w]=cmap[(src+((y&63)<<6))[w]];
  AND          RD22, 63, RQ9
  SHAD.L       RQ9, 6, RQ18
  MOV.Q        (R2, 120), RQ27
  ADD          RQ27, RQ18, RQ21
  MOVU.B       (RQ21, RD8), RQ9
  MOV.Q        (R2, 112), RQ26
  MOVU.W       (RQ26, RQ9), RQ18
  MOVU.W       RQ18, (RQ20, RD8)
  ADDS.L       RD8, 1, RD8
  BRLT.L       64, RD8, .L0080262A

.L0080262C:
// r_draw.c:1908   dest += 64;
  ADD          RQ20, 128, RQ20
  ADDS.L       RD23, 1, RD23
  BRLT.L       5, RD23, .L00802627

.L00802629:
  ADDS.L       RD22, 1, RD22
  BRLT.L       168, RD22, .L00802624

.L00802626:
// r_draw.c:1922   patch = W_CachePatchName ("brdr_t",PU_CACHE);
  MOV          .L00C02552, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, (R2, 104)
// r_draw.c:1924   for (x=0 ; x<scaledviewwidth ; x+=8)
  ADD          R0, 0, RD23
  MOV.L        scaledviewwidth, RD27
  BRGE.L       RD27, RD23, .L0080262F

.L0080262D:
// r_draw.c:1925   V_DrawPatch (viewwindowx+x,viewwindowy-8,1,patch);
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, -8, RQ9
  MOV.L        viewwindowx, RD27
  ADDS.L       RD27, RD23, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 104), RQ13
  BSR          V_DrawPatch, R1
  ADDS.L       RD23, 8, RD23
  MOV.L        scaledviewwidth, RD27
  BRLT.L       RD27, RD23, .L0080262D

.L0080262F:
// r_draw.c:1927   patch = W_CachePatchName ("brdr_b",PU_CACHE);
  MOV          .L00C02553, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, (R2, 104)
// r_draw.c:1929   for (x=0 ; x<scaledviewwidth ; x+=8)
  ADD          R0, 0, RD23
  MOV.L        scaledviewwidth, RD27
  BRGE.L       RD27, RD23, .L00802632

.L00802630:
// r_draw.c:1930   V_DrawPatch (viewwindowx+x,viewwindowy+viewheight,1,patch);
  MOV.L        viewwindowy, RD27
  MOV.L        viewheight, RD26
  ADDS.L       RD27, RD26, RQ9
  MOV.L        viewwindowx, RD27
  ADDS.L       RD27, RD23, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 104), RQ13
  BSR          V_DrawPatch, R1
  ADDS.L       RD23, 8, RD23
  MOV.L        scaledviewwidth, RD27
  BRLT.L       RD27, RD23, .L00802630

.L00802632:
// r_draw.c:1932   patch = W_CachePatchName ("brdr_l",PU_CACHE);
  MOV          .L00C02554, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, (R2, 104)
// r_draw.c:1934   for (y=0 ; y<viewheight ; y+=8)
  ADD          R0, 0, RD22
  MOV.L        viewheight, RD27
  BRGE.L       RD27, RD22, .L00802635

.L00802633:
// r_draw.c:1935   V_DrawPatch (viewwindowx-8,viewwindowy+y,1,patch);
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, RD22, RQ9
  MOV.L        viewwindowx, RD27
  ADDS.L       RD27, -8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 104), RQ13
  BSR          V_DrawPatch, R1
  ADDS.L       RD22, 8, RD22
  MOV.L        viewheight, RD27
  BRLT.L       RD27, RD22, .L00802633

.L00802635:
// r_draw.c:1937   patch = W_CachePatchName ("brdr_r",PU_CACHE);
  MOV          .L00C02555, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, (R2, 104)
// r_draw.c:1939   for (y=0 ; y<viewheight ; y+=8)
  ADD          R0, 0, RD22
  MOV.L        viewheight, RD27
  BRGE.L       RD27, RD22, .L00802638

.L00802636:
// r_draw.c:1940   V_DrawPatch (viewwindowx+scaledviewwidth,viewwindowy+y,1,patch);
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, RD22, RQ9
  MOV.L        viewwindowx, RD27
  MOV.L        scaledviewwidth, RD26
  ADDS.L       RD27, RD26, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  MOV.Q        (R2, 104), RQ13
  BSR          V_DrawPatch, R1
  ADDS.L       RD22, 8, RD22
  MOV.L        viewheight, RD27
  BRLT.L       RD27, RD22, .L00802636

.L00802638:
// r_draw.c:1944   V_DrawPatch (viewwindowx-8,
  MOV          .L00C02556, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, -8, RQ9
  MOV.L        viewwindowx, RD27
  ADDS.L       RD27, -8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1
// r_draw.c:1950   V_DrawPatch (viewwindowx+scaledviewwidth,
  MOV          .L00C02557, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  MOV.L        viewwindowy, RD27
  ADDS.L       RD27, -8, RQ9
  MOV.L        viewwindowx, RD27
  MOV.L        scaledviewwidth, RD26
  ADDS.L       RD27, RD26, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1
// r_draw.c:1956   V_DrawPatch (viewwindowx-8,
  MOV          .L00C02558, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  MOV.L        viewwindowy, RD27
  MOV.L        viewheight, RD26
  ADDS.L       RD27, RD26, RQ9
  MOV.L        viewwindowx, RD27
  ADDS.L       RD27, -8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1
// r_draw.c:1962   V_DrawPatch (viewwindowx+scaledviewwidth,
  MOV          .L00C02559, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  MOV.L        viewwindowy, RD27
  MOV.L        viewheight, RD26
  ADDS.L       RD27, RD26, RQ9
  MOV.L        viewwindowx, RD27
  MOV.L        scaledviewwidth, RD26
  ADDS.L       RD27, RD26, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 1, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1

.L00C02551:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ClearSprites:
// r_things.c:361   {
  MOV          vissprites, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, vissprite_p

.L00C0255A:
  JSR          R1, 0, R0
  .balign 4

P_SpawnDoorCloseIn30:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// p_doors.c:528   door = Z_Malloc ( sizeof(*door), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_doors.c:530   P_AddThinker (&door->thinker);
  ADD          RQ18, 0, RQ9
  ADD          RQ9, 0, RQ10
  BSR          P_AddThinker, R1
// p_doors.c:532   sec->specialdata = door;
  MOV.Q        RQ18, (RQ8, 104)
// p_doors.c:533   sec->special = 0;
  MOV.W        RD0, (RQ8, 14)
// p_doors.c:535   door->thinker.function.acp1 = (actionf_p1)T_VerticalDoor;
  MOV          T_VerticalDoor, RQ9
  ADD          RQ18, 0, RQ13
  ADD          RQ13, 16, RQ12
  MOV.Q        RQ9, (RQ12, 0)
// p_doors.c:536   door->sector = sec;
  MOV.Q        RQ8, (RQ18, 32)
// p_doors.c:537   door->direction = 0;
  MOV.L        RD0, (RQ18, 48)
// p_doors.c:538   door->type = vld_normal;
  MOV.L        RD0, (RQ18, 24)
// p_doors.c:539   door->speed = VDOORSPEED;
  LUI          32, RD11
  MOV.L        RD11, (RQ18, 44)
// p_doors.c:540   door->topcountdown = 30 * 35;
  ADD          R0, 1050, RD10
  MOV.L        RD10, (RQ18, 56)

.L00C02560:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MunmapV:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -472, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// tk_core/tk_mmap.c:295   
// tk_core/tk_mmap.c:301   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 96)
// tk_core/tk_mmap.c:302   
  ADD          R2, 128, RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        (R2, 120), RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_core/tk_mmap.c:303   
  ADD          RQ8, 8, RQ23
  MOV.Q        (R2, 112), RQ21
  MOV.Q        RQ21, (RQ23, 0)
// tk_core/tk_mmap.c:304   
  ADD          R2, 96, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4113, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmap.c:308   
  MOV.Q        (R2, 96), RQ13
  ADDS.L       RQ13, 0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C02566:
  ADD          R2, 472, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

findSpareSpot:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// pdpc201/stdio.c:447   
  ADD          R0, 0, RD18

.L008002F6:
// pdpc201/stdio.c:448   
  MOV          __userFiles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
  BREQ.Q       RQ0, RQ9, .L008002F7
  ADDS.L       RD18, 1, RD18
  BRLT.L       253, RD18, .L008002F6

.L008002F7:
// pdpc201/stdio.c:453   
  BRNE.Q       253, RD18, .L008002F8
// pdpc201/stdio.c:455   
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU61F874B9/err
// pdpc201/stdio.c:457   
  MOV          .L00C0256D, RQ10
  BSR          tk_puts, R1
  BSR          .L008002F9, R0

.L008002F8:
// pdpc201/stdio.c:460   
  MOV.L        RD18, TU61F874B9/spareSpot

.L008002F9:
// pdpc201/stdio.c:462   

.L00C0256C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tk_realloc:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 32)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
  ADD          RD11, 0, RD23
// tk_core/tk_mmllist.c:1039   
  BRNE.Q       R0, RQ18, .L00800A6A
// tk_core/tk_mmllist.c:1040   
  ADD          RD23, 0, RD10
  BSR          tk_malloc, R1
  BSR          .L00C02573, R0

.L00800A6A:
// tk_core/tk_mmllist.c:1045   
  ADD          RQ18, 0, RQ10
  BSR          tk_msize, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_mmllist.c:1046   
  BRLT.L       RD23, RD9, .L00800A6B
// tk_core/tk_mmllist.c:1047   
  ADD          RQ18, 0, RQ10
  BSR          .L00C02573, R0

.L00800A6B:
// tk_core/tk_mmllist.c:1049   
  ADD          RD23, 0, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ8
// tk_core/tk_mmllist.c:1050   
  ADDS.L       RD9, 0, RQ21
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ21, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_mmllist.c:1051   
  ADD          RQ18, 0, RQ10
  BSR          tk_free, R1
// tk_core/tk_mmllist.c:1052   
  ADD          RQ8, 0, RQ10

.L00C02573:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.Q        (R2, 32), R23
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

ST_Ticker:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
// st_stuff.c:1021   {
  MOV.Q        TU7A00CB73/plyr, RQ18
  BREQ.Q       R0, RQ18, .L00C02579
// st_stuff.c:1025   st_clock++;
  MOVU.L       TU7A00CB73/st_clock, RD18
  ADDS.L       RD18, 1, RD18
  ADDU.L       RD18, R0, RD18
  ADDU.L       RD18, R0, RD18
  MOV.L        RD18, TU7A00CB73/st_clock
// st_stuff.c:1026   st_randomnumber = M_Random();
  BSR          M_Random, R1
  MOV.L        RQ10, TU7A00CB73/st_randomnumber
// st_stuff.c:1027   ST_updateWidgets();
  BSR          ST_updateWidgets, R1
// st_stuff.c:1028   st_oldhealth = plyr->health;
  MOV.Q        TU7A00CB73/plyr, RQ18
  MOV.L        (RQ18, 36), RD13
  MOV.L        RD13, TU7A00CB73/st_oldhealth

.L00C02579:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

localeconv:
  ADD          R2, -8, R2
  MOV.Q        R18, (R2, 0)
  ADD          R2, -312, R2
// pdpc201/locale.c:113   
  MOV          TU61F874B9/thislocale, RQ18
  ADD          RQ18, 0, RQ10

.L00C0257F:
  ADD          R2, 312, R2
  MOV.Q        (R2, 0), R18
  ADD          R2, 8, R2
  JSR          R1, 0, R0
  .balign 4

TKMM_FreeZone:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 92)
  MOV.L        RD11, (R2, 88)
// tk_core/tk_mmpage.c:1229   
// tk_core/tk_mmpage.c:1233   
  ADD          R2, 80, RQ9
  ADD          RQ9, 0, RQ18
// tk_core/tk_mmpage.c:1234   
  MOV.L        (R2, 92), RD8
  MOV.L        RD8, (RQ18, 0)
// tk_core/tk_mmpage.c:1235   
  MOV.L        (R2, 88), RD23
  MOV.L        RD23, (RQ18, 4)
// tk_core/tk_mmpage.c:1236   
  MOV          tkmm_freezone_cbfunc, RQ9
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_MMList_WalkHeapObjects, R1
// tk_core/tk_mmpage.c:1237   
  ADD          R0, 0, RD10

.L00C02585:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_maxOutWindowScale:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// am_map.c:608   {
  MOV.L        TU7A00C41B/max_scale_mtof, RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, TU7A00C41B/scale_mtof
// am_map.c:610   scale_ftom = FixedDiv(FRACUNIT, scale_mtof);
  LUI          16, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_ftom
// am_map.c:611   AM_activateNewScale();
  BSR          AM_activateNewScale, R1

.L00C0258B:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_AcsThingDestroy:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R20, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RD10, 0, RD22
  MOV.L        RD11, (R2, 88)
// p_acspec.c:131   idx=NULL;
  ADD          R0, 0, RQ20
  MOV.Q        RQ20, (R2, 80)
// p_acspec.c:132   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 80, RQ8
  ADD          RQ8, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:133   while(obj)
  BSR          .L008018A0, R0

.L0080189E:
// p_acspec.c:138   dmg=obj->health+10;
  MOV.L        (RQ18, 164), RQ23
  ADDS.L       RQ23, 10, RD9
// p_acspec.c:139   if(extreme)
  MOV.L        (R2, 88), RD20
  BREQ.L       R0, RD20, .L008018A1
// p_acspec.c:140   dmg+=100;
  ADDS.L       RD9, 100, RD9

.L008018A1:
// p_acspec.c:142   P_DamageMobj(obj, NULL, NULL, dmg);
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADDS.L       RD9, 0, RD13
  BSR          P_DamageMobj, R1
// p_acspec.c:144   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 80, RQ8
  ADD          RQ8, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18

.L008018A0:
  BRNE.Q       R0, RQ18, .L0080189E

.L0080189F:

.L00C02591:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

M_Episode:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:954   {
  MOV.L        gamemode, RD13
  BRNE.L       R0, RD13, .L00801664
  BREQ.L       R0, RD9, .L00801664

.L00801665:
// m_menu.c:957   {
  MOV          .L00C02598, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:959   M_SetupNextMenu(&ReadDef1);
  MOV          ReadDef1, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1
// m_menu.c:960   return;
  BSR          .L00C02597, R0

.L00801664:
// m_menu.c:964   if ( (gamemode == registered)
  MOV.L        gamemode, RD13
  ADD          R0, 1, R5
  CMPEQ.Q      RD13, R5, RQ8
  ADD          R0, 2, R5
  CMPGT.Q      RD9, R5, RQ23
  BTST.L       RQ23, RQ8, .L00801667
// m_menu.c:966   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (RQ18, 0), RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C02599, RQ11
  BSR          fprintf, R1
// m_menu.c:969   choice = 0;
  ADD          R0, 0, RD9

.L00801667:
// m_menu.c:972   epi = choice;
  MOV.L        RD9, epi
// m_menu.c:973   M_SetupNextMenu(&NewDef);
  MOV          NewDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C02597:
  ADD          R2, 368, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

TKMM_PageFreeV:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R21, (R2, 16)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.L        RD11, (R2, 100)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_core/tk_mmpage.c:725   
// tk_core/tk_mmpage.c:730   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 80)
// tk_core/tk_mmpage.c:731   
  ADD          R2, 112, RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        (R2, 104), RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_core/tk_mmpage.c:732   
  ADD          RQ8, 8, RQ23
  MOV.L        (R2, 100), RD21
  MOV.L        RD21, (RQ23, 0)
// tk_core/tk_mmpage.c:733   
  ADD          R2, 80, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4101, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmpage.c:734   

.L00C0259F:
  ADD          R2, 432, R2
  MOV.Q        (R2, 40), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R21
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_ClearLineSpecial:
// p_acspec.c:1025   {
  MOV.Q        (RQ10, 16), RQ13
  BREQ.Q       R0, RQ13, .L0080194B
// p_acspec.c:1027   {
  MOV.Q        (RQ10, 16), RQ13
  MOV.W        RD0, (RQ13, 26)

.L0080194B:

.L00C025A0:
  JSR          R1, 0, R0

WI_initAnimatedBack:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// wi_stuff.c:525   if (gamemode == commercial)
  MOV.L        gamemode, RD20
  ADD          R0, 2, RD13
  BREQ.Q       RD13, RD20, .L00C025A6
// wi_stuff.c:527   if (gamemode == hexen)
  MOV.L        gamemode, RD20
  ADD          R0, 5, RD13
  BREQ.Q       RD13, RD20, .L00C025A6
// wi_stuff.c:530   if (wbs->epsd > 2)
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ18
  ADD          R0, 2, RD20
  BRGT.L       RD20, RQ18, .L00C025A6
// wi_stuff.c:533   for (i=0;i<NUMANIMS[wbs->epsd];i++)
  ADD          R0, 0, RD21
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ18
  MOV          TU7A00CB85/NUMANIMS, RQ20
  MOV.L        (RQ20, RQ18), RQ9
  BRGE.L       RQ9, RD21, .L008029AC

.L008029AA:
// wi_stuff.c:536   a = &wi_anims[wbs->epsd][i];
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ18
  MOV          TU7A00CB85/wi_anims, RQ20
  MOV.Q        (RQ20, RQ18), RQ13
  ADD          R0, 72, R5
  MUL.L        RD21, R5, RQ8
  ADD          RQ13, RQ8, RQ8
// wi_stuff.c:539   a->ctr = -1;
  ADD          R0, -1, RD20
  MOV.L        RD20, (RQ8, 64)
// wi_stuff.c:542   if (a->type == ANIM_ALWAYS)
  MOV.L        (RQ8, 0), RQ18
  BRNE.L       R0, RQ18, .L008029AD
// wi_stuff.c:543   a->nexttic = bcnt + 1 + (M_Random()%a->period);
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, 1, RQ9
  BSR          M_Random, R1
  ADD          RQ10, 0, RQ18
  MOV.L        (RQ8, 4), RQ23
  MODS.L       RQ18, RQ23, RQ22
  ADDS.L       RQ9, RQ22, RQ18
  MOV.L        RQ18, (RQ8, 56)
  BSR          .L008029AE, R0

.L008029AD:
  MOV.L        (RQ8, 0), RQ9
  BRNE.Q       1, RQ9, .L008029AF
// wi_stuff.c:545   a->nexttic = bcnt + 1 + a->data2+(M_Random()%a->data1);
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, 1, RQ23
  MOV.L        (RQ8, 24), RQ22
  ADDS.L       RQ23, RQ22, RQ18
  BSR          M_Random, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        (RQ8, 20), RQ23
  MODS.L       RQ9, RQ23, RQ22
  ADDS.L       RQ18, RQ22, RQ9
  MOV.L        RQ9, (RQ8, 56)
  BSR          .L008029B0, R0

.L008029AF:
  MOV.L        (RQ8, 0), RQ23
  BRNE.Q       2, RQ23, .L008029B1
// wi_stuff.c:547   a->nexttic = bcnt + 1;
  MOV.L        TU7A00CB85/bcnt, RD20
  ADDS.L       RD20, 1, RQ22
  MOV.L        RQ22, (RQ8, 56)

.L008029B1:

.L008029B0:

.L008029AE:
  ADDS.L       RD21, 1, RD21
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ18
  MOV          TU7A00CB85/NUMANIMS, RQ20
  MOV.L        (RQ20, RQ18), RQ9
  BRLT.L       RQ9, RD21, .L008029AA

.L008029AC:

.L00C025A6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

S_Init:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD23
  MOV.L        RD11, (R2, 104)
// s_sound.c:168   if(s_init_wasinit != 314)
  MOV.L        TU7A00CA3E/s_init_wasinit, RD13
  BREQ.Q       314, RD13, .L00802D28
// s_sound.c:169   __debugbreak();

S_Init.debugbreak_L047B:
  BRK          1147

.L00802D28:
// s_sound.c:170   s_init_wasinit = 1;
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU7A00CA3E/s_init_wasinit
// s_sound.c:172   fprintf( stderr, "S_Init: default sfx volume %d\n", sfxVolume);
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C025B3, RQ11
  ADD          RD23, 0, RD12
  BSR          fprintf, R1
// s_sound.c:175   I_SetChannels();
  BSR          I_SetChannels, R1
// s_sound.c:177   fprintf( stderr, "S_Init: A0\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C025B4, RQ11
  BSR          fprintf, R1
// s_sound.c:179   S_SetSfxVolume(sfxVolume);
  ADD          RD23, 0, RD10
  BSR          S_SetSfxVolume, R1
// s_sound.c:181   S_SetMusicVolume(musicVolume);
  MOV.L        (R2, 104), RD10
  BSR          S_SetMusicVolume, R1
// s_sound.c:183   fprintf( stderr, "S_Init: A1\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C025B5, RQ11
  BSR          fprintf, R1
// s_sound.c:188   s_channels =
  ADD          R0, 240, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, TU7A00CA3E/s_channels
// s_sound.c:194   for (i=0 ; i<10 ; i++)
  ADD          R0, 0, RD18

.L00802D29:
// s_sound.c:195   s_channels[i].sfxinfo = 0;
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (RQ12, 0)
  ADDS.L       RD18, 1, RD18
  BRLT.L       10, RD18, .L00802D29

.L00802D2B:
// s_sound.c:198   mus_paused = 0;
  MOV.L        RD0, TU7A00CA3E/mus_paused
// s_sound.c:201   for (i=1 ; i<NUMSFX ; i++)
  ADD          R0, 1, RD18

.L00802D2C:
// s_sound.c:202   S_sfx[i].lumpnum = S_sfx[i].usefulness = -1;
  MOV          S_sfx, RQ13
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  ADD          R0, -1, RD11
  MOV.L        RD11, (RQ12, 40)
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        RD11, (RQ12, 44)
  ADDS.L       RD18, 1, RD18
  BRLT.L       109, RD18, .L00802D2C

.L00802D2E:
// s_sound.c:204   fprintf( stderr, "S_Init: OK\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C025B6, RQ11
  BSR          fprintf, R1

.L00C025B1:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_bigint_add:
// tk_core/tku_bigint.c:154   

.L00C025B7:
  JSR          R1, 0, R0

HU_Start:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
// hu_stuff.c:442   if (headsupactive)
  MOV.L        TU7A00CA82/headsupactive, RD27
  BREQ.L       R0, RD27, .L00802C68
// hu_stuff.c:443   HU_Stop();
  BSR          HU_Stop, R1

.L00802C68:
// hu_stuff.c:445   plr = &players[consoleplayer];
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        RQ25, TU7A00CA82/plr
// hu_stuff.c:446   message_on = false;
  ADD          RD0, 0, RD27
// hu_stuff.c:447   message_dontfuckwithme = false;
  MOV.L        RD0, message_dontfuckwithme
// hu_stuff.c:448   message_nottobefuckedwith = false;
  MOV.L        RD0, TU7A00CA82/message_nottobefuckedwith
// hu_stuff.c:449   chat_on = false;
  MOV.L        RD0, chat_on
// hu_stuff.c:452   HUlib_initSText(&w_message,
  MOV          TU7A00CA82/message_on, RQ9
  MOV          TU7A00CA82/w_message, RQ22
  MOV.L        RD27, TU7A00CA82/message_on
  ADD          RQ22, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          R0, 1, RD13
  MOV          hu_font, RQ14
  ADD          R0, 33, RD15
  ADD          RQ9, 0, RQ16
  BSR          HUlib_initSText, R1
// hu_stuff.c:458   HUlib_initTextLine(&w_title,
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, 0), RQ9
  MOV.W        (RQ9, 2), RQ18
  ADD          R0, 167, R5
  SUBS.L       R5, RQ18, RQ23
  MOV          TU7A00CA82/w_title, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ23, 0, RD12
  MOV          hu_font, RQ13
  ADD          R0, 33, RD14
  BSR          HUlib_initTextLine, R1
// hu_stuff.c:463   switch ( gamemode )
  MOV.L        gamemode, RD27
  BREQ.L       R0, RD27, .L00802C6A
  MOV.L        gamemode, RD27
  BREQ.Q       1, RD27, .L00802C6B
  MOV.L        gamemode, RD27
  BREQ.Q       3, RD27, .L00802C6C
  MOV.L        gamemode, RD27
  BREQ.Q       4, RD27, .L00802C6D
  MOV.L        gamemode, RD27
  BREQ.Q       2, RD27, .L00802C6E
  BSR          .L00802C6F, R0

.L00802C6A:

.L00802C6B:

.L00802C6C:

.L00802C6D:
// hu_stuff.c:470   s = HU_TITLE;
  MOV.L        gameepisode, RD27
  ADDS.L       RD27, -1, RQ18
  ADD          R0, 9, R5
  MULS.L       RQ18, R5, RQ23
  MOV.L        gamemap, RD27
  ADDS.L       RQ23, RD27, RQ18
  ADDS.L       RQ18, -1, RQ23
  MOV          mapnames, RQ27
  MOV.Q        (RQ27, RQ23), RQ21
// hu_stuff.c:471   break;
  BSR          .L00802C69, R0

.L00802C6E:

.L00802C6F:
// hu_stuff.c:483   default:
  MOV.L        gamemap, RD27
  ADDS.L       RD27, -1, RQ18
  MOV          mapnames2, RQ27
  MOV.Q        (RQ27, RQ18), RQ21
// hu_stuff.c:485   break;

.L00802C69:
// hu_stuff.c:488   while (*s)
  BSR          .L00802C72, R0

.L00802C70:
// hu_stuff.c:489   HUlib_addCharToTextLine(&w_title, *(s++));
  MOV.B        (RQ21, 0), RQ23
  ADD          RQ21, 1, RQ21
  MOV          TU7A00CA82/w_title, RQ9
  SHAD.Q       RQ23, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          HUlib_addCharToTextLine, R1

.L00802C72:
  MOV.B        (RQ21, 0), RQ18
  BRNE.L       R0, RQ18, .L00802C70

.L00802C71:
// hu_stuff.c:492   HUlib_initIText(&w_chat,
  MOV          chat_on, RQ9
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, 0), RQ22
  MOV.W        (RQ22, 2), RQ18
  ADDS.L       RQ18, 1, RQ20
  ADD          RQ20, 0, RQ18
  MOV          TU7A00CA82/w_chat, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ18, 0, RD12
  MOV          hu_font, RQ13
  ADD          R0, 33, RD14
  ADD          RQ9, 0, RQ15
  BSR          HUlib_initIText, R1
// hu_stuff.c:498   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD8

.L00802C73:
// hu_stuff.c:499   HUlib_initIText(&w_inputbuffer[i], 0, 0, 0, 0, &always_off);
  MOV          TU7A00CA82/always_off, RQ9
  MOV          TU7A00CA82/w_inputbuffer, RQ27
  ADD          R0, 136, R5
  MUL.L        RD8, R5, RQ22
  ADD          RQ27, RQ22, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ0, 0, RQ13
  ADD          R0, 0, RD14
  ADD          RQ9, 0, RQ15
  BSR          HUlib_initIText, R1
  ADDS.L       RD8, 1, RD8
  BRLT.L       4, RD8, .L00802C73

.L00802C75:
// hu_stuff.c:501   headsupactive = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CA82/headsupactive

.L00C025BD:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

A_SkelFist:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:1138   if (!actor->target)
  MOV.Q        (RQ9, 176), RQ8
  BREQ.Q       R0, RQ8, .L00C025C3
// p_enemy.c:1141   A_FaceTarget (actor);
  ADD          RQ9, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1143   if (P_CheckMeleeRange (actor))
  ADD          RQ9, 0, RQ10
  BSR          P_CheckMeleeRange, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801B67
// p_enemy.c:1144   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
  ADD          R0, 10, RD22
  MODS.L       RQ23, RD22, RQ23
  ADDS.L       RQ23, 1, RQ18
  ADD          R0, 6, R5
  MULS.L       RQ18, R5, RD21
  MOV.L        RD21, (R2, 100)
// p_enemy.c:1146   S_StartSound (actor, sfx_skepch);
  ADD          RQ9, 0, RQ10
  ADD          R0, 53, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1147   P_DamageMobj (actor->target, actor, actor, damage);
  MOV.Q        (RQ9, 176), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          RD21, 0, RD13
  BSR          P_DamageMobj, R1

.L00801B67:

.L00C025C3:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_fopen2:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 136)
  ADD          RQ11, 0, RQ21
  MOV.Q        RQ12, (R2, 120)
// tk_core/tk_vfile.c:941   
  MOV.L        TU61F874B9/tk_open_reclim, RD27
  BRLT.L       8, RD27, .L00800B52
// tk_core/tk_vfile.c:942   
  ADD          RQ0, 0, RQ10
  BSR          .L00C025D8, R0

.L00800B52:
// tk_core/tk_vfile.c:944   
  BSR          tk_vfile_init, R1
// tk_core/tk_vfile.c:946   
  ADD          RQ21, 0, RQ10
  ADD          R0, 0, RD11
  BSR          TKDFS_TempNormalizeStringUtf8, R1
  ADD          RQ10, 0, RQ21
// tk_core/tk_vfile.c:948   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       46, RQ22, .L00800B53
  MOV.B        (RQ21, 1), RQ22
  BRNE.Q       47, RQ22, .L00800B53

.L00800B54:
// tk_core/tk_vfile.c:949   
  ADD          RQ21, 2, RQ21

.L00800B53:
// tk_core/tk_vfile.c:950   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       47, RQ22, .L00800B55
// tk_core/tk_vfile.c:951   
  ADD          RQ21, 1, RQ21

.L00800B55:
// tk_core/tk_vfile.c:956   
  MOV.L        TU61F874B9/tk_open_reclim, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU61F874B9/tk_open_reclim
// tk_core/tk_vfile.c:958   
  MOV.Q        tk_vf_mount, RQ18
// tk_core/tk_vfile.c:959   
  BSR          .L00800B56, R0

.L00800B57:
// tk_core/tk_vfile.c:960   
  MOV.L        (RQ18, 36), RQ22
  ADD          R0, 0x1234ABCD, RD27
  BREQ.Q       RD27, RQ22, .L00800B58
// tk_core/tk_vfile.c:962   

tk_fopen2.debugbreak_L048B:
  BRK          1163

.L00800B58:
// tk_core/tk_vfile.c:964   
  ADD          RQ21, 0, RQ23
// tk_core/tk_vfile.c:965   
  MOV.Q        (RQ18, 16), RQ9
  BREQ.Q       R0, RQ9, .L00800B59
  MOV.L        (RQ18, 32), RQ22
  BRLE.L       R0, RQ22, .L00800B59

.L00800B5A:
  MOV.L        (RQ18, 32), RQ22
  MOV.Q        (RQ18, 16), RQ9
  ADDS.L       RQ22, 0, RQ12
  ADD          RQ9, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strncmp, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00800B5B
// tk_core/tk_vfile.c:968   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:970   
  BSR          .L00800B56, R0

.L00800B5B:
// tk_core/tk_vfile.c:971   
  MOV.L        (RQ18, 32), RQ8
  ADD          RQ23, RQ8, RQ23
  MOV.B        (RQ23, 0), RQ8
  BREQ.L       R0, RQ8, .L00800B5C
  MOV.B        (RQ23, 0), RQ8
  BREQ.Q       47, RQ8, .L00800B5C

.L00800B5D:
  ADD          RQ23, -1, RQ9
  MOV.B        (RQ9, 0), RQ8
  BREQ.Q       58, RQ8, .L00800B5C

.L00800B5E:
// tk_core/tk_vfile.c:974   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:976   
  BSR          .L00800B56, R0

.L00800B5C:
  MOV.B        (RQ23, 0), RQ8
  BRNE.Q       47, RQ8, .L00800B5F
// tk_core/tk_vfile.c:979   
  ADD          RQ23, 1, RQ23

.L00800B5F:

.L00800B59:
// tk_core/tk_vfile.c:982   
  MOV.Q        (RQ18, 0), RQ9
  BRNE.Q       R0, RQ9, .L00800B60
// tk_core/tk_vfile.c:983   

tk_fopen2.debugbreak_L048C:
  BRK          1164

.L00800B60:
// tk_core/tk_vfile.c:985   
  MOV.Q        (RQ18, 0), RQ9
  MOV.Q        (RQ9, 24), RQ20
  BREQ.Q       R0, RQ20, .L00800B61
// tk_core/tk_vfile.c:988   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ20
  MOV.Q        (RQ9, 24), RQ27
  ADD          RQ18, 0, RQ10
  MOV.Q        (R2, 136), RQ11
  ADD          RQ23, 0, RQ12
  MOV.Q        (R2, 120), RQ13
  ADD          RQ20, 0, RQ29
  JSR          RQ27, 0, R1
  ADD          RQ10, 0, RQ9
  ADD          RQ9, 0, RQ26
  MOV.Q        RQ26, (R2, 112)
  BREQ.Q       R0, RQ26, .L00800B62
  MOV.Q        (R2, 112), RQ27
  MOV.L        (RQ27, 92), RQ8
  ADD          R0, 0x14253647, RD26
  BREQ.Q       RD26, RQ8, .L00800B63
// tk_core/tk_vfile.c:992   

tk_fopen2.debugbreak_L048D:
  BRK          1165

.L00800B63:
// tk_core/tk_vfile.c:993   
  MOV.L        TU61F874B9/tk_open_reclim, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU61F874B9/tk_open_reclim
// tk_core/tk_vfile.c:994   
  MOV.Q        (R2, 112), RQ10
  BSR          .L00C025D8, R0

.L00800B62:

.L00800B61:
// tk_core/tk_vfile.c:996   
  MOV.Q        (RQ18, 8), RQ18

.L00800B56:
  BRNE.Q       R0, RQ18, .L00800B57

.L00800B64:
// tk_core/tk_vfile.c:1000   
  MOV          .L00C025DC, RQ10
  ADD          RQ21, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:1002   
  MOV.L        TU61F874B9/tk_open_reclim, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU61F874B9/tk_open_reclim
// tk_core/tk_vfile.c:1003   
  ADD          RQ0, 0, RQ10

.L00C025D8:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ReadSaveStrings:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R27, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -640, R2
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 112)
  ADD          R0, 1, RQ21
// m_menu.c:520   char	name[256];
// m_menu.c:522   for (i = 0;i < load_end;i++)
  ADD          RD0, 0, RD18

.L0080162C:
// m_menu.c:523   {
  MOV          .L00C01727, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L0080162F
// m_menu.c:525   sprintf(name,"c:\\doomdata\\"SAVEGAMENAME"%d.dsg",i);
  ADD          R2, 128, RQ10
  MOV          .L00C01728, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
  BSR          .L00801630, R0

.L0080162F:
// m_menu.c:527   sprintf(name,SAVEGAMENAME"%d.dsg",i);
  ADD          R2, 128, RQ10
  MOV          .L00C01729, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1

.L00801630:
// m_menu.c:530   fd = fopen(name, "rb");
  ADD          R2, 128, RQ10
  MOV          .L00C01607, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ9
// m_menu.c:532   if(!fd)
  BRNE.Q       R0, RQ9, .L00801631
// m_menu.c:533   {
  MOV          savegamestrings, RQ20
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  ADD          RQ27, RD0, RQ20
  ADD          RQ20, 0, RQ10
  MOV          .L00C025E3, RQ11
  BSR          strcpy, R1
// m_menu.c:535   LoadMenu[i].status = 0;
  MOV          LoadMenu, RQ13
  SHAD.L       RD18, 5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.W        RD0, (RQ12, 0)
// m_menu.c:536   continue;
  BSR          .L0080162D, R0

.L00801631:
// m_menu.c:539   count = fread (&savegamestrings[i], 1, SAVESTRINGSIZE, fd);
  MOV          savegamestrings, RQ20
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ10
  ADD          RQ20, RQ10, RQ10
  ADD          R0, 1, RQ11
  ADD          R0, 24, RQ12
  ADD          RQ9, 0, RQ13
  BSR          fread, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ23, 0, RD20
  MOV.L        RD20, (R2, 124)
// m_menu.c:541   fclose (fd);
  ADD          RQ9, 0, RQ10
  BSR          fclose, R1
// m_menu.c:542   LoadMenu[i].status = 1;
  MOV          LoadMenu, RQ27
  SHAD.L       RD18, 5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.W        RD21, (RQ13, 0)

.L0080162D:
  ADDS.L       RD18, 1, RD18
  BRLT.L       6, RD18, .L0080162C

.L0080162E:

.L00C025E2:
  ADD          R2, 640, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_mgetbase:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmllist.c:1089   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_GetBase, R1

.L00C025E9:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tk_mgettag:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmllist.c:1069   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_GetTag, R1

.L00C025EF:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

I_DrawFramerate:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// i_btesh4.c:2003   {
// i_btesh4.c:2007   t0=I_GetTimeMs();
  BSR          I_GetTimeMs, R1
  ADD          RQ10, 0, RD18
// i_btesh4.c:2008   dt=t0-i_lastframems;
  MOV.L        TU7A00C7AE/i_lastframems, RD20
  SUBS.L       RD18, RD20, RD9
// i_btesh4.c:2009   i_lastframems=t0;
  ADD          RD18, 0, RD20
  MOV.L        RD20, TU7A00C7AE/i_lastframems
// i_btesh4.c:2013   if((dt<=0) || (dt>=1000))
  CMPLE.Q      RD9, R0, RQ8
  ADD          R0, 1000, R5
  CMPGE.Q      RD9, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BRNE.L       R0, RQ22, .L00C025F5
// i_btesh4.c:2018   fps=1000/dt;
  ADD          R0, 1000, RD20
  DIVS.L       RD20, RD9, RD21
// i_btesh4.c:2022   HU_DrawDecNum(320-12, 2, fps, 2);
  ADD          R0, 308, RD10
  ADD          R0, 2, RD11
  ADD          RD21, 0, RD12
  ADD          R0, 2, RD13
  BSR          HU_DrawDecNum, R1

.L00C025F5:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

__xli_sdiv:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.X        RQ10, (R2, 144)
  MOV.X        RQ12, (R2, 128)
// pdpc201/btshx_xli.c:850   
  ADD          RD0, 0, RD18
// pdpc201/btshx_xli.c:851   
  MOV.X        (R2, 144), RQ22
  ADD          RQ22, 0, RQ8
  ADD          RQ23, 0, RQ9
// pdpc201/btshx_xli.c:852   
  MOV.X        (R2, 128), RQ22
  ADD          RQ22, 0, RQ20
  ADD          RQ23, 0, RQ21
// pdpc201/btshx_xli.c:854   
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  MOV.X        RQ8, (R2, 112)
  MOV.X        RQ20, (R2, 96)
  MOV.X        RQ26, (R2, 64)
  ADD          RQ26, 0, RQ12
  ADD          RQ27, 0, RQ13
  MOV.X        (R2, 144), RQ10
  BSR          __xli_cmp_ge, R1
  BRNE.Q       RQ10, R0, .L00801092
// pdpc201/btshx_xli.c:855   
  MOV.X        (R2, 144), RQ10
  BSR          __xli_neg, R1
  MOV.X        RQ10, (R2, 112)
  CMPEQ.Q      RD18, R0, RD18

.L00801092:
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ9
  MOV.X        RQ8, (R2, 64)
  ADD          RQ8, 0, RQ12
  ADD          RQ9, 0, RQ13
  MOV.X        (R2, 128), RQ10
  BSR          __xli_cmp_ge, R1
  BRNE.Q       RQ10, R0, .L00801093
// pdpc201/btshx_xli.c:857   
  MOV.X        (R2, 128), RQ10
  BSR          __xli_neg, R1
  MOV.X        RQ10, (R2, 96)
  CMPEQ.Q      RD18, R0, RD18

.L00801093:
  MOV.X        (R2, 112), RQ10
  MOV.X        (R2, 96), RQ12
  BSR          __xli_udiv, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ9
// pdpc201/btshx_xli.c:859   
  MOV.X        RQ8, (R2, 80)
  BREQ.L       R0, RD18, .L00801094
// pdpc201/btshx_xli.c:860   
  MOV.X        (R2, 80), RQ10
  BSR          __xli_neg, R1
  MOV.X        RQ10, (R2, 80)

.L00801094:
// pdpc201/btshx_xli.c:861   
  MOV.X        (R2, 80), RQ10

.L00C025FB:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

G_ExitLevel:
  ADD          R2, -24, R2
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -264, R2
  MOV.L        secretexit, RD18
  MOV.L        gameaction, RD8
  ADD          R0, 6, RD23
// g_game.c:1026   {
  ADD          RD0, 0, RD18
// g_game.c:1028   gameaction = ga_completed;
  ADD          RD23, 0, RD8

.L00C02601:
  MOV.L        RD18, secretexit
  MOV.L        RD8, gameaction
  ADD          R2, 264, R2
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 24, R2
  JSR          R1, 0, R0

P_AcsDoSpecialLine:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  MOV.Q        RQ10, (R2, 152)
  ADD          RQ11, 0, RQ18
// p_acspec.c:371   {
  MOV.Q        RQ18, trigline
// p_acspec.c:373   P_AcsDoSpecialCmd(
  MOVU.B       (RQ18, 35), RQ9
  MOVU.B       (RQ18, 34), RQ8
  MOVU.B       (RQ18, 33), RQ20
  MOVU.B       (RQ18, 32), RQ21
  MOVU.B       (RQ18, 31), RQ22
  MOVU.B       (RQ18, 30), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ22, 0, RD11
  ADD          RQ21, 0, RD12
  ADD          RQ20, 0, RD13
  AND          RQ8, 255, RD14
  AND          RQ9, 255, RD15
  BSR          P_AcsDoSpecialCmd, R1
// p_acspec.c:378   switch(line->acs_spec)
  MOVU.B       (RQ18, 30), RQ9
  BREQ.Q       62, RQ9, .L008018DF
  BSR          .L008018E0, R0

.L008018DF:
// p_acspec.c:381   case 62: /* Plat_DownWaitUpStay */
  BSR          .L008018DE, R0

.L008018E0:
// p_acspec.c:384   default:
  MOV.W        (RQ18, 24), RQ8
  ADD          R0, 512, RD20
  BTSTN.L      RD20, RQ8, .L008018E1
// p_acspec.c:386   line->special = 0;
  MOV.W        RD0, (RQ18, 26)

.L008018E1:
// p_acspec.c:387   break;

.L008018DE:

.L00C02607:
  ADD          R2, 384, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

R_DrawColumnLow:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
// r_draw.c:495   count = dc_yh - dc_yl;
  MOV.L        dc_yh, RD13
  MOV.L        dc_yl, RD12
  SUBS.L       RD13, RD12, RD23
// r_draw.c:498   if (count < 0)
  BRLT.L       R0, RD23, .L00C0260D
// r_draw.c:502   if ((unsigned)dc_x >= SCREENWIDTH
  MOV.L        dc_x, RD13
  ADDU.L       RD13, R0, RQ18
  ADD          R0, 320, RQ8
  CMPGE.Q      RQ18, RQ8, RQ9
  MOV.L        dc_yl, RD13
  CMPLT.Q      RD13, R0, RQ18
  OR           RQ9, RQ18, RQ8
  MOV.L        dc_yh, RD13
  ADD          R0, 200, R5
  CMPGE.Q      RD13, R5, RQ18
  OR           RQ8, RQ18, RQ9
  BREQ.L       R0, RQ9, .L008025C4
// r_draw.c:507   I_Error ("R_DrawColumn: %i to %i at %i", dc_yl, dc_yh, dc_x);
  MOV          .L00C0260E, RQ10
  MOV.L        dc_yl, RD11
  MOV.L        dc_yh, RD12
  MOV.L        dc_x, RD13
  BSR          I_Error, R1

.L008025C4:
// r_draw.c:513   x1 = dc_x << 1;
  MOV.L        dc_x, RD13
  SHAD.L       RD13, 1, RD12
// r_draw.c:519   dest = ylookup[dc_yl] + columnofs[x1];
  MOV          ylookup, RQ13
  MOV.L        dc_yl, RD11
  MOV.Q        (RQ13, RD11), RQ10
  MOV          columnofs, RQ17
  MOV.L        (RQ17, RD12), RQ18
  LEA.W        RQ10, RQ18, RQ22
// r_draw.c:520   dest2 = ylookup[dc_yl] + columnofs[x1+1];
  MOV.Q        (RQ13, RD11), RQ10
  SHAD.Q       RD12, 2, R5
  ADD          RQ17, R5, R5
  MOV.L        (R5, 4), RQ9
  MOV.L        RD12, (R2, 104)
  LEA.W        RQ10, RQ9, RQ21
// r_draw.c:522   fracstep = dc_iscale;
  MOV.L        dc_iscale, RD13
// r_draw.c:523   frac = dc_texturemid + (dc_yl-centery)*fracstep;
  MOV.L        centery, RD16
  SUBS.L       RD11, RD16, RQ8
  MULS.L       RQ8, RD13, RQ18
  MOV.L        RD13, (R2, 108)
  MOV.L        dc_texturemid, RD11
  ADDS.L       RD11, RQ18, RD20
// r_draw.c:525   do

.L008025C5:
// r_draw.c:528   *dest2 = *dest = dc_colormap[dc_source[(frac>>FRACBITS)&127]];
  SHLR.Q       RD20, 16, RQ9
  AND          RQ9, 127, RQ9
  MOV.Q        dc_source, RQ13
  MOVU.B       (RQ13, RQ9), RQ8
  MOV.Q        dc_colormap, RQ13
  MOVU.W       (RQ13, RQ8), RQ18
  MOVU.W       RQ18, (RQ22, 0)
  MOVU.W       RQ18, (RQ21, 0)
// r_draw.c:529   dest += SCREENWIDTH;
  ADD          RQ22, 640, RQ22
// r_draw.c:530   dest2 += SCREENWIDTH;
  ADD          RQ21, 640, RQ21
// r_draw.c:531   frac += fracstep;
  MOV.L        (R2, 108), RD13
  ADDS.L       RD20, RD13, RD20
  ADD          RD23, 0, RQ9
  ADDS.L       RD23, -1, RD23
  BRNE.L       R0, RQ9, .L008025C5

.L00C0260D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

HU_Drawer:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// hu_stuff.c:508   HUlib_drawSText(&w_message);
  MOV          TU7A00CA82/w_message, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_drawSText, R1
// hu_stuff.c:509   HUlib_drawIText(&w_chat);
  MOV          TU7A00CA82/w_chat, RQ18
  ADD          RQ18, 0, RQ10
  BSR          HUlib_drawIText, R1
// hu_stuff.c:510   if (automapactive)
  MOV.L        automapactive, RD13
  BREQ.L       R0, RD13, .L00802C76
// hu_stuff.c:511   HUlib_drawTextLine(&w_title, false);
  MOV          TU7A00CA82/w_title, RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          HUlib_drawTextLine, R1

.L00802C76:

.L00C02614:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_SetLineTexture:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RD11, 0, RD20
  MOV.L        RD12, (R2, 112)
  ADD          RD13, 0, RD22
  MOV.L        RD14, (R2, 104)
// p_acspec.c:863   printf("P_AcsRun_SetLineTexture: a1=%d a2=%d a3=%d a4=%d\n",
  MOV          .L00C0261B, RQ10
  ADD          RD20, 0, RD11
  MOV.L        (R2, 112), RD12
  ADD          RD22, 0, RD13
  MOV.L        (R2, 104), RD14
  BSR          printf, R1
// p_acspec.c:866   tex=R_TextureNumForName(p_acsvm_strs_ptr[a4]);
  MOV          p_acsvm_strs_ptr, RQ27
  MOV.L        (R2, 104), RD26
  MOV.Q        (RQ27, RD26), RQ18
  ADD          RQ18, 0, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RD23
// p_acspec.c:868   idx=0;
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 100)
// p_acspec.c:869   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 100, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ9
// p_acspec.c:870   while(ld)
  BSR          .L00801939, R0

.L00801937:
// p_acspec.c:871   {
  ADD          RQ9, 36, RQ18
  MOV.L        (R2, 112), RD27
  MOV.W        (RQ18, RD27), RD21
// p_acspec.c:873   if(((u16)sn)==0xFFFF)
  AND          RD21, 0x0000FFFF, RQ26
  LDIZ         0x0000FFFF, RD13
  BRNE.Q       RD13, RQ26, .L0080193A
// p_acspec.c:874   {
  ADD          R2, 100, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ9
// p_acspec.c:876   continue;
  BSR          .L00801939, R0

.L0080193A:
// p_acspec.c:879   sd=sides+sn;
  MOV.Q        sides, RQ27
  ADD          R0, 24, R5
  MUL.L        RD21, R5, RQ8
  ADD          RQ27, RQ8, RQ8
// p_acspec.c:881   switch(a3)
  BREQ.L       R0, RD22, .L0080193C
  BREQ.Q       1, RD22, .L0080193D
  BREQ.Q       2, RD22, .L0080193E
  BSR          .L0080193B, R0

.L0080193C:
// p_acspec.c:883   case 0:
  MOV.W        RD23, (RQ8, 8)
// p_acspec.c:885   break;
  BSR          .L0080193B, R0

.L0080193D:
// p_acspec.c:886   case 1:
  MOV.W        RD23, (RQ8, 12)
// p_acspec.c:888   break;
  BSR          .L0080193B, R0

.L0080193E:
// p_acspec.c:889   case 2:
  MOV.W        RD23, (RQ8, 10)
// p_acspec.c:891   break;

.L0080193B:
// p_acspec.c:894   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 100, RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ9

.L00801939:
  BRNE.Q       R0, RQ9, .L00801937

.L00801938:

.L00C0261A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_SpawnGlowingLight:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ9
// p_lights.c:347   g = Z_Malloc( sizeof(glow_t), PU_LEVSPEC, 0);
  ADD          R0, 48, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_lights.c:349   P_AddThinker(&g->thinker);
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          P_AddThinker, R1
// p_lights.c:351   g->sector = sector;
  MOV.Q        RQ9, (RQ18, 24)
// p_lights.c:352   g->minlight = P_FindMinSurroundingLight(sector,sector->lightlevel);
  MOV.W        (RQ9, 12), RQ8
  ADD          RQ9, 0, RQ10
  SHAD.Q       RQ8, 48, RD11
  SHAR.Q       RD11, 48, RD11
  BSR          P_FindMinSurroundingLight, R1
  ADD          RQ10, 0, RQ22
  MOV.L        RQ22, (RQ18, 32)
// p_lights.c:353   g->maxlight = sector->lightlevel;
  MOV.W        (RQ9, 12), RQ8
  MOV.L        RQ8, (RQ18, 36)
// p_lights.c:354   g->thinker.function.acp1 = (actionf_p1) T_Glow;
  MOV          T_Glow, RQ23
  ADD          RQ18, 0, RQ21
  ADD          RQ21, 16, RQ20
  MOV.Q        RQ23, (RQ20, 0)
// p_lights.c:355   g->direction = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ18, 40)
// p_lights.c:357   sector->special = 0;
  MOV.W        RD0, (RQ9, 14)

.L00C02621:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

M_DrawMainMenu:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 94, RD18
  ADD          R0, 2, RD9
  MOV          .L00C02628, RQ23
// m_menu.c:889   V_DrawPatchDirectName (94,2,0, "M_DOOM");
  ADD          R0, 94, RD10
  ADD          R0, 2, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C02627:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawViewBorder:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -288, R2
// r_draw.c:2006   if (scaledviewwidth == SCREENWIDTH)
  MOV.L        scaledviewwidth, RD20
  ADD          R0, 320, RD27
  BREQ.Q       RD27, RD20, .L00C0262E
// r_draw.c:2009   top = ((SCREENHEIGHT-SBARHEIGHT)-viewheight)/2;
  MOV.L        viewheight, RD20
  ADD          R0, 168, R5
  SUBS.L       R5, RD20, RQ9
  ADD          RQ9, 0, RD21
  ADD          R0, 2, RD20
  DIVS.L       RD21, RD20, RD21
// r_draw.c:2010   side = (SCREENWIDTH-scaledviewwidth)/2;
  ADD          R0, 320, RD27
  MOV.L        scaledviewwidth, RD26
  SUBS.L       RD27, RD26, RQ9
  ADD          RQ9, 0, RD22
  DIVS.L       RD22, RD20, RD22
// r_draw.c:2013   R_VideoErase (0, top*SCREENWIDTH+side);
  ADD          R0, 320, R5
  MULS.L       RD21, R5, RQ9
  ADDS.L       RQ9, RD22, RQ18
  ADD          R0, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_VideoErase, R1
// r_draw.c:2016   ofs = (viewheight+top)*SCREENWIDTH-side;
  MOV.L        viewheight, RD26
  ADDS.L       RD26, RD21, RQ9
  ADD          R0, 320, R5
  MULS.L       RQ9, R5, RQ18
  SUBS.L       RQ18, RD22, RD8
// r_draw.c:2017   R_VideoErase (ofs, top*SCREENWIDTH+side);
  ADD          R0, 320, R5
  MULS.L       RD21, R5, RQ9
  ADDS.L       RQ9, RD22, RQ18
  ADDU.L       RD8, R0, RQ9
  ADDU.L       RQ9, R0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_VideoErase, R1
// r_draw.c:2020   ofs = top*SCREENWIDTH + SCREENWIDTH-side;
  ADD          R0, 320, R5
  MULS.L       RD21, R5, RQ18
  ADDS.L       RQ18, 320, RQ9
  SUBS.L       RQ9, RD22, RD8
// r_draw.c:2021   side <<= 1;
  SHAD.L       RD22, 1, RD22
// r_draw.c:2023   for (i=1 ; i<viewheight ; i++)
  ADD          R0, 1, RD23
  MOV.L        viewheight, RD26
  BRGE.L       RD26, RD23, .L0080263B

.L00802639:
// r_draw.c:2024   {
  ADDU.L       RD8, R0, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD22, 0, RD11
  BSR          R_VideoErase, R1
// r_draw.c:2026   ofs += SCREENWIDTH;
  ADDS.L       RD8, 320, RD8
  ADDS.L       RD23, 1, RD23
  MOV.L        viewheight, RD20
  BRLT.L       RD20, RD23, .L00802639

.L0080263B:
// r_draw.c:2030   V_MarkRect (0,0,SCREENWIDTH, SCREENHEIGHT-SBARHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 168, RD13
  BSR          V_MarkRect, R1

.L00C0262E:
  ADD          R2, 288, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_GenerateComposite:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 156)
// r_data.c:296   texture = textures[texnum];
  MOV.Q        textures, RQ27
  MOV.L        (R2, 156), RD26
  MOV.Q        (RQ27, RD26), RQ20
// r_data.c:298   block = Z_Malloc (texturecompositesize[texnum],
  MOV.Q        texturecomposite, RQ27
  LEA.Q        RQ27, RD26, RQ8
  MOV.Q        texturecompositesize, RQ27
  MOV.L        (RQ27, RD26), RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ8, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 144)
// r_data.c:302   collump = texturecolumnlump[texnum];
  MOV.Q        texturecolumnlump, RQ27
  MOV.Q        (RQ27, RD26), RQ25
  MOV.Q        RQ25, (R2, 112)
// r_data.c:303   colofs = texturecolumnofs[texnum];
  MOV.Q        texturecolumnofs, RQ27
  MOV.Q        (RQ27, RD26), RQ24
  MOV.Q        RQ24, (R2, 104)
// r_data.c:324   patch = texture->patches;
  ADD          RQ20, 24, RQ22
// r_data.c:326   for (i=0 , patch = texture->patches;
  ADD          R0, 0, RD27
  ADD          RQ20, 24, RQ8
  ADD          RQ8, 0, RQ22
  MOV.W        (RQ20, 22), RQ18
  MOV.L        RD27, (R2, 132)
  BRGE.L       RQ18, RD27, .L00802420

.L0080241E:
// r_data.c:331   realpatch = W_CachePatchNum (patch->patch, PU_CACHE);
  MOV.L        (RQ22, 8), RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ21
// r_data.c:332   x1 = patch->originx;
  MOV.L        (RQ22, 0), RD27
// r_data.c:334   x2 = x1 + (realpatch->width);
  MOV.W        (RQ21, 0), RQ18
  ADDS.L       RD27, RQ18, RD26
  MOV.L        RD26, (R2, 136)
// r_data.c:336   if (x1<0)
  MOV.L        RD27, (R2, 140)
  BRGE.L       R0, RD27, .L00802421
// r_data.c:337   x = 0;
  ADD          R0, 0, RD9
  BSR          .L00802422, R0

.L00802421:
// r_data.c:339   x = x1;
  MOV.L        (R2, 140), RD9

.L00802422:
// r_data.c:341   if (x2 > texture->width)
  MOV.W        (RQ20, 16), RQ18
  MOV.L        (R2, 136), RD27
  BRLE.L       RQ18, RD27, .L00802423
// r_data.c:342   x2 = texture->width;
  MOV.W        (RQ20, 16), RD27
  MOV.L        RD27, (R2, 136)

.L00802423:
// r_data.c:344   for ( ; x<x2 ; x++)
  MOV.L        (R2, 136), RD27
  BRGE.L       RD27, RD9, .L00802426

.L00802424:
// r_data.c:347   if (collump[x] >= 0)
  MOV.Q        (R2, 112), RQ27
  MOV.W        (RQ27, RD9), RQ18
  BRGE.L       R0, RQ18, .L00802425
// r_data.c:350   patchcol = (column_t *)((byte *)realpatch
  ADD          RQ21, 8, RQ8
  MOV.L        (R2, 140), RD27
  SUBS.L       RD9, RD27, RQ18
  MOV.L        (RQ8, RQ18), RQ23
  ADD          RQ21, RQ23, RQ8
  MOV.Q        RQ8, (R2, 120)
// r_data.c:353   R_DrawColumnInCache (patchcol,
  MOV.W        (RQ20, 18), RQ18
  MOV.L        (RQ22, 4), RQ23
  MOV.Q        (R2, 104), RQ26
  MOVU.W       (RQ26, RD9), RQ25
  MOV.Q        (R2, 144), RQ24
  ADD          RQ24, RQ25, RQ8
  MOV.Q        (R2, 120), RQ10
  ADD          RQ8, 0, RQ11
  ADD          RQ23, 0, RD12
  ADD          RQ18, 0, RD13
  BSR          R_DrawColumnInCache, R1

.L00802425:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 136), RD27
  BRLT.L       RD27, RD9, .L00802424

.L00802426:
  MOV.L        (R2, 132), RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  ADD          RQ22, 0, RQ8
  ADD          RQ22, 12, RQ22
  MOV.W        (RQ20, 22), RQ18
  MOV.L        RD27, (R2, 132)
  BRLT.L       RQ18, RD27, .L0080241E

.L00802420:
// r_data.c:362   Z_ChangeTag (block, PU_CACHE);
  MOV.Q        (R2, 144), RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00C02634:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

tk_fclose:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1064   
  BREQ.Q       R0, RQ9, .L00800B75
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B75
  BSR          .L00800B76, R0

.L00800B75:
// tk_core/tk_vfile.c:1066   

tk_fclose.debugbreak_L0498:
  BRK          1176

.L00800B76:
// tk_core/tk_vfile.c:1068   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B77
// tk_core/tk_vfile.c:1069   

tk_fclose.debugbreak_L0499:
  BRK          1177

.L00800B77:
// tk_core/tk_vfile.c:1071   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 120), RQ8
  BREQ.Q       R0, RQ8, .L00800B78
// tk_core/tk_vfile.c:1072   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 120), RQ22
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C02644, R0

.L00800B78:
// tk_core/tk_vfile.c:1073   
  ADD          R0, -1, RD10

.L00C02644:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

vsscanf:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -576, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          RQ11, 0, RQ9
  MOV.Q        RQ12, (R2, 72)
// pdpc201/stdio.c:2894   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 72), RQ11
  ADD          RQ0, 0, RQ12
  MOV.Q        (R2, 88), RQ13
  BSR          vvscanf, R1
// pdpc201/stdio.c:2895   

.L00C0264C:
  ADD          R2, 576, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

G_DoCompleted:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
  ADD          R0, 4, RD23
// g_game.c:1047   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1049   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008015AC:
// g_game.c:1050   if (playeringame[i])
  MOV          playeringame, RQ22
  MOV.L        (RQ22, RD18), RQ8
  BREQ.L       R0, RQ8, .L008015AF
// g_game.c:1051   G_PlayerFinishLevel (i);		// take away cards and stuff
  ADD          RD18, 0, RD10
  BSR          G_PlayerFinishLevel, R1

.L008015AF:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015AC

.L008015AE:
// g_game.c:1053   if (automapactive)
  MOV.L        automapactive, RD22
  BREQ.L       R0, RD22, .L008015B0
// g_game.c:1054   AM_Stop ();
  BSR          AM_Stop, R1

.L008015B0:
// g_game.c:1056   if ( gamemode != commercial)
  MOV.L        gamemode, RD22
  BREQ.Q       2, RD22, .L008015B1
// g_game.c:1057   switch(gamemap)
  MOV.L        gamemap, RD22
  BREQ.Q       8, RD22, .L008015B3
  MOV.L        gamemap, RD22
  BREQ.Q       9, RD22, .L008015B4
  BSR          .L008015B2, R0

.L008015B3:
// g_game.c:1059   case 8:
  ADD          R0, 7, RD22
  MOV.L        RD22, gameaction
// g_game.c:1061   return;
  BSR          .L00C02652, R0

.L008015B4:
// g_game.c:1062   case 9:
  ADD          R0, 0, RD18

.L008015B5:
// g_game.c:1064   players[i].didsecret = true;
  MOV          players, RQ22
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  ADD          R0, 1, RD22
  MOV.L        RD22, (RQ21, 312)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015B5

.L008015B7:
// g_game.c:1065   break;

.L008015B2:

.L008015B1:
// g_game.c:1069   if ( (gamemap == 8)
  MOV.L        gamemap, RD22
  ADD          R0, 8, R5
  CMPEQ.Q      RD22, R5, RQ8
  MOV.L        gamemode, RD22
  ADD          R0, 2, R5
  CMPNE.Q      RD22, R5, RQ9
  BTST.L       RQ9, RQ8, .L008015B8
// g_game.c:1073   gameaction = ga_victory;
  ADD          R0, 7, RD22
  MOV.L        RD22, gameaction
// g_game.c:1074   return;
  BSR          .L00C02652, R0

.L008015B8:
// g_game.c:1077   if ( (gamemap == 9)
  MOV.L        gamemap, RD22
  ADD          R0, 9, R5
  CMPEQ.Q      RD22, R5, RQ8
  MOV.L        gamemode, RD22
  ADD          R0, 2, R5
  CMPNE.Q      RD22, R5, RQ9
  BTST.L       RQ9, RQ8, .L008015B9
// g_game.c:1081   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008015BA:
// g_game.c:1082   players[i].didsecret = true;
  MOV          players, RQ22
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  ADD          R0, 1, RD22
  MOV.L        RD22, (RQ21, 312)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015BA

.L008015BC:

.L008015B9:
// g_game.c:1087   wminfo.didsecret = players[consoleplayer].didsecret;
  MOV          players, RQ22
  MOV.L        consoleplayer, RD21
  ADD          R0, 320, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 312), RQ9
  MOV          wminfo, RQ22
  MOV.L        RQ9, (RQ22, 4)
// g_game.c:1088   wminfo.epsd = gameepisode -1;
  MOV.L        gameepisode, RD21
  ADDS.L       RD21, -1, RQ8
  MOV.L        RQ8, (RQ22, 0)
// g_game.c:1089   wminfo.last = gamemap -1;
  MOV.L        gamemap, RD21
  ADDS.L       RD21, -1, RQ9
  MOV.L        RQ9, (RQ22, 8)
// g_game.c:1092   if ( gamemode == commercial)
  MOV.L        gamemode, RD22
  BRNE.Q       2, RD22, .L008015BD
  MOV.L        secretexit, RD22
  BREQ.L       R0, RD22, .L008015BE
// g_game.c:1095   switch(gamemap)
  MOV.L        gamemap, RD22
  BREQ.Q       15, RD22, .L008015C0
  MOV.L        gamemap, RD22
  BREQ.Q       31, RD22, .L008015C1
  BSR          .L008015BF, R0

.L008015C0:
// g_game.c:1097   case 15: wminfo.next = 30; break;
  ADD          R0, 30, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
  BSR          .L008015BF, R0

.L008015C1:
// g_game.c:1098   case 31: wminfo.next = 31; break;
  ADD          R0, 31, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)

.L008015BF:
  BSR          .L008015C2, R0

.L008015BE:
// g_game.c:1101   switch(gamemap)
  MOV.L        gamemap, RD22
  BREQ.Q       31, RD22, .L008015C4
  MOV.L        gamemap, RD22
  BREQ.Q       32, RD22, .L008015C5
  BSR          .L008015C6, R0

.L008015C4:

.L008015C5:
// g_game.c:1104   case 32: wminfo.next = 15; break;
  ADD          R0, 15, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
  BSR          .L008015C3, R0

.L008015C6:
// g_game.c:1105   default: wminfo.next = gamemap;
  MOV.L        gamemap, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)

.L008015C3:

.L008015C2:
  BSR          .L008015C7, R0

.L008015BD:
  MOV.L        secretexit, RD22
  BREQ.L       R0, RD22, .L008015C8
// g_game.c:1111   wminfo.next = 8; 	// go to secret level
  ADD          R0, 8, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
  BSR          .L008015C9, R0

.L008015C8:
  MOV.L        gamemap, RD22
  BRNE.Q       9, RD22, .L008015CA
// g_game.c:1115   switch (gameepisode)
  MOV.L        gameepisode, RD22
  BREQ.Q       1, RD22, .L008015CC
  MOV.L        gameepisode, RD22
  BREQ.Q       2, RD22, .L008015CD
  MOV.L        gameepisode, RD22
  BREQ.Q       3, RD22, .L008015CE
  MOV.L        gameepisode, RD22
  BREQ.Q       4, RD22, .L008015CF
  BSR          .L008015CB, R0

.L008015CC:
// g_game.c:1117   case 1:
  ADD          R0, 3, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
// g_game.c:1119   break;
  BSR          .L008015CB, R0

.L008015CD:
// g_game.c:1120   case 2:
  ADD          R0, 5, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
// g_game.c:1122   break;
  BSR          .L008015CB, R0

.L008015CE:
// g_game.c:1123   case 3:
  ADD          R0, 6, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
// g_game.c:1125   break;
  BSR          .L008015CB, R0

.L008015CF:
// g_game.c:1126   case 4:
  ADD          R0, 2, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)
// g_game.c:1128   break;

.L008015CB:
  BSR          .L008015D0, R0

.L008015CA:
// g_game.c:1132   wminfo.next = gamemap;			// go to next level
  MOV.L        gamemap, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 12)

.L008015D0:

.L008015C9:

.L008015C7:
// g_game.c:1135   wminfo.maxkills = totalkills;
  MOV.L        totalkills, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 16)
// g_game.c:1136   wminfo.maxitems = totalitems;
  MOV.L        totalitems, RD22
  MOV.L        RD22, (RQ21, 20)
// g_game.c:1137   wminfo.maxsecret = totalsecret;
  MOV.L        totalsecret, RD22
  MOV.L        RD22, (RQ21, 24)
// g_game.c:1138   wminfo.maxfrags = 0;
  MOV.L        RD0, (RQ21, 28)
// g_game.c:1139   if ( gamemode == commercial )
  MOV.L        gamemode, RD22
  BRNE.Q       2, RD22, .L008015D1
// g_game.c:1140   wminfo.partime = 35*cpars[gamemap-1];
  MOV.L        gamemap, RD22
  ADDS.L       RD22, -1, RQ8
  MOV          cpars, RQ22
  MOV.L        (RQ22, RQ8), RQ9
  ADD          R0, 35, R5
  MULS.L       RQ9, R5, RQ8
  MOV          wminfo, RQ22
  MOV.L        RQ8, (RQ22, 32)
  BSR          .L008015D2, R0

.L008015D1:
// g_game.c:1142   wminfo.partime = 35*pars[gameepisode][gamemap];
  MOV          pars, RQ22
  MOV.L        gameepisode, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        gamemap, RD22
  MOV.L        (RQ20, RD22), RQ8
  MOV.Q        RQ20, (R2, 80)
  ADD          R0, 35, R5
  MULS.L       RQ8, R5, RQ9
  MOV          wminfo, RQ22
  MOV.L        RQ9, (RQ22, 32)

.L008015D2:
// g_game.c:1143   wminfo.pnum = consoleplayer;
  MOV.L        consoleplayer, RD22
  MOV          wminfo, RQ21
  MOV.L        RD22, (RQ21, 36)
// g_game.c:1145   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008015D3:
// g_game.c:1146   {
  MOV          playeringame, RQ22
  MOV.L        (RQ22, RD18), RQ8
  MOV          wminfo, RQ22
  ADD          RQ22, 40, RQ21
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        RQ8, (RQ20, 0)
// g_game.c:1148   wminfo.plyr[i].skills = players[i].killcount;
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 208), RQ9
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        RQ9, (RQ20, 4)
// g_game.c:1149   wminfo.plyr[i].sitems = players[i].itemcount;
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 212), RQ9
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        RQ9, (RQ20, 8)
// g_game.c:1150   wminfo.plyr[i].ssecret = players[i].secretcount;
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 216), RQ9
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        RQ9, (RQ20, 12)
// g_game.c:1151   wminfo.plyr[i].stime = leveltime;
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        leveltime, RD25
  MOV.L        RD25, (RQ20, 16)
// g_game.c:1152   memcpy (wminfo.plyr[i].frags, players[i].frags
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 100, RQ21
  MOV.Q        RQ21, (R2, 80)
  ADD          RQ22, 40, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ20
  ADD          RQ27, RQ20, RQ20
  ADD          RQ20, 20, RQ27
  MOV.Q        (RQ21, 0), RQ10
  MOV.Q        (RQ21, 8), RQ11
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015D3

.L008015D5:
// g_game.c:1156   gamestate = GS_INTERMISSION;
  ADD          R0, 1, RD22
  MOV.L        RD22, gamestate
// g_game.c:1157   viewactive = false;
  MOV.L        RD0, viewactive
// g_game.c:1158   automapactive = false;
  MOV.L        RD0, automapactive
// g_game.c:1160   if (statcopy)
  MOV.Q        statcopy, RQ22
  BREQ.Q       R0, RQ22, .L008015D6
// g_game.c:1161   memcpy (statcopy, &wminfo, sizeof(wminfo));
  MOV          wminfo, RQ22
  ADD          RQ22, 0, RQ21
  MOV.Q        RQ21, (R2, 80)
  MOV.Q        statcopy, RQ22
  ADD          RQ22, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __memcpy64_200, R1

.L008015D6:
// g_game.c:1163   WI_Start (&wminfo);
  MOV          wminfo, RQ22
  ADD          RQ22, 0, RQ10
  BSR          WI_Start, R1

.L00C02652:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

ST_diffDraw:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// st_stuff.c:1144   ST_drawWidgets(false);
  ADD          R0, 0, RD10
  BSR          ST_drawWidgets, R1

.L00C02658:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

AM_drawMarks:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// am_map.c:1323   for (i=0;i<AM_NUMMARKPOINTS;i++)
  ADD          R0, 0, RD8

.L0080187C:
// am_map.c:1324   {
  MOV          TU7A00C41B/markpoints, RQ27
  LEA.Q        RQ27, RD8, RQ26
  MOV.L        (RQ26, 0), RQ18
  BREQ.Q       -1, RQ18, .L0080187F
// am_map.c:1329   w = 5; // because something's wrong with the wad, i guess
  ADD          R0, 5, RD20
// am_map.c:1330   h = 6; // because something's wrong with the wad, i guess
  ADD          R0, 6, RD27
  MOV.L        RD27, (R2, 108)
// am_map.c:1331   fx = CXMTOF(markpoints[i].x);
  MOV          TU7A00C41B/markpoints, RQ26
  LEA.Q        RQ26, RD8, RQ25
  MOV.L        (RQ25, 0), RQ18
  MOV.L        TU7A00C41B/m_x, RD26
  SUBS.L       RQ18, RD26, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ9
  MOV.L        TU7A00C41B/f_x, RD26
  ADDS.L       RD26, RQ9, RD22
// am_map.c:1332   fy = CYMTOF(markpoints[i].y);
  MOV          TU7A00C41B/markpoints, RQ26
  LEA.Q        RQ26, RD8, RQ25
  MOV.L        (RQ25, 4), RQ18
  MOV.L        TU7A00C41B/m_y, RD26
  SUBS.L       RQ18, RD26, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ9
  MOV.L        TU7A00C41B/f_h, RD26
  SUBS.L       RD26, RQ9, RQ18
  MOV.L        TU7A00C41B/f_y, RD26
  ADDS.L       RD26, RQ18, RD21
  MOV.L        TU7A00C41B/f_x, RD27
  CMPGE.Q      RD22, RD27, RQ9
  MOV.L        TU7A00C41B/f_w, RD27
  SUBS.L       RD27, RD20, RQ18
  CMPGE.Q      RQ18, RD22, RQ23
  AND          RQ9, RQ23, RQ18
  CMPGE.Q      RD21, RD26, RQ9
  BTST.L       RQ9, RQ18, .L00801880
  MOV.L        TU7A00C41B/f_h, RD27
  MOV.L        (R2, 108), RD26
  SUBS.L       RD27, RD26, RQ23
  BRGT.L       RQ23, RD21, .L00801880

.L00801881:
// am_map.c:1334   V_DrawPatch(fx, fy, FB, marknums[i]);
  MOV          TU7A00C41B/marknums, RQ27
  MOV.Q        (RQ27, RD8), RQ13
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  BSR          V_DrawPatch, R1

.L00801880:

.L0080187F:
  ADDS.L       RD8, 1, RD8
  BRLT.L       10, RD8, .L0080187C

.L0080187E:

.L00C0265E:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

P_LoadBehavior:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD23
// p_setup.c:1033   lsz = W_LumpLength (lump);
  ADD          RD23, 0, RD10
  BSR          W_LumpLength, R1
  ADDS.L       RQ10, 0, RD8
// p_setup.c:1035   if(lsz<8)
  BRGE.L       8, RD8, .L00802024
// p_setup.c:1036   {
  MOV.L        RD0, p_map_hexenfmt
// p_setup.c:1038   return;
  BSR          .L00C02664, R0

.L00802024:
// p_setup.c:1042   data = W_CacheLumpNum (lump,PU_STATIC);
  ADD          RD23, 0, RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ18
// p_setup.c:1044   if(!data)
  BRNE.Q       R0, RQ18, .L00802025
// p_setup.c:1045   {
  MOV.L        RD0, p_map_hexenfmt
// p_setup.c:1047   return;
  BSR          .L00C02664, R0

.L00802025:
// p_setup.c:1050   if((data[0]!='A') || (data[1]!='C') || (data[2]!='S'))
  MOVU.B       (RQ18, 0), RQ9
  BRNE.Q       65, RQ9, .L00802027
  MOVU.B       (RQ18, 1), RQ9
  BRNE.Q       67, RQ9, .L00802027

.L00802028:
  MOVU.B       (RQ18, 2), RQ9
  BRNE.Q       83, RQ9, .L00802027
  BSR          .L00802026, R0

.L00802027:
// p_setup.c:1051   {
  MOV.L        RD0, p_map_hexenfmt
// p_setup.c:1053   Z_Free (data);
  ADD          RQ18, 0, RQ10
  BSR          Z_Free, R1
// p_setup.c:1055   return;
  BSR          .L00C02664, R0

.L00802026:
// p_setup.c:1058   p_map_hexenfmt = 1;
  ADD          R0, 1, RD22
  MOV.L        RD22, p_map_hexenfmt
// p_setup.c:1059   P_SetupAcsImage(data, lsz);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_SetupAcsImage, R1
// p_setup.c:1061   return;

.L00C02664:
  ADD          R2, 320, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

tkmm_lva_oprand_bigig:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -600, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:349   
// tk_core/lva_tagopr.c:351   
  ADD          R2, 112, RQ10
  ADD          RQ18, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:352   
  ADD          R2, 176, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:353   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 240, RQ12
  BSR          tkmm_bigint_and, R1
// tk_core/lva_tagopr.c:354   
  ADD          R2, 240, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C0266A:
  ADD          R2, 600, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

__lva_conv_tostring:
  ADD          R2, -128, R2
  MOV.Q        RQ1, (R2, 120)
  MOV.X        R8, (R2, 0)
  MOV.X        R24, (R2, 64)
  MOV.X        R18, (R2, 16)
  MOV.Q        R58, (R2, 112)
  MOV.X        R22, (R2, 48)
  MOV.X        R26, (R2, 80)
  MOV.X        R20, (R2, 32)
  MOV.Q        R56, (R2, 96)
  MOV.Q        R57, (R2, 104)
  ADD          R2, -560, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 160)
// pdpc201/btshx_lva.c:1765   
// pdpc201/btshx_lva.c:1772   
  MOV.Q        (R2, 168), RQ10
  BSR          __lva_fixnump, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801073
// pdpc201/btshx_lva.c:1773   
  MOV.Q        (R2, 168), RQ10
  BSR          __lva_conv_toi64, R1
  ADD          RQ10, 0, RQ27
// pdpc201/btshx_lva.c:1775   
  MOV.L        RD0, (R2, 120)
  MOV.Q        RQ27, (R2, 152)
  BRGE.Q       R0, RQ27, .L00801074
// pdpc201/btshx_lva.c:1777   
  MOV.Q        (R2, 152), RQ27
  SUB          R0, RQ27, RQ27
  MOV.Q        RQ27, (R2, 152)
  ADD          R0, 1, RD26
  MOV.L        RD26, (R2, 120)

.L00801074:
// pdpc201/btshx_lva.c:1779   
  ADD          R2, 176, RQ27
  ADD          RQ27, 127, RQ18
// pdpc201/btshx_lva.c:1780   
  ADD          RQ18, -1, RQ18
  MOV.B        RD0, (RQ18, 0)
// pdpc201/btshx_lva.c:1781   

.L00801075:
  MOV.Q        (R2, 152), RQ26
  ADD          RQ26, 0, RQ27
  ADD          R0, 10, RQ25
  DIVS.Q       RQ27, RQ25, RQ27
// pdpc201/btshx_lva.c:1783   
  SHAD.Q       RQ27, 1, RQ6
  SHAD.Q       RQ27, 3, RQ7
  ADD          RQ6, RQ7, RQ23
  SUB          RQ26, RQ23, RQ22
  ADDS.L       RQ22, 0, RD21
// pdpc201/btshx_lva.c:1784   
  ADDS.L       RD21, 48, RQ9
  ADD          RQ18, -1, RQ18
  MOV.B        RQ9, (RQ18, 0)
// pdpc201/btshx_lva.c:1785   
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ27, (R2, 144)
  MOV.Q        RQ26, (R2, 152)
  BRNE.Q       R0, RQ26, .L00801075
  MOV.L        (R2, 120), RD27
  BREQ.L       R0, RD27, .L00801076
// pdpc201/btshx_lva.c:1789   
  ADD          RQ18, -1, RQ18
  ADD          R0, 45, RD27
  MOV.B        RD27, (RQ18, 0)

.L00801076:
// pdpc201/btshx_lva.c:1791   
  ADD          RQ18, 0, RQ10
  BSR          tk_rstrdup, R1
  BSR          .L00C02670, R0

.L00801073:
// pdpc201/btshx_lva.c:1794   
  MOV.Q        (R2, 168), RQ10
  BSR          __lva_flonump, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801077
// pdpc201/btshx_lva.c:1795   
  MOV.Q        (R2, 168), RQ10
  BSR          __lva_conv_tof64, R1
  FMOVID       RQ10, RQ56
// pdpc201/btshx_lva.c:1797   
  FSTCI        RQ56, RQ23
  ADD          RQ23, 0, RQ27
// pdpc201/btshx_lva.c:1798   
  FSUB         RQ56, RQ27, RQ57
  MOV.Q        RQ56, (R2, 136)
  MOV.Q        RQ27, (R2, 152)
// pdpc201/btshx_lva.c:1799   
  ADD          R0, 0x412E8480, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ58
  FMUL         RQ57, RQ58, RQ19
  MOV.Q        RQ57, (R2, 128)
  ADD          R0, 0x3FE00000, RQ24
  LDSH32       RQ24, 0, RQ24
  FADD         RQ19, RQ24, RQ25
  FSTCI        RQ25, RQ26
// pdpc201/btshx_lva.c:1801   
  ADD          R2, 176, RQ27
  ADD          RQ27, 127, RQ18
// pdpc201/btshx_lva.c:1802   
  ADD          RQ18, -1, RQ18
  MOV.B        RD0, (RQ18, 0)
// pdpc201/btshx_lva.c:1804   
  ADD          RQ26, 0, RQ8
  MOV.Q        RQ26, (R2, 144)
// pdpc201/btshx_lva.c:1806   
  MOV.L        RD0, (R2, 124)

.L00801078:
// pdpc201/btshx_lva.c:1807   
  ADD          RQ8, 0, RQ20
  ADD          R0, 10, RQ27
  DIVS.Q       RQ20, RQ27, RQ20
// pdpc201/btshx_lva.c:1809   
  SHAD.Q       RQ20, 1, RQ6
  SHAD.Q       RQ20, 3, RQ7
  ADD          RQ6, RQ7, RQ23
  SUB          RQ8, RQ23, RQ22
  ADDS.L       RQ22, 0, RD21
// pdpc201/btshx_lva.c:1810   
  ADDS.L       RD21, 48, RQ9
  ADD          RQ18, -1, RQ18
  MOV.B        RQ9, (RQ18, 0)
// pdpc201/btshx_lva.c:1811   
  ADD          RQ20, 0, RQ8
  MOV.L        (R2, 124), RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, (R2, 124)
  BRLT.L       6, RD26, .L00801078

.L00801079:
// pdpc201/btshx_lva.c:1814   
  ADD          RQ18, -1, RQ18
  ADD          R0, 46, RD27
  MOV.B        RD27, (RQ18, 0)
// pdpc201/btshx_lva.c:1816   
  MOV.Q        (R2, 152), RQ26
  ADD          RQ26, 0, RQ8
// pdpc201/btshx_lva.c:1817   

.L0080107A:
  ADD          RQ8, 0, RQ20
  ADD          R0, 10, RQ27
  DIVS.Q       RQ20, RQ27, RQ20
// pdpc201/btshx_lva.c:1819   
  SHAD.Q       RQ20, 1, RQ6
  SHAD.Q       RQ20, 3, RQ7
  ADD          RQ6, RQ7, RQ23
  SUB          RQ8, RQ23, RQ22
  ADDS.L       RQ22, 0, RD21
// pdpc201/btshx_lva.c:1820   
  ADDS.L       RD21, 48, RQ9
  ADD          RQ18, -1, RQ18
  MOV.B        RQ9, (RQ18, 0)
// pdpc201/btshx_lva.c:1821   
  ADD          RQ20, 0, RQ8
  BRNE.Q       R0, RQ8, .L0080107A
  MOV.L        (R2, 120), RD27
  BREQ.L       R0, RD27, .L0080107B
// pdpc201/btshx_lva.c:1825   
  ADD          RQ18, -1, RQ18
  ADD          R0, 45, RD27
  MOV.B        RD27, (RQ18, 0)

.L0080107B:
// pdpc201/btshx_lva.c:1827   
  ADD          RQ18, 0, RQ10
  BSR          tk_rstrdup, R1
  BSR          .L00C02670, R0

.L00801077:
// pdpc201/btshx_lva.c:1830   
  MOV          .L00C02671, RQ10

.L00C02670:
  ADD          R2, 560, R2
  MOV.Q        (R2, 120), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  MOV.Q        (R2, 96), R56
  MOV.Q        (R2, 104), R57
  MOV.Q        (R2, 112), R58
  ADD          R2, 128, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_NewBigInt:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.X        RQ10, (R2, 96)
// tk_core/lva_tagopr.c:187   
  ADD          R0, 0, RQ20
  ADD          R0, 0, RQ21
  ADD          RQ20, 0, RQ22
  ADD          RQ21, 0, RQ23
// tk_core/lva_tagopr.c:188   
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        RQ22, (R2, 80)
  MOV.X        RQ20, (R2, 64)
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 96), RQ10
  BSR          __xli_cmp_ge, R1
  BRNE.Q       RQ10, R0, .L00800E22
// tk_core/lva_tagopr.c:189   
  ADD          R0, -1, RQ20
  ADD          R0, -1, RQ21
  ADD          RQ20, 0, RQ22
  ADD          RQ21, 0, RQ23
  MOV.X        RQ22, (R2, 80)

.L00800E22:
// tk_core/lva_tagopr.c:191   
  BSR          TKMM_LVA_AllocBigInt, R1
  ADD          RQ10, 0, RQ18
// tk_core/lva_tagopr.c:193   
  MOV.X        (R2, 96), RQ22
  MOV.X        RQ22, (RQ18, 0)
// tk_core/lva_tagopr.c:194   
  MOV.X        (R2, 80), RQ20
  MOV.X        RQ20, (RQ18, 16)
// tk_core/lva_tagopr.c:195   
  MOV.X        RQ20, (RQ18, 32)
// tk_core/lva_tagopr.c:196   
  ADD          RQ18, 0, RQ9
// tk_core/lva_tagopr.c:197   
  ADD          R0, 0x00180000, RQ8
  LDSH32       RQ8, 0, RQ8
  OR           RQ9, RQ8, RQ9
// tk_core/lva_tagopr.c:198   
  ADD          RQ9, 0, RQ10

.L00C02677:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

__tell:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD18
  ADD          R0, 3, RD23
// pdpc201/btshx_supa.c:373   
  BRGE.L       3, RD18, .L00800FA7
// pdpc201/btshx_supa.c:374   

__tell.debugbreak_L04A9:
  BRK          1193

.L00800FA7:
  BRLT.L       256, RD18, .L00800FA8
// pdpc201/btshx_supa.c:376   

__tell.debugbreak_L04AA:
  BRK          1194

.L00800FA8:
  MOV          btshx_tk_handles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
// pdpc201/btshx_supa.c:378   
  BRNE.Q       R0, RQ9, .L00800FA9
// pdpc201/btshx_supa.c:379   

__tell.debugbreak_L04AB:
  BRK          1195

.L00800FA9:
  ADD          RQ9, 0, RQ10
  BSR          tk_ftell, R1

.L00C0268C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_msync:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.L        RD12, (R2, 76)
// tk_core/tk_mmap.c:450   
  BSR          TKMM_InitMMap, R1
// tk_core/tk_mmap.c:459   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.L        (R2, 76), RD12
  BSR          TKMM_MSyncV, R1

.L00C02695:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_MakeDivline:
// p_maputl.c:218   {
  MOV.Q        (RQ10, 0), RQ13
  MOV.L        (RQ13, 0), RQ12
  MOV.L        RQ12, (RQ11, 0)
// p_maputl.c:220   dl->y = li->v1->y;
  MOV.L        (RQ13, 4), RQ12
  MOV.L        RQ12, (RQ11, 4)
// p_maputl.c:221   dl->dx = li->dx;
  MOV.L        (RQ10, 16), RQ12
  MOV.L        RQ12, (RQ11, 8)
// p_maputl.c:222   dl->dy = li->dy;
  MOV.L        (RQ10, 20), RQ12
  MOV.L        RQ12, (RQ11, 12)

.L00C02696:
  JSR          R1, 0, R0

tkgBlitImage:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -440, R2
  ADD          RD10, 0, RD22
  ADD          RD11, 0, RD21
  ADD          RD12, 0, RD20
  ADD          RQ13, 0, RQ18
  MOV.Q        RQ14, (R2, 176)
// tk_gdi/tkg_display.c:182   
  MOV.L        (RQ18, 8), RQ8
  MOV.L        (RQ18, 4), RQ9
  ADD          RD22, 0, RD10
  ADD          RD21, 0, RD11
  ADD          RD20, 0, RD12
  ADD          RQ18, 0, RQ13
  MOV.Q        (R2, 176), RQ14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  ADD          RQ9, 0, RD17
  ADDS.L       RQ8, 0, RD6
  MOV.L        RD6, (R2, 0)
  BSR          tkgBlitSubImage, R1

.L00C0269C:
  ADD          R2, 440, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_sysc_fioctl:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.X        R22, (R2, 32)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R27, (R2, 48)
  MOV.X        R20, (R2, 16)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -432, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.L        RD11, (R2, 116)
  MOV.Q        RQ12, (R2, 104)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:295   
// tk_vf_sysc.c:300   
  ADD          R0, 0, RQ23
  MOV.Q        RQ23, (R2, 88)
// tk_vf_sysc.c:301   
  MOV.Q        (R2, 120), RQ22
  MOV.L        (RQ22, 64), RQ18
  ADD          R2, 128, RQ23
  ADD          RQ23, 0, RQ21
  MOV.L        RQ18, (RQ21, 0)
// tk_vf_sysc.c:302   
  ADD          RQ23, 8, RQ21
  MOV.L        (R2, 116), RD20
  MOV.L        RD20, (RQ21, 0)
// tk_vf_sysc.c:303   
  ADD          RQ23, 16, RQ21
  MOV.Q        (R2, 104), RQ27
  MOV.Q        RQ27, (RQ21, 0)
// tk_vf_sysc.c:304   
  ADD          R2, 88, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4140, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          tk_syscall, R1
// tk_vf_sysc.c:305   

.L00C026A2:
  ADD          R2, 432, R2
  MOV.Q        (R2, 56), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R20
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

R_NewVisSprite:
// r_things.c:372   {
  MOV          vissprites, RQ13
  ADD          R0, 128, RD12
  ADD          R0, 80, R5
  MUL.L        RD12, R5, RQ11
  ADD          RQ13, RQ11, RQ11
  MOV.Q        vissprite_p, RQ10
  BRNE.Q       RQ11, RQ10, .L008027D3
// r_things.c:374   return &overflowsprite;
  MOV          overflowsprite, RQ13
  ADD          RQ13, 0, RQ11
  ADD          RQ11, 0, RQ10
  JSR          R1, 0, R0

.L008027D3:
// r_things.c:376   vissprite_p++;
  MOV.Q        vissprite_p, RQ13
  ADD          RQ13, 80, RQ13
// r_things.c:377   return vissprite_p-1;
  ADD          RQ13, -80, RQ11
  MOV.Q        RQ13, vissprite_p
  ADD          RQ11, 0, RQ10

.L00C026A3:
  JSR          R1, 0, R0
  .balign 4

P_InitThinkers:
// p_tick.c:56   {
  MOV          thinkercap, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, (RQ13, 8)
  MOV.Q        RQ12, (RQ13, 0)

.L00C026A4:
  JSR          R1, 0, R0
  .balign 4

__exit:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// pdpc201/start.c:361   
  ADD          RD18, 0, RD10
  BSR          __exita, R1
// pdpc201/start.c:362   

.L008007D1:
  BSR          .L008007D1, R0

.L008007D2:

.L00C026AA:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

A_FireShotgun:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:677   S_StartSound (player->mo, sfx_shotgn);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          S_StartSound, R1
// p_pspr.c:678   P_SetMobjState (player->mo, S_PLAY_ATK2);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 155, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:680   player->ammo[weaponinfo[player->readyweapon].ammo]--;
  ADD          RQ8, 160, RQ18
  MOV.L        (RQ8, 116), RQ23
  MOV          weaponinfo, RQ21
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 0), RQ23
  MOV.L        (RQ18, RQ23), RQ22
  ADDS.L       RQ22, -1, RQ23
  MOV.L        (RQ8, 116), RQ22
  ADD          R0, 24, R5
  MUL.L        RQ22, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 0), RQ22
  MOV.L        RQ23, (RQ18, RQ22)
// p_pspr.c:682   P_SetPsprite (player,
  MOV.L        (RQ8, 116), RQ23
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 20), RQ22
  ADD          RQ8, 0, RQ10
  ADD          R0, 1, RD11
  ADD          RQ22, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:686   P_BulletSlope (player->mo);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_BulletSlope, R1
// p_pspr.c:688   for (i=0 ; i<7 ; i++)
  ADD          R0, 0, RD9

.L00801EB8:
// p_pspr.c:689   P_GunShot (player->mo, false);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_GunShot, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       7, RD9, .L00801EB8

.L00801EBA:

.L00C026B0:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

R_InitLightTables:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// r_main.c:666   for (i=0 ; i< LIGHTLEVELS ; i++)
  ADD          R0, 0, RD21

.L0080267C:
// r_main.c:667   {
  ADD          R0, 15, R5
  SUBS.L       R5, RD21, RQ9
  SHAD.L       RQ9, 1, RQ22
  SHAD.L       RQ22, 5, RQ9
  MOV.L        RD9, (R2, 108)
  ADD          R0, 16, RD27
  MOV.L        (R2, 108), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 108)
// r_main.c:669   for (j=0 ; j<MAXLIGHTZ ; j++)
  ADD          R0, 0, RD8

.L0080267F:
// r_main.c:670   {
  ADDS.L       RD8, 1, RQ22
  SHAD.L       RQ22, 20, RQ9
  LUI          2560, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD23
// r_main.c:672   scale >>= LIGHTSCALESHIFT;
  SHAR         RD23, 12, RD23
// r_main.c:673   level = startmap - scale/DISTMAP;
  ADD          RD23, 0, RQ22
  ADD          R0, 2, RD27
  DIVS.L       RQ22, RD27, RQ22
  MOV.L        (R2, 108), RD26
  SUBS.L       RD26, RQ22, RD18
// r_main.c:675   if (level < 0)
  BRGE.L       R0, RD18, .L00802682
// r_main.c:676   level = 0;
  ADD          R0, 0, RD18

.L00802682:
// r_main.c:678   if (level >= NUMCOLORMAPS)
  BRLT.L       32, RD18, .L00802683
// r_main.c:679   level = NUMCOLORMAPS-1;
  ADD          R0, 31, RD18

.L00802683:
// r_main.c:681   zlight[i][j] = colormaps + level*256;
  SHAD.L       RD18, 8, RQ9
  MOV.Q        colormaps, RQ27
  LEA.W        RQ27, RQ9, RQ20
  MOV          zlight, RQ27
  SHAD.L       RD21, 10, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ20, (RQ26, RD8)
  ADDS.L       RD8, 1, RD8
  BRLT.L       128, RD8, .L0080267F

.L00802681:
  ADDS.L       RD21, 1, RD21
  BRLT.L       16, RD21, .L0080267C

.L0080267E:

.L00C026B6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_Move:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:289   if (actor->movedir == DI_NODIR)
  MOV.L        (RQ18, 168), RQ23
  BREQ.Q       8, RQ23, .L00C00C00
// p_enemy.c:292   if ((unsigned)actor->movedir >= 8)
  MOV.L        (RQ18, 168), RQ23
  ADDU.L       RQ23, R0, RQ9
  BRLTU.L      8, RQ9, .L00801ADA
// p_enemy.c:293   I_Error ("Weird actor->movedir!");
  MOV          .L00C026BD, RQ10
  BSR          I_Error, R1

.L00801ADA:
// p_enemy.c:295   tryx = actor->x + actor->info->speed*xspeed[actor->movedir];
  MOV.L        (RQ18, 24), RQ23
  MOV.Q        (RQ18, 136), RQ27
  MOV.L        (RQ27, 60), RQ9
  MOV.L        (RQ18, 168), RQ8
  MOV          xspeed, RQ26
  MOV.L        (RQ26, RQ8), RQ22
  MULS.L       RQ9, RQ22, RQ8
  ADDS.L       RQ23, RQ8, RD26
  MOV.L        RD26, (R2, 116)
// p_enemy.c:296   tryy = actor->y + actor->info->speed*yspeed[actor->movedir];
  MOV.L        (RQ18, 28), RQ22
  MOV.L        (RQ18, 168), RQ23
  MOV          yspeed, RQ25
  MOV.L        (RQ25, RQ23), RQ8
  MULS.L       RQ9, RQ8, RQ23
  ADDS.L       RQ22, RQ23, RD25
  MOV.L        RD25, (R2, 112)
// p_enemy.c:298   try_ok = P_TryMove (actor, tryx, tryy);
  ADD          RQ18, 0, RQ10
  ADD          RD26, 0, RD11
  ADD          RD25, 0, RD12
  BSR          P_TryMove, R1
  ADD          RQ10, 0, RD27
// p_enemy.c:300   if (!try_ok)
  MOV.L        RD27, (R2, 108)
  BRNE.L       R0, RD27, .L00801ADB
  MOV.L        (RQ18, 160), RQ9
  LUI          4, RD27
  BTST.L       RD27, RQ9, .L00801ADC
  MOV.L        floatok, RD27
  BREQ.L       R0, RD27, .L00801ADC

.L00801ADD:
  MOV.L        (RQ18, 32), RQ8
  MOV.L        tmfloorz, RD27
  BRGE.L       RD27, RQ8, .L00801ADF
// p_enemy.c:307   actor->z += FLOATSPEED;
  MOV.L        (RQ18, 32), RQ22
  ADDS.L       RQ22, 0x00040000, RQ23
  MOV.L        RQ23, (RQ18, 32)
  BSR          .L00801AE0, R0

.L00801ADF:
// p_enemy.c:309   actor->z -= FLOATSPEED;
  MOV.L        (RQ18, 32), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ8
  MOV.L        RQ8, (RQ18, 32)

.L00801AE0:
// p_enemy.c:311   actor->flags |= MF_INFLOAT;
  MOV.L        (RQ18, 160), RQ22
  OR           RQ22, 0x00200000, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_enemy.c:312   return true;
  ADD          R0, 1, RD10
  BSR          .L00C026BC, R0

.L00801ADC:
  MOV.L        numspechit, RD27
  BRLE.L       R0, RD27, .L00C00C00
// p_enemy.c:319   actor->movedir = DI_NODIR;
  ADD          R0, 8, RD27
  MOV.L        RD27, (RQ18, 168)
// p_enemy.c:320   good = false;
  ADD          R0, 0, RD20
// p_enemy.c:321   while (numspechit--)
  BSR          .L00801AE3, R0

.L00801AE1:
// p_enemy.c:322   {
  MOV          spechit, RQ27
  MOV.L        numspechit, RD26
  MOV.Q        (RQ27, RD26), RQ21
// p_enemy.c:327   if (P_UseSpecialLine (actor, ld,0))
  ADD          RQ18, 0, RQ10
  ADD          RQ21, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801AE4
// p_enemy.c:328   good = true;
  ADD          R0, 1, RD20

.L00801AE4:

.L00801AE3:
  MOV.L        numspechit, RD27
  ADD          RD27, 0, RQ8
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, numspechit
  BRNE.L       R0, RQ8, .L00801AE1

.L00801AE2:
// p_enemy.c:329   }
  ADD          RD20, 0, RD10
  BSR          .L00C026BC, R0
  BSR          .L00801AE5, R0

.L00801ADB:
// p_enemy.c:333   {
  MOV.L        (RQ18, 160), RQ22
  AND          RQ22, 0xFFFFFFFFFFDFFFFF, RQ23
  MOV.L        RQ23, (RQ18, 160)

.L00801AE5:
// p_enemy.c:338   if (! (actor->flags & MF_FLOAT) )	
  MOV.L        (RQ18, 160), RQ9
  LUI          4, RD27
  BTSTN.L      RD27, RQ9, .L00801AE6
// p_enemy.c:339   actor->z = actor->floorz;
  MOV.L        (RQ18, 96), RQ8
  MOV.L        RQ8, (RQ18, 32)

.L00801AE6:
// p_enemy.c:340   return true; 
  ADD          R0, 1, RD10
  BSR          .L00C026BC, R0

.L00C00C00:
  ADD          R0, 0, RQ10

.L00C026BC:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

I_StopSong:
// i_bgb_mus_btsh.c:1112   i_mus_curhandle=0;
  ADD          RD0, 0, RD13
// i_bgb_mus_btsh.c:1113   i_mus_curpos=0;
  ADDS.L       RD0, 0, RD12
  MOV.L        RD13, i_mus_curhandle
  MOV.L        RD12, i_mus_curpos

.L00C026BE:
  JSR          R1, 0, R0

tk_multidir_readdir:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 152)
// tk_vf_sysc.c:492   
  MOV.Q        (R2, 152), RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.Q        RQ26, (R2, 144)
// tk_vf_sysc.c:493   
  MOV.Q        (RQ27, 24), RQ21
// tk_vf_sysc.c:494   
  MOV.Q        (RQ27, 32), RQ8
// tk_vf_sysc.c:495   
  MOV.L        (RQ27, 64), RD25
  MOV.L        RD25, (R2, 120)
// tk_vf_sysc.c:497   
  MOV.L        (RQ27, 68), RD13
  MOV.L        RD13, (R2, 132)
  ADD          R0, 0, RQ21
// tk_vf_sysc.c:498   
  BSR          .L00800B42, R0

.L00800B43:
// tk_vf_sysc.c:499   
  MOV.Q        (R2, 144), RQ27
  MOV.L        (R2, 132), RD26
  MOV.Q        (RQ27, RD26), RQ18
  ADD          RQ18, 0, RQ10
  BSR          tk_readdir, R1
  ADD          RQ10, 0, RQ21
// tk_vf_sysc.c:501   
  BRNE.Q       R0, RQ21, .L00800B44
  MOV.L        (R2, 132), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00800B44:
// tk_vf_sysc.c:504   
  BREQ.Q       R0, RQ21, .L00800B45
  BREQ.Q       R0, RQ8, .L00800B45

.L00800B46:
// tk_vf_sysc.c:505   
  ADD          RQ21, 11, RQ18
  ADD          RQ18, 0, RQ10
  BSR          tk_multidir_hashname, R1
  ADD          RQ10, 0, RQ27
// tk_vf_sysc.c:507   
  SHLR.Q       RQ27, 32, RQ20
  MOV.Q        RQ27, (R2, 136)
  AND          RQ20, 31, RQ26
  ADDS.L       RQ26, 0, RD25
// tk_vf_sysc.c:508   
  ADD          RQ8, 2304, RQ18
  MOVU.B       (RQ18, RD25), RD9
  MOV.L        RD25, (R2, 128)
  ADD          R0, 32, RD25
  MOV.L        RD25, (R2, 124)
// tk_vf_sysc.c:509   
  BSR          .L00800B47, R0

.L00800B48:
// tk_vf_sysc.c:510   
  ADD          RQ8, 0, RQ18
  MOV.Q        (RQ18, RD9), RQ20
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       RQ27, RQ20, .L00800B49
// tk_vf_sysc.c:513   
  ADD          RQ8, 2048, RQ18
  MOVU.B       (RQ18, RD9), RD9

.L00800B47:
  BREQ.L       R0, RD9, .L00800B4A
  MOV.L        (R2, 124), RD27
  BRLE.L       R0, RD27, .L00800B4A
  BSR          .L00800B48, R0

.L00800B4A:

.L00800B49:
  BREQ.L       R0, RD9, .L00800B4B
  MOV.L        (R2, 124), RD27
  BRLE.L       R0, RD27, .L00800B4B

.L00800B4C:
// tk_vf_sysc.c:516   
  ADD          R0, 0, RQ21
  BSR          .L00800B4D, R0

.L00800B4B:
// tk_vf_sysc.c:519   
  MOVU.B       (RQ8, 2336), RQ23
  ADD          RQ23, 0, RQ22
  ADDS.L       RQ23, 1, RQ27
  LDIZ         2336, R5
  MOVU.B       RQ27, (RQ8, R5)
  AND          RQ22, 255, RD9
// tk_vf_sysc.c:521   
  BSR          .L00800B4E, R0

.L00800B4F:
// tk_vf_sysc.c:522   
  MOVU.B       (RQ8, 2336), RQ23
  ADD          RQ23, 0, RQ22
  ADDS.L       RQ23, 1, RQ27
  LDIZ         2336, R5
  MOVU.B       RQ27, (RQ8, R5)
  AND          RQ22, 255, RD9

.L00800B4E:
  BREQ.L       R0, RD9, .L00800B4F

.L00800B50:
  ADD          RQ8, 0, RQ18
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ18, RD9)
// tk_vf_sysc.c:524   
  ADD          RQ8, 2304, RQ18
  MOV.L        (R2, 128), RD26
  MOVU.B       (RQ18, RD26), RQ23
  ADD          RQ8, 2048, RQ18
  MOVU.B       RQ23, (RQ18, RD9)
// tk_vf_sysc.c:525   
  ADD          RQ8, 2304, RQ18
  MOVU.B       RD9, (RQ18, RD26)

.L00800B4D:

.L00800B45:

.L00800B42:
  CMPEQ.Q      RQ21, R0, RQ23
  MOV.L        (R2, 132), RD27
  MOV.L        (R2, 120), RD26
  CMPGT.Q      RD26, RD27, RQ22
  BTSTN.L      RQ22, RQ23, .L00800B43

.L00800B51:
// tk_vf_sysc.c:528   
  MOV.L        (R2, 132), RD27
  MOV.Q        (R2, 152), RQ26
  MOV.L        RD27, (RQ26, 68)
// tk_vf_sysc.c:531   
  ADD          RQ21, 0, RQ10

.L00C026C4:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

R_RenderMaskedSegRange:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 136)
  MOV.L        RD11, (R2, 132)
  MOV.L        RD12, (R2, 128)
// r_segs.c:123   curline = ds->curline;
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 0), RQ26
// r_segs.c:124   frontsector = curline->frontsector;
  MOV.Q        (RQ26, 40), RQ13
// r_segs.c:125   backsector = curline->backsector;
  MOV.Q        (RQ26, 48), RQ12
  MOV.Q        RQ12, backsector
// r_segs.c:126   texnum = texturetranslation[curline->sidedef->midtexture];
  MOV.Q        (RQ26, 24), RQ8
  MOV.W        (RQ8, 12), RQ18
  MOV.Q        texturetranslation, RQ12
  MOV.L        (RQ12, RQ18), RD11
  MOV.L        RD11, (R2, 116)
// r_segs.c:136   lightnum = (frontsector->lightlevel >> LIGHTSEGSHIFT)+extralight;
  MOV.W        (RQ13, 12), RQ18
  MOV.Q        RQ13, frontsector
  SHAR         RQ18, 4, RQ9
  MOV.L        extralight, RD13
  ADDS.L       RQ9, RD13, RD20
// r_segs.c:138   if (curline->v1->y == curline->v2->y)
  MOV.Q        (RQ26, 0), RQ8
  MOV.L        (RQ8, 4), RQ18
  MOV.Q        (RQ26, 8), RQ8
  MOV.Q        RQ26, curline
  MOV.L        (RQ8, 4), RQ9
  BRNE.Q       RQ9, RQ18, .L0080271B
// r_segs.c:139   lightnum--;
  ADDS.L       RD20, -1, RD20
  BSR          .L0080271C, R0

.L0080271B:
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV.L        (RQ8, 0), RQ18
  MOV.Q        (RQ27, 8), RQ8
  MOV.L        (RQ8, 0), RQ9
  BRNE.Q       RQ9, RQ18, .L0080271D
// r_segs.c:141   lightnum++;
  ADDS.L       RD20, 1, RD20

.L0080271D:

.L0080271C:
// r_segs.c:143   if (lightnum < 0)		
  BRGE.L       R0, RD20, .L0080271E
// r_segs.c:144   {
  MOV          scalelight, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:146   dc_baseluma = 0x0000;
  MOV.W        RD0, dc_baseluma
  BSR          .L0080271F, R0

.L0080271E:
  BRLT.L       16, RD20, .L00802720
// r_segs.c:149   {
  MOV          scalelight, RQ27
  ADD          RQ27, 5760, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:151   dc_baseluma = 0xFF00;
  LDIZ         0x0000FF00, RD27
  MOV.W        RD27, dc_baseluma
  BSR          .L00802721, R0

.L00802720:
// r_segs.c:154   {
  MOV          scalelight, RQ27
  ADD          R0, 384, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:158   dc_baseluma = (cmap_luma[31-lightnum*2]<<8);
  SHAD.L       RD20, 1, RQ18
  ADD          R0, 31, R5
  SUBS.L       R5, RQ18, RQ9
  MOV          cmap_luma, RQ27
  MOVU.B       (RQ27, RQ9), RQ18
  SHAD.L       RQ18, 8, RQ9
  AND          RQ9, 0x0000FFFF, RD27
  MOV.W        RD27, dc_baseluma

.L00802721:

.L0080271F:
// r_segs.c:161   maskedtexturecol = ds->maskedtexturecol;
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 72), RQ26
  MOV.Q        RQ26, maskedtexturecol
// r_segs.c:163   rw_scalestep = ds->scalestep;		
  MOV.L        (RQ27, 24), RD26
// r_segs.c:164   rw_zstep = ds->zstep;		
  MOV.L        (RQ27, 36), RD13
  MOV.L        RD13, rw_zstep
// r_segs.c:165   spryscale = ds->scale1 + (x1 - ds->x1)*rw_scalestep;
  MOV.L        (RQ27, 16), RQ18
  MOV.L        (RQ27, 8), RQ9
  MOV.L        (R2, 132), RD13
  SUBS.L       RD13, RQ9, RQ23
  MULS.L       RQ23, RD26, RQ9
  MOV.L        RD26, rw_scalestep
  ADDS.L       RQ18, RQ9, RD26
  MOV.L        RD26, spryscale
// r_segs.c:166   mfloorclip = ds->sprbottomclip;
  MOV.Q        (RQ27, 64), RQ26
  MOV.Q        RQ26, mfloorclip
// r_segs.c:167   mceilingclip = ds->sprtopclip;
  MOV.Q        (RQ27, 56), RQ26
  MOV.Q        RQ26, mceilingclip
// r_segs.c:170   if (curline->linedef->flags & ML_DONTPEGBOTTOM)
  MOV.Q        curline, RQ26
  MOV.Q        (RQ26, 32), RQ8
  MOV.W        (RQ8, 24), RQ18
  ADD          R0, 16, RD26
  BTST.L       RD26, RQ18, .L00802722
// r_segs.c:171   {
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ18
  BRLE.L       RQ18, RQ23, .L00802723
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ23
  ADD          RQ23, 0, RQ9
  BSR          .L00802724, R0

.L00802723:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ18
  ADD          RQ18, 0, RQ9

.L00802724:
  ADD          RQ9, 0, RD27
// r_segs.c:174   dc_texturemid = dc_texturemid + textureheight[texnum] - viewz;
  MOV.Q        textureheight, RQ26
  MOV.L        (R2, 116), RD13
  MOV.L        (RQ26, RD13), RQ9
  ADDS.L       RD27, RQ9, RQ23
  MOV.L        viewz, RD26
  SUBS.L       RQ23, RD26, RD27
  MOV.L        RD27, dc_texturemid
  BSR          .L00802725, R0

.L00802722:
// r_segs.c:177   {
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  BRGE.L       RQ23, RQ9, .L00802726
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ9
  ADD          RQ9, 0, RQ18
  BSR          .L00802727, R0

.L00802726:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  ADD          RQ23, 0, RQ18

.L00802727:
  ADD          RQ18, 0, RD27
// r_segs.c:180   dc_texturemid = dc_texturemid - viewz;
  MOV.L        viewz, RD26
  SUBS.L       RD27, RD26, RD27
  MOV.L        RD27, dc_texturemid

.L00802725:
// r_segs.c:181   }
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 24), RQ8
  MOV.L        (RQ8, 4), RQ18
  MOV.L        dc_texturemid, RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        RD27, dc_texturemid
// r_segs.c:184   if (fixedcolormap)
  MOV.Q        fixedcolormap, RQ27
  BREQ.Q       R0, RQ27, .L00802728
// r_segs.c:187   dc_colormap = R_ColormapRemapForBlend(fixedcolormap);
  MOV.Q        fixedcolormap, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap

.L00802728:
// r_segs.c:190   tz = ds->tz1;
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 28), RD21
// r_segs.c:192   dc_isspr = 1;
  ADD          R0, 1, RD26
  MOV.B        RD26, dc_isspr
// r_segs.c:195   for (dc_x = x1 ; dc_x <= x2 ; dc_x++)
  MOV.L        (R2, 132), RD26
  MOV.L        RD26, dc_x
  MOV.L        (R2, 128), RD13
  BRGT.L       RD13, RD26, .L0080272B

.L00802729:
// r_segs.c:198   if (maskedtexturecol[dc_x] != MAXSHORT)
  MOV.Q        maskedtexturecol, RQ27
  MOV.L        dc_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  LDIZ         32767, RD27
  BREQ.Q       RD27, RQ9, .L0080272C
  MOV.Q        fixedcolormap, RQ27
  BRNE.Q       R0, RQ27, .L0080272D
// r_segs.c:201   {
  MOV.L        spryscale, RD27
  SHAR         RD27, 12, RQ23
  ADDU.L       RQ23, R0, RD22
  BRLTU.L      48, RD22, .L0080272E
// r_segs.c:205   index = MAXLIGHTSCALE-1;
  ADD          R0, 47, RD22

.L0080272E:
// r_segs.c:208   dc_colormap = R_ColormapRemapForBlend(walllights[index]);
  MOV.Q        walllights, RQ27
  MOV.Q        (RQ27, RD22), RQ8
  ADD          RQ8, 0, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap

.L0080272D:
// r_segs.c:211   sprtopscreen = centeryfrac - FixedMul(dc_texturemid, spryscale);
  MOV.L        dc_texturemid, RD10
  MOV.L        spryscale, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        centeryfrac, RD26
  SUBS.L       RD26, RQ18, RD27
  MOV.L        RD27, sprtopscreen
// r_segs.c:214   dc_iscale = M_SoftDivRcp(spryscale);
  MOV.L        spryscale, RD27
  ADDU.L       RD27, R0, RQ23
  ADD          RQ23, 0, RD10
  BSR          M_SoftDivRcp, R1
  ADDU.L       RQ10, R0, RQ9
  ADDS.L       RQ9, 0, RD27
  MOV.L        RD27, dc_iscale
// r_segs.c:215   dc_scale = spryscale;
  MOV.L        spryscale, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_scale
// r_segs.c:216   dc_zdist = tz;
  MOV.L        RD21, dc_zdist
// r_segs.c:219   col = (column_t *)( 
  MOV.Q        maskedtexturecol, RQ27
  MOV.L        dc_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  MOV.L        (R2, 116), RD10
  ADD          RQ18, 0, RD11
  BSR          R_GetColumn, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ8, -3, RQ27
  MOV.Q        RQ27, (R2, 120)
// r_segs.c:222   R_DrawMaskedColumn (col);
  MOV.Q        (R2, 120), RQ10
  BSR          R_DrawMaskedColumn, R1
// r_segs.c:223   maskedtexturecol[dc_x] = MAXSHORT;
  MOV.Q        maskedtexturecol, RQ26
  MOV.L        dc_x, RD13
  LDIZ         32767, RD12
  MOV.W        RD12, (RQ26, RD13)

.L0080272C:
// r_segs.c:224   }
  MOV.L        rw_scalestep, RD27
  MOV.L        spryscale, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, spryscale
// r_segs.c:226   tz += rw_zstep;
  MOV.L        rw_zstep, RD27
  ADDS.L       RD21, RD27, RD21
  MOV.L        dc_x, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, dc_x
  MOV.L        (R2, 128), RD26
  BRLE.L       RD26, RD27, .L00802729

.L0080272B:

.L00C026CA:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

WI_End:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// wi_stuff.c:749   {
  BSR          WI_unloadData, R1

.L00C026D0:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

FixedDiv2:
// m_fixed.c:130   c = ((long long)a<<16) / ((long long)b);
  SHAD.Q       RD10, 16, RQ13
  DIVS.Q       RQ13, RD11, RQ12
// m_fixed.c:131   return (fixed_t) c;
  ADDS.L       RQ12, 0, RQ17
  ADD          RQ17, 0, RD10

.L00C026D1:
  JSR          R1, 0, R0
  .balign 4

WI_initNetgameStats:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
// wi_stuff.c:1113   state = StatCount;
  MOV.L        RD0, TU7A00CB85/state
// wi_stuff.c:1114   acceleratestage = 0;
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:1115   ng_state = 1;
  ADD          R0, 1, RD23
  MOV.L        RD23, TU7A00CB85/ng_state
// wi_stuff.c:1117   cnt_pause = TICRATE;
  ADD          R0, 35, RD23
  MOV.L        RD23, TU7A00CB85/cnt_pause
// wi_stuff.c:1119   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          RD0, 0, RD18

.L00802A2A:
// wi_stuff.c:1120   {
  MOV          playeringame, RQ23
  MOV.L        (RQ23, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802A2B
// wi_stuff.c:1124   cnt_kills[i] = cnt_items[i] = cnt_secret[i] = cnt_frags[i] = 0;
  MOV          TU7A00CB85/cnt_frags, RQ23
  MOV.L        RD0, (RQ23, RD18)
  MOV          TU7A00CB85/cnt_secret, RQ23
  MOV.L        RD0, (RQ23, RD18)
  MOV          TU7A00CB85/cnt_items, RQ23
  MOV.L        RD0, (RQ23, RD18)
  MOV          TU7A00CB85/cnt_kills, RQ23
  MOV.L        RD0, (RQ23, RD18)
// wi_stuff.c:1126   dofrags += WI_fragSum(i);
  ADD          RD18, 0, RD10
  BSR          WI_fragSum, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        TU7A00CB85/dofrags, RD23
  ADDS.L       RD23, RQ9, RD23
  MOV.L        RD23, TU7A00CB85/dofrags

.L00802A2B:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A2A

.L00802A2C:
// wi_stuff.c:1129   dofrags = !!dofrags;
  MOV.L        TU7A00CB85/dofrags, RD23
  CMPEQ.Q      RD23, R0, RQ9
  XOR          RQ9, 1, RD23
  MOV.L        RD23, TU7A00CB85/dofrags
// wi_stuff.c:1131   WI_initAnimatedBack();
  BSR          WI_initAnimatedBack, R1

.L00C026D7:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawNoState:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// wi_stuff.c:841   {
  ADD          R0, 1, RQ6
  MOV.L        RQ6, TU7A00CB85/snl_pointeron
// wi_stuff.c:843   WI_drawShowNextLoc();
  BSR          WI_drawShowNextLoc, R1

.L00C026DD:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_issyscall:
// tk_core/tk_irq.c:26   
  ADD          R0, 0, RD10

.L00C026DE:
  JSR          R1, 0, R0

tk_multidir_closedir:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ22
  ADD          R0, 8, RD27
  ADD          R0, 64, RD26
// tk_vf_sysc.c:470   
  MOV.Q        (RQ22, 16), RQ23
// tk_vf_sysc.c:471   
  MOV.L        (RQ22, 64), RD8
// tk_vf_sysc.c:473   
  ADD          RD0, 0, RD18
  BRGE.L       RD8, RD18, .L00800B3E

.L00800B3F:
// tk_vf_sysc.c:474   
  MOV.Q        (RQ23, RD18), RQ9
  ADD          RQ9, 0, RQ10
  BSR          tk_closedir, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD8, RD18, .L00800B3F

.L00800B3E:
  SHAD.L       RD8, 3, RQ21
  BRLE.L       64, RQ21, .L00800B40
// tk_vf_sysc.c:476   
  ADD          RQ23, 0, RQ10
  BSR          tk_free, R1

.L00800B40:
  MOV.Q        (RQ22, 32), RQ9
  BREQ.Q       R0, RQ9, .L00800B41
// tk_vf_sysc.c:478   
  MOV.Q        (RQ22, 32), RQ9
  ADD          RQ9, 0, RQ10
  BSR          tk_free, R1

.L00800B41:
  ADD          RQ22, 0, RQ10
  BSR          tk_free_dir, R1
// tk_vf_sysc.c:480   
  ADD          RD18, 0, RD10

.L00C026E4:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_ArchivePlayers:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// p_saveg.c:54   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD23

.L0080231E:
// p_saveg.c:55   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD23), RQ21
  BREQ.L       R0, RQ21, .L0080231F
// p_saveg.c:59   PADSAVEP();
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  AND          RQ8, 3, RQ22
  ADD          R0, 4, RQ20
  SUB          RQ20, RQ22, RQ8
  AND          RQ8, 3, RQ22
  ADD          RQ27, RQ22, RQ27
// p_saveg.c:61   dest = (player_t *)save_p;
  ADD          RQ27, 0, RQ9
  MOV.Q        RQ27, save_p
// p_saveg.c:62   memcpy (dest,&players[i],sizeof(player_t));
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ9, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          __memcpy64_320, R1
// p_saveg.c:63   save_p += sizeof(player_t);
  MOV.Q        save_p, RQ27
  ADD          RQ27, 320, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:64   for (j=0 ; j<NUMPSPRITES ; j++)
  ADD          R0, 0, RD18

.L00802321:
// p_saveg.c:65   {
  ADD          RQ9, 264, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ27
  BREQ.Q       R0, RQ27, .L00802324
// p_saveg.c:67   {
  ADD          RQ9, 264, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ27
  MOV          states, RQ13
  ADD          RQ27, 0, RQ8
  SUB          RQ8, RQ13, RQ8
  ADD          R0, 40, RD13
  DIVS.L       RQ8, RD13, RQ8
  ADD          RQ9, 264, RQ27
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ8, (RQ26, 0)

.L00802324:
  ADDS.L       RD18, 1, RD18
  BRLT.L       2, RD18, .L00802321

.L00802323:

.L0080231F:
  ADDS.L       RD23, 1, RD23
  BRLT.L       4, RD23, .L0080231E

.L00802320:

.L00C026EA:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

Z_CheckHeap:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// z_zone.c:512   for (block = mainzone->blocklist.next ; ; block = block->next)
  MOV.Q        mainzone, RQ13
  ADD          RQ13, 8, RQ12
  MOV.Q        (RQ12, 32), RQ18

.L00802DC9:
// z_zone.c:513   {
  MOV.Q        (RQ18, 32), RQ9
  MOV.Q        mainzone, RQ13
  ADD          RQ13, 8, RQ8
  BREQ.Q       RQ8, RQ9, .L00802DCB
// z_zone.c:520   if ( (byte *)block + block->size != (byte *)block->next)
  MOV.L        (RQ18, 4), RQ13
  ADD          RQ18, RQ13, RQ9
  MOV.Q        (RQ18, 32), RQ8
  BREQ.Q       RQ8, RQ9, .L00802DCC
// z_zone.c:521   I_Error ("Z_CheckHeap: block size does not touch the next block\n");
  MOV          .L00C026F1, RQ10
  BSR          I_Error, R1

.L00802DCC:
// z_zone.c:523   if ( block->next->prev != block)
  MOV.Q        (RQ18, 32), RQ9
  MOV.Q        (RQ9, 40), RQ8
  BREQ.Q       RQ18, RQ8, .L00802DCD
// z_zone.c:524   I_Error ("Z_CheckHeap: next block doesn't have proper back link\n");
  MOV          .L00C026F2, RQ10
  BSR          I_Error, R1

.L00802DCD:
// z_zone.c:526   if (!block->user && !block->next->user)
  MOV.Q        (RQ18, 16), RQ9
  BRNE.Q       R0, RQ9, .L00802DCE
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        (RQ8, 16), RQ9
  BRNE.Q       R0, RQ9, .L00802DCE

.L00802DCF:
// z_zone.c:527   I_Error ("Z_CheckHeap: two consecutive free blocks\n");
  MOV          .L00C026F3, RQ10
  BSR          I_Error, R1

.L00802DCE:
  MOV.Q        (RQ18, 32), RQ18
  BSR          .L00802DC9, R0

.L00802DCB:

.L00C026F0:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_TraverseIntercepts:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ21
  MOV.L        RD11, (R2, 84)
// p_maputl.c:743   count = intercept_p - intercepts;
  MOV.Q        intercept_p, RQ13
  MOV          intercepts, RQ12
  SUB          RQ13, RQ12, RQ11
  SHAR.Q       RQ11, 4, RQ11
  ADDS.L       RQ11, 0, RD22
// p_maputl.c:745   in = 0;			// shut up compiler warning
  ADD          R0, 0, RQ23
// p_maputl.c:747   while (count--)
  BSR          .L00801E03, R0

.L00801E01:
// p_maputl.c:748   {
  ADD          R0, 0x7FFFFFFF, RD8
// p_maputl.c:750   for (scan = intercepts ; scan<intercept_p ; scan++)
  MOV          intercepts, RQ18
  MOV.Q        intercept_p, RQ13
  BRGE.Q       RQ13, RQ18, .L00801E06

.L00801E04:
// p_maputl.c:751   {
  MOV.L        (RQ18, 0), RQ9
  BRGE.L       RD8, RQ9, .L00801E07
// p_maputl.c:753   {
  MOV.L        (RQ18, 0), RD8
// p_maputl.c:755   in = scan;
  ADD          RQ18, 0, RQ23

.L00801E07:
  ADD          RQ18, 16, RQ18
  MOV.Q        intercept_p, RQ13
  BRLT.Q       RQ13, RQ18, .L00801E04

.L00801E06:
// p_maputl.c:759   if (dist > maxfrac)
  MOV.L        (R2, 84), RD13
  BRLE.L       RD13, RD8, .L00801E08
// p_maputl.c:760   return true;	// checked everything in range		
  ADD          R0, 1, RD10
  BSR          .L00C026F9, R0

.L00801E08:
// p_maputl.c:774   if ( !func (in) )
  ADD          RQ23, 0, RQ10
  JSR          RQ21, 0, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00C00C15
// p_maputl.c:777   in->frac = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD13
  MOV.L        RD13, (RQ23, 0)

.L00801E03:
  ADD          RD22, 0, RQ9
  ADDS.L       RD22, -1, RD22
  BRNE.L       R0, RQ9, .L00801E01

.L00801E02:
// p_maputl.c:780   return true;		// everything was traversed
  ADD          R0, 1, RD10
  BSR          .L00C026F9, R0

.L00C00C15:
  ADD          R0, 0, RQ10

.L00C026F9:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_putsn_check_nonascii:
// tk_core/tk_puts.c:833   
  ADD          RQ10, 0, RQ13
  ADDS.L       RD11, 0, RD12
// tk_core/tk_puts.c:834   
  BSR          .L00800BFF, R0

.L00800C00:
// tk_core/tk_puts.c:835   
  MOV.Q        (RQ13, 0), RQ17
  ADD          R0, 0xFFFFFFFF80808080, RQ16
  LDSH32       RQ16, 0x0000000080808080, RQ16
  BTST.Q       RQ16, RQ17, .L00800C01
// tk_core/tk_puts.c:837   
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00800C01:
// tk_core/tk_puts.c:838   
  ADD          RQ13, 8, RQ13
  ADDS.L       RD12, -8, RD12

.L00800BFF:
  BRGE.L       8, RD12, .L00800C00

.L00800C02:
// tk_core/tk_puts.c:841   
  BSR          .L00800C03, R0

.L00800C04:
// tk_core/tk_puts.c:842   
  MOV.B        (RQ13, 0), RQ16
  ADD          R0, 128, RD15
  BTST.L       RD15, RQ16, .L00800C05
// tk_core/tk_puts.c:844   
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00800C05:
// tk_core/tk_puts.c:845   
  ADD          RQ13, 1, RQ13
  ADDS.L       RD12, -1, RD12

.L00800C03:
  BRGT.L       R0, RD12, .L00800C04

.L00800C06:
// tk_core/tk_puts.c:846   
  ADD          R0, 0, RD10

.L00C026FA:
  JSR          R1, 0, R0
  .balign 4

freopen:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.Q        RQ11, (R2, 80)
  ADD          RQ12, 0, RQ18
// pdpc201/stdio.c:2771   
  ADD          R0, 1, RD8
  MOV.L        RD8, TU61F874B9/inreopen
// pdpc201/stdio.c:2773   
  ADD          RQ18, 0, RQ10
  BSR          fclose, R1
// pdpc201/stdio.c:2775   
  ADD          RQ18, 0, RQ10
  BSR          __stdio_chkmagic, R1
// pdpc201/stdio.c:2777   
  MOV.Q        RQ18, TU61F874B9/myfile
// pdpc201/stdio.c:2778   
  MOV.Q        (R2, 88), RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        RQ23, TU61F874B9/fnm
// pdpc201/stdio.c:2779   
  MOV.Q        (R2, 80), RQ23
  ADD          RQ23, 0, RQ22
  MOV.Q        RQ22, TU61F874B9/modus
// pdpc201/stdio.c:2780   
  MOV.L        RD0, TU61F874B9/err
// pdpc201/stdio.c:2781   
  MOV.L        (RQ18, 12), RD22
  MOV.L        RD22, TU61F874B9/spareSpot
// pdpc201/stdio.c:2782   
  BSR          fopen2, R1
// pdpc201/stdio.c:2783   
  MOV.L        TU61F874B9/err, RD22
  BREQ.L       R0, RD22, .L008004C2
  MOV.L        (RQ18, 96), RQ9
  BRNE.L       R0, RQ9, .L008004C2

.L008004C3:
// pdpc201/stdio.c:2784   
  MOV.L        (RQ18, 12), RQ9
  MOV          __userFiles, RQ8
  MOV.Q        RQ0, (RQ8, RQ9)
// pdpc201/stdio.c:2786   
  ADD          RQ18, 0, RQ10
  BSR          free, R1

.L008004C2:
// pdpc201/stdio.c:2789   
  MOV.L        RD0, TU61F874B9/inreopen
// pdpc201/stdio.c:2790   
  MOV.L        TU61F874B9/err, RD8
  BREQ.L       R0, RD8, .L008004C4
// pdpc201/stdio.c:2791   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02700, R0

.L008004C4:
// pdpc201/stdio.c:2793   
  ADD          RQ18, 0, RQ10

.L00C02700:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

tkgCreateAudioDevice:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  MOV.Q        RQ12, (R2, 96)
// tk_gdi/tkg_display.c:500   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:502   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ21
  MOV.Q        (R2, 96), RQ20
  MOV.Q        (RQ20, 0), RQ10
  MOV.Q        (RQ20, 8), RQ11
  MOV.Q        RQ10, (RQ21, 0)
  MOV.Q        RQ11, (RQ21, 8)
  MOV.L        (RQ20, 16), RQ10
  MOV.L        RQ10, (RQ21, 16)
// tk_gdi/tkg_display.c:504   
  MOV.Q        (RQ18, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 80), RQ8
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 108), RD11
  MOVU.L       (R2, 104), RD12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  ADD          RQ23, 0, RQ29
  JSR          RQ8, 0, R1

.L00C02706:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

__lva_fixnump:
// pdpc201/btshx_lva.c:147   
  SHLR.Q       RQ10, 62, RQ13
  ADD          R0, 1, RQ12
  CMPEQ.Q      RQ13, RQ12, RQ11
  ADDS.L       RQ11, 0, RD10

.L00C02707:
  JSR          R1, 0, R0
  .balign 4

EV_Teleport:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 216)
  MOV.L        RD11, (R2, 212)
  ADD          RQ12, 0, RQ18
// p_telept.c:164   if (thing->flags & MF_MISSILE)
  MOV.L        (RQ18, 160), RQ21
  LUI          16, RD27
  BTSTN.L      RD27, RQ21, .L00C00C1F
// p_telept.c:169   if (side == 1)		
  MOV.L        (R2, 212), RD27
  BREQ.Q       1, RD27, .L00C00C1F
// p_telept.c:172   if(line->acs_spec)
  MOV.Q        (R2, 216), RQ27
  MOVU.B       (RQ27, 30), RQ21
  BREQ.L       R0, RQ21, .L008022F4
// p_telept.c:173   {
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ26
// p_telept.c:175   for (thinker = thinkercap.next;
  MOV.Q        (RQ27, 8), RQ26
  ADD          RQ27, 0, RQ23
  MOV.Q        RQ26, (R2, 168)
  BREQ.Q       RQ23, RQ26, .L008022F7

.L008022F5:
// p_telept.c:181   if (!EV_CheckThinkerIsMObjP(thinker))
  MOV.Q        (R2, 168), RQ10
  BSR          EV_CheckThinkerIsMObjP, R1
  ADD          RQ10, 0, RQ21
  BREQ.L       R0, RQ21, .L008022F6
// p_telept.c:184   m = (mobj_t *)thinker;
  MOV.Q        (R2, 168), RQ22
// p_telept.c:187   if (m->type != MT_TELEPORTMAN )
  MOV.L        (RQ22, 128), RQ21
  BRNE.Q       41, RQ21, .L008022F6
// p_telept.c:190   if (m->spawnpoint.tid != line->arg1)
  ADD          RQ22, 204, RQ27
  MOV.W        (RQ27, 0), RQ21
  MOV.Q        (R2, 216), RQ26
  MOVU.B       (RQ26, 31), RQ9
  BRNE.Q       RQ9, RQ21, .L008022F6
// p_telept.c:198   oldx = thing->x;
  MOV.L        (RQ18, 24), RD27
  MOV.L        RD27, (R2, 156)
// p_telept.c:199   oldy = thing->y;
  MOV.L        (RQ18, 28), RD26
  MOV.L        RD26, (R2, 152)
// p_telept.c:200   oldz = thing->z;
  MOV.L        (RQ18, 32), RD25
  MOV.L        RD25, (R2, 148)
// p_telept.c:202   if (!P_TeleportMove (thing, m->x, m->y))
  MOV.L        (RQ22, 28), RQ21
  MOV.L        (RQ22, 24), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ21, 0, RD12
  BSR          P_TeleportMove, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C00C1F
// p_telept.c:205   thing->z = thing->floorz;  //fixme: not needed?
  MOV.L        (RQ18, 96), RQ21
  MOV.L        RQ21, (RQ18, 32)
// p_telept.c:207   if (thing->player)
  MOV.Q        (RQ18, 192), RQ23
  BREQ.Q       R0, RQ23, .L008022F8
// p_telept.c:208   thing->player->viewz = thing->z+thing->player->viewheight;
  MOV.L        (RQ18, 32), RQ9
  MOV.Q        (RQ18, 192), RQ23
  MOV.L        (RQ23, 24), RQ8
  ADDS.L       RQ9, RQ8, RQ21
  MOV.L        RQ21, (RQ23, 20)

.L008022F8:
// p_telept.c:211   if(line->acs_spec!=71)
  MOV.Q        (R2, 216), RQ27
  MOVU.B       (RQ27, 30), RQ9
  BREQ.Q       71, RQ9, .L008022F9
// p_telept.c:214   fog = P_SpawnMobj (oldx, oldy, oldz, MT_TFOG);
  MOV.L        (R2, 156), RD10
  MOV.L        (R2, 152), RD11
  MOV.L        (R2, 148), RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 184)
// p_telept.c:215   S_StartSound (fog, sfx_telept);
  MOV.Q        (R2, 184), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_telept.c:216   an = m->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ22, 56), RQ8
  SHLR         RQ8, 19, RD27
// p_telept.c:217   fog = P_SpawnMobj (m->x+20*finecosine[an], m->y+20*finesine[an]
  MOV.L        (RQ18, 32), RQ21
  MOV.L        (RQ22, 28), RQ9
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD27), RQ8
  ADD          R0, 20, R5
  MULS.L       RQ8, R5, RQ20
  ADDS.L       RQ9, RQ20, RQ8
  MOV.L        (RQ22, 24), RQ20
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD27), RQ9
  MOV.L        RD27, (R2, 180)
  ADD          R0, 20, R5
  MULS.L       RQ9, R5, RQ26
  ADDS.L       RQ20, RQ26, RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ21, 0, RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 184)
// p_telept.c:221   S_StartSound (fog, sfx_telept);
  MOV.Q        (R2, 184), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1

.L008022F9:
// p_telept.c:225   if (thing->player)
  MOV.Q        (RQ18, 192), RQ23
  BREQ.Q       R0, RQ23, .L008022FA
// p_telept.c:226   thing->reactiontime = 18;	
  ADD          R0, 18, RD27
  MOV.L        RD27, (RQ18, 184)

.L008022FA:
// p_telept.c:228   thing->angle = m->angle;
  MOVU.L       (RQ22, 56), RQ9
  MOVU.L       RQ9, (RQ18, 56)
// p_telept.c:229   thing->momx = thing->momy = thing->momz = 0;
  MOV.L        RD0, (RQ18, 120)
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)
// p_telept.c:230   return 1;
  ADD          R0, 1, RD10
  BSR          .L00C0270D, R0

.L008022F6:
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 8), RQ27
  MOV          thinkercap, RQ23
  MOV.Q        RQ27, (R2, 168)
  BRNE.Q       RQ23, RQ27, .L008022F5

.L008022F7:

.L008022F4:
// p_telept.c:234   tag = line->tag;
  MOV.Q        (R2, 216), RQ27
  MOV.W        (RQ27, 28), RD26
  MOV.L        RD26, (R2, 192)
// p_telept.c:235   for (i = 0; i < numsectors; i++)
  ADD          R0, 0, RD25
  MOV.L        RD25, (R2, 196)
  MOV.L        numsectors, RD13
  BRGE.L       RD13, RD25, .L008022FD

.L008022FB:
// p_telept.c:236   {
  MOV.Q        sectors, RQ27
  MOV.L        (R2, 196), RD26
  SHAD.L       RD26, 7, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.W        (RQ25, 16), RQ21
  MOV.L        (R2, 192), RD27
  BRNE.Q       RD27, RQ21, .L008022FE
// p_telept.c:238   {
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ26
// p_telept.c:240   for (thinker = thinkercap.next;
  MOV.Q        (RQ27, 8), RQ26
  ADD          RQ27, 0, RQ23
  MOV.Q        RQ26, (R2, 168)
  BREQ.Q       RQ23, RQ26, .L00802301

.L008022FF:
// p_telept.c:246   if (!EV_CheckThinkerIsMObjP(thinker))
  MOV.Q        (R2, 168), RQ10
  BSR          EV_CheckThinkerIsMObjP, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00802300
// p_telept.c:249   m = (mobj_t *)thinker;
  MOV.Q        (R2, 168), RQ22
// p_telept.c:252   if (m->type != MT_TELEPORTMAN )
  MOV.L        (RQ22, 128), RQ8
  BRNE.Q       41, RQ8, .L00802300
// p_telept.c:255   sector = m->subsector->sector;
  MOV.Q        (RQ22, 88), RQ23
  MOV.Q        (RQ23, 0), RQ27
// p_telept.c:257   if (sector-sectors != i )
  MOV.Q        sectors, RQ26
  SUB          RQ27, RQ26, RQ25
  SHAR.Q       RQ25, 7, RQ25
  MOV.Q        RQ27, (R2, 160)
  MOV.L        (R2, 196), RD26
  ADDS.L       RD26, 0, RQ13
  BRNE.Q       RQ13, RQ25, .L00802300
// p_telept.c:260   oldx = thing->x;
  MOV.L        (RQ18, 24), RD27
  MOV.L        RD27, (R2, 156)
// p_telept.c:261   oldy = thing->y;
  MOV.L        (RQ18, 28), RD26
  MOV.L        RD26, (R2, 152)
// p_telept.c:262   oldz = thing->z;
  MOV.L        (RQ18, 32), RD25
  MOV.L        RD25, (R2, 148)
// p_telept.c:264   if (!P_TeleportMove (thing, m->x, m->y))
  MOV.L        (RQ22, 28), RQ21
  MOV.L        (RQ22, 24), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ21, 0, RD12
  BSR          P_TeleportMove, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C00C1F
// p_telept.c:267   thing->z = thing->floorz;  //fixme: not needed?
  MOV.L        (RQ18, 96), RQ20
  MOV.L        RQ20, (RQ18, 32)
// p_telept.c:268   if (thing->player)
  MOV.Q        (RQ18, 192), RQ23
  BREQ.Q       R0, RQ23, .L00802302
// p_telept.c:269   thing->player->viewz = thing->z+thing->player->viewheight;
  MOV.L        (RQ18, 32), RQ9
  MOV.Q        (RQ18, 192), RQ23
  MOV.L        (RQ23, 24), RQ8
  ADDS.L       RQ9, RQ8, RQ20
  MOV.L        RQ20, (RQ23, 20)

.L00802302:
// p_telept.c:272   fog = P_SpawnMobj (oldx, oldy, oldz, MT_TFOG);
  MOV.L        (R2, 156), RD10
  MOV.L        (R2, 152), RD11
  MOV.L        (R2, 148), RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 184)
// p_telept.c:273   S_StartSound (fog, sfx_telept);
  MOV.Q        (R2, 184), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_telept.c:274   an = m->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ22, 56), RQ27
  SHLR         RQ27, 19, RD26
// p_telept.c:275   fog = P_SpawnMobj (m->x+20*finecosine[an], m->y+20*finesine[an]
  MOV.L        (RQ18, 32), RQ21
  MOV.L        (RQ22, 28), RQ9
  MOV          finesine, RQ25
  MOV.L        (RQ25, RD26), RQ8
  ADD          R0, 20, R5
  MULS.L       RQ8, R5, RQ20
  ADDS.L       RQ9, RQ20, RQ27
  MOV.L        (RQ22, 24), RQ9
  MOV.Q        finecosine, RQ25
  MOV.L        (RQ25, RD26), RQ8
  MOV.L        RD26, (R2, 180)
  ADD          R0, 20, R5
  MULS.L       RQ8, R5, RQ20
  ADDS.L       RQ9, RQ20, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ27, 0, RD11
  ADD          RQ21, 0, RD12
  ADD          R0, 39, RD13
  BSR          P_SpawnMobj, R1
  MOV.Q        RQ10, (R2, 184)
// p_telept.c:279   S_StartSound (fog, sfx_telept);
  MOV.Q        (R2, 184), RQ10
  ADD          R0, 35, RD11
  BSR          S_StartSound, R1
// p_telept.c:282   if (thing->player)
  MOV.Q        (RQ18, 192), RQ23
  BREQ.Q       R0, RQ23, .L00802303
// p_telept.c:283   thing->reactiontime = 18;	
  ADD          R0, 18, RD27
  MOV.L        RD27, (RQ18, 184)

.L00802303:
// p_telept.c:285   thing->angle = m->angle;
  MOVU.L       (RQ22, 56), RQ9
  MOVU.L       RQ9, (RQ18, 56)
// p_telept.c:286   thing->momx = thing->momy = thing->momz = 0;
  MOV.L        RD0, (RQ18, 120)
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)
// p_telept.c:287   return 1;
  ADD          R0, 1, RD10
  BSR          .L00C0270D, R0

.L00802300:
  MOV.Q        (R2, 168), RQ27
  MOV.Q        (RQ27, 8), RQ27
  MOV          thinkercap, RQ23
  MOV.Q        RQ27, (R2, 168)
  BRNE.Q       RQ23, RQ27, .L008022FF

.L00802301:

.L008022FE:
  MOV.L        (R2, 196), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 196)
  MOV.L        numsectors, RD26
  BRLT.L       RD26, RD27, .L008022FB

.L008022FD:
// p_telept.c:290   }
  ADD          R0, 0, RD10
  BSR          .L00C0270D, R0

.L00C00C1F:
  ADD          R0, 0, RQ10

.L00C0270D:
  ADD          R2, 424, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

SMus_PitchBlend:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
  MOV.L        RD11, (R2, 120)
// i_bgb_mus_btsh.c:677   {
// i_bgb_mus_btsh.c:681   if((ch==8) || (ch==9))
  ADD          R0, 8, R5
  CMPEQ.Q      RD18, R5, RQ8
  ADD          R0, 9, R5
  CMPEQ.Q      RD18, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00801267
// i_bgb_mus_btsh.c:682   ch^=1;
  XOR          RD18, 1, RD18

.L00801267:
// i_bgb_mus_btsh.c:684   mcmd=&t_mcmd;
  ADD          R2, 96, RQ21
  ADD          RQ21, 0, RQ9
// i_bgb_mus_btsh.c:685   mcmd->op=2;
  ADD          R0, 2, RD20
  MOVU.B       RD20, (RQ9, 0)
// i_bgb_mus_btsh.c:686   mcmd->ch=ch;
  MOVU.B       RD18, (RQ9, 1)
// i_bgb_mus_btsh.c:687   mcmd->d0=d0;
  MOV.L        (R2, 120), RD27
  MOVU.B       RD27, (RQ9, 2)
// i_bgb_mus_btsh.c:691   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ9, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:692   return(0);
  ADD          R0, 0, RD10

.L00C02713:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

W_MatchCopy2:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -280, R2
  ADD          RQ10, 0, RQ20
  MOV.L        RD11, (R2, 36)
  MOV.L        RD12, (R2, 32)
// w_wad.c:604   if(d<8)
  MOV.L        (R2, 32), RD13
  BRGE.L       8, RD13, .L008028C6
  MOV.L        (R2, 32), RD13
  BRNE.Q       1, RD13, .L008028C7
// w_wad.c:607   {
  MOV.L        (R2, 32), RD13
  SUBS.L       R0, RD13, RQ21
  ADD          RQ20, RQ21, RQ12
  MOVU.B       (RQ12, 0), RQ21
  AND          RQ21, 255, RQ9
// w_wad.c:609   v=v|(v<<8);
  SHLD.Q       RQ9, 8, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:610   v=v|(v<<16);
  SHLD.Q       RQ9, 16, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:611   v=v|(v<<32);
  SHLD.Q       RQ9, 32, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:613   ct=dst; cte=dst+sz;
  ADD          RQ20, 0, RQ18
  MOV.L        (R2, 36), RD11
  ADD          RQ20, RD11, RQ23
// w_wad.c:614   while(ct<cte)
  BSR          .L008028CA, R0

.L008028C8:
// w_wad.c:618   *(u64 *)ct=v;
  MOV.Q        RQ9, (RQ18, 0)
// w_wad.c:622   ct+=8;
  ADD          RQ18, 8, RQ18

.L008028CA:
  BRLT.Q       RQ23, RQ18, .L008028C8

.L008028C9:
  BSR          .L008028CB, R0

.L008028C7:
  MOV.L        (R2, 32), RD13
  BRNE.Q       2, RD13, .L008028CC
// w_wad.c:626   {
  MOV.L        (R2, 32), RD13
  SUBS.L       R0, RD13, RQ21
  ADD          RQ20, RQ21, RQ12
  MOVU.W       (RQ12, 0), RQ21
  AND          RQ21, 0x0000FFFF, RQ9
// w_wad.c:628   v=v|(v<<16);
  SHLD.Q       RQ9, 16, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:629   v=v|(v<<32);
  SHLD.Q       RQ9, 32, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:631   ct=dst; cte=dst+sz;
  ADD          RQ20, 0, RQ18
  MOV.L        (R2, 36), RD11
  ADD          RQ20, RD11, RQ23
// w_wad.c:632   while(ct<cte)
  BSR          .L008028CF, R0

.L008028CD:
// w_wad.c:636   *(u64 *)ct=v;
  MOV.Q        RQ9, (RQ18, 0)
// w_wad.c:640   ct+=8;
  ADD          RQ18, 8, RQ18

.L008028CF:
  BRLT.Q       RQ23, RQ18, .L008028CD

.L008028CE:
  BSR          .L008028D0, R0

.L008028CC:
  MOV.L        (R2, 32), RD13
  BRNE.Q       4, RD13, .L008028D1
// w_wad.c:644   {
  MOV.L        (R2, 32), RD13
  SUBS.L       R0, RD13, RQ21
  ADD          RQ20, RQ21, RQ12
  MOVU.L       (RQ12, 0), RQ21
  ADDU.L       RQ21, R0, RQ9
// w_wad.c:646   v=v|(v<<32);
  SHLD.Q       RQ9, 32, RQ8
  OR           RQ9, RQ8, RQ9
// w_wad.c:648   ct=dst; cte=dst+sz;
  ADD          RQ20, 0, RQ18
  MOV.L        (R2, 36), RD11
  ADD          RQ20, RD11, RQ23
// w_wad.c:649   while(ct<cte)
  BSR          .L008028D4, R0

.L008028D2:
// w_wad.c:653   *(u64 *)ct=v;
  MOV.Q        RQ9, (RQ18, 0)
// w_wad.c:657   ct+=8;
  ADD          RQ18, 8, RQ18

.L008028D4:
  BRLT.Q       RQ23, RQ18, .L008028D2

.L008028D3:
  BSR          .L008028D5, R0

.L008028D1:
// w_wad.c:660   {
  MOV.L        (R2, 32), RD13
  SUBS.L       R0, RD13, RQ21
  ADD          RQ20, RQ21, RQ12
  MOV.Q        (RQ12, 0), RQ9
// w_wad.c:662   ct=dst; cte=dst+sz;
  ADD          RQ20, 0, RQ18
  MOV.L        (R2, 36), RD11
  ADD          RQ20, RD11, RQ23
// w_wad.c:663   while(ct<cte)
  BSR          .L008028D8, R0

.L008028D6:
// w_wad.c:667   *(u64 *)ct=v;
  MOV.Q        RQ9, (RQ18, 0)
// w_wad.c:672   ct+=d;
  MOV.L        (R2, 32), RD13
  ADD          RQ18, RD13, RQ18

.L008028D8:
  BRLT.Q       RQ23, RQ18, .L008028D6

.L008028D7:

.L008028D5:

.L008028D0:

.L008028CB:
  BSR          .L008028D9, R0

.L008028C6:
  MOV.L        (R2, 36), RD13
  BRGT.L       16, RD13, .L008028DA
// w_wad.c:677   {
  MOV.L        (R2, 32), RD13
  SUBS.L       RD0, RD13, RQ21
  ADD          RQ20, RQ21, RQ22
// w_wad.c:681   ((u64 *)dst)[0]=((u64 *)cs)[0];
  MOV.Q        (RQ22, 0), RQ8
  MOV.Q        RQ8, (RQ20, 0)
// w_wad.c:682   ((u64 *)dst)[1]=((u64 *)cs)[1];
  MOV.Q        (RQ22, 8), RQ8
  MOV.Q        RQ8, (RQ20, 8)
  BSR          .L008028DB, R0

.L008028DA:
// w_wad.c:689   {
  MOV.L        (R2, 32), RD13
  SUBS.L       R0, RD13, RQ21
  ADD          RQ20, RQ21, RQ22
// w_wad.c:691   ct=dst; cte=dst+sz;
  ADD          RQ20, 0, RQ18
  MOV.L        (R2, 36), RD12
  ADD          RQ20, RD12, RQ23
// w_wad.c:692   while(ct<cte)
  BSR          .L008028DE, R0

.L008028DC:
// w_wad.c:696   ((u64 *)ct)[0]=((u64 *)cs)[0];
  MOV.Q        (RQ22, 0), RQ8
  MOV.Q        RQ8, (RQ18, 0)
// w_wad.c:697   ((u64 *)ct)[1]=((u64 *)cs)[1];
  MOV.Q        (RQ22, 8), RQ8
  MOV.Q        RQ8, (RQ18, 8)
// w_wad.c:703   ct+=16; cs+=16;
  ADD          RQ18, 16, RQ18
  ADD          RQ22, 16, RQ22

.L008028DE:
  BRLT.Q       RQ23, RQ18, .L008028DC

.L008028DD:

.L008028DB:

.L008028D9:

.L00C02719:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

STlib_drawNum:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -392, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 180)
// st_lib.c:101   int		numdigits = n->width;
  MOV.L        (RQ23, 8), RQ9
  ADD          RQ9, 0, RD21
// st_lib.c:102   int		num = *n->num;
  MOV.Q        (RQ23, 16), RQ20
  MOV.L        (RQ20, 0), RQ9
  ADDS.L       RQ9, 0, RD8
// st_lib.c:104   int		w = SHORT(n->p[0]->width);
  MOV.Q        (RQ23, 32), RQ20
  MOV.Q        (RQ20, 0), RQ27
  MOV.W        (RQ27, 0), RQ9
  MOV.L        RD9, (R2, 176)
// st_lib.c:105   int		h = SHORT(n->p[0]->height);
  MOV.W        (RQ27, 2), RQ9
  MOV.Q        RQ27, (R2, 144)
  MOV.L        RD9, (R2, 172)
// st_lib.c:106   int		x = n->x;
  MOV.L        (RQ23, 0), RQ9
  ADD          RQ9, 0, RD22
// st_lib.c:110   n->oldnum = *n->num;
  MOV.Q        (RQ23, 16), RQ20
  MOV.L        (RQ20, 0), RQ9
  MOV.L        RQ9, (RQ23, 12)
// st_lib.c:112   neg = num < 0;
  CMPLT.Q      RD8, R0, RD26
// st_lib.c:114   if (neg)
  MOV.L        RD26, (R2, 168)
  BREQ.L       R0, RD26, .L00802B5A
  ADD          R0, 2, R5
  CMPEQ.Q      RD21, R5, RQ9
  ADD          R0, -9, R5
  CMPLT.Q      RD8, R5, RQ18
  BTST.L       RQ18, RQ9, .L00802B5B
// st_lib.c:117   num = -9;
  ADD          R0, -9, RD8
  BSR          .L00802B5C, R0

.L00802B5B:
  ADD          R0, 3, R5
  CMPEQ.Q      RD21, R5, RQ9
  ADD          R0, -99, R5
  CMPLT.Q      RD8, R5, RQ18
  BTST.L       RQ18, RQ9, .L00802B5D
// st_lib.c:119   num = -99;
  ADD          R0, -99, RD8

.L00802B5D:

.L00802B5C:
// st_lib.c:121   num = -num;
  SUBS.L       R0, RD8, RD8

.L00802B5A:
// st_lib.c:125   x = n->x - numdigits*w;
  MOV.L        (RQ23, 0), RQ9
  MOV.L        (R2, 176), RD27
  MULS.L       RD21, RD27, RQ18
  SUBS.L       RQ9, RQ18, RD22
// st_lib.c:127   if (n->y - ST_Y < 0)
  MOV.L        (RQ23, 4), RQ9
  ADDS.L       RQ9, -168, RQ18
  BRGE.L       R0, RQ18, .L00802B5E
// st_lib.c:128   I_Error("drawNum: n->y - ST_Y < 0");
  MOV          .L00C02720, RQ10
  BSR          I_Error, R1

.L00802B5E:
// st_lib.c:130   V_CopyRect(x, n->y - ST_Y, BG, w*numdigits, h, x, n->y, FG);
  MOV.L        (RQ23, 4), RQ9
  MOV.L        (R2, 176), RD27
  MULS.L       RD27, RD21, RQ18
  ADDS.L       RQ9, -168, RQ11
  ADD          RD22, 0, RD10
  ADD          R0, 4, RD12
  ADD          RQ18, 0, RD13
  MOV.L        (R2, 172), RD14
  ADD          RD22, 0, RD15
  ADD          RQ9, 0, RD16
  ADD          R0, 0, RD17
  BSR          V_CopyRect, R1
// st_lib.c:133   if (num == 1994)
  ADD          R0, 1994, RD26
  BREQ.Q       RD26, RD8, .L00C0271F
// st_lib.c:136   x = n->x;
  MOV.L        (RQ23, 0), RD22
// st_lib.c:139   if (!num)
  BRNE.L       R0, RD8, .L00802B5F
// st_lib.c:140   V_DrawPatchDirect(x - w, n->y, FG, n->p[ 0 ]);
  MOV.Q        (RQ23, 32), RQ20
  MOV.Q        (RQ20, 0), RQ27
  MOV.Q        RQ27, (R2, 144)
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (R2, 176), RD26
  SUBS.L       RD22, RD26, RQ10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ27, 0, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802B5F:
// st_lib.c:143   while (num && numdigits--)
  BSR          .L00802B62, R0

.L00802B60:
// st_lib.c:144   {
  MOV.L        (R2, 176), RD27
  SUBS.L       RD22, RD27, RD22
// st_lib.c:146   V_DrawPatchDirect(x, n->y, FG, n->p[ num % 10 ]);
  MOV.Q        (RQ23, 32), RQ20
  ADD          RD8, 0, RQ18
  ADD          R0, 10, RD26
  MODS.L       RQ18, RD26, RQ18
  MOV.Q        (RQ20, RQ18), RQ25
  MOV.Q        RQ25, (R2, 144)
  MOV.L        (RQ23, 4), RQ18
  ADD          RD22, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ25, 0, RQ13
  BSR          V_DrawPatchDirect, R1
// st_lib.c:147   num /= 10;
  DIVS.L       RD8, RD26, RD8

.L00802B62:
  BREQ.L       R0, RD8, .L00802B63
  ADD          RD21, 0, RQ27
  ADDS.L       RD21, -1, RD21
  BREQ.L       R0, RQ27, .L00802B63
  BSR          .L00802B60, R0

.L00802B63:

.L00802B61:
// st_lib.c:151   if (neg)
  MOV.L        (R2, 168), RD27
  BREQ.L       R0, RD27, .L00802B65
// st_lib.c:152   V_DrawPatchDirect(x - 8, n->y, FG, sttminus);
  MOV.L        (RQ23, 4), RQ9
  ADDS.L       RD22, -8, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        sttminus, RQ13
  BSR          V_DrawPatchDirect, R1

.L00802B65:

.L00C0271F:
  ADD          R2, 392, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_doPaletteStuff:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// st_stuff.c:1041   if(!plyr)
  MOV.Q        TU7A00CB73/plyr, RQ20
  BREQ.Q       R0, RQ20, .L00C02726
// st_stuff.c:1044   cnt = plyr->damagecount;
  MOV.Q        TU7A00CB73/plyr, RQ20
  MOV.L        (RQ20, 232), RD23
// st_stuff.c:1046   if (plyr->powers[pw_strength])
  ADD          RQ20, 48, RQ13
  MOV.L        (RQ13, 4), RQ9
  BREQ.L       R0, RQ9, .L00802C06
// st_stuff.c:1049   bzc = 12 - (plyr->powers[pw_strength]>>6);
  MOV.Q        TU7A00CB73/plyr, RQ20
  ADD          RQ20, 48, RQ13
  MOV.L        (RQ13, 4), RQ9
  SHAR         RQ9, 6, RQ8
  ADD          R0, 12, R5
  SUBS.L       R5, RQ8, RD22
  BRLE.L       RD23, RD22, .L00802C07
// st_stuff.c:1052   cnt = bzc;
  ADD          RD22, 0, RD23

.L00802C07:

.L00802C06:
// st_stuff.c:1055   if (cnt)
  BREQ.L       R0, RD23, .L00802C08
// st_stuff.c:1056   {
  ADDS.L       RD23, 7, RQ9
  SHAR         RQ9, 3, RD18
  BRLT.L       8, RD18, .L00802C09
// st_stuff.c:1060   palette = NUMREDPALS-1;
  ADD          R0, 7, RD18

.L00802C09:
// st_stuff.c:1062   palette += STARTREDPALS;
  ADDS.L       RD18, 1, RD18
  BSR          .L00802C0A, R0

.L00802C08:
  MOV.Q        TU7A00CB73/plyr, RQ20
  MOV.L        (RQ20, 236), RQ8
  BREQ.L       R0, RQ8, .L00802C0B
// st_stuff.c:1066   {
  MOV.Q        TU7A00CB73/plyr, RQ20
  MOV.L        (RQ20, 236), RQ9
  ADDS.L       RQ9, 7, RQ8
  SHAR         RQ8, 3, RD18
  BRLT.L       4, RD18, .L00802C0C
// st_stuff.c:1070   palette = NUMBONUSPALS-1;
  ADD          R0, 3, RD18

.L00802C0C:
// st_stuff.c:1072   palette += STARTBONUSPALS;
  ADDS.L       RD18, 9, RD18
  BSR          .L00802C0D, R0

.L00802C0B:
  MOV.Q        TU7A00CB73/plyr, RQ20
  ADD          RQ20, 48, RQ13
  MOV.L        (RQ13, 12), RQ9
  BRGT.L       128, RQ9, .L00802C0F
  MOV.Q        TU7A00CB73/plyr, RQ20
  ADD          RQ20, 48, RQ13
  MOV.L        (RQ13, 12), RQ9
  ADD          R0, 8, RD20
  BTSTN.L      RD20, RQ9, .L00802C0F
  BSR          .L00802C0E, R0

.L00802C0F:
// st_stuff.c:1077   palette = RADIATIONPAL;
  ADD          R0, 13, RD18
  BSR          .L00802C11, R0

.L00802C0E:
// st_stuff.c:1079   palette = 0;
  ADD          R0, 0, RD18

.L00802C11:

.L00802C0D:

.L00802C0A:
// st_stuff.c:1081   if (palette != st_palette)
  MOV.L        TU7A00CB73/st_palette, RD20
  BREQ.Q       RD20, RD18, .L00802C12
// st_stuff.c:1082   {
  MOV.L        RD18, TU7A00CB73/st_palette
// st_stuff.c:1084   pal = (byte *) W_CacheLumpNum (lu_palette, PU_CACHE)+palette*768;
  MOV.L        TU7A00CB73/lu_palette, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ20
  ADD          R0, 768, R5
  MULS.L       RD18, R5, RQ9
  ADD          RQ20, RQ9, RQ21
// st_stuff.c:1085   I_SetPalette (pal);
  ADD          RQ21, 0, RQ10
  BSR          I_SetPalette, R1
// st_stuff.c:1086   I_SetPaletteIndex (palette);
  ADD          RD18, 0, RD10
  BSR          I_SetPaletteIndex, R1

.L00802C12:

.L00C02726:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

V_Init:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
// v_video.c:814   base = (dt_scrpix *)
  ADD          R0, 0x0009C400, RD10
  BSR          I_AllocLow, R1
  ADD          RQ10, 0, RQ9
  ADD          RQ9, 0, RQ22
// v_video.c:819   screens_base = base;
  MOV.Q        RQ22, screens_base
  MOV.Q        RQ22, (R2, 88)
// v_video.c:821   for (i=0 ; i<4 ; i++)
  ADD          R0, 0, RD18

.L00802B51:
// v_video.c:822   {
  ADD          R0, 320, R5
  MULS.L       RD18, R5, RQ8
  ADD          R0, 200, R5
  MULS.L       RQ8, R5, RQ23
  MOV.Q        (R2, 88), RQ22
  LEA.W        RQ22, RQ23, RQ9
  MOV          screens, RQ21
  MOV.Q        RQ9, (RQ21, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802B51

.L00802B53:
// v_video.c:826   screens_zbuf = (u16 *)
  ADD          R0, 0x0001F400, RD10
  BSR          I_AllocLow, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, screens_zbuf
// v_video.c:829   screen = screens[0];
  MOV          screens, RQ22
  MOV.Q        (RQ22, 0), RQ21
  MOV.Q        RQ21, screen

.L00C0272C:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

SMus_Init:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// i_bgb_mus_btsh.c:585   {
  BSR          SMus_SilenceAll, R1

.L00C02732:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

A_Saw:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ23
  MOV.Q        RQ11, (R2, 128)
// p_pspr.c:512   damage = 2*(P_Random ()%10+1);
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ20
  ADD          R0, 10, RD27
  MODS.L       RQ20, RD27, RQ20
  ADDS.L       RQ20, 1, RQ9
  SHAD.L       RQ9, 1, RD26
  MOV.L        RD26, (R2, 124)
// p_pspr.c:513   angle = player->mo->angle;
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RD21
// p_pspr.c:514   angle += (P_Random()-P_Random())<<18;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ20
  SUBS.L       RQ9, RQ20, RQ8
  SHAD.L       RQ8, 18, RQ9
  ADDU.L       RD21, RQ9, RD21
// p_pspr.c:517   slope = P_AimLineAttack (player->mo, angle, MELEERANGE+1);
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          R0, 0x00400001, RD12
  BSR          P_AimLineAttack, R1
  MOV.L        RD10, (R2, 120)
// p_pspr.c:518   P_LineAttack (player->mo, angle, MELEERANGE+1, slope, damage);
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          R0, 0x00400001, RD12
  MOV.L        (R2, 120), RD13
  ADD          RD26, 0, RD14
  BSR          P_LineAttack, R1
// p_pspr.c:520   if (!linetarget)
  MOV.Q        linetarget, RQ13
  BRNE.Q       R0, RQ13, .L00801EAE
// p_pspr.c:521   {
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 12, RD11
  BSR          S_StartSound, R1
// p_pspr.c:523   return;
  BSR          .L00C02738, R0

.L00801EAE:
// p_pspr.c:524   }
  MOV.Q        (RQ23, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 13, RD11
  BSR          S_StartSound, R1
// p_pspr.c:528   angle = R_PointToAngle2 (player->mo->x, player->mo->y,
  MOV.Q        linetarget, RQ27
  MOV.L        (RQ27, 28), RQ8
  MOV.L        (RQ27, 24), RQ9
  MOV.Q        (RQ23, 0), RQ18
  MOV.L        (RQ18, 28), RQ20
  MOV.L        (RQ18, 24), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ20, 0, RD11
  ADDS.L       RQ9, 0, RD12
  ADDS.L       RQ8, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD21
// p_pspr.c:530   if (angle - player->mo->angle > ANG180)
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  SUBU.L       RD21, RQ8, RQ22
  ADD          R0, 0x0000000080000000, RD27
  BRLEU.L      RD27, RQ22, .L00801EAF
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  SUBU.L       RD21, RQ8, RQ22
  ADD          R0, 0x00000000FCCCCCCD, RD27
  BRGEU.L      RD27, RQ22, .L00801EB0
// p_pspr.c:533   player->mo->angle = angle + ANG90/21;
  ADD          R0, 0x030C30C3, R5
  ADDU.L       R5, RD21, RQ9
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       RQ9, (RQ18, 56)
  BSR          .L00801EB1, R0

.L00801EB0:
// p_pspr.c:535   player->mo->angle -= ANG90/20;
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  ADD          R0, 0xFFFFFFFFFCCCCCCD, R5
  ADDU.L       R5, RQ8, RQ22
  MOVU.L       RQ22, (RQ18, 56)

.L00801EB1:
  BSR          .L00801EB2, R0

.L00801EAF:
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  SUBU.L       RD21, RQ8, RQ22
  ADD          R0, 0x03333333, RD27
  BRLEU.L      RD27, RQ22, .L00801EB3
// p_pspr.c:540   player->mo->angle = angle - ANG90/21;
  ADD          R0, 0xFFFFFFFFFCF3CF3D, R5
  ADDU.L       R5, RD21, RQ9
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       RQ9, (RQ18, 56)
  BSR          .L00801EB4, R0

.L00801EB3:
// p_pspr.c:542   player->mo->angle += ANG90/20;
  MOV.Q        (RQ23, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  ADD          R0, 0x03333333, R5
  ADDU.L       R5, RQ8, RQ22
  MOVU.L       RQ22, (RQ18, 56)

.L00801EB4:

.L00801EB2:
// p_pspr.c:543   }
  MOV.Q        (RQ23, 0), RQ18
  MOV.L        (RQ18, 160), RQ8
  OR           RQ8, 128, RQ22
  MOV.L        RQ22, (RQ18, 160)

.L00C02738:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_SpawnFireFlicker:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R20, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ23
// p_lights.c:75   sector->special = 0; 
  MOV.W        RD0, (RQ23, 14)
// p_lights.c:77   flick = Z_Malloc ( sizeof(*flick), PU_LEVSPEC, 0);
  ADD          R0, 48, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_lights.c:79   P_AddThinker (&flick->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_lights.c:81   flick->thinker.function.acp1 = (actionf_p1) T_FireFlicker;
  MOV          T_FireFlicker, RQ8
  ADD          RQ18, 0, RQ20
  ADD          RQ20, 16, RQ27
  MOV.Q        RQ8, (RQ27, 0)
// p_lights.c:82   flick->sector = sector;
  MOV.Q        RQ23, (RQ18, 24)
// p_lights.c:83   flick->maxlight = sector->lightlevel;
  MOV.W        (RQ23, 12), RQ9
  MOV.L        RQ9, (RQ18, 36)
// p_lights.c:84   flick->minlight = P_FindMinSurroundingLight(sector,sector->lightlevel)+16;
  ADD          RQ23, 0, RQ10
  SHAD.Q       RQ9, 48, RD11
  SHAR.Q       RD11, 48, RD11
  BSR          P_FindMinSurroundingLight, R1
  ADD          RQ10, 0, RQ22
  ADDS.L       RQ22, 16, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_lights.c:85   flick->count = 4;
  ADD          R0, 4, RD26
  MOV.L        RD26, (RQ18, 32)

.L00C0273E:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R20
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_clearMarks:
// am_map.c:533   for (i=0;i<AM_NUMMARKPOINTS;i++)
  ADDS.L       RD0, 0, RD13

.L008017AC:
// am_map.c:534   markpoints[i].x = -1; // means empty
  MOV          TU7A00C41B/markpoints, RQ12
  LEA.Q        RQ12, RD13, RQ11
  ADD          R0, -1, RD10
  MOV.L        RD10, (RQ11, 0)
  ADDS.L       RD13, 1, RD13
  BRLT.L       10, RD13, .L008017AC

.L008017AE:
// am_map.c:535   markpointnum = 0;
  ADDS.L       RD0, 0, RD12
  MOV.L        RD12, TU7A00C41B/markpointnum

.L00C0273F:
  JSR          R1, 0, R0

HUlib_clearTextLine:
// hu_lib.c:48   {
  MOV.L        RD0, (RQ10, 104)
// hu_lib.c:50   t->l[0] = 0;
  ADD          RQ10, 20, RQ13
  MOV.B        RD0, (RQ13, 0)
// hu_lib.c:51   t->needsupdate = true;
  ADD          R0, 1, RD12
  MOV.L        RD12, (RQ10, 108)

.L00C02740:
  JSR          R1, 0, R0
  .balign 4

tk_alloc_file:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -312, R2
  ADD          R0, 0x47362514, RD22
// tk_core/tk_vfile.c:283   
  MOV.Q        tk_vf_freelist, RQ18
// tk_core/tk_vfile.c:284   
  BREQ.Q       R0, RQ18, .L00800A92
  MOV.L        (RQ18, 92), RQ23
  BREQ.Q       RD22, RQ23, .L00800A93
// tk_core/tk_vfile.c:287   

tk_alloc_file.debugbreak_L04B6:
  BRK          1206

.L00800A93:
// tk_core/tk_vfile.c:289   
  MOV.Q        (RQ18, 8), RQ21
  MOV.Q        RQ21, tk_vf_freelist
// tk_core/tk_vfile.c:290   
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 160, RQ12
  BSR          memset, R1
// tk_core/tk_vfile.c:291   
  ADD          R0, 0x14253647, RD21
  MOV.L        RD21, (RQ18, 92)
// tk_core/tk_vfile.c:292   
  ADD          RQ18, 0, RQ10
  BSR          .L00C02750, R0

.L00800A92:
// tk_core/tk_vfile.c:295   
  LUI          10, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ8
// tk_core/tk_vfile.c:297   
  ADD          RQ8, 0, RQ18
// tk_core/tk_vfile.c:298   
  ADD          R0, 0, RD9

.L00800A94:
// tk_core/tk_vfile.c:299   
  MOV.Q        tk_vf_freelist, RQ21
  MOV.Q        RQ21, (RQ18, 8)
// tk_core/tk_vfile.c:301   
  MOV.L        RD22, (RQ18, 92)
// tk_core/tk_vfile.c:302   
  ADD          RQ18, 0, RQ21
  MOV.Q        RQ21, tk_vf_freelist
// tk_core/tk_vfile.c:303   
  ADD          RQ18, 160, RQ18
  ADDS.L       RD9, 1, RD9
  BRLT.L       256, RD9, .L00800A94

.L00800A95:
// tk_core/tk_vfile.c:306   
  MOV.Q        tk_vf_freelist, RQ18
// tk_core/tk_vfile.c:307   
  BREQ.Q       R0, RQ18, .L00800A96
// tk_core/tk_vfile.c:308   
  MOV.Q        (RQ18, 8), RQ21
  MOV.Q        RQ21, tk_vf_freelist
// tk_core/tk_vfile.c:310   
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 160, RQ12
  BSR          memset, R1
// tk_core/tk_vfile.c:311   
  ADD          R0, 0x14253647, RD21
  MOV.L        RD21, (RQ18, 92)
// tk_core/tk_vfile.c:312   
  ADD          RQ18, 0, RQ10
  BSR          .L00C02750, R0

.L00800A96:
// tk_core/tk_vfile.c:315   

tk_alloc_file.debugbreak_L04B7:
  BRK          1207
// tk_core/tk_vfile.c:316   
  ADD          RQ0, 0, RQ10

.L00C02750:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BFGsound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
  ADD          R0, 9, RD8
// p_pspr.c:833   {
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 9, RD11
  BSR          S_StartSound, R1

.L00C02758:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_opradd_bigig:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -600, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:286   
// tk_core/lva_tagopr.c:288   
  ADD          R2, 112, RQ10
  ADD          RQ18, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:289   
  ADD          R2, 176, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:290   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 240, RQ12
  BSR          tkmm_bigint_add, R1
// tk_core/lva_tagopr.c:291   
  ADD          R2, 240, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C0275E:
  ADD          R2, 600, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ChangeSensitivity:
  ADD          R2, -32, R2
  MOV.Q        R23, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -288, R2
  ADD          RD10, 0, RD18
  MOV.L        mouseSensitivity, RD9
  ADD          R0, 1, RD8
  ADD          R0, 9, RD23
// m_menu.c:1157   {
  BREQ.L       R0, RD18, .L00801672
  BREQ.Q       1, RD18, .L00801673
  BSR          .L00801671, R0

.L00801672:
// m_menu.c:1160   case 0:
  BREQ.L       R0, RD9, .L00801674
// m_menu.c:1162   mouseSensitivity--;
  ADDS.L       RD9, -1, RD9

.L00801674:
// m_menu.c:1163   break;
  BSR          .L00801671, R0

.L00801673:
// m_menu.c:1164   case 1:
  BRGE.L       9, RD9, .L00801675
// m_menu.c:1166   mouseSensitivity++;
  ADDS.L       RD9, 1, RD9

.L00801675:
// m_menu.c:1167   break;

.L00801671:

.L00C02764:
  MOV.L        RD9, mouseSensitivity
  ADD          R2, 288, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 32, R2
  JSR          R1, 0, R0
  .balign 4

TKDFS_UtfMergeInit:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// tk_core/tk_rwad.c:1399   
  ADD          R0, 0, RD18

.L00800F68:
// tk_core/tk_rwad.c:1400   
  MOV          tkdfs_utf_combhash, RQ27
  ADD          R0, -1, RD26
  MOV.W        RD26, (RQ27, RD18)
// tk_core/tk_rwad.c:1402   
  MOV          tkdfs_utf_splithash, RQ27
  MOV.W        RD26, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       256, RD18, .L00800F68

.L00800F69:
// tk_core/tk_rwad.c:1405   
  MOV.L        RD0, (R2, 104)
// tk_core/tk_rwad.c:1406   
  ADD          R0, 0, RD18
  MOV          tkdfs_utf_combarr, RQ27
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 4), RQ22
  BREQ.L       R0, RQ22, .L00800F6A

.L00800F6B:
  ADDS.L       RD18, 1, RD18
  MOV          tkdfs_utf_combarr, RQ27
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 4), RQ22
  BRNE.L       R0, RQ22, .L00800F6B

.L00800F6A:
  ADD          RD18, 0, RD27
// tk_core/tk_rwad.c:1409   
  ADDS.L       RD27, 1, RQ22
  MOV.L        RD27, (R2, 104)
  SHAD.L       RQ22, 1, RQ8
  SHAD.L       RQ8, 1, RQ22
  ADDS.L       RQ22, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ26
// tk_core/tk_rwad.c:1410   
  ADDS.L       RD27, 1, RQ8
  LEA.W        RQ26, RQ8, RQ25
  MOV.Q        RQ25, tkdfs_utf_splitchn
  MOV.Q        RQ26, tkdfs_utf_combchn
// tk_core/tk_rwad.c:1413   
  ADDS.L       RD27, -1, RD18
  BRLT.L       R0, RD18, .L00800F6C

.L00800F6D:
// tk_core/tk_rwad.c:1414   
  MOV          tkdfs_utf_combarr, RQ27
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 0), RD20
// tk_core/tk_rwad.c:1416   
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 2), RD25
// tk_core/tk_rwad.c:1417   
  LEA.Q        RQ27, RD18, RQ26
  MOVU.W       (RQ26, 4), RD21
// tk_core/tk_rwad.c:1419   
  XOR          RD20, RD25, RD9
  MOV.L        RD25, (R2, 108)
// tk_core/tk_rwad.c:1420   
  SHAR         RD9, 7, RQ8
  XOR          RD9, RQ8, RD9
// tk_core/tk_rwad.c:1421   
  AND          RD9, 255, RD9
// tk_core/tk_rwad.c:1423   
  MOV          tkdfs_utf_combhash, RQ27
  MOV.W        (RQ27, RD9), RD23
// tk_core/tk_rwad.c:1424   
  MOV.Q        tkdfs_utf_combchn, RQ13
  MOV.W        RD23, (RQ13, RD18)
// tk_core/tk_rwad.c:1425   
  MOV.W        RD18, (RQ27, RD9)
// tk_core/tk_rwad.c:1427   
  SHAR         RD21, 7, RQ8
  XOR          RD21, RQ8, RQ27
  AND          RQ27, 255, RD9
// tk_core/tk_rwad.c:1428   
  MOV          tkdfs_utf_splithash, RQ13
  MOV.W        (RQ13, RD9), RD23
// tk_core/tk_rwad.c:1429   
  MOV.Q        tkdfs_utf_splitchn, RQ12
  MOV.W        RD23, (RQ12, RD18)
// tk_core/tk_rwad.c:1430   
  MOV.W        RD18, (RQ13, RD9)
  ADDS.L       RD18, -1, RD18
  BRGE.L       R0, RD18, .L00800F6D

.L00800F6C:
// tk_core/tk_rwad.c:1433   
  ADD          R0, 0, RD10

.L00C0276A:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawTranslatedColumn:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// r_draw.c:774   count = dc_yh - dc_yl;
  MOV.L        dc_yh, RD13
  MOV.L        dc_yl, RD12
  SUBS.L       RD13, RD12, RD23
// r_draw.c:775   if (count < 0)
  BRLT.L       R0, RD23, .L00C02770
// r_draw.c:779   if ((unsigned)dc_x >= SCREENWIDTH
  MOV.L        dc_x, RD13
  ADDU.L       RD13, R0, RQ18
  ADD          R0, 320, RQ8
  CMPGE.Q      RQ18, RQ8, RQ9
  MOV.L        dc_yl, RD13
  CMPLT.Q      RD13, R0, RQ18
  OR           RQ9, RQ18, RQ8
  MOV.L        dc_yh, RD13
  ADD          R0, 200, R5
  CMPGE.Q      RD13, R5, RQ18
  OR           RQ8, RQ18, RQ9
  BREQ.L       R0, RQ9, .L008025D7
// r_draw.c:782   {
  MOV          .L00C0260E, RQ10
  MOV.L        dc_yl, RD11
  MOV.L        dc_yh, RD12
  MOV.L        dc_x, RD13
  BSR          I_Error, R1

.L008025D7:
// r_draw.c:811   dest = ylookup[dc_yl] + columnofs[dc_x];
  MOV          ylookup, RQ13
  MOV.L        dc_yl, RD12
  MOV.Q        (RQ13, RD12), RQ11
  MOV          columnofs, RQ13
  MOV.L        dc_x, RD10
  MOV.L        (RQ13, RD10), RQ18
  LEA.W        RQ11, RQ18, RQ22
// r_draw.c:814   fracstep = dc_iscale;
  MOV.L        dc_iscale, RD20
// r_draw.c:815   frac = dc_texturemid + (dc_yl-centery)*fracstep;
  MOV.L        centery, RD13
  SUBS.L       RD12, RD13, RQ9
  MULS.L       RQ9, RD20, RQ8
  MOV.L        dc_texturemid, RD13
  ADDS.L       RD13, RQ8, RD21
// r_draw.c:818   do

.L008025D8:
// r_draw.c:825   *dest = dc_colormap[dc_translation[dc_source[frac>>FRACBITS]]];
  SHAR         RD21, 16, RQ18
  MOV.Q        dc_source, RQ13
  MOVU.B       (RQ13, RQ18), RQ9
  MOV.Q        dc_translation, RQ13
  MOVU.B       (RQ13, RQ9), RQ8
  MOV.Q        dc_colormap, RQ13
  MOVU.W       (RQ13, RQ8), RQ18
  MOVU.W       RQ18, (RQ22, 0)
// r_draw.c:826   dest += SCREENWIDTH;
  ADD          RQ22, 640, RQ22
// r_draw.c:828   frac += fracstep;
  ADDS.L       RD21, RD20, RD21
  ADD          RD23, 0, RQ9
  ADDS.L       RD23, -1, RD23
  BRNE.L       R0, RQ9, .L008025D8

.L00C02770:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

HUlib_addLineToSText:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
// hu_lib.c:207   if (++s->cl == s->h)
  MOV.L        (RQ8, 452), RQ9
  ADDS.L       RQ9, 1, RQ23
  MOV.L        RQ23, (RQ8, 452)
  MOV.L        (RQ8, 448), RQ9
  BRNE.Q       RQ9, RQ23, .L00802CF8
// hu_lib.c:208   s->cl = 0;
  MOV.L        RD0, (RQ8, 452)

.L00802CF8:
// hu_lib.c:209   HUlib_clearTextLine(&s->l[s->cl]);
  ADD          RQ8, 0, RQ23
  MOV.L        (RQ8, 452), RQ9
  ADD          R0, 112, R5
  MUL.L        RQ9, R5, RQ10
  ADD          RQ23, RQ10, RQ10
  BSR          HUlib_clearTextLine, R1
// hu_lib.c:212   for (i=0 ; i<s->h ; i++)
  ADD          R0, 0, RD18
  MOV.L        (RQ8, 448), RQ9
  BRGE.L       RQ9, RD18, .L00802CFB

.L00802CF9:
// hu_lib.c:213   s->l[i].needsupdate = 4;
  ADD          RQ8, 0, RQ23
  ADD          R0, 112, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ23, RQ13, RQ13
  ADD          R0, 4, RD12
  MOV.L        RD12, (RQ13, 108)
  ADDS.L       RD18, 1, RD18
  MOV.L        (RQ8, 448), RQ9
  BRLT.L       RQ9, RD18, .L00802CF9

.L00802CFB:

.L00C02776:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

M_LoadGame:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// m_menu.c:607   {
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L0080163A
// m_menu.c:609   {
  MOV          .L00C0277D, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:611   return;
  BSR          .L00C0277C, R0

.L0080163A:
// m_menu.c:614   M_SetupNextMenu(&LoadDef);
  MOV          LoadDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1
// m_menu.c:615   M_ReadSaveStrings();
  BSR          M_ReadSaveStrings, R1

.L00C0277C:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

G_DeferedInitNew:
// g_game.c:1360   {
  ADDS.L       RD10, 0, RD13
// g_game.c:1362   d_episode = episode;
  ADD          RD11, 0, RD17
// g_game.c:1363   d_map = map;
  ADD          RD12, 0, RD16
// g_game.c:1364   gameaction = ga_newgame;
  ADD          R0, 2, RD15
  MOV.L        RD13, d_skill
  MOV.L        RD17, d_episode
  MOV.L        RD16, d_map
  MOV.L        RD15, gameaction

.L00C0277E:
  JSR          R1, 0, R0
  .balign 4

__xli_udiv:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -464, R2
  MOV.X        RQ10, (R2, 256)
  MOV.X        RQ12, (R2, 240)
// pdpc201/btshx_xli.c:770   
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 240), RQ10
  BSR          __xli_cmp_eq, R1
  ADDS.L       R2, 0, RQ9
  ADD          R0, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 256), RQ10
  BSR          __xli_cmp_eq, R1
  ADDS.L       R2, 0, RQ8
  OR           RQ9, RQ8, RQ22
  MOV.X        RQ20, (R2, 144)
  BRNE.L       R0, RQ22, .L00C00C40
// pdpc201/btshx_xli.c:773   
  MOV.X        (R2, 256), RQ12
  MOV.X        (R2, 240), RQ10
  BSR          __xli_cmp_hi, R1
  BRNE.Q       RQ10, R0, .L00C00C40
// pdpc201/btshx_xli.c:776   
  MOV.X        (R2, 256), RQ10
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        (R2, 256), RQ12
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_cmp_eq, R1
  ADDS.L       R2, 0, RQ9
  MOV.X        (R2, 240), RQ10
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        (R2, 240), RQ12
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_cmp_eq, R1
  ADDS.L       R2, 0, RQ8
  MOV.X        RQ20, (R2, 144)
  BTST.L       RQ8, RQ9, .L00801086
// pdpc201/btshx_xli.c:777   
  MOV.X        (R2, 256), RQ10
  MOV.Q        RQ10, (R2, 112)
  MOV.X        (R2, 240), RQ10
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        (R2, 112), RQ10
  MOV.Q        (R2, 104), RQ11
  BSR          __udivdi3, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
// pdpc201/btshx_xli.c:779   
  MOV.X        RQ20, (R2, 224)
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          .L00C02784, R0

.L00801086:
// pdpc201/btshx_xli.c:783   
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 240), RQ10
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  MOV.X        RQ20, (R2, 80)
  MOV.X        RQ26, (R2, 144)
  ADD          RQ26, 0, RQ12
  ADD          RQ27, 0, RQ13
  MOV.X        (R2, 240), RQ10
  BSR          __xli_cmp_tst, R1
  BRNE.Q       RQ10, R0, .L00801087
// pdpc201/btshx_xli.c:784   
  MOV.X        (R2, 256), RQ26
  ADD          RQ26, 0, RQ20
  ADD          RQ27, 0, RQ21
// pdpc201/btshx_xli.c:786   
  MOV.X        (R2, 240), RQ26
  ADD          RQ26, 0, RQ24
  ADD          RQ27, 0, RQ25
// pdpc201/btshx_xli.c:787   
  MOV.X        RQ20, (R2, 224)
  MOV.X        RQ24, (R2, 208)
  BSR          .L00801088, R0

.L00801089:
// pdpc201/btshx_xli.c:788   
  ADD          R0, 1, RQ12
  MOV.X        (R2, 224), RQ10
  BSR          __xli_shlr, R1
  MOV.X        RQ10, (R2, 224)
// pdpc201/btshx_xli.c:790   
  ADD          R0, 1, RQ12
  MOV.X        (R2, 208), RQ10
  BSR          __xli_shlr, R1
  MOV.X        RQ10, (R2, 208)

.L00801088:
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        RQ20, (R2, 144)
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 208), RQ10
  BSR          __xli_cmp_ntst, R1
  BRNE.Q       RQ10, R0, .L00801089

.L0080108A:
// pdpc201/btshx_xli.c:791   
  MOV.X        (R2, 224), RQ10
  BSR          .L00C02784, R0

.L00801087:
// pdpc201/btshx_xli.c:796   
  MOV.X        (R2, 240), RQ10
  BSR          _fcn_clz128, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.X        (R2, 256), RQ10
  BSR          _fcn_clz128, R1
  ADD          RQ10, 0, RQ22
  SUBS.L       RQ8, RQ22, RQ9
  AND          RQ9, 255, RD18
// pdpc201/btshx_xli.c:798   
  BRLT.L       127, RD18, .L0080108B
  BRNE.Q       127, RD18, .L0080108C
// pdpc201/btshx_xli.c:801   
  MOV.X        (R2, 256), RQ10
  BSR          .L00C02784, R0

.L0080108C:
// pdpc201/btshx_xli.c:802   
  ADD          R0, 0, RQ10
  ADD          R0, 0, RQ11
  BSR          .L00C02784, R0

.L0080108B:
// pdpc201/btshx_xli.c:805   
  ADDS.L       RD18, 1, RD18
  ADDU.L       RD18, R0, RD18
  AND          RD18, 255, RD18
// pdpc201/btshx_xli.c:807   
  ADD          R0, 128, R5
  SUBS.L       R5, RD18, RQ8
  ADDS.L       RQ8, 0, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  MOV.X        (R2, 256), RQ10
  BSR          __xli_shl, R1
  MOV.X        RQ10, (R2, 224)
  ADD          RD18, 0, RD10
  ADD          R0, 0, RD11
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  ADD          RQ26, 0, RQ12
  ADD          RQ27, 0, RQ13
  MOV.X        (R2, 256), RQ10
  BSR          __xli_shlr, R1
  MOV.X        RQ10, (R2, 208)
  MOV.X        RQ26, (R2, 144)
  ADD          R0, 0, RQ26
  ADD          R0, 0, RQ27
  ADD          RQ26, 0, RQ24
  ADD          RQ27, 0, RQ25
// pdpc201/btshx_xli.c:808   
  MOV.X        RQ20, (R2, 80)
  MOV.X        RQ24, (R2, 176)
  BSR          .L0080108D, R0

.L0080108E:
// pdpc201/btshx_xli.c:809   
  MOV.X        (R2, 208), RQ12
  MOV.X        (R2, 208), RQ10
  BSR          __xli_add, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          R0, 127, RQ12
  MOV.X        (R2, 224), RQ10
  BSR          __xli_shlr, R1
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  ADD          RQ26, 0, RQ12
  ADD          RQ27, 0, RQ13
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_or, R1
  ADD          RQ10, 0, RQ24
  ADD          RQ11, 0, RQ25
// pdpc201/btshx_xli.c:811   
  MOV.X        (R2, 224), RQ12
  MOV.X        (R2, 224), RQ10
  BSR          __xli_add, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        (R2, 176), RQ12
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_or, R1
  MOV.X        RQ10, (R2, 224)
// pdpc201/btshx_xli.c:812   
  ADD          RQ24, 0, RQ12
  ADD          RQ25, 0, RQ13
  MOV.X        (R2, 240), RQ10
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  MOV.X        RQ10, (R2, 64)
  MOV.X        (R2, 64), RQ12
  ADD          RQ26, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          R0, 127, RQ12
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_shar, R1
  MOV.X        RQ10, (R2, 192)
// pdpc201/btshx_xli.c:813   
  ADD          R0, 1, RD10
  SHAR         RD10, 31, RD11
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
  ADD          RQ26, 0, RQ12
  ADD          RQ27, 0, RQ13
  MOV.X        (R2, 192), RQ10
  BSR          __xli_and, R1
  MOV.X        RQ10, (R2, 176)
// pdpc201/btshx_xli.c:814   
  MOV.X        (R2, 192), RQ12
  MOV.X        (R2, 240), RQ10
  BSR          __xli_and, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  ADD          RQ20, 0, RQ12
  ADD          RQ21, 0, RQ13
  ADD          RQ24, 0, RQ10
  ADD          RQ25, 0, RQ11
  BSR          __xli_sub, R1
  ADD          RQ10, 0, RQ24
  ADD          RQ11, 0, RQ25
  MOV.X        RQ20, (R2, 80)
  MOV.X        RQ26, (R2, 144)
  MOV.X        RQ24, (R2, 208)

.L0080108D:
  ADD          RD18, 0, RQ9
  ADDS.L       RD18, -1, RD18
  ADDU.L       RD18, R0, RD18
  AND          RD18, 255, RD18
  BRNE.L       R0, RQ9, .L0080108E

.L0080108F:
// pdpc201/btshx_xli.c:815   
  MOV.X        (R2, 224), RQ12
  MOV.X        (R2, 224), RQ10
  BSR          __xli_add, R1
  ADD          RQ10, 0, RQ20
  ADD          RQ11, 0, RQ21
  MOV.X        (R2, 176), RQ12
  ADD          RQ20, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          __xli_or, R1
  ADD          RQ10, 0, RQ26
  ADD          RQ11, 0, RQ27
// pdpc201/btshx_xli.c:817   
  MOV.X        RQ20, (R2, 144)
  MOV.X        RQ26, (R2, 224)
  ADD          RQ26, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          .L00C02784, R0

.L00C00C40:
  ADD          R0, 0, RQ10

.L00C02784:
  ADD          R2, 464, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_puts_n_tty:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
  MOV.Q        RQ10, (R2, 184)
  MOV.L        RD11, (R2, 180)
  MOV.L        RD12, (R2, 176)
// tk_core/tk_puts.c:857   
  MOV.L        (R2, 176), RD27
  ADDU.L       RD27, R0, RQ26
  ADD          R0, 0x00000000F0000000, RD13
  AND          RQ26, RD13, RQ22
  LUI          0x00010000, RD12
  BRNE.Q       RD12, RQ22, .L00800C07
  MOV.Q        tk_puts_gbltemp, RQ27
  BRNE.Q       R0, RQ27, .L00800C08
// tk_core/tk_puts.c:860   
  ADD          R0, 256, RD10
  ADD          R0, 7, RD11
  BSR          tk_malloc_cat, R1
  MOV.Q        RQ10, tk_puts_gbltemp

.L00800C08:
// tk_core/tk_puts.c:864   
  BSR          TKGDI_GetCurrentGdiContext, R1
  ADD          RQ10, 0, RQ20
// tk_core/tk_puts.c:865   
  MOV.L        (R2, 176), RD27
  AND          RD27, 0x00FFFFFF, RD26
  MOV.L        RD26, (R2, 172)
// tk_core/tk_puts.c:867   
  MOV.Q        (R2, 184), RQ8
  MOV.L        (R2, 180), RD18
// tk_core/tk_puts.c:868   
  BSR          .L00800C09, R0

.L00800C0A:
// tk_core/tk_puts.c:869   
  MOV.Q        tk_puts_gbltemp, RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 252, RQ12
  BSR          __memcpy32, R1
// tk_core/tk_puts.c:871   
  MOV.Q        tk_puts_gbltemp, RQ27
  MOV.B        RD0, (RQ27, 252)
// tk_core/tk_puts.c:872   
  MOV.Q        (RQ20, 0), RQ9
  ADD          RQ9, 0, RQ21
  MOV.Q        (RQ9, 64), RQ23
  ADD          RQ20, 0, RQ10
  MOV.L        (R2, 172), RD11
  ADD          R0, -1, RD12
  ADD          R0, -1, RD13
  MOV.Q        tk_puts_gbltemp, RQ14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  ADD          RQ21, 0, RQ29
  JSR          RQ23, 0, R1
  ADD          RQ10, 0, RQ22
// tk_core/tk_puts.c:873   
  ADD          RQ8, 252, RQ8
// tk_core/tk_puts.c:874   
  ADDS.L       RD18, -252, RD18

.L00800C09:
  BRGE.L       252, RD18, .L00800C0A

.L00800C0B:
// tk_core/tk_puts.c:877   
  ADDS.L       RD18, 0, RQ27
  MOV.Q        tk_puts_gbltemp, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1
// tk_core/tk_puts.c:878   
  MOV.Q        tk_puts_gbltemp, RQ26
  MOV.B        RD0, (RQ26, RD18)
// tk_core/tk_puts.c:881   
  MOV.Q        (RQ20, 0), RQ9
  ADD          RQ9, 0, RQ23
  MOV.Q        (RQ9, 64), RQ26
  ADD          RQ20, 0, RQ10
  MOV.L        (R2, 172), RD11
  ADD          R0, -1, RD12
  ADD          R0, -1, RD13
  MOV.Q        tk_puts_gbltemp, RQ14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  ADD          RQ23, 0, RQ29
  JSR          RQ26, 0, R1
  ADD          RQ10, 0, RQ22
// tk_core/tk_puts.c:882   
  BSR          .L00C0278A, R0

.L00800C07:

.L00C0278A:
  ADD          R2, 400, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

R_DrawPlayerSprites:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// r_things.c:1037   if(!viewplayer)
  MOV.Q        viewplayer, RQ13
  BREQ.Q       R0, RQ13, .L00C02790
// r_things.c:1041   lightnum =
  MOV.Q        viewplayer, RQ13
  MOV.Q        (RQ13, 0), RQ8
  MOV.Q        (RQ8, 88), RQ23
  MOV.Q        (RQ23, 0), RQ8
  MOV.W        (RQ8, 12), RQ22
  SHAR         RQ22, 4, RQ20
  MOV.L        extralight, RD13
  ADDS.L       RQ20, RD13, RD21
// r_things.c:1045   if (lightnum < 0)		
  BRGE.L       R0, RD21, .L0080281B
// r_things.c:1046   {
  MOV          scalelight, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:1048   lightlevel = 0;
  MOV.L        RD0, lightlevel
  BSR          .L0080281C, R0

.L0080281B:
  BRLT.L       16, RD21, .L0080281D
// r_things.c:1051   {
  MOV          scalelight, RQ13
  ADD          RQ13, 5760, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:1053   lightlevel = LIGHTLEVELS-1;
  ADD          R0, 15, RD13
  MOV.L        RD13, lightlevel
  BSR          .L0080281E, R0

.L0080281D:
// r_things.c:1056   {
  MOV          scalelight, RQ13
  ADD          R0, 384, R5
  MUL.L        RD21, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ12, spritelights
// r_things.c:1058   lightlevel = lightnum;
  MOV.L        RD21, lightlevel

.L0080281E:

.L0080281C:
// r_things.c:1062   mfloorclip = screenheightarray;
  MOV          screenheightarray, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, mfloorclip
// r_things.c:1063   mceilingclip = negonearray;
  MOV          negonearray, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, mceilingclip
// r_things.c:1066   for (i=0, psp=viewplayer->psprites;
  ADD          R0, 0, RD9
  MOV.Q        viewplayer, RQ13
  ADD          RQ13, 264, RQ8
  ADD          RQ8, 0, RQ18
  BRGE.L       2, RD9, .L00802821

.L0080281F:
// r_things.c:1069   {
  MOV.Q        (RQ18, 0), RQ23
  BREQ.Q       R0, RQ23, .L00802822
// r_things.c:1071   R_DrawPSprite (psp);
  ADD          RQ18, 0, RQ10
  BSR          R_DrawPSprite, R1

.L00802822:
  ADD          RD9, 0, RQ22
  ADDS.L       RD9, 1, RD9
  ADD          RQ18, 0, RQ8
  ADD          RQ18, 24, RQ18
  BRLT.L       2, RD9, .L0080281F

.L00802821:

.L00C02790:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

TKMM_Malloc:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD8
// tk_core/tk_mmpage.c:828   
  MOV.Q        TKMM_PageAlloc_f, RQ13
  CMPEQ.Q      RQ13, R0, RQ9
  MOV.L        TU61F874B9/tkmm_is_init, RD13
  ADD          R0, 165, R5
  CMPNE.Q      RD13, R5, RQ22
  OR           RQ9, RQ22, RQ21
  BREQ.L       R0, RQ21, .L00800992
// tk_core/tk_mmpage.c:829   
  BSR          TKMM_Init, R1
  MOV.Q        TKMM_PageAlloc_f, RQ13
  BRNE.Q       R0, RQ13, .L00800993
// tk_core/tk_mmpage.c:832   

TKMM_Malloc.debugbreak_L04C7:
  BRK          1223

.L00800993:

.L00800992:
// tk_core/tk_mmpage.c:846   
  LDIZ         0x0000FF00, RD13
  BRGE.L       RD13, RD8, .L00800994
// tk_core/tk_mmpage.c:847   
  ADDS.L       RD8, 0, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ18
  BRNE.Q       R0, RQ18, .L00800995
// tk_core/tk_mmpage.c:851   
  MOV          .L00C027A7, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          tk_printf, R1

.L00800995:
// tk_core/tk_mmpage.c:853   
  ADD          RQ18, 0, RQ10
  BSR          .L00C027A5, R0

.L00800994:
// tk_core/tk_mmpage.c:884   
  ADDS.L       RD8, 24, RQ9
  ADDS.L       RQ9, 15, RQ22
  ADD          RQ22, 0, RD10
  BSR          TKMM_MMList_AllocBrk, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:885   
  ADDS.L       RD8, 24, RQ21
  ADDS.L       RQ21, 16383, RQ9
  SHAR         RQ9, 14, RD20
// tk_core/tk_mmpage.c:889   
  BRNE.Q       R0, RQ18, .L00800996
// tk_core/tk_mmpage.c:890   
  MOV          .L00C027A8, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          tk_printf, R1
// tk_core/tk_mmpage.c:892   
  ADD          RQ0, 0, RQ10
  BSR          .L00C027A5, R0

.L00800996:
// tk_core/tk_mmpage.c:896   
  ADD          RQ18, 0, RQ23
// tk_core/tk_mmpage.c:898   
  BRNE.Q       R0, RQ23, .L00800997
// tk_core/tk_mmpage.c:899   

TKMM_Malloc.debugbreak_L04C8:
  BRK          1224

.L00800997:
// tk_core/tk_mmpage.c:903   
  MOVU.B       RD20, (RQ23, 6)
// tk_core/tk_mmpage.c:904   
  ADD          R0, 5, RD13
  MOVU.B       RD13, (RQ23, 4)
// tk_core/tk_mmpage.c:905   
  MOVU.B       RD0, (RQ23, 7)
// tk_core/tk_mmpage.c:909   
  LDIZ         16383, RQ12
  BTST.Q       RQ12, RQ18, .L00800998
// tk_core/tk_mmpage.c:910   

TKMM_Malloc.debugbreak_L04C9:
  BRK          1225

.L00800998:
// tk_core/tk_mmpage.c:918   
  ADD          RQ23, 16, RQ13
  ADD          RQ13, 0, RQ10

.L00C027A5:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_MMList_Init:
// tk_core/tk_mmllist.c:796   
  ADDS.L       RD0, 0, RD13

.L00800A51:
// tk_core/tk_mmllist.c:797   
  ADDS.L       RD0, 0, RD12

.L00800A52:
// tk_core/tk_mmllist.c:801   
  SHAD.L       RD13, 8, RQ11
  ADDS.L       RQ11, RD12, RQ10
  MOV          tkmm_mmlist_freelist_cat, RQ17
  MOV.Q        RQ0, (RQ17, RQ10)
  ADDS.L       RD12, 1, RD12
  BRLT.L       256, RD12, .L00800A52

.L00800A53:
  ADDS.L       RD13, 1, RD13
  BRLT.L       8, RD13, .L00800A51

.L00800A54:
// tk_core/tk_mmllist.c:802   
  ADD          R0, 0, RD10

.L00C027AB:
  JSR          R1, 0, R0

R_DrawVisSprite:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 132)
  MOV.L        RD12, (R2, 128)
// r_things.c:552   patch = W_CachePatchNum (vis->patch+firstspritelump, PU_CACHE);
  MOV.L        (RQ8, 60), RQ18
  MOV.L        firstspritelump, RD27
  ADDS.L       RQ18, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ21
// r_things.c:554   dc_colormap = vis->colormap;
  MOV.Q        (RQ8, 64), RQ27
// r_things.c:556   if(dc_colormap)
  MOV.Q        RQ27, dc_colormap
  BREQ.Q       R0, RQ27, .L008027DA
// r_things.c:557   {
  MOV.Q        dc_colormap, RQ27
  MOV.Q        colormaps, RQ26
  SUB          RQ27, RQ26, RQ13
  SHAR.Q       RQ13, 1, RQ13
  SHAR.Q       RQ13, 8, RQ27
  ADDS.L       RQ27, 0, RD26
  MOV.Q        RQ27, (R2, 80)
// r_things.c:559   l = cmap_luma[k];
  MOV          cmap_luma, RQ12
  MOVU.B       (RQ12, RD26), RD11
  MOV.L        RD26, (R2, 116)
// r_things.c:560   l = l << 8;
  SHAD.L       RD11, 8, RD11
  MOV.L        RD11, (R2, 112)
  BRGE.L       R0, RD11, .L008027DB
// r_things.c:562   if(l < 0x0000) l = 0x0000;
  MOV.L        RD0, (R2, 112)

.L008027DB:
  MOV.L        (R2, 112), RD27
  LDIZ         0x0000FFFF, RD26
  BRLE.L       RD26, RD27, .L008027DC
// r_things.c:563   if(l > 0xFFFF) l = 0xFFFF;
  LDIZ         0x0000FFFF, RD27
  MOV.L        RD27, (R2, 112)

.L008027DC:
// r_things.c:564   dc_color = (((u64)l)<<0) | (((u64)l)<<16) |
  MOV.L        (R2, 112), RD27
  ADDS.L       RD27, 0, RQ26
  ADDS.L       RD27, 0, RQ13
  SHLD.Q       RQ13, 16, RQ12
  OR           RQ26, RQ12, RQ13
  ADDS.L       RD27, 0, RQ12
  SHLD.Q       RQ12, 32, RQ26
  OR           RQ13, RQ26, RQ12
  MOV.Q        RQ13, (R2, 80)
  ADD          R0, 0xFFFFFFFFFFFF0000, RQ11
  LDSH32       RQ11, 0, RQ11
  OR           RQ12, RQ11, RQ10
  MOV.Q        RQ10, dc_color
  MOV.L        (R2, 116), RD10
  BRNE.Q       32, RD10, .L008027DD
// r_things.c:567   {
  ADD          R0, -21846, RQ26
  LDSH32       RQ26, 0x55551111, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, dc_color

.L008027DD:
  BSR          .L008027DE, R0

.L008027DA:
// r_things.c:571   {
  ADD          R0, 0x3FFFAAAA, RQ26
  LDSH32       RQ26, 0x55551111, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, dc_color

.L008027DE:
// r_things.c:575   if (!dc_colormap)
  MOV.Q        dc_colormap, RQ27
  BRNE.Q       R0, RQ27, .L008027DF
// r_things.c:578   colfunc = fuzzcolfunc;
  MOV.Q        fuzzcolfunc, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, colfunc
  BSR          .L008027E0, R0

.L008027DF:
  MOV.L        (RQ8, 72), RQ18
  LUI          0x0000C000, RD27
  BTST.L       RD27, RQ18, .L008027E1
// r_things.c:581   {
  MOV          R_DrawTranslatedColumn, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, colfunc
// r_things.c:583   dc_translation = translationtables - 256 +
  MOV.Q        translationtables, RQ27
  ADD          RQ27, -256, RQ23
  MOV.L        (RQ8, 72), RQ18
  AND          RQ18, 0x0C000000, RQ9
  SHAR         RQ9, 18, RQ18
  ADD          RQ23, RQ18, RQ27
  MOV.Q        RQ27, dc_translation

.L008027E1:

.L008027E0:
// r_things.c:587   dc_colormap = R_ColormapRemapForBlend(dc_colormap);
  MOV.Q        dc_colormap, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap
// r_things.c:589   dc_iscale = abs(vis->xiscale)>>detailshift;
  MOV.L        (RQ8, 52), RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        detailshift, RD26
  SHAR         RQ18, RD26, RD27
  MOV.L        RD27, dc_iscale
// r_things.c:590   dc_texturemid = vis->texturemid;
  MOV.L        (RQ8, 56), RD27
  MOV.L        RD27, dc_texturemid
// r_things.c:591   frac = vis->startfrac;
  MOV.L        (RQ8, 44), RD20
// r_things.c:592   spryscale = vis->scale;
  MOV.L        (RQ8, 48), RD27
// r_things.c:593   dc_scale = spryscale;
  MOV.L        RD27, dc_scale
  MOV.L        RD27, spryscale
// r_things.c:594   dc_zdist = vis->tz;
  MOV.L        (RQ8, 24), RD27
  MOV.L        RD27, dc_zdist
// r_things.c:595   sprtopscreen = centeryfrac - FixedMul(dc_texturemid,spryscale);
  MOV.L        dc_texturemid, RD10
  MOV.L        spryscale, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        centeryfrac, RD26
  SUBS.L       RD26, RQ9, RD27
  MOV.L        RD27, sprtopscreen
// r_things.c:596   dc_isspr = 1;
  ADD          R0, 1, RD27
  MOV.B        RD27, dc_isspr
// r_things.c:598   for (dc_x=vis->x1 ; dc_x<=vis->x2 ; dc_x++, frac += vis->xiscale)
  MOV.L        (RQ8, 16), RD27
  MOV.L        (RQ8, 20), RQ18
  MOV.L        RD27, dc_x
  BRGT.L       RQ18, RD27, .L008027E4

.L008027E2:
// r_things.c:599   {
  SHAR         RD20, 16, RD22
// r_things.c:602   if(texturecolumn >= (patch->width))
  MOV.W        (RQ21, 0), RQ9
  BRGE.L       RQ9, RD22, .L008027E4
// r_things.c:604   if (texturecolumn < 0)
  BRLT.L       R0, RD22, .L008027E4
// r_things.c:612   column = (column_t *) ((byte *)patch +
  ADD          RQ21, 8, RQ23
  MOV.L        (RQ23, RD22), RQ18
  ADD          RQ21, RQ18, RQ23
  MOV.Q        RQ23, (R2, 120)
// r_things.c:615   R_DrawMaskedColumn (column);
  MOV.Q        (R2, 120), RQ10
  BSR          R_DrawMaskedColumn, R1
  MOV.L        dc_x, RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  MOV.L        (RQ8, 52), RQ9
  ADDS.L       RD20, RQ9, RQ18
  ADD          RQ18, 0, RD20
  MOV.L        (RQ8, 20), RQ9
  MOV.L        RD27, dc_x
  BRLE.L       RQ9, RD27, .L008027E2

.L008027E4:
// r_things.c:618   colfunc = basecolfunc;
  MOV.Q        basecolfunc, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, colfunc

.L00C027B1:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

W_CacheFlatName:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 84)
// r_data.c:1626   lump=W_GetNumForName (name);
  ADD          RQ23, 0, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RD18
// r_data.c:1627   return(W_CacheFlatNum(lump-firstflat, tag));
  MOV.L        firstflat, RD22
  SUBS.L       RD18, RD22, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        (R2, 84), RD11
  BSR          W_CacheFlatNum, R1

.L00C027B7:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

dlclose:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 7, RD8
// pdpc201/bt_dlfcn.c:24   
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 7, RD12
  BSR          TK_DlSymA, R1

.L00C027BD:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

A_SkelWhoosh:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 56, RD8
// p_enemy.c:1127   {
  MOV.Q        (RQ18, 176), RQ9
  BREQ.Q       R0, RQ9, .L00C027C3
// p_enemy.c:1130   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1131   S_StartSound (actor,sfx_skeswg);
  ADD          RQ18, 0, RQ10
  ADD          R0, 56, RD11
  BSR          S_StartSound, R1

.L00C027C3:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

G_ReadDemoTiccmd:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// g_game.c:1513   {
  MOV.Q        demo_p, RQ13
  MOVU.B       (RQ13, 0), RQ18
  BRNE.Q       128, RQ18, .L00801613
// g_game.c:1517   G_CheckDemoStatus ();
  BSR          G_CheckDemoStatus, R1
// g_game.c:1518   return;
  BSR          .L00C027C9, R0

.L00801613:
// g_game.c:1519   }
  MOV.Q        demo_p, RQ13
  MOVU.B       (RQ13, 0), RQ18
  ADD          RQ13, 1, RQ13
  SHAD.Q       RQ18, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  MOV.B        RQ9, (RQ8, 0)
// g_game.c:1521   cmd->sidemove = ((signed char)(*demo_p++));
  MOVU.B       (RQ13, 0), RQ18
  ADD          RQ13, 1, RQ13
  SHAD.Q       RQ18, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  MOV.B        RQ9, (RQ8, 1)
// g_game.c:1522   cmd->angleturn = (((int)((unsigned char)(*demo_p++)))<<8);
  MOVU.B       (RQ13, 0), RQ18
  ADD          RQ13, 1, RQ13
  AND          RQ18, 255, RQ9
  SHAD.L       RQ9, 8, RQ18
  MOV.W        RQ18, (RQ8, 2)
// g_game.c:1523   cmd->buttons = (unsigned char)(*demo_p++);
  MOVU.B       (RQ13, 0), RQ9
  ADD          RQ13, 1, RQ13
  MOV.Q        RQ13, demo_p
  AND          RQ9, 255, RQ18
  MOVU.B       RQ18, (RQ8, 7)

.L00C027C9:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

TkClSetInterface:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ11, (R2, 96)
  ADD          RQ12, 0, RQ8
  MOV.Q        RQ13, (R2, 80)
// pdpc201/btshx_supa.c:844   
  MOV.Q        tk_clib_iface_list, RQ18
// pdpc201/btshx_supa.c:845   
  BSR          .L00800FC9, R0

.L00800FCA:
// pdpc201/btshx_supa.c:846   
  MOV.Q        (RQ18, 8), RQ9
  BRNE.Q       RQ22, RQ9, .L00800FCB
  MOV.Q        (RQ18, 16), RQ9
  MOV.Q        (R2, 96), RQ21
  BRNE.Q       RQ21, RQ9, .L00800FCB

.L00800FCC:
  BREQ.Q       R0, RQ8, .L00800FCD
// pdpc201/btshx_supa.c:850   
  MOV.Q        RQ8, (RQ18, 24)

.L00800FCD:
// pdpc201/btshx_supa.c:851   
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ10
  BSR          .L00C027CF, R0

.L00800FCB:
// pdpc201/btshx_supa.c:852   
  MOV.Q        (RQ18, 0), RQ18

.L00800FC9:
  BRNE.Q       R0, RQ18, .L00800FCA

.L00800FCE:
// pdpc201/btshx_supa.c:856   
  ADD          R0, 32, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ18
// pdpc201/btshx_supa.c:857   
  MOV.Q        RQ22, (RQ18, 8)
// pdpc201/btshx_supa.c:858   
  MOV.Q        (R2, 96), RQ21
  MOV.Q        RQ21, (RQ18, 16)
// pdpc201/btshx_supa.c:859   
  MOV.Q        RQ8, (RQ18, 24)
// pdpc201/btshx_supa.c:861   
  MOV.Q        tk_clib_iface_list, RQ20
  MOV.Q        RQ20, (RQ18, 0)
// pdpc201/btshx_supa.c:862   
  ADD          RQ18, 0, RQ20
  MOV.Q        RQ20, tk_clib_iface_list

.L00C027CF:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_SizeToFxiU:
// tk_core/tk_mmllist.c:506   
  ADDS.L       RD10, 0, RD13
// tk_core/tk_mmllist.c:507   
  ADDS.L       RD0, 0, RD12
// tk_core/tk_mmllist.c:509   
  BSR          .L00800A2F, R0

.L00800A30:
// tk_core/tk_mmllist.c:510   
  ADDS.L       RD13, 1, RQ11
  SHAR         RQ11, 1, RD13
  ADDS.L       RD12, 1, RD12

.L00800A2F:
  BRGE.L       16, RD13, .L00800A30

.L00800A31:
  AND          RD13, 7, RQ11
  SHAD.L       RD12, 3, RQ17
  OR           RQ11, RQ17, RD16
// tk_core/tk_mmllist.c:513   
  ADD          R0, -256, RD15
  BTST.L       RD15, RD16, .L00800A32
// tk_core/tk_mmllist.c:514   

TKMM_SizeToFxiU.debugbreak_L04CF:
  BRK          1231

.L00800A32:
// tk_core/tk_mmllist.c:516   
  ADD          RD16, 0, RD10

.L00C027D0:
  JSR          R1, 0, R0

P_AcsRun_SectorSound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C027DD, RQ18
// p_acspec.c:820   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C027DC:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

A_KeenDie:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -472, R2
  ADD          RQ10, 0, RQ21
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 112)
// p_enemy.c:590   line_t	junk;
// p_enemy.c:592   A_Fall (mo);
  ADD          RQ21, 0, RQ10
  BSR          A_Fall, R1
// p_enemy.c:596   for (th = thinkercap.next ; th != &thinkercap ; th=th->next)
  MOV          thinkercap, RQ20
  MOV.Q        (RQ20, 8), RQ18
  ADD          RQ20, 0, RQ9
  BREQ.Q       RQ9, RQ18, .L00801B12

.L00801B10:
// p_enemy.c:597   {
  ADD          RQ18, 16, RQ20
  MOV.Q        (RQ20, 0), RQ9
  MOV          P_MobjThinker, RQ22
  BRNE.Q       RQ22, RQ9, .L00801B11
// p_enemy.c:601   mo2 = (mobj_t *)th;
  ADD          RQ18, 0, RQ8
// p_enemy.c:602   if (mo2 != mo
  BREQ.Q       RQ21, RQ8, .L00801B13
  MOV.L        (RQ8, 128), RQ23
  MOV.L        (RQ21, 128), RQ20
  BRNE.Q       RQ20, RQ23, .L00801B13

.L00801B14:
  MOV.L        (RQ8, 164), RQ23
  BRLE.L       R0, RQ23, .L00801B13
  BSR          .L00C027E3, R0

.L00801B13:

.L00801B11:
  MOV.Q        (RQ18, 8), RQ18
  MOV          thinkercap, RQ9
  BRNE.Q       RQ9, RQ18, .L00801B10

.L00801B12:
// p_enemy.c:611   junk.tag = 666;
  ADD          R0, 666, RD20
  ADD          R2, 128, RQ27
  MOV.W        RD20, (RQ27, 28)
// p_enemy.c:612   EV_DoDoor(&junk, vld_open);
  ADD          RQ27, 0, RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1

.L00C027E3:
  ADD          R2, 472, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

D_PostEvent:
  ADD          R2, -32, R2
  MOV.Q        R23, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -288, R2
  MOV.Q        RQ10, (R2, 24)
// d_main.c:150   {
  MOV.Q        (R2, 24), RQ18
  ADD          RQ18, 0, RQ9
  MOV          events, RQ8
  MOV.L        eventhead, RD23
  SHAD.L       RD23, 4, RQ10
  ADD          RQ8, RQ10, RQ10
  MOV.Q        (RQ9, 0), RQ11
  MOV.Q        (RQ9, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
// d_main.c:152   eventhead = (++eventhead)&(MAXEVENTS-1);
  ADDS.L       RD23, 1, RD23
  AND          RD23, 63, RD23
  MOV.L        RD23, eventhead

.L00C027E9:
  ADD          R2, 288, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 32, R2
  JSR          R1, 0, R0

M_EndGameResponse:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
  ADD          R0, 121, RD9
// m_menu.c:1040   {
  BRNE.Q       RD9, RD18, .L00C027EF
// m_menu.c:1044   currentMenu->lastOn = itemOn;
  MOV.W        itemOn, RD8
  MOV.Q        currentMenu, RQ23
  MOV.W        RD8, (RQ23, 36)
// m_menu.c:1045   M_ClearMenus ();
  BSR          M_ClearMenus, R1
// m_menu.c:1046   D_StartTitle ();
  BSR          D_StartTitle, R1

.L00C027EF:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_initColorXForm:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD23
  ADD          RD11, 0, RD22
  MOV.L        RD12, (R2, 100)
  ADD          R0, 2, RD21
// f_wipe.c:78   {
  MULS.L       RD23, RD22, RQ18
  SHAD.L       RQ18, 1, RQ9
  ADDS.L       RQ9, 0, RQ8
  MOV.Q        TU7A00C589/wipe_scr, RQ10
  MOV.Q        TU7A00C589/wipe_scr_start, RQ11
  ADD          RQ8, 0, RQ12
  BSR          memcpy, R1
// f_wipe.c:80   return 0;
  ADD          R0, 0, RD10

.L00C027F5:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_updateWidgets:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          R0, 3, RD22
// st_stuff.c:964   if (weaponinfo[plyr->readyweapon].ammo == am_noammo)
  MOV.Q        TU7A00CB73/plyr, RQ13
  MOV.L        (RQ13, 116), RQ23
  MOV          weaponinfo, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 0), RQ23
  BRNE.Q       5, RQ23, .L00802BF0
// st_stuff.c:965   w_ready.num = &largeammo;
  MOV          ST_updateWidgets/largeammo!57, RQ8
  MOV          TU7A00CB73/w_ready, RQ13
  MOV.Q        RQ8, (RQ13, 16)
  BSR          .L00802BF1, R0

.L00802BF0:
// st_stuff.c:967   w_ready.num = &plyr->ammo[weaponinfo[plyr->readyweapon].ammo];
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 160, RQ8
  MOV.L        (RQ13, 116), RQ23
  MOV          weaponinfo, RQ13
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.L        (RQ12, 0), RQ23
  LEA.L        RQ8, RQ23, RQ13
  MOV          TU7A00CB73/w_ready, RQ11
  MOV.Q        RQ13, (RQ11, 16)

.L00802BF1:
// st_stuff.c:977   w_ready.data = plyr->readyweapon;
  MOV.Q        TU7A00CB73/plyr, RQ13
  MOV.L        (RQ13, 116), RQ23
  MOV          TU7A00CB73/w_ready, RQ13
  MOV.L        RQ23, (RQ13, 40)
// st_stuff.c:985   for (i=0;i<3;i++)
  ADD          R0, 0, RD18

.L00802BF2:
// st_stuff.c:986   {
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 72, RQ8
  MOV.L        (RQ8, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802BF5
  ADD          RD18, 0, RQ23
  BSR          .L00802BF6, R0

.L00802BF5:
  ADD          R0, -1, RQ23

.L00802BF6:
  MOV          TU7A00CB73/keyboxes, RQ13
  MOV.L        RQ23, (RQ13, RD18)
// st_stuff.c:989   if (plyr->cards[i+3])
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 72, RQ8
  SHAD.Q       RD18, 2, R5
  ADD          RQ8, R5, R5
  MOV.L        (R5, 12), RQ23
  BREQ.L       R0, RQ23, .L00802BF7
// st_stuff.c:990   keyboxes[i] = i+3;
  ADDS.L       RD18, 3, RQ9
  MOV          TU7A00CB73/keyboxes, RQ13
  MOV.L        RQ9, (RQ13, RD18)

.L00802BF7:
  ADDS.L       RD18, 1, RD18
  BRLT.L       3, RD18, .L00802BF2

.L00802BF4:
// st_stuff.c:994   ST_updateFaceWidget();
  BSR          ST_updateFaceWidget, R1
// st_stuff.c:997   st_notdeathmatch = !deathmatch;
  MOV.L        deathmatch, RD13
  CMPEQ.Q      RD13, R0, RD12
  MOV.L        RD12, TU7A00CB73/st_notdeathmatch
// st_stuff.c:1000   st_armson = st_statusbaron && !deathmatch; 
  MOV.L        TU7A00CB73/st_statusbaron, RD13
  BREQ.L       R0, RD13, .L00802BF8
  MOV.L        deathmatch, RD13
  BRNE.L       R0, RD13, .L00802BF8
  ADD          R0, 1, RQ23
  BSR          .L00802BF9, R0

.L00802BF8:
  ADD          R0, 0, RQ23

.L00802BF9:
  MOV.L        RQ23, TU7A00CB73/st_armson
// st_stuff.c:1003   st_fragson = deathmatch && st_statusbaron; 
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00802BFC
  MOV.L        TU7A00CB73/st_statusbaron, RD13
  BREQ.L       R0, RD13, .L00802BFC
  ADD          R0, 1, RQ9
  BSR          .L00802BFD, R0

.L00802BFC:
  ADD          R0, 0, RQ9

.L00802BFD:
  MOV.L        RQ9, TU7A00CB73/st_fragson
// st_stuff.c:1004   st_fragscount = 0;
  MOV.L        RD0, TU7A00CB73/st_fragscount
// st_stuff.c:1006   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802C00:
// st_stuff.c:1007   {
  MOV.L        consoleplayer, RD13
  BREQ.Q       RD13, RD18, .L00802C03
// st_stuff.c:1009   st_fragscount += plyr->frags[i];
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 100, RQ8
  MOV.L        (RQ8, RD18), RQ9
  MOV.L        TU7A00CB73/st_fragscount, RD13
  ADDS.L       RD13, RQ9, RD13
  MOV.L        RD13, TU7A00CB73/st_fragscount
  BSR          .L00802C04, R0

.L00802C03:
// st_stuff.c:1011   st_fragscount -= plyr->frags[i];
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 100, RQ8
  MOV.L        (RQ8, RD18), RQ9
  MOV.L        TU7A00CB73/st_fragscount, RD13
  SUBS.L       RD13, RQ9, RD13
  MOV.L        RD13, TU7A00CB73/st_fragscount

.L00802C04:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802C00

.L00802C02:
// st_stuff.c:1015   if (!--st_msgcounter)
  MOV.L        TU7A00CB73/st_msgcounter, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, TU7A00CB73/st_msgcounter
  BRNE.L       R0, RD13, .L00802C05
// st_stuff.c:1016   st_chat = st_oldchat;
  MOV.L        TU7A00CB73/st_oldchat, RD13
  ADDS.L       RD13, 0, RD12
  MOV.L        RD12, TU7A00CB73/st_chat

.L00802C05:

.L00C027FB:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

R_ClearPlanes:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -312, R2
// r_plane.c:218   for (i=0 ; i<viewwidth ; i++)
  ADD          RD0, 0, RD18
  MOV.L        viewwidth, RD21
  BRGE.L       RD21, RD18, .L008026B5

.L008026B3:
// r_plane.c:219   {
  MOV          floorclip, RQ21
  MOV.L        viewheight, RD20
  MOV.W        RD20, (RQ21, RD18)
// r_plane.c:221   ceilingclip[i] = -1;
  MOV          ceilingclip, RQ21
  ADD          R0, -1, RD20
  MOV.W        RD20, (RQ21, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.L        viewwidth, RD21
  BRLT.L       RD21, RD18, .L008026B3

.L008026B5:
// r_plane.c:224   lastvisplane = visplanes;
  MOV          visplanes, RQ21
  ADD          RQ21, 0, RQ20
  MOV.Q        RQ20, lastvisplane
// r_plane.c:225   lastopening = openings;
  MOV          openings, RQ21
  ADD          RQ21, 0, RQ20
  MOV.Q        RQ20, lastopening
// r_plane.c:228   memset (cachedheight, 0, sizeof(cachedheight));
  MOV          cachedheight, RQ21
  ADD          RQ21, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 800, RQ12
  BSR          memset, R1
// r_plane.c:231   angle = (viewangle-ANG90)>>ANGLETOFINESHIFT;
  MOVU.L       viewangle, RD21
  LUI          0xFFFFFFFFFFFC0000, R5
  ADDU.L       R5, RD21, RQ9
  SHLR         RQ9, 19, RD8
// r_plane.c:235   angle &= (FINEANGLES-1);		//BGB: debug
  AND          RD8, 8191, RD8
// r_plane.c:240   basexscale = FixedDivSoft (finecosine[angle],centerxfrac);
  MOV.Q        finecosine, RQ21
  MOV.L        (RQ21, RD8), RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        centerxfrac, RD11
  BSR          FixedDivSoft, R1
  MOV.L        RQ10, basexscale
// r_plane.c:241   baseyscale = -FixedDivSoft (finesine[angle],centerxfrac);
  MOV          finesine, RQ21
  MOV.L        (RQ21, RD8), RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        centerxfrac, RD11
  BSR          FixedDivSoft, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RD0, RQ23, RD21
  MOV.L        RD21, baseyscale

.L00C02801:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_ActivateInStasisCeiling:
// p_ceilng.c:296   for (i = 0;i < MAXCEILINGS;i++)
  ADDS.L       RD0, 0, RD13

.L00801A36:
// p_ceilng.c:297   {
  MOV          activeceilings, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  BREQ.Q       R0, RQ11, .L00801A39
  MOV          activeceilings, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 60), RQ17
  MOV.W        (RQ10, 28), RQ16
  BRNE.Q       RQ16, RQ17, .L00801A39

.L00801A3B:
  MOV          activeceilings, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 56), RQ17
  BRNE.L       R0, RQ17, .L00801A39

.L00801A3A:
// p_ceilng.c:301   {
  MOV          activeceilings, RQ12
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        (RQ11, 64), RQ17
  MOV.Q        (RQ12, RD13), RQ11
  MOV.L        RQ17, (RQ11, 56)
// p_ceilng.c:303   activeceilings[i]->thinker.function.acp1
  MOV          T_MoveCeiling, RQ15
  ADD          RQ15, 0, RQ11
  MOV.Q        (RQ12, RD13), RQ14
  ADD          RQ14, 0, RQ31
  ADD          RQ31, 16, RQ30
  MOV.Q        RQ11, (RQ30, 0)

.L00801A39:
  ADDS.L       RD13, 1, RD13
  BRLT.L       30, RD13, .L00801A36

.L00801A38:

.L00C02802:
  JSR          R1, 0, R0
  .balign 4

R_ClearClipSegs:
// r_bsp.c:272   {
  MOV          solidsegs, RQ13
  ADD          RQ13, 0, RQ12
  ADD          R0, 0xFFFFFFFF80000001, RD11
  MOV.L        RD11, (RQ12, 0)
// r_bsp.c:274   solidsegs[0].last = -1;
  ADD          R0, -1, RD10
  MOV.L        RD10, (RQ12, 4)
// r_bsp.c:275   solidsegs[1].first = viewwidth;
  ADD          RQ13, 8, RQ12
  MOV.L        viewwidth, RD17
  MOV.L        RD17, (RQ12, 0)
// r_bsp.c:276   solidsegs[1].last = 0x7fffffff;
  ADD          R0, 0x7FFFFFFF, RD16
  MOV.L        RD16, (RQ12, 4)
// r_bsp.c:277   newend = solidsegs+2;
  ADD          RQ13, 16, RQ15
  MOV.Q        RQ15, newend

.L00C02803:
  JSR          R1, 0, R0

__sock_adjustaddrlenproto:
// pdpc201/btshx_supa.c:503   
  BREQ.Q       R0, RQ10, .L00C02804
// pdpc201/btshx_supa.c:506   
  BREQ.Q       R0, RQ11, .L00C02804

.L00C02804:
  JSR          R1, 0, R0

AM_findMinMaxBoundaries:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -304, R2
// am_map.c:397   min_x = min_y =  MAXINT;
  ADD          R0, 0x7FFFFFFF, RD22
  MOV.L        RD22, TU7A00C41B/min_y
  MOV.L        RD22, TU7A00C41B/min_x
// am_map.c:398   max_x = max_y = -MAXINT;
  ADD          R0, 0xFFFFFFFF80000001, RD21
  MOV.L        RD21, TU7A00C41B/max_y
  MOV.L        RD21, TU7A00C41B/max_x
// am_map.c:400   for (i=0;i<numvertexes;i++)
  ADD          R0, 0, RD18
  MOV.L        numvertexes, RD20
  BRGE.L       RD20, RD18, .L0080178F

.L0080178D:
// am_map.c:401   {
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 0), RQ9
  MOV.L        TU7A00C41B/min_x, RD22
  BRGE.L       RD22, RQ9, .L00801790
// am_map.c:403   min_x = vertexes[i].x;
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 0), RD22
  MOV.L        RD22, TU7A00C41B/min_x
  BSR          .L00801791, R0

.L00801790:
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 0), RQ9
  MOV.L        TU7A00C41B/max_x, RD22
  BRLE.L       RD22, RQ9, .L00801792
// am_map.c:405   max_x = vertexes[i].x;
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 0), RD22
  MOV.L        RD22, TU7A00C41B/max_x

.L00801792:

.L00801791:
// am_map.c:407   if (vertexes[i].y < min_y)
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 4), RQ9
  MOV.L        TU7A00C41B/min_y, RD22
  BRGE.L       RD22, RQ9, .L00801793
// am_map.c:408   min_y = vertexes[i].y;
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 4), RD22
  MOV.L        RD22, TU7A00C41B/min_y
  BSR          .L00801794, R0

.L00801793:
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 4), RQ9
  MOV.L        TU7A00C41B/max_y, RD22
  BRLE.L       RD22, RQ9, .L00801795
// am_map.c:410   max_y = vertexes[i].y;
  MOV.Q        vertexes, RQ22
  LEA.Q        RQ22, RD18, RQ21
  MOV.L        (RQ21, 4), RD22
  MOV.L        RD22, TU7A00C41B/max_y

.L00801795:

.L00801794:
  ADDS.L       RD18, 1, RD18
  MOV.L        numvertexes, RD22
  BRLT.L       RD22, RD18, .L0080178D

.L0080178F:
// am_map.c:413   max_w = max_x - min_x;
  MOV.L        TU7A00C41B/max_x, RD21
  MOV.L        TU7A00C41B/min_x, RD20
  SUBS.L       RD21, RD20, RD22
  MOV.L        RD22, TU7A00C41B/max_w
// am_map.c:414   max_h = max_y - min_y;
  MOV.L        TU7A00C41B/max_y, RD21
  MOV.L        TU7A00C41B/min_y, RD20
  SUBS.L       RD21, RD20, RD22
  MOV.L        RD22, TU7A00C41B/max_h
// am_map.c:416   min_w = 2*PLAYERRADIUS; // const? never changed?
  LUI          512, RD22
  MOV.L        RD22, TU7A00C41B/min_w
// am_map.c:417   min_h = 2*PLAYERRADIUS;
  MOV.L        RD22, TU7A00C41B/min_h
// am_map.c:419   a = FixedDiv(f_w<<FRACBITS, max_w);
  MOV.L        TU7A00C41B/f_w, RD21
  SHAD.L       RD21, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/max_w, RD11
  BSR          FixedDiv, R1
  ADDS.L       RQ10, 0, RD8
// am_map.c:420   b = FixedDiv(f_h<<FRACBITS, max_h);
  MOV.L        TU7A00C41B/f_h, RD21
  SHAD.L       RD21, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  MOV.L        TU7A00C41B/max_h, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD23
// am_map.c:422   min_scale_mtof = a < b ? a : b;
  BRGE.L       RD23, RD8, .L00801796
  ADDS.L       RD8, 0, RQ9
  BSR          .L00801797, R0

.L00801796:
  ADD          RD23, 0, RQ9

.L00801797:
  MOV.L        RQ9, TU7A00C41B/min_scale_mtof
// am_map.c:423   max_scale_mtof = FixedDiv(f_h<<FRACBITS, 2*PLAYERRADIUS);
  MOV.L        TU7A00C41B/f_h, RD22
  SHAD.L       RD22, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  LUI          512, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/max_scale_mtof

.L00C0280A:
  ADD          R2, 304, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

W_RawCopy:
// w_wad.c:714   if(sz>8)
  BRLE.L       8, RD12, .L008028DF
// w_wad.c:715   {
  ADD          RQ11, 0, RQ13
// w_wad.c:717   ct=dst; cte=dst+sz;
  ADD          RQ10, 0, RQ17
  ADD          RQ10, RD12, RQ16
// w_wad.c:718   while(ct<cte)
  BSR          .L008028E2, R0

.L008028E0:
// w_wad.c:719   {
  MOV.Q        (RQ13, 0), RQ15
  MOV.Q        RQ15, (RQ17, 0)
// w_wad.c:721   ((u64 *)ct)[1]=((u64 *)cs)[1];
  MOV.Q        (RQ13, 8), RQ15
  MOV.Q        RQ15, (RQ17, 8)
// w_wad.c:722   ct+=16; cs+=16;
  ADD          RQ17, 16, RQ17
  ADD          RQ13, 16, RQ13

.L008028E2:
  BRLT.Q       RQ16, RQ17, .L008028E0

.L008028E1:
  BSR          .L008028E3, R0

.L008028DF:
// w_wad.c:725   {
  MOV.Q        (RQ11, 0), RQ15
  MOV.Q        RQ15, (RQ10, 0)

.L008028E3:

.L00C0280B:
  JSR          R1, 0, R0

S_SetSfxVolume:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// s_sound.c:637   {
  CMPLT.Q      RD18, R0, RQ9
  ADD          R0, 127, R5
  CMPGT.Q      RD18, R5, RQ8
  OR           RQ9, RQ8, RQ23
  BREQ.L       R0, RQ23, .L00802D6A
// s_sound.c:639   I_Error("Attempt to set sfx volume at %d", volume);
  MOV          .L00C02812, RQ10
  ADD          RD18, 0, RD11
  BSR          I_Error, R1

.L00802D6A:
// s_sound.c:640   snd_SfxVolume = volume;
  MOV.L        RD18, snd_SfxVolume

.L00C02811:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

A_FirePlasma:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 112)
// p_pspr.c:583   {
  ADD          RQ8, 160, RQ22
  MOV.L        (RQ8, 116), RQ18
  MOV          weaponinfo, RQ21
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 0), RQ18
  MOV.L        (RQ22, RQ18), RQ9
  ADDS.L       RQ9, -1, RQ18
  MOV.L        (RQ8, 116), RQ9
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 0), RQ9
  MOV.L        RQ18, (RQ22, RQ9)
// p_pspr.c:586   P_SetPsprite (player,
  MOV.L        (RQ8, 116), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        (RQ20, 20), RQ9
  MOV.Q        RQ22, (R2, 104)
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 1, RQ23
  ADDS.L       RQ9, RQ23, RQ18
  ADD          RQ8, 0, RQ10
  ADD          R0, 1, RD11
  ADD          RQ18, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:590   P_SpawnPlayerMissile (player->mo, MT_PLASMA);
  MOV.Q        (RQ8, 0), RQ22
  MOV.Q        RQ22, (R2, 104)
  ADD          RQ22, 0, RQ10
  ADD          R0, 34, RD11
  BSR          P_SpawnPlayerMissile, R1

.L00C02818:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

TKGDI_CopyBitmapInfo:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          RQ11, 0, RQ18
// tk_gdi/tkg_display.c:88   
  CMPEQ.Q      RQ18, R0, RQ9
  MOV.Q        (R2, 120), RQ27
  CMPEQ.Q      RQ27, R0, RQ8
  OR           RQ9, RQ8, RQ23
  BRNE.L       R0, RQ23, .L00C00C6F
// tk_gdi/tkg_display.c:91   
  MOVU.L       (RQ18, 0), RQ9
  ADDS.L       RQ9, 0, RD22
// tk_gdi/tkg_display.c:92   
  BRGE.L       40, RD22, .L0080010D
// tk_gdi/tkg_display.c:93   
  MOV          .L00C0281F, RQ10
  ADD          RD22, 0, RD11
  BSR          tk_printf, R1
// tk_gdi/tkg_display.c:96   
  ADD          R0, 40, RD22

.L0080010D:
// tk_gdi/tkg_display.c:99   
  BRLE.L       512, RD22, .L0080010E
// tk_gdi/tkg_display.c:100   
  MOV          .L00C02820, RQ10
  ADD          RD22, 0, RD11
  BSR          tk_printf, R1
// tk_gdi/tkg_display.c:103   
  ADD          R0, -1, RD10
  BSR          .L00C0281E, R0

.L0080010E:
// tk_gdi/tkg_display.c:106   
  MOVU.L       (RQ18, 32), RQ8
  ADDS.L       RQ8, 0, RD21
// tk_gdi/tkg_display.c:107   
  BRNE.L       R0, RD21, .L0080010F
  MOVU.W       (RQ18, 14), RQ23
  BRGT.L       8, RQ23, .L0080010F

.L00800110:
  MOVU.W       (RQ18, 14), RQ9
  BRLE.L       R0, RQ9, .L0080010F

.L00800111:
// tk_gdi/tkg_display.c:108   
  MOVU.W       (RQ18, 14), RQ8
  ADD          R0, 1, RD27
  SHAD.L       RD27, RQ8, RD21

.L0080010F:
// tk_gdi/tkg_display.c:112   
  ADD          R0, 0, RD20
// tk_gdi/tkg_display.c:113   
  MOVU.L       (RQ18, 16), RQ23
  ADD          R0, 0x20202020, RD27
  BRLTU.L      RD27, RQ23, .L00800112
// tk_gdi/tkg_display.c:114   
  ADD          R0, 1024, RD20
  MOVU.L       (RQ18, 16), RQ9
  ADD          R0, 0x74786574, RD27
  BRNE.Q       RD27, RQ9, .L00800113
// tk_gdi/tkg_display.c:117   
  ADD          R0, 0, RD20

.L00800113:

.L00800112:
// tk_gdi/tkg_display.c:120   
  SHAD.L       RD21, 2, RQ8
  ADDS.L       RD22, RQ8, RQ23
  ADDS.L       RQ23, RD20, RD27
// tk_gdi/tkg_display.c:122   
  ADDS.L       RD27, 0, RQ26
  MOV.L        RD27, (R2, 108)
  MOV.Q        (R2, 120), RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ26, 0, RQ12
  BSR          memcpy, R1
  BSR          .L00C0281E, R0

.L00C00C6F:
  ADD          R0, 0, RQ10

.L00C0281E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_msettag:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// tk_core/tk_mmllist.c:1074   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  BSR          TKMM_SetTag, R1

.L00C02826:
  ADD          R2, 384, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

A_SkullAttack:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:1458   if (!actor->target)
  MOV.Q        (RQ8, 176), RQ20
  BREQ.Q       R0, RQ20, .L00C0282C
// p_enemy.c:1461   dest = actor->target;	
  MOV.Q        (RQ8, 176), RQ21
// p_enemy.c:1462   actor->flags |= MF_SKULLFLY;
  MOV.L        (RQ8, 160), RQ9
  OR           RQ9, 0x01000000, RQ18
  MOV.L        RQ18, (RQ8, 160)
// p_enemy.c:1464   S_StartSound (actor, actor->info->attacksound);
  MOV.Q        (RQ8, 136), RQ20
  MOV.L        (RQ20, 24), RQ9
  ADD          RQ8, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1465   A_FaceTarget (actor);
  ADD          RQ8, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1466   an = actor->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ8, 56), RQ18
  SHLR         RQ18, 19, RD27
// p_enemy.c:1467   actor->momx = FixedMul (SKULLSPEED, finecosine[an]);
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD27), RQ9
  MOV.L        RD27, (R2, 116)
  LUI          320, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ8, 112)
// p_enemy.c:1468   actor->momy = FixedMul (SKULLSPEED, finesine[an]);
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD27), RQ9
  LUI          320, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ8, 116)
// p_enemy.c:1469   dist = P_AproxDistance (dest->x - actor->x, dest->y - actor->y);
  MOV.L        (RQ21, 28), RQ9
  MOV.L        (RQ8, 28), RQ18
  SUBS.L       RQ9, RQ18, RQ22
  MOV.L        (RQ21, 24), RQ9
  MOV.L        (RQ8, 24), RQ18
  SUBS.L       RQ9, RQ18, RQ26
  ADD          RQ26, 0, RD10
  ADD          RQ22, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD23
// p_enemy.c:1470   dist = dist / SKULLSPEED;
  LUI          320, RD25
  DIVS.L       RD23, RD25, RD23
// p_enemy.c:1472   if (dist < 1)
  BRGE.L       1, RD23, .L00801B77
// p_enemy.c:1473   dist = 1;
  ADD          R0, 1, RD23

.L00801B77:
// p_enemy.c:1474   actor->momz = (dest->z+(dest->height>>1) - actor->z) / dist;
  MOV.L        (RQ21, 32), RQ9
  MOV.L        (RQ21, 108), RQ18
  SHAR         RQ18, 1, RQ22
  ADDS.L       RQ9, RQ22, RQ27
  MOV.L        (RQ8, 32), RQ9
  SUBS.L       RQ27, RQ9, RQ18
  DIVS.L       RQ18, RD23, RQ22
  MOV.L        RQ22, (RQ8, 120)

.L00C0282C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

tk_ptrstriptag:
// tk_core/tk_mmcell.c:466   
  BRNE.Q       R0, RQ10, .L00800A00
// tk_core/tk_mmcell.c:467   
  JSR          R1, 0, R0

.L00800A00:
// tk_core/tk_mmcell.c:469   
  ADD          RQ10, 0, RQ13
// tk_core/tk_mmcell.c:470   
  ADD          R0, 0x0000FFFF, RQ12
  LDSH32       RQ12, 0x00000000FFFFFFFF, RQ12
  AND          RQ13, RQ12, RQ13
// tk_core/tk_mmcell.c:471   
  ADD          RQ13, 0, RQ11
// tk_core/tk_mmcell.c:472   
  ADD          RQ11, 0, RQ10

.L00C0282D:
  JSR          R1, 0, R0

P_AcsThingActivate:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 108)
// p_acspec.c:84   idx=NULL;
  ADD          R0, 0, RQ22
  MOV.Q        RQ22, (R2, 96)
// p_acspec.c:85   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 96, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 108), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:86   while(obj)
  BSR          .L00801897, R0

.L00801895:
// p_acspec.c:87   {
  MOV.L        (RQ18, 160), RQ8
  AND          RQ8, 0xFFFFFFFFEFFFFFFF, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_acspec.c:90   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 96, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 108), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18

.L00801897:
  BRNE.Q       R0, RQ18, .L00801895

.L00801896:

.L00C02833:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

strerror:
// pdpc201/string.c:1236   
  BRNE.L       R0, RD10, .L00800695
  MOV          .L00C02835, RQ13
  ADD          RQ13, 0, RQ10
  JSR          R1, 0, R0
  BSR          .L00800696, R0

.L00800695:
// pdpc201/string.c:1237   
  MOV          .L00C02836, RQ13
  ADD          RQ13, 0, RQ10
  JSR          R1, 0, R0

.L00800696:

.L00C02834:
  JSR          R1, 0, R0

TKMM_GetSize:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
// tk_core/tk_mmpage.c:961   
  MOV.Q        (R2, 72), RQ13
  BRNE.Q       R0, RQ13, .L0080099D
// tk_core/tk_mmpage.c:962   
  ADD          R0, -1, RD10
  BSR          .L00C0283C, R0

.L0080099D:
// tk_core/tk_mmpage.c:964   
  MOV.Q        (R2, 72), RQ10
  BSR          TKMM_MMList_GetPtrLnkObj, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_mmpage.c:965   
  BRNE.Q       R0, RQ18, .L0080099E
// tk_core/tk_mmpage.c:966   
  ADD          R0, -1, RD10
  BSR          .L00C0283C, R0

.L0080099E:
// tk_core/tk_mmpage.c:970   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 8, RD13
  BTST.L       RD13, RQ9, .L0080099F
// tk_core/tk_mmpage.c:971   
  ADD          RQ18, 0, RQ10
  MOV.Q        (R2, 72), RQ11
  BSR          TKMM_MMCell_GetLnkObjCellSize, R1
  BSR          .L00C0283C, R0
// tk_core/tk_mmpage.c:973   

.L0080099F:
// tk_core/tk_mmpage.c:976   
  MOVU.B       (RQ18, 4), RQ9
  ADD          R0, 4, RD13
  BTST.L       RD13, RQ9, .L008009A0
// tk_core/tk_mmpage.c:977   
  MOVU.B       (RQ18, 6), RQ9
  SHAD.L       RQ9, 14, RD8
  BSR          .L008009A1, R0

.L008009A0:
// tk_core/tk_mmpage.c:980   
  MOVU.B       (RQ18, 6), RQ9
  AND          RQ9, 255, RD10
  BSR          TKMM_FxiToSize, R1
  ADDS.L       RQ10, 0, RD8

.L008009A1:
// tk_core/tk_mmpage.c:982   
  ADDS.L       RD8, 0, RD10

.L00C0283C:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

_mfreezone:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 72)
// pdpc201/stdlib.c:260   
  ADDS.L       RD9, 0, RD10
  MOV.L        (R2, 72), RD11
  MOV.Q        _mfreezone_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C02842:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

ST_loadData:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// st_stuff.c:1306   lu_palette = W_GetNumForName ("PLAYPAL");
  MOV          .L00C02053, RQ10
  BSR          W_GetNumForName, R1
  MOV.L        RQ10, TU7A00CB73/lu_palette
// st_stuff.c:1307   ST_loadGraphics();
  BSR          ST_loadGraphics, R1

.L00C02848:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

G_InitNew:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD22
  ADD          RD11, 0, RD23
  ADD          RD12, 0, RD21
  ADD          R0, 1, RD20
// g_game.c:1395   if (paused)
  MOV.L        paused, RD27
  BREQ.L       R0, RD27, .L008015EB
// g_game.c:1396   {
  MOV.L        RD0, paused
// g_game.c:1398   S_ResumeSound ();
  BSR          S_ResumeSound, R1

.L008015EB:
// g_game.c:1401   if (skill > sk_nightmare)
  BRLE.L       4, RD22, .L008015EC
// g_game.c:1402   skill = sk_nightmare;
  ADD          R0, 4, RD22

.L008015EC:
// g_game.c:1407   if (episode < 1)
  BRGE.L       1, RD23, .L008015ED
// g_game.c:1408   episode = 1;
  ADD          RD20, 0, RD23

.L008015ED:
// g_game.c:1410   if ( gamemode == retail )
  MOV.L        gamemode, RD27
  BRNE.Q       3, RD27, .L008015EE
  BRLE.L       4, RD23, .L008015EF
// g_game.c:1413   episode = 4;
  ADD          R0, 4, RD23

.L008015EF:
  BSR          .L008015F0, R0

.L008015EE:
  MOV.L        gamemode, RD27
  BRNE.L       R0, RD27, .L008015F1
  BRLE.L       1, RD23, .L008015F2
// g_game.c:1418   episode = 1;	// only start episode 1 on shareware
  ADD          RD20, 0, RD23

.L008015F2:
  BSR          .L008015F3, R0

.L008015F1:
  BRLE.L       3, RD23, .L008015F4
// g_game.c:1423   episode = 3;
  ADD          R0, 3, RD23

.L008015F4:

.L008015F3:

.L008015F0:
// g_game.c:1428   if (map < 1)
  BRGE.L       1, RD21, .L008015F5
// g_game.c:1429   map = 1;
  ADD          RD20, 0, RD21

.L008015F5:
// g_game.c:1431   if ( (map > 9)
  ADD          R0, 9, R5
  CMPGT.Q      RD21, R5, RQ9
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPNE.Q      RD27, R5, RQ8
  BTST.L       RQ8, RQ9, .L008015F6
// g_game.c:1433   map = 9;
  ADD          R0, 9, RD21

.L008015F6:
// g_game.c:1435   M_ClearRandom ();
  BSR          M_ClearRandom, R1
// g_game.c:1437   if (skill == sk_nightmare || respawnparm )
  BREQ.Q       4, RD22, .L008015F8
  MOV.L        respawnparm, RD27
  BRNE.L       R0, RD27, .L008015F8
  BSR          .L008015F7, R0

.L008015F8:
// g_game.c:1438   respawnmonsters = true;
  MOV.L        RD20, respawnmonsters
  BSR          .L008015FA, R0

.L008015F7:
// g_game.c:1440   respawnmonsters = false;
  MOV.L        RD0, respawnmonsters

.L008015FA:
// g_game.c:1442   if (fastparm || (skill == sk_nightmare && gameskill != sk_nightmare) )
  MOV.L        fastparm, RD27
  BRNE.L       R0, RD27, .L008015FC
  ADD          R0, 4, R5
  CMPEQ.Q      RD22, R5, RQ9
  MOV.L        gameskill, RD27
  ADD          R0, 4, R5
  CMPNE.Q      RD27, R5, RQ8
  BTSTN.L      RQ8, RQ9, .L008015FC
  BSR          .L008015FB, R0

.L008015FC:
// g_game.c:1443   {
  ADD          R0, 477, RD18

.L008015FE:
// g_game.c:1445   states[i].tics >>= 1;
  MOV          states, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RQ9
  SHAR         RQ9, 1, RQ8
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RQ8, (RQ26, 8)
  ADDS.L       RD18, 1, RD18
  BRLE.L       489, RD18, .L008015FE

.L00801600:
// g_game.c:1446   mobjinfo[MT_BRUISERSHOT].speed = 20*FRACUNIT;
  MOV          mobjinfo, RQ27
  ADD          RQ27, 1472, RQ26
  LUI          320, RD13
  MOV.L        RD13, (RQ26, 60)
// g_game.c:1447   mobjinfo[MT_HEADSHOT].speed = 20*FRACUNIT;
  ADD          RQ27, 2944, RQ26
  MOV.L        RD13, (RQ26, 60)
// g_game.c:1448   mobjinfo[MT_TROOPSHOT].speed = 20*FRACUNIT;
  ADD          RQ27, 2852, RQ26
  MOV.L        RD13, (RQ26, 60)
  BSR          .L00801601, R0

.L008015FB:
  ADD          R0, 4, R5
  CMPNE.Q      RD22, R5, RQ9
  MOV.L        gameskill, RD27
  ADD          R0, 4, R5
  CMPEQ.Q      RD27, R5, RQ8
  BTST.L       RQ8, RQ9, .L00801602
// g_game.c:1451   {
  ADD          R0, 477, RD18

.L00801603:
// g_game.c:1453   states[i].tics <<= 1;
  MOV          states, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RQ9
  SHAD.L       RQ9, 1, RQ8
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RQ8, (RQ26, 8)
  ADDS.L       RD18, 1, RD18
  BRLE.L       489, RD18, .L00801603

.L00801605:
// g_game.c:1454   mobjinfo[MT_BRUISERSHOT].speed = 15*FRACUNIT;
  MOV          mobjinfo, RQ27
  ADD          RQ27, 1472, RQ26
  LUI          240, RD13
  MOV.L        RD13, (RQ26, 60)
// g_game.c:1455   mobjinfo[MT_HEADSHOT].speed = 10*FRACUNIT;
  ADD          RQ27, 2944, RQ26
  LUI          160, RD12
  MOV.L        RD12, (RQ26, 60)
// g_game.c:1456   mobjinfo[MT_TROOPSHOT].speed = 10*FRACUNIT;
  ADD          RQ27, 2852, RQ26
  MOV.L        RD12, (RQ26, 60)

.L00801602:

.L00801601:
// g_game.c:1461   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00801606:
// g_game.c:1462   players[i].playerstate = PST_REBORN;
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          R0, 2, RD27
  MOV.L        RD27, (RQ26, 8)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00801606

.L00801608:
// g_game.c:1464   usergame = true;				// will be set false if a demo
  MOV.L        RD20, usergame
// g_game.c:1465   paused = false;
  MOV.L        RD0, paused
// g_game.c:1466   demoplayback = false;
  MOV.L        RD0, demoplayback
// g_game.c:1467   automapactive = false;
  MOV.L        RD0, automapactive
// g_game.c:1468   viewactive = true;
  ADD          RD20, 0, RD27
// g_game.c:1469   gameepisode = episode;
  MOV.L        RD23, gameepisode
// g_game.c:1470   gamemap = map;
  MOV.L        RD21, gamemap
// g_game.c:1471   gameskill = skill;
  MOV.L        RD22, gameskill
// g_game.c:1473   viewactive = true;
  ADD          RD20, 0, RD27
  MOV.L        RD27, viewactive
// g_game.c:1476   if ( gamemode == commercial)
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00801609
// g_game.c:1477   {
  MOV          .L00C016E8, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
  MOV.L        gamemap, RD27
  BRGE.L       12, RD27, .L0080160A
// g_game.c:1480   skytexture = R_TextureNumForName ("SKY1");
  MOV          .L00C016E9, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
  BSR          .L0080160B, R0

.L0080160A:
  MOV.L        gamemap, RD27
  BRGE.L       21, RD27, .L0080160C
// g_game.c:1483   skytexture = R_TextureNumForName ("SKY2");
  MOV          .L00C016EA, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture

.L0080160C:

.L0080160B:
  BSR          .L0080160D, R0

.L00801609:
// g_game.c:1486   switch (episode)
  BREQ.Q       1, RD23, .L0080160F
  BREQ.Q       2, RD23, .L00801610
  BREQ.Q       3, RD23, .L00801611
  BREQ.Q       4, RD23, .L00801612
  BSR          .L0080160E, R0

.L0080160F:
// g_game.c:1488   case 1:
  MOV          .L00C016E9, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
// g_game.c:1490   break;
  BSR          .L0080160E, R0

.L00801610:
// g_game.c:1491   case 2:
  MOV          .L00C016EA, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
// g_game.c:1493   break;
  BSR          .L0080160E, R0

.L00801611:
// g_game.c:1494   case 3:
  MOV          .L00C016E8, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
// g_game.c:1496   break;
  BSR          .L0080160E, R0

.L00801612:
// g_game.c:1497   case 4:	// Special Edition sky
  MOV          .L00C0284F, RQ10
  BSR          R_TextureNumForName, R1
  MOV.L        RQ10, skytexture
// g_game.c:1499   break;

.L0080160E:

.L0080160D:
// g_game.c:1502   G_DoLoadLevel ();
  BSR          G_DoLoadLevel, R1

.L00C0284E:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

M_NewGame:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// m_menu.c:907   {
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L0080165E
  MOV.L        demoplayback, RD13
  BRNE.L       R0, RD13, .L0080165E

.L0080165F:
// m_menu.c:909   {
  MOV          .L00C02856, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:911   return;
  BSR          .L00C02855, R0

.L0080165E:
// m_menu.c:914   if ( gamemode == commercial )
  MOV.L        gamemode, RD13
  BRNE.Q       2, RD13, .L00801661
// m_menu.c:915   M_SetupNextMenu(&NewDef);
  MOV          NewDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1
  BSR          .L00801662, R0

.L00801661:
// m_menu.c:917   M_SetupNextMenu(&EpiDef);
  MOV          EpiDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00801662:

.L00C02855:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

A_PosAttack:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// p_enemy.c:841   if (!actor->target)
  MOV.Q        (RQ8, 176), RQ20
  BREQ.Q       R0, RQ20, .L00C0285C
// p_enemy.c:844   A_FaceTarget (actor);
  ADD          RQ8, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:845   angle = actor->angle;
  MOVU.L       (RQ8, 56), RQ18
  ADDS.L       RQ18, 0, RD23
// p_enemy.c:846   slope = P_AimLineAttack (actor, angle, MISSILERANGE);
  ADDU.L       RD23, R0, RQ18
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RD11
  LUI          0x00008000, RD12
  BSR          P_AimLineAttack, R1
  ADD          RQ10, 0, RD21
// p_enemy.c:848   S_StartSound (actor, sfx_pistol);
  ADD          RQ8, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1
// p_enemy.c:849   angle += (P_Random()-P_Random())<<20;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ22
  SHAD.L       RQ22, 20, RQ18
  ADDS.L       RD23, RQ18, RD23
// p_enemy.c:850   damage = ((P_Random()%5)+1)*3;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RQ22
  ADD          R0, 5, RD27
  MODS.L       RQ22, RD27, RQ22
  ADDS.L       RQ22, 1, RQ18
  ADD          R0, 3, R5
  MULS.L       RQ18, R5, RD26
  MOV.L        RD26, (R2, 116)
// p_enemy.c:851   P_LineAttack (actor, angle, MISSILERANGE, slope, damage);
  ADDU.L       RD23, R0, RQ9
  ADD          RQ8, 0, RQ10
  ADDU.L       RQ9, R0, RD11
  LUI          0x00008000, RD12
  ADD          RD21, 0, RD13
  ADD          RD26, 0, RD14
  BSR          P_LineAttack, R1

.L00C0285C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_InitTextureMapping:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -296, R2
// r_main.c:578   finecosine = &finesine[FINEANGLES/4];
  MOV          finesine, RQ20
  ADD          RQ20, 8192, RQ27
  MOV.Q        RQ27, finecosine
// r_main.c:579   M_InitSoftDiv();
  BSR          M_InitSoftDiv, R1
// r_main.c:587   focallength = FixedDiv (centerxfrac,
  MOV          finetangent, RQ20
  MOV.L        (RQ20, 0x3000), RQ9
  MOV.L        centerxfrac, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD21
// r_main.c:596   for (i=0 ; i<FINEANGLES/2 ; i++)
  ADD          R0, 0, RD18

.L00802666:
// r_main.c:597   {
  MOV          finetangent, RQ20
  MOV.L        (RQ20, RD18), RQ9
  LUI          32, RD20
  BRLE.L       RD20, RQ9, .L00802669
// r_main.c:599   t = -1;
  ADD          R0, -1, RD8
  BSR          .L0080266A, R0

.L00802669:
  MOV          finetangent, RQ20
  MOV.L        (RQ20, RD18), RQ9
  LUI          -32, RD20
  BRGE.L       RD20, RQ9, .L0080266B
// r_main.c:601   t = viewwidth+1;
  MOV.L        viewwidth, RD20
  ADDS.L       RD20, 1, RD8
  BSR          .L0080266C, R0

.L0080266B:
// r_main.c:603   {
  MOV          finetangent, RQ20
  MOV.L        (RQ20, RD18), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RD8
// r_main.c:605   t = (centerxfrac - t+FRACUNIT-1)>>FRACBITS;
  MOV.L        centerxfrac, RD20
  SUBS.L       RD20, RD8, RQ9
  ADDS.L       RQ9, 0x00010000, RQ23
  ADDS.L       RQ23, -1, RQ9
  SHAR         RQ9, 16, RD8
  BRGE.L       -1, RD8, .L0080266D
// r_main.c:608   t = -1;
  ADD          R0, -1, RD8
  BSR          .L0080266E, R0

.L0080266D:
  MOV.L        viewwidth, RD20
  ADDS.L       RD20, 1, RQ23
  BRLE.L       RQ23, RD8, .L0080266F
// r_main.c:610   t = viewwidth+1;
  MOV.L        viewwidth, RD20
  ADDS.L       RD20, 1, RD8

.L0080266F:

.L0080266E:

.L0080266C:

.L0080266A:
// r_main.c:618   viewangletox[i] = t;
  MOV          viewangletox, RQ20
  MOV.W        RD8, (RQ20, RD18)
  ADDS.L       RD18, 1, RD18
  LUI          1, RD20
  BRLT.L       RD20, RD18, .L00802666

.L00802668:
// r_main.c:624   for (x=0;x<=viewwidth;x++)
  ADD          R0, 0, RD22
  MOV.L        viewwidth, RD20
  BRGT.L       RD20, RD22, .L00802672

.L00802670:
// r_main.c:625   {
  ADD          R0, 0, RD18
// r_main.c:627   while (viewangletox[i]>x)
  BSR          .L00802675, R0

.L00802673:
// r_main.c:628   i++;
  ADDS.L       RD18, 1, RD18

.L00802675:
  MOV          viewangletox, RQ20
  MOV.W        (RQ20, RD18), RQ9
  BRGT.L       RD22, RQ9, .L00802673

.L00802674:
// r_main.c:629   xtoviewangle[x] = (i<<ANGLETOFINESHIFT)-ANG90;
  SHAD.L       RD18, 19, RQ23
  ADDS.L       RQ23, 0xFFFFFFFFC0000000, RQ9
  MOV          xtoviewangle, RQ20
  MOVU.L       RQ9, (RQ20, RD22)
  ADDS.L       RD22, 1, RD22
  MOV.L        viewwidth, RD20
  BRLE.L       RD20, RD22, .L00802670

.L00802672:
// r_main.c:633   for (i=0 ; i<FINEANGLES/2 ; i++)
  ADD          R0, 0, RD18

.L00802676:
// r_main.c:634   {
  MOV          finetangent, RQ20
  MOV.L        (RQ20, RD18), RQ23
  ADD          RQ23, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RD8
// r_main.c:636   t = centerx - t;
  MOV.L        centerx, RD20
  SUBS.L       RD20, RD8, RQ9
  ADDS.L       RQ9, 0, RD8
// r_main.c:638   if (viewangletox[i] == -1)
  MOV          viewangletox, RQ20
  MOV.W        (RQ20, RD18), RQ23
  BRNE.Q       -1, RQ23, .L00802679
// r_main.c:639   viewangletox[i] = 0;
  MOV          viewangletox, RQ20
  MOV.W        RD0, (RQ20, RD18)
  BSR          .L0080267A, R0

.L00802679:
  MOV          viewangletox, RQ20
  MOV.W        (RQ20, RD18), RQ9
  MOV.L        viewwidth, RD20
  ADDS.L       RD20, 1, RQ23
  BRNE.Q       RQ23, RQ9, .L0080267B
// r_main.c:641   viewangletox[i]  = viewwidth;
  MOV          viewangletox, RQ20
  MOV.L        viewwidth, RD27
  MOV.W        RD27, (RQ20, RD18)

.L0080267B:

.L0080267A:
  ADDS.L       RD18, 1, RD18
  LUI          1, RD20
  BRLT.L       RD20, RD18, .L00802676

.L00802678:
// r_main.c:644   clipangle = xtoviewangle[0];
  MOV          xtoviewangle, RQ20
  MOVU.L       (RQ20, 0), RD27
  MOV.L        RD27, clipangle

.L00C02862:
  ADD          R2, 296, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

PTR_SlideTraverse:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ22
// p_map.c:675   if (!in->isaline)
  MOV.L        (RQ22, 4), RQ18
  BRNE.L       R0, RQ18, .L00801D66
// p_map.c:676   I_Error ("PTR_SlideTraverse: not a line?");
  MOV          .L00C02869, RQ10
  BSR          I_Error, R1

.L00801D66:
// p_map.c:678   li = in->d.line;
  ADD          RQ22, 8, RQ21
  MOV.Q        (RQ21, 0), RQ23
// p_map.c:680   if ( ! (li->flags & ML_TWOSIDED) )
  MOV.W        (RQ23, 24), RQ18
  ADD          R0, 4, RD13
  BTSTN.L      RD13, RQ18, .L00801D67
  MOV.Q        slidemo, RQ21
  MOV.L        (RQ21, 28), RQ18
  MOV.L        (RQ21, 24), RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801D68
// p_map.c:685   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C02868, R0

.L00801D68:
// p_map.c:686   }
  BSR          .L00801D69, R0

.L00801D67:
// p_map.c:691   P_LineOpening (li);
  ADD          RQ23, 0, RQ10
  BSR          P_LineOpening, R1
// p_map.c:693   if (openrange < slidemo->height)
  MOV.Q        slidemo, RQ21
  MOV.L        (RQ21, 108), RQ18
  MOV.L        openrange, RD21
  BRGE.L       RQ18, RD21, .L00801D6A
// p_map.c:694   goto isblocking;		// doesn't fit
  BSR          .L00801D69, R0

.L00801D6A:
// p_map.c:696   if (opentop - slidemo->z < slidemo->height)
  MOV.Q        slidemo, RQ21
  MOV.L        (RQ21, 32), RQ8
  MOV.L        opentop, RD13
  SUBS.L       RD13, RQ8, RQ9
  MOV.L        (RQ21, 108), RQ18
  BRGE.L       RQ18, RQ9, .L00801D6B
// p_map.c:697   goto isblocking;		// mobj is too high
  BSR          .L00801D69, R0

.L00801D6B:
// p_map.c:699   if (openbottom - slidemo->z > 24*FRACUNIT )
  MOV.Q        slidemo, RQ21
  MOV.L        (RQ21, 32), RQ8
  MOV.L        openbottom, RD21
  SUBS.L       RD21, RQ8, RQ9
  LUI          384, RD21
  BRLE.L       RD21, RQ9, .L00801D6C
// p_map.c:700   goto isblocking;		// too big a step up
  BSR          .L00801D69, R0

.L00801D6C:
// p_map.c:703   return true;		
  ADD          R0, 1, RD10
  BSR          .L00C02868, R0
// p_map.c:707   isblocking:		

.L00801D69:
  MOV.L        (RQ22, 0), RQ18
  MOV.L        bestslidefrac, RD21
  BRGE.L       RD21, RQ18, .L00801D6D
// p_map.c:709   {
  MOV.L        bestslidefrac, RD21
  MOV.L        RD21, secondslidefrac
// p_map.c:711   secondslideline = bestslideline;
  MOV.Q        bestslideline, RQ13
  MOV.Q        RQ13, secondslideline
// p_map.c:712   bestslidefrac = in->frac;
  MOV.L        (RQ22, 0), RD21
  MOV.L        RD21, bestslidefrac
// p_map.c:713   bestslideline = li;
  ADD          RQ23, 0, RQ13
  MOV.Q        RQ13, bestslideline

.L00801D6D:
// p_map.c:716   return false;	// stop
  ADD          R0, 0, RD10

.L00C02868:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_mprotect:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.L        RD12, (R2, 76)
// tk_core/tk_mmap.c:436   
  BSR          TKMM_InitMMap, R1
// tk_core/tk_mmap.c:445   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.L        (R2, 76), RD12
  BSR          TKMM_MProtectV, R1

.L00C0286F:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

I_WaitVBL:
// i_btesh4.c:2505   void I_WaitVBL(int count)

.L00C02870:
  JSR          R1, 0, R0

HU_dequeueChatChar:
// hu_stuff.c:626   if (head != tail)
  MOV.L        TU7A00CA82/head, RD13
  MOV.L        TU7A00CA82/tail, RD12
  BREQ.Q       RD12, RD13, .L00802C97
// hu_stuff.c:627   {
  MOV          TU7A00CA82/chatchars, RQ13
  MOV.L        TU7A00CA82/tail, RD12
  MOV.B        (RQ13, RD12), RD11
// hu_stuff.c:629   tail = (tail + 1) & (QUEUESIZE-1);
  ADDS.L       RD12, 1, RQ10
  AND          RQ10, 127, RD12
  MOV.L        RD12, TU7A00CA82/tail
  BSR          .L00802C98, R0

.L00802C97:
// hu_stuff.c:632   {
  ADD          R0, 0, RD11

.L00802C98:
// hu_stuff.c:636   return c;
  SHAD.Q       RD11, 56, RD10
  SHAR.Q       RD10, 56, RD10

.L00C02871:
  JSR          R1, 0, R0
  .balign 4

HUlib_eraseSText:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
// hu_lib.c:262   if(!s)
  BREQ.Q       R0, RQ8, .L00C02877
// hu_lib.c:265   for (i=0 ; i<s->h ; i++)
  ADD          R0, 0, RD23
  MOV.L        (RQ8, 448), RQ18
  MOV.L        RD23, (R2, 100)
  BRGE.L       RQ18, RD23, .L00802D0B

.L00802D09:
// hu_lib.c:266   {
  MOV.L        (RQ8, 464), RQ18
  BREQ.L       R0, RQ18, .L00802D0C
  MOV.Q        (RQ8, 456), RQ9
  MOV.L        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L00802D0C

.L00802D0D:
// hu_lib.c:268   s->l[i].needsupdate = 4;
  ADD          RQ8, 0, RQ9
  MOV.L        (R2, 100), RD23
  ADD          R0, 112, R5
  MUL.L        RD23, R5, RQ13
  ADD          RQ9, RQ13, RQ13
  ADD          R0, 4, RD12
  MOV.L        RD12, (RQ13, 108)

.L00802D0C:
// hu_lib.c:269   HUlib_eraseTextLine(&s->l[i]);
  ADD          RQ8, 0, RQ9
  MOV.L        (R2, 100), RD23
  ADD          R0, 112, R5
  MUL.L        RD23, R5, RQ10
  ADD          RQ9, RQ10, RQ10
  BSR          HUlib_eraseTextLine, R1
  ADDS.L       RD23, 1, RD23
  MOV.L        (RQ8, 448), RQ18
  MOV.L        RD23, (R2, 100)
  BRLT.L       RQ18, RD23, .L00802D09

.L00802D0B:
// hu_lib.c:270   }
  MOV.Q        (RQ8, 456), RQ9
  BREQ.Q       R0, RQ9, .L00802D0F
// hu_lib.c:272   s->laston = *s->on;
  MOV.Q        (RQ8, 456), RQ23
  MOV.L        (RQ23, 0), RQ18
  MOV.L        RQ18, (RQ8, 464)

.L00802D0F:

.L00C02877:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_opror_bigig:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -600, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:364   
// tk_core/lva_tagopr.c:366   
  ADD          R2, 112, RQ10
  ADD          RQ18, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:367   
  ADD          R2, 176, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:368   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 240, RQ12
  BSR          tkmm_bigint_or, R1
// tk_core/lva_tagopr.c:369   
  ADD          R2, 240, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C0287D:
  ADD          R2, 600, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

I_NetCmd:
// i_btesh4.c:64   void I_NetCmd (void)

.L00C0287E:
  JSR          R1, 0, R0

R_DrawSprite:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -1704, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 160)
  ADD          R2, 832, RQ6
  MOV.Q        RQ6, (R2, 152)
// r_things.c:1202   short		clipbot[SCREENWIDTH];
// r_things.c:1203   short		cliptop[SCREENWIDTH];
// r_things.c:1213   x1=spr->x1;
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 16), RD26
// r_things.c:1214   x2=spr->x2;
  MOV.L        (RQ27, 20), RD25
  MOV.L        RD25, (R2, 140)
// r_things.c:1216   if(x1<0)x1=0;
  MOV.L        RD26, (R2, 144)
  BRGE.L       R0, RD26, .L00802830
  MOV.L        RD0, (R2, 144)

.L00802830:
// r_things.c:1217   if(x2<0)
  MOV.L        (R2, 140), RD27
  BRLT.L       R0, RD27, .L00C02884
// r_things.c:1219   if(x1>=SCREENWIDTH)
  MOV.L        (R2, 144), RD27
  ADD          R0, 320, RD26
  BRGE.L       RD26, RD27, .L00C02884
// r_things.c:1221   if(x2>=SCREENWIDTH)
  MOV.L        (R2, 140), RD27
  BRLT.L       320, RD27, .L00802831
// r_things.c:1222   x2=SCREENWIDTH-1;
  ADD          R0, 319, RD27
  MOV.L        RD27, (R2, 140)

.L00802831:
// r_things.c:1227   for (x = x1 ; x<=x2 ; x++)
  MOV.L        (R2, 144), RD18
  MOV.L        (R2, 140), RD27
  BRGT.L       RD27, RD18, .L00802834

.L00802832:
// r_things.c:1228   clipbot[x] = cliptop[x] = -2;
  ADD          R2, 832, RQ27
  ADD          R0, -2, RD26
  MOV.W        RD26, (RQ27, RD18)
  ADD          R2, 176, RQ25
  MOV.W        RD26, (RQ25, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.L        (R2, 140), RD13
  BRLE.L       RD13, RD18, .L00802832

.L00802834:
// r_things.c:1233   for (ds=ds_p-1 ; ds >= drawsegs ; ds--)
  MOV.Q        ds_p, RQ27
  ADD          RQ27, -80, RQ8
  MOV          drawsegs, RQ27
  BRLT.Q       RQ27, RQ8, .L00802837

.L00802835:
// r_things.c:1236   if (ds->x1 > spr->x2
  MOV.L        (RQ8, 8), RQ9
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 20), RQ21
  BRGT.L       RQ21, RQ9, .L00802836
  MOV.L        (RQ8, 12), RQ9
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 16), RQ21
  BRLT.L       RQ21, RQ9, .L00802836

.L00802839:
  MOV.L        (RQ8, 40), RQ9
  BRNE.L       R0, RQ9, .L00802838
  MOV.Q        (RQ8, 72), RQ22
  BRNE.Q       R0, RQ22, .L00802838
  BSR          .L00802836, R0

.L00802838:
// r_things.c:1248   r1 = ds->x1 < x1 ? x1 : ds->x1;
  MOV.L        (RQ8, 8), RQ21
  MOV.L        (R2, 144), RD27
  BRGE.L       RD27, RQ21, .L0080283C
  MOV.L        (R2, 144), RD9
  BSR          .L0080283D, R0

.L0080283C:
  MOV.L        (RQ8, 8), RQ21
  ADD          RQ21, 0, RQ9

.L0080283D:
  MOV.L        RD9, (R2, 148)
// r_things.c:1249   r2 = ds->x2 > x2 ? x2 : ds->x2;
  MOV.L        (RQ8, 12), RQ21
  MOV.L        (R2, 140), RD27
  BRLE.L       RD27, RQ21, .L0080283E
  MOV.L        (R2, 140), RD9
  BSR          .L0080283F, R0

.L0080283E:
  MOV.L        (RQ8, 12), RQ21
  ADD          RQ21, 0, RQ9

.L0080283F:
  ADD          RQ9, 0, RD20
// r_things.c:1251   if (ds->scale1 > ds->scale2)
  MOV.L        (RQ8, 16), RQ9
  MOV.L        (RQ8, 20), RQ21
  BRLE.L       RQ21, RQ9, .L00802840
// r_things.c:1252   {
  MOV.L        (RQ8, 20), RD27
  MOV.L        RD27, (R2, 132)
// r_things.c:1254   scale = ds->scale1;
  MOV.L        (RQ8, 16), RD26
  MOV.L        RD26, (R2, 136)
  BSR          .L00802841, R0

.L00802840:
// r_things.c:1257   {
  MOV.L        (RQ8, 16), RD27
  MOV.L        RD27, (R2, 132)
// r_things.c:1259   scale = ds->scale2;
  MOV.L        (RQ8, 20), RD26
  MOV.L        RD26, (R2, 136)

.L00802841:
// r_things.c:1262   if (scale < spr->scale
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 48), RQ9
  MOV.L        (R2, 136), RD26
  BRLT.L       RQ9, RD26, .L00802843
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 48), RQ21
  MOV.L        (R2, 132), RD26
  BRGE.L       RQ21, RD26, .L00802842
  MOV.Q        (RQ8, 0), RQ22
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 32), RQ9
  MOV.L        (RQ27, 28), RQ21
  ADD          RQ21, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          R_PointOnSegSide, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00802842

.L00802843:
  MOV.Q        (RQ8, 72), RQ22
  BREQ.Q       R0, RQ22, .L00802846
// r_things.c:1270   R_RenderMaskedSegRange (ds, r1, r2);
  ADD          RQ8, 0, RQ10
  MOV.L        (R2, 148), RD11
  ADD          RD20, 0, RD12
  BSR          R_RenderMaskedSegRange, R1

.L00802846:
// r_things.c:1273   continue;			
  BSR          .L00802836, R0

.L00802842:
// r_things.c:1278   silhouette = ds->silhouette;
  MOV.L        (RQ8, 40), RD27
  MOV.L        RD27, (R2, 128)
// r_things.c:1280   if (spr->gz >= ds->bsilheight)
  MOV.Q        (R2, 168), RQ26
  MOV.L        (RQ26, 36), RQ23
  MOV.L        (RQ8, 44), RQ9
  BRLT.L       RQ9, RQ23, .L00802847
// r_things.c:1281   silhouette &= ~SIL_BOTTOM;
  MOV.L        (R2, 128), RD27
  AND          RD27, -2, RD27
  MOV.L        RD27, (R2, 128)

.L00802847:
// r_things.c:1283   if (spr->gzt <= ds->tsilheight)
  MOV.Q        (R2, 168), RQ27
  MOV.L        (RQ27, 40), RQ21
  MOV.L        (RQ8, 48), RQ23
  BRGT.L       RQ23, RQ21, .L00802848
// r_things.c:1284   silhouette &= ~SIL_TOP;
  MOV.L        (R2, 128), RD27
  AND          RD27, -3, RD27
  MOV.L        RD27, (R2, 128)

.L00802848:
// r_things.c:1286   if (silhouette == 1)
  MOV.L        (R2, 128), RD27
  BRNE.Q       1, RD27, .L00802849
// r_things.c:1289   for (x=r1 ; x<=r2 ; x++)
  MOV.L        (R2, 148), RD18
  BRGT.L       RD20, RD18, .L0080284C

.L0080284A:
// r_things.c:1290   if (clipbot[x] == -2)
  ADD          R2, 176, RQ27
  MOV.W        (RQ27, RD18), RQ9
  BRNE.Q       -2, RQ9, .L0080284D
// r_things.c:1291   clipbot[x] = ds->sprbottomclip[x];
  MOV.Q        (RQ8, 64), RQ22
  MOV.W        (RQ22, RD18), RQ23
  ADD          R2, 176, RQ27
  MOV.W        RQ23, (RQ27, RD18)

.L0080284D:
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD20, RD18, .L0080284A

.L0080284C:
  BSR          .L0080284E, R0

.L00802849:
  MOV.L        (R2, 128), RD27
  BRNE.Q       2, RD27, .L0080284F
// r_things.c:1296   for (x=r1 ; x<=r2 ; x++)
  MOV.L        (R2, 148), RD18
  BRGT.L       RD20, RD18, .L00802852

.L00802850:
// r_things.c:1297   if (cliptop[x] == -2)
  ADD          R2, 832, RQ27
  MOV.W        (RQ27, RD18), RQ9
  BRNE.Q       -2, RQ9, .L00802853
// r_things.c:1298   cliptop[x] = ds->sprtopclip[x];
  MOV.Q        (RQ8, 56), RQ22
  MOV.W        (RQ22, RD18), RQ23
  ADD          R2, 832, RQ27
  MOV.W        RQ23, (RQ27, RD18)

.L00802853:
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD20, RD18, .L00802850

.L00802852:
  BSR          .L00802854, R0

.L0080284F:
  MOV.L        (R2, 128), RD27
  BRNE.Q       3, RD27, .L00802855
// r_things.c:1303   for (x=r1 ; x<=r2 ; x++)
  MOV.L        (R2, 148), RD18
  BRGT.L       RD20, RD18, .L00802858

.L00802856:
// r_things.c:1304   {
  ADD          R2, 176, RQ27
  MOV.W        (RQ27, RD18), RQ9
  BRNE.Q       -2, RQ9, .L00802859
// r_things.c:1306   clipbot[x] = ds->sprbottomclip[x];
  MOV.Q        (RQ8, 64), RQ22
  MOV.W        (RQ22, RD18), RQ23
  ADD          R2, 176, RQ27
  MOV.W        RQ23, (RQ27, RD18)

.L00802859:
// r_things.c:1307   if (cliptop[x] == -2)
  ADD          R2, 832, RQ27
  MOV.W        (RQ27, RD18), RQ9
  BRNE.Q       -2, RQ9, .L0080285A
// r_things.c:1308   cliptop[x] = ds->sprtopclip[x];
  MOV.Q        (RQ8, 56), RQ22
  MOV.W        (RQ22, RD18), RQ23
  ADD          R2, 832, RQ27
  MOV.W        RQ23, (RQ27, RD18)

.L0080285A:
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD20, RD18, .L00802856

.L00802858:

.L00802855:

.L00802854:

.L0080284E:

.L00802836:
  ADD          RQ8, -80, RQ8
  MOV          drawsegs, RQ27
  BRGE.Q       RQ27, RQ8, .L00802835

.L00802837:
// r_things.c:1318   for (x = x1 ; x<=x2 ; x++)
  MOV.L        (R2, 144), RD18
  MOV.L        (R2, 140), RD27
  BRGT.L       RD27, RD18, .L0080285D

.L0080285B:
// r_things.c:1319   {
  ADD          R2, 176, RQ27
  MOV.W        (RQ27, RD18), RQ9
  BRNE.Q       -2, RQ9, .L0080285E
// r_things.c:1321   clipbot[x] = viewheight;
  ADD          R2, 176, RQ27
  MOV.L        viewheight, RD26
  MOV.W        RD26, (RQ27, RD18)

.L0080285E:
// r_things.c:1323   if (cliptop[x] == -2)
  ADD          R2, 832, RQ27
  MOV.W        (RQ27, RD18), RQ21
  BRNE.Q       -2, RQ21, .L0080285F
// r_things.c:1324   cliptop[x] = -1;
  ADD          R2, 832, RQ27
  ADD          R0, -1, RD26
  MOV.W        RD26, (RQ27, RD18)

.L0080285F:
  ADDS.L       RD18, 1, RD18
  MOV.L        (R2, 140), RD27
  BRLE.L       RD27, RD18, .L0080285B

.L0080285D:
// r_things.c:1327   mfloorclip = clipbot;
  ADD          R2, 176, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, mfloorclip
// r_things.c:1328   mceilingclip = cliptop;
  ADD          R2, 832, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, mceilingclip
// r_things.c:1337   R_DrawVisSprite (spr, x1, x2);
  MOV.Q        (R2, 168), RQ10
  MOV.L        (R2, 144), RD11
  MOV.L        (R2, 140), RD12
  BSR          R_DrawVisSprite, R1

.L00C02884:
  ADD          R2, 1704, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

P_UseLines:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 120)
// p_map.c:1173   usething = player->mo;
  MOV.Q        (R2, 120), RQ27
  MOV.Q        (RQ27, 0), RQ26
// p_map.c:1175   angle = player->mo->angle >> ANGLETOFINESHIFT;
  MOVU.L       (RQ26, 56), RQ18
  SHLR         RQ18, 19, RD8
// p_map.c:1177   x1 = player->mo->x;
  MOV.L        (RQ26, 24), RD23
// p_map.c:1178   y1 = player->mo->y;
  MOV.L        (RQ26, 28), RD22
  MOV.Q        RQ26, usething
// p_map.c:1179   x2 = x1 + (USERANGE>>FRACBITS)*finecosine[angle];
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD8), RQ18
  SHAD.L       RQ18, 6, RQ9
  ADDS.L       RD23, RQ9, RD21
// p_map.c:1180   y2 = y1 + (USERANGE>>FRACBITS)*finesine[angle];
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD8), RQ18
  SHAD.L       RQ18, 6, RQ9
  ADDS.L       RD22, RQ9, RD20
// p_map.c:1182   P_PathTraverse ( x1, y1, x2, y2, PT_ADDLINES, PTR_UseTraverse );
  MOV          PTR_UseTraverse, RQ26
  ADD          RQ26, 0, RQ27
  ADD          RD23, 0, RD10
  ADD          RD22, 0, RD11
  ADD          RD21, 0, RD12
  ADD          RD20, 0, RD13
  ADD          R0, 1, RD14
  ADD          RQ27, 0, RQ15
  BSR          P_PathTraverse, R1

.L00C0288A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

F_Drawer:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// f_finale.c:734   {
  MOV.L        finalestage, RD13
  BRNE.Q       2, RD13, .L00801328
// f_finale.c:736   {
  BSR          F_CastDrawer, R1
// f_finale.c:738   return;
  BSR          .L00C02890, R0

.L00801328:
// f_finale.c:741   if (!finalestage)
  MOV.L        finalestage, RD13
  BRNE.L       R0, RD13, .L00801329
// f_finale.c:742   F_TextWrite ();
  BSR          F_TextWrite, R1
  BSR          .L0080132A, R0

.L00801329:
// f_finale.c:744   {
  MOV.L        gameepisode, RD13
  BREQ.Q       1, RD13, .L0080132C
  MOV.L        gameepisode, RD13
  BREQ.Q       2, RD13, .L0080132D
  MOV.L        gameepisode, RD13
  BREQ.Q       3, RD13, .L0080132E
  MOV.L        gameepisode, RD13
  BREQ.Q       4, RD13, .L0080132F
  BSR          .L0080132B, R0

.L0080132C:
// f_finale.c:747   case 1:
  MOV.L        gamemode, RD13
  BRNE.Q       3, RD13, .L00801330
// f_finale.c:749   V_DrawPatch (0,0,0,
  MOV          .L00C01735, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatch, R1
  BSR          .L00801331, R0

.L00801330:
// f_finale.c:753   V_DrawPatch (0,0,0,
  MOV          .L00C01737, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatch, R1

.L00801331:
// f_finale.c:756   break;
  BSR          .L0080132B, R0

.L0080132D:
// f_finale.c:757   case 2:
  MOV          .L00C02891, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:761   break;
  BSR          .L0080132B, R0

.L0080132E:
// f_finale.c:762   case 3:
  BSR          F_BunnyScroll, R1
// f_finale.c:764   break;
  BSR          .L0080132B, R0

.L0080132F:
// f_finale.c:765   case 4:
  MOV          .L00C02892, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ18, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:769   break;

.L0080132B:

.L0080132A:

.L00C02890:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

PIT_AddThingIntercepts:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -432, R2
  ADD          RQ10, 0, RQ8
// p_maputl.c:665   divline_t		dl;
// p_maputl.c:669   x1 = y2 = x2 = y1 = 0;
  MOV.L        RD0, (R2, 208)
  MOV.L        RD0, (R2, 204)
  MOV.L        RD0, (R2, 200)
  MOV.L        RD0, (R2, 212)
// p_maputl.c:671   tracepositive = (trace.dx ^ trace.dy)>0;
  MOV          trace, RQ27
  MOV.L        (RQ27, 8), RQ9
  MOV.L        (RQ27, 12), RQ18
  XOR          RQ9, RQ18, RQ23
  CMPGT.Q      RQ23, R0, RD27
  MOV.L        RD27, (R2, 188)
// p_maputl.c:673   if(R_ThingIsPolyObjP(thing))
  ADD          RQ8, 0, RQ10
  BSR          R_ThingIsPolyObjP, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00801DF9
  MOV.L        (R2, 188), RD27
  BREQ.L       R0, RD27, .L00801DFA
// p_maputl.c:676   {
  ADD          R2, 208, RQ21
  ADD          R2, 204, RQ22
  ADD          R2, 200, RQ27
  ADD          R2, 212, RQ20
  ADD          RQ8, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ27, 0, RQ12
  ADD          RQ22, 0, RQ13
  ADD          RQ21, 0, RQ14
  BSR          R_PolyObjGetBox, R1
  BSR          .L00801DFB, R0

.L00801DFA:
// p_maputl.c:679   {
  ADD          R2, 200, RQ21
  ADD          R2, 204, RQ22
  ADD          R2, 208, RQ27
  ADD          R2, 212, RQ20
  ADD          RQ8, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ27, 0, RQ12
  ADD          RQ22, 0, RQ13
  ADD          RQ21, 0, RQ14
  BSR          R_PolyObjGetBox, R1

.L00801DFB:
  BSR          .L00801DFC, R0

.L00801DF9:
  MOV.L        (R2, 188), RD27
  BREQ.L       R0, RD27, .L00801DFD
// p_maputl.c:686   {
  MOV.L        (RQ8, 24), RQ9
  MOV.L        (RQ8, 104), RQ18
  SUBS.L       RQ9, RQ18, RD27
  MOV.L        RD27, (R2, 212)
// p_maputl.c:688   y1 = thing->y + thing->radius;
  MOV.L        (RQ8, 28), RQ23
  ADDS.L       RQ23, RQ18, RD27
  MOV.L        RD27, (R2, 208)
// p_maputl.c:690   x2 = thing->x + thing->radius;
  ADDS.L       RQ9, RQ18, RD27
  MOV.L        RD27, (R2, 204)
// p_maputl.c:691   y2 = thing->y - thing->radius;			
  SUBS.L       RQ23, RQ18, RD27
  MOV.L        RD27, (R2, 200)
  BSR          .L00801DFE, R0

.L00801DFD:
// p_maputl.c:694   {
  MOV.L        (RQ8, 24), RQ9
  MOV.L        (RQ8, 104), RQ18
  SUBS.L       RQ9, RQ18, RD27
  MOV.L        RD27, (R2, 212)
// p_maputl.c:696   y1 = thing->y - thing->radius;
  MOV.L        (RQ8, 28), RQ23
  SUBS.L       RQ23, RQ18, RD27
  MOV.L        RD27, (R2, 208)
// p_maputl.c:698   x2 = thing->x + thing->radius;
  ADDS.L       RQ9, RQ18, RD27
  MOV.L        RD27, (R2, 204)
// p_maputl.c:699   y2 = thing->y + thing->radius;			
  ADDS.L       RQ23, RQ18, RD27
  MOV.L        RD27, (R2, 200)

.L00801DFE:

.L00801DFC:
// p_maputl.c:703   s1 = P_PointOnDivlineSide (x1, y1, &trace);
  MOV          trace, RQ21
  MOV.L        (R2, 212), RD10
  MOV.L        (R2, 208), RD11
  ADD          RQ21, 0, RQ12
  BSR          P_PointOnDivlineSide, R1
  MOV.L        RD10, (R2, 196)
// p_maputl.c:704   s2 = P_PointOnDivlineSide (x2, y2, &trace);
  MOV          trace, RQ22
  MOV.L        (R2, 204), RD10
  MOV.L        (R2, 200), RD11
  ADD          RQ22, 0, RQ12
  BSR          P_PointOnDivlineSide, R1
  ADD          RQ10, 0, RD27
// p_maputl.c:706   if (s1 == s2)
  MOV.L        RD27, (R2, 192)
  MOV.L        (R2, 196), RD26
  BRNE.Q       RD27, RD26, .L00801DFF
// p_maputl.c:707   return true;		// line isn't crossed
  ADD          R0, 1, RD10
  BSR          .L00C02898, R0

.L00801DFF:
// p_maputl.c:709   dl.x = x1;
  MOV.L        (R2, 212), RD27
  ADD          R2, 160, RQ26
  MOV.L        RD27, (RQ26, 0)
// p_maputl.c:710   dl.y = y1;
  MOV.L        (R2, 208), RD25
  MOV.L        RD25, (RQ26, 4)
// p_maputl.c:711   dl.dx = x2-x1;
  MOV.L        (R2, 204), RD24
  SUBS.L       RD24, RD27, RQ9
  MOV.L        RQ9, (RQ26, 8)
// p_maputl.c:712   dl.dy = y2-y1;
  MOV.L        (R2, 200), RD27
  SUBS.L       RD27, RD25, RQ18
  MOV.L        RQ18, (RQ26, 12)
// p_maputl.c:714   frac = P_InterceptVector (&trace, &dl);
  ADD          RQ26, 0, RQ21
  MOV          trace, RQ22
  ADD          RQ22, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          P_InterceptVector, R1
  ADD          RQ10, 0, RD27
// p_maputl.c:716   if (frac < 0)
  MOV.L        RD27, (R2, 156)
  BRGE.L       R0, RD27, .L00801E00
// p_maputl.c:717   return true;		// behind source
  ADD          R0, 1, RD10
  BSR          .L00C02898, R0

.L00801E00:
// p_maputl.c:719   intercept_p->frac = frac;
  MOV.L        (R2, 156), RD27
  MOV.Q        intercept_p, RQ26
  MOV.L        RD27, (RQ26, 0)
// p_maputl.c:720   intercept_p->isaline = false;
  MOV.L        RD0, (RQ26, 4)
// p_maputl.c:721   intercept_p->d.thing = thing;
  ADD          RQ26, 8, RQ25
  MOV.Q        RQ8, (RQ25, 0)
// p_maputl.c:722   intercept_p++;
  ADD          RQ26, 16, RQ26
  MOV.Q        RQ26, intercept_p
// p_maputl.c:724   return true;		// keep going
  ADD          R0, 1, RD10

.L00C02898:
  ADD          R2, 432, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

A_FireMissile:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:556   {
  ADD          RQ8, 160, RQ23
  MOV.L        (RQ8, 116), RQ9
  MOV          weaponinfo, RQ22
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ9
  MOV.L        (RQ23, RQ9), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV.L        (RQ8, 116), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ18
  MOV.L        RQ9, (RQ23, RQ18)
// p_pspr.c:558   P_SpawnPlayerMissile (player->mo, MT_ROCKET);
  MOV.Q        (RQ8, 0), RQ23
  MOV.Q        RQ23, (R2, 88)
  ADD          RQ23, 0, RQ10
  ADD          R0, 33, RD11
  BSR          P_SpawnPlayerMissile, R1

.L00C0289E:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

P_PlayerInSpecialSector:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R27, (R2, 48)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ8
// p_spec.c:1077   sector = player->mo->subsector->sector;
  MOV.Q        (RQ8, 0), RQ9
  MOV.Q        (RQ9, 88), RQ22
  MOV.Q        (RQ22, 0), RQ21
// p_spec.c:1080   if (player->mo->z != sector->floorheight)
  MOV.L        (RQ9, 32), RQ18
  MOV.L        (RQ21, 0), RQ23
  BRNE.Q       RQ23, RQ18, .L00C028A4
// p_spec.c:1084   switch (sector->special)
  MOV.W        (RQ21, 14), RQ18
  BREQ.Q       5, RQ18, .L00802129
  BREQ.Q       7, RQ18, .L0080212A
  BREQ.Q       16, RQ18, .L0080212B
  BREQ.Q       4, RQ18, .L0080212C
  BREQ.Q       9, RQ18, .L0080212D
  BREQ.Q       11, RQ18, .L0080212E
  BSR          .L0080212F, R0

.L00802129:
// p_spec.c:1088   if (!player->powers[pw_ironfeet])
  ADD          RQ8, 48, RQ9
  MOV.L        (RQ9, 12), RQ18
  BRNE.L       R0, RQ18, .L00802130
  MOV.L        leveltime, RD27
  ADD          R0, 31, RD13
  BTSTN.L      RD13, RD27, .L00802131
// p_spec.c:1090   P_DamageMobj (player->mo, NULL, NULL, 10);
  MOV.Q        (RQ8, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADD          R0, 10, RD13
  BSR          P_DamageMobj, R1

.L00802131:

.L00802130:
// p_spec.c:1091   break;
  BSR          .L00802128, R0

.L0080212A:
// p_spec.c:1095   if (!player->powers[pw_ironfeet])
  MOV.L        (RQ8, 60), RQ18
  BRNE.L       R0, RQ18, .L00802132
  MOV.L        leveltime, RD27
  ADD          R0, 31, RD13
  BTSTN.L      RD13, RD27, .L00802133
// p_spec.c:1097   P_DamageMobj (player->mo, NULL, NULL, 5);
  MOV.Q        (RQ8, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADD          R0, 5, RD13
  BSR          P_DamageMobj, R1

.L00802133:

.L00802132:
// p_spec.c:1098   break;
  BSR          .L00802128, R0

.L0080212B:

.L0080212C:
// p_spec.c:1104   if (!player->powers[pw_ironfeet]
  MOV.L        (RQ8, 60), RQ18
  BREQ.L       R0, RQ18, .L00802135
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  BRLT.L       5, RQ23, .L00802135
  BSR          .L00802134, R0

.L00802135:
  MOV.L        leveltime, RD27
  ADD          R0, 31, RD13
  BTSTN.L      RD13, RD27, .L00802137
// p_spec.c:1108   P_DamageMobj (player->mo, NULL, NULL, 20);
  MOV.Q        (RQ8, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADD          R0, 20, RD13
  BSR          P_DamageMobj, R1

.L00802137:

.L00802134:
// p_spec.c:1109   }
  BSR          .L00802128, R0

.L0080212D:
// p_spec.c:1114   player->secretcount++;
  MOV.L        (RQ8, 216), RQ18
  ADDS.L       RQ18, 1, RQ23
  MOV.L        RQ23, (RQ8, 216)
// p_spec.c:1115   sector->special = 0;
  MOV.W        RD0, (RQ21, 14)
// p_spec.c:1116   break;
  BSR          .L00802128, R0

.L0080212E:
// p_spec.c:1120   player->cheats &= ~CF_GODMODE;
  MOV.L        (RQ8, 200), RQ18
  AND          RQ18, -3, RQ23
  MOV.L        RQ23, (RQ8, 200)
// p_spec.c:1122   if (!(leveltime&0x1f))
  MOV.L        leveltime, RD27
  ADD          R0, 31, RD13
  BTSTN.L      RD13, RD27, .L00802138
// p_spec.c:1123   P_DamageMobj (player->mo, NULL, NULL, 20);
  MOV.Q        (RQ8, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ0, 0, RQ12
  ADD          R0, 20, RD13
  BSR          P_DamageMobj, R1

.L00802138:
// p_spec.c:1125   if (player->health <= 10)
  MOV.L        (RQ8, 36), RQ18
  BRGT.L       10, RQ18, .L00802139
// p_spec.c:1126   G_ExitLevel();
  BSR          G_ExitLevel, R1

.L00802139:
// p_spec.c:1127   break;
  BSR          .L00802128, R0

.L0080212F:
// p_spec.c:1136   break;

.L00802128:

.L00C028A4:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R27
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_LoadSideDefs:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  MOV.L        RD10, (R2, 124)
// p_setup.c:972   lsz = W_LumpLength (lump);
  MOV.L        (R2, 124), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD20
// p_setup.c:973   if(lsz % sizeof(mapsidedef_t))
  ADD          R0, 30, R5
  MODS.L       RD20, R5, RQ21
  BREQ.L       R0, RQ21, .L0080201D
// p_setup.c:974   __debugbreak();

P_LoadSideDefs.debugbreak_L04D5:
  BRK          1237

.L0080201D:
// p_setup.c:976   numsides = lsz / sizeof(mapsidedef_t);
  ADD          R0, 30, R5
  DIVS.L       RD20, R5, RD27
// p_setup.c:977   sides = Z_Malloc (numsides*sizeof(side_t),PU_LEVEL_SIDES,0);	
  ADD          R0, 24, R5
  MULS.L       RD27, R5, RQ21
  MOV.L        RD27, numsides
  ADD          RQ21, 0, RD10
  ADD          R0, 59, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, sides
// p_setup.c:978   memset (sides, 0, numsides*sizeof(side_t));
  MOV.L        numsides, RD27
  ADD          R0, 24, R5
  MULS.L       RD27, R5, RQ21
  ADDS.L       RQ21, 0, RQ27
  MOV.Q        sides, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// p_setup.c:979   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 124), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ26
// p_setup.c:981   msd = (mapsidedef_t *)data;
  ADD          RQ26, 0, RQ9
  MOV.Q        RQ26, (R2, 112)
// p_setup.c:982   sd = sides;
  MOV.Q        sides, RQ8
// p_setup.c:983   for (i=0 ; i<numsides ; i++, msd++, sd++)
  ADD          R0, 0, RD22
  MOV.L        numsides, RD25
  BRGE.L       RD25, RD22, .L00802020

.L0080201E:
// p_setup.c:984   {
  MOV.W        (RQ9, 0), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ8, 0)
// p_setup.c:986   sd->rowoffset = SHORT(msd->rowoffset)<<FRACBITS;
  MOV.W        (RQ9, 2), RQ18
  SHAD.L       RQ18, 16, RQ23
  MOV.L        RQ23, (RQ8, 4)
// p_setup.c:987   sd->toptexture = R_TextureNumForName(msd->toptexture);
  ADD          RQ9, 4, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.W        RQ18, (RQ8, 8)
// p_setup.c:988   sd->bottomtexture = R_TextureNumForName(msd->bottomtexture);
  ADD          RQ9, 12, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.W        RQ18, (RQ8, 10)
// p_setup.c:989   sd->midtexture = R_TextureNumForName(msd->midtexture);
  ADD          RQ9, 20, RQ10
  BSR          R_TextureNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.W        RQ18, (RQ8, 12)
// p_setup.c:990   sd->sector = &sectors[SHORT(msd->sector)];
  MOV.W        (RQ9, 28), RQ23
  MOV.Q        sectors, RQ27
  SHAD.L       RQ23, 7, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ26, (RQ8, 16)
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, 1, RD22
  ADD          RQ9, 0, RQ26
  ADD          RQ9, 30, RQ9
  ADD          RQ8, 0, RQ26
  ADD          RQ8, 24, RQ8
  MOV.L        numsides, RD27
  BRLT.L       RD27, RD22, .L0080201E

.L00802020:
// p_setup.c:993   Z_ChangeTag (sides, PU_LEVEL_SIDES);  //BGB: Debug
  MOV.Q        sides, RQ10
  ADD          R0, 59, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:995   Z_Free (data);
  MOV.Q        (R2, 112), RQ10
  BSR          Z_Free, R1

.L00C028AF:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

w_open:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ11, (R2, 80)
// w_wad.c:185   fd=fopen(name, mode);
  ADD          RQ22, 0, RQ10
  MOV.Q        (R2, 80), RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ8
// w_wad.c:186   if(!fd)
  BRNE.Q       R0, RQ8, .L00802888
// w_wad.c:187   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C028B6, R0

.L00802888:
// w_wad.c:189   for(i=0; i<32; i++)
  ADD          R0, 0, RD18

.L00802889:
// w_wad.c:190   if(!(w_m_openfiles&(1<<i)))
  ADD          R0, 1, RD13
  SHAD.L       RD13, RD18, RQ9
  MOVU.L       w_m_openfiles, RD12
  BTST.L       RQ9, RD12, .L0080288B
  ADDS.L       RD18, 1, RD18
  BRLT.L       32, RD18, .L00802889

.L0080288B:
// w_wad.c:193   if(i>=32)
  BRLT.L       32, RD18, .L0080288C
// w_wad.c:194   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C028B6, R0

.L0080288C:
// w_wad.c:196   w_m_openfiles|=(1<<i);
  ADD          R0, 1, RD13
  SHAD.L       RD13, RD18, RQ9
  ADDU.L       RQ9, R0, RQ23
  MOVU.L       w_m_openfiles, RD12
  OR           RD12, RQ23, RD12
  MOV.L        RD12, w_m_openfiles
// w_wad.c:198   w_openfiles[i]=fd;
  MOV          w_openfiles, RQ12
  MOV.Q        RQ8, (RQ12, RD18)
// w_wad.c:199   return(i);
  ADD          RD18, 0, RD10

.L00C028B6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Metal:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 85, RD9
// p_enemy.c:1799   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 85, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1801   A_Chase (mo);
  ADD          RQ18, 0, RQ10
  BSR          A_Chase, R1

.L00C028BC:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_PointToDist2:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -288, R2
  ADD          RD10, 0, RD20
  MOV.L        RD11, (R2, 72)
// r_main.c:433   trx = x - viewx;
  MOV.L        viewx, RD27
  SUBS.L       RD20, RD27, RD8
// r_main.c:434   try = y - viewy;
  MOV.L        (R2, 72), RD27
  MOV.L        viewy, RD26
  SUBS.L       RD27, RD26, RD23
// r_main.c:435   gxt = FixedMul(trx,viewcos); 
  ADDS.L       RD8, 0, RD10
  MOV.L        viewcos, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RD9
// r_main.c:436   gyt = -FixedMul(try,viewsin); 
  ADD          RD23, 0, RD10
  MOV.L        viewsin, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RD22
// r_main.c:437   tz = gxt-gyt;
  SUBS.L       RD9, RD22, RD21
// r_main.c:439   return(tz);
  ADD          RD21, 0, RD10

.L00C028C2:
  ADD          R2, 288, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_UnArchivePlayers:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 32)
  ADD          R2, -344, R2
// p_saveg.c:85   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          RD0, 0, RD18

.L00802325:
// p_saveg.c:86   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ22
  BREQ.L       R0, RQ22, .L00802326
// p_saveg.c:90   PADSAVEP();
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  AND          RQ8, 3, RQ23
  ADD          R0, 4, RQ21
  SUB          RQ21, RQ23, RQ8
  AND          RQ8, 3, RQ23
  ADD          RQ27, RQ23, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:92   memcpy (&players[i],save_p, sizeof(player_t));
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        save_p, RQ27
  ADD          RQ26, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          __memcpy64_320, R1
// p_saveg.c:93   save_p += sizeof(player_t);
  MOV.Q        save_p, RQ27
  ADD          RQ27, 320, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:96   players[i].mo = NULL;	
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        RQ0, (RQ13, 0)
// p_saveg.c:97   players[i].message = NULL;
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        RQ0, (RQ13, 224)
// p_saveg.c:98   players[i].attacker = NULL;
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        RQ0, (RQ13, 240)
// p_saveg.c:100   for (j=0 ; j<NUMPSPRITES ; j++)
  ADD          RD0, 0, RD9

.L00802328:
// p_saveg.c:101   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 264, RQ27
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        (RQ13, 0), RQ27
  BREQ.Q       R0, RQ27, .L0080232B
// p_saveg.c:103   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 264, RQ13
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ13
  MOV          states, RQ11
  ADD          R0, 40, R5
  MUL.L        RQ13, R5, RQ10
  ADD          RQ11, RQ10, RQ10
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 264, RQ13
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ10, (RQ12, 0)

.L0080232B:
  ADDS.L       RD9, 1, RD9
  BRLT.L       2, RD9, .L00802328

.L0080232A:

.L00802326:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802325

.L00802327:

.L00C028C8:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

G_DoSaveGame:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -504, R2
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 120)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 112)
// g_game.c:1294   {
// g_game.c:1296   char	name2[VERSIONSIZE];
// g_game.c:1301   if (M_CheckParm("-cdrom"))
  MOV          .L00C01727, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L008015E5
// g_game.c:1302   sprintf(name,"c:\\doomdata\\"SAVEGAMENAME"%d.dsg",savegameslot);
  ADD          R2, 128, RQ10
  MOV          .L00C01728, RQ11
  MOV.L        savegameslot, RD12
  BSR          sprintf, R1
  BSR          .L008015E6, R0

.L008015E5:
// g_game.c:1304   sprintf (name,SAVEGAMENAME"%d.dsg",savegameslot);
  ADD          R2, 128, RQ10
  MOV          .L00C01729, RQ11
  MOV.L        savegameslot, RD12
  BSR          sprintf, R1

.L008015E6:
// g_game.c:1305   description = savedescription;
  MOV          savedescription, RQ22
// g_game.c:1307   save_p = savebuffer = (byte *)(screens[1]+0x4000);
  MOV          screens, RQ21
  MOV.Q        (RQ21, 8), RQ18
  ADD          RQ18, 0x00008000, RQ23
  MOV.Q        RQ23, savebuffer
  MOV.Q        RQ23, save_p
// g_game.c:1309   memcpy (save_p, description, SAVESTRINGSIZE);
  MOV.Q        save_p, RQ21
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        RQ10, (RQ21, 0)
  MOV.Q        RQ11, (RQ21, 8)
  MOV.Q        RQ12, (RQ21, 16)
// g_game.c:1310   save_p += SAVESTRINGSIZE;
  MOV.Q        save_p, RQ21
  ADD          RQ21, 24, RQ21
  MOV.Q        RQ21, save_p
// g_game.c:1311   memset (name2,0,sizeof(name2));
  ADD          R2, 240, RQ21
  MOV.Q        RQ0, (RQ21, 0)
  MOV.Q        RQ0, (RQ21, 8)
// g_game.c:1312   sprintf (name2,"version %i",VERSION);
  ADD          RQ21, 0, RQ10
  MOV          .L00C028CF, RQ11
  ADD          R0, 110, RD12
  BSR          sprintf, R1
// g_game.c:1313   memcpy (save_p, name2, VERSIONSIZE);
  MOV.Q        save_p, RQ20
  MOV.Q        (RQ21, 0), RQ10
  MOV.Q        (RQ21, 8), RQ11
  MOV.Q        RQ10, (RQ20, 0)
  MOV.Q        RQ11, (RQ20, 8)
// g_game.c:1314   save_p += VERSIONSIZE;
  MOV.Q        save_p, RQ20
  ADD          RQ20, 16, RQ20
// g_game.c:1316   *save_p++ = gameskill;
  ADD          RQ20, 0, RQ18
  ADD          RQ20, 1, RQ20
  MOV.L        gameskill, RD27
  MOVU.B       RD27, (RQ18, 0)
// g_game.c:1317   *save_p++ = gameepisode;
  ADD          RQ20, 0, RQ23
  ADD          RQ20, 1, RQ20
  MOV.L        gameepisode, RD27
  MOVU.B       RD27, (RQ23, 0)
// g_game.c:1318   *save_p++ = gamemap;
  ADD          RQ20, 0, RQ18
  ADD          RQ20, 1, RQ20
  MOV.Q        RQ20, save_p
  MOV.L        gamemap, RD20
  MOVU.B       RD20, (RQ18, 0)
// g_game.c:1319   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L008015E7:
// g_game.c:1320   *save_p++ = playeringame[i];
  MOV          playeringame, RQ21
  MOV.L        (RQ21, RD9), RQ8
  MOV.Q        save_p, RQ21
  ADD          RQ21, 0, RQ18
  ADD          RQ21, 1, RQ21
  MOV.Q        RQ21, save_p
  MOVU.B       RQ8, (RQ18, 0)
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L008015E7

.L008015E9:
// g_game.c:1321   *save_p++ = leveltime>>16;
  MOV.L        leveltime, RD21
  SHAR         RD21, 16, RQ8
  MOV.Q        save_p, RQ20
  ADD          RQ20, 0, RQ18
  ADD          RQ20, 1, RQ20
  MOVU.B       RQ8, (RQ18, 0)
// g_game.c:1322   *save_p++ = leveltime>>8;
  SHAR         RD21, 8, RQ8
  ADD          RQ20, 0, RQ18
  ADD          RQ20, 1, RQ20
  MOVU.B       RQ8, (RQ18, 0)
// g_game.c:1323   *save_p++ = leveltime;
  ADD          RQ20, 0, RQ23
  ADD          RQ20, 1, RQ20
  MOV.Q        RQ20, save_p
  MOVU.B       RD21, (RQ23, 0)
// g_game.c:1325   P_ArchivePlayers ();
  BSR          P_ArchivePlayers, R1
// g_game.c:1326   P_ArchiveWorld ();
  BSR          P_ArchiveWorld, R1
// g_game.c:1327   P_ArchiveThinkers ();
  BSR          P_ArchiveThinkers, R1
// g_game.c:1328   P_ArchiveSpecials ();
  BSR          P_ArchiveSpecials, R1
// g_game.c:1330   *save_p++ = 0x1d;		// consistancy marker
  MOV.Q        save_p, RQ21
  ADD          RQ21, 0, RQ18
  ADD          RQ21, 1, RQ21
  ADD          R0, 29, RD20
  MOVU.B       RD20, (RQ18, 0)
// g_game.c:1332   length = save_p - savebuffer;
  MOV.Q        savebuffer, RQ27
  SUB          RQ21, RQ27, RQ13
  MOV.Q        RQ21, save_p
  ADDS.L       RQ13, 0, RD21
// g_game.c:1333   if (length > SAVEGAMESIZE)
  MOV.L        RD21, (R2, 108)
  LUI          44, RD27
  BRLE.L       RD27, RD21, .L008015EA
// g_game.c:1334   I_Error ("Savegame buffer overrun");
  MOV          .L00C028D0, RQ10
  BSR          I_Error, R1

.L008015EA:
// g_game.c:1335   M_WriteFile (name, savebuffer, length);
  ADD          R2, 128, RQ10
  MOV.Q        savebuffer, RQ11
  MOV.L        (R2, 108), RD12
  BSR          M_WriteFile, R1
// g_game.c:1336   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1337   savedescription[0] = 0;
  MOV          savedescription, RQ21
  MOV.B        RD0, (RQ21, 0)
// g_game.c:1339   players[consoleplayer].message = GGSAVED;
  MOV          players, RQ21
  MOV.L        consoleplayer, RD20
  ADD          R0, 320, R5
  MUL.L        RD20, R5, RQ27
  ADD          RQ21, RQ27, RQ27
  MOV          .L00C028D1, RQ21
  MOV.Q        RQ21, (RQ27, 224)
// g_game.c:1342   R_FillBackScreen ();
  BSR          R_FillBackScreen, R1

.L00C028CE:
  ADD          R2, 504, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_closedir:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1539   
  BREQ.Q       R0, RQ9, .L00800BC3
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800BC3
  BSR          .L00800BC4, R0

.L00800BC3:
// tk_core/tk_vfile.c:1541   

tk_closedir.debugbreak_L04E0:
  BRK          1248

.L00800BC4:
// tk_core/tk_vfile.c:1543   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800BC5
// tk_core/tk_vfile.c:1544   

tk_closedir.debugbreak_L04E1:
  BRK          1249

.L00800BC5:
// tk_core/tk_vfile.c:1546   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 160), RQ8
  BREQ.Q       R0, RQ8, .L00800BC6
// tk_core/tk_vfile.c:1547   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 160), RQ22
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C028E1, R0

.L00800BC6:
// tk_core/tk_vfile.c:1548   
  ADD          R0, -1, RD10

.L00C028E1:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_drawCrosshair:
// am_map.c:1341   {
  MOV.L        TU7A00C41B/f_h, RD13
  ADDS.L       RD13, 1, RQ12
  MOV.L        TU7A00C41B/f_w, RD11
  MULS.L       RD11, RQ12, RQ17
  ADD          RQ17, 0, RQ12
  ADD          R0, 2, RD16
  DIVS.L       RQ12, RD16, RQ12
  MOV.Q        TU7A00C41B/fb, RQ15
  MOVU.W       RD10, (RQ15, RQ12)

.L00C028E4:
  JSR          R1, 0, R0

A_LoadShotgun2:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
  ADD          R0, 7, RD8
// p_enemy.c:1822   {
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 7, RD11
  BSR          S_StartSound, R1

.L00C028EA:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_alloc_dir:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -360, R2
// tk_core/tk_vfile.c:324   
  BSR          tk_alloc_file, R1

.L00C028F0:
  ADD          R2, 360, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

M_SoftDivS:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD21
  ADD          RD11, 0, RD22
// m_fixed.c:283   {
  OR           RD21, RD22, RQ20
  BRGE.L       R0, RQ20, .L00801759
  BRGE.L       R0, RD21, .L0080175A
  BRGE.L       R0, RD22, .L0080175B
// m_fixed.c:289   { return( M_SoftDivU(-a, -b)); }
  SUBS.L       RD0, RD22, RQ20
  SUBS.L       R0, RD21, RQ27
  ADDU.L       RQ27, R0, RQ18
  ADDU.L       RQ20, R0, RQ26
  ADD          RQ18, 0, RD10
  ADD          RQ26, 0, RD11
  BSR          M_SoftDivU, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ23, 0, RQ18
  ADD          RQ18, 0, RD10
  BSR          .L00C028F6, R0
  BSR          .L0080175C, R0

.L0080175B:
// m_fixed.c:291   { return(-M_SoftDivU(-a,  b)); }
  SUBS.L       R0, RD21, RQ27
  ADDU.L       RQ27, R0, RQ18
  ADDU.L       RD22, R0, RQ9
  ADD          RQ18, 0, RD10
  ADDU.L       RQ9, R0, RD11
  BSR          M_SoftDivU, R1
  ADD          RQ10, 0, RQ23
  SUBU.L       R0, RQ23, RQ18
  ADDS.L       RQ18, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C028F6, R0

.L0080175C:
  BSR          .L0080175D, R0

.L0080175A:
  BRGE.L       R0, RD22, .L0080175E
// m_fixed.c:295   { return(-M_SoftDivU(a, -b)); }
  SUBS.L       R0, RD22, RQ23
  ADDU.L       RD21, R0, RQ9
  ADDU.L       RQ23, R0, RQ8
  ADDU.L       RQ9, R0, RD10
  ADDU.L       RQ8, R0, RD11
  BSR          M_SoftDivU, R1
  ADD          RQ10, 0, RQ18
  SUBU.L       R0, RQ18, RQ9
  ADDS.L       RQ9, 0, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          .L00C028F6, R0
  BSR          .L0080175F, R0

.L0080175E:
// m_fixed.c:297   { return( M_SoftDivU(a,  b)); }
  ADDU.L       RD21, R0, RQ9
  ADDU.L       RD22, R0, RQ8
  ADDU.L       RQ9, R0, RD10
  ADDU.L       RQ8, R0, RD11
  BSR          M_SoftDivU, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          .L00C028F6, R0

.L0080175F:

.L0080175D:

.L00801759:
// m_fixed.c:301   return(M_SoftDivU(a, b));
  ADDU.L       RD21, R0, RQ18
  ADDU.L       RD22, R0, RQ9
  ADD          RQ18, 0, RD10
  ADDU.L       RQ9, R0, RD11
  BSR          M_SoftDivU, R1
  ADDU.L       RQ10, R0, RQ8
  ADDS.L       RQ8, 0, RQ18
  ADD          RQ18, 0, RD10

.L00C028F6:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_AcsThingDeactivate:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 108)
// p_acspec.c:99   idx=NULL;
  ADD          R0, 0, RQ22
  MOV.Q        RQ22, (R2, 96)
// p_acspec.c:100   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 96, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 108), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:101   while(obj)
  BSR          .L0080189A, R0

.L00801898:
// p_acspec.c:102   {
  MOV.L        (RQ18, 160), RQ8
  OR           RQ8, 0x10000000, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_acspec.c:105   obj=EV_FindMObjForTid2(&idx, tid);
  ADD          R2, 96, RQ9
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 108), RD11
  BSR          EV_FindMObjForTid2, R1
  ADD          RQ10, 0, RQ18

.L0080189A:
  BRNE.Q       R0, RQ18, .L00801898

.L00801899:

.L00C028FC:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

M_ReadFile:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ11, (R2, 80)
// m_misc.c:155   fd = fopen (name, "rb");
  ADD          RQ22, 0, RQ10
  MOV          .L00C01607, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ18
// m_misc.c:156   if (!fd)
  BRNE.Q       R0, RQ18, .L00801717
// m_misc.c:157   I_Error ("Couldn't read file %s", name);
  MOV          .L00C02903, RQ10
  ADD          RQ22, 0, RQ11
  BSR          I_Error, R1

.L00801717:
// m_misc.c:159   fseek(fd, 0, 2);
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 2, RD12
  BSR          fseek, R1
// m_misc.c:160   length=ftell(fd);
  ADD          RQ18, 0, RQ10
  BSR          ftell, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RD8
// m_misc.c:161   fseek(fd, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          fseek, R1
// m_misc.c:163   buf = Z_Malloc (length, PU_STATIC, NULL);
  ADDS.L       RD8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ23
// m_misc.c:164   count = fread (buf, 1, length, fd);
  ADDS.L       RD8, 0, RQ21
  ADD          RQ23, 0, RQ10
  ADD          R0, 1, RQ11
  ADD          RQ21, 0, RQ12
  ADD          RQ18, 0, RQ13
  BSR          fread, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RD20
// m_misc.c:165   fclose (fd);
  ADD          RQ18, 0, RQ10
  BSR          fclose, R1
// m_misc.c:167   if (count < length)
  BRGE.L       RD8, RD20, .L00801718
// m_misc.c:168   I_Error ("Couldn't read file %s", name);
  MOV          .L00C02903, RQ10
  ADD          RQ22, 0, RQ11
  BSR          I_Error, R1

.L00801718:
// m_misc.c:170   *buffer = buf;
  MOV.Q        (R2, 80), RQ13
  MOV.Q        RQ23, (RQ13, 0)
// m_misc.c:171   return length;
  ADDS.L       RD8, 0, RD10

.L00C02902:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

M_DoSave:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
// m_menu.c:645   {
  MOV          savegamestrings, RQ9
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ11
  ADD          RQ9, RQ11, RQ11
  ADD          RD18, 0, RD10
  BSR          G_SaveGame, R1
// m_menu.c:647   M_ClearMenus ();
  BSR          M_ClearMenus, R1
// m_menu.c:650   if (quickSaveSlot == -2)
  MOV.L        quickSaveSlot, RD9
  BRNE.Q       -2, RD9, .L0080163F
// m_menu.c:651   quickSaveSlot = slot;
  MOV.L        RD18, quickSaveSlot

.L0080163F:

.L00C02909:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_initNoState:
  ADD          R2, -32, R2
  MOV.X        R22, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -256, R2
  MOV.L        TU7A00CB85/state, RD18
  MOV.L        TU7A00CB85/acceleratestage, RD9
  MOV.L        TU7A00CB85/cnt, RD23
  ADD          R0, 10, RD22
// wi_stuff.c:754   {
  ADD          R0, -1, RD18
// wi_stuff.c:756   acceleratestage = 0;
  ADD          RD0, 0, RD9
// wi_stuff.c:757   cnt = 10;
  ADD          RD22, 0, RD23

.L00C0290F:
  MOV.L        RD18, TU7A00CB85/state
  MOV.L        RD9, TU7A00CB85/acceleratestage
  MOV.L        RD23, TU7A00CB85/cnt
  ADD          R2, 256, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.X        (R2, 16), R22
  ADD          R2, 32, R2
  JSR          R1, 0, R0
  .balign 4

P_CheckMissileSpawn:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ18
// p_mobj.c:929   {
  MOV.L        (RQ18, 144), RQ23
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 3, RQ8
  SUBS.L       RQ23, RQ8, RQ9
  MOV.L        RQ9, (RQ18, 144)
// p_mobj.c:931   if (th->tics < 1)
  MOV.L        (RQ18, 144), RQ8
  BRGE.L       1, RQ8, .L008022D5
// p_mobj.c:932   th->tics = 1;
  ADD          R0, 1, RD23
  MOV.L        RD23, (RQ18, 144)

.L008022D5:
// p_mobj.c:936   th->x += (th->momx>>1);
  MOV.L        (RQ18, 24), RQ23
  MOV.L        (RQ18, 112), RQ9
  SHAR         RQ9, 1, RQ8
  ADDS.L       RQ23, RQ8, RQ9
  MOV.L        RQ9, (RQ18, 24)
// p_mobj.c:937   th->y += (th->momy>>1);
  MOV.L        (RQ18, 28), RQ8
  MOV.L        (RQ18, 116), RQ23
  SHAR         RQ23, 1, RQ9
  ADDS.L       RQ8, RQ9, RQ23
  MOV.L        RQ23, (RQ18, 28)
// p_mobj.c:938   th->z += (th->momz>>1);
  MOV.L        (RQ18, 32), RQ9
  MOV.L        (RQ18, 120), RQ8
  SHAR         RQ8, 1, RQ23
  ADDS.L       RQ9, RQ23, RQ8
  MOV.L        RQ8, (RQ18, 32)
// p_mobj.c:940   if (!P_TryMove (th, th->x, th->y))
  MOV.L        (RQ18, 28), RQ23
  MOV.L        (RQ18, 24), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          P_TryMove, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008022D6
// p_mobj.c:941   P_ExplodeMissile (th);
  ADD          RQ18, 0, RQ10
  BSR          P_ExplodeMissile, R1

.L008022D6:

.L00C02915:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_DlGetApiContextA:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -416, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.Q        RQ11, (R2, 96)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_core/tk_env.c:383   
// tk_core/tk_env.c:398   
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (R2, 80)
// tk_core/tk_env.c:399   
  ADD          R2, 112, RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        (R2, 104), RQ23
  MOV.Q        RQ23, (RQ8, 0)
// tk_core/tk_env.c:400   
  ADD          RQ9, 8, RQ8
  MOV.Q        (R2, 96), RQ22
  MOV.Q        RQ22, (RQ8, 0)
// tk_core/tk_env.c:401   
  ADD          R2, 80, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4125, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_env.c:402   
  MOV.Q        (R2, 80), RQ10

.L00C0291B:
  ADD          R2, 416, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

ST_initData:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          R0, 1, RD23
// st_stuff.c:1357   st_firsttime = true;
  MOV.L        RD23, TU7A00CB73/st_firsttime
// st_stuff.c:1358   plyr = &players[consoleplayer];
  MOV          players, RQ13
  MOV.L        consoleplayer, RD12
  ADD          R0, 320, R5
  MUL.L        RD12, R5, RQ11
  ADD          RQ13, RQ11, RQ11
  MOV.Q        RQ11, TU7A00CB73/plyr
// st_stuff.c:1360   st_clock = 0;
  MOV.L        RD0, TU7A00CB73/st_clock
// st_stuff.c:1361   st_chatstate = StartChatState;
  MOV.L        RD0, TU7A00CB73/st_chatstate
// st_stuff.c:1362   st_gamestate = FirstPersonState;
  MOV.L        RD23, TU7A00CB73/st_gamestate
// st_stuff.c:1364   st_statusbaron = true;
  MOV.L        RD23, TU7A00CB73/st_statusbaron
// st_stuff.c:1365   st_oldchat = st_chat = false;
  MOV.L        RD0, TU7A00CB73/st_chat
  MOV.L        RD0, TU7A00CB73/st_oldchat
// st_stuff.c:1366   st_cursoron = false;
  MOV.L        RD0, TU7A00CB73/st_cursoron
// st_stuff.c:1368   st_faceindex = 0;
  MOV.L        RD0, TU7A00CB73/st_faceindex
// st_stuff.c:1369   st_palette = -1;
  ADD          R0, -1, RD13
  MOV.L        RD13, TU7A00CB73/st_palette
// st_stuff.c:1371   st_oldhealth = -1;
  MOV.L        RD13, TU7A00CB73/st_oldhealth
// st_stuff.c:1373   for (i=0;i<NUMWEAPONS;i++)
  ADD          RD0, 0, RD18

.L00802C53:
// st_stuff.c:1374   oldweaponsowned[i] = plyr->weaponowned[i];
  MOV.Q        TU7A00CB73/plyr, RQ13
  ADD          RQ13, 124, RQ12
  MOV.L        (RQ12, RD18), RQ9
  MOV          TU7A00CB73/oldweaponsowned, RQ13
  MOV.L        RQ9, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802C53

.L00802C55:
// st_stuff.c:1376   for (i=0;i<3;i++)
  ADD          RD0, 0, RD18

.L00802C56:
// st_stuff.c:1377   keyboxes[i] = -1;
  MOV          TU7A00CB73/keyboxes, RQ13
  ADD          R0, -1, RD12
  MOV.L        RD12, (RQ13, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       3, RD18, .L00802C56

.L00802C58:
// st_stuff.c:1379   STlib_init();
  BSR          STlib_init, R1

.L00C02921:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ChangeMessages:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -320, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1024   choice = 0;
  ADD          R0, 0, RD9
// m_menu.c:1025   showMessages = 1 - showMessages;
  MOV.L        showMessages, RD13
  ADD          R0, 1, R5
  SUBS.L       R5, RD13, RQ18
  ADD          RQ18, 0, RD13
// m_menu.c:1027   if (!showMessages)
  MOV.L        RD13, showMessages
  BRNE.L       R0, RD13, .L00801668
// m_menu.c:1028   players[consoleplayer].message = MSGOFF;
  MOV          players, RQ13
  MOV.L        consoleplayer, RD12
  ADD          R0, 320, R5
  MUL.L        RD12, R5, RQ11
  ADD          RQ13, RQ11, RQ11
  MOV          .L00C02928, RQ13
  MOV.Q        RQ13, (RQ11, 224)
  BSR          .L00801669, R0

.L00801668:
// m_menu.c:1030   players[consoleplayer].message = MSGON ;
  MOV          players, RQ13
  MOV.L        consoleplayer, RD12
  ADD          R0, 320, R5
  MUL.L        RD12, R5, RQ11
  ADD          RQ13, RQ11, RQ11
  MOV          .L00C02929, RQ13
  MOV.Q        RQ13, (RQ11, 224)

.L00801669:
// m_menu.c:1032   message_dontfuckwithme = true;
  ADD          R0, 1, RD13
  MOV.L        RD13, message_dontfuckwithme

.L00C02927:
  ADD          R2, 320, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0
  .balign 4

tk_print_hexptr:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 32, RQ23
  ADD          R0, 4, RD22
// tk_core/tk_puts.c:1202   
  SHAR.Q       RQ9, 32, RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  BSR          tk_print_hex_n, R1
// tk_core/tk_puts.c:1205   
  ADDU.L       RQ9, R0, RQ8
  ADDU.L       RQ8, R0, RD10
  BSR          tk_print_hex, R1

.L00C0292F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

w_lseek:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD18
  MOV.L        RD11, (R2, 72)
  MOV.L        RD12, (R2, 68)
  ADD          R0, 32, RD23
// w_wad.c:228   if(hdl<0)
  BRGE.L       R0, RD18, .L00802890
// w_wad.c:229   __debugbreak();

w_lseek.debugbreak_L04F1:
  BRK          1265

.L00802890:
// w_wad.c:231   if(hdl>=32)
  BRLT.L       32, RD18, .L00802891
// w_wad.c:232   __debugbreak();

w_lseek.debugbreak_L04F2:
  BRK          1266

.L00802891:
// w_wad.c:235   fd=w_openfiles[hdl];
  MOV          w_openfiles, RQ13
  MOV.Q        (RQ13, RD18), RQ9
// w_wad.c:236   if(!fd)
  BRNE.Q       R0, RQ9, .L00802892
// w_wad.c:237   __debugbreak();

w_lseek.debugbreak_L04F3:
  BRK          1267

.L00802892:
// w_wad.c:240   i=fseek(fd, ofs, set);
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 72), RD11
  MOV.L        (R2, 68), RD12
  BSR          fseek, R1
// w_wad.c:241   return(i);

.L00C02944:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

M_ScreenShot:
// m_misc.c:543   void M_ScreenShot (void)

.L00C02948:
  JSR          R1, 0, R0

__close:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// pdpc201/btshx_supa.c:459   
  BRGE.L       3, RD18, .L00800FB1
// pdpc201/btshx_supa.c:460   

__close.debugbreak_L0503:
  BRK          1283

.L00800FB1:
  BRLT.L       256, RD18, .L00800FB2
// pdpc201/btshx_supa.c:462   

__close.debugbreak_L0504:
  BRK          1284

.L00800FB2:
  MOV          btshx_tk_handles, RQ8
  MOV.Q        (RQ8, RD18), RQ9
// pdpc201/btshx_supa.c:464   
  BRNE.Q       R0, RQ9, .L00800FB3
// pdpc201/btshx_supa.c:465   

__close.debugbreak_L0505:
  BRK          1285

.L00800FB3:
// pdpc201/btshx_supa.c:468   
  MOV          btshx_tk_handles, RQ8
  MOV.Q        RQ0, (RQ8, RD18)
// pdpc201/btshx_supa.c:469   
  ADD          RQ9, 0, RQ10
  BSR          tk_fclose, R1

.L00C0295D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

R_InitTables:
// r_main.c:535   {
  MOV          finesine, RQ13
  ADD          RQ13, 8192, RQ12
  MOV.Q        RQ12, finecosine

.L00C02961:
  JSR          R1, 0, R0

A_Light2:
// p_pspr.c:784   {
  ADD          R0, 2, RD13
  MOV.L        RD13, (RQ10, 248)

.L00C02962:
  JSR          R1, 0, R0
  .balign 4

G_DoLoadGame:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// g_game.c:1229   char	vcheck[VERSIONSIZE];
// g_game.c:1231   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1233   length = M_ReadFile (savename, &savebuffer);
  MOV          savebuffer, RQ8
  MOV          savename, RQ10
  ADD          RQ8, 0, RQ11
  BSR          M_ReadFile, R1
  ADD          RQ10, 0, RD23
// g_game.c:1234   save_p = savebuffer + SAVESTRINGSIZE;
  MOV.Q        savebuffer, RQ27
  ADD          RQ27, 24, RQ26
  MOV.Q        RQ26, save_p
// g_game.c:1237   memset (vcheck,0,sizeof(vcheck));
  ADD          R2, 112, RQ27
  MOV.Q        RQ0, (RQ27, 0)
  MOV.Q        RQ0, (RQ27, 8)
// g_game.c:1238   sprintf (vcheck,"version %i",VERSION);
  ADD          RQ27, 0, RQ10
  MOV          .L00C028CF, RQ11
  ADD          R0, 110, RD12
  BSR          sprintf, R1
// g_game.c:1239   if (strcmp ((const char *)save_p, vcheck))
  MOV.Q        save_p, RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00C02968
// g_game.c:1241   save_p += VERSIONSIZE;
  MOV.Q        save_p, RQ27
  ADD          RQ27, 16, RQ27
// g_game.c:1243   gameskill = *save_p++;
  MOVU.B       (RQ27, 0), RD26
  ADD          RQ27, 1, RQ27
  MOV.L        RD26, gameskill
// g_game.c:1244   gameepisode = *save_p++;
  MOVU.B       (RQ27, 0), RD26
  ADD          RQ27, 1, RQ27
  MOV.L        RD26, gameepisode
// g_game.c:1245   gamemap = *save_p++;
  MOVU.B       (RQ27, 0), RD26
  ADD          RQ27, 1, RQ27
  MOV.L        RD26, gamemap
  MOV.Q        RQ27, save_p
// g_game.c:1246   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L008015E0:
// g_game.c:1247   playeringame[i] = *save_p++;
  MOV.Q        save_p, RQ27
  MOVU.B       (RQ27, 0), RQ9
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, save_p
  MOV          playeringame, RQ27
  MOV.L        RQ9, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008015E0

.L008015E2:
// g_game.c:1250   G_InitNew (gameskill, gameepisode, gamemap);
  MOV.L        gameskill, RD10
  MOV.L        gameepisode, RD11
  MOV.L        gamemap, RD12
  BSR          G_InitNew, R1
// g_game.c:1253   a = *save_p++;
  MOV.Q        save_p, RQ27
  MOVU.B       (RQ27, 0), RD22
  ADD          RQ27, 1, RQ27
// g_game.c:1254   b = *save_p++;
  MOVU.B       (RQ27, 0), RD21
  ADD          RQ27, 1, RQ27
// g_game.c:1255   c = *save_p++;
  MOVU.B       (RQ27, 0), RD26
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, save_p
// g_game.c:1256   leveltime = (a<<16) + (b<<8) + c;
  SHAD.L       RD22, 16, RQ9
  SHAD.L       RD21, 8, RQ20
  ADDS.L       RQ9, RQ20, RQ27
  ADDS.L       RQ27, RD26, RD25
  MOV.L        RD25, leveltime
  MOV.L        RD26, (R2, 108)
// g_game.c:1259   P_UnArchivePlayers ();
  BSR          P_UnArchivePlayers, R1
// g_game.c:1260   P_UnArchiveWorld ();
  BSR          P_UnArchiveWorld, R1
// g_game.c:1261   P_UnArchiveThinkers ();
  BSR          P_UnArchiveThinkers, R1
// g_game.c:1262   P_UnArchiveSpecials ();
  BSR          P_UnArchiveSpecials, R1
// g_game.c:1264   if (*save_p != 0x1d)
  MOV.Q        save_p, RQ25
  MOVU.B       (RQ25, 0), RQ9
  BREQ.Q       29, RQ9, .L008015E3
// g_game.c:1265   I_Error ("Bad savegame");
  MOV          .L00C02969, RQ10
  BSR          I_Error, R1

.L008015E3:
// g_game.c:1268   Z_Free (savebuffer);
  MOV.Q        savebuffer, RQ10
  BSR          Z_Free, R1
// g_game.c:1270   if (setsizeneeded)
  MOV.L        setsizeneeded, RD27
  BREQ.L       R0, RD27, .L008015E4
// g_game.c:1271   R_ExecuteSetViewSize ();
  BSR          R_ExecuteSetViewSize, R1

.L008015E4:
// g_game.c:1274   R_FillBackScreen ();
  BSR          R_FillBackScreen, R1

.L00C02968:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

P_AcsRun_SetLineSpecial:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -408, R2
  MOV.Q        RQ10, (R2, 184)
  ADD          RD11, 0, RD23
  ADD          RD12, 0, RD22
  ADD          RD13, 0, RD21
  ADD          RD14, 0, RD20
  MOV.L        RD15, (R2, 164)
  MOV.L        RD16, (R2, 160)
  MOV.L        RD17, (R2, 156)
// p_acspec.c:929   printf("P_AcsRun_SetLineSpecial: a1=%d a2=%d a3=%d "
  MOV          .L00C02970, RQ10
  ADD          RD23, 0, RD11
  ADD          RD22, 0, RD12
  ADD          RD21, 0, RD13
  ADD          RD20, 0, RD14
  MOV.L        (R2, 164), RD15
  MOV.L        (R2, 160), RD16
  MOV.L        (R2, 156), RD17
  BSR          printf, R1
// p_acspec.c:933   idx=0;
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 152)
// p_acspec.c:934   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 152, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:935   while(ld)
  BSR          .L00801946, R0

.L00801944:
// p_acspec.c:936   {
  MOVU.B       RD22, (RQ18, 30)
// p_acspec.c:938   ld->arg1=a3;
  MOVU.B       RD21, (RQ18, 31)
// p_acspec.c:939   ld->arg2=a4;
  MOVU.B       RD20, (RQ18, 32)
// p_acspec.c:940   ld->arg3=a5;
  MOV.L        (R2, 164), RD27
  MOVU.B       RD27, (RQ18, 33)
// p_acspec.c:941   ld->arg4=a6;
  MOV.L        (R2, 160), RD13
  MOVU.B       RD13, (RQ18, 34)
// p_acspec.c:942   ld->arg5=a7;
  MOV.L        (R2, 156), RD12
  MOVU.B       RD12, (RQ18, 35)
// p_acspec.c:944   if(ld->acs_spec)
  MOVU.B       (RQ18, 30), RQ8
  BREQ.L       R0, RQ8, .L00801947
// p_acspec.c:945   {
  ADD          R0, 1024, RD27
  MOV.W        RD27, (RQ18, 26)
  BSR          .L00801948, R0

.L00801947:
// p_acspec.c:948   {
  MOV.W        RD0, (RQ18, 26)

.L00801948:
// p_acspec.c:952   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 152, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ18

.L00801946:
  BRNE.Q       R0, RQ18, .L00801944

.L00801945:

.L00C0296F:
  ADD          R2, 408, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

A_OpenShotgun2:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 80)
  ADD          R0, 5, RD8
// p_enemy.c:1814   {
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          S_StartSound, R1

.L00C02976:
  ADD          R2, 368, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_addMark:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -304, R2
// am_map.c:380   {
  MOV.L        TU7A00C41B/m_w, RQ18
  ADD          R0, 2, RD13
  DIVS.L       RQ18, RD13, RQ18
  MOV.L        TU7A00C41B/m_x, RD12
  ADDS.L       RD12, RQ18, RQ9
  MOV          TU7A00C41B/markpoints, RQ12
  MOV.L        TU7A00C41B/markpointnum, RD11
  LEA.Q        RQ12, RD11, RQ10
  MOV.L        RQ9, (RQ10, 0)
// am_map.c:382   markpoints[markpointnum].y = m_y + m_h/2;
  MOV.L        TU7A00C41B/m_h, RQ18
  DIVS.L       RQ18, RD13, RQ18
  MOV.L        TU7A00C41B/m_y, RD17
  ADDS.L       RD17, RQ18, RQ9
  LEA.Q        RQ12, RD11, RQ10
  MOV.L        RQ9, (RQ10, 4)
// am_map.c:383   markpointnum = (markpointnum + 1) % AM_NUMMARKPOINTS;
  ADDS.L       RD11, 1, RQ18
  ADD          RQ18, 0, RD11
  MOV.L        RD11, TU7A00C41B/markpointnum
  ADD          R0, 10, RD12
  MOV.L        TU7A00C41B/markpointnum, RD11
  MODS.L       RD11, RD12, RD11
  MOV.L        RD11, TU7A00C41B/markpointnum

.L00C02977:
  ADD          R2, 304, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0
  .balign 4

tkgSetWindowTitle:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 76)
  MOV.Q        RQ11, (R2, 64)
// tk_gdi/tkg_display.c:351   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ18
// tk_gdi/tkg_display.c:352   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ10
  MOV.Q        (R2, 64), RQ11
  BSR          strcpy, R1
// tk_gdi/tkg_display.c:353   
  MOV.L        (R2, 76), RD10
  ADD          R0, 0x74786574, RD11
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ12
  ADD          RQ0, 0, RQ13
  BSR          tkgModifyDisplay, R1
// tk_gdi/tkg_display.c:354   

.L00C0297D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

S_PauseSound:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// s_sound.c:504   {
  MOV.Q        TU7A00CA3E/mus_playing, RQ9
  BREQ.Q       R0, RQ9, .L00802D54
  MOV.L        TU7A00CA3E/mus_paused, RD9
  BRNE.L       R0, RD9, .L00802D54

.L00802D55:
// s_sound.c:506   {
  MOV.Q        TU7A00CA3E/mus_playing, RQ9
  MOV.L        (RQ9, 24), RQ18
  ADD          RQ18, 0, RD10
  BSR          I_PauseSong, R1
// s_sound.c:508   mus_paused = true;
  ADD          R0, 1, RD9
  MOV.L        RD9, TU7A00CA3E/mus_paused

.L00802D54:

.L00C02983:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

HUlib_addMessageToSText:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ23
  MOV.Q        RQ12, (R2, 104)
// hu_lib.c:222   {
  ADD          RQ8, 0, RQ10
  BSR          HUlib_addLineToSText, R1
// hu_lib.c:224   if (prefix)
  BREQ.Q       R0, RQ23, .L00802CFC
// hu_lib.c:225   while (*prefix)
  BSR          .L00802CFF, R0

.L00802CFD:
// hu_lib.c:226   HUlib_addCharToTextLine(&s->l[s->cl], *(prefix++));
  MOV.B        (RQ23, 0), RQ22
  ADD          RQ23, 1, RQ23
  ADD          RQ8, 0, RQ21
  MOV.L        (RQ8, 452), RQ18
  ADD          R0, 112, R5
  MUL.L        RQ18, R5, RQ10
  ADD          RQ21, RQ10, RQ10
  SHAD.Q       RQ22, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ18, 0, RD11
  BSR          HUlib_addCharToTextLine, R1

.L00802CFF:
  MOV.B        (RQ23, 0), RQ18
  BRNE.L       R0, RQ18, .L00802CFD

.L00802CFE:

.L00802CFC:
// hu_lib.c:228   while (*msg)
  BSR          .L00802D02, R0

.L00802D00:
// hu_lib.c:229   HUlib_addCharToTextLine(&s->l[s->cl], *(msg++));
  MOV.Q        (R2, 104), RQ21
  MOV.B        (RQ21, 0), RQ18
  ADD          RQ21, 1, RQ21
  MOV.Q        RQ21, (R2, 104)
  ADD          RQ8, 0, RQ20
  MOV.L        (RQ8, 452), RQ9
  ADD          R0, 112, R5
  MUL.L        RQ9, R5, RQ10
  ADD          RQ20, RQ10, RQ10
  SHAD.Q       RQ18, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  SHAD.Q       RQ9, 56, RD11
  SHAR.Q       RD11, 56, RD11
  BSR          HUlib_addCharToTextLine, R1

.L00802D02:
  MOV.Q        (R2, 104), RQ21
  MOV.B        (RQ21, 0), RQ9
  BRNE.L       R0, RQ9, .L00802D00

.L00802D01:

.L00C02989:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

wipe_doColorXForm:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -296, R2
  MOV.L        RD10, (R2, 44)
  MOV.L        RD11, (R2, 40)
  ADD          RD12, 0, RD20
// f_wipe.c:94   changed = false;
  ADD          R0, 0, RD21
// f_wipe.c:95   w = wipe_scr;
  MOV.Q        TU7A00C589/wipe_scr, RQ9
// f_wipe.c:96   e = wipe_scr_end;
  MOV.Q        TU7A00C589/wipe_scr_end, RQ23
// f_wipe.c:98   while (w!=wipe_scr+width*height)
  BSR          .L0080133A, R0

.L00801338:
// f_wipe.c:99   {
  MOVU.W       (RQ9, 0), RQ18
  MOVU.W       (RQ23, 0), RQ8
  BREQ.Q       RQ8, RQ18, .L0080133B
  MOVU.W       (RQ9, 0), RQ18
  MOVU.W       (RQ23, 0), RQ8
  BRLE.L       RQ8, RQ18, .L0080133C
// f_wipe.c:103   {
  MOVU.W       (RQ9, 0), RQ18
  SUBS.L       RQ18, RD20, RD22
  MOVU.W       (RQ23, 0), RQ8
  BRGE.L       RQ8, RD22, .L0080133D
// f_wipe.c:106   *w = *e;
  MOVU.W       (RQ23, 0), RQ18
  MOVU.W       RQ18, (RQ9, 0)
  BSR          .L0080133E, R0

.L0080133D:
// f_wipe.c:108   *w = newval;
  MOVU.W       RD22, (RQ9, 0)

.L0080133E:
// f_wipe.c:109   changed = true;
  ADD          R0, 1, RD21
  BSR          .L0080133F, R0

.L0080133C:
  MOVU.W       (RQ9, 0), RQ8
  MOVU.W       (RQ23, 0), RQ18
  BRGE.L       RQ18, RQ8, .L00801340
// f_wipe.c:112   {
  MOVU.W       (RQ9, 0), RQ8
  ADDS.L       RQ8, RD20, RD22
  MOVU.W       (RQ23, 0), RQ18
  BRLE.L       RQ18, RD22, .L00801341
// f_wipe.c:115   *w = *e;
  MOVU.W       (RQ23, 0), RQ8
  MOVU.W       RQ8, (RQ9, 0)
  BSR          .L00801342, R0

.L00801341:
// f_wipe.c:117   *w = newval;
  MOVU.W       RD22, (RQ9, 0)

.L00801342:
// f_wipe.c:118   changed = true;
  ADD          R0, 1, RD21

.L00801340:

.L0080133F:

.L0080133B:
// f_wipe.c:120   }
  ADD          RQ9, 2, RQ9
// f_wipe.c:122   e++;
  ADD          RQ23, 2, RQ23

.L0080133A:
  MOV.L        (R2, 44), RD13
  MOV.L        (R2, 40), RD12
  MULS.L       RD13, RD12, RQ18
  MOV.Q        TU7A00C589/wipe_scr, RQ11
  LEA.W        RQ11, RQ18, RQ10
  BRNE.Q       RQ10, RQ9, .L00801338

.L00801339:
// f_wipe.c:125   return !changed;
  CMPEQ.Q      RD21, R0, RQ18
  ADD          RQ18, 0, RD10

.L00C0298F:
  ADD          R2, 296, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

tk_opendir:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ8
// tk_core/tk_vfile.c:1521   
  ADD          RQ0, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_opendir2, R1

.L00C02995:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R8
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tk_sysc_fopen:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -1016, R2
  MOV.Q        RQ10, (R2, 184)
  MOV.Q        RQ11, (R2, 176)
  ADD          RQ12, 0, RQ23
  MOV.Q        RQ13, (R2, 160)
  ADD          R2, 192, RQ6
  MOV.Q        RQ6, (R2, 152)
  ADD          R2, 720, RQ6
  MOV.Q        RQ6, (R2, 144)
// tk_vf_sysc.c:94   
// tk_vf_sysc.c:96   
// tk_vf_sysc.c:102   
  ADD          R2, 192, RQ10
  ADD          RQ23, 0, RQ11
  BSR          strcpy, R1
// tk_vf_sysc.c:104   
  MOV          .L00C0299C, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R2, 192, RQ12
  BSR          tk_dbg_printf, R1
// tk_vf_sysc.c:106   
  ADD          R0, 0, RQ22
  MOV.Q        RQ22, (R2, 136)
// tk_vf_sysc.c:108   
  ADD          R2, 720, RQ22
  ADD          RQ22, 0, RQ21
  ADD          R2, 192, RQ20
  MOV.Q        RQ20, (RQ21, 0)
// tk_vf_sysc.c:109   
  ADD          RQ22, 8, RQ21
  MOV.Q        (R2, 160), RQ27
  MOV.Q        RQ27, (RQ21, 0)
// tk_vf_sysc.c:110   
  ADD          R2, 136, RQ9
  ADD          RQ0, 0, RQ10
  LDIZ         4128, RD11
  ADD          RQ9, 0, RQ12
  ADD          RQ22, 0, RQ13
  BSR          tk_syscall, R1
  ADDS.L       RQ10, 0, RD8
// tk_vf_sysc.c:111   
  BRGT.L       R0, RD8, .L00800B31
// tk_vf_sysc.c:112   
  ADD          RQ0, 0, RQ10
  BSR          .L00C0299B, R0

.L00800B31:
// tk_vf_sysc.c:114   
  BSR          tk_alloc_file, R1
  ADD          RQ10, 0, RQ18
// tk_vf_sysc.c:115   
  MOV          tk_vfile_sysc_vt, RQ9
  MOV.Q        RQ9, (RQ18, 0)
// tk_vf_sysc.c:116   
  MOV.L        RD8, (RQ18, 64)
// tk_vf_sysc.c:118   
  ADD          RQ18, 0, RQ10

.L00C0299B:
  ADD          R2, 1016, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

F_BunnyScroll:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// f_finale.c:678   char	name[10];
// f_finale.c:684   p1 = W_CachePatchName ("PFUB2", PU_LEVEL);
  MOV          .L00C029A3, RQ10
  ADD          R0, 50, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ20
// f_finale.c:685   p2 = W_CachePatchName ("PFUB1", PU_LEVEL);
  MOV          .L00C029A4, RQ10
  ADD          R0, 50, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, (R2, 104)
// f_finale.c:687   V_MarkRect (0, 0, SCREENWIDTH, SCREENHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 200, RD13
  BSR          V_MarkRect, R1
// f_finale.c:689   scrolled = 320 - (finalecount-230)/2;
  MOV.L        finalecount, RD13
  ADDS.L       RD13, -230, RQ9
  ADDS.L       RQ9, 0, RQ8
  ADD          R0, 2, RD13
  DIVS.L       RQ8, RD13, RQ8
  ADD          R0, 320, RD12
  SUBS.L       RD12, RQ8, RD23
// f_finale.c:690   if (scrolled > 320)
  BRLE.L       320, RD23, .L0080131E
// f_finale.c:691   scrolled = 320;
  ADD          R0, 320, RD23

.L0080131E:
// f_finale.c:692   if (scrolled < 0)
  BRGE.L       R0, RD23, .L0080131F
// f_finale.c:693   scrolled = 0;
  ADD          R0, 0, RD23

.L0080131F:
// f_finale.c:695   for ( x=0 ; x<SCREENWIDTH ; x++)
  ADD          R0, 0, RD18

.L00801320:
// f_finale.c:696   {
  ADDS.L       RD18, RD23, RQ9
  BRGE.L       320, RQ9, .L00801323
// f_finale.c:698   F_DrawPatchCol (x, p1, x+scrolled);
  ADDS.L       RD18, RD23, RQ8
  ADD          RD18, 0, RD10
  ADD          RQ20, 0, RQ11
  ADDS.L       RQ8, 0, RD12
  BSR          F_DrawPatchCol, R1
  BSR          .L00801324, R0

.L00801323:
// f_finale.c:700   F_DrawPatchCol (x, p2, x+scrolled - 320);		
  ADDS.L       RD18, RD23, RQ9
  ADDS.L       RQ9, -320, RQ8
  ADD          RD18, 0, RD10
  MOV.Q        (R2, 104), RQ11
  ADDS.L       RQ8, 0, RD12
  BSR          F_DrawPatchCol, R1

.L00801324:
  ADDS.L       RD18, 1, RD18
  BRLT.L       320, RD18, .L00801320

.L00801322:
// f_finale.c:703   if (finalecount < 1130)
  MOV.L        finalecount, RD13
  ADD          R0, 1130, RD12
  BRLT.L       RD12, RD13, .L00C029A2
// f_finale.c:705   if (finalecount < 1180)
  MOV.L        finalecount, RD13
  ADD          R0, 1180, RD12
  BRGE.L       RD12, RD13, .L00801325
// f_finale.c:706   {
  MOV          .L00C029A5, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  ADD          R0, 108, RD10
  ADD          R0, 68, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:710   laststage = 0;
  MOV.L        RD0, F_BunnyScroll/laststage!43
// f_finale.c:711   return;
  BSR          .L00C029A2, R0

.L00801325:
// f_finale.c:714   stage = (finalecount-1180) / 5;
  MOV.L        finalecount, RD13
  ADDS.L       RD13, -1180, RQ9
  ADD          RQ9, 0, RD22
  ADD          R0, 5, RD13
  DIVS.L       RD22, RD13, RD22
// f_finale.c:715   if (stage > 6)
  BRLE.L       6, RD22, .L00801326
// f_finale.c:716   stage = 6;
  ADD          R0, 6, RD22

.L00801326:
// f_finale.c:717   if (stage > laststage)
  MOV.L        F_BunnyScroll/laststage!43, RD13
  BRLE.L       RD13, RD22, .L00801327
// f_finale.c:718   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1
// f_finale.c:720   laststage = stage;
  MOV.L        RD22, F_BunnyScroll/laststage!43

.L00801327:
// f_finale.c:723   sprintf (name,"END%i",stage);
  ADD          R2, 112, RQ10
  MOV          .L00C029A6, RQ11
  ADD          RD22, 0, RD12
  BSR          sprintf, R1
// f_finale.c:724   V_DrawPatch ((SCREENWIDTH-13*8)/2, (SCREENHEIGHT-8*8)/2,0,
  ADD          R2, 112, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ21
  ADD          R0, 108, RD10
  ADD          R0, 68, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1

.L00C029A2:
  ADD          R2, 384, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

M_DrawNewGame:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R20, (R2, 16)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  ADD          R2, -312, R2
  ADD          R0, 96, RD9
  ADD          R0, 14, RD8
  MOV          .L00C029AD, RQ23
  ADD          R0, 54, RD22
  ADD          R0, 38, RD21
  MOV          .L00C029AE, RQ20
// m_menu.c:902   V_DrawPatchDirectName (96,14,0, "M_NEWG");
  ADD          R0, 96, RD10
  ADD          R0, 14, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:903   V_DrawPatchDirectName (54,38,0, "M_SKILL");
  ADD          R0, 54, RD10
  ADD          R0, 38, RD11
  ADD          R0, 0, RD12
  ADD          RQ20, 0, RQ13
  BSR          V_DrawPatchDirectName, R1

.L00C029AC:
  ADD          R2, 312, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R20
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

SMus_NoteOff:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
// i_bgb_mus_btsh.c:658   {
// i_bgb_mus_btsh.c:662   if((ch==8) || (ch==9))
  ADD          R0, 8, R5
  CMPEQ.Q      RD9, R5, RQ8
  ADD          R0, 9, R5
  CMPEQ.Q      RD9, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00801266
// i_bgb_mus_btsh.c:663   ch^=1;
  XOR          RD9, 1, RD9

.L00801266:
// i_bgb_mus_btsh.c:665   mcmd=&t_mcmd;
  ADD          R2, 96, RQ21
  ADD          RQ21, 0, RQ18
// i_bgb_mus_btsh.c:666   mcmd->op=0;
  MOVU.B       RD0, (RQ18, 0)
// i_bgb_mus_btsh.c:667   mcmd->ch=ch;
  MOVU.B       RD9, (RQ18, 1)
// i_bgb_mus_btsh.c:668   mcmd->d0=d0;
  MOV.L        (R2, 120), RD20
  MOVU.B       RD20, (RQ18, 2)
// i_bgb_mus_btsh.c:669   mcmd->d1=d1;
  MOV.L        (R2, 116), RD27
  MOVU.B       RD27, (RQ18, 3)
// i_bgb_mus_btsh.c:672   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ18, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:673   return(0);
  ADD          R0, 0, RD10

.L00C029B4:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_SetupPsprites:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// p_pspr.c:848   for (i=0 ; i<NUMPSPRITES ; i++)
  ADD          R0, 0, RD18

.L00801EC4:
// p_pspr.c:849   player->psprites[i].state = NULL;
  ADD          RQ9, 264, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        RQ0, (RQ12, 0)
  ADDS.L       RD18, 1, RD18
  BRLT.L       2, RD18, .L00801EC4

.L00801EC6:
// p_pspr.c:852   player->pendingweapon = player->readyweapon;
  MOV.L        (RQ9, 116), RQ8
  MOV.L        RQ8, (RQ9, 120)
// p_pspr.c:853   P_BringUpWeapon (player);
  ADD          RQ9, 0, RQ10
  BSR          P_BringUpWeapon, R1

.L00C029BA:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

R_ColormapForLumpI:
// r_data.c:1923   if(n_colormaps_alt<=1)
  MOV.L        n_colormaps_alt, RD13
  BRGT.L       1, RD13, .L00802569
// r_data.c:1924   return(NULL);
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L00802569:
// r_data.c:1925   if(lump>colormaps_aidx[0])
  MOV          colormaps_aidx, RQ13
  MOV.L        (RQ13, 0), RQ12
  BRLE.L       RQ12, RD10, .L0080256A
// r_data.c:1926   return(NULL);
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L0080256A:
// r_data.c:1928   for(i=0; i<n_colormaps_alt; i++)
  ADD          R0, 0, RD13
  MOV.L        n_colormaps_alt, RD17
  BRGE.L       RD17, RD13, .L0080256D

.L0080256B:
// r_data.c:1929   {
  MOV          colormaps_aidx, RQ17
  MOV.L        (RQ17, RD13), RQ12
  BRGT.L       RQ12, RD10, .L0080256D
  ADDS.L       RD13, 1, RD13
  MOV.L        n_colormaps_alt, RD17
  BRLT.L       RD17, RD13, .L0080256B

.L0080256D:
// r_data.c:1934   if(i<n_colormaps_alt)
  MOV.L        n_colormaps_alt, RD17
  BRGE.L       RD17, RD13, .L0080256E
// r_data.c:1935   {
  MOV          colormaps_alt, RQ17
  MOV.Q        (RQ17, RD13), RQ16
// r_data.c:1937   return(tcol+(lvl*256));
  SHAD.L       RD11, 8, RQ12
  LEA.W        RQ16, RQ12, RQ15
  ADD          RQ15, 0, RQ10
  JSR          R1, 0, R0

.L0080256E:
// r_data.c:1940   return(NULL);
  ADD          RQ0, 0, RQ10

.L00C029BB:
  JSR          R1, 0, R0

P_Thrust:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
  ADD          RD11, 0, RD23
  MOV.L        RD12, (R2, 96)
// p_user.c:64   {
  SHLR         RD23, 19, RD23
// p_user.c:67   player->mo->momx += FixedMul(move,finecosine[angle]); 
  MOV.Q        (RQ21, 0), RQ9
  MOV.L        (RQ9, 112), RQ22
  MOV.Q        finecosine, RQ20
  MOV.L        (RQ20, RD23), RQ18
  MOV.L        (R2, 96), RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ22, RQ8, RQ18
  MOV.Q        (RQ21, 0), RQ9
  MOV.L        RQ18, (RQ9, 112)
// p_user.c:68   player->mo->momy += FixedMul(move,finesine[angle]);
  MOV.L        (RQ9, 116), RQ22
  MOV          finesine, RQ20
  MOV.L        (RQ20, RD23), RQ18
  MOV.L        (R2, 96), RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ22, RQ8, RQ18
  MOV.Q        (RQ21, 0), RQ9
  MOV.L        RQ18, (RQ9, 116)

.L00C029C1:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_frecv:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -424, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 180)
  MOV.Q        RQ12, (R2, 168)
  MOV.L        RD13, (R2, 164)
  MOV.L        RD14, (R2, 160)
  MOV.Q        RQ15, (R2, 152)
  MOV.L        RD16, (R2, 148)
  ADD          R0, 0x14253647, RD21
// tk_core/tk_vfile.c:1184   
  BREQ.Q       R0, RQ9, .L00800B97
  MOV.Q        (RQ9, 0), RQ18
  BREQ.Q       R0, RQ18, .L00800B97
  BSR          .L00800B98, R0

.L00800B97:
// tk_core/tk_vfile.c:1186   

tk_frecv.debugbreak_L0510:
  BRK          1296

.L00800B98:
// tk_core/tk_vfile.c:1188   
  MOV.L        (RQ9, 92), RQ23
  BREQ.Q       RD21, RQ23, .L00800B99
// tk_core/tk_vfile.c:1189   

tk_frecv.debugbreak_L0511:
  BRK          1297

.L00800B99:
// tk_core/tk_vfile.c:1191   
  MOV.Q        (RQ9, 0), RQ18
  MOV.Q        (RQ18, 176), RQ8
  BREQ.Q       R0, RQ8, .L00800B9A
// tk_core/tk_vfile.c:1192   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ8
  MOV.Q        (RQ18, 176), RQ22
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 180), RD11
  MOV.Q        (R2, 168), RQ12
  MOV.L        (R2, 164), RD13
  MOV.L        (R2, 160), RD14
  MOV.Q        (R2, 152), RQ15
  MOV.L        (R2, 148), RD16
  ADD          RQ8, 0, RQ29
  JSR          RQ22, 0, R1
  BSR          .L00C029D1, R0

.L00800B9A:
// tk_core/tk_vfile.c:1195   
  ADD          R0, -1, RD10

.L00C029D1:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

__ioctl:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 76)
  MOV.L        RD11, (R2, 72)
  MOV.Q        RQ12, (R2, 64)
// pdpc201/btshx_supa.c:477   
  MOV          btshx_tk_handles, RQ8
  MOV.L        (R2, 76), RD23
  MOV.Q        (RQ8, RD23), RQ18
// pdpc201/btshx_supa.c:478   
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 72), RD11
  MOV.Q        (R2, 64), RQ12
  BSR          tk_fioctl, R1
// pdpc201/btshx_supa.c:479   

.L00C029D9:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

mmap:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R21, (R2, 16)
  MOV.X        R22, (R2, 24)
  MOV.X        R8, (R2, 0)
  ADD          R2, -400, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  ADD          RD12, 0, RD23
  ADD          RD13, 0, RD22
  ADD          RD14, 0, RD21
  MOV.Q        RQ15, (R2, 104)
// pdpc201/bt_mman.c:25   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RD23, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RD21, 0, RD14
  MOV.Q        (R2, 104), RQ15
  BSR          tk_mmap, R1

.L00C029DF:
  ADD          R2, 400, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R21
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

tk_puts_n:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ21
  ADDS.L       RD11, 0, RD9
// tk_core/tk_puts.c:892   
// tk_core/tk_puts.c:900   
  ADD          RQ21, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          tk_putsn_check_nonascii, R1
  MOV.L        RD10, (R2, 100)
// tk_core/tk_puts.c:902   
  BSR          tk_iskernel, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00800C0C
  MOV.L        (R2, 100), RD13
  BRNE.L       R0, RD13, .L00800C0C

.L00800C0D:
// tk_core/tk_puts.c:903   
  BSR          _arch_gettbr, R1
  MOV.Q        RQ10, (R2, 80)
  MOV.Q        (R2, 80), RQ22
  BREQ.Q       R0, RQ22, .L00800C0E
// tk_core/tk_puts.c:906   
  MOV.L        (RQ22, 536), RD13
  MOV.L        RD13, (R2, 112)
// tk_core/tk_puts.c:908   
  MOV.L        (RQ22, 544), RD20
  BSR          .L00800C0F, R0

.L00800C0E:
// tk_core/tk_puts.c:911   
  MOV.L        RD0, (R2, 112)
// tk_core/tk_puts.c:913   
  ADD          R0, 0, RD20

.L00800C0F:
  BREQ.L       R0, RD20, .L00800C10
// tk_core/tk_puts.c:918   
  ADD          RQ22, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RQ21, 0, RQ12
  ADDS.L       RD9, 0, RD13
  BSR          tk_hwrite, R1
// tk_core/tk_puts.c:920   
  BSR          .L00C029E5, R0

.L00800C10:
  MOV.L        (R2, 112), RD13
  BREQ.L       R0, RD13, .L00800C11
  BSR          tk_issyscall, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800C11

.L00800C12:
// tk_core/tk_puts.c:926   
  ADD          RQ21, 0, RQ10
  ADDS.L       RD9, 0, RD11
  MOV.L        (R2, 112), RD12
  BSR          tk_puts_n_tty, R1
// tk_core/tk_puts.c:927   
  BSR          .L00C029E5, R0

.L00800C11:

.L00800C0C:
// tk_core/tk_puts.c:931   
  BSR          tk_iskernel, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800C13
  MOV.L        (R2, 100), RD13
  BRNE.L       R0, RD13, .L00800C13
  BSR          .L00800C14, R0

.L00800C13:
// tk_core/tk_puts.c:932   
  MOV.Q        RQ21, (R2, 104)
// tk_core/tk_puts.c:934   
  BSR          .L00800C15, R0

.L00800C16:
// tk_core/tk_puts.c:938   
  ADD          R2, 104, RQ23
  ADD          RQ23, 0, RQ10
  BSR          TK_ReadCharUtf8, R1
  ADDS.L       RQ10, 0, RD8
// tk_core/tk_puts.c:939   
  ADDS.L       RD8, 0, RD10
  BSR          tk_putc, R1

.L00800C15:
  ADD          RD9, 0, RQ18
  ADDS.L       RD9, -1, RD9
  BRNE.L       R0, RQ18, .L00800C16

.L00800C17:
// tk_core/tk_puts.c:940   
  BSR          .L00C029E5, R0

.L00800C14:
// tk_core/tk_puts.c:944   
  ADD          RQ21, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          tk_putsn_v, R1

.L00C029E5:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

fwriteSlowB:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          RQ11, 0, RQ18
  ADD          RQ12, 0, RQ20
  ADD          RQ13, 0, RQ21
// pdpc201/stdio.c:1284   
  MOV.L        RD0, (R2, 124)
// pdpc201/stdio.c:1286   
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 40), RQ22
  SUB          RQ9, RQ22, RQ8
  ADD          RQ8, 0, RQ27
// pdpc201/stdio.c:1287   
  MOV.Q        RQ27, (R2, 136)
  BRGEU.Q      RQ27, RQ20, .L00800392
// pdpc201/stdio.c:1288   
  MOV.Q        (RQ18, 40), RQ9
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 168), RQ11
  ADD          RQ20, 0, RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:1290   
  MOV.Q        RQ20, (RQ21, 0)
// pdpc201/stdio.c:1291   
  MOV.Q        (RQ18, 40), RQ22
  ADD          RQ22, RQ20, RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:1292   
  BSR          .L00C029EB, R0

.L00800392:
// pdpc201/stdio.c:1293   
  MOV.Q        (RQ18, 40), RQ22
  ADD          RQ22, 0, RQ10
  MOV.Q        (R2, 168), RQ11
  MOV.Q        (R2, 136), RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:1296   
  ADD          R2, 124, RQ9
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        (RQ18, 24), RQ22
  MOV.L        (RQ18, 0), RQ27
  ADD          RQ27, 0, RD10
  ADD          RQ22, 0, RQ11
  ADD          RQ8, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __write, R1
  ADD          RQ10, 0, RQ26
  ADDS.L       RQ26, 0, RQ25
  MOV.Q        RQ25, (R2, 128)
// pdpc201/stdio.c:1300   
  MOV.L        (R2, 124), RD24
  BREQ.L       R0, RD24, .L00800393
// pdpc201/stdio.c:1301   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// pdpc201/stdio.c:1303   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (R2, 128), RQ26
  ADDS.L       RQ26, 0, RQ25
  MOV.L        RQ25, (RQ9, 0)
// pdpc201/stdio.c:1304   
  BSR          .L00C029EB, R0

.L00800393:
// pdpc201/stdio.c:1307   
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ21, 0)
// pdpc201/stdio.c:1308   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:1309   
  MOV.Q        (RQ18, 16), RQ8
  MOV.Q        (R2, 128), RQ26
  ADD          RQ8, RQ26, RQ23
  MOV.Q        RQ23, (RQ18, 16)
// pdpc201/stdio.c:1310   
  MOV.Q        (RQ18, 32), RQ8
  BRLEU.Q      RQ8, RQ20, .L00800394
// pdpc201/stdio.c:1311   
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 8)
// pdpc201/stdio.c:1314   
  ADD          R2, 124, RQ9
  MOV.Q        (RQ21, 0), RQ8
  SUB          RQ20, RQ8, RQ23
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        (R2, 168), RQ26
  ADD          RQ26, RQ8, RQ22
  MOV.L        (RQ18, 0), RQ25
  ADD          RQ25, 0, RD10
  ADD          RQ22, 0, RQ11
  ADD          RQ23, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          __write, R1
  ADD          RQ10, 0, RQ24
  ADDS.L       RQ24, 0, RQ19
  MOV.Q        RQ19, (R2, 128)
  MOV.L        (R2, 124), RD27
  BREQ.L       R0, RD27, .L00800395
// pdpc201/stdio.c:1319   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
// pdpc201/stdio.c:1321   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (R2, 128), RQ26
  ADDS.L       RQ26, 0, RQ25
  MOV.L        RQ25, (RQ9, 0)
// pdpc201/stdio.c:1322   
  BSR          .L00C029EB, R0

.L00800395:
// pdpc201/stdio.c:1325   
  MOV.Q        (RQ21, 0), RQ23
  MOV.Q        (R2, 128), RQ27
  ADD          RQ23, RQ27, RQ8
  MOV.Q        RQ8, (RQ21, 0)
// pdpc201/stdio.c:1326   
  MOV.Q        (RQ18, 16), RQ23
  ADD          RQ23, RQ27, RQ8
  MOV.Q        RQ8, (RQ18, 16)
  BSR          .L00800396, R0

.L00800394:
// pdpc201/stdio.c:1329   
  MOV.Q        (RQ21, 0), RQ23
  SUB          RQ20, RQ23, RQ8
  MOV.Q        (RQ21, 0), RQ23
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, RQ23, RQ9
  MOV.Q        (RQ18, 24), RQ22
  ADD          RQ22, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ8, 0, RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:1333   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ21, 0), RQ8
  SUB          RQ20, RQ8, RQ23
  ADD          RQ9, RQ23, RQ22
  MOV.Q        RQ22, (RQ18, 40)
// pdpc201/stdio.c:1334   
  MOV.Q        RQ20, (RQ21, 0)

.L00800396:
// pdpc201/stdio.c:1335   
  MOV.Q        (RQ18, 16), RQ8
  MOV.Q        (RQ21, 0), RQ23
  ADD          RQ8, RQ23, RQ27
  MOV.Q        RQ27, (RQ18, 16)
// pdpc201/stdio.c:1337   

.L00C029EB:
  ADD          R2, 360, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_DlOpenA:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -416, R2
  MOV.Q        RQ10, (R2, 104)
  MOV.L        RD11, (R2, 100)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
// tk_core/tk_rwad.c:917   
// tk_core/tk_rwad.c:930   
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (R2, 80)
// tk_core/tk_rwad.c:931   
  ADD          R2, 112, RQ9
  ADD          RQ9, 0, RQ8
  MOV.Q        (R2, 104), RQ23
  MOV.Q        RQ23, (RQ8, 0)
// tk_core/tk_rwad.c:932   
  ADD          RQ9, 8, RQ8
  MOV.L        (R2, 100), RD22
  MOV.L        RD22, (RQ8, 0)
// tk_core/tk_rwad.c:933   
  ADD          R2, 80, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4126, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ9, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_rwad.c:934   
  MOV.Q        (R2, 80), RQ10

.L00C029F1:
  ADD          R2, 416, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

P_ThingHeightClip:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// p_map.c:569   onfloor = (thing->z == thing->floorz);
  MOV.L        (RQ18, 32), RQ9
  MOV.L        (RQ18, 96), RQ8
  CMPEQ.Q      RQ9, RQ8, RD22
  MOV.L        RD22, (R2, 100)
// p_map.c:571   P_CheckPosition (thing, thing->x, thing->y);	
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ8
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_CheckPosition, R1
// p_map.c:574   thing->floorz = tmfloorz;
  MOV.L        tmfloorz, RD13
  MOV.L        RD13, (RQ18, 96)
// p_map.c:575   thing->ceilingz = tmceilingz;
  MOV.L        tmceilingz, RD13
  MOV.L        RD13, (RQ18, 100)
// p_map.c:577   if (onfloor)
  BREQ.L       R0, RD22, .L00801D5F
// p_map.c:580   thing->z = thing->floorz;
  MOV.L        (RQ18, 96), RQ9
  MOV.L        RQ9, (RQ18, 32)
  BSR          .L00801D60, R0

.L00801D5F:
  MOV.L        (RQ18, 32), RQ8
  MOV.L        (RQ18, 108), RQ9
  ADDS.L       RQ8, RQ9, RQ23
  MOV.L        (RQ18, 100), RQ9
  BRLE.L       RQ9, RQ23, .L00801D61
// p_map.c:586   thing->z = thing->ceilingz - thing->height;
  MOV.L        (RQ18, 100), RQ8
  MOV.L        (RQ18, 108), RQ23
  SUBS.L       RQ8, RQ23, RQ9
  MOV.L        RQ9, (RQ18, 32)

.L00801D61:

.L00801D60:
// p_map.c:589   if (thing->ceilingz - thing->floorz < thing->height)
  MOV.L        (RQ18, 100), RQ8
  MOV.L        (RQ18, 96), RQ23
  SUBS.L       RQ8, RQ23, RQ9
  MOV.L        (RQ18, 108), RQ8
  BRLT.L       RQ8, RQ9, .L00C00D00
// p_map.c:592   return true;
  ADD          R0, 1, RD10
  BSR          .L00C029F7, R0

.L00C00D00:
  ADD          R0, 0, RQ10

.L00C029F7:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

_ctype_init:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
// pdpc201/ctype.c:261   
  MOV.Q        _ctype_isbuf, RQ8
  BRNE.Q       R0, RQ8, .L00C029FD
// pdpc201/ctype.c:266   
  MOV          TU61F874B9/_ctype_isbufR, RQ8
  ADD          RQ8, 2, RQ23
  MOV.Q        RQ23, _ctype_isbuf
// pdpc201/ctype.c:270   
  MOV          TU61F874B9/_ctype_tolowR, RQ8
  ADD          RQ8, 2, RQ23
  MOV.Q        RQ23, _ctype_tolow
// pdpc201/ctype.c:271   
  MOV          TU61F874B9/_ctype_toupR, RQ8
  ADD          RQ8, 2, RQ23
  MOV.Q        RQ23, _ctype_toup
// pdpc201/ctype.c:274   
  ADD          R0, 1, RD10
  MOV          .L00C00FE7, RQ11
  BSR          setlocale, R1
// pdpc201/ctype.c:277   
  MOV.Q        _ctype_tolow, RQ8
  ADD          R0, -1, RD23
  MOV.W        RD23, (RQ8, -2)
// pdpc201/ctype.c:278   
  MOV.Q        _ctype_toup, RQ8
  MOV.W        RD23, (RQ8, -2)
// pdpc201/ctype.c:279   
  ADD          R0, 0, RD18

.L00800838:
// pdpc201/ctype.c:280   
  ADD          RD18, 0, RD10
  BSR          _tolower_gen, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.Q        _ctype_tolow, RQ8
  MOV.W        RQ9, (RQ8, RD18)
// pdpc201/ctype.c:282   
  ADD          RD18, 0, RD10
  BSR          _toupper_gen, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.Q        _ctype_toup, RQ8
  MOV.W        RQ9, (RQ8, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       256, RD18, .L00800838

.L00800839:

.L00C029FD:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

D_AdvanceDemo:
  ADD          R2, -16, R2
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -272, R2
  MOV.L        advancedemo, RD18
  ADD          R0, 1, RD9
// d_main.c:556   {
  ADD          RD9, 0, RD18

.L00C02A03:
  MOV.L        RD18, advancedemo
  ADD          R2, 272, R2
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 16, R2
  JSR          R1, 0, R0

R_InitTranslationTables:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          R0, 15, RD21
// r_draw.c:846   translationtables = Z_Malloc (256*3+255, PU_STATIC, 0);
  ADD          R0, 1023, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ20
// r_draw.c:847   translationtables = (byte *)(( (nlint)translationtables + 255 )& ~255);
  ADD          RQ20, 0, RQ23
  ADD          RQ23, 255, RQ22
  AND          RQ22, -256, RQ23
  ADD          RQ23, 0, RQ20
  MOV.Q        RQ20, translationtables
// r_draw.c:850   for (i=0 ; i<256 ; i++)
  ADD          R0, 0, RD18

.L008025DB:
// r_draw.c:851   {
  ADD          R0, 112, R5
  CMPGE.Q      RD18, R5, RQ9
  ADD          R0, 127, R5
  CMPLE.Q      RD18, R5, RQ8
  BTST.L       RQ8, RQ9, .L008025DE
// r_draw.c:855   translationtables[i] = 0x60 + (i&0xf);
  AND          RD18, 15, RQ9
  ADDS.L       RQ9, 96, RQ8
  MOV.Q        translationtables, RQ20
  MOVU.B       RQ8, (RQ20, RD18)
// r_draw.c:856   translationtables [i+256] = 0x40 + (i&0xf);
  AND          RD18, 15, RQ9
  ADDS.L       RQ9, 64, RQ8
  ADDS.L       RD18, 256, RQ9
  MOVU.B       RQ8, (RQ20, RQ9)
// r_draw.c:857   translationtables [i+512] = 0x20 + (i&0xf);
  AND          RD18, 15, RQ8
  ADDS.L       RQ8, 32, RQ9
  ADDS.L       RD18, 512, RQ8
  MOVU.B       RQ9, (RQ20, RQ8)
  BSR          .L008025DF, R0

.L008025DE:
// r_draw.c:862   translationtables[i] = translationtables[i+256]
  ADDS.L       RD18, 512, RQ9
  MOV.Q        translationtables, RQ20
  MOVU.B       RD18, (RQ20, RQ9)
  ADDS.L       RD18, 256, RQ8
  MOVU.B       RD18, (RQ20, RQ8)
  MOVU.B       RD18, (RQ20, RD18)

.L008025DF:
  ADDS.L       RD18, 1, RD18
  BRLT.L       256, RD18, .L008025DB

.L008025DD:

.L00C02A09:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

M_SoftDivU2:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -320, R2
  MOV.L        RD10, (R2, 76)
  ADD          RD11, 0, RD23
// m_fixed.c:260   c=M_SoftDivU(a, b);
  MOVU.L       (R2, 76), RD10
  ADD          RD23, 0, RD11
  BSR          M_SoftDivU, R1
  ADD          RQ10, 0, RD18
// m_fixed.c:273   e=a-(c*b);
  MULU.L       RD18, RD23, RQ9
  MOVU.L       (R2, 76), RD22
  SUBU.L       RD22, RQ9, RD8
// m_fixed.c:274   while(((s32)e)<0)
  BSR          .L00801755, R0

.L00801753:
// m_fixed.c:275   { c--; e=a-(c*b); }
  ADDS.L       RD18, -1, RD18
  ADDU.L       RD18, R0, RD18
  ADDU.L       RD18, R0, RD18
  MULU.L       RD18, RD23, RQ9
  MOVU.L       (R2, 76), RD22
  SUBU.L       RD22, RQ9, RD8

.L00801755:
  ADDS.L       RD8, 0, RQ9
  BRLT.L       R0, RQ9, .L00801753

.L00801754:
  BSR          .L00801758, R0

.L00801756:
// m_fixed.c:277   { c++; e=a-(c*b); }
  ADDS.L       RD18, 1, RD18
  ADDU.L       RD18, R0, RD18
  ADDU.L       RD18, R0, RD18
  MULU.L       RD18, RD23, RQ9
  MOVU.L       (R2, 76), RD22
  SUBU.L       RD22, RQ9, RD8

.L00801758:
  BRGEU.L      RD23, RD8, .L00801756

.L00801757:
// m_fixed.c:279   return(c);
  ADD          RD18, 0, RD10

.L00C02A0F:
  ADD          R2, 320, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

HUlib_initSText:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ22
  MOV.L        RD11, (R2, 148)
  MOV.L        RD12, (R2, 144)
  ADD          RD13, 0, RD20
  ADD          RQ14, 0, RQ21
  MOV.L        RD15, (R2, 124)
  MOV.Q        RQ16, (R2, 112)
// hu_lib.c:190   s->h = h;
  MOV.L        RD20, (RQ22, 448)
// hu_lib.c:191   s->on = on;
  MOV.Q        (R2, 112), RQ27
  MOV.Q        RQ27, (RQ22, 456)
// hu_lib.c:192   s->laston = true;
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ22, 464)
// hu_lib.c:193   s->cl = 0;
  MOV.L        RD0, (RQ22, 452)
// hu_lib.c:194   for (i=0;i<h;i++)
  ADD          R0, 0, RD18
  BRGE.L       RD20, RD18, .L00802CF7

.L00802CF5:
// hu_lib.c:195   HUlib_initTextLine(&s->l[i],
  MOV.Q        (RQ21, 0), RQ8
  MOV.W        (RQ8, 2), RQ9
  ADDS.L       RQ9, 1, RQ23
  MULS.L       RD18, RQ23, RQ9
  MOV.L        (R2, 144), RD27
  SUBS.L       RD27, RQ9, RQ23
  ADD          RQ22, 0, RQ8
  ADD          R0, 112, R5
  MUL.L        RD18, R5, RQ10
  ADD          RQ8, RQ10, RQ10
  MOV.L        (R2, 148), RD11
  ADD          RQ23, 0, RD12
  ADD          RQ21, 0, RQ13
  MOV.L        (R2, 124), RD14
  BSR          HUlib_initTextLine, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD20, RD18, .L00802CF5

.L00802CF7:

.L00C02A15:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

G_SecretExitLevel:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// g_game.c:1035   if ( (gamemode == commercial)
  MOV.L        gamemode, RD13
  BRNE.Q       2, RD13, .L008015A8
  MOV          .L00C02A1C, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ18
  BRGE.L       R0, RQ18, .L008015A8

.L008015A9:
// g_game.c:1037   secretexit = false;
  MOV.L        RD0, secretexit
  BSR          .L008015AB, R0

.L008015A8:
// g_game.c:1039   secretexit = true;
  ADD          R0, 1, RD13
  MOV.L        RD13, secretexit

.L008015AB:
// g_game.c:1040   gameaction = ga_completed;
  ADD          R0, 6, RD13
  MOV.L        RD13, gameaction

.L00C02A1B:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsCrossSpecialLine:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  ADD          RQ12, 0, RQ22
// p_acspec.c:439   line = &lines[linenum];
  MOV.Q        lines, RQ13
  MOV.L        (R2, 108), RD12
  ADD          R0, 96, R5
  MUL.L        RD12, R5, RQ21
  ADD          RQ13, RQ21, RQ21
// p_acspec.c:441   spop = line->special;
  MOV.W        (RQ21, 26), RD13
  MOV.L        RD13, (R2, 92)
// p_acspec.c:443   switch(thing->type)
  MOV.L        (RQ22, 128), RQ18
  BREQ.Q       33, RQ18, .L008018E3
  BREQ.Q       34, RQ18, .L008018E4
  BREQ.Q       35, RQ18, .L008018E5
  BREQ.Q       31, RQ18, .L008018E6
  BREQ.Q       32, RQ18, .L008018E7
  BREQ.Q       16, RQ18, .L008018E8
  BSR          .L008018E9, R0

.L008018E3:

.L008018E4:

.L008018E5:

.L008018E6:

.L008018E7:

.L008018E8:
// p_acspec.c:450   case MT_BRUISERSHOT:
  ADD          R0, 1, RD8
// p_acspec.c:452   break;
  BSR          .L008018E2, R0

.L008018E9:
// p_acspec.c:454   default:
  ADD          R0, 0, RD8
// p_acspec.c:456   break;

.L008018E2:
// p_acspec.c:459   switch(line->flags&0x3C00)
  MOV.W        (RQ21, 24), RQ18
  AND          RQ18, 15360, RQ9
  AND          RQ9, -1, RQ18
  LDIZ         5120, RD13
  BRGE.L       RD13, RQ18, .L008018F4
  ADD          R0, 1024, RD13
  BREQ.Q       RD13, RQ9, .L008018EB
  LDIZ         2048, RD13
  BREQ.Q       RD13, RQ9, .L008018EC
  LDIZ         3072, RD13
  BREQ.Q       RD13, RQ9, .L008018ED
  LUI          1, RD13
  BREQ.Q       RD13, RQ9, .L008018EE
  BSR          .L008018F3, R0

.L008018F4:
  LDIZ         5120, RD13
  BREQ.Q       RD13, RQ9, .L008018EF
  LDIZ         6144, RD13
  BREQ.Q       RD13, RQ9, .L008018F0
  LDIZ         10240, RD13
  BREQ.Q       RD13, RQ9, .L008018F1
  LDIZ         14336, RD13
  BREQ.Q       RD13, RQ9, .L008018F2
  BSR          .L008018F3, R0

.L008018EB:
// p_acspec.c:461   case 0x0400:
  BSR          .L00C02A22, R0

.L008018EC:
// p_acspec.c:463   case 0x0800:
  MOV.Q        (RQ22, 192), RQ23
  BRNE.Q       R0, RQ23, .L00C02A22
  BRNE.L       R0, RD8, .L00C02A22

.L008018F5:
// p_acspec.c:466   break;
  BSR          .L008018EA, R0

.L008018ED:
// p_acspec.c:467   case 0x0C00:
  BSR          .L00C02A22, R0

.L008018EE:
// p_acspec.c:469   case 0x1000:
  BSR          .L00C02A22, R0

.L008018EF:
// p_acspec.c:471   case 0x1400:
  BREQ.L       R0, RD8, .L00C02A22
// p_acspec.c:474   break;
  BSR          .L008018EA, R0

.L008018F0:
// p_acspec.c:475   case 0x1800:
  MOV.Q        (RQ22, 192), RQ23
  BREQ.Q       R0, RQ23, .L00C02A22
  BRNE.L       R0, RD8, .L00C02A22

.L008018F7:
// p_acspec.c:478   break;
  BSR          .L008018EA, R0

.L008018F1:

.L008018F2:
// p_acspec.c:480   case 0x3800:
  BRNE.L       R0, RD8, .L00C02A22
// p_acspec.c:483   break;
  BSR          .L008018EA, R0

.L008018F3:
// p_acspec.c:484   default:
  MOV.Q        (RQ22, 192), RQ23
  BREQ.Q       R0, RQ23, .L00C02A22
  BRNE.L       R0, RD8, .L00C02A22

.L008018F9:
// p_acspec.c:487   break;

.L008018EA:
// p_acspec.c:517   printf("P_AcsCrossSpecialLine: %d\n", line->acs_spec);
  MOVU.B       (RQ21, 30), RQ18
  MOV          .L00C02A23, RQ10
  ADD          RQ18, 0, RD11
  BSR          printf, R1
// p_acspec.c:519   P_AcsDoSpecialLine(thing, line);
  ADD          RQ22, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          P_AcsDoSpecialLine, R1

.L00C02A22:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_malloc_cat:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD8
  ADD          RD11, 0, RD18
// tk_core/tk_mmllist.c:967   
  BREQ.L       R0, RD18, .L00800A68
// tk_core/tk_mmllist.c:968   
  ADDS.L       RD8, 0, RD10
  ADD          RD18, 0, RD11
  BSR          TKMM_MallocCat, R1
  BSR          .L00C02A29, R0
// tk_core/tk_mmllist.c:971   
  BSR          .L00800A69, R0

.L00800A68:
// tk_core/tk_mmllist.c:974   
  ADDS.L       RD8, 0, RD10
  BSR          TKMM_Malloc, R1
  BSR          .L00C02A29, R0

.L00800A69:

.L00C02A29:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

R_CheckPlane:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
  ADD          RD11, 0, RD22
  ADD          RD12, 0, RD21
// r_plane.c:317   if (start < pl->minx)
  MOV.L        (RQ18, 12), RQ8
  BRGE.L       RQ8, RD22, .L008026BF
// r_plane.c:318   {
  MOV.L        (RQ18, 12), RD20
// r_plane.c:320   unionl = start;
  MOV.L        RD22, (R2, 92)
  BSR          .L008026C0, R0

.L008026BF:
// r_plane.c:323   {
  MOV.L        (RQ18, 12), RD27
  MOV.L        RD27, (R2, 92)
// r_plane.c:325   intrl = start;
  ADD          RD22, 0, RD20

.L008026C0:
// r_plane.c:328   if (stop > pl->maxx)
  MOV.L        (RQ18, 16), RQ8
  BRLE.L       RQ8, RD21, .L008026C1
// r_plane.c:329   {
  MOV.L        (RQ18, 16), RD23
// r_plane.c:331   unionh = stop;
  MOV.L        RD21, (R2, 88)
  BSR          .L008026C2, R0

.L008026C1:
// r_plane.c:334   {
  MOV.L        (RQ18, 16), RD27
  MOV.L        RD27, (R2, 88)
// r_plane.c:336   intrh = stop;
  ADD          RD21, 0, RD23

.L008026C2:
// r_plane.c:339   for (x=intrl ; x<= intrh ; x++)
  ADD          RD20, 0, RD9
  BRGT.L       RD23, RD9, .L008026C5

.L008026C3:
// r_plane.c:340   if (pl->top[x] != 0xff)
  ADD          RQ18, 21, RQ27
  MOVU.B       (RQ27, RD9), RQ8
  BRNE.Q       255, RQ8, .L008026C5
  ADDS.L       RD9, 1, RD9
  BRLE.L       RD23, RD9, .L008026C3

.L008026C5:
// r_plane.c:343   if (x > intrh)
  BRLE.L       RD23, RD9, .L008026C6
// r_plane.c:344   {
  MOV.L        (R2, 92), RD27
  MOV.L        RD27, (RQ18, 12)
// r_plane.c:346   pl->maxx = unionh;
  MOV.L        (R2, 88), RD13
  MOV.L        RD13, (RQ18, 16)
// r_plane.c:349   return pl;		
  ADD          RQ18, 0, RQ10
  BSR          .L00C02A2F, R0

.L008026C6:
// r_plane.c:353   lastvisplane->height = pl->height;
  MOV.L        (RQ18, 0), RQ8
  MOV.Q        lastvisplane, RQ27
  MOV.L        RQ8, (RQ27, 0)
// r_plane.c:354   lastvisplane->picnum = pl->picnum;
  MOV.L        (RQ18, 4), RQ8
  MOV.L        RQ8, (RQ27, 4)
// r_plane.c:355   lastvisplane->lightlevel = pl->lightlevel;
  MOV.L        (RQ18, 8), RQ8
  MOV.L        RQ8, (RQ27, 8)
// r_plane.c:357   pl = lastvisplane++;
  ADD          RQ27, 0, RQ18
  ADD          RQ27, 664, RQ27
  MOV.Q        RQ27, lastvisplane
// r_plane.c:358   pl->minx = start;
  MOV.L        RD22, (RQ18, 12)
// r_plane.c:359   pl->maxx = stop;
  MOV.L        RD21, (RQ18, 16)
// r_plane.c:361   memset (pl->top,0xff,sizeof(pl->top));
  ADD          RQ18, 21, RQ27
  ADD          RQ27, 0, RQ10
  ADD          R0, 255, RD11
  ADD          R0, 320, RQ12
  BSR          memset, R1
// r_plane.c:363   return pl;
  ADD          RQ18, 0, RQ10

.L00C02A2F:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_slamBackground:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// wi_stuff.c:408   {
  MOV          screens, RQ8
  MOV.Q        (RQ8, 0), RQ18
  BREQ.Q       R0, RQ18, .L00C02A35
// wi_stuff.c:411   if(!screens[1])
  MOV          screens, RQ8
  MOV.Q        (RQ8, 8), RQ18
  BREQ.Q       R0, RQ18, .L00C02A35
// wi_stuff.c:414   memcpy(screens[0], screens[1],
  MOV          screens, RQ8
  MOV.Q        (RQ8, 8), RQ18
  MOV.Q        (RQ8, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0x0001F400, RQ12
  BSR          __memcpy128, R1
// wi_stuff.c:417   V_MarkRect (0, 0, SCREENWIDTH, SCREENHEIGHT);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 320, RD12
  ADD          R0, 200, RD13
  BSR          V_MarkRect, R1

.L00C02A35:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

P_RemoveActivePlat:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
// p_plats.c:305   for (i = 0;i < MAXPLATS;i++)
  ADD          R0, 0, RD18

.L00801E5B:
// p_plats.c:306   if (plat == activeplats[i])
  MOV          activeplats, RQ23
  MOV.Q        (RQ23, RD18), RQ9
  MOV.Q        (R2, 88), RQ23
  BRNE.Q       RQ9, RQ23, .L00801E5E
// p_plats.c:307   {
  MOV          activeplats, RQ23
  MOV.Q        (RQ23, RD18), RQ9
  MOV.Q        (RQ9, 24), RQ8
  MOV.Q        RQ0, (RQ8, 104)
// p_plats.c:309   P_RemoveThinker(&(activeplats[i])->thinker);
  MOV.Q        (RQ23, RD18), RQ9
  ADD          RQ9, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_RemoveThinker, R1
// p_plats.c:310   activeplats[i] = NULL;
  MOV          activeplats, RQ23
  MOV.Q        RQ0, (RQ23, RD18)
// p_plats.c:312   return;
  BSR          .L00C02A3B, R0

.L00801E5E:
  ADDS.L       RD18, 1, RD18
  BRLT.L       30, RD18, .L00801E5B

.L00801E5D:
// p_plats.c:313   }
  MOV          .L00C02A3C, RQ10
  BSR          I_Error, R1

.L00C02A3B:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ClearBox:
// m_bbox.c:39   {
  LUI          0xFFFFFFFFFFF80000, RD13
  MOV.L        RD13, (RQ10, 12)
  MOV.L        RD13, (RQ10, 0)
// m_bbox.c:41   box[BOXBOTTOM] = box[BOXLEFT] = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD12
  MOV.L        RD12, (RQ10, 8)
  MOV.L        RD12, (RQ10, 4)

.L00C02A3D:
  JSR          R1, 0, R0

A_SPosAttack:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ22
// p_enemy.c:862   if (!actor->target)
  MOV.Q        (RQ22, 176), RQ27
  BREQ.Q       R0, RQ27, .L00C02A43
// p_enemy.c:865   S_StartSound (actor, sfx_shotgn);
  ADD          RQ22, 0, RQ10
  ADD          R0, 2, RD11
  BSR          S_StartSound, R1
// p_enemy.c:866   A_FaceTarget (actor);
  ADD          RQ22, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:867   bangle = actor->angle;
  MOVU.L       (RQ22, 56), RQ18
  ADDS.L       RQ18, 0, RD27
// p_enemy.c:868   slope = P_AimLineAttack (actor, bangle, MISSILERANGE);
  ADDU.L       RD27, R0, RQ18
  MOV.L        RD27, (R2, 116)
  ADD          RQ22, 0, RQ10
  ADD          RQ18, 0, RD11
  LUI          0x00008000, RD12
  BSR          P_AimLineAttack, R1
  MOV.L        RD10, (R2, 112)
// p_enemy.c:870   for (i=0 ; i<3 ; i++)
  ADD          R0, 0, RD23

.L00801B4D:
// p_enemy.c:871   {
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ8
  SHAD.L       RQ8, 20, RQ18
  MOV.L        (R2, 116), RD27
  ADDS.L       RD27, RQ18, RD21
// p_enemy.c:873   damage = ((P_Random()%5)+1)*3;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, 0, RQ8
  ADD          R0, 5, RD26
  MODS.L       RQ8, RD26, RQ8
  ADDS.L       RQ8, 1, RQ18
  ADD          R0, 3, R5
  MULS.L       RQ18, R5, RD20
// p_enemy.c:874   P_LineAttack (actor, angle, MISSILERANGE, slope, damage);
  ADDU.L       RD21, R0, RQ9
  ADD          RQ22, 0, RQ10
  ADDU.L       RQ9, R0, RD11
  LUI          0x00008000, RD12
  MOV.L        (R2, 112), RD13
  ADD          RD20, 0, RD14
  BSR          P_LineAttack, R1
  ADDS.L       RD23, 1, RD23
  BRLT.L       3, RD23, .L00801B4D

.L00801B4F:

.L00C02A43:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

M_EndGame:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1050   {
  ADD          RD0, 0, RD9
// m_menu.c:1052   if (!usergame)
  MOV.L        usergame, RD13
  BRNE.L       R0, RD13, .L0080166A
// m_menu.c:1053   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// m_menu.c:1055   return;
  BSR          .L00C02A49, R0

.L0080166A:
// m_menu.c:1058   if (netgame)
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L0080166B
// m_menu.c:1059   {
  MOV          .L00C02A4A, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:1061   return;
  BSR          .L00C02A49, R0

.L0080166B:
// m_menu.c:1064   M_StartMessage(ENDGAME,M_EndGameResponse,true);
  MOV          M_EndGameResponse, RQ18
  MOV          .L00C02A4B, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 1, RD12
  BSR          M_StartMessage, R1

.L00C02A49:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_DamageMobj:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 144)
  MOV.Q        RQ12, (R2, 136)
  ADD          RD13, 0, RD20
// p_inter.c:814   if ( !(target->flags & MF_SHOOTABLE) )
  MOV.L        (RQ9, 160), RQ18
  ADD          R0, 4, RD27
  BTST.L       RD27, RQ18, .L00C02A51
// p_inter.c:817   if (target->health <= 0)
  MOV.L        (RQ9, 164), RQ18
  BRLE.L       R0, RQ18, .L00C02A51
// p_inter.c:820   if(target->flags & MF_DORMANT)
  MOV.L        (RQ9, 160), RQ18
  LUI          0x00010000, RD27
  BTSTN.L      RD27, RQ18, .L00C02A51
// p_inter.c:823   if ( target->flags & MF_SKULLFLY )
  MOV.L        (RQ9, 160), RQ18
  LUI          4096, RD27
  BTST.L       RD27, RQ18, .L00801CBC
// p_inter.c:824   {
  MOV.L        RD0, (RQ9, 120)
  MOV.L        RD0, (RQ9, 116)
  MOV.L        RD0, (RQ9, 112)

.L00801CBC:
// p_inter.c:828   player = target->player;
  MOV.Q        (RQ9, 192), RQ21
// p_inter.c:829   if (player && gameskill == sk_baby)
  BREQ.Q       R0, RQ21, .L00801CBD
  MOV.L        gameskill, RD27
  BRNE.L       R0, RD27, .L00801CBD

.L00801CBE:
// p_inter.c:830   damage >>= 1; 	// take half damage in trainer mode
  SHAR         RD20, 1, RD20

.L00801CBD:
// p_inter.c:836   if (inflictor
  MOV.Q        (R2, 144), RQ27
  BREQ.Q       R0, RQ27, .L00801CC0
  MOV.L        (RQ9, 160), RQ18
  LUI          1, RD27
  BTSTN.L      RD27, RQ18, .L00801CC0

.L00801CC2:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L00801CC1
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 192), RQ26
  BREQ.Q       R0, RQ26, .L00801CC1

.L00801CC4:
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 192), RQ26
  MOV.L        (RQ26, 116), RQ18
  BRNE.Q       7, RQ18, .L00801CC1
  BSR          .L00801CC0, R0

.L00801CC1:
// p_inter.c:841   {
  MOV.L        (RQ9, 28), RQ18
  MOV.L        (RQ9, 24), RQ22
  MOV.Q        (R2, 144), RQ27
  MOV.L        (RQ27, 28), RQ8
  MOV.L        (RQ27, 24), RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ22, 0, RD12
  ADD          RQ18, 0, RD13
  BSR          R_PointToAngle2, R1
  MOV.L        RD10, (R2, 128)
// p_inter.c:847   thrust = damage*(FRACUNIT>>3)*100/target->info->mass;
  SHAD.L       RD20, 13, RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ22
  MOV.Q        (RQ9, 136), RQ26
  MOV.L        (RQ26, 72), RQ8
  DIVS.L       RQ22, RQ8, RD25
  MOV.L        RD25, (R2, 120)
  BRGE.L       40, RD20, .L00801CC6
  MOV.L        (RQ9, 164), RQ23
  BRLE.L       RQ23, RD20, .L00801CC6

.L00801CC9:
  MOV.L        (RQ9, 32), RQ18
  MOV.Q        (R2, 144), RQ27
  MOV.L        (RQ27, 32), RQ22
  SUBS.L       RQ18, RQ22, RQ8
  LUI          1024, RD26
  BRLE.L       RD26, RQ8, .L00801CC6

.L00801CC8:
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ23, .L00801CC6

.L00801CC7:
// p_inter.c:854   {
  ADD          R0, 0x0000000080000000, RD27
  MOVU.L       (R2, 128), RD26
  ADDU.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 128)
// p_inter.c:856   thrust *= 4;
  MOV.L        (R2, 120), RD25
  SHAD.L       RD25, 2, RD25
  MOV.L        RD25, (R2, 120)

.L00801CC6:
// p_inter.c:859   ang >>= ANGLETOFINESHIFT;
  MOVU.L       (R2, 128), RD27
  SHLR         RD27, 19, RD27
// p_inter.c:860   target->momx += FixedMul (thrust, finecosine[ang]);
  MOV.L        (RQ9, 112), RQ18
  MOV.Q        finecosine, RQ26
  MOV.L        (RQ26, RD27), RQ22
  MOV.L        RD27, (R2, 128)
  MOV.L        (R2, 120), RD10
  ADD          RQ22, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.L        RQ23, (RQ9, 112)
// p_inter.c:861   target->momy += FixedMul (thrust, finesine[ang]);
  MOV.L        (RQ9, 116), RQ18
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD27), RQ22
  MOV.L        (R2, 120), RD10
  ADD          RQ22, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.L        RQ23, (RQ9, 116)

.L00801CC0:
// p_inter.c:865   if (player)
  BREQ.Q       R0, RQ21, .L00801CCB
  MOV.Q        (RQ9, 88), RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.W        (RQ26, 14), RQ18
  BRNE.Q       11, RQ18, .L00801CCC
  MOV.L        (RQ9, 164), RQ22
  BRLT.L       RQ22, RD20, .L00801CCC

.L00801CCD:
// p_inter.c:870   {
  MOV.L        (RQ9, 164), RQ8
  ADDS.L       RQ8, -1, RD20

.L00801CCC:
  BRGE.L       1000, RD20, .L00801CCF
  MOV.L        (RQ21, 200), RQ23
  ADD          R0, 2, RD27
  BTSTN.L      RD27, RQ23, .L00C02A51
  MOV.L        (RQ21, 48), RQ18
  BRNE.L       R0, RQ18, .L00C02A51

.L00801CCF:
  MOV.L        (RQ21, 44), RQ22
  BREQ.L       R0, RQ22, .L00801CD2
  MOV.L        (RQ21, 44), RQ8
  BRNE.Q       1, RQ8, .L00801CD3
// p_inter.c:886   saved = damage/3;
  MOV.L        RD20, (R2, 124)
  ADD          R0, 3, RD27
  MOV.L        (R2, 124), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 124)
  BSR          .L00801CD4, R0

.L00801CD3:
// p_inter.c:888   saved = damage/2;
  MOV.L        RD20, (R2, 124)
  ADD          R0, 2, RD27
  MOV.L        (R2, 124), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 124)

.L00801CD4:
  MOV.L        (RQ21, 40), RQ23
  MOV.L        (R2, 124), RD27
  BRGT.L       RD27, RQ23, .L00801CD5
// p_inter.c:893   saved = player->armorpoints;
  MOV.L        (RQ21, 40), RD27
  MOV.L        RD27, (R2, 124)
// p_inter.c:894   player->armortype = 0;
  MOV.L        RD0, (RQ21, 44)

.L00801CD5:
// p_inter.c:895   }
  MOV.L        (RQ21, 40), RQ18
  MOV.L        (R2, 124), RD27
  SUBS.L       RQ18, RD27, RQ22
  MOV.L        RQ22, (RQ21, 40)
// p_inter.c:897   damage -= saved;
  SUBS.L       RD20, RD27, RD20

.L00801CD2:
// p_inter.c:898   }
  MOV.L        (RQ21, 36), RQ8
  SUBS.L       RQ8, RD20, RQ23
  MOV.L        RQ23, (RQ21, 36)
  MOV.L        (RQ21, 36), RQ18
  BRGE.L       R0, RQ18, .L00801CD6
// p_inter.c:901   player->health = 0;
  MOV.L        RD0, (RQ21, 36)

.L00801CD6:
// p_inter.c:903   player->attacker = source;
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ21, 240)
// p_inter.c:904   player->damagecount += damage;	// add damage after armor / invuln
  MOV.L        (RQ21, 232), RQ22
  ADDS.L       RQ22, RD20, RQ8
  MOV.L        RQ8, (RQ21, 232)
  MOV.L        (RQ21, 232), RQ23
  BRLE.L       100, RQ23, .L00801CD7
// p_inter.c:907   player->damagecount = 100;	// teleport stomp does 10k points...
  ADD          R0, 100, RD27
  MOV.L        RD27, (RQ21, 232)

.L00801CD7:
// p_inter.c:909   temp = damage < 100 ? damage : 100;
  BRGE.L       100, RD20, .L00801CD8
  ADD          RD20, 0, RQ18
  BSR          .L00801CD9, R0

.L00801CD8:
  ADD          R0, 100, RQ18

.L00801CD9:
  MOV.L        RD18, (R2, 116)
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  BRNE.Q       RQ25, RQ21, .L00801CDA
// p_inter.c:912   I_Tactile (40,10,40+temp*2);
  MOV.L        (R2, 116), RD27
  SHAD.L       RD27, 1, RQ22
  ADDS.L       RQ22, 40, RQ8
  ADD          R0, 40, RD10
  ADD          R0, 10, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          I_Tactile, R1

.L00801CDA:

.L00801CCB:
// p_inter.c:916   if(!(target->flags & MF_DORMANT))
  MOV.L        (RQ9, 160), RQ23
  LUI          0x00010000, RD27
  BTSTN.L      RD27, RQ23, .L00801CDB
// p_inter.c:917   {
  MOV.L        (RQ9, 164), RQ18
  SUBS.L       RQ18, RD20, RQ22
  MOV.L        RQ22, (RQ9, 164)
  MOV.L        (RQ9, 164), RQ8
  BRGT.L       R0, RQ8, .L00801CDC
// p_inter.c:920   {
  MOV.Q        (R2, 136), RQ10
  ADD          RQ9, 0, RQ11
  BSR          P_KillMobj, R1
// p_inter.c:922   return;
  BSR          .L00C02A51, R0

.L00801CDC:

.L00801CDB:
// p_inter.c:926   if ( (P_Random () < target->info->painchance)
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  MOV.Q        (RQ9, 136), RQ27
  MOV.L        (RQ27, 32), RQ18
  BRGE.L       RQ18, RQ23, .L00801CDD
  MOV.L        (RQ9, 160), RQ22
  LUI          4096, RD27
  BTSTN.L      RD27, RQ22, .L00801CDD

.L00801CDE:
// p_inter.c:928   {
  MOV.L        (RQ9, 160), RQ8
  OR           RQ8, 64, RQ23
  MOV.L        RQ23, (RQ9, 160)
// p_inter.c:930   P_SetMobjState (target, target->info->painstate);
  MOV.Q        (RQ9, 136), RQ27
  MOV.L        (RQ27, 28), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1

.L00801CDD:
// p_inter.c:933   target->reactiontime = 0;		// we're awake now...	
  MOV.L        RD0, (RQ9, 184)
// p_inter.c:935   if ( (!target->threshold || (target->type == MT_VILE))
  MOV.L        (RQ9, 188), RQ22
  BREQ.L       R0, RQ22, .L00801CE5
  MOV.L        (RQ9, 128), RQ8
  BREQ.Q       3, RQ8, .L00801CE5
  BSR          .L00801CE0, R0

.L00801CE5:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L00801CE0

.L00801CE4:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       RQ9, RQ27, .L00801CE0

.L00801CE3:
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 128), RQ23
  BREQ.Q       3, RQ23, .L00801CE0

.L00801CE2:
  MOV.L        (RQ9, 160), RQ18
  LUI          0x00010000, RD27
  BTSTN.L      RD27, RQ18, .L00801CE0

.L00801CE1:
// p_inter.c:942   target->target = source;
  MOV.Q        (R2, 136), RQ27
  MOV.Q        RQ27, (RQ9, 176)
// p_inter.c:943   target->threshold = BASETHRESHOLD;
  ADD          R0, 100, RD26
  MOV.L        RD26, (RQ9, 188)
  MOV.Q        (RQ9, 152), RQ25
  MOV.Q        (RQ9, 136), RQ24
  MOV.L        (RQ24, 4), RQ18
  MOV          states, RQ13
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ24
  ADD          RQ13, RQ24, RQ24
  BRNE.Q       RQ24, RQ25, .L00801CE7
  MOV.Q        (RQ9, 136), RQ27
  MOV.L        (RQ27, 12), RQ22
  BREQ.L       R0, RQ22, .L00801CE7

.L00801CE8:
// p_inter.c:946   P_SetMobjState (target, target->info->seestate);
  MOV.Q        (RQ9, 136), RQ27
  MOV.L        (RQ27, 12), RQ18
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          P_SetMobjState, R1

.L00801CE7:

.L00801CE0:

.L00C02A51:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_Start:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// wi_stuff.c:1942   WI_initVariables(wbstartstruct);
  ADD          RQ18, 0, RQ10
  BSR          WI_initVariables, R1
// wi_stuff.c:1943   WI_loadData();
  BSR          WI_loadData, R1
// wi_stuff.c:1945   if (deathmatch)
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00802AE2
// wi_stuff.c:1946   WI_initDeathmatchStats();
  BSR          WI_initDeathmatchStats, R1
  BSR          .L00802AE3, R0

.L00802AE2:
  MOV.L        netgame, RD13
  BREQ.L       R0, RD13, .L00802AE4
// wi_stuff.c:1948   WI_initNetgameStats();
  BSR          WI_initNetgameStats, R1
  BSR          .L00802AE5, R0

.L00802AE4:
// wi_stuff.c:1950   WI_initStats();
  BSR          WI_initStats, R1

.L00802AE5:

.L00802AE3:

.L00C02A57:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

HUlib_delCharFromIText:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// hu_lib.c:296   {
  ADD          RQ18, 0, RQ23
  MOV.L        (RQ23, 104), RQ9
  MOV.L        (RQ18, 112), RQ8
  BREQ.Q       RQ8, RQ9, .L00802D10
// hu_lib.c:298   HUlib_delCharFromTextLine(&it->l);
  ADD          RQ18, 0, RQ23
  ADD          RQ23, 0, RQ10
  BSR          HUlib_delCharFromTextLine, R1

.L00802D10:

.L00C02A5D:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

I_StartFrame:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -248, R2
  MOV.L        viewwindowy, RD8
  ADD          R0, 320, RD23
  MOV.Q        screen, RQ22
  MOV.L        viewwindowx, RD21
  MOV.Q        vid_scr_vtop, RQ20
// i_btesh4.c:221   {
  ADD          R0, 320, R5
  MULS.L       RD8, R5, RQ18
  LEA.W        RQ22, RQ18, RQ20
// i_btesh4.c:223   vid_scr_vbot=screen+((viewheight+viewwindowy)*BASEWIDTH);
  MOV.L        viewheight, RD13
  ADDS.L       RD13, RD8, RQ18
  ADD          R0, 320, R5
  MULS.L       RQ18, R5, RQ9
  LEA.W        RQ22, RQ9, RQ13
  MOV.Q        RQ13, vid_scr_vbot
// i_btesh4.c:224   vid_scr_vlf=viewwindowx+0;
  MOV.L        RD21, vid_scr_vlf
// i_btesh4.c:225   vid_scr_vrt=viewwindowx+scaledviewwidth;
  MOV.L        scaledviewwidth, RD12
  ADDS.L       RD21, RD12, RD13
  MOV.L        RD13, vid_scr_vrt

.L00C02A5E:
  MOV.Q        RQ20, vid_scr_vtop
  ADD          R2, 248, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

I_InitNetwork:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -336, R2
// i_btesh4.c:49   {
  ADD          R0, 144, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, doomcom
// i_btesh4.c:51   memset (doomcom, 0, sizeof(*doomcom) );
  MOV.Q        doomcom, RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 144, RQ12
  BSR          memset, R1
// i_btesh4.c:53   doomcom-> ticdup = 1;
  ADD          R0, 1, RD18
  MOV.Q        doomcom, RQ13
  MOV.W        RD18, (RQ13, 18)
// i_btesh4.c:54   doomcom-> extratics = 0;
  MOV.W        RD0, (RQ13, 20)
// i_btesh4.c:56   netgame = false;
  MOV.L        RD0, netgame
// i_btesh4.c:57   doomcom->id = DOOMCOM_ID;
  ADD          R0, 0x12345678, RQ12
  MOV.Q        RQ12, (RQ13, 0)
// i_btesh4.c:58   doomcom->numplayers = doomcom->numnodes = 1;
  MOV.W        RD18, (RQ13, 16)
  MOV.W        RD18, (RQ13, 34)
// i_btesh4.c:59   doomcom->deathmatch = false;
  MOV.W        RD0, (RQ13, 22)
// i_btesh4.c:60   doomcom->consoleplayer = 0;
  MOV.W        RD0, (RQ13, 32)
// i_btesh4.c:61   return;

.L00C02A64:
  ADD          R2, 336, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

P_MovePsprites:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ22
// p_pspr.c:869   psp = &player->psprites[0];
  ADD          RQ22, 264, RQ21
  ADD          RQ21, 0, RQ18
// p_pspr.c:870   for (i=0 ; i<NUMPSPRITES ; i++, psp++)
  ADD          R0, 0, RD8

.L00801EC7:
// p_pspr.c:873   if ( (state = psp->state) )	
  MOV.Q        (RQ18, 0), RQ21
  MOV.Q        RQ21, (R2, 96)
  BREQ.Q       R0, RQ21, .L00801ECA
  MOV.L        (RQ18, 8), RQ9
  BREQ.Q       -1, RQ9, .L00801ECB
// p_pspr.c:879   {
  MOV.L        (RQ18, 8), RQ9
  ADDS.L       RQ9, -1, RQ23
  MOV.L        RQ23, (RQ18, 8)
  MOV.L        (RQ18, 8), RQ9
  BRNE.L       R0, RQ9, .L00801ECC
// p_pspr.c:882   P_SetPsprite (player, i, psp->state->nextstate);
  MOV.Q        (RQ18, 0), RQ21
  MOV.L        (RQ21, 24), RQ9
  ADD          RQ22, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_SetPsprite, R1

.L00801ECC:

.L00801ECB:

.L00801ECA:
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  ADD          RQ18, 0, RQ21
  ADD          RQ18, 24, RQ18
  BRLT.L       2, RD8, .L00801EC7

.L00801EC9:
// p_pspr.c:887   player->psprites[ps_flash].sx = player->psprites[ps_weapon].sx;
  ADD          RQ22, 264, RQ21
  ADD          RQ21, 0, RQ13
  MOV.L        (RQ13, 12), RQ9
  ADD          RQ21, 24, RQ13
  MOV.L        RQ9, (RQ13, 12)
// p_pspr.c:888   player->psprites[ps_flash].sy = player->psprites[ps_weapon].sy;
  ADD          RQ21, 0, RQ13
  MOV.L        (RQ13, 16), RQ9
  ADD          RQ21, 24, RQ13
  MOV.L        RQ9, (RQ13, 16)

.L00C02A6A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

tk_fopen:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 80)
// tk_core/tk_vfile.c:1007   
  ADD          RQ0, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.Q        (R2, 80), RQ12
  BSR          tk_fopen2, R1

.L00C02A70:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R8
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

P_GiveCard:
// p_inter.c:279   {
  ADD          RQ10, 72, RQ13
  MOV.L        (RQ13, RD11), RQ12
  BRNE.L       R0, RQ12, .L00C02A71
// p_inter.c:283   player->bonuscount = BONUSADD;
  ADD          R0, 6, RD17
  MOV.L        RD17, (RQ10, 236)
// p_inter.c:284   player->cards[card] = 1;
  ADD          RQ10, 72, RQ13
  ADD          R0, 1, RD16
  MOV.L        RD16, (RQ13, RD11)

.L00C02A71:
  JSR          R1, 0, R0

A_PainDie:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
  LUI          0x00040000, RD23
  ADD          R0, 0x0000000080000000, RD22
  ADD          R0, 0x00000000C0000000, RD21
// p_enemy.c:1556   {
  ADD          RQ18, 0, RQ10
  BSR          A_Fall, R1
// p_enemy.c:1558   A_PainShootSkull (actor, actor->angle+ANG90);
  MOVU.L       (RQ18, 56), RQ9
  ADDU.L       RQ9, R0, RQ8
  ADDU.L       RQ8, RD23, RQ8
  ADD          RQ18, 0, RQ10
  ADDU.L       RQ8, R0, RD11
  BSR          A_PainShootSkull, R1
// p_enemy.c:1559   A_PainShootSkull (actor, actor->angle+ANG180);
  MOVU.L       (RQ18, 56), RQ9
  ADDU.L       RQ9, RD22, RQ8
  ADD          RQ18, 0, RQ10
  ADDU.L       RQ8, R0, RD11
  BSR          A_PainShootSkull, R1
// p_enemy.c:1560   A_PainShootSkull (actor, actor->angle+ANG270);
  MOVU.L       (RQ18, 56), RQ9
  ADDU.L       RQ9, RD21, RQ8
  ADD          RQ18, 0, RQ10
  ADDU.L       RQ8, R0, RD11
  BSR          A_PainShootSkull, R1

.L00C02A77:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_EndPrint:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// p_acspec.c:1068   {
  ADD          RQ18, 1072, RQ11
  MOV          .L00C02A7E, RQ10
  BSR          printf, R1
// p_acspec.c:1070   run->prnpos=0;
  MOVU.B       RD0, (RQ18, 1328)

.L00C02A7D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_bigint_xor:
// tk_core/tku_bigint.c:170   

.L00C02A7F:
  JSR          R1, 0, R0

opendir:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 72)
// pdpc201/bt_readdir.c:10   
  MOV.Q        (R2, 72), RQ10
  BSR          tk_opendir, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ10

.L00C02A85:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tk_dbg_puts:
// tk_core/tk_puts.c:980   

.L00C02A86:
  JSR          R1, 0, R0

EV_StartLightStrobing:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 88)
// p_lights.c:221   secnum = -1;
  ADD          R0, -1, RD9
// p_lights.c:222   while ((secnum = P_FindSectorFromLineTag(line,secnum)) >= 0)
  BSR          .L00801CFB, R0

.L00801CF9:
// p_lights.c:223   {
  MOV.Q        sectors, RQ13
  SHAD.L       RD9, 7, RQ8
  ADD          RQ13, RQ8, RQ8
// p_lights.c:225   if (sec->specialdata)
  MOV.Q        (RQ8, 104), RQ23
  BRNE.Q       R0, RQ23, .L00801CFB
// p_lights.c:228   P_SpawnStrobeFlash (sec,SLOWDARK, 0);
  ADD          RQ8, 0, RQ10
  ADD          R0, 35, RD11
  ADD          R0, 0, RD12
  BSR          P_SpawnStrobeFlash, R1

.L00801CFB:
  MOV.Q        (R2, 88), RQ10
  ADDS.L       RD9, 0, RD11
  BSR          P_FindSectorFromLineTag, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD9
  BRGE.L       R0, RQ18, .L00801CF9

.L00801CFA:

.L00C02A8C:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

M_SaveSelect:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// m_menu.c:660   saveStringEnter = 1;
  ADD          R0, 1, RD23
  MOV.L        RD23, saveStringEnter
// m_menu.c:662   saveSlot = choice;
  MOV.L        RD18, saveSlot
// m_menu.c:663   strcpy(saveOldString,savegamestrings[choice]);
  MOV          savegamestrings, RQ23
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ22
  ADD          RQ23, RQ22, RQ22
  MOV          saveOldString, RQ10
  ADD          RQ22, 0, RQ11
  BSR          strcpy, R1
// m_menu.c:664   if (!strcmp(savegamestrings[choice],EMPTYSTRING))
  MOV          savegamestrings, RQ23
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ22
  ADD          RQ23, RQ22, RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C025E3, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00801640
// m_menu.c:665   savegamestrings[choice][0] = 0;
  MOV          savegamestrings, RQ23
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ22
  ADD          RQ23, RQ22, RQ22
  MOV.B        RD0, (RQ22, 0)

.L00801640:
// m_menu.c:666   saveCharIndex = strlen(savegamestrings[choice]);
  MOV          savegamestrings, RQ23
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ10
  ADD          RQ23, RQ10, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ8
  ADDS.L       RQ8, 0, RD23
  MOV.L        RD23, saveCharIndex

.L00C02A92:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_minOutWindowScale:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// am_map.c:598   {
  MOV.L        TU7A00C41B/min_scale_mtof, RD18
  ADD          RD18, 0, RD9
  MOV.L        RD9, TU7A00C41B/scale_mtof
// am_map.c:600   scale_ftom = FixedDiv(FRACUNIT, scale_mtof);
  LUI          16, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_ftom
// am_map.c:601   AM_activateNewScale();
  BSR          AM_activateNewScale, R1

.L00C02A98:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

tk_mfreezone:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 72)
// tk_core/tk_mmllist.c:1094   
  ADDS.L       RD9, 0, RD10
  MOV.L        (R2, 72), RD11
  BSR          TKMM_FreeZone, R1

.L00C02A9E:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

M_ReadThis:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1074   {
  ADD          RD0, 0, RD9
// m_menu.c:1076   M_SetupNextMenu(&ReadDef1);
  MOV          ReadDef1, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C02AA4:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BrainSpit:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
// p_enemy.c:1941   easy ^= 1;
  MOV.L        A_BrainSpit/easy!143, RD27
  XOR          RD27, 1, RD27
// p_enemy.c:1942   if (gameskill <= sk_easy && (!easy))
  MOV.L        gameskill, RD26
  ADD          R0, 1, R5
  CMPLE.Q      RD26, R5, RQ18
  CMPEQ.Q      RD27, R0, RQ9
  MOV.L        RD27, A_BrainSpit/easy!143
  BTSTN.L      RQ9, RQ18, .L00C02AAA
// p_enemy.c:1946   targ = braintargets[braintargeton];
  MOV          braintargets, RQ27
  MOV.L        braintargeton, RD26
  MOV.Q        (RQ27, RD26), RQ23
// p_enemy.c:1947   braintargeton = (braintargeton+1)%numbraintargets;
  ADDS.L       RD26, 1, RQ18
  MOV.L        numbraintargets, RD27
  MODS.L       RQ18, RD27, RD26
  MOV.L        RD26, braintargeton
// p_enemy.c:1950   newmobj = P_SpawnMissile (mo, targ, MT_SPAWNSHOT);
  ADD          RQ21, 0, RQ10
  ADD          RQ23, 0, RQ11
  ADD          R0, 28, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ8
// p_enemy.c:1951   newmobj->target = targ;
  MOV.Q        RQ23, (RQ8, 176)
// p_enemy.c:1952   newmobj->reactiontime =
  MOV.L        (RQ23, 28), RQ9
  MOV.L        (RQ21, 28), RQ18
  SUBS.L       RQ9, RQ18, RQ22
  MOV.L        (RQ8, 116), RQ18
  DIVS.L       RQ22, RQ18, RQ9
  MOV.Q        (RQ8, 152), RQ20
  MOV.L        (RQ20, 8), RQ18
  DIVS.L       RQ9, RQ18, RQ22
  MOV.L        RQ22, (RQ8, 184)
// p_enemy.c:1955   S_StartSound(NULL, sfx_bospit);
  ADD          RQ0, 0, RQ10
  ADD          R0, 94, RD11
  BSR          S_StartSound, R1

.L00C02AAA:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

A_FireCGun:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 128)
// p_pspr.c:738   {
  MOV.Q        (RQ9, 0), RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1
// p_pspr.c:741   if (!player->ammo[weaponinfo[player->readyweapon].ammo])
  ADD          RQ9, 160, RQ23
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        (RQ23, RQ18), RQ8
  BREQ.L       R0, RQ8, .L00C02AB0
// p_pspr.c:744   P_SetMobjState (player->mo, S_PLAY_ATK2);
  MOV.Q        (RQ9, 0), RQ23
  ADD          RQ23, 0, RQ10
  ADD          R0, 155, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:745   player->ammo[weaponinfo[player->readyweapon].ammo]--;
  ADD          RQ9, 160, RQ23
  MOV.L        (RQ9, 116), RQ18
  MOV          weaponinfo, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ8
  MOV.L        (RQ23, RQ8), RQ18
  ADDS.L       RQ18, -1, RQ8
  MOV.L        (RQ9, 116), RQ18
  ADD          R0, 24, R5
  MUL.L        RQ18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        RQ8, (RQ23, RQ18)
// p_pspr.c:756   P_SetPsprite (player,
  MOV.L        (RQ9, 116), RQ8
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 20), RQ8
  MOV.Q        (R2, 128), RQ27
  MOV.Q        (RQ27, 0), RQ23
  MOV          states, RQ25
  ADD          R0, 52, RD24
  ADD          R0, 40, R5
  MUL.L        RD24, R5, RQ26
  ADD          RQ25, RQ26, RQ26
  ADD          RQ23, 0, RQ21
  SUB          RQ21, RQ26, RQ21
  ADD          R0, 40, RD25
  DIVS.L       RQ21, RD25, RQ21
  ADDS.L       RQ8, 0, RQ22
  ADD          RQ22, RQ21, RQ20
  ADDS.L       RQ20, 0, RQ18
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          RQ18, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:763   P_BulletSlope (player->mo);
  MOV.Q        (RQ9, 0), RQ26
  ADD          RQ26, 0, RQ10
  BSR          P_BulletSlope, R1
// p_pspr.c:765   P_GunShot (player->mo, !player->refire);
  MOV.L        (RQ9, 204), RQ18
  CMPEQ.Q      RQ18, R0, RQ8
  MOV.Q        (RQ9, 0), RQ26
  ADD          RQ26, 0, RQ10
  ADDS.L       RQ8, 0, RD11
  BSR          P_GunShot, R1

.L00C02AB0:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

R_DrawSpanLow:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
// r_draw.c:1735   if (ds_x2 < ds_x1
  MOV.L        ds_x2, RD13
  MOV.L        ds_x1, RD12
  CMPGT.Q      RD12, RD13, RQ18
  CMPLT.Q      RD12, R0, RQ23
  OR           RQ18, RQ23, RQ8
  ADD          R0, 320, R5
  CMPGE.Q      RD13, R5, RQ18
  OR           RQ8, RQ18, RQ23
  MOV.L        ds_y, RD13
  ADDU.L       RD13, R0, RQ8
  ADD          R0, 200, RQ13
  CMPGT.Q      RQ8, RQ13, RQ18
  OR           RQ23, RQ18, RQ8
  BREQ.L       R0, RQ8, .L0080260F
// r_draw.c:1739   {
  MOV          .L00C02AB7, RQ10
  MOV.L        ds_x1, RD11
  MOV.L        ds_x2, RD12
  MOV.L        ds_y, RD13
  BSR          I_Error, R1

.L0080260F:
// r_draw.c:1748   xfrac = ds_xfrac;
  MOV.L        ds_xfrac, RD21
// r_draw.c:1749   yfrac = ds_yfrac;
  MOV.L        ds_yfrac, RD20
// r_draw.c:1755   x1 = ds_x1 << 1;
  MOV.L        ds_x1, RD13
  SHAD.L       RD13, 1, RD12
// r_draw.c:1756   x2 = ds_x2 << 1;
  MOV.L        ds_x2, RD13
  SHAD.L       RD13, 1, RD11
// r_draw.c:1767   dest = ylookup[ds_y] + columnofs[x1];
  MOV          ylookup, RQ13
  MOV.L        ds_y, RD10
  MOV.Q        (RQ13, RD10), RQ22
  MOV          columnofs, RQ13
  MOV.L        (RQ13, RD12), RQ18
  LEA.W        RQ22, RQ18, RQ9
// r_draw.c:1772   count = (x2 - x1)>>1;
  SUBS.L       RD11, RD12, RQ23
  MOV.L        RD11, (R2, 112)
  MOV.L        RD12, (R2, 116)
  SHAR         RQ23, 1, RD13
  MOV.L        RD13, (R2, 124)
// r_draw.c:1773   do

.L00802610:
// r_draw.c:1774   {
  SHAR         RD20, 10, RQ8
  AND          RQ8, 4032, RQ13
  SHLR.Q       RD21, 16, RQ18
  AND          RQ18, 63, RQ18
  ADDS.L       RQ13, RQ18, RD12
// r_draw.c:1778   *dest++ = ds_colormap[ds_source[spot]];
  MOV.Q        ds_source, RQ11
  MOVU.B       (RQ11, RD12), RQ23
  MOV.Q        ds_colormap, RQ10
  MOVU.W       (RQ10, RQ23), RQ8
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 2, RQ9
  MOVU.W       RQ8, (RQ22, 0)
// r_draw.c:1779   *dest++ = ds_colormap[ds_source[spot]];
  MOVU.B       (RQ11, RD12), RQ18
  MOV.L        RD12, (R2, 120)
  MOVU.W       (RQ10, RQ18), RQ23
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 2, RQ9
  MOVU.W       RQ23, (RQ22, 0)
// r_draw.c:1781   xfrac += ds_xstep;
  MOV.L        ds_xstep, RD11
  ADDS.L       RD21, RD11, RD21
// r_draw.c:1782   yfrac += ds_ystep;
  MOV.L        ds_ystep, RD11
  ADDS.L       RD20, RD11, RD20
  MOV.L        (R2, 124), RD11
  ADD          RD11, 0, RQ18
  ADDS.L       RD11, -1, RD11
  MOV.L        RD11, (R2, 124)
  BRNE.L       R0, RQ18, .L00802610

.L00C02AB6:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

I_SMus_Tick:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// i_bgb_mus_btsh.c:865   SMus_UpdateVolume();
  BSR          SMus_UpdateVolume, R1
// i_bgb_mus_btsh.c:867   if(i_smus_tt>0)
  MOV.L        i_smus_tt, RD13
  BRLE.L       R0, RD13, .L00801291
// i_bgb_mus_btsh.c:868   {
  MOV.L        i_smus_tt, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, i_smus_tt
// i_bgb_mus_btsh.c:871   return(1);
  ADD          R0, 1, RD10
  BSR          .L00C02ABD, R0

.L00801291:
// i_bgb_mus_btsh.c:874   i_smus_tt=0;
  MOV.L        RD0, i_smus_tt
// i_bgb_mus_btsh.c:876   i=5;
  ADD          R0, 5, RD18
// i_bgb_mus_btsh.c:878   while(!i_smus_tt && ((i--)>0))
  BSR          .L00801294, R0

.L00801292:
// i_bgb_mus_btsh.c:879   {
  BSR          I_SMus_ParseEvent, R1

.L00801294:
  MOV.L        i_smus_tt, RD13
  BRNE.L       R0, RD13, .L00801295
  ADD          RD18, 0, RQ9
  ADDS.L       RD18, -1, RD18
  BRLE.L       R0, RQ9, .L00801295
  BSR          .L00801292, R0

.L00801295:

.L00801293:
// i_bgb_mus_btsh.c:881   }
  CMPGT.Q      RD18, R0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C02ABD:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

I_ReadScreen:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
// i_btesh4.c:2512   memcpy (scr, screen, SCREENWIDTH*SCREENHEIGHT*sizeof(dt_scrpix));
  MOV.Q        screen, RQ9
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 0x0001F400, RQ12
  BSR          __memcpy128, R1

.L00C02AC3:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_SetLineBlocking:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RD11, 0, RD22
  MOV.L        RD12, (R2, 96)
// p_acspec.c:903   printf("P_AcsRun_SetLineBlocking: a1=%d a2=%d\n",
  MOV          .L00C02ACA, RQ10
  ADD          RD22, 0, RD11
  MOV.L        (R2, 96), RD12
  BSR          printf, R1
// p_acspec.c:906   idx=0;
  ADD          R0, 0, RD21
  MOV.L        RD21, (R2, 92)
// p_acspec.c:907   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 92, RQ23
  ADD          RQ23, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:908   while(ld)
  BSR          .L00801941, R0

.L0080193F:
// p_acspec.c:909   {
  MOV.L        (R2, 96), RD21
  BREQ.L       R0, RD21, .L00801942
// p_acspec.c:911   {
  MOV.W        (RQ18, 24), RQ9
  OR           RQ9, 1, RQ8
  MOV.W        RQ8, (RQ18, 24)
  BSR          .L00801943, R0

.L00801942:
// p_acspec.c:914   {
  MOV.W        (RQ18, 24), RQ9
  AND          RQ9, -4, RQ8
  MOV.W        RQ8, (RQ18, 24)

.L00801943:
// p_acspec.c:918   ld=P_AcsQueryLine(&idx, a1);
  ADD          R2, 92, RQ23
  ADD          RQ23, 0, RQ10
  ADD          RD22, 0, RD11
  BSR          P_AcsQueryLine, R1
  ADD          RQ10, 0, RQ18

.L00801941:
  BRNE.Q       R0, RQ18, .L0080193F

.L00801940:

.L00C02AC9:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_drawWidgets:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD8
// st_stuff.c:1096   st_armson = st_statusbaron && !deathmatch;
  MOV.L        TU7A00CB73/st_statusbaron, RD23
  BREQ.L       R0, RD23, .L00802C13
  MOV.L        deathmatch, RD23
  BRNE.L       R0, RD23, .L00802C13
  ADD          R0, 1, RQ23
  MOV.Q        RQ23, (R2, 80)
  BSR          .L00802C14, R0

.L00802C13:
  MOV.Q        RQ0, (R2, 80)

.L00802C14:
  MOV.L        (R2, 80), RQ23
  MOV.L        RQ23, TU7A00CB73/st_armson
// st_stuff.c:1099   st_fragson = deathmatch && st_statusbaron; 
  MOV.L        deathmatch, RD13
  BREQ.L       R0, RD13, .L00802C17
  MOV.L        TU7A00CB73/st_statusbaron, RD23
  BREQ.L       R0, RD23, .L00802C17
  ADD          R0, 1, RQ23
  MOV.Q        RQ23, (R2, 80)
  BSR          .L00802C18, R0

.L00802C17:
  MOV.Q        RQ0, (R2, 80)

.L00802C18:
  MOV.L        (R2, 80), RQ23
  MOV.L        RQ23, TU7A00CB73/st_fragson
// st_stuff.c:1101   STlib_updateNum(&w_ready, refresh);
  MOV          TU7A00CB73/w_ready, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateNum, R1
// st_stuff.c:1103   for (i=0;i<4;i++)
  ADD          R0, 0, RD18

.L00802C1B:
// st_stuff.c:1104   {
  MOV          TU7A00CB73/w_ammo, RQ23
  ADD          R0, 48, R5
  MUL.L        RD18, R5, RQ9
  ADD          RQ23, RQ9, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateNum, R1
// st_stuff.c:1106   STlib_updateNum(&w_maxammo[i], refresh);
  MOV          TU7A00CB73/w_maxammo, RQ23
  ADD          R0, 48, R5
  MUL.L        RD18, R5, RQ9
  ADD          RQ23, RQ9, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateNum, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802C1B

.L00802C1D:
// st_stuff.c:1109   STlib_updatePercent(&w_health, refresh);
  MOV          TU7A00CB73/w_health, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updatePercent, R1
// st_stuff.c:1110   STlib_updatePercent(&w_armor, refresh);
  MOV          TU7A00CB73/w_armor, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updatePercent, R1
// st_stuff.c:1112   STlib_updateBinIcon(&w_armsbg, refresh);
  MOV          TU7A00CB73/w_armsbg, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateBinIcon, R1
// st_stuff.c:1114   for (i=0;i<6;i++)
  ADD          R0, 0, RD18

.L00802C1E:
// st_stuff.c:1115   STlib_updateMultIcon(&w_arms[i], refresh);
  MOV          TU7A00CB73/w_arms, RQ23
  ADD          R0, 48, R5
  MUL.L        RD18, R5, RQ9
  ADD          RQ23, RQ9, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateMultIcon, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       6, RD18, .L00802C1E

.L00802C20:
// st_stuff.c:1117   STlib_updateMultIcon(&w_faces, refresh);
  MOV          TU7A00CB73/w_faces, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateMultIcon, R1
// st_stuff.c:1119   for (i=0;i<3;i++)
  ADD          R0, 0, RD18

.L00802C21:
// st_stuff.c:1120   STlib_updateMultIcon(&w_keyboxes[i], refresh);
  MOV          TU7A00CB73/w_keyboxes, RQ23
  ADD          R0, 48, R5
  MUL.L        RD18, R5, RQ9
  ADD          RQ23, RQ9, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateMultIcon, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       3, RD18, .L00802C21

.L00802C23:
// st_stuff.c:1122   STlib_updateNum(&w_frags, refresh);
  MOV          TU7A00CB73/w_frags, RQ9
  ADD          RQ9, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          STlib_updateNum, R1

.L00C02AD0:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_ftell:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 120)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 112)
// tk_vf_sysc.c:257   
// tk_vf_sysc.c:263   
  ADD          RQ0, 0, RQ22
  MOV.Q        RQ22, (R2, 104)
// tk_vf_sysc.c:264   
  MOV.Q        (R2, 120), RQ21
  MOV.L        (RQ21, 64), RQ18
  ADD          R2, 128, RQ22
  ADD          RQ22, 0, RQ20
  MOV.L        RQ18, (RQ20, 0)
// tk_vf_sysc.c:265   
  ADD          RQ22, 8, RQ20
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (RQ20, 0)
// tk_vf_sysc.c:266   
  ADD          RQ22, 16, RQ20
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ20, 0)
// tk_vf_sysc.c:267   
  ADD          R2, 104, RQ8
  ADD          RQ0, 0, RQ10
  LDIZ         4138, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ22, 0, RQ13
  BSR          tk_syscall, R1
  ADD          RQ10, 0, RD23
// tk_vf_sysc.c:268   
  MOV.Q        (R2, 104), RQ10

.L00C02AD6:
  ADD          R2, 424, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

V_DrawPatchFlipped:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  MOV.L        RD10, (R2, 156)
  MOV.L        RD11, (R2, 152)
  MOV.L        RD12, (R2, 148)
  MOV.Q        RQ13, (R2, 136)
// v_video.c:428   if(!patch)
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L00C02ADC
// v_video.c:432   y -= (patch->topoffset); 
  MOV.Q        (R2, 136), RQ27
  MOV.W        (RQ27, 6), RQ18
  MOV.L        (R2, 152), RD13
  SUBS.L       RD13, RQ18, RD13
  MOV.L        RD13, (R2, 152)
// v_video.c:434   x -= (patch->leftoffset); 
  MOV.W        (RQ27, 4), RQ18
  MOV.L        (R2, 156), RD12
  SUBS.L       RD12, RQ18, RD12
// v_video.c:436   if (x<0
  MOV.L        RD12, (R2, 156)
  BRLT.L       R0, RD12, .L00802B15
  MOV.Q        (R2, 136), RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.L        (R2, 156), RD13
  ADDS.L       RD13, RQ18, RQ9
  BRGT.L       320, RQ9, .L00802B15

.L00802B18:
  MOV.L        (R2, 152), RD27
  BRLT.L       R0, RD27, .L00802B15

.L00802B17:
  MOV.Q        (R2, 136), RQ27
  MOV.W        (RQ27, 2), RQ18
  MOV.L        (R2, 152), RD13
  ADDS.L       RD13, RQ18, RQ9
  BRGT.L       200, RQ9, .L00802B15

.L00802B16:
  MOV.L        (R2, 148), RD27
  ADDU.L       RD27, R0, RQ18
  BRGTU.L      4, RQ18, .L00802B15
  BSR          .L00802B14, R0

.L00802B15:
// v_video.c:443   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ21
  MOV.Q        (RQ21, 0), RQ10
  MOV          .L00C02ADD, RQ11
  MOV.L        (R2, 156), RD12
  MOV.L        (R2, 152), RD13
  BSR          fprintf, R1
// v_video.c:445   I_Error ("Bad V_DrawPatch in V_DrawPatchFlipped");
  MOV          .L00C02ADE, RQ10
  BSR          I_Error, R1

.L00802B14:
// v_video.c:449   if (!scrn)
  MOV.L        (R2, 148), RD27
  BRNE.L       R0, RD27, .L00802B1A
// v_video.c:451   V_MarkRect (x, y, (patch->width), (patch->height)); 
  MOV.Q        (R2, 136), RQ27
  MOV.W        (RQ27, 2), RQ18
  MOV.W        (RQ27, 0), RQ9
  MOV.L        (R2, 156), RD10
  MOV.L        (R2, 152), RD11
  SHAD.Q       RQ9, 48, RD12
  SHAR.Q       RD12, 48, RD12
  ADD          RQ18, 0, RD13
  BSR          V_MarkRect, R1

.L00802B1A:
// v_video.c:453   tcol = colormaps;
  MOV.Q        colormaps, RQ27
  ADD          RQ27, 0, RQ13
  MOV.Q        RQ13, (R2, 120)
// v_video.c:455   col = 0; 
  ADD          R0, 0, RD27
// v_video.c:456   desttop = screens[scrn]+y*SCREENWIDTH+x; 
  MOV          screens, RQ12
  MOV.L        (R2, 148), RD11
  MOV.Q        (RQ12, RD11), RQ21
  MOV.L        (R2, 152), RD12
  ADD          R0, 320, R5
  MULS.L       RD12, R5, RQ18
  LEA.W        RQ21, RQ18, RQ10
  MOV.L        (R2, 156), RD17
  LEA.W        RQ10, RD17, RQ16
  MOV.Q        RQ16, (R2, 112)
// v_video.c:459   w = (patch->width); 
  MOV.Q        (R2, 136), RQ15
  MOV.W        (RQ15, 0), RD14
// v_video.c:461   for ( ; col<w ; x++, col++, desttop++) 
  MOV.L        RD27, (R2, 132)
  MOV.L        RD14, (R2, 108)
  BRGE.L       RD14, RD27, .L00802B1D

.L00802B1B:
// v_video.c:464   column = (column_t *)((byte *)patch + (patch->columnofs[w-1-col])); 
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ21
  MOV.L        (R2, 108), RD13
  ADDS.L       RD13, -1, RQ18
  MOV.L        (R2, 132), RD12
  SUBS.L       RQ18, RD12, RQ9
  MOV.L        (RQ21, RQ9), RQ18
  ADD          RQ27, RQ18, RQ21
  ADD          RQ21, 0, RQ8
// v_video.c:467   while (column->topdelta != 0xff ) 
  BSR          .L00802B20, R0

.L00802B1E:
// v_video.c:468   { 
  ADD          RQ8, 3, RQ20
// v_video.c:470   dest = desttop + column->topdelta*SCREENWIDTH; 
  MOVU.B       (RQ8, 0), RQ18
  ADD          R0, 320, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        (R2, 112), RQ27
  LEA.W        RQ27, RQ9, RQ23
// v_video.c:471   count = column->length; 
  MOVU.B       (RQ8, 1), RD22
// v_video.c:474   while (count--) 
  BSR          .L00802B23, R0

.L00802B21:
// v_video.c:475   { 
  MOVU.B       (RQ20, 0), RQ18
  ADD          RQ20, 1, RQ20
  MOVU.W       RQ18, (RQ23, 0)
// v_video.c:477   dest += SCREENWIDTH; 
  ADD          RQ23, 640, RQ23

.L00802B23:
  ADD          RD22, 0, RQ9
  ADDS.L       RD22, -1, RD22
  BRNE.L       R0, RQ9, .L00802B21

.L00802B22:
// v_video.c:483   column = (column_t *)(  (byte *)column + column->length 
  MOVU.B       (RQ8, 1), RQ18
  ADD          RQ8, RQ18, RQ21
  ADD          RQ21, 4, RQ27
  ADD          RQ27, 0, RQ8

.L00802B20:
  MOVU.B       (RQ8, 0), RQ18
  BRNE.Q       255, RQ18, .L00802B1E

.L00802B1F:
  MOV.L        (R2, 156), RD27
  ADD          RD27, 0, RQ9
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 156)
  MOV.L        (R2, 132), RD13
  ADD          RD13, 0, RQ18
  ADDS.L       RD13, 1, RD13
  MOV.Q        (R2, 112), RQ12
  ADD          RQ12, 0, RQ21
  ADD          RQ12, 2, RQ12
  MOV.Q        RQ12, (R2, 112)
  MOV.L        RD13, (R2, 132)
  MOV.L        (R2, 108), RD11
  BRLT.L       RD11, RD13, .L00802B1B

.L00802B1D:

.L00C02ADC:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_HitSlideLine:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -304, R2
  ADD          RQ10, 0, RQ22
// p_map.c:631   if (ld->slopetype == ST_HORIZONTAL)
  MOV.L        (RQ22, 56), RQ18
  BRNE.L       R0, RQ18, .L00801D62
// p_map.c:632   {
  MOV.L        RD0, tmymove
// p_map.c:634   return;
  BSR          .L00C02AE4, R0

.L00801D62:
// p_map.c:637   if (ld->slopetype == ST_VERTICAL)
  MOV.L        (RQ22, 56), RQ18
  BRNE.Q       1, RQ18, .L00801D63
// p_map.c:638   {
  MOV.L        RD0, tmxmove
// p_map.c:640   return;
  BSR          .L00C02AE4, R0

.L00801D63:
// p_map.c:643   side = P_PointOnLineSide (slidemo->x, slidemo->y, ld);
  MOV.Q        slidemo, RQ27
  MOV.L        (RQ27, 28), RQ18
  MOV.L        (RQ27, 24), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ22, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD20
// p_map.c:645   lineangle = R_PointToAngle2 (0,0, ld->dx, ld->dy);
  MOV.L        (RQ22, 20), RQ18
  MOV.L        (RQ22, 16), RQ23
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          RQ23, 0, RD12
  ADD          RQ18, 0, RD13
  BSR          R_PointToAngle2, R1
  ADDU.L       RQ10, R0, RD9
// p_map.c:647   if (side == 1)
  BRNE.Q       1, RD20, .L00801D64
// p_map.c:648   lineangle += ANG180;
  ADD          R0, 0x0000000080000000, RD27
  ADDU.L       RD9, RD27, RD9

.L00801D64:
// p_map.c:650   moveangle = R_PointToAngle2 (0,0, tmxmove, tmymove);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  MOV.L        tmxmove, RD12
  MOV.L        tmymove, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD27
// p_map.c:651   deltaangle = moveangle-lineangle;
  SUBU.L       RD27, RD9, RD8
  MOV.L        RD27, (R2, 84)
// p_map.c:653   if (deltaangle > ANG180)
  ADD          R0, 0x0000000080000000, RD26
  BRLEU.L      RD26, RD8, .L00801D65
// p_map.c:654   deltaangle += ANG180;
  ADD          R0, 0x0000000080000000, RD27
  ADDU.L       RD8, RD27, RD8

.L00801D65:
// p_map.c:657   lineangle >>= ANGLETOFINESHIFT;
  SHLR         RD9, 19, RD9
// p_map.c:658   deltaangle >>= ANGLETOFINESHIFT;
  SHLR         RD8, 19, RD8
// p_map.c:660   movelen = P_AproxDistance (tmxmove, tmymove);
  MOV.L        tmxmove, RD10
  MOV.L        tmymove, RD11
  BSR          P_AproxDistance, R1
  MOV.L        RD10, (R2, 80)
// p_map.c:661   newlen = FixedMul (movelen, finecosine[deltaangle]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD8), RQ18
  MOV.L        (R2, 80), RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD21
// p_map.c:663   tmxmove = FixedMul (newlen, finecosine[lineangle]);	
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD9), RQ23
  ADD          RD21, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, tmxmove
// p_map.c:664   tmymove = FixedMul (newlen, finesine[lineangle]);	
  MOV          finesine, RQ27
  MOV.L        (RQ27, RD9), RQ18
  ADD          RD21, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, tmymove

.L00C02AE4:
  ADD          R2, 304, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

M_ReadThis2:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADDS.L       RD10, 0, RD9
// m_menu.c:1080   {
  ADD          RD0, 0, RD9
// m_menu.c:1082   M_SetupNextMenu(&ReadDef2);
  MOV          ReadDef2, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C02AEA:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ClearCZBuf:
// r_draw.c:136   for(i=0; i<512; i++)
  ADDS.L       RD0, 0, RD13

.L008025A8:
// r_draw.c:137   {
  MOV          dc_czbuf_sc, RQ12
  ADD          R0, 0x7FFFFFFF, RD11
  MOV.L        RD11, (RQ12, RD13)
  ADDS.L       RD13, 1, RD13
  BRLT.L       512, RD13, .L008025A8

.L008025AA:
// r_draw.c:141   if(r_usezbuff)
  MOVU.B       r_usezbuff, RD12
  BREQ.L       R0, RD12, .L008025AB
// r_draw.c:142   {
  ADD          R0, 0, RD13

.L008025AC:
// r_draw.c:144   screens_zbuf[i]=0xFFFF;
  MOV.Q        screens_zbuf, RQ12
  LDIZ         0x0000FFFF, RD11
  MOVU.W       RD11, (RQ12, RD13)
  ADDS.L       RD13, 1, RD13
  LDIZ         0x0000FA00, RD10
  BRLT.L       RD10, RD13, .L008025AC

.L008025AE:

.L008025AB:
// r_draw.c:147   if(!r_nseenpolyobj)
  MOV.L        r_nseenpolyobj, RD12
  BRNE.L       R0, RD12, .L008025AF
// r_draw.c:148   {
  AND          RD0, 255, RD12
  MOV.B        RD12, r_usezbuff

.L008025AF:
// r_draw.c:150   }
  ADDS.L       RD0, 0, RD12
  MOV.L        RD12, r_nseenpolyobj

.L00C02AEB:
  JSR          R1, 0, R0

P_AcsRun_SetLineMonsterBlocking:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C02AF2, RQ18
// p_acspec.c:1095   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C02AF1:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

M_Init:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -264, R2
// m_menu.c:1919   {
  MOV          MainDef, RQ18
  ADD          RQ18, 0, RQ23
// m_menu.c:1921   menuactive = 0;
  ADD          RD0, 0, RD22
// m_menu.c:1922   itemOn = currentMenu->lastOn;
  MOV.W        (RQ23, 36), RD21
  MOV.Q        RQ23, currentMenu
  MOV.W        RD21, itemOn
// m_menu.c:1923   whichSkull = 0;
  MOV.W        RD0, whichSkull
// m_menu.c:1924   skullAnimCounter = 10;
  ADD          R0, 10, RD23
  MOV.W        RD23, skullAnimCounter
// m_menu.c:1925   screenSize = screenblocks - 3;
  MOV.L        screenblocks, RD23
  ADDS.L       RD23, -3, RD21
  MOV.L        RD21, screenSize
// m_menu.c:1926   messageToPrint = 0;
  MOV.L        RD0, messageToPrint
// m_menu.c:1927   messageString = NULL;
  MOV.Q        RQ0, messageString
// m_menu.c:1928   messageLastMenuActive = menuactive;
  MOV.L        RD22, messageLastMenuActive
  MOV.L        RD22, menuactive
// m_menu.c:1929   quickSaveSlot = -1;
  ADD          R0, -1, RD23
  MOV.L        RD23, quickSaveSlot
// m_menu.c:1934   switch ( gamemode )
  MOV.L        gamemode, RD23
  BREQ.Q       2, RD23, .L0080170C
  MOV.L        gamemode, RD23
  BREQ.L       R0, RD23, .L0080170D
  MOV.L        gamemode, RD23
  BREQ.Q       1, RD23, .L0080170E
  MOV.L        gamemode, RD23
  BREQ.Q       3, RD23, .L0080170F
  BSR          .L00801710, R0

.L0080170C:
// m_menu.c:1940   MainMenu[readthis] = MainMenu[quitdoom];
  MOV          MainMenu, RQ23
  ADD          RQ23, 160, RQ22
  ADD          RQ23, 128, RQ10
  MOV.Q        (RQ22, 0), RQ11
  MOV.Q        (RQ22, 16), RQ13
  MOV.Q        (RQ22, 8), RQ12
  MOV.Q        (RQ22, 24), RQ14
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ13, (RQ10, 16)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.Q        RQ14, (RQ10, 24)
// m_menu.c:1941   MainDef.numitems--;
  MOV          MainDef, RQ23
  MOV.W        (RQ23, 0), RQ9
  ADDS.L       RQ9, -1, RQ8
  MOV.W        RQ8, (RQ23, 0)
// m_menu.c:1942   MainDef.y += 8;
  MOV.W        (RQ23, 34), RQ9
  ADDS.L       RQ9, 8, RQ8
  MOV.W        RQ8, (RQ23, 34)
// m_menu.c:1943   NewDef.prevMenu = &MainDef;
  ADD          RQ23, 0, RQ18
  MOV          NewDef, RQ23
  MOV.Q        RQ18, (RQ23, 8)
// m_menu.c:1944   ReadDef1.routine = M_DrawReadThis1;
  MOV          M_DrawReadThis1, RQ18
  MOV          ReadDef1, RQ23
  MOV.Q        RQ18, (RQ23, 24)
// m_menu.c:1945   ReadDef1.x = 330;
  ADD          R0, 330, RD21
  MOV.W        RD21, (RQ23, 32)
// m_menu.c:1946   ReadDef1.y = 165;
  ADD          R0, 165, RD20
  MOV.W        RD20, (RQ23, 34)
// m_menu.c:1947   ReadMenu1[0].routine = M_FinishReadThis;
  MOV          ReadMenu1, RQ23
  ADD          RQ23, 0, RQ22
  MOV          M_FinishReadThis, RQ18
  MOV.Q        RQ18, (RQ22, 16)
// m_menu.c:1948   break;
  BSR          .L0080170B, R0

.L0080170D:

.L0080170E:
// m_menu.c:1954   EpiDef.numitems--;
  MOV          EpiDef, RQ23
  MOV.W        (RQ23, 0), RQ9
  ADDS.L       RQ9, -1, RQ8
  MOV.W        RQ8, (RQ23, 0)
// m_menu.c:1955   break;
  BSR          .L0080170B, R0

.L0080170F:

.L00801710:
// m_menu.c:1958   default:

.L0080170B:

.L00C02AF8:
  ADD          R2, 264, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

P_Init:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// p_setup.c:1359   P_InitSwitchList ();
  BSR          P_InitSwitchList, R1
// p_setup.c:1361   P_InitPicAnims ();
  BSR          P_InitPicAnims, R1
// p_setup.c:1363   R_InitSprites ((char **)sprnames);
  MOV          sprnames, RQ18
  ADD          RQ18, 0, RQ10
  BSR          R_InitSprites, R1

.L00C02AFE:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

A_BrainExplode:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ21
// p_enemy.c:1915   x = mo->x + (P_Random () - P_Random ())*2048;
  MOV.L        (RQ21, 24), RQ22
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       RQ18, RQ9, RQ8
  SHAD.L       RQ8, 11, RQ18
  ADDS.L       RQ22, RQ18, RD20
// p_enemy.c:1916   y = mo->y;
  MOV.L        (RQ21, 28), RD27
  MOV.L        RD27, (R2, 100)
// p_enemy.c:1917   z = 128 + P_Random()*2*FRACUNIT;
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  SHAD.L       RQ9, 1, RQ8
  SHAD.L       RQ8, 16, RQ22
  ADDS.L       RQ22, 128, RD26
  MOV.L        RD26, (R2, 96)
// p_enemy.c:1918   th = P_SpawnMobj (x,y,z, MT_ROCKET);
  ADD          RD20, 0, RD10
  ADD          RD27, 0, RD11
  ADD          RD26, 0, RD12
  ADD          R0, 33, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ23
// p_enemy.c:1919   th->momz = P_Random()*512;
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ18
  SHAD.L       RQ18, 9, RQ9
  MOV.L        RQ9, (RQ23, 120)
// p_enemy.c:1921   P_SetMobjState (th, S_BRAINEXPLODE1);
  ADD          RQ23, 0, RQ10
  ADD          R0, 799, RD11
  BSR          P_SetMobjState, R1
// p_enemy.c:1923   th->tics -= P_Random()&7;
  MOV.L        (RQ23, 144), RQ8
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ22
  AND          RQ22, 7, RQ18
  SUBS.L       RQ8, RQ18, RQ9
  MOV.L        RQ9, (RQ23, 144)
// p_enemy.c:1924   if (th->tics < 1)
  MOV.L        (RQ23, 144), RQ8
  BRGE.L       1, RQ8, .L00801BB8
// p_enemy.c:1925   th->tics = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ23, 144)

.L00801BB8:

.L00C02B04:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

__multicall:
// pdpc201/btshx_supa.c:807   

.L00C02B05:
  JSR          R1, 0, R0

STlib_init:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV          .L00C02B0C, RQ9
  ADD          R0, 1, RD8
// st_lib.c:65   sttminus = (patch_t *) W_CachePatchName("STTMINUS", PU_STATIC);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ18, sttminus

.L00C02B0B:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

WI_drawAnimatedBack:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// wi_stuff.c:611   if (commercial)
  BSR          .L00C02B12, R0
// wi_stuff.c:614   if (wbs->epsd > 2)
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 0), RQ18
  ADD          R0, 2, RD21
  BRGT.L       RD21, RQ18, .L00C02B12
// wi_stuff.c:617   for (i=0 ; i<NUMANIMS[wbs->epsd] ; i++)
  ADD          R0, 0, RD8
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 0), RQ18
  MOV          TU7A00CB85/NUMANIMS, RQ21
  MOV.L        (RQ21, RQ18), RQ23
  BRGE.L       RQ23, RD8, .L008029C3

.L008029C1:
// wi_stuff.c:618   {
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 0), RQ18
  MOV          TU7A00CB85/wi_anims, RQ21
  MOV.Q        (RQ21, RQ18), RQ22
  ADD          R0, 72, R5
  MUL.L        RD8, R5, RQ9
  ADD          RQ22, RQ9, RQ9
// wi_stuff.c:621   if (a->ctr >= 0)
  MOV.L        (RQ9, 64), RQ18
  BRLT.L       R0, RQ18, .L008029C4
// wi_stuff.c:622   V_DrawPatch(a->loc.x, a->loc.y, FB, a->p[a->ctr]);
  ADD          RQ9, 32, RQ22
  MOV.L        (RQ9, 64), RQ18
  MOV.Q        (RQ22, RQ18), RQ21
  MOV.Q        RQ21, (R2, 80)
  ADD          RQ9, 12, RQ20
  MOV.L        (RQ20, 4), RQ18
  MOV.L        (RQ20, 0), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RQ13
  BSR          V_DrawPatch, R1

.L008029C4:
  ADDS.L       RD8, 1, RD8
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 0), RQ18
  MOV          TU7A00CB85/NUMANIMS, RQ21
  MOV.L        (RQ21, RQ18), RQ23
  BRLT.L       RQ23, RD8, .L008029C1

.L008029C3:

.L00C02B12:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

TKSH_NormalizePath:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -1480, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.Q        RQ11, (R2, 160)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 152)
  ADD          R2, 704, RQ6
  MOV.Q        RQ6, (R2, 144)
// tk_core/tk_env.c:320   
// tk_core/tk_env.c:322   
// tk_core/tk_env.c:323   
// tk_core/tk_env.c:327   
  MOV.Q        (R2, 160), RQ9
// tk_core/tk_env.c:329   
  BSR          .L00800CFF, R0

.L00800D00:
// tk_core/tk_env.c:330   
  ADD          RQ9, 1, RQ9

.L00800CFF:
  MOV.B        (RQ9, 0), RQ18
  BREQ.Q       47, RQ18, .L00800D00

.L00800D01:
// tk_core/tk_env.c:332   
  ADD          R0, 0, RD22
// tk_core/tk_env.c:333   
  ADD          R2, 176, RQ8
// tk_core/tk_env.c:334   
  ADD          R2, 704, RQ13
  MOV.Q        RQ8, (RQ13, RD22)
// tk_core/tk_env.c:335   
  MOV.Q        RQ8, (R2, 136)
// tk_core/tk_env.c:336   

.L00800D02:
// tk_core/tk_env.c:337   
  MOV.B        (RQ9, 0), RQ18
  BREQ.Q       47, RQ18, .L00800D03
  MOV.B        (RQ9, 0), RQ18
  BREQ.L       R0, RQ18, .L00800D03
  BSR          .L00800D04, R0

.L00800D03:
// tk_core/tk_env.c:339   
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RD0, (RQ23, 0)
// tk_core/tk_env.c:341   
  BSR          .L00800D05, R0

.L00800D06:
// tk_core/tk_env.c:342   
  ADD          RQ9, 1, RQ9

.L00800D05:
  MOV.B        (RQ9, 0), RQ18
  BREQ.Q       47, RQ18, .L00800D06

.L00800D07:
  MOV.Q        (R2, 136), RQ10
  MOV          .L00C00FE6, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800D08
// tk_core/tk_env.c:345   
  ADD          R2, 704, RQ13
  MOV.Q        (RQ13, RD22), RQ8
  BSR          .L00800D09, R0

.L00800D08:
  MOV.Q        (R2, 136), RQ10
  MOV          .L00C02B19, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800D0A
  BRLE.L       R0, RD22, .L00800D0B
// tk_core/tk_env.c:349   
  ADDS.L       RD22, -1, RD22

.L00800D0B:
// tk_core/tk_env.c:350   
  ADD          R2, 704, RQ13
  MOV.Q        (RQ13, RD22), RQ8
  BSR          .L00800D0C, R0

.L00800D0A:
// tk_core/tk_env.c:352   
  ADDS.L       RD22, 1, RD22

.L00800D0C:

.L00800D09:
// tk_core/tk_env.c:356   
  ADD          R2, 704, RQ13
  MOV.Q        RQ8, (RQ13, RD22)
// tk_core/tk_env.c:357   
  MOV.Q        RQ8, (R2, 136)
  MOV.B        (RQ9, 0), RQ18
  BREQ.L       R0, RQ18, .L00800D0D
// tk_core/tk_env.c:360   
  BSR          .L00800D02, R0

.L00800D04:
// tk_core/tk_env.c:363   
  MOV.B        (RQ9, 0), RQ18
  ADD          RQ9, 1, RQ9
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RQ18, (RQ23, 0)
  BSR          .L00800D02, R0

.L00800D0D:
// tk_core/tk_env.c:366   
  MOV.Q        (R2, 168), RQ8
// tk_core/tk_env.c:367   
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  ADD          R0, 47, RD13
  MOV.B        RD13, (RQ23, 0)
// tk_core/tk_env.c:368   
  ADD          R0, 0, RD21
  BRGE.L       RD22, RD21, .L00800D0E

.L00800D0F:
// tk_core/tk_env.c:369   
  ADD          R2, 704, RQ13
  MOV.Q        (RQ13, RD21), RQ9
// tk_core/tk_env.c:371   
  BSR          .L00800D10, R0

.L00800D11:
// tk_core/tk_env.c:372   
  MOV.B        (RQ9, 0), RQ18
  ADD          RQ9, 1, RQ9
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RQ18, (RQ23, 0)

.L00800D10:
  MOV.B        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L00800D11

.L00800D12:
// tk_core/tk_env.c:373   
  ADDS.L       RD21, 1, RQ18
  BRGE.L       RD22, RQ18, .L00800D13
// tk_core/tk_env.c:374   
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  ADD          R0, 47, RD13
  MOV.B        RD13, (RQ23, 0)

.L00800D13:
  ADDS.L       RD21, 1, RD21
  BRLT.L       RD22, RD21, .L00800D0F

.L00800D0E:
// tk_core/tk_env.c:375   
  ADD          RQ8, 0, RQ23
  ADD          RQ8, 1, RQ8
  MOV.B        RD0, (RQ23, 0)

.L00C02B18:
  ADD          R2, 1480, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

I_UnRegisterSong:
// i_bgb_mus_btsh.c:1117   {
  ADD          R0, 1, RD13
  SHAD.L       RD13, RD10, RQ12
  XOR          RQ12, -1, RQ11
  MOV.L        i_mus_song_mask, RD17
  AND          RD17, RQ11, RD17
  MOV.L        RD17, i_mus_song_mask

.L00C02B1A:
  JSR          R1, 0, R0
  .balign 4

R_FlushPolyObj:
// r_polyobj.c:62   for(i=0; i<256; i++)
  ADDS.L       RD0, 0, RD13

.L008026EB:
// r_polyobj.c:63   {
  MOV          r_polyobj_lut, RQ12
  MOV.Q        (RQ12, RD13), RQ11
// r_polyobj.c:65   if(!tmp)
  BREQ.Q       R0, RQ11, .L008026EC
// r_polyobj.c:67   tmp->n_segs=0;
  ADD          R0, 512, R5
  MOV.L        RD0, (RQ11, R5)

.L008026EC:
  ADDS.L       RD13, 1, RD13
  BRLT.L       256, RD13, .L008026EB

.L008026ED:
// r_polyobj.c:70   r_usezbuff = 0;
  AND          RD0, 255, RD12
// r_polyobj.c:71   r_activepolyobj = 0;
  AND          RD0, 255, RD10
  MOV.B        RD12, r_usezbuff
  MOV.B        RD10, r_activepolyobj

.L00C02B1B:
  JSR          R1, 0, R0
  .balign 4

P_PathTraverse:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  ADD          RD10, 0, RD21
  ADD          RD11, 0, RD22
  MOV.L        RD12, (R2, 164)
  MOV.L        RD13, (R2, 160)
  MOV.L        RD14, (R2, 156)
  MOV.Q        RQ15, (R2, 144)
// p_maputl.c:823   earlyout = flags & PT_EARLYOUT;
  MOV.L        (R2, 156), RD27
  AND          RD27, 4, RD26
  MOV.L        RD26, earlyout
// p_maputl.c:825   validcount++;
  MOV.L        validcount, RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, validcount
// p_maputl.c:826   intercept_p = intercepts;
  MOV          intercepts, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, intercept_p
// p_maputl.c:828   if ( ((x1-bmaporgx)&(MAPBLOCKSIZE-1)) == 0)
  MOV.L        bmaporgx, RD26
  SUBS.L       RD21, RD26, RQ18
  AND          RQ18, 0x007FFFFF, RQ9
  BRNE.L       R0, RQ9, .L00801E09
// p_maputl.c:829   x1 += FRACUNIT;	// don't side exactly on a line
  ADDS.L       RD21, 0x00010000, RD21

.L00801E09:
// p_maputl.c:831   if ( ((y1-bmaporgy)&(MAPBLOCKSIZE-1)) == 0)
  MOV.L        bmaporgy, RD27
  SUBS.L       RD22, RD27, RQ18
  AND          RQ18, 0x007FFFFF, RQ9
  BRNE.L       R0, RQ9, .L00801E0A
// p_maputl.c:832   y1 += FRACUNIT;	// don't side exactly on a line
  ADDS.L       RD22, 0x00010000, RD22

.L00801E0A:
// p_maputl.c:834   trace.x = x1;
  MOV          trace, RQ27
  MOV.L        RD21, (RQ27, 0)
// p_maputl.c:835   trace.y = y1;
  MOV.L        RD22, (RQ27, 4)
// p_maputl.c:836   trace.dx = x2 - x1;
  MOV.L        (R2, 164), RD26
  SUBS.L       RD26, RD21, RQ18
  MOV.L        RQ18, (RQ27, 8)
// p_maputl.c:837   trace.dy = y2 - y1;
  MOV.L        (R2, 160), RD25
  SUBS.L       RD25, RD22, RQ9
  MOV.L        RQ9, (RQ27, 12)
// p_maputl.c:839   x1 -= bmaporgx;
  MOV.L        bmaporgx, RD27
  SUBS.L       RD21, RD27, RD21
// p_maputl.c:840   y1 -= bmaporgy;
  MOV.L        bmaporgy, RD24
  SUBS.L       RD22, RD24, RD22
// p_maputl.c:841   xt1 = x1>>MAPBLOCKSHIFT;
  SHAR         RD21, 23, RD13
// p_maputl.c:842   yt1 = y1>>MAPBLOCKSHIFT;
  SHAR         RD22, 23, RD12
  MOV.L        RD12, (R2, 136)
// p_maputl.c:844   x2 -= bmaporgx;
  SUBS.L       RD26, RD27, RD26
// p_maputl.c:845   y2 -= bmaporgy;
  SUBS.L       RD25, RD24, RD25
// p_maputl.c:846   xt2 = x2>>MAPBLOCKSHIFT;
  SHAR         RD26, 23, RD27
  MOV.L        RD26, (R2, 164)
// p_maputl.c:847   yt2 = y2>>MAPBLOCKSHIFT;
  SHAR         RD25, 23, RD24
  MOV.L        RD24, (R2, 128)
  MOV.L        RD25, (R2, 160)
// p_maputl.c:849   if (xt2 > xt1)
  MOV.L        RD27, (R2, 132)
  MOV.L        RD13, (R2, 140)
  BRLE.L       RD13, RD27, .L00801E0B
// p_maputl.c:850   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 104)
// p_maputl.c:852   partial = FRACUNIT - ((x1>>MAPBTOFRAC)&(FRACUNIT-1));
  SHLR.Q       RD21, 7, RQ18
  AND          RQ18, 0x0000FFFF, RQ18
  LUI          16, R5
  SUBS.L       R5, RQ18, RD26
  MOV.L        RD26, (R2, 116)
// p_maputl.c:853   ystep = FixedDiv (y2-y1,abs(x2-x1));
  MOV.L        (R2, 164), RD25
  SUBS.L       RD25, RD21, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        (R2, 160), RD24
  SUBS.L       RD24, RD22, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedDiv, R1
  MOV.L        RD10, (R2, 120)
  BSR          .L00801E0C, R0

.L00801E0B:
  MOV.L        (R2, 132), RD27
  MOV.L        (R2, 140), RD26
  BRGE.L       RD26, RD27, .L00801E0D
// p_maputl.c:856   {
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 104)
// p_maputl.c:858   partial = (x1>>MAPBTOFRAC)&(FRACUNIT-1);
  SHAR         RD21, 7, RQ18
  AND          RQ18, 0x0000FFFF, RD26
  MOV.L        RD26, (R2, 116)
// p_maputl.c:859   ystep = FixedDiv (y2-y1,abs(x2-x1));
  MOV.L        (R2, 164), RD25
  SUBS.L       RD25, RD21, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        (R2, 160), RD24
  SUBS.L       RD24, RD22, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedDiv, R1
  MOV.L        RD10, (R2, 120)
  BSR          .L00801E0E, R0

.L00801E0D:
// p_maputl.c:862   {
  MOV.L        RD0, (R2, 104)
// p_maputl.c:864   partial = FRACUNIT;
  LUI          16, RD27
  MOV.L        RD27, (R2, 116)
// p_maputl.c:865   ystep = 256*FRACUNIT;
  LUI          4096, RD26
  MOV.L        RD26, (R2, 120)

.L00801E0E:

.L00801E0C:
// p_maputl.c:868   yintercept = (y1>>MAPBTOFRAC) + FixedMul (partial, ystep);
  SHAR         RD22, 7, RQ18
  MOV.L        (R2, 116), RD10
  MOV.L        (R2, 120), RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ18, RQ9, RD27
  MOV.L        RD27, (R2, 108)
// p_maputl.c:871   if (yt2 > yt1)
  MOV.L        (R2, 128), RD26
  MOV.L        (R2, 136), RD25
  BRLE.L       RD25, RD26, .L00801E0F
// p_maputl.c:872   {
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 100)
// p_maputl.c:874   partial = FRACUNIT - ((y1>>MAPBTOFRAC)&(FRACUNIT-1));
  SHLR.Q       RD22, 7, RQ18
  AND          RQ18, 0x0000FFFF, RQ18
  LUI          16, R5
  SUBS.L       R5, RQ18, RD26
  MOV.L        RD26, (R2, 116)
// p_maputl.c:875   xstep = FixedDiv (x2-x1,abs(y2-y1));
  MOV.L        (R2, 160), RD25
  SUBS.L       RD25, RD22, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        (R2, 164), RD24
  SUBS.L       RD24, RD21, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedDiv, R1
  MOV.L        RD10, (R2, 124)
  BSR          .L00801E10, R0

.L00801E0F:
  MOV.L        (R2, 128), RD27
  MOV.L        (R2, 136), RD26
  BRGE.L       RD26, RD27, .L00801E11
// p_maputl.c:878   {
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 100)
// p_maputl.c:880   partial = (y1>>MAPBTOFRAC)&(FRACUNIT-1);
  SHAR         RD22, 7, RQ18
  AND          RQ18, 0x0000FFFF, RD26
  MOV.L        RD26, (R2, 116)
// p_maputl.c:881   xstep = FixedDiv (x2-x1,abs(y2-y1));
  MOV.L        (R2, 160), RD25
  SUBS.L       RD25, RD22, RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        (R2, 164), RD24
  SUBS.L       RD24, RD21, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          FixedDiv, R1
  MOV.L        RD10, (R2, 124)
  BSR          .L00801E12, R0

.L00801E11:
// p_maputl.c:884   {
  MOV.L        RD0, (R2, 100)
// p_maputl.c:886   partial = FRACUNIT;
  LUI          16, RD27
  MOV.L        RD27, (R2, 116)
// p_maputl.c:887   xstep = 256*FRACUNIT;
  LUI          4096, RD26
  MOV.L        RD26, (R2, 124)

.L00801E12:

.L00801E10:
// p_maputl.c:888   }	
  SHAR         RD21, 7, RQ18
  MOV.L        (R2, 116), RD10
  MOV.L        (R2, 124), RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ18, RQ9, RD27
  MOV.L        RD27, (R2, 112)
// p_maputl.c:894   mapx = xt1;
  MOV.L        (R2, 140), RD8
// p_maputl.c:895   mapy = yt1;
  MOV.L        (R2, 136), RD23
// p_maputl.c:897   for (count = 0 ; count < 64 ; count++)
  MOV.L        RD0, (R2, 96)

.L00801E13:
// p_maputl.c:898   {
  MOV.L        (R2, 156), RD27
  ADD          R0, 1, RD26
  BTST.L       RD26, RD27, .L00801E16
  MOV          PIT_AddLineIntercepts, RQ20
  ADDS.L       RD8, 0, RD10
  ADD          RD23, 0, RD11
  ADD          RQ20, 0, RQ12
  BSR          P_BlockLinesIterator, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00D54

.L00801E16:
// p_maputl.c:905   if (flags & PT_ADDTHINGS)
  MOV.L        (R2, 156), RD27
  ADD          R0, 2, RD26
  BTST.L       RD26, RD27, .L00801E17
  MOV          PIT_AddThingIntercepts, RQ20
  ADDS.L       RD8, 0, RD10
  ADD          RD23, 0, RD11
  ADD          RQ20, 0, RQ12
  BSR          P_BlockThingsIterator, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00D54

.L00801E17:
// p_maputl.c:911   if (mapx == xt2
  MOV.L        (R2, 132), RD27
  CMPEQ.Q      RD8, RD27, RQ18
  MOV.L        (R2, 128), RD26
  CMPEQ.Q      RD23, RD26, RQ9
  BTSTN.L      RQ9, RQ18, .L00801E15
// p_maputl.c:917   if ( (yintercept >> FRACBITS) == mapy)
  MOV.L        (R2, 108), RD27
  SHAR         RD27, 16, RQ18
  BRNE.Q       RD23, RQ18, .L00801E18
// p_maputl.c:918   {
  MOV.L        (R2, 120), RD27
  MOV.L        (R2, 108), RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 108)
// p_maputl.c:920   mapx += mapxstep;
  MOV.L        (R2, 104), RD25
  ADDS.L       RD8, RD25, RD8
  BSR          .L00801E19, R0

.L00801E18:
  MOV.L        (R2, 112), RD27
  SHAR         RD27, 16, RQ9
  BRNE.Q       RD8, RQ9, .L00801E1A
// p_maputl.c:923   {
  MOV.L        (R2, 124), RD27
  MOV.L        (R2, 112), RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 112)
// p_maputl.c:925   mapy += mapystep;
  MOV.L        (R2, 100), RD25
  ADDS.L       RD23, RD25, RD23

.L00801E1A:

.L00801E19:
  MOV.L        (R2, 96), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 96)
  BRLT.L       64, RD27, .L00801E13

.L00801E15:
// p_maputl.c:930   return P_TraverseIntercepts ( trav, FRACUNIT );
  MOV.Q        (R2, 144), RQ10
  LUI          16, RD11
  BSR          P_TraverseIntercepts, R1
  BSR          .L00C02B21, R0

.L00C00D54:
  ADD          R0, 0, RQ10

.L00C02B21:
  ADD          R2, 368, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

TKMM_LVA_TagInit:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R23, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -320, R2
// tk_core/lva_tagobj.c:29   
  MOV.L        tkmm_lva_ntag, RD23
  BRNE.L       R0, RD23, .L00C02B27
// tk_core/lva_tagobj.c:42   
  ADD          RD0, 0, RD18

.L00800E01:
// tk_core/lva_tagobj.c:43   
  MOV          tkmm_lva_taghash, RQ23
  MOV.W        RD0, (RQ23, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       64, RD18, .L00800E01

.L00800E02:
// tk_core/lva_tagobj.c:45   
  MOV.L        tkmm_lva_ntag, RD23
  ADD          RD23, 0, RD18
  ADDS.L       RD23, 1, RD23
  MOV.L        RD23, tkmm_lva_ntag
// tk_core/lva_tagobj.c:47   
  ADD          R0, 16, RD10
  BSR          TKMM_MMList_Malloc, R1
  ADD          RQ10, 0, RQ9
// tk_core/lva_tagobj.c:48   
  MOV.Q        RQ0, (RQ9, 0)
// tk_core/lva_tagobj.c:49   
  MOV.W        RD18, (RQ9, 8)
// tk_core/lva_tagobj.c:50   
  MOV          tkmm_lva_tagarr, RQ23
  MOV.Q        RQ9, (RQ23, RD18)

.L00C02B27:
  ADD          R2, 320, R2
  MOV.Q        (R2, 24), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  MOV.Q        (R2, 16), R23
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

P_CheckMissileRange:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
// p_enemy.c:205   if (! P_CheckSight (actor, actor->target) )
  MOV.Q        (RQ9, 176), RQ22
  ADD          RQ9, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          P_CheckSight, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C00D59
// p_enemy.c:208   if ( actor->flags & MF_JUSTHIT )
  MOV.L        (RQ9, 160), RQ18
  ADD          R0, 64, RD20
  BTST.L       RD20, RQ18, .L00801AD0
// p_enemy.c:212   actor->flags &= ~MF_JUSTHIT;
  MOV.L        (RQ9, 160), RQ18
  AND          RQ18, -65, RQ23
  MOV.L        RQ23, (RQ9, 160)
// p_enemy.c:213   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02B2D, R0

.L00801AD0:
// p_enemy.c:216   if (actor->reactiontime)
  MOV.L        (RQ9, 184), RQ18
  BRNE.L       R0, RQ18, .L00C00D59
// p_enemy.c:220   dist = P_AproxDistance ( actor->x-actor->target->x,
  MOV.L        (RQ9, 28), RQ23
  MOV.Q        (RQ9, 176), RQ22
  MOV.L        (RQ22, 28), RQ18
  SUBS.L       RQ23, RQ18, RQ21
  MOV.L        (RQ9, 24), RQ18
  MOV.L        (RQ22, 24), RQ23
  SUBS.L       RQ18, RQ23, RQ20
  ADD          RQ20, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0xFFFFFFFFFFC00000, RD8
// p_enemy.c:223   if (!actor->info->meleestate)
  MOV.Q        (RQ9, 136), RQ22
  MOV.L        (RQ22, 40), RQ18
  BRNE.L       R0, RQ18, .L00801AD1
// p_enemy.c:224   dist -= 128*FRACUNIT;	// no melee attack, so fire more
  ADDS.L       RD8, 0xFFFFFFFFFF800000, RD8

.L00801AD1:
// p_enemy.c:226   dist >>= 16;
  SHAR         RD8, 16, RD8
// p_enemy.c:228   if (actor->type == MT_VILE)
  MOV.L        (RQ9, 128), RQ23
  BRNE.Q       3, RQ23, .L00801AD2
  BRGT.L       896, RD8, .L00C00D59

.L00801AD2:
// p_enemy.c:235   if (actor->type == MT_UNDEAD)
  MOV.L        (RQ9, 128), RQ21
  BRNE.Q       5, RQ21, .L00801AD3
  BRLT.L       196, RD8, .L00C00D59
// p_enemy.c:239   dist >>= 1;
  SHAR         RD8, 1, RD8

.L00801AD3:
// p_enemy.c:243   if (actor->type == MT_CYBORG
  MOV.L        (RQ9, 128), RQ20
  BREQ.Q       21, RQ20, .L00801AD5
  MOV.L        (RQ9, 128), RQ18
  BREQ.Q       19, RQ18, .L00801AD5

.L00801AD6:
  MOV.L        (RQ9, 128), RQ23
  BREQ.Q       18, RQ23, .L00801AD5
  BSR          .L00801AD4, R0

.L00801AD5:
// p_enemy.c:246   {
  SHAR         RD8, 1, RD8

.L00801AD4:
// p_enemy.c:250   if (dist > 200)
  BRLE.L       200, RD8, .L00801AD8
// p_enemy.c:251   dist = 200;
  ADD          R0, 200, RD8

.L00801AD8:
// p_enemy.c:253   if (actor->type == MT_CYBORG && dist > 160)
  MOV.L        (RQ9, 128), RQ21
  ADD          R0, 21, R5
  CMPEQ.Q      RQ21, R5, RQ20
  ADD          R0, 160, R5
  CMPGT.Q      RD8, R5, RQ18
  BTST.L       RQ18, RQ20, .L00801AD9
// p_enemy.c:254   dist = 160;
  ADD          R0, 160, RD8

.L00801AD9:
// p_enemy.c:256   if (P_Random () < dist)
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ23
  BRLT.L       RD8, RQ23, .L00C00D59
// p_enemy.c:259   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02B2D, R0

.L00C00D59:
  ADD          R0, 0, RQ10

.L00C02B2D:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

P_UnArchiveWorld:
// p_saveg.c:176   get = (short *)save_p;
  MOV.Q        save_p, RQ13
  ADD          RQ13, 0, RQ12
// p_saveg.c:179   for (i=0, sec = sectors ; i<numsectors ; i++,sec++)
  ADD          R0, 0, RD11
  MOV.Q        sectors, RQ10
  ADD          RQ10, 0, RQ17
  MOV.L        numsectors, RD16
  BRGE.L       RD16, RD11, .L00802337

.L00802335:
// p_saveg.c:180   {
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  SHAD.L       RQ13, 16, RQ10
  MOV.L        RQ10, (RQ17, 0)
// p_saveg.c:182   sec->ceilingheight = *get++ << FRACBITS;
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  SHAD.L       RQ13, 16, RQ10
  MOV.L        RQ10, (RQ17, 4)
// p_saveg.c:183   sec->floorpic = *get++;
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ17, 8)
// p_saveg.c:184   sec->ceilingpic = *get++;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ17, 10)
// p_saveg.c:185   sec->lightlevel = *get++;
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ17, 12)
// p_saveg.c:186   sec->special = *get++;		// needed?
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ17, 14)
// p_saveg.c:187   sec->tag = *get++;		// needed?
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ17, 16)
// p_saveg.c:188   sec->specialdata = 0;
  ADD          R0, 0, RQ16
  MOV.Q        RQ16, (RQ17, 104)
// p_saveg.c:189   sec->soundtarget = 0;
  ADD          R0, 0, RQ16
  MOV.Q        RQ16, (RQ17, 24)
  ADDS.L       RD11, 0, RQ13
  ADDS.L       RD11, 1, RD11
  ADD          RQ17, 0, RQ16
  ADD          RQ17, 128, RQ17
  MOV.L        numsectors, RD15
  BRLT.L       RD15, RD11, .L00802335

.L00802337:
// p_saveg.c:193   for (i=0, li = lines ; i<numlines ; i++,li++)
  ADD          R0, 0, RD11
  MOV.Q        lines, RQ15
  ADD          RQ15, 0, RQ14
  MOV.L        numlines, RD31
  BRGE.L       RD31, RD11, .L0080233A

.L00802338:
// p_saveg.c:194   {
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ14, 24)
// p_saveg.c:196   li->special = *get++;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ14, 26)
// p_saveg.c:197   li->tag = *get++;
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ14, 28)
// p_saveg.c:198   for (j=0 ; j<2 ; j++)
  ADDS.L       RD0, 0, RD15

.L0080233B:
// p_saveg.c:199   {
  ADD          RQ14, 36, RQ16
  MOV.W        (RQ16, RD15), RQ13
  BREQ.Q       -1, RQ13, .L0080233C
// p_saveg.c:202   si = &sides[li->sidenum[j]];
  ADD          RQ14, 36, RQ16
  MOV.W        (RQ16, RD15), RQ13
  MOV.Q        sides, RQ31
  ADD          R0, 24, R5
  MUL.L        RQ13, R5, RQ30
  ADD          RQ31, RQ30, RQ30
// p_saveg.c:203   si->textureoffset = *get++ << FRACBITS;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  SHAD.L       RQ10, 16, RQ13
  MOV.L        RQ13, (RQ30, 0)
// p_saveg.c:204   si->rowoffset = *get++ << FRACBITS;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  SHAD.L       RQ10, 16, RQ13
  MOV.L        RQ13, (RQ30, 4)
// p_saveg.c:205   si->toptexture = *get++;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ30, 8)
// p_saveg.c:206   si->bottomtexture = *get++;
  MOV.W        (RQ12, 0), RQ13
  ADD          RQ12, 2, RQ12
  MOV.W        RQ13, (RQ30, 10)
// p_saveg.c:207   si->midtexture = *get++;
  MOV.W        (RQ12, 0), RQ10
  ADD          RQ12, 2, RQ12
  MOV.W        RQ10, (RQ30, 12)

.L0080233C:
  ADDS.L       RD15, 1, RD15
  BRLT.L       2, RD15, .L0080233B

.L0080233D:
  ADDS.L       RD11, 0, RQ13
  ADDS.L       RD11, 1, RD11
  ADD          RQ14, 0, RQ16
  ADD          RQ14, 96, RQ14
  MOV.L        numlines, RD31
  BRLT.L       RD31, RD11, .L00802338

.L0080233A:
// p_saveg.c:209   }
  ADD          RQ12, 0, RQ31
  MOV.Q        RQ31, save_p

.L00C02B2E:
  JSR          R1, 0, R0
  .balign 4

tk_print_hex:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -344, R2
  ADDU.L       RD10, R0, RD8
// tk_core/tk_puts.c:1140   
  SHLR.Q       RD8, 28, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1141   
  SHLR.Q       RD8, 24, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1142   
  SHLR.Q       RD8, 20, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1143   
  SHLR.Q       RD8, 16, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1144   
  SHLR.Q       RD8, 12, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1145   
  SHLR.Q       RD8, 8, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1146   
  SHLR.Q       RD8, 4, RQ18
  AND          RQ18, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1147   
  AND          RD8, 15, RQ18
  MOV.Q        tk_print_hex/chrs!1788, RQ23
  MOV.B        (RQ23, RQ18), RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          tk_putc, R1

.L00C02B34:
  ADD          R2, 344, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0

P_BoxOnLineSide:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ21
// p_maputl.c:118   p1 = 0;
  ADD          RD0, 0, RD8
// p_maputl.c:119   p2 = 0;
  ADD          R0, 0, RD22
// p_maputl.c:121   switch (ld->slopetype)
  MOV.L        (RQ21, 56), RQ18
  BREQ.L       R0, RQ18, .L00801DC4
  BREQ.Q       1, RQ18, .L00801DC5
  BREQ.Q       2, RQ18, .L00801DC6
  BREQ.Q       3, RQ18, .L00801DC7
  BSR          .L00801DC3, R0

.L00801DC4:
// p_maputl.c:123   case ST_HORIZONTAL:
  MOV.L        (RQ23, 0), RQ18
  MOV.Q        (RQ21, 0), RQ13
  MOV.L        (RQ13, 4), RQ9
  CMPGT.Q      RQ18, RQ9, RD8
// p_maputl.c:125   p2 = tmbox[BOXBOTTOM] > ld->v1->y;
  MOV.L        (RQ23, 4), RQ18
  CMPGT.Q      RQ18, RQ9, RD22
// p_maputl.c:126   if (ld->dx < 0)
  MOV.L        (RQ21, 16), RQ9
  BRGE.L       R0, RQ9, .L00801DC8
// p_maputl.c:127   {
  XOR          RD8, 1, RD8
// p_maputl.c:129   p2 ^= 1;
  XOR          RD22, 1, RD22

.L00801DC8:
// p_maputl.c:130   }
  BSR          .L00801DC3, R0

.L00801DC5:
// p_maputl.c:133   case ST_VERTICAL:
  MOV.L        (RQ23, 12), RQ18
  MOV.Q        (RQ21, 0), RQ13
  MOV.L        (RQ13, 0), RQ9
  CMPGT.Q      RQ9, RQ18, RD8
// p_maputl.c:135   p2 = tmbox[BOXLEFT] < ld->v1->x;
  MOV.L        (RQ23, 8), RQ18
  CMPGT.Q      RQ9, RQ18, RD22
// p_maputl.c:136   if (ld->dy < 0)
  MOV.L        (RQ21, 20), RQ9
  BRGE.L       R0, RQ9, .L00801DC9
// p_maputl.c:137   {
  XOR          RD8, 1, RD8
// p_maputl.c:139   p2 ^= 1;
  XOR          RD22, 1, RD22

.L00801DC9:
// p_maputl.c:140   }
  BSR          .L00801DC3, R0

.L00801DC6:
// p_maputl.c:143   case ST_POSITIVE:
  MOV.L        (RQ23, 0), RQ18
  MOV.L        (RQ23, 8), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ21, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADDS.L       RQ10, 0, RD8
// p_maputl.c:145   p2 = P_PointOnLineSide (tmbox[BOXRIGHT], tmbox[BOXBOTTOM], ld);
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (RQ23, 12), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ21, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD22
// p_maputl.c:146   break;
  BSR          .L00801DC3, R0

.L00801DC7:
// p_maputl.c:148   case ST_NEGATIVE:
  MOV.L        (RQ23, 0), RQ18
  MOV.L        (RQ23, 12), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ21, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADDS.L       RQ10, 0, RD8
// p_maputl.c:150   p2 = P_PointOnLineSide (tmbox[BOXLEFT], tmbox[BOXBOTTOM], ld);
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (RQ23, 8), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADD          RQ21, 0, RQ12
  BSR          P_PointOnLineSide, R1
  ADD          RQ10, 0, RD22
// p_maputl.c:151   break;

.L00801DC3:
// p_maputl.c:154   if (p1 == p2)
  BRNE.Q       RD22, RD8, .L00801DCA
// p_maputl.c:155   return p1;
  ADDS.L       RD8, 0, RD10
  BSR          .L00C02B3A, R0

.L00801DCA:
// p_maputl.c:156   return -1;
  ADD          R0, -1, RD10

.L00C02B3A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

S_StopSound:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 88)
// s_sound.c:489   for (cnum=0 ; cnum<numChannels ; cnum++)
  ADD          R0, 0, RD18
  MOV.L        numChannels, RD13
  BRGE.L       RD13, RD18, .L00802D50

.L00802D4E:
// s_sound.c:490   {
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ9
  BREQ.Q       R0, RQ9, .L00802D51
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 8), RQ9
  MOV.Q        (R2, 88), RQ13
  BRNE.Q       RQ13, RQ9, .L00802D51

.L00802D52:
// s_sound.c:492   {
  ADD          RD18, 0, RD10
  BSR          S_StopChannel, R1
// s_sound.c:494   break;
  BSR          .L00802D50, R0

.L00802D51:
  ADDS.L       RD18, 1, RD18
  MOV.L        numChannels, RD13
  BRLT.L       RD13, RD18, .L00802D4E

.L00802D50:

.L00C02B40:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

HUlib_drawIText:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          R0, 1, RD22
// hu_lib.c:348   if(!it || !it->on)
  BREQ.Q       R0, RQ9, .L00C02B46
  MOV.Q        (RQ9, 120), RQ18
  BREQ.Q       R0, RQ18, .L00C02B46

.L00802D1B:
// hu_lib.c:351   hu_textline_t *l = &it->l;
  ADD          RQ9, 0, RQ18
  ADD          RQ18, 0, RQ23
// hu_lib.c:353   if (!*it->on)
  MOV.Q        (RQ9, 120), RQ18
  MOV.L        (RQ18, 0), RQ8
  BREQ.L       R0, RQ8, .L00C02B46
// hu_lib.c:355   HUlib_drawTextLine(l, true); // draw the line w/ cursor
  ADD          RQ23, 0, RQ10
  ADD          R0, 1, RD11
  BSR          HUlib_drawTextLine, R1

.L00C02B46:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

S_getChannel:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  ADD          RQ11, 0, RQ21
// s_sound.c:853   for (cnum=0 ; cnum<numChannels ; cnum++)
  ADD          R0, 0, RD18
  MOV.L        numChannels, RD13
  BRGE.L       RD13, RD18, .L00802D85

.L00802D83:
// s_sound.c:856   if (!s_channels[cnum].sfxinfo)
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ9
  BRNE.Q       R0, RQ9, .L00802D86
// s_sound.c:857   break;
  BSR          .L00802D85, R0
  BSR          .L00802D87, R0

.L00802D86:
  BREQ.Q       R0, RQ8, .L00802D88
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 8), RQ9
  BRNE.Q       RQ8, RQ9, .L00802D88

.L00802D89:
// s_sound.c:860   {
  ADD          RD18, 0, RD10
  BSR          S_StopChannel, R1
// s_sound.c:862   break;
  BSR          .L00802D85, R0

.L00802D88:

.L00802D87:
  ADDS.L       RD18, 1, RD18
  MOV.L        numChannels, RD13
  BRLT.L       RD13, RD18, .L00802D83

.L00802D85:
// s_sound.c:867   if (cnum == numChannels)
  MOV.L        numChannels, RD13
  BRNE.Q       RD13, RD18, .L00802D8B
// s_sound.c:870   for (cnum=0 ; cnum<numChannels ; cnum++)
  ADD          R0, 0, RD18
  MOV.L        numChannels, RD13
  BRGE.L       RD13, RD18, .L00802D8E

.L00802D8C:
// s_sound.c:871   if (s_channels[cnum].sfxinfo->priority >= sfxinfo->priority)
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ9
  MOV.L        (RQ9, 12), RQ23
  MOV.L        (RQ21, 12), RQ22
  BRGE.L       RQ22, RQ23, .L00802D8E
  ADDS.L       RD18, 1, RD18
  MOV.L        numChannels, RD13
  BRLT.L       RD13, RD18, .L00802D8C

.L00802D8E:
  MOV.L        numChannels, RD13
  BRNE.Q       RD13, RD18, .L00802D8F
// s_sound.c:877   return -1;
  ADD          R0, -1, RD10
  BSR          .L00C02B4C, R0
  BSR          .L00802D90, R0

.L00802D8F:
// s_sound.c:882   S_StopChannel(cnum);
  ADD          RD18, 0, RD10
  BSR          S_StopChannel, R1

.L00802D90:

.L00802D8B:
// s_sound.c:886   c = &s_channels[cnum];
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
// s_sound.c:889   c->sfxinfo = sfxinfo;
  MOV.Q        RQ21, (RQ12, 0)
// s_sound.c:890   c->origin = origin;
  MOV.Q        RQ8, (RQ12, 8)
  MOV.Q        RQ12, (R2, 104)
// s_sound.c:892   return cnum;
  ADD          RD18, 0, RD10

.L00C02B4C:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

__start_first:
// pdpc201/btshx_supa.c:1163   

.L00C02B4D:
  JSR          R1, 0, R0

TKMM_PageAlloc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
// tk_core/tk_mmpage.c:487   
  ADDS.L       RD9, 0, RD10
  MOV.Q        TKMM_PageAlloc_f, RQ8
  JSR          RQ8, 0, R1

.L00C02B53:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

S_Start:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -328, R2
  ADD          R0, 1, RD21
// s_sound.c:236   for (cnum=0 ; cnum<numChannels ; cnum++)
  ADD          R0, 0, RD18
  MOV.L        numChannels, RD13
  BRGE.L       RD13, RD18, .L00802D31

.L00802D2F:
// s_sound.c:237   {
  MOV.Q        TU7A00CA3E/s_channels, RQ13
  ADD          R0, 24, R5
  MUL.L        RD18, R5, RQ12
  ADD          RQ13, RQ12, RQ12
  MOV.Q        (RQ12, 0), RQ8
  BREQ.Q       R0, RQ8, .L00802D32
// s_sound.c:239   S_StopChannel(cnum);
  ADD          RD18, 0, RD10
  BSR          S_StopChannel, R1

.L00802D32:
  ADDS.L       RD18, 1, RD18
  MOV.L        numChannels, RD13
  BRLT.L       RD13, RD18, .L00802D2F

.L00802D31:
// s_sound.c:243   mus_paused = 0;
  MOV.L        RD0, TU7A00CA3E/mus_paused
// s_sound.c:245   if (gamemode == commercial)
  MOV.L        gamemode, RD13
  BRNE.Q       2, RD13, .L00802D33
// s_sound.c:246   mnum = mus_runnin + gamemap - 1;
  MOV.L        gamemap, RD13
  ADDS.L       RD13, 33, RQ9
  ADDS.L       RQ9, -1, RD22
  BSR          .L00802D34, R0

.L00802D33:
  MOV.L        gameepisode, RD13
  BRGE.L       4, RD13, .L00802D35
// s_sound.c:250   mnum = mus_e1m1 + (gameepisode-1)*9 + gamemap-1;
  MOV.L        gameepisode, RD13
  ADDS.L       RD13, -1, RQ9
  ADD          R0, 9, R5
  MULS.L       RQ9, R5, RQ23
  ADDS.L       RQ23, 1, RQ9
  MOV.L        gamemap, RD13
  ADDS.L       RQ9, RD13, RQ23
  ADDS.L       RQ23, -1, RD22
  BSR          .L00802D36, R0

.L00802D35:
// s_sound.c:252   mnum = spmus[gamemap-1];
  MOV.L        gamemap, RD13
  ADDS.L       RD13, -1, RQ9
  MOV          spmus, RQ13
  MOV.L        (RQ13, RQ9), RD22

.L00802D36:

.L00802D34:
// s_sound.c:259   S_ChangeMusic(mnum, true);
  ADD          RD22, 0, RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1
// s_sound.c:261   nextcleanup = 15;
  ADD          R0, 15, RD13
  MOV.L        RD13, TU7A00CA3E/nextcleanup

.L00C02B59:
  ADD          R2, 328, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

A_Light0:
// p_pspr.c:774   {
  MOV.L        RD0, (RQ10, 248)

.L00C02B5A:
  JSR          R1, 0, R0

TK_GetPtrForHandle:
// tk_core/tk_vfile.c:171   
  BRGT.L       R0, RD11, .L00800A87
  BRNE.L       R0, RD11, .L00800A88
// tk_core/tk_vfile.c:175   
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L00800A88:
// tk_core/tk_vfile.c:176   

TK_GetPtrForHandle.debugbreak_L051C:
  BRK          1308
// tk_core/tk_vfile.c:177   
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L00800A87:
// tk_core/tk_vfile.c:178   
  BRLT.L       256, RD11, .L00800A89
// tk_core/tk_vfile.c:180   

TK_GetPtrForHandle.debugbreak_L051D:
  BRK          1309
// tk_core/tk_vfile.c:182   
  ADD          RQ0, 0, RQ10
  JSR          R1, 0, R0

.L00800A89:
// tk_core/tk_vfile.c:183   
  MOV          tk_handle_arr, RQ13
  MOV.Q        (RQ13, RD11), RQ12
  ADD          RQ12, 0, RQ10

.L00C02B5B:
  JSR          R1, 0, R0
  .balign 4

P_AcsRun_LocalAmbientSound:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  MOV.Q        RQ10, (R2, 72)
  ADDS.L       RD11, 0, RD9
  ADDS.L       RD12, 0, RD8
  MOV          .L00C02B6E, RQ18
// p_acspec.c:1088   {
  ADD          RQ18, 0, RQ10
  ADDS.L       RD9, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          printf, R1

.L00C02B6D:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

TK_GetCurrentTask:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -344, R2
// tk_core/tk_irq.c:1169   
  BSR          _arch_gettbr, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ9
// tk_core/tk_irq.c:1171   
  MOV.Q        RQ9, (R2, 72)
  ADD          RQ9, 0, RQ10

.L00C02B74:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

TKMM_PageAllocUsc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
  ADDS.L       RD10, 0, RD9
// tk_core/tk_mmpage.c:519   
  ADDS.L       RD9, 0, RD10
  MOV.Q        TKMM_PageAlloc_f, RQ8
  JSR          RQ8, 0, R1

.L00C02B7A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

strtoul:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ11, (R2, 112)
  ADD          RD12, 0, RD23
// pdpc201/stdlib.c:860   
  ADD          RQ0, 0, RQ21
// pdpc201/stdlib.c:862   
  MOV.L        RD0, (R2, 104)
// pdpc201/stdlib.c:864   
  BRNE.L       R0, RD23, .L00800739
// pdpc201/stdlib.c:865   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 104)

.L00800739:
// pdpc201/stdlib.c:867   
  BSR          .L0080073A, R0

.L0080073B:
// pdpc201/stdlib.c:869   
  ADD          RQ9, 1, RQ9

.L0080073A:
  MOV.B        (RQ9, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isspace, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L0080073B

.L0080073C:
// pdpc201/stdlib.c:871   

.L0080073D:
// pdpc201/stdlib.c:873   
  MOV.B        (RQ9, 0), RQ8
  AND          RQ8, 255, RQ18
  ADD          RQ18, 0, RD10
  BSR          isdigit, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L0080073E
  BRNE.L       R0, RD23, .L0080073F
  MOV.B        (RQ9, 0), RQ18
  BRNE.Q       48, RQ18, .L00800740
// pdpc201/stdlib.c:879   
  ADD          R0, 8, RD23
  BSR          .L00800741, R0

.L00800740:
// pdpc201/stdlib.c:883   
  ADD          R0, 10, RD23
// pdpc201/stdlib.c:885   
  MOV.L        RD0, (R2, 104)

.L00800741:

.L0080073F:
// pdpc201/stdlib.c:887   
  ADDS.L       RD23, 0, RQ22
  MULU.Q       RQ21, RQ22, RQ20
  MOV.B        (RQ9, 0), RQ18
  ADDS.L       RQ18, -48, RQ8
  ADDS.L       RQ8, 0, RQ22
  ADD          RQ20, RQ22, RQ21
// pdpc201/stdlib.c:889   
  ADD          RQ9, 1, RQ9
  BSR          .L00800742, R0

.L0080073E:
  MOV.B        (RQ9, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isalpha, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00800743
  MOV.B        (RQ9, 0), RQ8
  BREQ.Q       88, RQ8, .L00800744
  MOV.B        (RQ9, 0), RQ18
  BREQ.Q       120, RQ18, .L00800744
  BSR          .L00800745, R0

.L00800744:
  BREQ.L       R0, RD23, .L00800746
  BRNE.Q       8, RD23, .L00800747
  MOV.L        (R2, 104), RD27
  BREQ.L       R0, RD27, .L00800747

.L00800746:
// pdpc201/stdlib.c:896   
  ADD          R0, 16, RD23
// pdpc201/stdlib.c:898   
  MOV.L        RD0, (R2, 104)
// pdpc201/stdlib.c:899   
  ADD          RQ9, 1, RQ9
  BSR          .L00800748, R0

.L00800747:
  BRNE.Q       16, RD23, .L00800749
// pdpc201/stdlib.c:904   
  ADD          RQ9, 1, RQ9
  BSR          .L0080074A, R0

.L00800749:
// pdpc201/stdlib.c:907   
  BSR          .L0080074B, R0

.L0080074A:

.L00800748:
  BSR          .L0080074C, R0

.L00800745:
  BRGT.L       10, RD23, .L0080074D
// pdpc201/stdlib.c:912   
  BSR          .L0080074B, R0
  BSR          .L0080074E, R0

.L0080074D:
// pdpc201/stdlib.c:916   
  ADDS.L       RD23, 0, RQ22
  MULU.Q       RQ21, RQ22, RQ20
  MOV.B        (RQ9, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          toupper, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, -65, RQ8
  ADDS.L       RQ8, 0, RQ27
  ADD          RQ20, RQ27, RQ22
  ADD          RQ22, 10, RQ21
// pdpc201/stdlib.c:918   
  ADD          RQ9, 1, RQ9

.L0080074E:

.L0080074C:
  BSR          .L0080074F, R0

.L00800743:
// pdpc201/stdlib.c:922   
  BSR          .L0080074B, R0

.L0080074F:

.L00800742:
  BSR          .L0080073D, R0

.L0080074B:
// pdpc201/stdlib.c:925   
  MOV.Q        (R2, 112), RQ27
  BREQ.Q       RQ0, RQ27, .L00800750
// pdpc201/stdlib.c:927   
  MOV.Q        (R2, 112), RQ27
  MOV.Q        RQ9, (RQ27, 0)

.L00800750:
// pdpc201/stdlib.c:929   
  ADD          RQ21, 0, RQ10

.L00C02B80:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

readdir:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ21
// pdpc201/bt_readdir.c:20   
  ADD          RQ21, 0, RQ23
// pdpc201/bt_readdir.c:21   
  ADD          RQ23, 0, RQ10
  BSR          tk_readdir, R1
  ADD          RQ10, 0, RQ9
// pdpc201/bt_readdir.c:22   
  BRNE.Q       R0, RQ9, .L0080112A
// pdpc201/bt_readdir.c:23   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02B86, R0

.L0080112A:
// pdpc201/bt_readdir.c:28   
  ADD          R0, 280, RD10
  BSR          tk_ralloc, R1
  ADD          RQ10, 0, RQ8
// pdpc201/bt_readdir.c:29   
  MOV.L        (RQ9, 0), RQ18
  MOVU.L       RQ18, (RQ8, 0)
// pdpc201/bt_readdir.c:30   
  MOV.L        (RQ9, 4), RQ18
  ADDS.L       RQ18, 0, RQ22
  MOV.Q        RQ22, (RQ8, 8)
// pdpc201/bt_readdir.c:31   
  MOVU.W       (RQ9, 8), RQ18
  MOVU.W       RQ18, (RQ8, 16)
// pdpc201/bt_readdir.c:32   
  MOVU.B       (RQ9, 10), RQ18
  MOVU.B       RQ18, (RQ8, 18)
// pdpc201/bt_readdir.c:33   
  ADD          RQ9, 11, RQ20
  MOV.Q        RQ20, (R2, 80)
  ADD          RQ8, 19, RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          R0, 256, RQ12
  BSR          strncpy, R1
// pdpc201/bt_readdir.c:36   
  ADD          RQ8, 0, RQ10

.L00C02B86:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnDoorRaiseIn5Mins:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.X        R18, (R2, 16)
  MOV.Q        R20, (R2, 32)
  MOV.X        R24, (R2, 56)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
  MOV.L        RD11, (R2, 116)
// p_doors.c:553   door = Z_Malloc ( sizeof(*door), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
// p_doors.c:555   P_AddThinker (&door->thinker);
  ADD          RQ18, 0, RQ8
  ADD          RQ8, 0, RQ10
  BSR          P_AddThinker, R1
// p_doors.c:557   sec->specialdata = door;
  MOV.Q        RQ18, (RQ23, 104)
// p_doors.c:558   sec->special = 0;
  MOV.W        RD0, (RQ23, 14)
// p_doors.c:560   door->thinker.function.acp1 = (actionf_p1)T_VerticalDoor;
  MOV          T_VerticalDoor, RQ8
  ADD          RQ18, 0, RQ20
  ADD          RQ20, 16, RQ27
  MOV.Q        RQ8, (RQ27, 0)
// p_doors.c:561   door->sector = sec;
  MOV.Q        RQ23, (RQ18, 32)
// p_doors.c:562   door->direction = 2;
  ADD          R0, 2, RD26
  MOV.L        RD26, (RQ18, 48)
// p_doors.c:563   door->type = raiseIn5Mins;
  ADD          R0, 4, RD25
  MOV.L        RD25, (RQ18, 24)
// p_doors.c:564   door->speed = VDOORSPEED;
  LUI          32, RD24
  MOV.L        RD24, (RQ18, 44)
// p_doors.c:565   door->topheight = P_FindLowestCeilingSurrounding(sec);
  ADD          RQ23, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 40)
// p_doors.c:566   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ18, 40), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFC0000, RQ22
  MOV.L        RQ22, (RQ18, 40)
// p_doors.c:567   door->topwait = VDOORWAIT;
  ADD          R0, 150, RD19
  MOV.L        RD19, (RQ18, 52)
// p_doors.c:568   door->topcountdown = 5 * 60 * 35;
  LDIZ         10500, RD20
  MOV.L        RD20, (RQ18, 56)

.L00C02B8C:
  ADD          R2, 320, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.Q        (R2, 32), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_bigint_and:
// tk_core/tku_bigint.c:162   

.L00C02B8D:
  JSR          R1, 0, R0

__sendto:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -424, R2
  MOV.L        RD10, (R2, 172)
  MOV.Q        RQ11, (R2, 160)
  MOV.Q        RQ12, (R2, 152)
  MOV.L        RD13, (R2, 148)
  MOV.Q        RQ14, (R2, 136)
  MOV.L        RD15, (R2, 132)
// pdpc201/btshx_supa.c:488   
  MOV          btshx_tk_handles, RQ22
  MOV.L        (R2, 172), RD21
  MOV.Q        (RQ22, RD21), RQ9
// pdpc201/btshx_supa.c:489   
  MOV.Q        (R2, 152), RQ22
  ADDS.L       RQ22, 0, RQ8
  ADD          RQ9, 0, RQ10
  LDIZ         16386, RD11
  MOV.Q        (R2, 160), RQ12
  ADDS.L       RQ8, 0, RD13
  MOV.L        (R2, 148), RD14
  MOV.Q        (R2, 136), RQ15
  MOV.L        (R2, 132), RD16
  BSR          tk_fsend, R1
  ADD          RQ10, 0, RD18
// pdpc201/btshx_supa.c:491   
  ADDS.L       RD18, 0, RQ23
  ADD          RQ23, 0, RQ10

.L00C02B93:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Explode:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 128, RD8
// p_enemy.c:1632   {
  MOV.Q        (RQ18, 176), RQ9
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R0, 128, RD12
  BSR          P_RadiusAttack, R1

.L00C02B99:
  ADD          R2, 352, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

I_InitMusic:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// i_bgb_mus_btsh.c:991   SMus_Init();
  BSR          SMus_Init, R1
// i_bgb_mus_btsh.c:993   genmidi = W_CacheLumpName("GENMIDI", PU_STATIC);
  MOV          .L00C02BA0, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ22
// i_bgb_mus_btsh.c:995   if(genmidi)
  MOV.Q        RQ22, genmidi
  BREQ.Q       R0, RQ22, .L0080129C
// i_bgb_mus_btsh.c:996   {
  ADD          R0, 0, RD9

.L0080129D:
// i_bgb_mus_btsh.c:998   {
  MOV.Q        genmidi, RQ22
  ADD          RQ22, 8, RQ23
  ADD          R0, 36, R5
  MULS.L       RD9, R5, RQ18
  ADD          RQ23, RQ18, RQ22
  ADD          RQ22, 0, RQ8
// i_bgb_mus_btsh.c:1010   SMus_SetFmRegisterData(i, 0, ((u32 *)rec)[0]);
  MOVU.L       (RQ8, 0), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1011   SMus_SetFmRegisterData(i, 1, ((u32 *)rec)[1]);
  MOVU.L       (RQ8, 4), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1012   SMus_SetFmRegisterData(i, 2, ((u32 *)rec)[2]);
  MOVU.L       (RQ8, 8), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 2, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1013   SMus_SetFmRegisterData(i, 3, ((u32 *)rec)[3]);
  MOVU.L       (RQ8, 12), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 3, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1014   SMus_SetFmRegisterData(i, 4, ((u32 *)rec)[4]);
  MOVU.L       (RQ8, 16), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 4, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1015   SMus_SetFmRegisterData(i, 5, ((u32 *)rec)[5]);
  MOVU.L       (RQ8, 20), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 5, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1016   SMus_SetFmRegisterData(i, 6, ((u32 *)rec)[6]);
  MOVU.L       (RQ8, 24), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 6, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1017   SMus_SetFmRegisterData(i, 7, ((u32 *)rec)[7]);
  MOVU.L       (RQ8, 28), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 7, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
// i_bgb_mus_btsh.c:1018   SMus_SetFmRegisterData(i, 8, ((u32 *)rec)[8]);
  MOVU.L       (RQ8, 32), RQ18
  ADDS.L       RD9, 0, RD10
  ADD          R0, 8, RD11
  ADD          RQ18, 0, RD12
  BSR          SMus_SetFmRegisterData, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       175, RD9, .L0080129D

.L0080129F:

.L0080129C:

.L00C02B9F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

P_CheckAmmo:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          RQ10, 0, RQ18
// p_pspr.c:168   ammo = weaponinfo[player->readyweapon].ammo;
  MOV.L        (RQ18, 116), RQ8
  MOV          weaponinfo, RQ20
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        (RQ27, 0), RD21
// p_pspr.c:171   if (player->readyweapon == wp_bfg)
  BRNE.Q       6, RQ8, .L00801E6D
// p_pspr.c:172   count = BFGCELLS;
  ADD          R0, 40, RD22
  BSR          .L00801E6E, R0

.L00801E6D:
  MOV.L        (RQ18, 116), RQ8
  BRNE.Q       8, RQ8, .L00801E6F
// p_pspr.c:174   count = 2;	// Double barrel.
  ADD          R0, 2, RD22
  BSR          .L00801E70, R0

.L00801E6F:
// p_pspr.c:176   count = 1;	// Regular.
  ADD          R0, 1, RD22

.L00801E70:

.L00801E6E:
// p_pspr.c:180   if (ammo == am_noammo || player->ammo[ammo] >= count)
  BREQ.Q       5, RD21, .L00801E72
  ADD          RQ18, 160, RQ20
  MOV.L        (RQ20, RD21), RQ8
  BRGE.L       RD22, RQ8, .L00801E72
  BSR          .L00801E71, R0

.L00801E72:
// p_pspr.c:181   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02BA6, R0

.L00801E71:
// p_pspr.c:185   do

.L00801E74:
// p_pspr.c:186   {
  MOV.L        (RQ18, 144), RQ8
  BREQ.L       R0, RQ8, .L00801E77
  MOV.L        (RQ18, 168), RQ8
  BREQ.L       R0, RQ8, .L00801E77

.L00801E79:
  MOV.L        gamemode, RD20
  BREQ.L       R0, RD20, .L00801E77

.L00801E78:
// p_pspr.c:190   {
  ADD          R0, 5, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E7B, R0

.L00801E77:
  MOV.L        (RQ18, 156), RQ8
  BREQ.L       R0, RQ8, .L00801E7C
  MOV.L        (RQ18, 164), RQ8
  BRLE.L       2, RQ8, .L00801E7C

.L00801E7E:
  MOV.L        gamemode, RD20
  ADD          R0, 2, R5
  CMPEQ.Q      RD20, R5, RQ8
  ADD          R0, 5, R5
  CMPEQ.Q      RD20, R5, RQ9
  OR           RQ8, RQ9, RQ23
  BREQ.L       R0, RQ23, .L00801E7C

.L00801E7D:
// p_pspr.c:196   {
  ADD          R0, 8, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E80, R0

.L00801E7C:
  MOV.L        (RQ18, 136), RQ9
  BREQ.L       R0, RQ9, .L00801E81
  MOV.L        (RQ18, 160), RQ9
  BREQ.L       R0, RQ9, .L00801E81

.L00801E82:
// p_pspr.c:201   {
  ADD          R0, 3, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E84, R0

.L00801E81:
  MOV.L        (RQ18, 132), RQ9
  BREQ.L       R0, RQ9, .L00801E85
  MOV.L        (RQ18, 164), RQ9
  BREQ.L       R0, RQ9, .L00801E85

.L00801E86:
// p_pspr.c:206   {
  ADD          R0, 2, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E88, R0

.L00801E85:
  MOV.L        (RQ18, 160), RQ9
  BREQ.L       R0, RQ9, .L00801E89
// p_pspr.c:210   {
  ADD          R0, 1, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E8A, R0

.L00801E89:
  MOV.L        (RQ18, 152), RQ9
  BREQ.L       R0, RQ9, .L00801E8B
// p_pspr.c:214   {
  ADD          R0, 7, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E8C, R0

.L00801E8B:
  MOV.L        (RQ18, 140), RQ9
  BREQ.L       R0, RQ9, .L00801E8D
  MOV.L        (RQ18, 172), RQ9
  BREQ.L       R0, RQ9, .L00801E8D

.L00801E8E:
// p_pspr.c:219   {
  ADD          R0, 4, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E90, R0

.L00801E8D:
  MOV.L        (RQ18, 148), RQ9
  BREQ.L       R0, RQ9, .L00801E91
  MOV.L        (RQ18, 168), RQ9
  BRLE.L       40, RQ9, .L00801E91

.L00801E93:
  MOV.L        gamemode, RD20
  BREQ.L       R0, RD20, .L00801E91

.L00801E92:
// p_pspr.c:225   {
  ADD          R0, 6, RD20
  MOV.L        RD20, (RQ18, 120)
  BSR          .L00801E95, R0

.L00801E91:
// p_pspr.c:231   player->pendingweapon = wp_fist;
  MOV.L        RD0, (RQ18, 120)

.L00801E95:

.L00801E90:

.L00801E8C:

.L00801E8A:

.L00801E88:

.L00801E84:

.L00801E80:

.L00801E7B:
  MOV.L        (RQ18, 120), RQ23
  BREQ.Q       10, RQ23, .L00801E74
// p_pspr.c:237   P_SetPsprite (player,
  MOV.L        (RQ18, 116), RQ8
  MOV          weaponinfo, RQ20
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.L        (RQ27, 8), RQ9
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:241   return false;	
  ADD          R0, 0, RD10

.L00C02BA6:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

_msize:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
// pdpc201/stdlib.c:211   
  ADD          RQ9, 0, RQ10
  MOV.Q        _msize_fptr, RQ8
  JSR          RQ8, 0, R1

.L00C02BAC:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

S_StartMusic:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD18
// s_sound.c:647   {
  ADD          RD18, 0, RD10
  ADD          R0, 0, RD11
  BSR          S_ChangeMusic, R1

.L00C02BB2:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

__unlink:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -912, R2
  MOV.Q        RQ10, (R2, 88)
  MOV.L        RD11, (R2, 84)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 72)
// pdpc201/btshx_supa.c:575   
// pdpc201/btshx_supa.c:581   
  MOV.Q        (R2, 88), RQ18
// pdpc201/btshx_supa.c:582   
  ADD          R2, 96, RQ10
  ADD          R0, 512, RD11
  ADD          RQ18, 0, RQ12
  BSR          TK_Env_GetCwdQualifyName, R1
// pdpc201/btshx_supa.c:583   
  ADD          R2, 96, RQ10
  ADD          R2, 96, RQ11
  BSR          TKSH_NormalizePath, R1
// pdpc201/btshx_supa.c:587   
  ADD          R2, 96, RQ10
  BSR          tk_unlink, R1
// pdpc201/btshx_supa.c:588   
  ADD          R0, 0, RD10

.L00C02BB8:
  ADD          R2, 912, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

SMus_ProgramChange:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RD10, 0, RD18
  MOV.L        RD11, (R2, 120)
// i_bgb_mus_btsh.c:715   {
// i_bgb_mus_btsh.c:719   if((ch==8) || (ch==9))
  ADD          R0, 8, R5
  CMPEQ.Q      RD18, R5, RQ8
  ADD          R0, 9, R5
  CMPEQ.Q      RD18, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00801269
// i_bgb_mus_btsh.c:720   ch^=1;
  XOR          RD18, 1, RD18

.L00801269:
// i_bgb_mus_btsh.c:722   mcmd=&t_mcmd;
  ADD          R2, 96, RQ21
  ADD          RQ21, 0, RQ9
// i_bgb_mus_btsh.c:723   mcmd->op=4;
  ADD          R0, 4, RD20
  MOVU.B       RD20, (RQ9, 0)
// i_bgb_mus_btsh.c:724   mcmd->ch=ch;
  MOVU.B       RD18, (RQ9, 1)
// i_bgb_mus_btsh.c:725   mcmd->d0=d0;
  MOV.L        (R2, 120), RD27
  MOVU.B       RD27, (RQ9, 2)
// i_bgb_mus_btsh.c:729   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ9, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:730   return(0);
  ADD          R0, 0, RD10

.L00C02BBE:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

__start_early:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// pdpc201/btshx_supa.c:1202   
  BSR          TKMM_Init, R1
// pdpc201/btshx_supa.c:1204   
  MOV          tk_malloc_cat, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _malloc_fptr
// pdpc201/btshx_supa.c:1205   
  MOV          tk_free, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _free_fptr
// pdpc201/btshx_supa.c:1206   
  MOV          tk_realloc, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _realloc_fptr
// pdpc201/btshx_supa.c:1207   
  MOV          tk_msize, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _msize_fptr
// pdpc201/btshx_supa.c:1224   
  MOV          tk_mgetbase, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _mgetbase_fptr
// pdpc201/btshx_supa.c:1225   
  MOV          tk_mfreezone, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _mfreezone_fptr
// pdpc201/btshx_supa.c:1227   
  MOV          tk_mgettag, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _mgettag_fptr
// pdpc201/btshx_supa.c:1228   
  MOV          tk_msettag, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _msettag_fptr
// pdpc201/btshx_supa.c:1229   
  MOV          tk_mgetzone, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _mgetzone_fptr
// pdpc201/btshx_supa.c:1230   
  MOV          tk_msetzone, RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, _msetzone_fptr
// pdpc201/btshx_supa.c:1247   
  ADD          R0, 0, RD10

.L00C02BC4:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

P_DeathThink:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// p_user.c:189   P_MovePsprites (player);
  ADD          RQ18, 0, RQ10
  BSR          P_MovePsprites, R1
// p_user.c:192   if (player->viewheight > 6*FRACUNIT)
  MOV.L        (RQ18, 24), RQ8
  LUI          96, RD27
  BRLE.L       RD27, RQ8, .L0080238B
// p_user.c:193   player->viewheight -= FRACUNIT;
  MOV.L        (RQ18, 24), RQ8
  ADDS.L       RQ8, 0xFFFFFFFFFFFF0000, RQ21
  MOV.L        RQ21, (RQ18, 24)

.L0080238B:
// p_user.c:195   if (player->viewheight < 6*FRACUNIT)
  MOV.L        (RQ18, 24), RQ8
  LUI          96, RD27
  BRGE.L       RD27, RQ8, .L0080238C
// p_user.c:196   player->viewheight = 6*FRACUNIT;
  LUI          96, RD27
  MOV.L        RD27, (RQ18, 24)

.L0080238C:
// p_user.c:198   player->deltaviewheight = 0;
  MOV.L        RD0, (RQ18, 28)
// p_user.c:199   onground = (player->mo->z <= player->mo->floorz);
  MOV.Q        (RQ18, 0), RQ9
  MOV.L        (RQ9, 32), RQ8
  MOV.L        (RQ9, 96), RQ21
  CMPGE.Q      RQ21, RQ8, RD27
  MOV.L        RD27, onground
// p_user.c:200   P_CalcHeight (player);
  ADD          RQ18, 0, RQ10
  BSR          P_CalcHeight, R1
// p_user.c:202   if (player->attacker && player->attacker != player->mo)
  MOV.Q        (RQ18, 240), RQ9
  BREQ.Q       R0, RQ9, .L0080238D
  MOV.Q        (RQ18, 240), RQ9
  MOV.Q        (RQ18, 0), RQ27
  BREQ.Q       RQ27, RQ9, .L0080238D

.L0080238E:
// p_user.c:203   {
  MOV.Q        (RQ18, 240), RQ9
  MOV.L        (RQ9, 28), RQ8
  MOV.L        (RQ9, 24), RQ21
  MOV.Q        (RQ18, 0), RQ9
  MOV.L        (RQ9, 28), RQ23
  MOV.L        (RQ9, 24), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RD11
  ADD          RQ21, 0, RD12
  ADDS.L       RQ8, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD20
// p_user.c:209   delta = angle - player->mo->angle;
  MOV.Q        (RQ18, 0), RQ9
  MOVU.L       (RQ9, 56), RQ23
  SUBU.L       RD20, RQ23, RD27
  ADD          R0, 0x038E38E3, RQ8
  CMPGT.Q      RQ8, RD27, RQ22
  ADD          R0, 0x00000000FC71C71D, RQ23
  CMPGT.Q      RD27, RQ23, RQ21
  MOV.L        RD27, (R2, 132)
  OR           RQ22, RQ21, RQ8
  BREQ.L       R0, RQ8, .L00802390
// p_user.c:215   player->mo->angle = angle;
  MOV.Q        (RQ18, 0), RQ9
  MOVU.L       RD20, (RQ9, 56)
  MOV.L        (RQ18, 232), RQ23
  BREQ.L       R0, RQ23, .L00802391
// p_user.c:218   player->damagecount--;
  MOV.L        (RQ18, 232), RQ22
  ADDS.L       RQ22, -1, RQ8
  MOV.L        RQ8, (RQ18, 232)

.L00802391:
  BSR          .L00802392, R0

.L00802390:
  MOVU.L       (R2, 132), RD27
  ADD          R0, 0x0000000080000000, RD13
  BRGEU.L      RD13, RD27, .L00802393
// p_user.c:221   player->mo->angle += ANG5;
  MOV.Q        (RQ18, 0), RQ9
  MOVU.L       (RQ9, 56), RQ23
  ADD          R0, 0x038E38E3, R5
  ADDU.L       R5, RQ23, RQ22
  MOVU.L       RQ22, (RQ9, 56)
  BSR          .L00802394, R0

.L00802393:
// p_user.c:223   player->mo->angle -= ANG5;
  MOV.Q        (RQ18, 0), RQ9
  MOVU.L       (RQ9, 56), RQ23
  ADD          R0, 0xFFFFFFFFFC71C71D, R5
  ADDU.L       R5, RQ23, RQ22
  MOVU.L       RQ22, (RQ9, 56)

.L00802394:

.L00802392:
  BSR          .L00802395, R0

.L0080238D:
  MOV.L        (RQ18, 232), RQ8
  BREQ.L       R0, RQ8, .L00802396
// p_user.c:226   player->damagecount--;
  MOV.L        (RQ18, 232), RQ21
  ADDS.L       RQ21, -1, RQ23
  MOV.L        RQ23, (RQ18, 232)

.L00802396:

.L00802395:
// p_user.c:229   if (player->cmd.buttons & BT_USE)
  ADD          RQ18, 12, RQ27
  MOVU.B       (RQ27, 7), RQ8
  ADD          R0, 2, RD13
  BTST.L       RD13, RQ8, .L00802397
// p_user.c:230   player->playerstate = PST_REBORN;
  ADD          R0, 2, RD27
  MOV.L        RD27, (RQ18, 8)

.L00802397:

.L00C02BCA:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

W_ReadLump:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 156)
  MOV.Q        RQ11, (R2, 144)
// w_wad.c:1833   if (lump < 0)
  MOV.L        (R2, 156), RD27
  BRGE.L       R0, RD27, .L00802951
// w_wad.c:1834   I_Error ("W_ReadLump: %i < 0",lump);
  MOV          .L00C02BD1, RQ10
  MOV.L        (R2, 156), RD11
  BSR          I_Error, R1

.L00802951:
// w_wad.c:1836   if (lump >= numlumps)
  MOV.L        (R2, 156), RD27
  MOV.L        numlumps, RD26
  BRLT.L       RD26, RD27, .L00802952
// w_wad.c:1837   I_Error ("W_ReadLump: %i >= numlumps (%i)", lump, numlumps);
  MOV          .L00C02BD2, RQ10
  MOV.L        (R2, 156), RD11
  MOV.L        numlumps, RD12
  BSR          I_Error, R1

.L00802952:
// w_wad.c:1839   l = lumpinfo+lump;
  MOV.Q        lumpinfo, RQ27
  MOV.L        (R2, 156), RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// w_wad.c:1843   if (l->handle == -1)
  MOV.L        (RQ23, 16), RQ20
  BRNE.Q       -1, RQ20, .L00802953
  MOV.Q        reloadname, RQ10
  MOV          .L00C01607, RQ11
  BSR          w_open, R1
  ADD          RQ10, 0, RQ20
  MOV.L        RD20, (R2, 120)
  BRNE.Q       -1, RQ20, .L00802954
// w_wad.c:1848   I_Error ("W_ReadLump: couldn't open %s",reloadname);
  MOV          .L00C02BD3, RQ10
  MOV.Q        reloadname, RQ11
  BSR          I_Error, R1

.L00802954:
  BSR          .L00802955, R0

.L00802953:
// w_wad.c:1851   handle = l->handle;
  MOV.L        (RQ23, 16), RD27
  MOV.L        RD27, (R2, 120)

.L00802955:
// w_wad.c:1853   if(l->cmp)
  MOV.B        (RQ23, 37), RQ20
  BREQ.L       R0, RQ20, .L00802956
  MOV.B        (RQ23, 37), RQ20
  BRNE.Q       2, RQ20, .L00802957
// w_wad.c:1856   {
  MOV.L        (RQ23, 20), RD27
// w_wad.c:1858   ofs1 = (ofs>>16)&65535;
  SHAR         RD27, 16, RQ20
  MOV.L        RD20, (R2, 128)
  MOV.L        (R2, 128), RD26
  AND          RD26, 0x0000FFFF, RD26
  MOV.L        RD26, (R2, 128)
// w_wad.c:1859   ofs2 = (ofs&65535)*64;
  AND          RD27, 0x0000FFFF, RQ20
  MOV.L        RD27, (R2, 132)
  SHAD.L       RQ20, 6, RD25
  MOV.L        RD25, (R2, 124)
// w_wad.c:1860   ct = W_CacheLumpNum(ofs1, PU_CACHE);
  ADD          RD26, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ24
  MOV.Q        RQ24, (R2, 136)
  BREQ.Q       R0, RQ24, .L00C02BD0
// w_wad.c:1865   memcpy(dest, ct+ofs2, l->size);
  MOV.L        (RQ23, 24), RQ20
  MOV.Q        (R2, 136), RQ27
  MOV.L        (R2, 124), RD26
  ADD          RQ27, RD26, RQ25
  ADDS.L       RQ20, 0, RQ24
  MOV.Q        (R2, 144), RQ10
  ADD          RQ25, 0, RQ11
  ADD          RQ24, 0, RQ12
  BSR          memcpy, R1
// w_wad.c:1866   return;
  BSR          .L00C02BD0, R0

.L00802957:
// w_wad.c:1869   c = l->size + 256;
  MOV.L        (RQ23, 24), RQ8
  ADDS.L       RQ8, 256, RD21
  MOV.Q        W_ReadLump/tdbuf!126, RQ27
  CMPEQ.Q      RQ27, R0, RQ8
  MOV.L        W_ReadLump/tdsize!126, RD27
  CMPGT.Q      RD21, RD27, RQ9
  OR           RQ8, RQ9, RQ22
  BREQ.L       R0, RQ22, .L00802958
  MOV.Q        W_ReadLump/tdbuf!126, RQ27
  BREQ.Q       R0, RQ27, .L00802959
// w_wad.c:1873   {
  MOV.L        W_ReadLump/tdsize!126, RD18
// w_wad.c:1875   while(c > csz)
  BSR          .L0080295C, R0

.L0080295A:
// w_wad.c:1876   csz=csz+(csz>>1);
  SHAR         RD18, 1, RQ8
  ADDS.L       RD18, RQ8, RD18

.L0080295C:
  BRGT.L       RD18, RD21, .L0080295A

.L0080295B:
// w_wad.c:1877   tdbuf=realloc(tdbuf, csz);
  ADDS.L       RD18, 0, RQ27
  MOV.Q        W_ReadLump/tdbuf!126, RQ10
  ADD          RQ27, 0, RQ11
  BSR          realloc, R1
  MOV.Q        RQ10, W_ReadLump/tdbuf!126
// w_wad.c:1878   tdsize=csz;
  MOV.L        RD18, W_ReadLump/tdsize!126
  BSR          .L0080295D, R0

.L00802959:
// w_wad.c:1880   {
  LUI          32, RD18
// w_wad.c:1882   while(c > csz)
  BSR          .L00802960, R0

.L0080295E:
// w_wad.c:1883   csz=csz+(csz>>1);
  SHAR         RD18, 1, RQ8
  ADDS.L       RD18, RQ8, RD18

.L00802960:
  BRGT.L       RD18, RD21, .L0080295E

.L0080295F:
// w_wad.c:1884   tdbuf=malloc(csz);
  ADDS.L       RD18, 0, RQ27
  ADD          RQ27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, W_ReadLump/tdbuf!126
// w_wad.c:1885   tdsize=csz;
  MOV.L        RD18, W_ReadLump/tdsize!126

.L0080295D:

.L00802958:
  MOV.Q        W_ReadLump/tcbuf!126, RQ27
  BREQ.Q       R0, RQ27, .L00802962
  MOV.L        (RQ23, 32), RQ8
  MOV.L        W_ReadLump/tcsize!126, RD27
  BRGT.L       RD27, RQ8, .L00802962
  BSR          .L00802961, R0

.L00802962:
  MOV.Q        W_ReadLump/tcbuf!126, RQ27
  BREQ.Q       R0, RQ27, .L00802964
// w_wad.c:1895   csz=tcsize;
  MOV.L        W_ReadLump/tcsize!126, RD18
// w_wad.c:1896   while(l->csize>csz)
  BSR          .L00802967, R0

.L00802965:
// w_wad.c:1897   csz=csz+(csz>>1);
  SHAR         RD18, 1, RQ9
  ADDS.L       RD18, RQ9, RD18

.L00802967:
  MOV.L        (RQ23, 32), RQ22
  BRGT.L       RD18, RQ22, .L00802965

.L00802966:
// w_wad.c:1898   tcbuf=realloc(tcbuf, csz);
  ADDS.L       RD18, 0, RQ27
  MOV.Q        W_ReadLump/tcbuf!126, RQ10
  ADD          RQ27, 0, RQ11
  BSR          realloc, R1
  MOV.Q        RQ10, W_ReadLump/tcbuf!126
// w_wad.c:1899   tcsize=csz;
  MOV.L        RD18, W_ReadLump/tcsize!126
  BSR          .L00802968, R0

.L00802964:
// w_wad.c:1901   {
  LUI          32, RD18
// w_wad.c:1903   while(l->csize>csz)
  BSR          .L0080296B, R0

.L00802969:
// w_wad.c:1904   csz=csz+(csz>>1);
  SHAR         RD18, 1, RQ8
  ADDS.L       RD18, RQ8, RD18

.L0080296B:
  MOV.L        (RQ23, 32), RQ9
  BRGT.L       RD18, RQ9, .L00802969

.L0080296A:
// w_wad.c:1905   tcbuf=malloc(csz);
  ADDS.L       RD18, 0, RQ27
  ADD          RQ27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, W_ReadLump/tcbuf!126
// w_wad.c:1906   tcsize=csz;
  MOV.L        RD18, W_ReadLump/tcsize!126

.L00802968:

.L00802961:
// w_wad.c:1910   w_lseek (l->handle, l->position, SEEK_SET);
  MOV.L        (RQ23, 20), RQ8
  MOV.L        (RQ23, 16), RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 0, RD12
  BSR          w_lseek, R1
// w_wad.c:1911   c = w_read (l->handle, tcbuf, l->csize);
  MOV.L        (RQ23, 32), RQ22
  MOV.L        (RQ23, 16), RQ8
  ADDS.L       RQ8, 0, RD10
  MOV.Q        W_ReadLump/tcbuf!126, RQ11
  ADD          RQ22, 0, RD12
  BSR          w_read, R1
  ADD          RQ10, 0, RD21
  MOV.L        (RQ23, 32), RQ9
  BRGE.L       RQ9, RD21, .L0080296C
// w_wad.c:1913   I_Error ("W_ReadLump: only read %i of %i on lump %i",
  MOV.L        (RQ23, 32), RQ22
  MOV          .L00C02BD4, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ22, 0, RD12
  MOV.L        (R2, 156), RD13
  BSR          I_Error, R1

.L0080296C:
  MOV.B        (RQ23, 37), RQ8
  BRNE.Q       3, RQ8, .L0080296D
// w_wad.c:1918   W_DecodeBufferRP2(tcbuf, tdbuf, l->csize, l->size);
  MOV.L        (RQ23, 24), RQ9
  MOV.L        (RQ23, 32), RQ22
  MOV.Q        W_ReadLump/tcbuf!126, RQ10
  MOV.Q        W_ReadLump/tdbuf!126, RQ11
  ADD          RQ22, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          W_DecodeBufferRP2, R1
// w_wad.c:1919   memcpy(dest, tdbuf, l->size);
  MOV.L        (RQ23, 24), RQ8
  ADDS.L       RQ8, 0, RQ27
  MOV.Q        (R2, 144), RQ10
  MOV.Q        W_ReadLump/tdbuf!126, RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1
  BSR          .L0080296E, R0

.L0080296D:
  MOV.B        (RQ23, 37), RQ9
  BRNE.Q       4, RQ9, .L0080296F
// w_wad.c:1924   W_DecodeBufferLZ4(tcbuf, tdbuf, l->csize, l->size);
  MOV.L        (RQ23, 24), RQ22
  MOV.L        (RQ23, 32), RQ9
  MOV.Q        W_ReadLump/tcbuf!126, RQ10
  MOV.Q        W_ReadLump/tdbuf!126, RQ11
  ADDS.L       RQ9, 0, RD12
  ADD          RQ22, 0, RD13
  BSR          W_DecodeBufferLZ4, R1
// w_wad.c:1925   memcpy(dest, tdbuf, l->size);
  MOV.L        (RQ23, 24), RQ22
  ADDS.L       RQ22, 0, RQ27
  MOV.Q        (R2, 144), RQ10
  MOV.Q        W_ReadLump/tdbuf!126, RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1

.L0080296F:

.L0080296E:
// w_wad.c:1928   return;
  BSR          .L00C02BD0, R0

.L00802956:
// w_wad.c:1931   w_lseek (handle, l->position, SEEK_SET);
  MOV.L        (RQ23, 20), RQ9
  MOV.L        (R2, 120), RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  BSR          w_lseek, R1
// w_wad.c:1935   c = w_read (handle, dest, l->size);
  MOV.L        (RQ23, 24), RQ9
  MOV.L        (R2, 120), RD10
  MOV.Q        (R2, 144), RQ11
  ADDS.L       RQ9, 0, RD12
  BSR          w_read, R1
  ADD          RQ10, 0, RD21
// w_wad.c:1937   if (c != l->size)
  MOV.L        (RQ23, 24), RQ9
  BREQ.Q       RQ9, RD21, .L00802970
// w_wad.c:1938   I_Error ("W_ReadLump: only read %i of %i on lump %i",
  MOV.L        (RQ23, 24), RQ9
  MOV          .L00C02BD4, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RQ9, 0, RD12
  MOV.L        (R2, 156), RD13
  BSR          I_Error, R1

.L00802970:
// w_wad.c:1963   if (l->handle == -1)
  MOV.L        (RQ23, 16), RQ9
  BRNE.Q       -1, RQ9, .L00802971
// w_wad.c:1964   w_close (handle);
  MOV.L        (R2, 120), RD10
  BSR          w_close, R1

.L00802971:

.L00C02BD0:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

TKGDI_GetCurrentGdiContext:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -328, R2
// tk_core/tk_env.c:412   
  BSR          _arch_gettbr, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ23
// tk_core/tk_env.c:413   
  BRNE.Q       R0, RQ23, .L00800D14
// tk_core/tk_env.c:414   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02BDA, R0

.L00800D14:
// tk_core/tk_env.c:416   
  MOV.Q        (RQ23, 64), RQ18
  ADD          RQ18, 0, RQ8
// tk_core/tk_env.c:417   
  BRNE.Q       R0, RQ8, .L00800D15
// tk_core/tk_env.c:418   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02BDA, R0

.L00800D15:
// tk_core/tk_env.c:420   
  MOV.Q        (RQ8, 104), RQ18
  ADD          RQ18, 0, RQ9
// tk_core/tk_env.c:421   
  BREQ.Q       R0, RQ9, .L00800D16
// tk_core/tk_env.c:422   
  ADD          RQ9, 0, RQ10
  BSR          .L00C02BDA, R0

.L00800D16:
// tk_core/tk_env.c:424   
  ADD          R0, 0x20494447, RQ10
  ADD          R0, 0x20494447, RQ11
  BSR          TK_DlGetApiContextA, R1
  ADD          RQ10, 0, RQ9
// tk_core/tk_env.c:425   
  MOV.Q        RQ9, (RQ8, 104)
// tk_core/tk_env.c:426   
  ADD          RQ9, 0, RQ10

.L00C02BDA:
  ADD          R2, 328, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

fgetc:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -408, R2
  MOV.Q        RQ10, (R2, 88)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// pdpc201/stdio.c:2554   
// pdpc201/stdio.c:2558   
  ADD          R2, 96, RQ10
  ADD          R0, 1, RQ11
  ADD          R0, 1, RQ12
  MOV.Q        (R2, 88), RQ13
  BSR          fread, R1
  ADD          RQ10, 0, RQ18
// pdpc201/stdio.c:2559   
  BRNE.Q       R0, RQ18, .L008004AC
// pdpc201/stdio.c:2560   
  ADD          R0, -1, RD10
  BSR          .L00C02BE0, R0

.L008004AC:
// pdpc201/stdio.c:2562   
  ADD          R2, 96, RQ13
  MOVU.B       (RQ13, 0), RQ9
  ADDS.L       RQ9, 0, RD10

.L00C02BE0:
  ADD          R2, 408, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

_stricmp_u8:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ23
  ADD          RQ11, 0, RQ22
// pdpc201/string.c:1740   
  ADD          RQ23, 0, RQ18
// pdpc201/string.c:1741   
  ADD          RQ22, 0, RQ9
// pdpc201/string.c:1743   
  MOVU.B       (RQ18, 0), RD21
  MOV.L        RD21, (R2, 76)
// pdpc201/string.c:1744   
  MOVU.B       (RQ9, 0), RD21
  MOV.L        RD21, (R2, 72)
// pdpc201/string.c:1745   
  BSR          .L008006A9, R0

.L008006AA:
// pdpc201/string.c:1757   
  ADD          R2, 76, RQ8
  ADD          RQ18, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          _string_readchar_u8, R1
  ADD          RQ10, 0, RQ18
// pdpc201/string.c:1758   
  ADD          R2, 72, RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          _string_readchar_u8, R1
  ADD          RQ10, 0, RQ9
// pdpc201/string.c:1761   
  MOV.L        (R2, 76), RD10
  BSR          tolower, R1
  MOV.L        RD10, (R2, 76)
// pdpc201/string.c:1762   
  MOV.L        (R2, 72), RD10
  BSR          tolower, R1
  ADD          RQ10, 0, RD21
  MOV.L        RD21, (R2, 72)
// pdpc201/string.c:1763   
  MOV.L        (R2, 76), RD20
  BRGE.L       RD21, RD20, .L008006AB
// pdpc201/string.c:1764   
  ADD          R0, -1, RD10
  BSR          .L00C02BE6, R0
  BSR          .L008006AC, R0

.L008006AB:
  MOV.L        (R2, 76), RD21
  MOV.L        (R2, 72), RD20
  BRLE.L       RD20, RD21, .L008006AD
// pdpc201/string.c:1766   
  ADD          R0, 1, RD10
  BSR          .L00C02BE6, R0

.L008006AD:

.L008006AC:
// pdpc201/string.c:1767   
  MOVU.B       (RQ18, 0), RD21
  MOV.L        RD21, (R2, 76)
// pdpc201/string.c:1768   
  MOVU.B       (RQ9, 0), RD21
  MOV.L        RD21, (R2, 72)

.L008006A9:
  MOV.L        (R2, 76), RD21
  BRNE.L       R0, RD21, .L008006AA

.L008006AE:
// pdpc201/string.c:1771   
  MOV.L        (R2, 72), RD21
  BREQ.L       R0, RD21, .L00C00D8F
// pdpc201/string.c:1773   
  ADD          R0, -1, RD10
  BSR          .L00C02BE6, R0

.L00C00D8F:
  ADD          R0, 0, RQ10

.L00C02BE6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

F_CastPrint:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  MOV.Q        RQ10, (R2, 104)
// f_finale.c:557   ch = text;
  MOV.Q        (R2, 104), RQ20
// f_finale.c:558   width = 0;
  ADD          R0, 0, RD21
// f_finale.c:560   while (ch)
  BSR          .L00801310, R0

.L0080130E:
// f_finale.c:561   {
  MOV.B        (RQ20, 0), RD18
  ADD          RQ20, 1, RQ20
// f_finale.c:563   if (!c)
  BREQ.L       R0, RD18, .L0080130F
// f_finale.c:565   c = toupper(c) - HU_FONTSTART;
  ADD          RD18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, -33, RD18
// f_finale.c:566   if (c < 0 || c> HU_FONTSIZE)
  CMPLT.Q      RD18, R0, RQ9
  ADD          R0, 63, R5
  CMPGT.Q      RD18, R5, RQ8
  OR           RQ9, RQ8, RQ27
  BREQ.L       R0, RQ27, .L00801311
// f_finale.c:567   {
  ADDS.L       RD21, 4, RD21
// f_finale.c:569   continue;
  BSR          .L00801310, R0

.L00801311:
// f_finale.c:572   w = SHORT (hu_font[c]->width);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD18), RQ23
  MOV.W        (RQ23, 0), RD27
// f_finale.c:573   width += w;
  ADDS.L       RD21, RD27, RD21
  MOV.L        RD27, (R2, 100)

.L00801310:
  BRNE.Q       R0, RQ20, .L0080130E

.L0080130F:
// f_finale.c:577   cx = 160-width/2;
  ADD          RD21, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  ADD          R0, 160, R5
  SUBS.L       R5, RQ9, RD22
// f_finale.c:578   ch = text;
  MOV.Q        (R2, 104), RQ20
// f_finale.c:579   while (ch)
  BSR          .L00801314, R0

.L00801312:
// f_finale.c:580   {
  MOV.B        (RQ20, 0), RD18
  ADD          RQ20, 1, RQ20
// f_finale.c:582   if (!c)
  BREQ.L       R0, RD18, .L00801313
// f_finale.c:584   c = toupper(c) - HU_FONTSTART;
  ADD          RD18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, -33, RD18
// f_finale.c:585   if (c < 0 || c> HU_FONTSIZE)
  CMPLT.Q      RD18, R0, RQ27
  ADD          R0, 63, R5
  CMPGT.Q      RD18, R5, RQ9
  OR           RQ27, RQ9, RQ8
  BREQ.L       R0, RQ8, .L00801315
// f_finale.c:586   {
  ADDS.L       RD22, 4, RD22
// f_finale.c:588   continue;
  BSR          .L00801314, R0

.L00801315:
// f_finale.c:591   w = SHORT (hu_font[c]->width);
  MOV          hu_font, RQ27
  MOV.Q        (RQ27, RD18), RQ23
  MOV.W        (RQ23, 0), RD26
  MOV.L        RD26, (R2, 100)
// f_finale.c:592   V_DrawPatch(cx, 180, 0, hu_font[c]);
  MOV.Q        (RQ27, RD18), RQ23
  ADD          RD22, 0, RD10
  ADD          R0, 180, RD11
  ADD          R0, 0, RD12
  ADD          RQ23, 0, RQ13
  BSR          V_DrawPatch, R1
// f_finale.c:593   cx+=w;
  ADDS.L       RD22, RD26, RD22

.L00801314:
  BRNE.Q       R0, RQ20, .L00801312

.L00801313:

.L00C02BEC:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

P_AcsRun_EndPrintBold:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// p_acspec.c:1074   {
  ADD          RQ18, 1072, RQ11
  MOV          .L00C02BF3, RQ10
  BSR          printf, R1
// p_acspec.c:1076   run->prnpos=0;
  MOVU.B       RD0, (RQ18, 1328)

.L00C02BF2:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

__start_late:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// pdpc201/btshx_supa.c:1253   
  BSR          __start_init, R1
// pdpc201/btshx_supa.c:1254   
  ADD          R0, 0, RD10

.L00C02BF9:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0

TKMM_MSyncV:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -464, R2
  MOV.Q        RQ10, (R2, 120)
  MOV.Q        RQ11, (R2, 112)
  MOV.L        RD12, (R2, 108)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_core/tk_mmap.c:326   
// tk_core/tk_mmap.c:329   
  ADD          R0, 0, RQ8
  MOV.Q        RQ8, (R2, 88)
// tk_core/tk_mmap.c:330   
  ADD          R2, 128, RQ8
  ADD          RQ8, 0, RQ23
  MOV.Q        (R2, 120), RQ22
  MOV.Q        RQ22, (RQ23, 0)
// tk_core/tk_mmap.c:331   
  ADD          RQ8, 8, RQ23
  MOV.Q        (R2, 112), RQ21
  MOV.Q        RQ21, (RQ23, 0)
// tk_core/tk_mmap.c:332   
  ADD          RQ8, 16, RQ23
  MOV.L        (R2, 108), RD20
  MOV.L        RD20, (RQ23, 0)
// tk_core/tk_mmap.c:333   
  ADD          R2, 88, RQ18
  ADD          RQ0, 0, RQ10
  LDIZ         4115, RD11
  ADD          RQ18, 0, RQ12
  ADD          RQ8, 0, RQ13
  BSR          tk_syscall, R1
// tk_core/tk_mmap.c:334   
  MOV.Q        (R2, 88), RQ13
  ADDS.L       RQ13, 0, RQ9
  ADDS.L       RQ9, 0, RD10

.L00C02BFF:
  ADD          R2, 464, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

R_GenerateLookupLazy:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD8
// r_data.c:559   {
  MOV.Q        textures, RQ22
  MOV.Q        (RQ22, RD8), RQ18
  MOV.L        (RQ18, 12), RQ9
  ADD          R0, 0x00123456, RD22
  BREQ.Q       RD22, RQ9, .L00802446
// r_data.c:561   { __debugbreak(); }

R_GenerateLookupLazy.debugbreak_L052D:
  BRK          1325

.L00802446:
// r_data.c:563   texturecolumnlump[tex] = Z_Malloc (
  MOV.Q        textures, RQ22
  MOV.Q        (RQ22, RD8), RQ18
  MOV.W        (RQ18, 16), RQ9
  SHAD.L       RQ9, 2, RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        texturecolumnlump, RQ22
  MOV.Q        RQ18, (RQ22, RD8)
// r_data.c:565   texturecolumnofs[tex] = Z_Malloc (
  MOV.Q        textures, RQ22
  MOV.Q        (RQ22, RD8), RQ18
  MOV.W        (RQ18, 16), RQ9
  SHAD.L       RQ9, 2, RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        texturecolumnofs, RQ22
  MOV.Q        RQ18, (RQ22, RD8)
// r_data.c:568   if(textures[tex]->magic1 != 0x123456)
  MOV.Q        textures, RQ22
  MOV.Q        (RQ22, RD8), RQ18
  MOV.L        (RQ18, 12), RQ9
  ADD          R0, 0x00123456, RD22
  BREQ.Q       RD22, RQ9, .L00802447
// r_data.c:569   { __debugbreak(); }

R_GenerateLookupLazy.debugbreak_L052E:
  BRK          1326

.L00802447:
// r_data.c:571   R_GenerateLookup(tex);
  ADDS.L       RD8, 0, RD10
  BSR          R_GenerateLookup, R1
// r_data.c:573   if(textures[tex]->magic1 != 0x123456)
  MOV.Q        textures, RQ22
  MOV.Q        (RQ22, RD8), RQ18
  MOV.L        (RQ18, 12), RQ9
  ADD          R0, 0x00123456, RD22
  BREQ.Q       RD22, RQ9, .L00802448
// r_data.c:574   { __debugbreak(); }

R_GenerateLookupLazy.debugbreak_L052F:
  BRK          1327

.L00802448:

.L00C02C14:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

M_DrawLoad:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// m_menu.c:555   V_DrawPatchDirectName (72,28,0,"M_LOADG");
  ADD          R0, 72, RD10
  ADD          R0, 28, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02C1E, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:556   for (i = 0;i < load_end; i++)
  ADD          R0, 0, RD9

.L00801632:
// m_menu.c:557   {
  MOV          LoadDef, RQ22
  MOV.W        (RQ22, 34), RQ18
  SHAD.L       RD9, 4, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.W        (RQ22, 32), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          M_DrawSaveLoadBorder, R1
// m_menu.c:559   M_WriteText(LoadDef.x,LoadDef.y+LINEHEIGHT*i,savegamestrings[i]);
  MOV          savegamestrings, RQ22
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ22, RQ12, RQ12
  MOV          LoadDef, RQ22
  MOV.W        (RQ22, 34), RQ18
  SHAD.L       RD9, 4, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.W        (RQ22, 32), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          M_WriteText, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       6, RD9, .L00801632

.L00801634:

.L00C02C1D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ThingIsPolyObjP:
// r_polyobj.c:198   {
  MOV.L        (RQ10, 128), RQ13
  BRLT.L       138, RQ13, .L00802704
  MOV.L        (RQ10, 128), RQ13
  BRGT.L       140, RQ13, .L00802704

.L00802705:
// r_polyobj.c:201   return(true);
  ADD          R0, 1, RD10
  JSR          R1, 0, R0

.L00802704:
// r_polyobj.c:203   return(false);
  ADD          R0, 0, RD10

.L00C02C1F:
  JSR          R1, 0, R0
  .balign 4

tk_hwrite:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 116)
  MOV.Q        RQ12, (R2, 104)
  MOV.L        RD13, (R2, 100)
// tk_core/tk_vfile.c:1311   
// tk_core/tk_vfile.c:1316   
  ADD          R2, 88, RQ9
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TK_InitUserInfoForTask, R1
// tk_core/tk_vfile.c:1318   
  ADD          RQ8, 0, RQ10
  MOV.L        (R2, 116), RD11
  BSR          TK_GetPtrForHandle, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_vfile.c:1319   
  BRNE.Q       R0, RQ18, .L00800BA4
// tk_core/tk_vfile.c:1320   
  ADD          R0, -1, RD10
  BSR          .L00C02C25, R0

.L00800BA4:
// tk_core/tk_vfile.c:1326   
  MOV.Q        (R2, 104), RQ10
  ADD          R0, 1, RD11
  MOV.L        (R2, 100), RD12
  ADD          RQ18, 0, RQ13
  BSR          tk_fwrite, R1

.L00C02C25:
  ADD          R2, 384, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

M_QuickLoad:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -344, R2
// m_menu.c:742   {
  MOV.L        netgame, RD9
  BREQ.L       R0, RD9, .L00801646
// m_menu.c:744   {
  MOV          .L00C02C2C, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:746   return;
  BSR          .L00C02C2B, R0

.L00801646:
// m_menu.c:749   if (quickSaveSlot < 0)
  MOV.L        quickSaveSlot, RD9
  BRGE.L       R0, RD9, .L00801647
// m_menu.c:750   {
  MOV          .L00C02C2D, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          M_StartMessage, R1
// m_menu.c:752   return;
  BSR          .L00C02C2B, R0

.L00801647:
// m_menu.c:753   }
  MOV          savegamestrings, RQ9
  MOV.L        quickSaveSlot, RD8
  ADD          R0, 24, R5
  MUL.L        RD8, R5, RQ12
  ADD          RQ9, RQ12, RQ12
  MOV          tempstring, RQ10
  MOV          .L00C02C2E, RQ11
  BSR          sprintf, R1
// m_menu.c:755   M_StartMessage(tempstring,M_QuickLoadResponse,true);
  MOV          M_QuickLoadResponse, RQ11
  MOV          tempstring, RQ10
  ADD          R0, 1, RD12
  BSR          M_StartMessage, R1

.L00C02C2B:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

SMus_NoteOn:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADDS.L       RD10, 0, RD9
  MOV.L        RD11, (R2, 120)
  MOV.L        RD12, (R2, 116)
// i_bgb_mus_btsh.c:639   {
// i_bgb_mus_btsh.c:643   if((ch==8) || (ch==9))
  ADD          R0, 8, R5
  CMPEQ.Q      RD9, R5, RQ8
  ADD          R0, 9, R5
  CMPEQ.Q      RD9, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00801265
// i_bgb_mus_btsh.c:644   ch^=1;
  XOR          RD9, 1, RD9

.L00801265:
// i_bgb_mus_btsh.c:646   mcmd=&t_mcmd;
  ADD          R2, 96, RQ21
  ADD          RQ21, 0, RQ18
// i_bgb_mus_btsh.c:647   mcmd->op=1;
  ADD          R0, 1, RD20
  MOVU.B       RD20, (RQ18, 0)
// i_bgb_mus_btsh.c:648   mcmd->ch=ch;
  MOVU.B       RD9, (RQ18, 1)
// i_bgb_mus_btsh.c:649   mcmd->d0=d0;
  MOV.L        (R2, 120), RD27
  MOVU.B       RD27, (RQ18, 2)
// i_bgb_mus_btsh.c:650   mcmd->d1=d1;
  MOV.L        (R2, 116), RD26
  MOVU.B       RD26, (RQ18, 3)
// i_bgb_mus_btsh.c:653   tkgDeviceMidiCommand(hSndDev, mcmd);
  MOV.L        hSndDev, RD10
  ADD          RQ18, 0, RQ11
  BSR          tkgDeviceMidiCommand, R1
// i_bgb_mus_btsh.c:654   return(0);
  ADD          R0, 0, RD10

.L00C02C34:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

I_StartSound:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R21, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R22, (R2, 32)
  ADD          R2, -336, R2
  ADD          RD10, 0, RD18
  MOV.L        RD11, (R2, 88)
  MOV.L        RD12, (R2, 84)
  MOV.L        RD13, (R2, 80)
  ADDS.L       RD14, 0, RD8
// i_sound_btsh.c:567   priority = 0;
  ADD          RD0, 0, RD8
// i_sound_btsh.c:570   id = addsfx( id, vol, steptable[pitch], sep );
  MOV          steptable, RQ22
  MOV.L        (R2, 80), RD21
  MOV.L        (RQ22, RD21), RQ9
  ADD          RD18, 0, RD10
  MOV.L        (R2, 88), RD11
  ADDS.L       RQ9, 0, RD12
  MOV.L        (R2, 84), RD13
  BSR          addsfx, R1
// i_sound_btsh.c:574   return id;

.L00C02C3A:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.Q        (R2, 32), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

TK_Env_GetCwdQualifyName:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -928, R2
  ADD          RQ10, 0, RQ8
  MOV.L        RD11, (R2, 100)
  ADD          RQ12, 0, RQ18
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 384, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/tk_env.c:162   
// tk_core/tk_env.c:164   
// tk_core/tk_env.c:166   
  MOV.B        (RQ18, 0), RQ9
  BRNE.Q       47, RQ9, .L00800CEE
// tk_core/tk_env.c:169   

TK_Env_GetCwdQualifyName.debugbreak_L0535:
  BRK          1333
// tk_core/tk_env.c:173   
  ADD          RQ8, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          strcpy, R1
// tk_core/tk_env.c:174   
  ADD          R0, 1, RD10
  BSR          .L00C02C45, R0

.L00800CEE:
// tk_core/tk_env.c:177   
  ADD          R2, 112, RQ10
  ADD          R0, 256, RD11
  BSR          TK_Env_GetCwd, R1
// tk_core/tk_env.c:183   
  ADD          R2, 384, RQ10
  ADD          R2, 112, RQ11
  BSR          strcpy, R1
// tk_core/tk_env.c:184   
  ADD          R2, 384, RQ10
  MOV          .L00C02C47, RQ11
  BSR          strcat, R1
// tk_core/tk_env.c:185   
  ADD          R2, 384, RQ10
  ADD          RQ18, 0, RQ11
  BSR          strcat, R1
// tk_core/tk_env.c:187   
  ADD          RQ8, 0, RQ10
  ADD          R2, 384, RQ11
  BSR          strcpy, R1
// tk_core/tk_env.c:188   
  ADD          R0, 1, RD10

.L00C02C45:
  ADD          R2, 928, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

M_DrawOptions:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// m_menu.c:988   V_DrawPatchDirectName (108,15,0, "M_OPTTTL");
  ADD          R0, 108, RD10
  ADD          R0, 15, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02C4E, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:996   V_DrawPatchDirectName (
  MOV          detailNames, RQ23
  MOV.L        detailLevel, RD22
  ADD          R0, 9, R5
  MUL.L        RD22, R5, RQ13
  ADD          RQ23, RQ13, RQ13
  MOV          OptionsDef, RQ23
  MOV.W        (RQ23, 34), RQ18
  ADDS.L       RQ18, 32, RQ9
  MOV.W        (RQ23, 32), RQ18
  ADDS.L       RQ18, 175, RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:1000   V_DrawPatchDirectName (
  MOV          msgNames, RQ23
  MOV.L        showMessages, RD22
  ADD          R0, 9, R5
  MUL.L        RD22, R5, RQ13
  ADD          RQ23, RQ13, RQ13
  MOV          OptionsDef, RQ23
  MOV.W        (RQ23, 34), RQ18
  ADDS.L       RQ18, 16, RQ9
  MOV.W        (RQ23, 32), RQ8
  ADDS.L       RQ8, 120, RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          R0, 0, RD12
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:1004   M_DrawThermo(OptionsDef.x,OptionsDef.y+LINEHEIGHT*(mousesens+1),
  MOV          OptionsDef, RQ23
  MOV.W        (RQ23, 34), RQ9
  ADDS.L       RQ9, 96, RQ8
  MOV.W        (RQ23, 32), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 10, RD12
  MOV.L        mouseSensitivity, RD13
  BSR          M_DrawThermo, R1
// m_menu.c:1007   M_DrawThermo(OptionsDef.x,OptionsDef.y+LINEHEIGHT*(scrnsize+1),
  MOV          OptionsDef, RQ23
  MOV.W        (RQ23, 34), RQ9
  ADDS.L       RQ9, 64, RQ8
  MOV.W        (RQ23, 32), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ8, 0, RD11
  ADD          R0, 9, RD12
  MOV.L        screenSize, RD13
  BSR          M_DrawThermo, R1

.L00C02C4D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0

I_RegisterSong:
// i_bgb_mus_btsh.c:1131   if(!data)
  BREQ.Q       R0, RQ10, .L00C00DAA
// i_bgb_mus_btsh.c:1134   for(i=1; i<32; i++)
  ADD          R0, 1, RD13

.L008012A0:
// i_bgb_mus_btsh.c:1135   if(!(i_mus_song_mask&(1<<i)))
  ADD          R0, 1, RD12
  SHAD.L       RD12, RD13, RQ11
  MOV.L        i_mus_song_mask, RD17
  BTST.L       RQ11, RD17, .L008012A2
  ADDS.L       RD13, 1, RD13
  BRLT.L       32, RD13, .L008012A0

.L008012A2:
// i_bgb_mus_btsh.c:1138   i_mus_songs[i]=data;
  MOV          i_mus_songs, RQ12
  MOV.Q        RQ10, (RQ12, RD13)
// i_bgb_mus_btsh.c:1139   i_mus_song_mask|=(1<<i);
  ADD          R0, 1, RD17
  SHAD.L       RD17, RD13, RQ11
  MOV.L        i_mus_song_mask, RD16
  OR           RD16, RQ11, RD16
// i_bgb_mus_btsh.c:1141   i_mus_song_len[i]=((u16 *)data)[2];
  MOVU.W       (RQ10, 4), RQ11
  MOV          i_mus_song_len, RQ15
  MOV.L        RQ11, (RQ15, RD13)
// i_bgb_mus_btsh.c:1142   i_mus_song_ofs[i]=((u16 *)data)[3];
  MOVU.W       (RQ10, 6), RQ11
  MOV          i_mus_song_ofs, RQ14
  MOV.L        RQ11, (RQ14, RD13)
// i_bgb_mus_btsh.c:1144   return(i);
  MOV.L        RD16, i_mus_song_mask
  ADDS.L       RD13, 0, RD10
  JSR          R1, 0, R0

.L00C00DAA:
  ADD          R0, 0, RQ10

.L00C02C4F:
  JSR          R1, 0, R0

M_Sound:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 76)
// m_menu.c:830   {
  MOV          SoundDef, RQ18
  ADD          RQ18, 0, RQ10
  BSR          M_SetupNextMenu, R1

.L00C02C55:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

tkgTryMapFrameBuffer:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 124)
  MOV.Q        RQ11, (R2, 112)
// tk_gdi/tkg_display.c:231   
  BSR          tkgGetCurrentContext, R1
  ADD          RQ10, 0, RQ9
// tk_gdi/tkg_display.c:233   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ10
  MOV.Q        (R2, 112), RQ11
  BSR          TKGDI_CopyBitmapInfo, R1
// tk_gdi/tkg_display.c:235   
  ADD          R0, 0, RQ22
// tk_gdi/tkg_display.c:236   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ofmt, RQ18
  MOV.Q        RQ0, (RQ18, 0)
// tk_gdi/tkg_display.c:238   
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ21
  MOV.Q        (RQ18, 32), RQ8
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 124), RD11
  ADD          R0, 0x6670616D, RD12
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ifmt, RQ13
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ofmt, RQ14
  ADD          RQ21, 0, RQ29
  JSR          RQ8, 0, R1
  ADD          RQ10, 0, RQ23
  ADD          RQ23, 0, RD20
// tk_gdi/tkg_display.c:240   
  MOV.Q        TU1EAB6C11/tkgdi_smallbuf_ofmt, RQ18
  MOV.Q        (RQ18, 0), RQ22
// tk_gdi/tkg_display.c:242   
  BRGE.L       R0, RD20, .L00800115
// tk_gdi/tkg_display.c:243   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02C5B, R0

.L00800115:
// tk_gdi/tkg_display.c:245   
  ADD          RQ22, 0, RQ10

.L00C02C5B:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_print_decimal:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -608, R2
  MOV.L        RD10, (R2, 92)
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 80)
// tk_core/tk_puts.c:1241   
// tk_core/tk_puts.c:1246   
  MOV.L        (R2, 92), RD9
  ADD          R0, 0, RD20
// tk_core/tk_puts.c:1247   
  BRGE.L       R0, RD9, .L00800C43
// tk_core/tk_puts.c:1248   
  SUBS.L       R0, RD9, RD9
  ADD          R0, 1, RD20

.L00800C43:
// tk_core/tk_puts.c:1250   
  ADD          R2, 96, RQ13
  ADD          RQ13, 0, RQ18
  ADD          RQ13, 24, RQ21
// tk_core/tk_puts.c:1251   
  BRNE.L       R0, RD9, .L00800C44
  ADD          RQ18, 0, RQ23
  ADD          RQ18, 1, RQ18
  ADD          R0, 48, RD13
  MOV.B        RD13, (RQ23, 0)

.L00800C44:
// tk_core/tk_puts.c:1252   
  BSR          .L00800C45, R0

.L00800C46:
// tk_core/tk_puts.c:1253   
  BRLE.Q       RQ21, RQ18, .L00800C47
// tk_core/tk_puts.c:1255   

tk_print_decimal.debugbreak_L053B:
  BRK          1339

.L00800C47:
// tk_core/tk_puts.c:1257   
  ADD          RD9, 0, RD22
  ADD          R0, 10, RD13
  MODS.L       RD22, RD13, RD22
// tk_core/tk_puts.c:1262   
  ADDS.L       RD22, 48, RQ8
  ADD          RQ18, 0, RQ23
  ADD          RQ18, 1, RQ18
  MOV.B        RQ8, (RQ23, 0)
// tk_core/tk_puts.c:1263   
  DIVS.L       RD9, RD13, RD9

.L00800C45:
  BRGT.L       R0, RD9, .L00800C46

.L00800C48:
// tk_core/tk_puts.c:1264   
  BREQ.L       R0, RD20, .L00800C49
// tk_core/tk_puts.c:1265   
  ADD          RQ18, 0, RQ23
  ADD          RQ18, 1, RQ18
  ADD          R0, 45, RD13
  MOV.B        RD13, (RQ23, 0)

.L00800C49:
// tk_core/tk_puts.c:1267   
  BSR          .L00800C4A, R0

.L00800C4B:
// tk_core/tk_puts.c:1268   
  ADD          RQ18, -1, RQ18
  MOV.B        (RQ18, 0), RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          tk_putc, R1

.L00800C4A:
  ADD          R2, 96, RQ13
  BRGT.Q       RQ13, RQ18, .L00800C4B

.L00800C4C:

.L00C02C66:
  ADD          R2, 608, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

A_SkelMissile:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:1039   if (!actor->target)
  MOV.Q        (RQ18, 176), RQ22
  BREQ.Q       R0, RQ22, .L00C02C6D
// p_enemy.c:1042   A_FaceTarget (actor);
  ADD          RQ18, 0, RQ10
  BSR          A_FaceTarget, R1
// p_enemy.c:1043   actor->z += 16*FRACUNIT;	// so missile spawns higher
  MOV.L        (RQ18, 32), RQ8
  ADDS.L       RQ8, 0x00100000, RQ23
  MOV.L        RQ23, (RQ18, 32)
// p_enemy.c:1044   mo = P_SpawnMissile (actor, actor->target, MT_TRACER);
  MOV.Q        (RQ18, 176), RQ22
  ADD          RQ18, 0, RQ10
  ADD          RQ22, 0, RQ11
  ADD          R0, 6, RD12
  BSR          P_SpawnMissile, R1
  ADD          RQ10, 0, RQ9
// p_enemy.c:1045   actor->z -= 16*FRACUNIT;	// back to normal
  MOV.L        (RQ18, 32), RQ8
  ADDS.L       RQ8, 0xFFFFFFFFFFF00000, RQ23
  MOV.L        RQ23, (RQ18, 32)
// p_enemy.c:1047   mo->x += mo->momx;
  MOV.L        (RQ9, 24), RQ8
  MOV.L        (RQ9, 112), RQ23
  ADDS.L       RQ8, RQ23, RQ21
  MOV.L        RQ21, (RQ9, 24)
// p_enemy.c:1048   mo->y += mo->momy;
  MOV.L        (RQ9, 28), RQ8
  MOV.L        (RQ9, 116), RQ23
  ADDS.L       RQ8, RQ23, RQ21
  MOV.L        RQ21, (RQ9, 28)
// p_enemy.c:1049   mo->tracer = actor->target;
  MOV.Q        (RQ18, 176), RQ22
  MOV.Q        RQ22, (RQ9, 224)

.L00C02C6D:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

G_DoPlayDemo:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
// g_game.c:1608   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1609   demobuffer = demo_p = W_CacheLumpName (defdemoname, PU_STATIC);
  MOV.Q        defdemoname, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ8, 0, RQ27
  MOV.Q        RQ8, demobuffer
// g_game.c:1615   if ( *demo_p++ != VERSION)
  MOVU.B       (RQ27, 0), RQ9
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, demo_p
  BREQ.Q       110, RQ9, .L0080161C
  MOV.L        gamemode, RD27
  ADD          R0, 4, R5
  CMPEQ.Q      RD27, R5, RQ9
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ23
  OR           RQ9, RQ23, RQ22
  BREQ.L       R0, RQ22, .L0080161D
// g_game.c:1619   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ21
  ADD          RQ21, 0, RQ10
  MOV          .L00C02C74, RQ11
  BSR          fprintf, R1
// g_game.c:1621   gameaction = ga_nothing;
  MOV.L        RD0, gameaction
// g_game.c:1622   return;
  BSR          .L00C02C73, R0

.L0080161D:

.L0080161C:
// g_game.c:1627   skill = *demo_p++;
  MOV.Q        demo_p, RQ27
  MOVU.B       (RQ27, 0), RD20
  ADD          RQ27, 1, RQ27
// g_game.c:1628   episode = *demo_p++;
  MOVU.B       (RQ27, 0), RD13
  ADD          RQ27, 1, RQ27
  MOV.L        RD13, (R2, 108)
// g_game.c:1629   map = *demo_p++;
  MOVU.B       (RQ27, 0), RD12
  ADD          RQ27, 1, RQ27
  MOV.L        RD12, (R2, 104)
// g_game.c:1630   deathmatch = *demo_p++;
  MOVU.B       (RQ27, 0), RD11
  ADD          RQ27, 1, RQ27
  MOV.L        RD11, deathmatch
// g_game.c:1631   respawnparm = *demo_p++;
  MOVU.B       (RQ27, 0), RD11
  ADD          RQ27, 1, RQ27
  MOV.L        RD11, respawnparm
// g_game.c:1632   fastparm = *demo_p++;
  MOVU.B       (RQ27, 0), RD11
  ADD          RQ27, 1, RQ27
  MOV.L        RD11, fastparm
// g_game.c:1633   nomonsters = *demo_p++;
  MOVU.B       (RQ27, 0), RD11
  ADD          RQ27, 1, RQ27
  MOV.L        RD11, nomonsters
// g_game.c:1634   consoleplayer = *demo_p++;
  MOVU.B       (RQ27, 0), RD11
  ADD          RQ27, 1, RQ27
  MOV.L        RD11, consoleplayer
  MOV.Q        RQ27, demo_p
// g_game.c:1636   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L0080161E:
// g_game.c:1637   playeringame[i] = *demo_p++;
  MOV.Q        demo_p, RQ27
  MOVU.B       (RQ27, 0), RQ9
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, demo_p
  MOV          playeringame, RQ27
  MOV.L        RQ9, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L0080161E

.L00801620:
// g_game.c:1638   if (playeringame[1])
  MOV          playeringame, RQ27
  MOV.L        (RQ27, 4), RQ23
  BREQ.L       R0, RQ23, .L00801621
// g_game.c:1639   {
  ADD          R0, 1, RD27
  MOV.L        RD27, netgame
// g_game.c:1641   netdemo = true;
  MOV.L        RD27, netdemo

.L00801621:
// g_game.c:1645   precache = false;
  MOV.L        RD0, precache
// g_game.c:1646   G_InitNew (skill, episode, map);
  ADD          RD20, 0, RD10
  MOV.L        (R2, 108), RD11
  MOV.L        (R2, 104), RD12
  BSR          G_InitNew, R1
// g_game.c:1647   precache = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, precache
// g_game.c:1649   usergame = false;
  MOV.L        RD0, usergame
// g_game.c:1650   demoplayback = true;
  MOV.L        RD27, demoplayback

.L00C02C73:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_msize:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmllist.c:1030   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_GetSize, R1

.L00C02C7A:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

M_MusicVol:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -368, R2
  ADD          RD10, 0, RD18
// m_menu.c:852   {
  BREQ.L       R0, RD18, .L0080165A
  BREQ.Q       1, RD18, .L0080165B
  BSR          .L00801659, R0

.L0080165A:
// m_menu.c:855   case 0:
  MOV.L        snd_MusicVolume, RD13
  BREQ.L       R0, RD13, .L0080165C
// m_menu.c:857   snd_MusicVolume--;
  MOV.L        snd_MusicVolume, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, snd_MusicVolume

.L0080165C:
// m_menu.c:858   break;
  BSR          .L00801659, R0

.L0080165B:
// m_menu.c:859   case 1:
  MOV.L        snd_MusicVolume, RD13
  BRGE.L       15, RD13, .L0080165D
// m_menu.c:861   snd_MusicVolume++;
  MOV.L        snd_MusicVolume, RD13
  ADDS.L       RD13, 1, RD13
  MOV.L        RD13, snd_MusicVolume

.L0080165D:
// m_menu.c:862   break;

.L00801659:
// m_menu.c:865   S_SetMusicVolume(snd_MusicVolume /* *8 */);
  MOV.L        snd_MusicVolume, RD10
  BSR          S_SetMusicVolume, R1

.L00C02C80:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_doMelt:
  ADD          R2, -80, R2
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  MOV.X        R22, (R2, 40)
  ADD          R2, -304, R2
  MOV.L        RD10, (R2, 76)
  MOV.L        RD11, (R2, 72)
  MOV.L        RD12, (R2, 68)
// f_wipe.c:185   boolean	done = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 44)
// f_wipe.c:187   width/=2;
  ADD          R0, 2, RD26
  MOV.L        (R2, 76), RD25
  DIVS.L       RD25, RD26, RD25
  MOV.L        RD25, (R2, 76)
// f_wipe.c:189   while (ticks--)
  BSR          .L0080134B, R0

.L00801349:
// f_wipe.c:190   {
  ADD          R0, 0, RD9
  MOV.L        (R2, 76), RD27
  BRGE.L       RD27, RD9, .L0080134E

.L0080134C:
// f_wipe.c:192   {
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BRGE.L       R0, RQ18, .L0080134F
// f_wipe.c:194   {
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ27, RD9)
// f_wipe.c:195   y[i]++; done = false;
  MOV.L        RD0, (R2, 44)
  BSR          .L00801350, R0

.L0080134F:
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  MOV.L        (R2, 72), RD27
  BRGE.L       RD27, RQ18, .L00801351
// f_wipe.c:198   {
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BRGE.L       16, RQ18, .L00801352
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ18
  ADDS.L       RQ18, 1, RQ22
  ADD          RQ22, 0, RQ8
  BSR          .L00801353, R0

.L00801352:
  ADD          R0, 8, RQ8

.L00801353:
  ADD          RQ8, 0, RD27
  MOV.Q        TU7A00C589/y, RQ26
  MOV.L        (RQ26, RD9), RQ18
  ADDS.L       RQ18, RD27, RQ8
  MOV.L        RD27, (R2, 64)
  MOV.L        (R2, 72), RD26
  BRLT.L       RD26, RQ8, .L00801354
// f_wipe.c:201   dy = height - y[i];
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ22
  MOV.L        (R2, 72), RD26
  SUBS.L       RD26, RQ22, RD27
  MOV.L        RD27, (R2, 64)

.L00801354:
// f_wipe.c:202   s = &((short *)wipe_scr_end)[i*height+y[i]];
  MOV.Q        TU7A00C589/wipe_scr_end, RQ20
  MOV.L        (R2, 72), RD27
  MULS.L       RD9, RD27, RQ18
  MOV.Q        TU7A00C589/y, RQ26
  MOV.L        (RQ26, RD9), RQ8
  ADDS.L       RQ18, RQ8, RQ22
  LEA.W        RQ20, RQ22, RQ26
  MOV.Q        RQ26, (R2, 56)
// f_wipe.c:203   d = &((short *)wipe_scr)[y[i]*width+i];
  MOV.Q        TU7A00C589/wipe_scr, RQ20
  MOV.L        (R2, 76), RD25
  MULS.L       RQ8, RD25, RQ22
  ADDS.L       RQ22, RD9, RQ18
  LEA.W        RQ20, RQ18, RQ13
  MOV.Q        RQ13, (R2, 48)
// f_wipe.c:204   idx = 0;
  ADD          R0, 0, RD21
// f_wipe.c:205   for (j=dy;j;j--)
  MOV.L        (R2, 64), RD23
  BREQ.L       R0, RD23, .L00801357

.L00801355:
// f_wipe.c:206   {
  MOV.Q        (R2, 56), RQ27
  MOV.W        (RQ27, 0), RQ8
  ADD          RQ27, 2, RQ27
  MOV.Q        RQ27, (R2, 56)
  MOV.Q        (R2, 48), RQ26
  MOV.W        RQ8, (RQ26, RD21)
// f_wipe.c:208   idx += width;
  MOV.L        (R2, 76), RD25
  ADDS.L       RD21, RD25, RD21
  ADDS.L       RD23, -1, RD23
  BRNE.L       R0, RD23, .L00801355

.L00801357:
// f_wipe.c:209   }
  MOV.Q        TU7A00C589/y, RQ27
  MOV.L        (RQ27, RD9), RQ22
  MOV.L        (R2, 64), RD26
  ADDS.L       RQ22, RD26, RQ18
  MOV.L        RQ18, (RQ27, RD9)
// f_wipe.c:211   s = &((short *)wipe_scr_start)[i*height];
  MOV.Q        TU7A00C589/wipe_scr_start, RQ20
  MOV.L        (R2, 72), RD25
  MULS.L       RD9, RD25, RQ18
  LEA.W        RQ20, RQ18, RQ13
  MOV.Q        RQ13, (R2, 56)
// f_wipe.c:212   d = &((short *)wipe_scr)[y[i]*width+i];
  MOV.Q        TU7A00C589/wipe_scr, RQ20
  MOV.L        (RQ27, RD9), RQ18
  MOV.L        (R2, 76), RD12
  MULS.L       RQ18, RD12, RQ8
  ADDS.L       RQ8, RD9, RQ22
  LEA.W        RQ20, RQ22, RQ11
  MOV.Q        RQ11, (R2, 48)
// f_wipe.c:213   idx = 0;
  ADD          R0, 0, RD21
// f_wipe.c:214   for (j=height-y[i];j;j--)
  MOV.L        (RQ27, RD9), RQ18
  SUBS.L       RD25, RQ18, RD23
  BREQ.L       R0, RD23, .L0080135A

.L00801358:
// f_wipe.c:215   {
  MOV.Q        (R2, 56), RQ27
  MOV.W        (RQ27, 0), RQ8
  ADD          RQ27, 2, RQ27
  MOV.Q        RQ27, (R2, 56)
  MOV.Q        (R2, 48), RQ26
  MOV.W        RQ8, (RQ26, RD21)
// f_wipe.c:217   idx += width;
  MOV.L        (R2, 76), RD25
  ADDS.L       RD21, RD25, RD21
  ADDS.L       RD23, -1, RD23
  BRNE.L       R0, RD23, .L00801358

.L0080135A:
// f_wipe.c:218   }
  MOV.L        RD0, (R2, 44)

.L00801351:

.L00801350:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 76), RD27
  BRLT.L       RD27, RD9, .L0080134C

.L0080134E:

.L0080134B:
  MOV.L        (R2, 68), RD27
  ADD          RD27, 0, RQ22
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 68)
  BRNE.L       R0, RQ22, .L00801349

.L0080134A:
// f_wipe.c:224   return done;
  MOV.L        (R2, 44), RD10

.L00C02C86:
  ADD          R2, 304, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 80, R2
  JSR          R1, 0, R0

tk_alloc_mount:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -320, R2
  ADD          R0, 184, RQ9
// tk_core/tk_vfile.c:350   
  MOV.Q        tk_mnt_freelist, RQ18
// tk_core/tk_vfile.c:351   
  BREQ.Q       R0, RQ18, .L00800A98
// tk_core/tk_vfile.c:352   
  MOV.Q        (RQ18, 40), RQ8
  MOV.Q        RQ8, tk_mnt_freelist
// tk_core/tk_vfile.c:354   
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 184, RQ12
  BSR          memset, R1
// tk_core/tk_vfile.c:355   
  ADD          RQ18, 0, RQ10
  BSR          .L00C02C8C, R0

.L00800A98:
// tk_core/tk_vfile.c:358   
  ADD          R0, 184, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ18
// tk_core/tk_vfile.c:359   
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 184, RQ12
  BSR          memset, R1
// tk_core/tk_vfile.c:360   
  ADD          RQ18, 0, RQ10

.L00C02C8C:
  ADD          R2, 320, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0
  .balign 4

tkmm_lva_oprsub_bigig:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -600, R2
  ADD          RQ10, 0, RQ18
  ADD          RQ11, 0, RQ9
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R2, 176, RQ6
  MOV.Q        RQ6, (R2, 80)
  ADD          R2, 240, RQ6
  MOV.Q        RQ6, (R2, 72)
// tk_core/lva_tagopr.c:301   
// tk_core/lva_tagopr.c:303   
  ADD          R2, 112, RQ10
  ADD          RQ18, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:304   
  ADD          R2, 176, RQ10
  ADD          RQ9, 0, RQ11
  BSR          TKMM_LVA_UnwrapBigIntPv, R1
// tk_core/lva_tagopr.c:305   
  ADD          RQ18, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          R2, 240, RQ12
  BSR          tkmm_bigint_sub, R1
// tk_core/lva_tagopr.c:306   
  ADD          R2, 240, RQ10
  BSR          TKMM_LVA_NewBigInt3v, R1

.L00C02C92:
  ADD          R2, 600, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

T_MovePlane:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ18
  MOV.L        RD11, (R2, 100)
  ADD          RD12, 0, RD20
  ADD          RD13, 0, RD23
  MOV.L        RD14, (R2, 88)
  MOV.L        RD15, (R2, 84)
// p_floor.c:61   switch(floorOrCeiling)
  MOV.L        (R2, 88), RD27
  BREQ.L       R0, RD27, .L00801BD8
  MOV.L        (R2, 88), RD27
  BREQ.Q       1, RD27, .L00801BD9
  BSR          .L00801BD7, R0

.L00801BD8:
// p_floor.c:65   switch(direction)
  MOV.L        (R2, 84), RD27
  BREQ.Q       -1, RD27, .L00801BDB
  MOV.L        (R2, 84), RD27
  BREQ.Q       1, RD27, .L00801BDC
  BSR          .L00801BDA, R0

.L00801BDB:
// p_floor.c:69   if (sector->floorheight - speed < dest)
  MOV.L        (RQ18, 0), RQ22
  MOV.L        (R2, 100), RD27
  SUBS.L       RQ22, RD27, RQ21
  BRGE.L       RD20, RQ21, .L00801BDD
// p_floor.c:70   {
  MOV.L        (RQ18, 0), RD8
// p_floor.c:72   sector->floorheight = dest;
  MOV.L        RD20, (RQ18, 0)
// p_floor.c:73   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BDE
// p_floor.c:75   {
  MOV.L        RD8, (RQ18, 0)
// p_floor.c:77   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1

.L00801BDE:
// p_floor.c:79   }
  ADD          R0, 2, RD10
  BSR          .L00C02C98, R0
  BSR          .L00801BDF, R0

.L00801BDD:
// p_floor.c:83   {
  MOV.L        (RQ18, 0), RD8
// p_floor.c:85   sector->floorheight -= speed;
  MOV.L        (R2, 100), RD27
  SUBS.L       RD8, RD27, RQ22
  MOV.L        RQ22, (RQ18, 0)
// p_floor.c:86   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BE0
// p_floor.c:88   {
  MOV.L        RD8, (RQ18, 0)
// p_floor.c:90   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
// p_floor.c:91   return crushed;
  ADD          R0, 1, RD10
  BSR          .L00C02C98, R0

.L00801BE0:

.L00801BDF:
// p_floor.c:93   }
  BSR          .L00801BDA, R0

.L00801BDC:
// p_floor.c:98   if (sector->floorheight + speed > dest)
  MOV.L        (RQ18, 0), RQ21
  MOV.L        (R2, 100), RD27
  ADDS.L       RQ21, RD27, RQ22
  BRLE.L       RD20, RQ22, .L00801BE1
// p_floor.c:99   {
  MOV.L        (RQ18, 0), RD8
// p_floor.c:101   sector->floorheight = dest;
  MOV.L        RD20, (RQ18, 0)
// p_floor.c:102   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BE2
// p_floor.c:104   {
  MOV.L        RD8, (RQ18, 0)
// p_floor.c:106   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1

.L00801BE2:
// p_floor.c:108   }
  ADD          R0, 2, RD10
  BSR          .L00C02C98, R0
  BSR          .L00801BE3, R0

.L00801BE1:
// p_floor.c:114   lastpos = sector->floorheight;
  MOV.L        (RQ18, 0), RD8
// p_floor.c:115   sector->floorheight += speed;
  MOV.L        (R2, 100), RD27
  ADDS.L       RD8, RD27, RQ21
  MOV.L        RQ21, (RQ18, 0)
// p_floor.c:116   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BE4
  BRNE.Q       1, RD23, .L00801BE5
// p_floor.c:120   return crushed;
  ADD          R0, 1, RD10
  BSR          .L00C02C98, R0

.L00801BE5:
// p_floor.c:121   sector->floorheight = lastpos;
  MOV.L        RD8, (RQ18, 0)
// p_floor.c:122   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
// p_floor.c:123   return crushed;
  ADD          R0, 1, RD10
  BSR          .L00C02C98, R0

.L00801BE4:

.L00801BE3:
// p_floor.c:125   }

.L00801BDA:
// p_floor.c:127   }
  BSR          .L00801BD7, R0

.L00801BD9:
// p_floor.c:132   switch(direction)
  MOV.L        (R2, 84), RD27
  BREQ.Q       -1, RD27, .L00801BE7
  MOV.L        (R2, 84), RD27
  BREQ.Q       1, RD27, .L00801BE8
  BSR          .L00801BE6, R0

.L00801BE7:
// p_floor.c:136   if (sector->ceilingheight - speed < dest)
  MOV.L        (RQ18, 4), RQ22
  MOV.L        (R2, 100), RD27
  SUBS.L       RQ22, RD27, RQ21
  BRGE.L       RD20, RQ21, .L00801BE9
// p_floor.c:137   {
  MOV.L        (RQ18, 4), RD8
// p_floor.c:139   sector->ceilingheight = dest;
  MOV.L        RD20, (RQ18, 4)
// p_floor.c:140   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BEA
// p_floor.c:143   {
  MOV.L        RD8, (RQ18, 4)
// p_floor.c:145   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1

.L00801BEA:
// p_floor.c:147   }
  ADD          R0, 2, RD10
  BSR          .L00C02C98, R0
  BSR          .L00801BEB, R0

.L00801BE9:
// p_floor.c:153   lastpos = sector->ceilingheight;
  MOV.L        (RQ18, 4), RD8
// p_floor.c:154   sector->ceilingheight -= speed;
  MOV.L        (R2, 100), RD27
  SUBS.L       RD8, RD27, RQ22
  MOV.L        RQ22, (RQ18, 4)
// p_floor.c:155   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BEC
  BRNE.Q       1, RD23, .L00801BED
// p_floor.c:160   return crushed;
  ADD          R0, 1, RD10
  BSR          .L00C02C98, R0

.L00801BED:
// p_floor.c:161   sector->ceilingheight = lastpos;
  MOV.L        RD8, (RQ18, 4)
// p_floor.c:162   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
// p_floor.c:163   return crushed;
  ADD          R0, 1, RD10
  BSR          .L00C02C98, R0

.L00801BEC:

.L00801BEB:
// p_floor.c:165   }
  BSR          .L00801BE6, R0

.L00801BE8:
// p_floor.c:170   if (sector->ceilingheight + speed > dest)
  MOV.L        (RQ18, 4), RQ21
  MOV.L        (R2, 100), RD27
  ADDS.L       RQ21, RD27, RQ22
  BRLE.L       RD20, RQ22, .L00801BEE
// p_floor.c:171   {
  MOV.L        (RQ18, 4), RD8
// p_floor.c:173   sector->ceilingheight = dest;
  MOV.L        RD20, (RQ18, 4)
// p_floor.c:174   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9
  BRNE.Q       1, RD9, .L00801BEF
// p_floor.c:176   {
  MOV.L        RD8, (RQ18, 4)
// p_floor.c:178   P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1

.L00801BEF:
// p_floor.c:180   }
  ADD          R0, 2, RD10
  BSR          .L00C02C98, R0
  BSR          .L00801BF0, R0

.L00801BEE:
// p_floor.c:184   {
  MOV.L        (RQ18, 4), RD8
// p_floor.c:186   sector->ceilingheight += speed;
  MOV.L        (R2, 100), RD27
  ADDS.L       RD8, RD27, RQ21
  MOV.L        RQ21, (RQ18, 4)
// p_floor.c:187   flag = P_ChangeSector(sector,crush);
  ADD          RQ18, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          P_ChangeSector, R1
  ADDS.L       RQ10, 0, RD9

.L00801BF0:
// p_floor.c:197   }

.L00801BE6:
// p_floor.c:199   }

.L00801BD7:
// p_floor.c:202   }
  ADD          R0, 0, RD10

.L00C02C98:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

TK_InitUserInfoForTask:
// tk_core/tk_vfile.c:1199   
  MOVU.W       (RQ10, 92), RQ13
  MOVU.W       RQ13, (RQ11, 0)
// tk_core/tk_vfile.c:1201   
  MOVU.W       (RQ10, 94), RQ13
  MOVU.W       RQ13, (RQ11, 2)
// tk_core/tk_vfile.c:1202   
  MOVU.L       RD0, (RQ11, 4)

.L00C02C99:
  JSR          R1, 0, R0

WI_drawShowNextLoc:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// wi_stuff.c:800   WI_slamBackground();
  BSR          WI_slamBackground, R1
// wi_stuff.c:803   WI_drawAnimatedBack(); 
  BSR          WI_drawAnimatedBack, R1
// wi_stuff.c:805   if (gamemode == hexen)
  MOV.L        gamemode, RD20
  ADD          R0, 5, RD13
  BREQ.Q       RD13, RD20, .L00C02C9F
// wi_stuff.c:809   if(( gamemode != commercial) &&
  MOV.L        gamemode, RD20
  ADD          R0, 2, R5
  CMPNE.Q      RD20, R5, RQ9
  ADD          R0, 5, R5
  CMPNE.Q      RD20, R5, RQ23
  BTST.L       RQ23, RQ9, .L008029DD
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 0), RQ9
  BRLE.L       2, RQ9, .L008029DE
// wi_stuff.c:813   {
  BSR          WI_drawEL, R1
// wi_stuff.c:815   return;
  BSR          .L00C02C9F, R0

.L008029DE:
// wi_stuff.c:818   last = (wbs->last == 8) ? wbs->next - 1 : wbs->last;
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 8), RQ9
  BRNE.Q       8, RQ9, .L008029DF
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 12), RQ9
  ADDS.L       RQ9, -1, RQ21
  ADD          RQ21, 0, RQ23
  BSR          .L008029E0, R0

.L008029DF:
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 8), RQ9
  ADD          RQ9, 0, RQ23

.L008029E0:
  ADD          RQ23, 0, RD22
// wi_stuff.c:821   for (i=0 ; i<=last ; i++)
  ADD          R0, 0, RD18
  BRGT.L       RD22, RD18, .L008029E3

.L008029E1:
// wi_stuff.c:822   WI_drawOnLnode(i, &splat);
  MOV          TU7A00CB85/splat, RQ8
  ADD          RD18, 0, RD10
  ADD          RQ8, 0, RQ11
  BSR          WI_drawOnLnode, R1
  ADDS.L       RD18, 1, RD18
  BRLE.L       RD22, RD18, .L008029E1

.L008029E3:
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 4), RQ9
  BREQ.L       R0, RQ9, .L008029E4
// wi_stuff.c:826   WI_drawOnLnode(8, &splat);
  MOV          TU7A00CB85/splat, RQ8
  ADD          R0, 8, RD10
  ADD          RQ8, 0, RQ11
  BSR          WI_drawOnLnode, R1

.L008029E4:
  MOV.L        TU7A00CB85/snl_pointeron, RD20
  BREQ.L       R0, RD20, .L008029E5
// wi_stuff.c:830   WI_drawOnLnode(wbs->next, yah); 
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 12), RQ9
  ADDS.L       RQ9, 0, RD10
  MOV          TU7A00CB85/yah, RQ11
  BSR          WI_drawOnLnode, R1

.L008029E5:

.L008029DD:
// wi_stuff.c:834   if ( (gamemode != commercial)
  MOV.L        gamemode, RD20
  BRNE.Q       2, RD20, .L008029E7
  MOV.Q        TU7A00CB85/wbs, RQ20
  MOV.L        (RQ20, 12), RQ23
  BRNE.Q       30, RQ23, .L008029E7
  BSR          .L008029E6, R0

.L008029E7:
// wi_stuff.c:836   WI_drawEL();	
  BSR          WI_drawEL, R1

.L008029E6:

.L00C02C9F:
  ADD          R2, 320, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

W_Profile:
// w_wad.c:2181   void W_Profile (void)

.L00C02CA0:
  JSR          R1, 0, R0

tk_msetzone:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// tk_core/tk_mmllist.c:1084   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  BSR          TKMM_SetZoneTag, R1

.L00C02CA6:
  ADD          R2, 384, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

A_CloseShotgun2:
  ADD          R2, -40, R2
  MOV.Q        RQ1, (R2, 32)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 24)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ23
  ADD          R0, 6, RD8
// p_enemy.c:1835   {
  MOV.Q        (RQ9, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 6, RD11
  BSR          S_StartSound, R1
// p_enemy.c:1837   A_ReFire(player,psp);
  ADD          RQ9, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          A_ReFire, R1

.L00C02CAC:
  ADD          R2, 360, R2
  MOV.Q        (R2, 32), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R23
  ADD          R2, 40, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_drawNetgameStats:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// wi_stuff.c:1297   int		pwidth = SHORT(percent->width);
  MOV.Q        TU7A00CB85/percent, RQ27
  MOV.W        (RQ27, 0), RQ18
  MOV.L        RD18, (R2, 108)
// wi_stuff.c:1299   WI_slamBackground();
  BSR          WI_slamBackground, R1
// wi_stuff.c:1302   WI_drawAnimatedBack(); 
  BSR          WI_drawAnimatedBack, R1
// wi_stuff.c:1304   WI_drawLF();
  BSR          WI_drawLF, R1
// wi_stuff.c:1307   V_DrawPatch(NG_STATSX+NG_SPACINGX-SHORT(kills->width),
  MOV.Q        TU7A00CB85/star, RQ27
  MOV.W        (RQ27, 0), RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 32, RQ18
  MOV.L        TU7A00CB85/dofrags, RD26
  CMPEQ.Q      RD26, R0, RQ9
  SHAD.L       RQ9, 5, RQ8
  ADDS.L       RQ18, RQ8, RQ9
  ADDS.L       RQ9, 64, RQ8
  MOV.Q        TU7A00CB85/kills, RQ26
  MOV.W        (RQ26, 0), RQ18
  SUBS.L       RQ8, RQ18, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/kills, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1310   V_DrawPatch(NG_STATSX+2*NG_SPACINGX-SHORT(items->width),
  MOV.Q        TU7A00CB85/star, RQ26
  MOV.W        (RQ26, 0), RQ8
  ADD          RQ8, 0, RQ18
  DIVS.L       RQ18, RD27, RQ18
  ADDS.L       RQ18, 32, RQ9
  MOV.L        TU7A00CB85/dofrags, RD26
  CMPEQ.Q      RD26, R0, RQ8
  SHAD.L       RQ8, 5, RQ18
  ADDS.L       RQ9, RQ18, RQ8
  ADDS.L       RQ8, 128, RQ18
  MOV.Q        TU7A00CB85/items, RQ26
  MOV.W        (RQ26, 0), RQ9
  SUBS.L       RQ18, RQ9, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/items, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1313   V_DrawPatch(NG_STATSX+3*NG_SPACINGX-SHORT(secret->width),
  MOV.Q        TU7A00CB85/star, RQ26
  MOV.W        (RQ26, 0), RQ18
  ADD          RQ18, 0, RQ9
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ9, 32, RQ8
  MOV.L        TU7A00CB85/dofrags, RD26
  CMPEQ.Q      RD26, R0, RQ18
  SHAD.L       RQ18, 5, RQ9
  ADDS.L       RQ8, RQ9, RQ18
  ADDS.L       RQ18, 192, RQ9
  MOV.Q        TU7A00CB85/secret, RQ26
  MOV.W        (RQ26, 0), RQ8
  SUBS.L       RQ9, RQ8, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/secret, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1316   if (dofrags)
  MOV.L        TU7A00CB85/dofrags, RD26
  BREQ.L       R0, RD26, .L00802A5F
// wi_stuff.c:1317   V_DrawPatch(NG_STATSX+4*NG_SPACINGX-SHORT(frags->width),
  MOV.Q        TU7A00CB85/star, RQ27
  MOV.W        (RQ27, 0), RQ9
  SHAD.Q       RQ9, 48, RQ8
  SHAR.Q       RQ8, 48, RQ8
  ADD          R0, 2, RD27
  DIVS.L       RQ8, RD27, RQ8
  ADDS.L       RQ8, 32, RQ18
  MOV.L        TU7A00CB85/dofrags, RD26
  CMPEQ.Q      RD26, R0, RQ9
  SHAD.L       RQ9, 5, RQ8
  ADDS.L       RQ18, RQ8, RQ9
  ADDS.L       RQ9, 256, RQ8
  MOV.Q        TU7A00CB85/frags, RQ26
  MOV.W        (RQ26, 0), RQ18
  SUBS.L       RQ8, RQ18, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 50, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/frags, RQ13
  BSR          V_DrawPatch, R1

.L00802A5F:
// wi_stuff.c:1321   y = NG_STATSY + SHORT(kills->height);
  MOV.Q        TU7A00CB85/kills, RQ27
  MOV.W        (RQ27, 2), RQ8
  ADDS.L       RQ8, 50, RD21
// wi_stuff.c:1323   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD22

.L00802A60:
// wi_stuff.c:1324   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD22), RQ18
  BREQ.L       R0, RQ18, .L00802A61
// wi_stuff.c:1328   x = NG_STATSX;
  MOV.Q        TU7A00CB85/star, RQ27
  MOV.W        (RQ27, 0), RQ9
  SHAD.Q       RQ9, 48, RQ8
  SHAR.Q       RQ8, 48, RQ8
  ADD          R0, 2, RD27
  DIVS.L       RQ8, RD27, RQ8
  ADDS.L       RQ8, 32, RQ18
  MOV.L        TU7A00CB85/dofrags, RD26
  CMPEQ.Q      RD26, R0, RQ9
  SHAD.L       RQ9, 5, RQ8
  ADDS.L       RQ18, RQ8, RD23
// wi_stuff.c:1329   V_DrawPatch(x-SHORT(p[i]->width), y, FB, p[i]);
  MOV          TU7A00CB85/p, RQ26
  MOV.Q        (RQ26, RD22), RQ20
  MOV.W        (RQ20, 0), RQ18
  SUBS.L       RD23, RQ18, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  ADD          RQ20, 0, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1331   if (i == me)
  MOV.L        TU7A00CB85/me, RD26
  BRNE.Q       RD26, RD22, .L00802A63
// wi_stuff.c:1332   V_DrawPatch(x-SHORT(p[i]->width), y, FB, star);
  MOV          TU7A00CB85/p, RQ27
  MOV.Q        (RQ27, RD22), RQ20
  MOV.W        (RQ20, 0), RQ18
  SUBS.L       RD23, RQ18, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  ADD          R0, 0, RD12
  MOV.Q        TU7A00CB85/star, RQ13
  BSR          V_DrawPatch, R1

.L00802A63:
// wi_stuff.c:1334   x += NG_SPACINGX;
  ADDS.L       RD23, 64, RD23
// wi_stuff.c:1335   WI_drawPercent(x-pwidth, y+10, cnt_kills[i]);	x += NG_SPACINGX;
  MOV          TU7A00CB85/cnt_kills, RQ27
  MOV.L        (RQ27, RD22), RQ8
  ADDS.L       RD21, 10, RQ18
  MOV.L        (R2, 108), RD27
  SUBS.L       RD23, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          WI_drawPercent, R1
  ADDS.L       RD23, 64, RD23
// wi_stuff.c:1336   WI_drawPercent(x-pwidth, y+10, cnt_items[i]);	x += NG_SPACINGX;
  MOV          TU7A00CB85/cnt_items, RQ26
  MOV.L        (RQ26, RD22), RQ8
  ADDS.L       RD21, 10, RQ18
  SUBS.L       RD23, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          WI_drawPercent, R1
  ADDS.L       RD23, 64, RD23
// wi_stuff.c:1337   WI_drawPercent(x-pwidth, y+10, cnt_secret[i]);	x += NG_SPACINGX;
  MOV          TU7A00CB85/cnt_secret, RQ26
  MOV.L        (RQ26, RD22), RQ8
  ADDS.L       RD21, 10, RQ18
  SUBS.L       RD23, RD27, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          WI_drawPercent, R1
  ADDS.L       RD23, 64, RD23
// wi_stuff.c:1339   if (dofrags)
  MOV.L        TU7A00CB85/dofrags, RD26
  BREQ.L       R0, RD26, .L00802A64
// wi_stuff.c:1340   WI_drawNum(x, y+10, cnt_frags[i], -1);
  MOV          TU7A00CB85/cnt_frags, RQ27
  MOV.L        (RQ27, RD22), RQ8
  ADDS.L       RD21, 10, RQ18
  ADD          RD23, 0, RD10
  ADD          RQ18, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADD          R0, -1, RD13
  BSR          WI_drawNum, R1

.L00802A64:
// wi_stuff.c:1342   y += WI_SPACINGY;
  ADDS.L       RD21, 33, RD21

.L00802A61:
  ADDS.L       RD22, 1, RD22
  BRLT.L       4, RD22, .L00802A60

.L00802A62:

.L00C02CB2:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_drawPlayers:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
// am_map.c:1259   int		their_color = -1;
  ADD          R0, -1, RD22
// am_map.c:1262   if (!netgame)
  MOV.L        netgame, RD27
  BRNE.L       R0, RD27, .L0080186B
  MOV.L        TU7A00C41B/cheating, RD27
  BREQ.L       R0, RD27, .L0080186C
// am_map.c:1265   AM_drawLineCharacter
  MOV.Q        TU7A00C41B/plr, RQ27
  MOV.Q        (RQ27, 0), RQ18
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ20
  MOVU.L       (RQ18, 56), RQ21
  MOV          cheat_player_arrow, RQ10
  ADD          R0, 16, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RD13
  ADD          R0, 209, RD14
  ADD          RQ20, 0, RD15
  ADD          RQ9, 0, RD16
  BSR          AM_drawLineCharacter, R1
  BSR          .L0080186D, R0

.L0080186C:
// am_map.c:1269   AM_drawLineCharacter
  MOV.Q        TU7A00C41B/plr, RQ27
  MOV.Q        (RQ27, 0), RQ18
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ20
  MOVU.L       (RQ18, 56), RQ21
  MOV          player_arrow, RQ10
  ADD          R0, 7, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RD13
  ADD          R0, 209, RD14
  ADD          RQ20, 0, RD15
  ADD          RQ9, 0, RD16
  BSR          AM_drawLineCharacter, R1

.L0080186D:
// am_map.c:1272   return;
  BSR          .L00C02CB8, R0

.L0080186B:
// am_map.c:1275   for (i=0;i<MAXPLAYERS;i++)
  ADD          R0, 0, RD8

.L0080186E:
// am_map.c:1276   {
  ADDS.L       RD22, 1, RD22
// am_map.c:1278   p = &players[i];
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD8, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// am_map.c:1280   if ( (deathmatch && !singledemo) && p != plr)
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L00801871
  MOV.L        singledemo, RD27
  BRNE.L       R0, RD27, .L00801871

.L00801872:
  MOV.Q        TU7A00C41B/plr, RQ27
  BREQ.Q       RQ27, RQ23, .L00801871
  BSR          .L0080186F, R0

.L00801871:
// am_map.c:1283   if (!playeringame[i])
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD8), RQ9
  BREQ.L       R0, RQ9, .L0080186F
// am_map.c:1286   if (p->powers[pw_invisibility])
  ADD          RQ23, 48, RQ18
  MOV.L        (RQ18, 8), RQ9
  BREQ.L       R0, RQ9, .L00801874
// am_map.c:1287   color = 246; // *close* to black
  ADD          R0, 246, RD27
  MOV.L        RD27, (R2, 156)
  BSR          .L00801875, R0

.L00801874:
// am_map.c:1289   color = their_colors[their_color];
  MOV          AM_drawPlayers/their_colors!79, RQ27
  MOV.L        (RQ27, RD22), RD13
  MOV.L        RD13, (R2, 156)

.L00801875:
// am_map.c:1291   AM_drawLineCharacter
  MOV.Q        (RQ23, 0), RQ18
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ20
  MOVU.L       (RQ18, 56), RQ21
  MOV          player_arrow, RQ10
  ADD          R0, 7, RD11
  ADD          R0, 0, RD12
  ADD          RQ21, 0, RD13
  MOV.L        (R2, 156), RD14
  ADD          RQ20, 0, RD15
  ADD          RQ9, 0, RD16
  BSR          AM_drawLineCharacter, R1

.L0080186F:
  ADDS.L       RD8, 1, RD8
  BRLT.L       4, RD8, .L0080186E

.L00801870:

.L00C02CB8:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

tk_multidir_fioctl:
// tk_vf_sysc.c:535   
  ADD          R0, -1, RD10

.L00C02CB9:
  JSR          R1, 0, R0
  .balign 4

P_AcsRunScript:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RD10, 0, RD23
  ADDS.L       RD11, 0, RD9
  ADD          RD12, 0, RD21
  ADD          RD13, 0, RD20
  MOV.L        RD14, (R2, 92)
// p_acspec.c:1725   if((map>0) && (map!=gamemap))
  CMPGT.Q      RD9, R0, RQ8
  MOV.L        gamemap, RD27
  CMPNE.Q      RD9, RD27, RQ22
  BTST.L       RQ22, RQ8, .L008019DD
// p_acspec.c:1726   {
  ADD          RD23, 0, RD10
  ADDS.L       RD9, 0, RD11
  BSR          P_AcsLookupRun, R1
  ADD          RQ10, 0, RQ18
  BRNE.Q       R0, RQ18, .L00C02CBF
// p_acspec.c:1731   run=P_AcsAllocRun();
  BSR          P_AcsAllocRun, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       R0, RQ18, .L00C02CBF
// p_acspec.c:1735   run->idx=idx;
  MOV.W        RD23, (RQ18, 0)
// p_acspec.c:1736   run->map=map;
  MOV.W        RD9, (RQ18, 2)
// p_acspec.c:1737   run->arg1=arg1;
  MOV.L        RD21, (RQ18, 4)
// p_acspec.c:1738   run->arg2=arg2;
  MOV.L        RD20, (RQ18, 8)
// p_acspec.c:1739   run->arg3=arg3;
  MOV.L        (R2, 92), RD27
  MOV.L        RD27, (RQ18, 12)
// p_acspec.c:1740   return;
  BSR          .L00C02CBF, R0

.L008019DD:
// p_acspec.c:1743   run=P_AcsLookupRun(idx, map);
  ADD          RD23, 0, RD10
  ADDS.L       RD9, 0, RD11
  BSR          P_AcsLookupRun, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:1744   if(run)
  BREQ.Q       R0, RQ18, .L008019DE
  MOV.B        (RQ18, 1065), RQ8
  BRNE.Q       2, RQ8, .L008019DF
// p_acspec.c:1747   run->status=0;
  MOV.B        RD0, (RQ18, 1065)

.L008019DF:
// p_acspec.c:1748   P_AcsRunLoop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRunLoop, R1
// p_acspec.c:1749   P_AcsCheckDestroy(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsCheckDestroy, R1
// p_acspec.c:1750   return;
  BSR          .L00C02CBF, R0

.L008019DE:
// p_acspec.c:1753   run=P_AcsAllocRun();
  BSR          P_AcsAllocRun, R1
  ADD          RQ10, 0, RQ18
// p_acspec.c:1754   if(!run)
  BREQ.Q       R0, RQ18, .L00C02CBF
// p_acspec.c:1757   if(!map)
  BRNE.L       R0, RD9, .L008019E0
// p_acspec.c:1758   map=gamemap;
  MOV.L        gamemap, RD9

.L008019E0:
// p_acspec.c:1760   run->idx=idx;
  MOV.W        RD23, (RQ18, 0)
// p_acspec.c:1761   run->map=map;
  MOV.W        RD9, (RQ18, 2)
// p_acspec.c:1762   run->arg1=arg1;
  MOV.L        RD21, (RQ18, 4)
// p_acspec.c:1763   run->arg2=arg2;
  MOV.L        RD20, (RQ18, 8)
// p_acspec.c:1764   run->arg3=arg3;
  MOV.L        (R2, 92), RD27
  MOV.L        RD27, (RQ18, 12)
// p_acspec.c:1766   run->trigline=trigline;
  MOV.Q        trigline, RQ26
  MOV.Q        RQ26, (RQ18, 16)
// p_acspec.c:1768   P_AcsTryStartRun(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsTryStartRun, R1
// p_acspec.c:1769   P_AcsRunLoop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRunLoop, R1
// p_acspec.c:1770   P_AcsCheckDestroy(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsCheckDestroy, R1
// p_acspec.c:1772   return;

.L00C02CBF:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

EV_CeilingCrushStop:
// p_ceilng.c:320   rtn = 0;
  ADD          RD0, 0, RD13
// p_ceilng.c:321   for (i = 0;i < MAXCEILINGS;i++)
  ADDS.L       RD0, 0, RD12

.L00801A3D:
// p_ceilng.c:322   {
  MOV          activeceilings, RQ11
  MOV.Q        (RQ11, RD12), RQ17
  BREQ.Q       R0, RQ17, .L00801A40
  MOV          activeceilings, RQ11
  MOV.Q        (RQ11, RD12), RQ17
  MOV.L        (RQ17, 60), RQ16
  MOV.W        (RQ10, 28), RQ15
  BRNE.Q       RQ15, RQ16, .L00801A40

.L00801A42:
  MOV          activeceilings, RQ11
  MOV.Q        (RQ11, RD12), RQ17
  MOV.L        (RQ17, 56), RQ16
  BREQ.L       R0, RQ16, .L00801A40

.L00801A41:
// p_ceilng.c:326   {
  MOV          activeceilings, RQ11
  MOV.Q        (RQ11, RD12), RQ17
  MOV.L        (RQ17, 56), RQ16
  MOV.Q        (RQ11, RD12), RQ17
  MOV.L        RQ16, (RQ17, 64)
// p_ceilng.c:328   activeceilings[i]->thinker.function.acv = (actionf_v)NULL;
  ADD          R0, 0, RQ17
  MOV.Q        (RQ11, RD12), RQ14
  ADD          RQ14, 0, RQ31
  ADD          RQ31, 16, RQ30
  MOV.Q        RQ17, (RQ30, 0)
// p_ceilng.c:329   activeceilings[i]->direction = 0;		// in-stasis
  MOV.L        RD0, (RQ14, 56)
// p_ceilng.c:330   rtn = 1;
  ADD          R0, 1, RD13

.L00801A40:
  ADDS.L       RD12, 1, RD12
  BRLT.L       30, RD12, .L00801A3D

.L00801A3F:
// p_ceilng.c:335   return rtn;
  ADDS.L       RD13, 0, RD10

.L00C02CC0:
  JSR          R1, 0, R0
  .balign 4

R_SortVisSprites:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -280, R2
// r_things.c:1094   best = NULL;
  ADD          R0, 0, RQ8
// r_things.c:1095   count = vissprite_p - vissprites;
  MOV.Q        vissprite_p, RQ13
  MOV          vissprites, RQ12
  ADD          RQ13, 0, RQ11
  SUB          RQ11, RQ12, RQ11
  ADD          R0, 80, RD13
  DIVS.L       RQ11, RD13, RQ11
  ADDS.L       RQ11, 0, RD12
// r_things.c:1097   unsorted.next = unsorted.prev = &unsorted;
  MOV          R_SortVisSprites/unsorted!78, RQ10
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, (RQ10, 0)
  MOV.Q        RQ9, (RQ10, 8)
// r_things.c:1099   if (!count)
  MOV.L        RD12, (R2, 44)
  BREQ.L       R0, RD12, .L00C02CD0
// r_things.c:1109   for (ds=vissprites ; ds<vissprite_p ; ds++)
  MOV          vissprites, RQ18
  MOV.Q        vissprite_p, RQ13
  BRGE.Q       RQ13, RQ18, .L00802825

.L00802823:
// r_things.c:1110   {
  ADD          RQ18, 80, RQ9
  MOV.Q        RQ9, (RQ18, 8)
// r_things.c:1112   if(ds!=vissprites)
  MOV          vissprites, RQ13
  BREQ.Q       RQ13, RQ18, .L00802826
// r_things.c:1113   ds->prev = ds-1;
  ADD          RQ18, -80, RQ9
  MOV.Q        RQ9, (RQ18, 0)

.L00802826:
  ADD          RQ18, 80, RQ18
  MOV.Q        vissprite_p, RQ13
  BRLT.Q       RQ13, RQ18, .L00802823

.L00802825:
// r_things.c:1153   vissprites[0].prev = &unsorted;
  MOV          R_SortVisSprites/unsorted!78, RQ13
  ADD          RQ13, 0, RQ9
  MOV          vissprites, RQ12
  ADD          RQ12, 0, RQ11
  MOV.Q        RQ9, (RQ11, 0)
// r_things.c:1154   unsorted.next = &vissprites[0];
  ADD          RQ12, 0, RQ9
  MOV.Q        RQ9, (RQ13, 8)
// r_things.c:1155   (vissprite_p-1)->next = &unsorted;
  ADD          RQ13, 0, RQ9
  MOV.Q        vissprite_p, RQ12
  ADD          RQ12, -80, RQ23
  MOV.Q        RQ9, (RQ23, 8)
// r_things.c:1156   unsorted.prev = vissprite_p-1;
  ADD          RQ12, -80, RQ9
  MOV.Q        RQ9, (RQ13, 0)
// r_things.c:1160   vsprsortedhead.next = vsprsortedhead.prev = &vsprsortedhead;
  MOV          vsprsortedhead, RQ13
  ADD          RQ13, 0, RQ23
  MOV.Q        RQ23, (RQ13, 0)
  MOV.Q        RQ23, (RQ13, 8)
// r_things.c:1161   for (i=0 ; i<count ; i++)
  ADD          R0, 0, RD20
  MOV.L        (R2, 44), RD13
  BRGE.L       RD13, RD20, .L00802829

.L00802827:
// r_things.c:1162   {
  ADD          R0, 0x7FFFFFFF, RD22
// r_things.c:1165   best=NULL;
  ADD          R0, 0, RQ8
// r_things.c:1167   if(bestscale<0)
  BRGE.L       R0, RD22, .L0080282A
// r_things.c:1168   { __debugbreak(); }

R_SortVisSprites.debugbreak_L0546:
  BRK          1350

.L0080282A:
// r_things.c:1170   for (ds=unsorted.next ; ds!= &unsorted ; ds=ds->next)
  MOV          R_SortVisSprites/unsorted!78, RQ13
  MOV.Q        (RQ13, 8), RQ18
  ADD          RQ13, 0, RQ9
  BREQ.Q       RQ9, RQ18, .L0080282D

.L0080282B:
// r_things.c:1171   {
  MOV.L        (RQ18, 48), RQ21
  BRGE.L       RD22, RQ21, .L0080282E
// r_things.c:1173   {
  MOV.L        (RQ18, 48), RD22
// r_things.c:1175   best = ds;
  ADD          RQ18, 0, RQ8

.L0080282E:
  MOV.Q        (RQ18, 8), RQ18
  MOV          R_SortVisSprites/unsorted!78, RQ9
  BRNE.Q       RQ9, RQ18, .L0080282B

.L0080282D:
// r_things.c:1179   if(!best)
  BRNE.Q       R0, RQ8, .L0080282F
// r_things.c:1180   {

R_SortVisSprites.debugbreak_L0547:
  BRK          1351

.L0080282F:
// r_things.c:1184   best->next->prev = best->prev;
  MOV.Q        (RQ8, 0), RQ23
  MOV.Q        (RQ8, 8), RQ9
  MOV.Q        RQ23, (RQ9, 0)
// r_things.c:1185   best->prev->next = best->next;
  MOV.Q        (RQ8, 0), RQ23
  MOV.Q        RQ9, (RQ23, 8)
// r_things.c:1186   best->next = &vsprsortedhead;
  MOV          vsprsortedhead, RQ13
  ADD          RQ13, 0, RQ9
  MOV.Q        RQ9, (RQ8, 8)
// r_things.c:1187   best->prev = vsprsortedhead.prev;
  MOV.Q        (RQ13, 0), RQ23
  MOV.Q        RQ23, (RQ8, 0)
// r_things.c:1188   vsprsortedhead.prev->next = best;
  MOV.Q        (RQ13, 0), RQ9
  MOV.Q        RQ8, (RQ9, 8)
// r_things.c:1189   vsprsortedhead.prev = best;
  MOV.Q        RQ8, (RQ13, 0)
  ADDS.L       RD20, 1, RD20
  MOV.L        (R2, 44), RD13
  BRLT.L       RD13, RD20, .L00802827

.L00802829:

.L00C02CD0:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0
  .balign 4

A_VileStart:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ18
  ADD          R0, 54, RD9
// p_enemy.c:1267   {
  ADD          RQ18, 0, RQ10
  ADD          R0, 54, RD11
  BSR          S_StartSound, R1

.L00C02CD8:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

ST_Init:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R8, (R2, 0)
  ADD          R2, -344, R2
// st_stuff.c:1571   {
  MOV.L        RD0, TU7A00CB73/veryfirsttime
// st_stuff.c:1573   ST_loadData();
  BSR          ST_loadData, R1
// st_stuff.c:1574   screens[4] = (dt_scrpix *) Z_Malloc(
  LUI          5, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
  MOV          screens, RQ8
  MOV.Q        RQ18, (RQ8, 32)

.L00C02CDE:
  ADD          R2, 344, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R8
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

D_PageTicker:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// d_main.c:534   {
  MOV.L        pagetic, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, pagetic
  BRGE.L       R0, RD13, .L0080139F
// d_main.c:536   D_AdvanceDemo ();
  BSR          D_AdvanceDemo, R1

.L0080139F:

.L00C02CE4:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_changeWindowScale:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -328, R2
// am_map.c:750   scale_mtof = FixedMul(scale_mtof, mtof_zoommul);
  MOV.L        TU7A00C41B/scale_mtof, RD10
  MOV.L        TU7A00C41B/mtof_zoommul, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, TU7A00C41B/scale_mtof
// am_map.c:751   scale_ftom = FixedDiv(FRACUNIT, scale_mtof);
  LUI          16, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedDiv, R1
  MOV.L        RQ10, TU7A00C41B/scale_ftom
// am_map.c:753   if (scale_mtof < min_scale_mtof)
  MOV.L        TU7A00C41B/scale_mtof, RD18
  MOV.L        TU7A00C41B/min_scale_mtof, RD9
  BRGE.L       RD9, RD18, .L008017E5
// am_map.c:754   AM_minOutWindowScale();
  BSR          AM_minOutWindowScale, R1
  BSR          .L008017E6, R0

.L008017E5:
  MOV.L        TU7A00C41B/scale_mtof, RD18
  MOV.L        TU7A00C41B/max_scale_mtof, RD9
  BRLE.L       RD9, RD18, .L008017E7
// am_map.c:756   AM_maxOutWindowScale();
  BSR          AM_maxOutWindowScale, R1
  BSR          .L008017E8, R0

.L008017E7:
// am_map.c:758   AM_activateNewScale();
  BSR          AM_activateNewScale, R1

.L008017E8:

.L008017E6:

.L00C02CEA:
  ADD          R2, 328, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_sysc_fclose:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R23, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -424, R2
  ADD          RQ10, 0, RQ23
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// tk_vf_sysc.c:187   
// tk_vf_sysc.c:192   
  ADD          R0, 0, RQ21
  MOV.Q        RQ21, (R2, 88)
// tk_vf_sysc.c:193   
  MOV.L        (RQ23, 64), RQ9
  ADD          R2, 112, RQ21
  ADD          RQ21, 0, RQ20
  MOV.L        RQ9, (RQ20, 0)
// tk_vf_sysc.c:194   
  ADD          R2, 88, RQ8
  ADD          RQ0, 0, RQ10
  LDIZ         4139, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ21, 0, RQ13
  BSR          tk_syscall, R1
  ADD          RQ10, 0, RD18
// tk_vf_sysc.c:195   
  ADD          RQ23, 0, RQ10
  BSR          tk_free_file, R1
// tk_vf_sysc.c:196   
  ADD          RD18, 0, RD10

.L00C02CF0:
  ADD          R2, 424, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_mgetzone:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -368, R2
  ADD          RQ10, 0, RQ9
// tk_core/tk_mmllist.c:1079   
  ADD          RQ9, 0, RQ10
  BSR          TKMM_GetZoneTag, R1

.L00C02CF6:
  ADD          R2, 368, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R9
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

TKMM_PageFree:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  MOV.L        RD11, (R2, 84)
// tk_core/tk_mmpage.c:491   
  ADD          RQ9, 0, RQ10
  MOV.L        (R2, 84), RD11
  MOV.Q        TKMM_PageFree_f, RQ8
  JSR          RQ8, 0, R1

.L00C02CFC:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

P_RespawnSpecials:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// p_mobj.c:629   if (deathmatch != 2)
  MOV.L        deathmatch, RD27
  ADD          R0, 2, RD26
  BRNE.Q       RD26, RD27, .L00C02D02
// p_mobj.c:633   if (iquehead == iquetail)
  MOV.L        iquehead, RD27
  MOV.L        iquetail, RD26
  BREQ.Q       RD26, RD27, .L00C02D02
// p_mobj.c:637   if (leveltime - itemrespawntime[iquetail] < 30*35)
  MOV          itemrespawntime, RQ27
  MOV.L        iquetail, RD26
  MOV.L        (RQ27, RD26), RQ18
  MOV.L        leveltime, RD27
  SUBS.L       RD27, RQ18, RQ8
  ADD          R0, 1050, RD27
  BRLT.L       RD27, RQ8, .L00C02D02
// p_mobj.c:640   mthing = &itemrespawnque[iquetail];
  MOV          itemrespawnque, RQ27
  MOV.L        iquetail, RD26
  ADD          R0, 20, R5
  MUL.L        RD26, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// p_mobj.c:642   x = mthing->x << FRACBITS; 
  MOV.W        (RQ23, 2), RQ18
  SHAD.L       RQ18, 16, RD21
// p_mobj.c:643   y = mthing->y << FRACBITS; 
  MOV.W        (RQ23, 4), RQ8
  SHAD.L       RQ8, 16, RD20
// p_mobj.c:646   ss = R_PointInSubsector (x,y); 
  ADD          RD21, 0, RD10
  ADD          RD20, 0, RD11
  BSR          R_PointInSubsector, R1
  ADD          RQ10, 0, RQ27
// p_mobj.c:647   mo = P_SpawnMobj (x, y, ss->sector->floorheight , MT_IFOG); 
  MOV.Q        (RQ27, 0), RQ26
  MOV.Q        RQ27, (R2, 112)
  MOV.L        (RQ26, 0), RQ18
  ADD          RD21, 0, RD10
  ADD          RD20, 0, RD11
  ADD          RQ18, 0, RD12
  ADD          R0, 40, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ22
// p_mobj.c:648   S_StartSound (mo, sfx_itmbk);
  ADD          RQ22, 0, RQ10
  ADD          R0, 90, RD11
  BSR          S_StartSound, R1
// p_mobj.c:651   for (i=0 ; i< NUMMOBJTYPES ; i++)
  ADD          R0, 0, RD9

.L008022AA:
// p_mobj.c:652   {
  MOV.W        (RQ23, 10), RQ8
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RD9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  BREQ.Q       RQ18, RQ8, .L008022AC
  ADDS.L       RD9, 1, RD9
  BRLT.L       141, RD9, .L008022AA

.L008022AC:
// p_mobj.c:658   if (mobjinfo[i].flags & MF_SPAWNCEILING)
  MOV          mobjinfo, RQ27
  ADD          R0, 92, R5
  MUL.L        RD9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 84), RQ18
  ADD          R0, 256, RD27
  BTST.L       RD27, RQ18, .L008022AD
// p_mobj.c:659   z = ONCEILINGZ;
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, (R2, 124)
  BSR          .L008022AE, R0

.L008022AD:
// p_mobj.c:661   z = ONFLOORZ;
  LUI          0xFFFFFFFFFFF80000, RD27
  MOV.L        RD27, (R2, 124)

.L008022AE:
// p_mobj.c:663   mo = P_SpawnMobj (x,y,z, i);
  ADD          RD21, 0, RD10
  ADD          RD20, 0, RD11
  MOV.L        (R2, 124), RD12
  ADDS.L       RD9, 0, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ22
// p_mobj.c:664   mo->spawnpoint = *mthing;	
  ADD          RQ23, 0, RQ27
  ADD          RQ22, 204, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        (RQ27, 8), RQ12
  MOV.Q        RQ11, (RQ10, 0)
  MOV.Q        RQ12, (RQ10, 8)
  MOV.L        (RQ27, 16), RQ11
  MOV.L        RQ11, (RQ10, 16)
// p_mobj.c:665   mo->angle = ANG45 * (mthing->angle/45);
  MOV.W        (RQ23, 8), RQ18
  ADD          R0, 45, R5
  DIVS.L       RQ18, R5, RQ8
  SHAD.L       RQ8, 29, RQ18
  MOVU.L       RQ18, (RQ22, 56)
// p_mobj.c:668   iquetail = (iquetail+1)&(ITEMQUESIZE-1);
  MOV.L        iquetail, RD26
  ADDS.L       RD26, 1, RQ8
  AND          RQ8, 127, RD26
  MOV.L        RD26, iquetail

.L00C02D02:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

wipe_EndScreen:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.Q        R18, (R2, 8)
  MOV.Q        R9, (R2, 0)
  ADD          R2, -376, R2
  MOV.L        RD10, (R2, 108)
  MOV.L        RD11, (R2, 104)
  MOV.L        RD12, (R2, 100)
  MOV.L        RD13, (R2, 96)
// f_wipe.c:256   {
  MOV          screens, RQ18
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, TU7A00C589/wipe_scr_end
// f_wipe.c:258   I_ReadScreen(wipe_scr_end);
  MOV.Q        TU7A00C589/wipe_scr_end, RQ10
  BSR          I_ReadScreen, R1
// f_wipe.c:259   V_DrawBlockScr(x, y, 0, width, height, wipe_scr_start); // restore start scr.
  MOV.L        (R2, 108), RD10
  MOV.L        (R2, 104), RD11
  ADD          R0, 0, RD12
  MOV.L        (R2, 100), RD13
  MOV.L        (R2, 96), RD14
  MOV.Q        TU7A00C589/wipe_scr_start, RQ15
  BSR          V_DrawBlockScr, R1
// f_wipe.c:260   return 0;
  ADD          R0, 0, RD10

.L00C02D08:
  ADD          R2, 376, R2
  MOV.Q        (R2, 16), RQ1
  MOV.Q        (R2, 0), R9
  MOV.Q        (R2, 8), R18
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

A_FirePistol:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ8
  MOV.Q        RQ11, (R2, 96)
// p_pspr.c:652   {
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1
// p_pspr.c:655   P_SetMobjState (player->mo, S_PLAY_ATK2);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          R0, 155, RD11
  BSR          P_SetMobjState, R1
// p_pspr.c:656   player->ammo[weaponinfo[player->readyweapon].ammo]--;
  ADD          RQ8, 160, RQ18
  MOV.L        (RQ8, 116), RQ9
  MOV          weaponinfo, RQ22
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ9
  MOV.L        (RQ18, RQ9), RQ23
  ADDS.L       RQ23, -1, RQ9
  MOV.L        (RQ8, 116), RQ23
  ADD          R0, 24, R5
  MUL.L        RQ23, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 0), RQ23
  MOV.L        RQ9, (RQ18, RQ23)
// p_pspr.c:658   P_SetPsprite (player,
  MOV.L        (RQ8, 116), RQ9
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 20), RQ23
  ADD          RQ8, 0, RQ10
  ADD          R0, 1, RD11
  ADD          RQ23, 0, RD12
  BSR          P_SetPsprite, R1
// p_pspr.c:662   P_BulletSlope (player->mo);
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_BulletSlope, R1
// p_pspr.c:663   P_GunShot (player->mo, !player->refire);
  MOV.L        (RQ8, 204), RQ9
  CMPEQ.Q      RQ9, R0, RQ23
  MOV.Q        (RQ8, 0), RQ18
  ADD          RQ18, 0, RQ10
  ADD          RQ23, 0, RD11
  BSR          P_GunShot, R1

.L00C02D0E:
  ADD          R2, 360, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0

setbuf:
  ADD          R2, -32, R2
  MOV.Q        RQ1, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
// pdpc201/stdio.c:2758   
  BRNE.Q       RQ0, RQ8, .L008004C0
// pdpc201/stdio.c:2759   
  ADD          RQ9, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 3, RD12
  ADD          R0, 0, RQ13
  BSR          setvbuf, R1
  ADD          RQ10, 0, RD18
  BSR          .L008004C1, R0

.L008004C0:
// pdpc201/stdio.c:2763   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 1, RD12
  LDIZ         6144, RQ13
  BSR          setvbuf, R1
  ADD          RQ10, 0, RD18

.L008004C1:
// pdpc201/stdio.c:2765   
  ADD          RD18, 0, RD10

.L00C02D14:
  ADD          R2, 336, R2
  MOV.Q        (R2, 24), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  ADD          R2, 32, R2
  JSR          RQ1, 0, R0

M_DrawSave:
  ADD          R2, -56, R2
  MOV.Q        RQ1, (R2, 48)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.Q        R21, (R2, 24)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -344, R2
// m_menu.c:627   V_DrawPatchDirectName (72,28,0, "M_SAVEG");
  ADD          R0, 72, RD10
  ADD          R0, 28, RD11
  ADD          R0, 0, RD12
  MOV          .L00C02D1B, RQ13
  BSR          V_DrawPatchDirectName, R1
// m_menu.c:628   for (i = 0;i < load_end; i++)
  ADD          R0, 0, RD9

.L0080163B:
// m_menu.c:629   {
  MOV          LoadDef, RQ22
  MOV.W        (RQ22, 34), RQ18
  SHAD.L       RD9, 4, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.W        (RQ22, 32), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          M_DrawSaveLoadBorder, R1
// m_menu.c:631   M_WriteText(LoadDef.x,LoadDef.y+LINEHEIGHT*i,savegamestrings[i]);
  MOV          savegamestrings, RQ22
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ22, RQ12, RQ12
  MOV          LoadDef, RQ22
  MOV.W        (RQ22, 34), RQ18
  SHAD.L       RD9, 4, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.W        (RQ22, 32), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ23, 0, RD11
  BSR          M_WriteText, R1
  ADDS.L       RD9, 1, RD9
  BRLT.L       6, RD9, .L0080163B

.L0080163D:
// m_menu.c:634   if (saveStringEnter)
  MOV.L        saveStringEnter, RD22
  BREQ.L       R0, RD22, .L0080163E
// m_menu.c:635   {
  MOV          savegamestrings, RQ22
  MOV.L        saveSlot, RD21
  ADD          R0, 24, R5
  MUL.L        RD21, R5, RQ10
  ADD          RQ22, RQ10, RQ10
  BSR          M_StringWidth, R1
  ADDS.L       RQ10, 0, RD9
// m_menu.c:637   M_WriteText(LoadDef.x + i,LoadDef.y+LINEHEIGHT*saveSlot,"_");
  MOV          LoadDef, RQ22
  MOV.W        (RQ22, 34), RQ18
  MOV.L        saveSlot, RD21
  SHAD.L       RD21, 4, RQ8
  ADDS.L       RQ18, RQ8, RQ23
  MOV.W        (RQ22, 32), RQ18
  ADDS.L       RQ18, RD9, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ23, 0, RD11
  MOV          .L00C02D1C, RQ12
  BSR          M_WriteText, R1

.L0080163E:

.L00C02D1A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 48), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  ADD          R2, 56, R2
  JSR          RQ1, 0, R0
  .balign 4

I_ShutdownGraphics:
// i_btesh4.c:389   void I_ShutdownGraphics(void)

.L00C02D1D:
  JSR          R1, 0, R0

WI_updateShowNextLoc:
  ADD          R2, -16, R2
  MOV.Q        RQ1, (R2, 8)
  MOV.Q        R18, (R2, 0)
  ADD          R2, -352, R2
// wi_stuff.c:785   {
  BSR          WI_updateAnimatedBack, R1
// wi_stuff.c:788   if (!--cnt || acceleratestage)
  MOV.L        TU7A00CB85/cnt, RD13
  ADDS.L       RD13, -1, RD13
  MOV.L        RD13, TU7A00CB85/cnt
  BREQ.L       R0, RD13, .L008029DA
  MOV.L        TU7A00CB85/acceleratestage, RD13
  BRNE.L       R0, RD13, .L008029DA
  BSR          .L008029D9, R0

.L008029DA:
// wi_stuff.c:789   WI_initNoState();
  BSR          WI_initNoState, R1
  BSR          .L008029DC, R0

.L008029D9:
// wi_stuff.c:791   snl_pointeron = (cnt & 31) < 20;
  MOV.L        TU7A00CB85/cnt, RD13
  AND          RD13, 31, RQ18
  ADD          R0, 20, R5
  CMPLT.Q      RQ18, R5, RD13
  MOV.L        RD13, TU7A00CB85/snl_pointeron

.L008029DC:

.L00C02D23:
  ADD          R2, 352, R2
  MOV.Q        (R2, 8), RQ1
  MOV.Q        (R2, 0), R18
  ADD          R2, 16, R2
  JSR          RQ1, 0, R0

AM_Drawer:
  ADD          R2, -8, R2
  MOV.Q        RQ1, (R2, 0)
  ADD          R2, -344, R2
// am_map.c:1347   {
  MOV.L        automapactive, RD13
  BREQ.L       R0, RD13, .L00C02D29
// am_map.c:1350   AM_clearFB(BACKGROUND);
  ADD          R0, 0, RD10
  BSR          AM_clearFB, R1
// am_map.c:1351   if (grid)
  MOV.L        TU7A00C41B/grid, RD13
  BREQ.L       R0, RD13, .L00801883
// am_map.c:1352   AM_drawGrid(GRIDCOLORS);
  ADD          R0, 104, RD10
  BSR          AM_drawGrid, R1

.L00801883:
// am_map.c:1353   AM_drawWalls();
  BSR          AM_drawWalls, R1
// am_map.c:1354   AM_drawPlayers();
  BSR          AM_drawPlayers, R1
// am_map.c:1355   if (cheating==2)
  MOV.L        TU7A00C41B/cheating, RD13
  BRNE.Q       2, RD13, .L00801884
// am_map.c:1356   AM_drawThings(THINGCOLORS, THINGRANGE);
  ADD          R0, 112, RD10
  ADD          R0, 16, RD11
  BSR          AM_drawThings, R1

.L00801884:
// am_map.c:1357   AM_drawCrosshair(XHAIRCOLORS);
  ADD          R0, 96, RD10
  BSR          AM_drawCrosshair, R1
// am_map.c:1359   AM_drawMarks();
  BSR          AM_drawMarks, R1
// am_map.c:1361   V_MarkRect(f_x, f_y, f_w, f_h);
  MOV.L        TU7A00C41B/f_x, RD10
  MOV.L        TU7A00C41B/f_y, RD11
  MOV.L        TU7A00C41B/f_w, RD12
  MOV.L        TU7A00C41B/f_h, RD13
  BSR          V_MarkRect, R1

.L00C02D29:
  ADD          R2, 344, R2
  MOV.Q        (R2, 0), RQ1
  ADD          R2, 8, R2
  JSR          RQ1, 0, R0
  .balign 4

P_MovePlayer:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ21
// p_user.c:154   cmd = &player->cmd;
  ADD          RQ21, 12, RQ18
  ADD          RQ18, 0, RQ22
// p_user.c:156   player->mo->angle += (cmd->angleturn<<16);
  MOV.Q        (RQ21, 0), RQ18
  MOVU.L       (RQ18, 56), RQ9
  MOV.W        (RQ22, 2), RQ8
  SHAD.L       RQ8, 16, RQ23
  ADDU.L       RQ9, RQ23, RQ8
  MOVU.L       RQ8, (RQ18, 56)
// p_user.c:160   onground = (player->mo->z <= player->mo->floorz);
  MOV.L        (RQ18, 32), RQ23
  MOV.L        (RQ18, 96), RQ9
  CMPGE.Q      RQ9, RQ23, RD20
  MOV.L        RD20, onground
// p_user.c:162   if (cmd->forwardmove && onground)
  MOV.B        (RQ22, 0), RQ8
  BREQ.L       R0, RQ8, .L00802381
  MOV.L        onground, RD20
  BREQ.L       R0, RD20, .L00802381

.L00802382:
// p_user.c:163   P_Thrust (player, player->mo->angle, cmd->forwardmove*2048);
  MOV.B        (RQ22, 0), RQ23
  SHAD.L       RQ23, 11, RQ9
  MOV.Q        (RQ21, 0), RQ18
  MOVU.L       (RQ18, 56), RQ8
  ADD          RQ21, 0, RQ10
  ADDU.L       RQ8, R0, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          P_Thrust, R1

.L00802381:
// p_user.c:165   if (cmd->sidemove && onground)
  MOV.B        (RQ22, 1), RQ23
  BREQ.L       R0, RQ23, .L00802384
  MOV.L        onground, RD20
  BREQ.L       R0, RD20, .L00802384

.L00802385:
// p_user.c:166   P_Thrust (player, player->mo->angle-ANG90, cmd->sidemove*2048);
  MOV.B        (RQ22, 1), RQ9
  SHAD.L       RQ9, 11, RQ8
  MOV.Q        (RQ21, 0), RQ18
  MOVU.L       (RQ18, 56), RQ9
  LUI          0xFFFFFFFFFFFC0000, R5
  ADDU.L       R5, RQ9, RQ23
  ADD          RQ21, 0, RQ10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          P_Thrust, R1

.L00802384:
// p_user.c:168   if ( (cmd->forwardmove || cmd->sidemove) 
  MOV.B        (RQ22, 0), RQ9
  BRNE.L       R0, RQ9, .L00802389
  MOV.B        (RQ22, 1), RQ8
  BRNE.L       R0, RQ8, .L00802389
  BSR          .L00802387, R0

.L00802389:
  MOV.Q        (RQ21, 0), RQ18
  MOV.Q        (RQ18, 152), RQ20
  MOV          states, RQ13
  ADD          R0, 149, RD12
  ADD          R0, 40, R5
  MUL.L        RD12, R5, RQ18
  ADD          RQ13, RQ18, RQ18
  BRNE.Q       RQ18, RQ20, .L00802387

.L00802388:
// p_user.c:170   {
  MOV.Q        (RQ21, 0), RQ20
  MOV.Q        RQ20, (R2, 64)
  ADD          RQ20, 0, RQ10
  ADD          R0, 150, RD11
  BSR          P_SetMobjState, R1

.L00802387:

.L00C02D2F:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_multidir_create:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  MOV.Q        RQ10, (R2, 104)
  ADD          RD11, 0, RD23
// tk_vf_sysc.c:439   
  MOV.Q        RQ0, (R2, 88)
// tk_vf_sysc.c:441   
  LDIZ         2344, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ20
// tk_vf_sysc.c:442   
  ADD          RQ20, 0, RQ10
  ADD          R0, 0, RQ11
  LDIZ         2344, RQ12
  BSR          memset, R1
// tk_vf_sysc.c:444   
  BSR          tk_alloc_dir, R1
  ADD          RQ10, 0, RQ8
// tk_vf_sysc.c:445   
  MOV          tk_vfile_multidir_vt, RQ9
  MOV.Q        RQ9, (RQ8, 0)
// tk_vf_sysc.c:447   
  SHAD.L       RD23, 3, RQ21
  BRGT.L       64, RQ21, .L00800B3A
// tk_vf_sysc.c:448   
  ADD          RQ8, 96, RQ9
  ADD          RQ9, 0, RQ22
  BSR          .L00800B3B, R0

.L00800B3A:
// tk_vf_sysc.c:450   
  SHAD.L       RD23, 3, RQ21
  ADD          RQ21, 0, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ22

.L00800B3B:
// tk_vf_sysc.c:452   
  ADD          R0, 0, RD18
  BRGE.L       RD23, RD18, .L00800B3C

.L00800B3D:
// tk_vf_sysc.c:453   
  MOV.Q        (R2, 104), RQ27
  MOV.Q        (RQ27, RD18), RQ9
  MOV.Q        RQ9, (RQ22, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       RD23, RD18, .L00800B3D

.L00800B3C:
// tk_vf_sysc.c:455   
  MOV.L        RD23, (RQ8, 64)
// tk_vf_sysc.c:456   
  MOV.L        RD0, (RQ8, 68)
// tk_vf_sysc.c:457   
  MOV.Q        RQ22, (RQ8, 16)
// tk_vf_sysc.c:458   
  MOV.Q        (R2, 88), RQ27
  MOV.Q        RQ27, (RQ8, 24)
// tk_vf_sysc.c:459   
  MOV.Q        RQ20, (RQ8, 32)
// tk_vf_sysc.c:461   
  ADD          RQ8, 0, RQ10

.L00C02D35:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

I_Tactile:
// i_btesh4.c:307   void I_Tactile (int on, int off, int total)

.L00C02D36:
  JSR          R1, 0, R0

TKMM_LVA_StrEncodeLengthRev:
  ADD          R2, -40, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 24)
  ADD          R2, -280, R2
  ADD          RQ10, 0, RQ8
  ADD          RD11, 0, RD23
  ADD          RD12, 0, RD22
// tk_core/lva_strdup.c:64   
  BRLT.L       R0, RD23, .L00C02D3C
// tk_core/lva_strdup.c:68   
  BRGE.L       64, RD23, .L00800DEA
// tk_core/lva_strdup.c:69   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:71   
  OR           RD23, 128, RQ18
  MOVU.B       RQ18, (RQ8, 1)
// tk_core/lva_strdup.c:72   
  BSR          .L00C02D3C, R0

.L00800DEA:
// tk_core/lva_strdup.c:75   
  LUI          1, RD13
  BRGE.L       RD13, RD23, .L00800DEB
// tk_core/lva_strdup.c:76   
  ADD          RQ8, -1, RQ8
// tk_core/lva_strdup.c:78   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:79   
  AND          RD23, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 1)
// tk_core/lva_strdup.c:80   
  SHLR.Q       RD23, 6, RQ18
  AND          RQ18, 31, RQ18
  OR           RQ18, 192, RQ9
  MOVU.B       RQ9, (RQ8, 2)
// tk_core/lva_strdup.c:84   
  BSR          .L00C02D3C, R0

.L00800DEB:
// tk_core/lva_strdup.c:87   
  LUI          16, RD13
  BRGE.L       RD13, RD23, .L00800DEC
// tk_core/lva_strdup.c:88   
  ADD          RQ8, -2, RQ8
// tk_core/lva_strdup.c:90   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:91   
  AND          RD23, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 1)
// tk_core/lva_strdup.c:92   
  SHLR.Q       RD23, 6, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 2)
// tk_core/lva_strdup.c:93   
  SHLR.Q       RD23, 12, RQ18
  AND          RQ18, 15, RQ18
  OR           RQ18, 224, RQ9
  MOVU.B       RQ9, (RQ8, 3)
// tk_core/lva_strdup.c:98   
  BSR          .L00C02D3C, R0

.L00800DEC:
// tk_core/lva_strdup.c:99   
  LUI          512, RD13
  BRGE.L       RD13, RD23, .L00800DED
// tk_core/lva_strdup.c:101   
  ADD          RQ8, -3, RQ8
// tk_core/lva_strdup.c:103   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:104   
  AND          RD23, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 1)
// tk_core/lva_strdup.c:105   
  SHLR.Q       RD23, 6, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 2)
// tk_core/lva_strdup.c:106   
  SHLR.Q       RD23, 12, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 3)
// tk_core/lva_strdup.c:107   
  SHLR.Q       RD23, 18, RQ18
  AND          RQ18, 7, RQ18
  OR           RQ18, 240, RQ9
  MOVU.B       RQ9, (RQ8, 4)
// tk_core/lva_strdup.c:113   
  BSR          .L00C02D3C, R0

.L00800DED:
// tk_core/lva_strdup.c:114   
  LUI          16384, RD13
  BRGE.L       RD13, RD23, .L00800DEE
// tk_core/lva_strdup.c:116   
  ADD          RQ8, -4, RQ8
// tk_core/lva_strdup.c:118   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:119   
  AND          RD23, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 1)
// tk_core/lva_strdup.c:120   
  SHLR.Q       RD23, 6, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 2)
// tk_core/lva_strdup.c:121   
  SHLR.Q       RD23, 12, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 3)
// tk_core/lva_strdup.c:122   
  SHLR.Q       RD23, 18, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 4)
// tk_core/lva_strdup.c:123   
  SHLR.Q       RD23, 24, RQ18
  AND          RQ18, 3, RQ18
  OR           RQ18, 248, RQ9
  MOVU.B       RQ9, (RQ8, 5)
// tk_core/lva_strdup.c:130   
  BSR          .L00C02D3C, R0

.L00800DEE:
// tk_core/lva_strdup.c:131   
  ADD          R0, 0x7FFFFFFF, RD13
  BRGE.L       RD13, RD23, .L00800DEF
// tk_core/lva_strdup.c:133   
  ADD          RQ8, -5, RQ8
// tk_core/lva_strdup.c:135   
  MOVU.B       RD22, (RQ8, 0)
// tk_core/lva_strdup.c:136   
  AND          RD23, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 1)
// tk_core/lva_strdup.c:137   
  SHLR.Q       RD23, 6, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 2)
// tk_core/lva_strdup.c:138   
  SHLR.Q       RD23, 12, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 3)
// tk_core/lva_strdup.c:139   
  SHLR.Q       RD23, 18, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 4)
// tk_core/lva_strdup.c:140   
  SHLR.Q       RD23, 24, RQ18
  AND          RQ18, 63, RQ18
  OR           RQ18, 128, RQ9
  MOVU.B       RQ9, (RQ8, 5)
// tk_core/lva_strdup.c:141   
  SHLR.Q       RD23, 30, RQ6
  AND          RQ6, 1, RQ6
  AND          RD0, -2, RQ7
  OR           RQ6, RQ7, RQ18
  OR           RQ18, 252, RQ9
  MOVU.B       RQ9, (RQ8, 6)
// tk_core/lva_strdup.c:149   
  BSR          .L00C02D3C, R0

.L00800DEF:

.L00C02D3C:
  ADD          R2, 280, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 40, R2
  JSR          R1, 0, R0

P_GroupLines:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -432, R2
  ADD          R2, 192, RQ6
  MOV.Q        RQ6, (R2, 136)
// p_setup.c:1141   fixed_t		bbox[4];
// p_setup.c:1145   ss = subsectors;
  MOV.Q        subsectors, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 152)
// p_setup.c:1146   for (i=0 ; i<numsubsectors ; i++, ss++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 172)
  MOV.L        numsubsectors, RD25
  BRGE.L       RD25, RD27, .L00802033

.L00802031:
// p_setup.c:1147   {
  MOV.Q        (R2, 152), RQ27
  MOV.W        (RQ27, 10), RQ8
  MOV.Q        segs, RQ26
  ADD          R0, 56, R5
  MUL.L        RQ8, R5, RQ25
  ADD          RQ26, RQ25, RQ25
// p_setup.c:1149   ss->sector = seg->sidedef->sector;
  MOV.Q        (RQ25, 24), RQ9
  MOV.Q        RQ25, (R2, 144)
  MOV.Q        (RQ9, 16), RQ22
  MOV.Q        RQ22, (RQ27, 0)
  MOV.L        (R2, 172), RD26
  ADD          RD26, 0, RQ8
  ADDS.L       RD26, 1, RD26
  ADD          RQ27, 0, RQ9
  ADD          RQ27, 16, RQ27
  MOV.Q        RQ27, (R2, 152)
  MOV.L        RD26, (R2, 172)
  MOV.L        numsubsectors, RD24
  BRLT.L       RD24, RD26, .L00802031

.L00802033:
// p_setup.c:1153   li = lines;
  MOV.Q        lines, RQ23
// p_setup.c:1154   totallines = 0;
  MOV.L        RD0, totallines
// p_setup.c:1155   for (i=0 ; i<numlines ; i++, li++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 172)
  MOV.L        numlines, RD26
  BRGE.L       RD26, RD27, .L00802036

.L00802034:
// p_setup.c:1156   {
  MOV.L        totallines, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, totallines
// p_setup.c:1158   li->frontsector->linecount++;
  MOV.Q        (RQ23, 64), RQ22
  MOV.L        (RQ22, 112), RQ8
  ADDS.L       RQ8, 1, RQ18
  MOV.L        RQ18, (RQ22, 112)
// p_setup.c:1160   if (li->backsector && li->backsector != li->frontsector)
  MOV.Q        (RQ23, 72), RQ9
  BREQ.Q       R0, RQ9, .L00802037
  MOV.Q        (RQ23, 72), RQ22
  MOV.Q        (RQ23, 64), RQ9
  BREQ.Q       RQ9, RQ22, .L00802037

.L00802038:
// p_setup.c:1161   {
  MOV.Q        (RQ23, 72), RQ22
  MOV.L        (RQ22, 112), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ22, 112)
// p_setup.c:1163   totallines++;
  MOV.L        totallines, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, totallines

.L00802037:
  MOV.L        (R2, 172), RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  ADD          RQ23, 0, RQ9
  ADD          RQ23, 96, RQ23
  MOV.L        RD27, (R2, 172)
  MOV.L        numlines, RD26
  BRLT.L       RD26, RD27, .L00802034

.L00802036:
// p_setup.c:1170   linebuffer = Z_Malloc ((totallines+4)*sizeof(void *), PU_LEVEL_GLINE, 0);
  MOV.L        totallines, RD27
  ADDS.L       RD27, 4, RQ18
  SHAD.L       RQ18, 3, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 61, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ27
// p_setup.c:1171   linebuf	= linebuffer;
  MOV.Q        RQ27, (R2, 176)
  MOV.Q        RQ27, (R2, 184)
// p_setup.c:1172   sector = sectors;
  MOV.Q        sectors, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, (R2, 160)
// p_setup.c:1173   for (i=0 ; i<numsectors ; i++, sector++)
  ADD          R0, 0, RD26
  MOV.L        RD26, (R2, 172)
  MOV.L        numsectors, RD24
  BRGE.L       RD24, RD26, .L0080203C

.L0080203A:
// p_setup.c:1174   {
  ADD          R2, 192, RQ10
  BSR          M_ClearBox, R1
// p_setup.c:1176   sector->lines = linebuffer;
  MOV.Q        (R2, 184), RQ27
  MOV.Q        (R2, 160), RQ26
  MOV.Q        RQ27, (RQ26, 120)
// p_setup.c:1177   li = lines;
  MOV.Q        lines, RQ23
// p_setup.c:1178   for (j=0 ; j<numlines ; j++, li++)
  ADD          R0, 0, RD25
  MOV.L        RD25, (R2, 168)
  MOV.L        numlines, RD24
  BRGE.L       RD24, RD25, .L0080203F

.L0080203D:
// p_setup.c:1179   {
  MOV.Q        (RQ23, 64), RQ9
  MOV.Q        (R2, 160), RQ27
  BREQ.Q       RQ27, RQ9, .L00802041
  MOV.Q        (RQ23, 72), RQ22
  MOV.Q        (R2, 160), RQ27
  BREQ.Q       RQ27, RQ22, .L00802041
  BSR          .L00802040, R0

.L00802041:
// p_setup.c:1181   {
  MOV.Q        (R2, 184), RQ27
  ADD          RQ27, 0, RQ9
  ADD          RQ27, 8, RQ27
  MOV.Q        RQ27, (R2, 184)
  MOV.Q        RQ23, (RQ9, 0)
// p_setup.c:1183   M_AddToBox (bbox, li->v1->x, li->v1->y);
  MOV.Q        (RQ23, 0), RQ22
  MOV.L        (RQ22, 4), RQ18
  MOV.L        (RQ22, 0), RQ8
  ADD          R2, 192, RQ10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          M_AddToBox, R1
// p_setup.c:1184   M_AddToBox (bbox, li->v2->x, li->v2->y);
  MOV.Q        (RQ23, 8), RQ9
  MOV.L        (RQ9, 4), RQ18
  MOV.L        (RQ9, 0), RQ8
  ADD          R2, 192, RQ10
  ADDS.L       RQ8, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          M_AddToBox, R1

.L00802040:
  MOV.L        (R2, 168), RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  ADD          RQ23, 0, RQ9
  ADD          RQ23, 96, RQ23
  MOV.L        RD27, (R2, 168)
  MOV.L        numlines, RD26
  BRLT.L       RD26, RD27, .L0080203D

.L0080203F:
// p_setup.c:1186   }
  MOV.Q        (R2, 160), RQ27
  MOV.Q        (RQ27, 120), RQ22
  MOV.Q        (R2, 184), RQ26
  SUB          RQ26, RQ22, RQ25
  SHAR.Q       RQ25, 3, RQ25
  MOV.L        (RQ27, 112), RQ8
  ADDS.L       RQ8, 0, RQ24
  BREQ.Q       RQ24, RQ25, .L00802043
// p_setup.c:1188   I_Error ("P_GroupLines: miscounted");
  MOV          .L00C02D43, RQ10
  BSR          I_Error, R1

.L00802043:
// p_setup.c:1191   sector->soundorg.x = (bbox[BOXRIGHT]+bbox[BOXLEFT])/2;
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 12), RQ8
  MOV.L        (RQ27, 8), RQ18
  ADDS.L       RQ8, RQ18, RQ20
  ADD          RQ20, 0, RQ8
  ADD          R0, 2, RD26
  DIVS.L       RQ8, RD26, RQ8
  MOV.Q        (R2, 160), RQ25
  ADD          RQ25, 48, RQ24
  MOV.L        RQ8, (RQ24, 24)
// p_setup.c:1192   sector->soundorg.y = (bbox[BOXTOP]+bbox[BOXBOTTOM])/2;
  MOV.L        (RQ27, 0), RQ8
  MOV.L        (RQ27, 4), RQ18
  ADDS.L       RQ8, RQ18, RQ20
  ADD          RQ20, 0, RQ8
  DIVS.L       RQ8, RD26, RQ8
  MOV.L        RQ8, (RQ24, 28)
// p_setup.c:1195   block = (bbox[BOXTOP]-bmaporgy+MAXRADIUS)>>MAPBLOCKSHIFT;
  MOV.L        (RQ27, 0), RQ18
  MOV.L        bmaporgy, RD13
  SUBS.L       RQ18, RD13, RQ20
  ADDS.L       RQ20, 0x00800000, RQ8
  SHAR         RQ8, 23, RD21
// p_setup.c:1196   block = block >= bmapheight ? bmapheight-1 : block;
  MOV.L        bmapheight, RD13
  BRLT.L       RD13, RD21, .L00802044
  MOV.L        bmapheight, RD27
  ADDS.L       RD27, -1, RQ20
  ADD          RQ20, 0, RQ18
  BSR          .L00802045, R0

.L00802044:
  ADD          RD21, 0, RQ18

.L00802045:
  ADD          RQ18, 0, RD21
// p_setup.c:1197   sector->blockbox[BOXTOP]=block;
  MOV.Q        (R2, 160), RQ27
  ADD          RQ27, 32, RQ9
  MOV.L        RD21, (RQ9, 0)
// p_setup.c:1199   block = (bbox[BOXBOTTOM]-bmaporgy-MAXRADIUS)>>MAPBLOCKSHIFT;
  ADD          R2, 192, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        bmaporgy, RD25
  SUBS.L       RQ18, RD25, RQ20
  ADDS.L       RQ20, 0xFFFFFFFFFF800000, RQ8
  SHAR         RQ8, 23, RD21
// p_setup.c:1200   block = block < 0 ? 0 : block;
  BRGE.L       R0, RD21, .L00802046
  ADD          R0, 0, RQ18
  BSR          .L00802047, R0

.L00802046:
  ADD          RD21, 0, RQ18

.L00802047:
  ADD          RQ18, 0, RD21
// p_setup.c:1201   sector->blockbox[BOXBOTTOM]=block;
  MOV.Q        (R2, 160), RQ27
  ADD          RQ27, 32, RQ9
  MOV.L        RD21, (RQ9, 4)
// p_setup.c:1203   block = (bbox[BOXRIGHT]-bmaporgx+MAXRADIUS)>>MAPBLOCKSHIFT;
  ADD          R2, 192, RQ26
  MOV.L        (RQ26, 12), RQ18
  MOV.L        bmaporgx, RD25
  SUBS.L       RQ18, RD25, RQ20
  ADDS.L       RQ20, 0x00800000, RQ8
  SHAR         RQ8, 23, RD21
// p_setup.c:1204   block = block >= bmapwidth ? bmapwidth-1 : block;
  MOV.L        bmapwidth, RD25
  BRLT.L       RD25, RD21, .L00802048
  MOV.L        bmapwidth, RD27
  ADDS.L       RD27, -1, RQ20
  ADD          RQ20, 0, RQ18
  BSR          .L00802049, R0

.L00802048:
  ADD          RD21, 0, RQ18

.L00802049:
  ADD          RQ18, 0, RD21
// p_setup.c:1205   sector->blockbox[BOXRIGHT]=block;
  MOV.Q        (R2, 160), RQ27
  ADD          RQ27, 32, RQ9
  MOV.L        RD21, (RQ9, 12)
// p_setup.c:1207   block = (bbox[BOXLEFT]-bmaporgx-MAXRADIUS)>>MAPBLOCKSHIFT;
  ADD          R2, 192, RQ26
  MOV.L        (RQ26, 8), RQ18
  MOV.L        bmaporgx, RD25
  SUBS.L       RQ18, RD25, RQ20
  ADDS.L       RQ20, 0xFFFFFFFFFF800000, RQ8
  SHAR         RQ8, 23, RD21
// p_setup.c:1208   block = block < 0 ? 0 : block;
  BRGE.L       R0, RD21, .L0080204A
  ADD          R0, 0, RQ18
  BSR          .L0080204B, R0

.L0080204A:
  ADD          RD21, 0, RQ18

.L0080204B:
  ADD          RQ18, 0, RD21
// p_setup.c:1209   sector->blockbox[BOXLEFT]=block;
  MOV.Q        (R2, 160), RQ27
  ADD          RQ27, 32, RQ9
  MOV.L        RD21, (RQ9, 8)
  MOV.L        (R2, 172), RD26
  ADD          RD26, 0, RQ18
  ADDS.L       RD26, 1, RD26
  ADD          RQ27, 0, RQ9
  ADD          RQ27, 128, RQ27
  MOV.Q        RQ27, (R2, 160)
  MOV.L        RD26, (R2, 172)
  MOV.L        numsectors, RD25
  BRLT.L       RD25, RD26, .L0080203A

.L0080203C:
// p_setup.c:1212   Z_ChangeTag (linebuf, PU_LEVEL_GLINE);  //BGB: Debug
  MOV.Q        (R2, 176), RQ10
  ADD          R0, 61, RD11
  BSR          Z_ChangeTag2, R1

.L00C02D42:
  ADD          R2, 432, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

D_DoomMain:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -608, R2
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 104)
// d_main.c:990   char					file[256];
// d_main.c:992   wadfiles[0]=NULL;
  MOV          wadfiles, RQ27
  MOV.Q        RQ0, (RQ27, 0)
// d_main.c:994   FindResponseFile ();
  BSR          FindResponseFile, R1
// d_main.c:996   IdentifyVersion ();
  BSR          IdentifyVersion, R1
// d_main.c:998   setbuf (stdout, NULL);
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ21
  ADD          RQ21, 0, RQ10
  ADD          RQ0, 0, RQ11
  BSR          setbuf, R1
// d_main.c:999   modifiedgame = false;
  MOV.L        RD0, modifiedgame
// d_main.c:1001   nomonsters = M_CheckParm ("-nomonsters");
  MOV          .L00C02D4A, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, nomonsters
// d_main.c:1002   respawnparm = M_CheckParm ("-respawn");
  MOV          .L00C02D4B, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, respawnparm
// d_main.c:1003   fastparm = M_CheckParm ("-fast");
  MOV          .L00C02D4C, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, fastparm
// d_main.c:1004   devparm = M_CheckParm ("-devparm");
  MOV          .L00C02D4D, RQ10
  BSR          M_CheckParm, R1
  MOV.L        RQ10, devparm
// d_main.c:1005   if (M_CheckParm ("-altdeath"))
  MOV          .L00C02D4E, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008013E0
// d_main.c:1006   deathmatch = 2;
  ADD          R0, 2, RD27
  MOV.L        RD27, deathmatch
  BSR          .L008013E1, R0

.L008013E0:
  MOV          .L00C02D4F, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008013E2
// d_main.c:1008   deathmatch = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, deathmatch

.L008013E2:

.L008013E1:
// d_main.c:1010   switch ( gamemode )
  MOV.L        gamemode, RD27
  BREQ.Q       3, RD27, .L008013E4
  MOV.L        gamemode, RD27
  BREQ.L       R0, RD27, .L008013E5
  MOV.L        gamemode, RD27
  BREQ.Q       1, RD27, .L008013E6
  MOV.L        gamemode, RD27
  BREQ.Q       2, RD27, .L008013E7
  BSR          .L008013E8, R0

.L008013E4:
// d_main.c:1012   case retail:
  MOV          title, RQ10
  MOV          .L00C02D50, RQ11
  ADD          R0, 1, RD12
  ADD          R0, 10, RD13
  BSR          sprintf, R1
// d_main.c:1018   break;
  BSR          .L008013E3, R0

.L008013E5:
// d_main.c:1019   case shareware:
  MOV          title, RQ10
  MOV          .L00C02D51, RQ11
  ADD          R0, 1, RD12
  ADD          R0, 10, RD13
  BSR          sprintf, R1
// d_main.c:1025   break;
  BSR          .L008013E3, R0

.L008013E6:
// d_main.c:1026   case registered:
  MOV          title, RQ10
  MOV          .L00C02D52, RQ11
  ADD          R0, 1, RD12
  ADD          R0, 10, RD13
  BSR          sprintf, R1
// d_main.c:1032   break;
  BSR          .L008013E3, R0

.L008013E7:
// d_main.c:1033   case commercial:
  MOV          title, RQ10
  MOV          .L00C02D53, RQ11
  ADD          R0, 1, RD12
  ADD          R0, 10, RD13
  BSR          sprintf, R1
// d_main.c:1039   break;
  BSR          .L008013E3, R0

.L008013E8:
// d_main.c:1056   default:
  MOV          title, RQ10
  MOV          .L00C02D54, RQ11
  ADD          R0, 1, RD12
  ADD          R0, 10, RD13
  BSR          sprintf, R1
// d_main.c:1062   break;

.L008013E3:
// d_main.c:1065   printf ("%s\n",title);
  MOV          .L00C0237A, RQ10
  MOV          title, RQ11
  BSR          printf, R1
// d_main.c:1067   if (devparm)
  MOV.L        devparm, RD27
  BREQ.L       R0, RD27, .L008013E9
// d_main.c:1068   printf(D_DEVSTR);
  MOV          .L00C02D55, RQ10
  BSR          printf, R1

.L008013E9:
// d_main.c:1070   if (M_CheckParm("-cdrom"))
  MOV          .L00C01727, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L008013EA
// d_main.c:1071   {
  MOV          .L00C02D56, RQ10
  BSR          printf, R1
// d_main.c:1074   strcpy (basedefault,"c:/doomdata/default.cfg");
  MOV          basedefault, RQ10
  MOV          .L00C02D57, RQ11
  BSR          strcpy, R1

.L008013EA:
// d_main.c:1078   if ( (p=M_CheckParm ("-turbo")) )
  MOV          .L00C02D58, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RD18
  BREQ.L       R0, RQ9, .L008013EB
// d_main.c:1079   {
  ADD          R0, 200, RD22
// d_main.c:1082   if (p<myargc-1)
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L008013EC
// d_main.c:1083   scale = atoi (myargv[p+1]);
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          atoi, R1
  ADD          RQ10, 0, RD22

.L008013EC:
// d_main.c:1084   if (scale < 10)
  BRGE.L       10, RD22, .L008013ED
// d_main.c:1085   scale = 10;
  ADD          R0, 10, RD22

.L008013ED:
// d_main.c:1086   if (scale > 400)
  BRLE.L       400, RD22, .L008013EE
// d_main.c:1087   scale = 400;
  ADD          R0, 400, RD22

.L008013EE:
// d_main.c:1088   printf ("turbo scale: %i%%\n",scale);
  MOV          .L00C02D59, RQ10
  ADD          RD22, 0, RD11
  BSR          printf, R1
// d_main.c:1089   forwardmove[0] = forwardmove[0]*scale/100;
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 0), RQ9
  MULS.L       RQ9, RD22, RQ23
  ADD          RQ23, 0, RQ9
  ADD          R0, 100, RD26
  DIVS.L       RQ9, RD26, RQ9
  MOV.L        RQ9, (RQ27, 0)
// d_main.c:1090   forwardmove[1] = forwardmove[1]*scale/100;
  MOV.L        (RQ27, 4), RQ23
  MULS.L       RQ23, RD22, RQ9
  ADD          RQ9, 0, RQ23
  DIVS.L       RQ23, RD26, RQ23
  MOV.L        RQ23, (RQ27, 4)
// d_main.c:1091   sidemove[0] = sidemove[0]*scale/100;
  MOV          sidemove, RQ27
  MOV.L        (RQ27, 0), RQ9
  MULS.L       RQ9, RD22, RQ23
  ADD          RQ23, 0, RQ9
  DIVS.L       RQ9, RD26, RQ9
  MOV.L        RQ9, (RQ27, 0)
// d_main.c:1092   sidemove[1] = sidemove[1]*scale/100;
  MOV.L        (RQ27, 4), RQ23
  MULS.L       RQ23, RD22, RQ9
  ADD          RQ9, 0, RQ23
  DIVS.L       RQ23, RD26, RQ23
  MOV.L        RQ23, (RQ27, 4)

.L008013EB:
// d_main.c:1100   p = M_CheckParm ("-wart");
  MOV          .L00C02D5A, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1101   if (p)
  BREQ.L       R0, RD18, .L008013EF
// d_main.c:1102   {
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RD18), RQ8
  ADD          R0, 112, RD27
  MOV.B        RD27, (RQ8, 4)
// d_main.c:1106   switch (gamemode )
  MOV.L        gamemode, RD26
  BREQ.L       R0, RD26, .L008013F1
  MOV.L        gamemode, RD27
  BREQ.Q       3, RD27, .L008013F2
  MOV.L        gamemode, RD27
  BREQ.Q       1, RD27, .L008013F3
  MOV.L        gamemode, RD27
  BREQ.Q       4, RD27, .L008013F4
  MOV.L        gamemode, RD27
  BREQ.Q       2, RD27, .L008013F5
  BSR          .L008013F6, R0

.L008013F1:

.L008013F2:

.L008013F3:

.L008013F4:
// d_main.c:1111   case heretic:
  ADDS.L       RD18, 2, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADDS.L       RD18, 1, RQ23
  MOV.Q        (RQ27, RQ23), RQ8
  MOV.B        (RQ8, 0), RQ23
  ADD          R2, 112, RQ10
  MOV          .L00C02D5B, RQ11
  ADD          RQ23, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          sprintf, R1
// d_main.c:1114   printf("Warping to Episode %s, Map %s.\n",
  ADDS.L       RD18, 2, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADDS.L       RD18, 1, RQ9
  MOV.Q        (RQ27, RQ9), RQ21
  MOV          .L00C02D5C, RQ10
  ADD          RQ21, 0, RQ11
  ADD          RQ8, 0, RQ12
  BSR          printf, R1
// d_main.c:1116   break;
  BSR          .L008013F0, R0

.L008013F5:

.L008013F6:
// d_main.c:1119   default:
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          atoi, R1
  ADD          RQ10, 0, RD18
// d_main.c:1121   if (p<10)
  BRGE.L       10, RD18, .L008013F7
// d_main.c:1122   sprintf (file,"~"DEVMAPS"cdata/map0%i.wad", p);
  ADD          R2, 112, RQ10
  MOV          .L00C02D5D, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
  BSR          .L008013F8, R0

.L008013F7:
// d_main.c:1124   sprintf (file,"~"DEVMAPS"cdata/map%i.wad", p);
  ADD          R2, 112, RQ10
  MOV          .L00C02D5E, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1

.L008013F8:
// d_main.c:1125   break;

.L008013F0:
// d_main.c:1126   }
  ADD          R2, 112, RQ10
  BSR          D_AddFile, R1

.L008013EF:
// d_main.c:1130   p = M_CheckParm ("-file");
  MOV          .L00C02D5F, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1131   if (p)
  BREQ.L       R0, RD18, .L008013F9
// d_main.c:1135   modifiedgame = true;			// homebrew levels
  ADD          R0, 1, RD27
  MOV.L        RD27, modifiedgame
// d_main.c:1136   while (++p != myargc && myargv[p][0] != '-')
  BSR          .L008013FC, R0

.L008013FA:
// d_main.c:1137   D_AddFile (myargv[p]);
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RD18), RQ21
  ADD          RQ21, 0, RQ10
  BSR          D_AddFile, R1

.L008013FC:
  ADDS.L       RD18, 1, RD18
  MOV.L        myargc, RD27
  BREQ.Q       RD27, RD18, .L008013FD
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RD18), RQ8
  MOV.B        (RQ8, 0), RQ9
  BREQ.Q       45, RQ9, .L008013FD
  BSR          .L008013FA, R0

.L008013FD:

.L008013FB:

.L008013F9:
// d_main.c:1140   p = M_CheckParm ("-playdemo");
  MOV          .L00C02D60, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1142   if (!p)
  BRNE.L       R0, RD18, .L008013FF
// d_main.c:1143   p = M_CheckParm ("-timedemo");
  MOV          .L00C02D61, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18

.L008013FF:
// d_main.c:1145   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801400
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD18, .L00801400

.L00801401:
// d_main.c:1146   {
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          R2, 112, RQ10
  MOV          .L00C02D62, RQ11
  ADD          RQ8, 0, RQ12
  BSR          sprintf, R1
// d_main.c:1148   D_AddFile (file);
  ADD          R2, 112, RQ10
  BSR          D_AddFile, R1
// d_main.c:1149   printf("Playing demo %s.lmp.\n",myargv[p+1]);
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  MOV          .L00C02D63, RQ10
  ADD          RQ8, 0, RQ11
  BSR          printf, R1

.L00801400:
// d_main.c:1153   startskill = sk_medium;
  ADD          R0, 2, RD27
  MOV.L        RD27, startskill
// d_main.c:1154   startepisode = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, startepisode
// d_main.c:1155   startmap = 1;
  MOV.L        RD27, startmap
// d_main.c:1156   autostart = false;
  MOV.L        RD0, autostart
// d_main.c:1159   p = M_CheckParm ("-skill");
  MOV          .L00C02D64, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1160   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801403
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L00801403

.L00801404:
// d_main.c:1161   {
  ADDS.L       RD18, 1, RQ23
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ23), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADDS.L       RQ9, -49, RD27
  MOV.L        RD27, startskill
// d_main.c:1163   autostart = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, autostart

.L00801403:
// d_main.c:1166   p = M_CheckParm ("-episode");
  MOV          .L00C02D65, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1167   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801406
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD18, .L00801406

.L00801407:
// d_main.c:1168   {
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADDS.L       RQ9, -48, RD27
  MOV.L        RD27, startepisode
// d_main.c:1170   startmap = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, startmap
// d_main.c:1171   autostart = true;
  MOV.L        RD27, autostart

.L00801406:
// d_main.c:1174   p = M_CheckParm ("-timer");
  MOV          .L00C02D66, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1175   if (p && p < myargc-1 && deathmatch)
  BREQ.L       R0, RD18, .L00801409
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD18, .L00801409

.L0080140B:
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L00801409

.L0080140A:
// d_main.c:1178   time = atoi(myargv[p+1]);
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          atoi, R1
  ADD          RQ10, 0, RD20
// d_main.c:1179   printf("Levels will end after %d minute",time);
  MOV          .L00C02D67, RQ10
  ADD          RD20, 0, RD11
  BSR          printf, R1
// d_main.c:1180   if (time>1)
  BRLE.L       1, RD20, .L0080140D
// d_main.c:1181   printf("s");
  MOV          .L00C02D68, RQ10
  BSR          printf, R1

.L0080140D:
// d_main.c:1182   printf(".\n");
  MOV          .L00C02D69, RQ10
  BSR          printf, R1

.L00801409:
// d_main.c:1185   p = M_CheckParm ("-avg");
  MOV          .L00C02D6A, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1186   if (p && p < myargc-1 && deathmatch)
  BREQ.L       R0, RD18, .L0080140E
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L0080140E

.L00801410:
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L0080140E

.L0080140F:
// d_main.c:1187   printf("Austin Virtual Gaming: Levels will end after 20 minutes\n");
  MOV          .L00C02D6B, RQ10
  BSR          printf, R1

.L0080140E:
// d_main.c:1189   p = M_CheckParm ("-warp");
  MOV          .L00C02D6C, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1190   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801412
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD18, .L00801412

.L00801413:
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00801415
// d_main.c:1193   startmap = atoi (myargv[p+1]);
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          atoi, R1
  MOV.L        RQ10, startmap
  BSR          .L00801416, R0

.L00801415:
// d_main.c:1195   {
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADDS.L       RQ9, -48, RD26
  MOV.L        RD26, startepisode
// d_main.c:1197   startmap = myargv[p+2][0]-'0';
  ADDS.L       RD18, 2, RQ23
  MOV.Q        (RQ27, RQ23), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADDS.L       RQ9, -48, RD27
  MOV.L        RD27, startmap

.L00801416:
// d_main.c:1198   }
  ADD          R0, 1, RD27
  MOV.L        RD27, autostart

.L00801412:
// d_main.c:1203   printf ("V_Init: allocate screens.\n");
  MOV          .L00C02D6D, RQ10
  BSR          printf, R1
// d_main.c:1204   V_Init ();
  BSR          V_Init, R1
// d_main.c:1206   printf ("M_LoadDefaults: Load system defaults.\n");
  MOV          .L00C02D6E, RQ10
  BSR          printf, R1
// d_main.c:1207   M_LoadDefaults ();			  // load before initing other systems
  BSR          M_LoadDefaults, R1
// d_main.c:1209   printf ("Z_Init: Init zone memory allocation daemon. \n");
  MOV          .L00C02D6F, RQ10
  BSR          printf, R1
// d_main.c:1210   Z_Init ();
  BSR          Z_Init, R1
// d_main.c:1212   printf ("W_Init: Init WADfiles.\n");
  MOV          .L00C02D70, RQ10
  BSR          printf, R1
// d_main.c:1213   W_InitMultipleFiles (wadfiles);
  MOV          wadfiles, RQ10
  BSR          W_InitMultipleFiles, R1
// d_main.c:1258   switch ( gamemode )
  MOV.L        gamemode, RD27
  BREQ.L       R0, RD27, .L00801418
  MOV.L        gamemode, RD27
  BREQ.Q       6, RD27, .L00801419
  MOV.L        gamemode, RD27
  BREQ.Q       1, RD27, .L0080141A
  MOV.L        gamemode, RD27
  BREQ.Q       3, RD27, .L0080141B
  MOV.L        gamemode, RD27
  BREQ.Q       2, RD27, .L0080141C
  BSR          .L0080141D, R0

.L00801418:

.L00801419:
// d_main.c:1261   case indetermined:
  MOV          .L00C02D71, RQ10
  BSR          printf, R1
// d_main.c:1265   break;
  BSR          .L00801417, R0

.L0080141A:

.L0080141B:

.L0080141C:
// d_main.c:1268   case commercial:
  MOV          .L00C02D72, RQ10
  BSR          printf, R1
// d_main.c:1275   break;
  BSR          .L00801417, R0

.L0080141D:
// d_main.c:1279   break;

.L00801417:
// d_main.c:1282   printf ("M_Init: Init miscellaneous info.\n");
  MOV          .L00C02D73, RQ10
  BSR          printf, R1
// d_main.c:1283   M_Init ();
  BSR          M_Init, R1
// d_main.c:1285   printf ("R_Init: Init DOOM refresh daemon - ");
  MOV          .L00C02D74, RQ10
  BSR          printf, R1
// d_main.c:1286   R_Init ();
  BSR          R_Init, R1
// d_main.c:1288   printf ("\nP_Init: Init Playloop state.\n");
  MOV          .L00C02D75, RQ10
  BSR          printf, R1
// d_main.c:1289   P_Init ();
  BSR          P_Init, R1
// d_main.c:1291   printf ("I_Init: Setting up machine state.\n");
  MOV          .L00C02D76, RQ10
  BSR          printf, R1
// d_main.c:1292   I_Init ();
  BSR          I_Init, R1
// d_main.c:1294   printf ("D_CheckNetGame: Checking network game status.\n");
  MOV          .L00C02D77, RQ10
  BSR          printf, R1
// d_main.c:1295   D_CheckNetGame ();
  BSR          D_CheckNetGame, R1
// d_main.c:1297   printf ("S_Init: Setting up sound.\n");
  MOV          .L00C02D78, RQ10
  BSR          printf, R1
// d_main.c:1298   S_Init (snd_SfxVolume /* *8 */, snd_MusicVolume /* *8*/ );
  MOV.L        snd_SfxVolume, RD10
  MOV.L        snd_MusicVolume, RD11
  BSR          S_Init, R1
// d_main.c:1300   printf ("HU_Init: Setting up heads up display.\n");
  MOV          .L00C02D79, RQ10
  BSR          printf, R1
// d_main.c:1301   HU_Init ();
  BSR          HU_Init, R1
// d_main.c:1303   printf ("ST_Init: Init status bar.\n");
  MOV          .L00C02D7A, RQ10
  BSR          printf, R1
// d_main.c:1304   ST_Init ();
  BSR          ST_Init, R1
// d_main.c:1319   printf ("d_main: Debug Mark A0.\n");
  MOV          .L00C02D7B, RQ10
  BSR          printf, R1
// d_main.c:1322   p = M_CheckParm ("-record");
  MOV          .L00C02D7C, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1324   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L0080141E
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD18, .L0080141E

.L0080141F:
// d_main.c:1325   {
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  ADD          RQ8, 0, RQ10
  BSR          G_RecordDemo, R1
// d_main.c:1327   autostart = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, autostart

.L0080141E:
// d_main.c:1330   p = M_CheckParm ("-playdemo");
  MOV          .L00C02D60, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1331   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801421
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L00801421

.L00801422:
// d_main.c:1332   {
  ADD          R0, 1, RD27
  MOV.L        RD27, singledemo
// d_main.c:1334   G_DeferedPlayDemo (myargv[p+1]);
  ADDS.L       RD18, 1, RQ23
  MOV.Q        myargv, RQ26
  MOV.Q        (RQ26, RQ23), RQ8
  ADD          RQ8, 0, RQ10
  BSR          G_DeferedPlayDemo, R1
// d_main.c:1335   D_DoomLoop ();  // never returns
  BSR          D_DoomLoop, R1

.L00801421:
// d_main.c:1338   p = M_CheckParm ("-timedemo");
  MOV          .L00C02D61, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1339   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801424
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L00801424

.L00801425:
// d_main.c:1340   {
  ADDS.L       RD18, 1, RQ23
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ23), RQ8
  ADD          RQ8, 0, RQ10
  BSR          G_TimeDemo, R1
// d_main.c:1342   D_DoomLoop ();  // never returns
  BSR          D_DoomLoop, R1

.L00801424:
// d_main.c:1345   p = M_CheckParm ("-loadgame");
  MOV          .L00C02D7D, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// d_main.c:1346   if (p && p < myargc-1)
  BREQ.L       R0, RD18, .L00801427
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ9
  BRGE.L       RQ9, RD18, .L00801427

.L00801428:
  MOV          .L00C01727, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RQ23
  BREQ.L       R0, RQ23, .L0080142A
// d_main.c:1349   sprintf(file, "c:\\doomdata\\"SAVEGAMENAME"%c.dsg",myargv[p+1][0]);
  ADDS.L       RD18, 1, RQ9
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ9), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADD          R2, 112, RQ10
  MOV          .L00C02D7E, RQ11
  ADDS.L       RQ9, 0, RD12
  BSR          sprintf, R1
  BSR          .L0080142B, R0

.L0080142A:
// d_main.c:1351   sprintf(file, SAVEGAMENAME"%c.dsg",myargv[p+1][0]);
  ADDS.L       RD18, 1, RQ23
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ23), RQ8
  MOV.B        (RQ8, 0), RQ9
  ADD          R2, 112, RQ10
  MOV          .L00C02D7F, RQ11
  ADDS.L       RQ9, 0, RD12
  BSR          sprintf, R1

.L0080142B:
// d_main.c:1352   G_LoadGame (file);
  ADD          R2, 112, RQ10
  BSR          G_LoadGame, R1

.L00801427:
// d_main.c:1355   printf ("d_main: Debug Mark A1.\n");
  MOV          .L00C02D80, RQ10
  BSR          printf, R1
// d_main.c:1357   W_Profile ();	//BGB: Enabled
  BSR          W_Profile, R1
// d_main.c:1359   if ( gameaction != ga_loadgame )
  MOV.L        gameaction, RD27
  BREQ.Q       3, RD27, .L0080142C
  MOV.L        autostart, RD27
  BRNE.L       R0, RD27, .L0080142E
  MOV.L        netgame, RD27
  BRNE.L       R0, RD27, .L0080142E
  BSR          .L0080142D, R0

.L0080142E:
// d_main.c:1362   G_InitNew (startskill, startepisode, startmap);
  MOV.L        startskill, RD10
  MOV.L        startepisode, RD11
  MOV.L        startmap, RD12
  BSR          G_InitNew, R1
  BSR          .L00801430, R0

.L0080142D:
// d_main.c:1364   D_StartTitle ();				// start up intro loop
  BSR          D_StartTitle, R1

.L00801430:

.L0080142C:
// d_main.c:1368   printf ("d_main: Debug Mark A2.\n");
  MOV          .L00C02D81, RQ10
  BSR          printf, R1
// d_main.c:1370   D_DoomLoop ();  // never returns
  BSR          D_DoomLoop, R1

.L00C02D49:
  ADD          R2, 608, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

R_InitColormaps:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -392, R2
// r_data.c:1741   pal = W_CacheLumpName ("PLAYPAL", PU_CACHE);
  MOV          .L00C02053, RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpName, R1
  MOV.Q        RQ10, (R2, 200)
// r_data.c:1742   I_SetPalette (pal);
  MOV.Q        (R2, 200), RQ10
  BSR          I_SetPalette, R1
// r_data.c:1746   lump = W_GetNumForName("COLORMAP"); 
  MOV          .L00C02D88, RQ10
  BSR          W_GetNumForName, R1
  MOV.L        RD10, (R2, 180)
// r_data.c:1747   blen = W_LumpLength (lump);
  MOV.L        (R2, 180), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD27
// r_data.c:1748   length = blen + 255; 
  ADDS.L       RD27, 255, RD26
  MOV.L        RD26, (R2, 176)
  MOV.L        RD27, (R2, 172)
// r_data.c:1750   hdl=W_LumpHandle(lump);
  MOV.L        (R2, 180), RD10
  BSR          W_LumpHandle, R1
  MOV.L        RD10, (R2, 168)
// r_data.c:1752   lump1=lump;
  MOV.L        (R2, 180), RD20
// r_data.c:1753   hdl1=W_LumpHandle(lump1);
  ADD          RD20, 0, RD10
  BSR          W_LumpHandle, R1
  MOV.L        RD10, (R2, 164)
// r_data.c:1754   while(lump1>0)
  BSR          .L0080253D, R0

.L0080253B:
// r_data.c:1755   {
  ADDS.L       RD20, -1, RD20
// r_data.c:1757   hdl1=W_LumpHandle(lump1);
  ADD          RD20, 0, RD10
  BSR          W_LumpHandle, R1
  ADD          RQ10, 0, RD27
// r_data.c:1758   if(hdl1!=hdl)
  MOV.L        RD27, (R2, 164)
  MOV.L        (R2, 168), RD26
  BREQ.Q       RD26, RD27, .L0080253E
// r_data.c:1759   { lump1++; break; }
  ADDS.L       RD20, 1, RD20
  BSR          .L0080253C, R0

.L0080253E:

.L0080253D:
  BRGT.L       R0, RD20, .L0080253B

.L0080253C:
// r_data.c:1762   tbuf=malloc(length);
  MOV.L        (R2, 176), RD27
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 192)
// r_data.c:1764   colormaps = Z_Malloc ((length+256)*sizeof(lighttable_t), PU_STATIC, 0); 
  ADDS.L       RD27, 256, RQ18
  SHAD.L       RQ18, 1, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ26
// r_data.c:1765   colormaps = (lighttable_t *)( ((nlint)colormaps + 255)&(~0xff)); 
  ADD          RQ26, 0, RQ25
  ADD          RQ25, 255, RQ24
  AND          RQ24, -256, RQ25
  ADD          RQ25, 0, RQ26
  MOV.Q        RQ26, colormaps
// r_data.c:1767   colormaps_blend = Z_Malloc (
  ADDS.L       RD27, 256, RQ18
  SHAD.L       RQ18, 1, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ26
// r_data.c:1769   colormaps_blend = (lighttable_t *)
  ADD          RQ26, 0, RQ24
  ADD          RQ24, 255, RQ25
  AND          RQ25, -256, RQ24
  ADD          RQ24, 0, RQ26
  MOV.Q        RQ26, colormaps_blend
// r_data.c:1771   colormaps_blend_ix = -1;
  ADD          R0, -1, RD26
  MOV.L        RD26, colormaps_blend_ix
// r_data.c:1772   colormaps_blend_flash = -1;
  MOV.L        RD26, colormaps_blend_flash
// r_data.c:1773   colormaps_blend_base = NULL;
  MOV.Q        RQ0, colormaps_blend_base
// r_data.c:1774   colormaps_blend_len = length;
  MOV.L        RD27, colormaps_blend_len
// r_data.c:1780   colormaps_alt[0]=colormaps;
  MOV          colormaps_alt, RQ19
  MOV.Q        colormaps, RQ26
  MOV.Q        RQ26, (RQ19, 0)
// r_data.c:1781   colormaps_aidx[0]=lump1;
  MOV          colormaps_aidx, RQ26
  MOV.L        RD20, (RQ26, 0)
// r_data.c:1782   for(j=0; j<256; j++)
  ADD          R0, 0, RD23

.L0080253F:
// r_data.c:1783   d_8to16table_alt[0][j]=d_8to16table[j];
  MOV          d_8to16table, RQ27
  MOVU.W       (RQ27, RD23), RQ18
  MOV          d_8to16table_alt, RQ27
  ADD          RQ27, 0, RQ26
  MOVU.W       RQ18, (RQ26, RD23)
  MOV.Q        RQ26, (R2, 80)
  ADDS.L       RD23, 1, RD23
  BRLT.L       256, RD23, .L0080253F

.L00802541:
// r_data.c:1784   n_colormaps_alt=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, n_colormaps_alt
// r_data.c:1787   W_ReadLump (lump,tbuf);
  MOV.L        (R2, 180), RD10
  MOV.Q        (R2, 192), RQ11
  BSR          W_ReadLump, R1
// r_data.c:1789   for(i=0; i<blen; i++)
  ADD          R0, 0, RD22
  MOV.L        (R2, 172), RD27
  BRGE.L       RD27, RD22, .L00802544

.L00802542:
// r_data.c:1792   colormaps[i] = d_8to16table[tbuf[i]];
  MOV.Q        (R2, 192), RQ27
  MOVU.B       (RQ27, RD22), RQ18
  MOV          d_8to16table, RQ26
  MOVU.W       (RQ26, RQ18), RQ8
  MOV.Q        colormaps, RQ26
  MOVU.W       RQ8, (RQ26, RD22)
  ADDS.L       RD22, 1, RD22
  MOV.L        (R2, 172), RD26
  BRLT.L       RD26, RD22, .L00802542

.L00802544:
// r_data.c:1795   n=length/256;
  MOV.L        (R2, 176), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 120)
  ADD          R0, 256, RD25
  DIVS.L       RD26, RD25, RD26
  MOV.L        RD26, (R2, 120)
// r_data.c:1797   for(i=0; i<64; i++)
  ADD          R0, 0, RD22

.L00802545:
// r_data.c:1798   cmap_luma[i] = 0;
  MOV          cmap_luma, RQ27
  MOVU.B       RD0, (RQ27, RD22)
  ADDS.L       RD22, 1, RD22
  BRLT.L       64, RD22, .L00802545

.L00802547:
// r_data.c:1801   for(i=0; i<n; i++)
  ADD          R0, 0, RD22
  MOV.L        (R2, 120), RD27
  BRGE.L       RD27, RD22, .L0080254A

.L00802548:
// r_data.c:1802   {
  MOV.L        RD0, (R2, 124)
// r_data.c:1804   for(j=0; j<256; j++)
  ADD          R0, 0, RD23

.L0080254B:
// r_data.c:1805   {
  SHAD.L       RD22, 8, RQ18
  ADDS.L       RQ18, RD23, RQ8
  MOV.Q        (R2, 192), RQ27
  MOVU.B       (RQ27, RQ8), RD21
// r_data.c:1807   k=(2*pal[k*3+1]+pal[k*3+0]+pal[k*3+2])/4;
  ADD          R0, 3, R5
  MULS.L       RD21, R5, RQ18
  MOV.Q        (R2, 200), RQ26
  ADD          RQ26, RQ18, R5
  MOVU.B       (R5, 1), RQ18
  SHAD.L       RQ18, 1, RQ8
  ADD          R0, 3, R5
  MULS.L       RD21, R5, RQ18
  MOVU.B       (RQ26, RQ18), RQ9
  ADDS.L       RQ8, RQ9, RQ18
  ADD          R0, 3, R5
  MULS.L       RD21, R5, RQ8
  ADD          RQ26, RQ8, R5
  MOVU.B       (R5, 2), RQ8
  ADDS.L       RQ18, RQ8, RQ9
  ADD          RQ9, 0, RD21
  ADD          R0, 4, RD25
  DIVS.L       RD21, RD25, RD21
// r_data.c:1808   l+=k;
  MOV.L        (R2, 124), RD24
  ADDS.L       RD24, RD21, RD24
  MOV.L        RD24, (R2, 124)
  ADDS.L       RD23, 1, RD23
  BRLT.L       256, RD23, .L0080254B

.L0080254D:
// r_data.c:1809   }
  MOV.L        (R2, 124), RD18
  ADD          R0, 256, RD27
  DIVS.L       RQ18, RD27, RQ18
  MOV          cmap_luma, RQ26
  MOVU.B       RQ18, (RQ26, RD22)
  ADDS.L       RD22, 1, RD22
  MOV.L        (R2, 120), RD26
  BRLT.L       RD26, RD22, .L00802548

.L0080254A:
// r_data.c:1813   l=65536/cmap_luma[0];
  MOV          cmap_luma, RQ27
  MOVU.B       (RQ27, 0), RQ8
  LUI          16, RD26
  DIVS.L       RD26, RQ8, RD27
  MOV.L        RD27, (R2, 124)
// r_data.c:1814   for(i=0; i<64; i++)
  ADD          R0, 0, RD22

.L0080254E:
// r_data.c:1815   {
  MOV          cmap_luma, RQ27
  MOVU.B       (RQ27, RD22), RD23
// r_data.c:1817   j = (j * l) >> 8;
  MOV.L        (R2, 124), RD27
  MULS.L       RD23, RD27, RQ9
  SHAR         RQ9, 8, RD23
// r_data.c:1818   if(j>255)
  BRLE.L       255, RD23, .L00802551
// r_data.c:1819   j = 255;
  ADD          R0, 255, RD23

.L00802551:
// r_data.c:1820   cmap_luma[i] = j;
  MOV          cmap_luma, RQ27
  MOVU.B       RD23, (RQ27, RD22)
  ADDS.L       RD22, 1, RD22
  BRLT.L       64, RD22, .L0080254E

.L00802550:
// r_data.c:1825   for(i=0; i<32; i++)
  ADD          R0, 0, RD22

.L00802552:
// r_data.c:1826   {
  MOV          cmap_luma, RQ27
  MOVU.B       (RQ27, RD22), RD26
  MOV.L        RD26, (R2, 124)
// r_data.c:1828   for(j=0; j<256; j++)
  ADD          R0, 0, RD23

.L00802555:
// r_data.c:1829   {
  MOV.Q        colormaps, RQ27
  MOVU.W       (RQ27, RD23), RD21
// r_data.c:1831   cr=(k>>10)&31;
  SHAR         RD21, 10, RQ18
  AND          RQ18, 31, RD27
// r_data.c:1832   cg=(k>> 5)&31;
  SHAR         RD21, 5, RQ8
  AND          RQ8, 31, RD26
// r_data.c:1833   cb=(k>> 0)&31;
  AND          RD21, 31, RD25
// r_data.c:1835   cr=(cr*l+127)>>8;
  MOV.L        (R2, 124), RD24
  MULS.L       RD27, RD24, RQ9
  ADDS.L       RQ9, 127, RQ18
  SHAR         RQ18, 8, RD27
// r_data.c:1836   cg=(cg*l+127)>>8;
  MULS.L       RD26, RD24, RQ8
  ADDS.L       RQ8, 127, RQ9
  SHAR         RQ9, 8, RD26
  MOV.L        RD26, (R2, 156)
// r_data.c:1837   cb=(cb*l+127)>>8;
  MULS.L       RD25, RD24, RQ18
  ADDS.L       RQ18, 127, RQ8
  SHAR         RQ8, 8, RD25
  MOV.L        RD25, (R2, 152)
// r_data.c:1838   if(cr>31)cr=31;
  MOV.L        RD27, (R2, 160)
  BRLE.L       31, RD27, .L00802558
  ADD          R0, 31, RD27
  MOV.L        RD27, (R2, 160)

.L00802558:
// r_data.c:1839   if(cg>31)cg=31;
  MOV.L        (R2, 156), RD27
  BRLE.L       31, RD27, .L00802559
  ADD          R0, 31, RD27
  MOV.L        RD27, (R2, 156)

.L00802559:
// r_data.c:1840   if(cb>31)cb=31;
  MOV.L        (R2, 152), RD27
  BRLE.L       31, RD27, .L0080255A
  ADD          R0, 31, RD27
  MOV.L        RD27, (R2, 152)

.L0080255A:
// r_data.c:1842   k=colormaps[i*256+j];
  SHAD.L       RD22, 8, RQ9
  ADDS.L       RQ9, RD23, RQ18
  MOV.Q        colormaps, RQ27
  MOVU.W       (RQ27, RQ18), RD21
// r_data.c:1843   cr2=(k>>10)&31;
  SHAR         RD21, 10, RQ8
  AND          RQ8, 31, RD27
// r_data.c:1844   cg2=(k>> 5)&31;
  SHAR         RD21, 5, RQ9
  AND          RQ9, 31, RD26
// r_data.c:1845   cb2=(k>> 0)&31;
  AND          RD21, 31, RD25
// r_data.c:1847   dr=cr2-cr;
  MOV.L        (R2, 160), RD19
  SUBS.L       RD27, RD19, RD24
  MOV.L        RD27, (R2, 148)
// r_data.c:1848   dg=cg2-cg;
  MOV.L        (R2, 156), RD12
  SUBS.L       RD26, RD12, RD13
  MOV.L        RD26, (R2, 144)
// r_data.c:1849   db=cb2-cb;
  MOV.L        (R2, 152), RD10
  SUBS.L       RD25, RD10, RD11
  MOV.L        RD25, (R2, 140)
// r_data.c:1850   dr=dr^(dr>>31);
  SHAR         RD24, 31, RQ18
  XOR          RD24, RQ18, RD24
// r_data.c:1851   dg=dg^(dg>>31);
  SHAR         RD13, 31, RQ8
  XOR          RD13, RQ8, RD13
// r_data.c:1852   db=db^(db>>31);
  SHAR         RD11, 31, RQ9
  XOR          RD11, RQ9, RD11
// r_data.c:1853   k=dr+dg+db;
  ADDS.L       RD24, RD13, RQ18
  MOV.L        RD24, (R2, 136)
  MOV.L        RD13, (R2, 132)
  ADDS.L       RQ18, RD11, RD21
  MOV.L        RD11, (R2, 128)
// r_data.c:1854   if(k>12)
  BRLE.L       12, RD21, .L0080255B
// r_data.c:1855   {
  MOV.L        (R2, 148), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 160)
// r_data.c:1857   cg=cg2;
  MOV.L        (R2, 144), RD25
  ADD          RD25, 0, RD24
  MOV.L        RD24, (R2, 156)
// r_data.c:1858   cb=cb2;
  MOV.L        (R2, 140), RD19
  ADD          RD19, 0, RD13
  MOV.L        RD13, (R2, 152)

.L0080255B:
// r_data.c:1866   k=(cr<<10)|(cg<<5)|cb;
  MOV.L        (R2, 160), RD27
  SHAD.L       RD27, 10, RQ8
  MOV.L        (R2, 156), RD26
  SHAD.L       RD26, 5, RQ9
  OR           RQ8, RQ9, RQ18
  MOV.L        (R2, 152), RD25
  OR           RQ18, RD25, RD21
// r_data.c:1867   colormaps[i*256+j] = k;
  SHAD.L       RD22, 8, RQ8
  ADDS.L       RQ8, RD23, RQ9
  MOV.Q        colormaps, RQ24
  MOVU.W       RD21, (RQ24, RQ9)
  ADDS.L       RD23, 1, RD23
  BRLT.L       256, RD23, .L00802555

.L00802557:
  ADDS.L       RD22, 1, RD22
  BRLT.L       32, RD22, .L00802552

.L00802554:
// r_data.c:1874   lump = W_GetNumForNameBase(lump, "COLORMAP"); 
  MOV.L        (R2, 180), RD10
  MOV          .L00C02D88, RQ11
  BSR          W_GetNumForNameBase, R1
  MOV.L        RD10, (R2, 180)
// r_data.c:1875   while(lump>0)
  BSR          .L0080255E, R0

.L0080255C:
// r_data.c:1876   {
  MOV.L        (R2, 180), RD10
  MOV          .L00C02053, RQ11
  ADD          R0, 101, RD12
  BSR          W_CacheLumpNameBase, R1
  MOV.Q        RQ10, (R2, 80)
  MOV.Q        (R2, 80), RQ10
  BSR          I_SetPalette, R1
// r_data.c:1879   blen = W_LumpLength (lump);
  MOV.L        (R2, 180), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RD27
// r_data.c:1880   length = blen + 255; 
  ADDS.L       RD27, 255, RD26
  MOV.L        RD26, (R2, 176)
  MOV.L        RD27, (R2, 172)
// r_data.c:1882   hdl=W_LumpHandle(lump);
  MOV.L        (R2, 180), RD10
  BSR          W_LumpHandle, R1
  MOV.L        RD10, (R2, 168)
// r_data.c:1884   lump1=lump;
  MOV.L        (R2, 180), RD20
// r_data.c:1885   hdl1=W_LumpHandle(lump1);
  ADD          RD20, 0, RD10
  BSR          W_LumpHandle, R1
  MOV.L        RD10, (R2, 164)
// r_data.c:1886   while(lump1>0)
  BSR          .L00802561, R0

.L0080255F:
// r_data.c:1887   {
  ADDS.L       RD20, -1, RD20
// r_data.c:1889   hdl1=W_LumpHandle(lump1);
  ADD          RD20, 0, RD10
  BSR          W_LumpHandle, R1
  ADD          RQ10, 0, RD27
// r_data.c:1890   if(hdl1!=hdl)
  MOV.L        RD27, (R2, 164)
  MOV.L        (R2, 168), RD26
  BREQ.Q       RD26, RD27, .L00802562
// r_data.c:1891   { lump1++; break; }
  ADDS.L       RD20, 1, RD20
  BSR          .L00802560, R0

.L00802562:

.L00802561:
  BRGT.L       R0, RD20, .L0080255F

.L00802560:
// r_data.c:1896   tcol = Z_Malloc (length*sizeof(lighttable_t), PU_STATIC, 0); 
  MOV.L        (R2, 176), RD27
  SHAD.L       RD27, 1, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ26
// r_data.c:1897   tcol = (lighttable_t *)( ((nlint)tcol + 255)&~0xff); 
  ADD          RQ26, 255, RQ25
  AND          RQ25, -256, RQ24
  ADD          RQ24, 0, RQ26
// r_data.c:1899   colormaps_alt[n_colormaps_alt]=tcol;
  MOV          colormaps_alt, RQ19
  MOV.L        n_colormaps_alt, RD24
  MOV.Q        RQ26, (RQ19, RD24)
  MOV.Q        RQ26, (R2, 184)
// r_data.c:1900   colormaps_aidx[n_colormaps_alt]=lump1;
  MOV          colormaps_aidx, RQ19
  MOV.L        RD20, (RQ19, RD24)
// r_data.c:1901   for(j=0; j<256; j++)
  ADD          R0, 0, RD23

.L00802563:
// r_data.c:1902   d_8to16table_alt[n_colormaps_alt][j]=d_8to16table[j];
  MOV          d_8to16table, RQ27
  MOVU.W       (RQ27, RD23), RQ9
  MOV          d_8to16table_alt, RQ27
  MOV.L        n_colormaps_alt, RD26
  SHAD.L       RD26, 9, RQ25
  ADD          RQ27, RQ25, RQ25
  MOVU.W       RQ9, (RQ25, RD23)
  MOV.Q        RQ25, (R2, 80)
  ADDS.L       RD23, 1, RD23
  BRLT.L       256, RD23, .L00802563

.L00802565:
// r_data.c:1903   n_colormaps_alt++;
  MOV.L        n_colormaps_alt, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, n_colormaps_alt
// r_data.c:1906   W_ReadLump (lump,tbuf);
  MOV.L        (R2, 180), RD10
  MOV.Q        (R2, 192), RQ11
  BSR          W_ReadLump, R1
// r_data.c:1908   for(i=0; i<blen; i++)
  ADD          R0, 0, RD22
  MOV.L        (R2, 172), RD27
  BRGE.L       RD27, RD22, .L00802568

.L00802566:
// r_data.c:1911   tcol[i] = d_8to16table[tbuf[i]];
  MOV.Q        (R2, 192), RQ27
  MOVU.B       (RQ27, RD22), RQ9
  MOV          d_8to16table, RQ26
  MOVU.W       (RQ26, RQ9), RQ18
  MOV.Q        (R2, 184), RQ26
  MOVU.W       RQ18, (RQ26, RD22)
  ADDS.L       RD22, 1, RD22
  MOV.L        (R2, 172), RD25
  BRLT.L       RD25, RD22, .L00802566

.L00802568:
// r_data.c:1914   lump = W_GetNumForNameBase(lump, "COLORMAP"); 
  MOV.L        (R2, 180), RD10
  MOV          .L00C02D88, RQ11
  BSR          W_GetNumForNameBase, R1
  MOV.L        RD10, (R2, 180)

.L0080255E:
  MOV.L        (R2, 180), RD27
  BRGT.L       R0, RD27, .L0080255C

.L0080255D:

.L00C02D87:
  ADD          R2, 392, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

P_CrossSpecialLine:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  MOV.L        RD10, (R2, 124)
  ADD          RD11, 0, RD20
  ADD          RQ12, 0, RQ23
// p_spec.c:515   line = &lines[linenum];
  MOV.Q        lines, RQ27
  MOV.L        (R2, 124), RD13
  ADD          R0, 96, R5
  MUL.L        RD13, R5, RQ18
  ADD          RQ27, RQ18, RQ18
// p_spec.c:517   spop = line->special;
  MOV.W        (RQ18, 26), RD9
// p_spec.c:519   if(spop==1024)
  ADD          R0, 1024, RD27
  BRNE.Q       RD27, RD9, .L008020AD
// p_spec.c:520   {
  MOV.L        (R2, 124), RD10
  ADD          RD20, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          P_AcsCrossSpecialLine, R1
// p_spec.c:522   return;
  BSR          .L00C02D8E, R0

.L008020AD:
// p_spec.c:525   if(gamemode==heretic)
  MOV.L        gamemode, RD27
  BRNE.Q       4, RD27, .L008020AE
// p_spec.c:526   {
  BREQ.Q       100, RD9, .L008020B0
  BREQ.Q       105, RD9, .L008020B1
  BREQ.Q       106, RD9, .L008020B2
  BREQ.Q       107, RD9, .L008020B3
  BSR          .L008020B4, R0

.L008020B0:
// p_spec.c:529   case 100: spop=105; break;		//fast raise stairs (W)
  ADD          R0, 105, RD9
  BSR          .L008020AF, R0

.L008020B1:
// p_spec.c:531   case 105: spop=124; break;		//exit secret
  ADD          R0, 124, RD9
  BSR          .L008020AF, R0

.L008020B2:
// p_spec.c:532   case 106: spop=100; break;		//fast raise stairs (W)
  ADD          R0, 100, RD9
  BSR          .L008020AF, R0

.L008020B3:
// p_spec.c:533   case 107: spop=127; break;		//fast raise stairs (S)
  ADD          R0, 127, RD9
  BSR          .L008020AF, R0

.L008020B4:
// p_spec.c:534   default: break;

.L008020AF:

.L008020AE:
// p_spec.c:539   if (!thing->player)
  MOV.Q        (RQ23, 192), RQ21
  BRNE.Q       R0, RQ21, .L008020B5
// p_spec.c:542   switch(thing->type)
  MOV.L        (RQ23, 128), RQ8
  BREQ.Q       33, RQ8, .L008020B7
  BREQ.Q       34, RQ8, .L008020B8
  BREQ.Q       35, RQ8, .L008020B9
  BREQ.Q       31, RQ8, .L008020BA
  BREQ.Q       32, RQ8, .L008020BB
  BREQ.Q       16, RQ8, .L008020BC
  BSR          .L008020BD, R0

.L008020B7:

.L008020B8:

.L008020B9:

.L008020BA:

.L008020BB:

.L008020BC:
// p_spec.c:549   case MT_BRUISERSHOT:
  BSR          .L00C02D8E, R0
// p_spec.c:551   break;
  BSR          .L008020B6, R0

.L008020BD:
// p_spec.c:553   default: break;

.L008020B6:
// p_spec.c:557   ok = 0;
  MOV.L        RD0, (R2, 108)
// p_spec.c:559   switch(spop)
  BREQ.Q       39, RD9, .L008020BF
  BREQ.Q       97, RD9, .L008020C0
  BREQ.Q       125, RD9, .L008020C1
  BREQ.Q       126, RD9, .L008020C2
  BREQ.Q       4, RD9, .L008020C3
  BREQ.Q       10, RD9, .L008020C4
  BREQ.Q       88, RD9, .L008020C5
  BSR          .L008020BE, R0

.L008020BF:

.L008020C0:

.L008020C1:

.L008020C2:

.L008020C3:

.L008020C4:

.L008020C5:
// p_spec.c:567   case 88:	// PLAT DOWN-WAIT-UP-STAY RETRIGGER
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 108)
// p_spec.c:569   break;

.L008020BE:
  MOV.L        (R2, 108), RD27
  BREQ.L       R0, RD27, .L00C02D8E

.L008020B5:
// p_spec.c:577   switch (spop)
  AND          RD9, -1, RQ8
  BRGE.L       72, RQ8, .L00802110
  AND          RD9, -1, RQ8
  ADD          RQ8, -2, RQ10
  ADD          R0, 58, RQ6
  BRGTU.Q      RQ6, RQ10, .L0080210F
  LEA.B        .L00C80016, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80016:
  BSR          .L008020C7, R0
  BSR          .L008020C8, R0
  BSR          .L008020C9, R0
  BSR          .L008020CA, R0
  BSR          .L008020CB, R0
  BSR          .L0080210F, R0
  BSR          .L008020CC, R0
  BSR          .L0080210F, R0
  BSR          .L008020CD, R0
  BSR          .L0080210F, R0
  BSR          .L008020CE, R0
  BSR          .L008020CF, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020D0, R0
  BSR          .L008020D1, R0
  BSR          .L0080210F, R0
  BSR          .L008020D2, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020D3, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020D4, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020D5, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020D6, R0
  BSR          .L008020D7, R0
  BSR          .L008020D8, R0
  BSR          .L008020D9, R0
  BSR          .L008020DA, R0
  BSR          .L008020DB, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020DC, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020DD, R0
  BSR          .L008020DE, R0
  BSR          .L008020DF, R0
  BSR          .L0080210F, R0
  BSR          .L008020E0, R0
  BSR          .L008020E1, R0
  BSR          .L008020E2, R0
  BSR          .L008020E3, R0
  BSR          .L0080210F, R0

.L00802110:
  AND          RD9, -1, RQ27
  BRGE.L       98, RQ27, .L00802111
  AND          RD9, -1, RQ27
  ADD          RQ27, -72, RQ10
  ADD          R0, 26, RQ6
  BRGTU.Q      RQ6, RQ10, .L0080210F
  LEA.B        .L00C80017, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80017:
  BSR          .L008020EF, R0
  BSR          .L008020F0, R0
  BSR          .L008020F1, R0
  BSR          .L008020F2, R0
  BSR          .L008020F3, R0
  BSR          .L008020F4, R0
  BSR          .L0080210F, R0
  BSR          .L008020F5, R0
  BSR          .L008020F6, R0
  BSR          .L008020F7, R0
  BSR          .L008020F8, R0
  BSR          .L008020F9, R0
  BSR          .L008020FA, R0
  BSR          .L0080210F, R0
  BSR          .L008020FB, R0
  BSR          .L008020FC, R0
  BSR          .L008020FD, R0
  BSR          .L008020FE, R0
  BSR          .L008020FF, R0
  BSR          .L00802100, R0
  BSR          .L00802101, R0
  BSR          .L00802102, R0
  BSR          .L00802103, R0
  BSR          .L00802104, R0
  BSR          .L00802105, R0
  BSR          .L00802106, R0
  BSR          .L0080210F, R0

.L00802111:
  AND          RD9, -1, RQ27
  BRGE.L       110, RQ27, .L00802112
  AND          RD9, -1, RQ27
  ADD          RQ27, -98, RQ10
  ADD          R0, 12, RQ6
  BRGTU.Q      RQ6, RQ10, .L0080210F
  LEA.B        .L00C80018, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80018:
  BSR          .L00802107, R0
  BSR          .L0080210F, R0
  BSR          .L008020E7, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L0080210F, R0
  BSR          .L008020E4, R0
  BSR          .L00802108, R0
  BSR          .L00802109, R0
  BSR          .L0080210A, R0
  BSR          .L008020E5, R0
  BSR          .L008020E6, R0
  BSR          .L0080210F, R0

.L00802112:
  AND          RD9, -1, RQ22
  BRGE.L       125, RQ22, .L00802113
  BREQ.Q       110, RD9, .L008020E8
  BREQ.Q       119, RD9, .L008020E9
  BREQ.Q       120, RD9, .L0080210B
  BREQ.Q       121, RD9, .L008020EA
  BREQ.Q       124, RD9, .L008020EB

.L00802113:
  BREQ.Q       125, RD9, .L008020EC
  BREQ.Q       126, RD9, .L0080210C
  BREQ.Q       128, RD9, .L0080210D
  BREQ.Q       129, RD9, .L0080210E
  BREQ.Q       130, RD9, .L008020ED
  BREQ.Q       141, RD9, .L008020EE
  BSR          .L0080210F, R0

.L008020C7:
// p_spec.c:583   EV_DoDoor(line, vld_open);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:584   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:585   break;
  BSR          .L008020C6, R0

.L008020C8:
// p_spec.c:589   EV_DoDoor(line, vld_close);
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:590   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:591   break;
  BSR          .L008020C6, R0

.L008020C9:
// p_spec.c:595   EV_DoDoor(line, vld_normal);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:596   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:597   break;
  BSR          .L008020C6, R0

.L008020CA:
// p_spec.c:601   EV_DoFloor(line,raiseFloor);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:602   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:603   break;
  BSR          .L008020C6, R0

.L008020CB:
// p_spec.c:607   EV_DoCeiling(line,fastCrushAndRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:608   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:609   break;
  BSR          .L008020C6, R0

.L008020CC:
// p_spec.c:613   EV_BuildStairs(line,build8);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_BuildStairs, R1
// p_spec.c:614   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:615   break;
  BSR          .L008020C6, R0

.L008020CD:
// p_spec.c:619   EV_DoPlat(line,downWaitUpStay,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:620   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:621   break;
  BSR          .L008020C6, R0

.L008020CE:
// p_spec.c:625   EV_LightTurnOn(line,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:626   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:627   break;
  BSR          .L008020C6, R0

.L008020CF:
// p_spec.c:631   EV_LightTurnOn(line,255);
  ADD          RQ18, 0, RQ10
  ADD          R0, 255, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:632   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:633   break;
  BSR          .L008020C6, R0

.L008020D0:
// p_spec.c:637   EV_DoDoor(line,close30ThenOpen);
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:638   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:639   break;
  BSR          .L008020C6, R0

.L008020D1:
// p_spec.c:643   EV_StartLightStrobing(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_StartLightStrobing, R1
// p_spec.c:644   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:645   break;
  BSR          .L008020C6, R0

.L008020D2:
// p_spec.c:649   EV_DoFloor(line,lowerFloor);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:650   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:651   break;
  BSR          .L008020C6, R0

.L008020D3:
// p_spec.c:655   EV_DoPlat(line,raiseToNearestAndChange,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:656   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:657   break;
  BSR          .L008020C6, R0

.L008020D4:
// p_spec.c:661   EV_DoCeiling(line,crushAndRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:662   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:663   break;
  BSR          .L008020C6, R0

.L008020D5:
// p_spec.c:668   EV_DoFloor(line,raiseToTexture);
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:669   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:670   break;
  BSR          .L008020C6, R0

.L008020D6:
// p_spec.c:674   EV_LightTurnOn(line,35);
  ADD          RQ18, 0, RQ10
  ADD          R0, 35, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:675   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:676   break;
  BSR          .L008020C6, R0

.L008020D7:
// p_spec.c:680   EV_DoFloor(line,turboLower);
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:681   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:682   break;
  BSR          .L008020C6, R0

.L008020D8:
// p_spec.c:686   EV_DoFloor(line,lowerAndChange);
  ADD          RQ18, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:687   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:688   break;
  BSR          .L008020C6, R0

.L008020D9:
// p_spec.c:692   EV_DoFloor( line, lowerFloorToLowest );
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:693   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:694   break;
  BSR          .L008020C6, R0

.L008020DA:
// p_spec.c:698   EV_Teleport( line, side, thing );
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          EV_Teleport, R1
// p_spec.c:699   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:700   break;
  BSR          .L008020C6, R0

.L008020DB:
// p_spec.c:704   EV_DoCeiling( line, raiseToHighest );
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:705   EV_DoFloor( line, lowerFloorToLowest );
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:706   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:707   break;
  BSR          .L008020C6, R0

.L008020DC:
// p_spec.c:711   EV_DoCeiling( line, lowerAndCrush );
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:712   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:713   break;
  BSR          .L008020C6, R0

.L008020DD:
// p_spec.c:717   if((line->acs_spec==74) && (line->arg1>0))
  MOVU.B       (RQ18, 30), RQ22
  BRNE.Q       74, RQ22, .L00802114
  MOVU.B       (RQ18, 31), RQ22
  BRLE.L       R0, RQ22, .L00802114

.L00802115:
// p_spec.c:718   gamemap=line->arg1-1;
  MOVU.B       (RQ18, 31), RQ22
  ADDS.L       RQ22, -1, RD27
  MOV.L        RD27, gamemap

.L00802114:
// p_spec.c:720   G_ExitLevel ();
  BSR          G_ExitLevel, R1
// p_spec.c:721   break;
  BSR          .L008020C6, R0

.L008020DE:
// p_spec.c:725   EV_DoPlat(line,perpetualRaise,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:726   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:727   break;
  BSR          .L008020C6, R0

.L008020DF:
// p_spec.c:731   EV_StopPlat(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_StopPlat, R1
// p_spec.c:732   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:733   break;
  BSR          .L008020C6, R0

.L008020E0:
// p_spec.c:737   EV_DoFloor(line,raiseFloorCrush);
  ADD          RQ18, 0, RQ10
  ADD          R0, 9, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:738   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:739   break;
  BSR          .L008020C6, R0

.L008020E1:
// p_spec.c:743   EV_CeilingCrushStop(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_CeilingCrushStop, R1
// p_spec.c:744   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:745   break;
  BSR          .L008020C6, R0

.L008020E2:
// p_spec.c:749   EV_DoFloor(line,raiseFloor24);
  ADD          RQ18, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:750   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:751   break;
  BSR          .L008020C6, R0

.L008020E3:
// p_spec.c:755   EV_DoFloor(line,raiseFloor24AndChange);
  ADD          RQ18, 0, RQ10
  ADD          R0, 8, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:756   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:757   break;
  BSR          .L008020C6, R0

.L008020E4:
// p_spec.c:761   EV_TurnTagLightsOff(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_TurnTagLightsOff, R1
// p_spec.c:762   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:763   break;
  BSR          .L008020C6, R0

.L008020E5:
// p_spec.c:767   EV_DoDoor (line,blazeRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:768   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:769   break;
  BSR          .L008020C6, R0

.L008020E6:
// p_spec.c:773   EV_DoDoor (line,blazeOpen);
  ADD          RQ18, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:774   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:775   break;
  BSR          .L008020C6, R0

.L008020E7:
// p_spec.c:779   EV_BuildStairs(line,turbo16);
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_BuildStairs, R1
// p_spec.c:780   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:781   break;
  BSR          .L008020C6, R0

.L008020E8:
// p_spec.c:785   EV_DoDoor (line,blazeClose);
  ADD          RQ18, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:786   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:787   break;
  BSR          .L008020C6, R0

.L008020E9:
// p_spec.c:791   EV_DoFloor(line,raiseFloorToNearest);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:792   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:793   break;
  BSR          .L008020C6, R0

.L008020EA:
// p_spec.c:797   EV_DoPlat(line,blazeDWUS,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:798   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:799   break;
  BSR          .L008020C6, R0

.L008020EB:
// p_spec.c:803   G_SecretExitLevel ();
  BSR          G_SecretExitLevel, R1
// p_spec.c:804   break;
  BSR          .L008020C6, R0

.L008020EC:
// p_spec.c:808   if (!thing->player)
  MOV.Q        (RQ23, 192), RQ21
  BRNE.Q       R0, RQ21, .L00802117
// p_spec.c:809   {
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          EV_Teleport, R1
// p_spec.c:811   line->special = 0;
  MOV.W        RD0, (RQ18, 26)

.L00802117:
// p_spec.c:812   }
  BSR          .L008020C6, R0

.L008020ED:
// p_spec.c:817   EV_DoFloor(line,raiseFloorTurbo);
  ADD          RQ18, 0, RQ10
  ADD          R0, 10, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:818   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:819   break;
  BSR          .L008020C6, R0

.L008020EE:
// p_spec.c:823   EV_DoCeiling(line,silentCrushAndRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:824   line->special = 0;
  MOV.W        RD0, (RQ18, 26)
// p_spec.c:825   break;
  BSR          .L008020C6, R0

.L008020EF:
// p_spec.c:830   EV_DoCeiling( line, lowerAndCrush );
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:831   break;
  BSR          .L008020C6, R0

.L008020F0:
// p_spec.c:835   EV_DoCeiling(line,crushAndRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:836   break;
  BSR          .L008020C6, R0

.L008020F1:
// p_spec.c:840   EV_CeilingCrushStop(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_CeilingCrushStop, R1
// p_spec.c:841   break;
  BSR          .L008020C6, R0

.L008020F2:
// p_spec.c:845   EV_DoDoor(line, vld_close);
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:846   break;
  BSR          .L008020C6, R0

.L008020F3:
// p_spec.c:850   EV_DoDoor(line,close30ThenOpen);
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:851   break;
  BSR          .L008020C6, R0

.L008020F4:
// p_spec.c:855   EV_DoCeiling(line,fastCrushAndRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoCeiling, R1
// p_spec.c:856   break;
  BSR          .L008020C6, R0

.L008020F5:
// p_spec.c:860   EV_LightTurnOn(line,35);
  ADD          RQ18, 0, RQ10
  ADD          R0, 35, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:861   break;
  BSR          .L008020C6, R0

.L008020F6:
// p_spec.c:865   EV_LightTurnOn(line,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:866   break;
  BSR          .L008020C6, R0

.L008020F7:
// p_spec.c:870   EV_LightTurnOn(line,255);
  ADD          RQ18, 0, RQ10
  ADD          R0, 255, RD11
  BSR          EV_LightTurnOn, R1
// p_spec.c:871   break;
  BSR          .L008020C6, R0

.L008020F8:
// p_spec.c:875   EV_DoFloor( line, lowerFloorToLowest );
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:876   break;
  BSR          .L008020C6, R0

.L008020F9:
// p_spec.c:880   EV_DoFloor(line,lowerFloor);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:881   break;
  BSR          .L008020C6, R0

.L008020FA:
// p_spec.c:885   EV_DoFloor(line,lowerAndChange);
  ADD          RQ18, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:886   break;
  BSR          .L008020C6, R0

.L008020FB:
// p_spec.c:890   EV_DoDoor(line, vld_open);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:891   break;
  BSR          .L008020C6, R0

.L008020FC:
// p_spec.c:895   EV_DoPlat(line,perpetualRaise,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:896   break;
  BSR          .L008020C6, R0

.L008020FD:
// p_spec.c:900   EV_DoPlat(line,downWaitUpStay,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:901   break;
  BSR          .L008020C6, R0

.L008020FE:
// p_spec.c:905   EV_StopPlat(line);
  ADD          RQ18, 0, RQ10
  BSR          EV_StopPlat, R1
// p_spec.c:906   break;
  BSR          .L008020C6, R0

.L008020FF:
// p_spec.c:910   EV_DoDoor(line, vld_normal);
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:911   break;
  BSR          .L008020C6, R0

.L00802100:
// p_spec.c:915   EV_DoFloor(line,raiseFloor);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:916   break;
  BSR          .L008020C6, R0

.L00802101:
// p_spec.c:920   EV_DoFloor(line,raiseFloor24);
  ADD          RQ18, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:921   break;
  BSR          .L008020C6, R0

.L00802102:
// p_spec.c:925   EV_DoFloor(line,raiseFloor24AndChange);
  ADD          RQ18, 0, RQ10
  ADD          R0, 8, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:926   break;
  BSR          .L008020C6, R0

.L00802103:
// p_spec.c:930   EV_DoFloor(line,raiseFloorCrush);
  ADD          RQ18, 0, RQ10
  ADD          R0, 9, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:931   break;
  BSR          .L008020C6, R0

.L00802104:
// p_spec.c:936   EV_DoPlat(line,raiseToNearestAndChange,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:937   break;
  BSR          .L008020C6, R0

.L00802105:
// p_spec.c:942   EV_DoFloor(line,raiseToTexture);
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:943   break;
  BSR          .L008020C6, R0

.L00802106:
// p_spec.c:947   EV_Teleport( line, side, thing );
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          EV_Teleport, R1
// p_spec.c:948   break;
  BSR          .L008020C6, R0

.L00802107:
// p_spec.c:952   EV_DoFloor(line,turboLower);
  ADD          RQ18, 0, RQ10
  ADD          R0, 2, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:953   break;
  BSR          .L008020C6, R0

.L00802108:
// p_spec.c:957   EV_DoDoor (line,blazeRaise);
  ADD          RQ18, 0, RQ10
  ADD          R0, 5, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:958   break;
  BSR          .L008020C6, R0

.L00802109:
// p_spec.c:962   EV_DoDoor (line,blazeOpen);
  ADD          RQ18, 0, RQ10
  ADD          R0, 6, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:963   break;
  BSR          .L008020C6, R0

.L0080210A:
// p_spec.c:967   EV_DoDoor (line,blazeClose);
  ADD          RQ18, 0, RQ10
  ADD          R0, 7, RD11
  BSR          EV_DoDoor, R1
// p_spec.c:968   break;
  BSR          .L008020C6, R0

.L0080210B:
// p_spec.c:972   EV_DoPlat(line,blazeDWUS,0);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  ADD          R0, 0, RD12
  BSR          EV_DoPlat, R1
// p_spec.c:973   break;
  BSR          .L008020C6, R0

.L0080210C:
// p_spec.c:977   if (!thing->player)
  MOV.Q        (RQ23, 192), RQ21
  BRNE.Q       R0, RQ21, .L00802118
// p_spec.c:978   EV_Teleport( line, side, thing );
  ADD          RQ18, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RQ23, 0, RQ12
  BSR          EV_Teleport, R1

.L00802118:
// p_spec.c:979   break;
  BSR          .L008020C6, R0

.L0080210D:
// p_spec.c:983   EV_DoFloor(line,raiseFloorToNearest);
  ADD          RQ18, 0, RQ10
  ADD          R0, 4, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:984   break;
  BSR          .L008020C6, R0

.L0080210E:
// p_spec.c:988   EV_DoFloor(line,raiseFloorTurbo);
  ADD          RQ18, 0, RQ10
  ADD          R0, 10, RD11
  BSR          EV_DoFloor, R1
// p_spec.c:989   break;
  BSR          .L008020C6, R0

.L0080210F:

.L008020C6:

.L00C02D8E:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

HU_Ticker:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
// hu_stuff.c:530   if(!plr)
  MOV.Q        TU7A00CA82/plr, RQ27
  BREQ.Q       R0, RQ27, .L00C02D94
// hu_stuff.c:534   if (message_counter && !--message_counter)
  MOV.L        TU7A00CA82/message_counter, RD27
  BREQ.L       R0, RD27, .L00802C77
  MOV.L        TU7A00CA82/message_counter, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU7A00CA82/message_counter
  BRNE.L       R0, RD27, .L00802C77

.L00802C78:
// hu_stuff.c:535   {
  MOV.L        RD0, TU7A00CA82/message_on
// hu_stuff.c:537   message_nottobefuckedwith = false;
  MOV.L        RD0, TU7A00CA82/message_nottobefuckedwith

.L00802C77:
// hu_stuff.c:540   if (showMessages || message_dontfuckwithme)
  MOV.L        showMessages, RD27
  BRNE.L       R0, RD27, .L00802C7B
  MOV.L        message_dontfuckwithme, RD27
  BRNE.L       R0, RD27, .L00802C7B
  BSR          .L00802C7A, R0

.L00802C7B:
  MOV.Q        TU7A00CA82/plr, RQ27
  MOV.Q        (RQ27, 224), RQ23
  BREQ.Q       R0, RQ23, .L00802C7F
  MOV.L        TU7A00CA82/message_nottobefuckedwith, RD27
  BRNE.L       R0, RD27, .L00802C7F
  BSR          .L00802C7E, R0

.L00802C7F:
  MOV.Q        TU7A00CA82/plr, RQ27
  MOV.Q        (RQ27, 224), RQ23
  BREQ.Q       R0, RQ23, .L00802C7D
  MOV.L        message_dontfuckwithme, RD27
  BREQ.L       R0, RD27, .L00802C7D

.L00802C7E:
// hu_stuff.c:546   {
  MOV.Q        TU7A00CA82/plr, RQ27
  MOV.Q        (RQ27, 224), RQ23
  MOV          TU7A00CA82/w_message, RQ20
  ADD          RQ20, 0, RQ10
  ADD          RQ0, 0, RQ11
  ADD          RQ23, 0, RQ12
  BSR          HUlib_addMessageToSText, R1
// hu_stuff.c:548   plr->message = 0;
  ADD          R0, 0, RQ23
  MOV.Q        TU7A00CA82/plr, RQ27
  MOV.Q        RQ23, (RQ27, 224)
// hu_stuff.c:549   message_on = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CA82/message_on
// hu_stuff.c:550   message_counter = HU_MSGTIMEOUT;
  ADD          R0, 140, RD27
  MOV.L        RD27, TU7A00CA82/message_counter
// hu_stuff.c:551   message_nottobefuckedwith = message_dontfuckwithme;
  MOV.L        message_dontfuckwithme, RD27
  MOV.L        RD27, TU7A00CA82/message_nottobefuckedwith
// hu_stuff.c:552   message_dontfuckwithme = 0;
  ADD          R0, 0, RD27
  MOV.L        RD27, message_dontfuckwithme

.L00802C7D:

.L00802C7A:
// hu_stuff.c:558   if (netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00802C82
// hu_stuff.c:559   {
  ADD          R0, 0, RD18

.L00802C83:
// hu_stuff.c:561   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802C84
// hu_stuff.c:564   if (i != consoleplayer
  MOV.L        consoleplayer, RD27
  BREQ.Q       RD27, RD18, .L00802C86
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ27
  MOVU.B       (RQ27, 6), RQ9
  SHAD.Q       RQ9, 56, RD8
  SHAR.Q       RD8, 56, RD8
  BREQ.L       R0, RQ9, .L00802C86

.L00802C87:
  BRGT.L       5, RD8, .L00802C89
// hu_stuff.c:568   chat_dest[i] = c;
  MOV          TU7A00CA82/chat_dest, RQ27
  MOV.B        RD8, (RQ27, RD18)
  BSR          .L00802C8A, R0

.L00802C89:
  ADD          R0, 97, R5
  CMPGE.Q      RD8, R5, RQ9
  ADD          R0, 122, R5
  CMPLE.Q      RD8, R5, RQ22
  BTST.L       RQ22, RQ9, .L00802C8B
// hu_stuff.c:572   c = (char) shiftxform[(unsigned char) c];
  AND          RD8, 255, RQ9
  MOV.Q        shiftxform, RQ27
  MOV.B        (RQ27, RQ9), RQ22
  SHAD.Q       RQ22, 56, RD8
  SHAR.Q       RD8, 56, RD8

.L00802C8B:
// hu_stuff.c:573   rc = HUlib_keyInIText(&w_inputbuffer[i], c);
  MOV          TU7A00CA82/w_inputbuffer, RQ27
  ADD          R0, 136, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  AND          RD8, 255, RQ9
  ADD          RQ23, 0, RQ10
  AND          RQ9, 255, RD11
  BSR          HUlib_keyInIText, R1
  ADD          RQ10, 0, RD21
  BREQ.L       R0, RD21, .L00802C8C
  BRNE.Q       13, RD8, .L00802C8C

.L00802C8D:
  MOV          TU7A00CA82/w_inputbuffer, RQ27
  ADD          R0, 136, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ27
  MOV.L        (RQ27, 104), RQ9
  BREQ.L       R0, RQ9, .L00802C8F
  MOV          TU7A00CA82/chat_dest, RQ27
  MOV.B        (RQ27, RD18), RQ22
  MOV.L        consoleplayer, RD27
  ADDS.L       RD27, 1, RQ9
  BREQ.Q       RQ9, RQ22, .L00802C90
  MOV          TU7A00CA82/chat_dest, RQ27
  MOV.B        (RQ27, RD18), RQ22
  BREQ.Q       5, RQ22, .L00802C90
  BSR          .L00802C8F, R0

.L00802C90:
// hu_stuff.c:579   {
  MOV          TU7A00CA82/w_inputbuffer, RQ27
  ADD          R0, 136, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ27
  ADD          RQ27, 20, RQ23
  MOV          player_names, RQ25
  MOV.Q        (RQ25, RD18), RQ20
  MOV          TU7A00CA82/w_message, RQ25
  ADD          RQ25, 0, RQ26
  ADD          RQ26, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ23, 0, RQ12
  BSR          HUlib_addMessageToSText, R1
// hu_stuff.c:584   message_nottobefuckedwith = true;
  ADD          R0, 1, RD25
  MOV.L        RD25, TU7A00CA82/message_nottobefuckedwith
// hu_stuff.c:585   message_on = true;
  MOV.L        RD25, TU7A00CA82/message_on
// hu_stuff.c:586   message_counter = HU_MSGTIMEOUT;
  ADD          R0, 140, RD13
  MOV.L        RD13, TU7A00CA82/message_counter
  MOV.L        gamemode, RD13
  BRNE.Q       2, RD13, .L00802C93
// hu_stuff.c:588   S_StartSound(0, sfx_radio);
  ADD          RQ0, 0, RQ10
  ADD          R0, 108, RD11
  BSR          S_StartSound, R1
  BSR          .L00802C94, R0

.L00802C93:
// hu_stuff.c:590   S_StartSound(0, sfx_tink);
  ADD          RQ0, 0, RQ10
  ADD          R0, 87, RD11
  BSR          S_StartSound, R1

.L00802C94:

.L00802C8F:
// hu_stuff.c:591   }
  MOV          TU7A00CA82/w_inputbuffer, RQ27
  ADD          R0, 136, R5
  MUL.L        RD18, R5, RQ23
  ADD          RQ27, RQ23, RQ23
  ADD          RQ23, 0, RQ10
  BSR          HUlib_resetIText, R1

.L00802C8C:

.L00802C8A:
// hu_stuff.c:594   }
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 12, RQ27
  MOVU.B       RD0, (RQ27, 6)

.L00802C86:

.L00802C84:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802C83

.L00802C85:

.L00802C82:

.L00C02D94:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_clipMline:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.Q        RQ10, (R2, 152)
  ADD          RQ11, 0, RQ8
// am_map.c:872   register	int outcode1 = 0;
  ADD          RD0, 0, RD22
// am_map.c:873   register	int outcode2 = 0;
  ADD          R0, 0, RD21
// am_map.c:876   fpoint_t	tmp;
// am_map.c:890   if (ml->a.y > m_y2)
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y2, RD25
  BRLE.L       RD25, RQ18, .L008017F6
// am_map.c:891   outcode1 = TOP;
  ADD          R0, 8, RD22
  BSR          .L008017F7, R0

.L008017F6:
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y, RD25
  BRGE.L       RD25, RQ18, .L008017F8
// am_map.c:893   outcode1 = BOTTOM;
  ADD          R0, 4, RD22

.L008017F8:

.L008017F7:
// am_map.c:895   if (ml->b.y > m_y2)
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y2, RD25
  BRLE.L       RD25, RQ18, .L008017F9
// am_map.c:896   outcode2 = TOP;
  ADD          R0, 8, RD21
  BSR          .L008017FA, R0

.L008017F9:
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y, RD25
  BRGE.L       RD25, RQ18, .L008017FB
// am_map.c:898   outcode2 = BOTTOM;
  ADD          R0, 4, RD21

.L008017FB:

.L008017FA:
// am_map.c:900   if (outcode1 & outcode2)
  BTSTN.L      RD21, RD22, .L00C00E08
// am_map.c:903   if (ml->a.x < m_x)
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x, RD25
  BRGE.L       RD25, RQ18, .L008017FC
// am_map.c:904   outcode1 |= LEFT;
  OR           RD22, 1, RD22
  BSR          .L008017FD, R0

.L008017FC:
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x2, RD25
  BRLE.L       RD25, RQ18, .L008017FE
// am_map.c:906   outcode1 |= RIGHT;
  OR           RD22, 2, RD22

.L008017FE:

.L008017FD:
// am_map.c:908   if (ml->b.x < m_x)
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x, RD25
  BRGE.L       RD25, RQ18, .L008017FF
// am_map.c:909   outcode2 |= LEFT;
  OR           RD21, 1, RD21
  BSR          .L00801800, R0

.L008017FF:
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x2, RD25
  BRLE.L       RD25, RQ18, .L00801801
// am_map.c:911   outcode2 |= RIGHT;
  OR           RD21, 2, RD21

.L00801801:

.L00801800:
// am_map.c:913   if (outcode1 & outcode2)
  BTSTN.L      RD21, RD22, .L00C00E08
// am_map.c:917   fl->a.x = CXMTOF(ml->a.x);
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x, RD25
  SUBS.L       RQ18, RD25, RQ23
  ADD          RQ23, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ23
  MOV.L        TU7A00C41B/f_x, RD25
  ADDS.L       RD25, RQ23, RQ18
  ADD          RQ8, 0, RQ25
  MOV.L        RQ18, (RQ25, 0)
// am_map.c:918   fl->a.y = CYMTOF(ml->a.y);
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y, RD24
  SUBS.L       RQ18, RD24, RQ23
  ADD          RQ23, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ23
  MOV.L        TU7A00C41B/f_h, RD24
  SUBS.L       RD24, RQ23, RQ18
  MOV.L        TU7A00C41B/f_y, RD24
  ADDS.L       RD24, RQ18, RQ23
  ADD          RQ8, 0, RQ25
  MOV.L        RQ23, (RQ25, 4)
// am_map.c:919   fl->b.x = CXMTOF(ml->b.x);
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        TU7A00C41B/m_x, RD24
  SUBS.L       RQ18, RD24, RQ23
  ADD          RQ23, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ23
  MOV.L        TU7A00C41B/f_x, RD24
  ADDS.L       RD24, RQ23, RQ18
  ADD          RQ8, 8, RQ25
  MOV.L        RQ18, (RQ25, 0)
// am_map.c:920   fl->b.y = CYMTOF(ml->b.y);
  ADD          RQ27, 8, RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        TU7A00C41B/m_y, RD24
  SUBS.L       RQ18, RD24, RQ23
  ADD          RQ23, 0, RD10
  MOV.L        TU7A00C41B/scale_mtof, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SHAR         RQ18, 16, RQ23
  MOV.L        TU7A00C41B/f_h, RD24
  SUBS.L       RD24, RQ23, RQ18
  MOV.L        TU7A00C41B/f_y, RD24
  ADDS.L       RD24, RQ18, RQ23
  ADD          RQ8, 8, RQ25
  MOV.L        RQ23, (RQ25, 4)
// am_map.c:922   DOOUTCODE(outcode1, fl->a.x, fl->a.y);
  ADD          R0, 0, RD22
  ADD          RQ8, 0, RQ25
  MOV.L        (RQ25, 4), RQ18
  BRGE.L       R0, RQ18, .L00801802
  OR           RD22, 8, RD22
  BSR          .L00801803, R0

.L00801802:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.L        TU7A00C41B/f_h, RD26
  BRLT.L       RD26, RQ18, .L00801804
  OR           RD22, 4, RD22

.L00801804:

.L00801803:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ18
  BRGE.L       R0, RQ18, .L00801805
  OR           RD22, 1, RD22
  BSR          .L00801806, R0

.L00801805:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.L        TU7A00C41B/f_w, RD26
  BRLT.L       RD26, RQ18, .L00801807
  OR           RD22, 2, RD22

.L00801807:

.L00801806:
  ADD          R0, 0, RD21
// am_map.c:923   DOOUTCODE(outcode2, fl->b.x, fl->b.y);
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ18
  BRGE.L       R0, RQ18, .L00801808
  OR           RD21, 8, RD21
  BSR          .L00801809, R0

.L00801808:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.L        TU7A00C41B/f_h, RD26
  BRLT.L       RD26, RQ18, .L0080180A
  OR           RD21, 4, RD21

.L0080180A:

.L00801809:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ18
  BRGE.L       R0, RQ18, .L0080180B
  OR           RD21, 1, RD21
  BSR          .L0080180C, R0

.L0080180B:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.L        TU7A00C41B/f_w, RD26
  BRLT.L       RD26, RQ18, .L0080180D
  OR           RD21, 2, RD21

.L0080180D:

.L0080180C:
// am_map.c:925   if (outcode1 & outcode2)
  BTSTN.L      RD21, RD22, .L00C00E08
// am_map.c:928   while (outcode1 | outcode2)
  BSR          .L00801810, R0

.L0080180E:
// am_map.c:932   if (outcode1)
  BREQ.L       R0, RD22, .L00801811
// am_map.c:933   outside = outcode1;
  MOV.L        RD22, (R2, 140)
  BSR          .L00801812, R0

.L00801811:
// am_map.c:935   outside = outcode2;
  MOV.L        RD21, (R2, 140)

.L00801812:
// am_map.c:938   if (outside & TOP)
  MOV.L        (R2, 140), RD27
  ADD          R0, 8, RD26
  BTST.L       RD26, RD27, .L00801813
// am_map.c:939   {
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ18
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ23
  SUBS.L       RQ18, RQ23, RD26
// am_map.c:941   dx = fl->b.x - fl->a.x;
  MOV.L        (RQ27, 0), RQ18
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ23
  SUBS.L       RQ18, RQ23, RD25
// am_map.c:942   tmp.x = fl->a.x + (dx*(fl->a.y))/dy;
  MOV.L        (RQ27, 4), RQ18
  MULS.L       RD25, RQ18, RQ9
  MOV.L        RD25, (R2, 124)
  DIVS.L       RQ9, RD26, RQ18
  MOV.L        RD26, (R2, 120)
  ADDS.L       RQ23, RQ18, RQ9
  ADD          R2, 128, RQ24
  MOV.L        RQ9, (RQ24, 0)
// am_map.c:943   tmp.y = 0;
  MOV.L        RD0, (RQ24, 4)
  BSR          .L00801814, R0

.L00801813:
  MOV.L        (R2, 140), RD27
  ADD          R0, 4, RD26
  BTST.L       RD26, RD27, .L00801815
// am_map.c:946   {
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ9
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ18
  SUBS.L       RQ9, RQ18, RD26
// am_map.c:948   dx = fl->b.x - fl->a.x;
  MOV.L        (RQ27, 0), RQ23
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ9
  SUBS.L       RQ23, RQ9, RD25
// am_map.c:949   tmp.x = fl->a.x + (dx*(fl->a.y-f_h))/dy;
  MOV.L        (RQ27, 4), RQ18
  MOV.L        TU7A00C41B/f_h, RD24
  SUBS.L       RQ18, RD24, RQ23
  MULS.L       RD25, RQ23, RQ18
  MOV.L        RD25, (R2, 124)
  DIVS.L       RQ18, RD26, RQ23
  MOV.L        RD26, (R2, 120)
  ADDS.L       RQ9, RQ23, RQ18
  ADD          R2, 128, RQ13
  MOV.L        RQ18, (RQ13, 0)
// am_map.c:950   tmp.y = f_h-1;
  ADDS.L       RD24, -1, RQ23
  MOV.L        RQ23, (RQ13, 4)
  BSR          .L00801816, R0

.L00801815:
  MOV.L        (R2, 140), RD27
  ADD          R0, 2, RD26
  BTST.L       RD26, RD27, .L00801817
// am_map.c:953   {
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ9
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ18
  SUBS.L       RQ9, RQ18, RD26
// am_map.c:955   dx = fl->b.x - fl->a.x;
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ9
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ18
  SUBS.L       RQ9, RQ18, RD25
// am_map.c:956   tmp.y = fl->a.y + (dy*(f_w-1 - fl->a.x))/dx;
  MOV.L        (RQ27, 4), RQ23
  MOV.L        TU7A00C41B/f_w, RD24
  ADDS.L       RD24, -1, RQ9
  SUBS.L       RQ9, RQ18, RQ20
  MULS.L       RD26, RQ20, RQ18
  MOV.L        RD26, (R2, 120)
  DIVS.L       RQ18, RD25, RQ9
  MOV.L        RD25, (R2, 124)
  ADDS.L       RQ23, RQ9, RQ20
  ADD          R2, 128, RQ13
  MOV.L        RQ20, (RQ13, 4)
// am_map.c:957   tmp.x = f_w-1;
  ADDS.L       RD24, -1, RQ18
  MOV.L        RQ18, (RQ13, 0)
  BSR          .L00801818, R0

.L00801817:
  MOV.L        (R2, 140), RD27
  ADD          R0, 1, RD26
  BTST.L       RD26, RD27, .L00801819
// am_map.c:960   {
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ9
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ20
  SUBS.L       RQ9, RQ20, RD26
// am_map.c:962   dx = fl->b.x - fl->a.x;
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ9
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ20
  SUBS.L       RQ9, RQ20, RD25
// am_map.c:963   tmp.y = fl->a.y + (dy*(-fl->a.x))/dx;
  MOV.L        (RQ27, 4), RQ18
  SUBS.L       RD0, RQ20, RQ23
  MULS.L       RD26, RQ23, RQ9
  MOV.L        RD26, (R2, 120)
  DIVS.L       RQ9, RD25, RQ20
  MOV.L        RD25, (R2, 124)
  ADDS.L       RQ18, RQ20, RQ23
  ADD          R2, 128, RQ24
  MOV.L        RQ23, (RQ24, 4)
// am_map.c:964   tmp.x = 0;
  MOV.L        RD0, (RQ24, 0)

.L00801819:

.L00801818:

.L00801816:

.L00801814:
// am_map.c:967   if (outside == outcode1)
  MOV.L        (R2, 140), RD27
  BRNE.Q       RD22, RD27, .L0080181A
// am_map.c:968   {
  ADD          R2, 128, RQ27
  ADD          RQ8, 0, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        RQ11, (RQ10, 0)
// am_map.c:970   DOOUTCODE(outcode1, fl->a.x, fl->a.y);
  ADD          R0, 0, RD22
  ADD          RQ8, 0, RQ26
  MOV.L        (RQ26, 4), RQ9
  BRGE.L       R0, RQ9, .L0080181B
  OR           RD22, 8, RD22
  BSR          .L0080181C, R0

.L0080181B:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        TU7A00C41B/f_h, RD26
  BRLT.L       RD26, RQ9, .L0080181D
  OR           RD22, 4, RD22

.L0080181D:

.L0080181C:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ9
  BRGE.L       R0, RQ9, .L0080181E
  OR           RD22, 1, RD22
  BSR          .L0080181F, R0

.L0080181E:
  ADD          RQ8, 0, RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV.L        TU7A00C41B/f_w, RD26
  BRLT.L       RD26, RQ9, .L00801820
  OR           RD22, 2, RD22

.L00801820:

.L0080181F:
  BSR          .L00801821, R0

.L0080181A:
// am_map.c:973   {
  ADD          R2, 128, RQ27
  ADD          RQ8, 8, RQ10
  MOV.Q        (RQ27, 0), RQ11
  MOV.Q        RQ11, (RQ10, 0)
// am_map.c:975   DOOUTCODE(outcode2, fl->b.x, fl->b.y);
  ADD          R0, 0, RD21
  ADD          RQ8, 8, RQ26
  MOV.L        (RQ26, 4), RQ9
  BRGE.L       R0, RQ9, .L00801822
  OR           RD21, 8, RD21
  BSR          .L00801823, R0

.L00801822:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        TU7A00C41B/f_h, RD26
  BRLT.L       RD26, RQ9, .L00801824
  OR           RD21, 4, RD21

.L00801824:

.L00801823:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ9
  BRGE.L       R0, RQ9, .L00801825
  OR           RD21, 1, RD21
  BSR          .L00801826, R0

.L00801825:
  ADD          RQ8, 8, RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV.L        TU7A00C41B/f_w, RD26
  BRLT.L       RD26, RQ9, .L00801827
  OR           RD21, 2, RD21

.L00801827:

.L00801826:

.L00801821:
// am_map.c:978   if (outcode1 & outcode2)
  BTSTN.L      RD21, RD22, .L00C00E08

.L00801810:
  OR           RD22, RD21, RQ20
  BRNE.L       R0, RQ20, .L0080180E

.L0080180F:
// am_map.c:982   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02D9A, R0

.L00C00E08:
  ADD          R0, 0, RQ10

.L00C02D9A:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

freadSlowB:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 168)
  ADD          RQ11, 0, RQ18
  MOV.Q        RQ12, (R2, 152)
  ADD          RQ13, 0, RQ21
// pdpc201/stdio.c:903   
  MOV.L        RD0, (R2, 132)
// pdpc201/stdio.c:905   
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 40), RQ23
  SUB          RQ9, RQ23, RQ8
  ADD          RQ8, 0, RQ27
  MOV.Q        RQ27, (R2, 136)
// pdpc201/stdio.c:906   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (R2, 168), RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:907   
  MOV.Q        RQ27, (RQ21, 0)
// pdpc201/stdio.c:908   
  MOV.Q        (RQ18, 16), RQ8
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        (RQ18, 24), RQ23
  SUB          RQ9, RQ23, RQ20
  ADD          RQ8, RQ20, RQ26
  MOV.Q        RQ26, (RQ18, 16)
// pdpc201/stdio.c:909   
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        (R2, 152), RQ25
  BRLTU.Q      RQ8, RQ25, .L00800358
// pdpc201/stdio.c:910   
  MOV.Q        (RQ18, 48), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:912   
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 8)
// pdpc201/stdio.c:914   
  ADD          R2, 132, RQ23
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        (R2, 152), RQ26
  SUB          RQ26, RQ8, RQ20
  MOV.Q        (RQ21, 0), RQ25
  MOV.Q        (R2, 168), RQ24
  ADD          RQ24, RQ25, RQ9
  MOV.L        (RQ18, 0), RQ19
  ADD          RQ19, 0, RD10
  ADD          RQ9, 0, RQ11
  ADD          RQ20, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          __read, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RQ22
  MOV.L        (R2, 132), RD27
  BREQ.L       R0, RD27, .L00800359
// pdpc201/stdio.c:919   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ22, 0, RQ27
  MOV.L        RQ27, (RQ9, 0)
// pdpc201/stdio.c:921   
  ADD          RQ0, 0, RQ22
// pdpc201/stdio.c:922   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 56)
  BSR          .L0080035A, R0

.L00800359:
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        (R2, 152), RQ27
  SUB          RQ27, RQ8, RQ20
  BREQ.Q       RQ20, RQ22, .L0080035B
// pdpc201/stdio.c:925   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)

.L0080035B:

.L0080035A:
// pdpc201/stdio.c:927   
  MOV.Q        (RQ21, 0), RQ27
  ADD          RQ27, RQ22, RQ8
  MOV.Q        RQ8, (RQ21, 0)
// pdpc201/stdio.c:929   
  MOV.Q        (RQ18, 16), RQ20
  ADD          RQ20, RQ22, RQ27
  MOV.Q        RQ27, (RQ18, 16)
  BSR          .L0080035C, R0

.L00800358:
// pdpc201/stdio.c:935   
  MOV.Q        (RQ18, 24), RQ9
  MOV.Q        RQ9, (RQ18, 40)
// pdpc201/stdio.c:937   
  ADD          R2, 132, RQ23
  MOV.Q        (RQ18, 32), RQ8
  MOV.Q        (RQ18, 24), RQ9
  MOV.L        (RQ18, 0), RQ27
  ADD          RQ27, 0, RD10
  ADD          RQ9, 0, RQ11
  ADD          RQ8, 0, RQ12
  ADD          RQ23, 0, RQ13
  BSR          __read, R1
  ADD          RQ10, 0, RQ26
  ADDS.L       RQ26, 0, RQ22
// pdpc201/stdio.c:941   
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        (R2, 152), RQ25
  SUB          RQ25, RQ8, RQ24
  MOV.Q        RQ24, (R2, 120)
// pdpc201/stdio.c:942   
  MOV.L        (R2, 132), RD19
  BREQ.L       R0, RD19, .L0080035D
// pdpc201/stdio.c:943   
  BSR          __get_errno, R1
  ADD          RQ10, 0, RQ9
  ADDS.L       RQ22, 0, RQ27
  MOV.L        RQ27, (RQ9, 0)
// pdpc201/stdio.c:945   
  ADD          RQ0, 0, RQ22
// pdpc201/stdio.c:946   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ18, 56)
  BSR          .L0080035E, R0

.L0080035D:
  MOV.Q        (R2, 120), RQ27
  BRGEU.Q      RQ27, RQ22, .L0080035F
// pdpc201/stdio.c:949   
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 60)

.L0080035F:

.L0080035E:
// pdpc201/stdio.c:951   
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, RQ22, RQ23
  MOV.Q        RQ23, (RQ18, 48)
// pdpc201/stdio.c:953   
  MOV.Q        (RQ18, 48), RQ9
  ADD          R0, 10, RD27
  MOV.B        RD27, (RQ9, 0)
// pdpc201/stdio.c:954   
  MOV.Q        (RQ18, 48), RQ23
  MOV.Q        (RQ18, 40), RQ9
  SUB          RQ23, RQ9, RQ8
  ADD          RQ8, 0, RQ26
// pdpc201/stdio.c:955   
  MOV.Q        RQ26, (R2, 136)
  MOV.Q        (R2, 120), RQ25
  BRLEU.Q      RQ25, RQ26, .L00800360
// pdpc201/stdio.c:956   
  MOV.Q        (R2, 120), RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 136)

.L00800360:
// pdpc201/stdio.c:958   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (RQ21, 0), RQ8
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, RQ8, RQ23
  ADD          RQ23, 0, RQ10
  ADD          RQ9, 0, RQ11
  MOV.Q        (R2, 136), RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:962   
  MOV.Q        (RQ18, 40), RQ9
  MOV.Q        (R2, 136), RQ26
  ADD          RQ9, RQ26, RQ23
  MOV.Q        RQ23, (RQ18, 40)
// pdpc201/stdio.c:963   
  MOV.Q        (RQ21, 0), RQ8
  ADD          RQ8, RQ26, RQ20
  MOV.Q        RQ20, (RQ21, 0)

.L0080035C:
// pdpc201/stdio.c:964   

.L00C02DA0:
  ADD          R2, 360, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

D_ArbitrateNetStart:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.X        R26, (R2, 48)
  MOV.X        R20, (R2, 24)
  MOV.X        R8, (R2, 0)
  MOV.Q        R23, (R2, 40)
  MOV.Q        R18, (R2, 16)
  ADD          R2, -376, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R0, 6, RD21
  ADD          R0, 32, RQ20
// d_net.c:504   boolean		gotinfo[MAXNETNODES];
// d_net.c:506   autostart = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, autostart
// d_net.c:507   memset (gotinfo,0,sizeof(gotinfo));
  ADD          R2, 96, RQ27
  MOV.Q        RQ0, (RQ27, 0)
  MOV.Q        RQ0, (RQ27, 8)
  MOV.Q        RQ0, (RQ27, 16)
  MOV.Q        RQ0, (RQ27, 24)
// d_net.c:509   if (doomcom->consoleplayer)
  MOV.Q        doomcom, RQ26
  MOV.W        (RQ26, 32), RQ18
  BREQ.L       R0, RQ18, .L0080147B
// d_net.c:512   printf ("listening for network start info...\n");
  MOV          .L00C02DA7, RQ10
  BSR          printf, R1
// d_net.c:513   while (1)

.L0080147C:
// d_net.c:514   {
  BSR          CheckAbort, R1
// d_net.c:516   if (!HGetPacket ())
  BSR          HGetPacket, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L0080147C
// d_net.c:518   if (netbuffer->checksum & NCMD_SETUP)
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  LUI          0x00020000, RD27
  BTST.L       RD27, RQ18, .L0080147F
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 6), RQ18
  BREQ.Q       110, RQ18, .L00801480
// d_net.c:521   I_Error ("Different DOOM versions cannot play a net game!");
  MOV          .L00C02DA8, RQ10
  BSR          I_Error, R1

.L00801480:
// d_net.c:522   startskill = netbuffer->retransmitfrom & 15;
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ18
  AND          RQ18, 15, RD26
  MOV.L        RD26, startskill
// d_net.c:523   deathmatch = (netbuffer->retransmitfrom & 0xc0) >> 6;
  AND          RQ18, 192, RQ9
  SHAR         RQ9, 6, RD26
  MOV.L        RD26, deathmatch
// d_net.c:524   nomonsters = (netbuffer->retransmitfrom & 0x20) > 0;
  AND          RQ18, 32, RQ9
  CMPGT.Q      RQ9, R0, RD26
  MOV.L        RD26, nomonsters
// d_net.c:525   respawnparm = (netbuffer->retransmitfrom & 0x10) > 0;
  AND          RQ18, 16, RQ9
  CMPGT.Q      RQ9, R0, RD26
  MOV.L        RD26, respawnparm
// d_net.c:526   startmap = netbuffer->starttic & 0x3f;
  MOVU.B       (RQ27, 5), RQ18
  AND          RQ18, 63, RD27
  MOV.L        RD27, startmap
// d_net.c:527   startepisode = netbuffer->starttic >> 6;
  SHLR         RQ18, 6, RD27
  MOV.L        RD27, startepisode
// d_net.c:528   return;
  BSR          .L00C02DA6, R0

.L0080147F:
  BSR          .L0080147C, R0

.L0080147D:
  BSR          .L00801481, R0

.L0080147B:
// d_net.c:535   printf ("sending network start info...\n");
  MOV          .L00C02DA9, RQ10
  BSR          printf, R1
// d_net.c:536   do

.L00801482:
// d_net.c:537   {
  BSR          CheckAbort, R1
// d_net.c:539   for (i=0 ; i<doomcom->numnodes ; i++)
  ADD          RD0, 0, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ9
  BRGE.L       RQ9, RD8, .L00801487

.L00801485:
// d_net.c:540   {
  MOV.L        startskill, RD27
  MOV.Q        netbuffer, RQ26
  MOVU.B       RD27, (RQ26, 4)
// d_net.c:542   if (deathmatch)
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L00801488
// d_net.c:543   netbuffer->retransmitfrom |= (deathmatch<<6);
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ18
  MOV.L        deathmatch, RD26
  SHAD.L       RD26, 6, RQ9
  OR           RQ18, RQ9, RQ23
  MOVU.B       RQ23, (RQ27, 4)

.L00801488:
// d_net.c:544   if (nomonsters)
  MOV.L        nomonsters, RD27
  BREQ.L       R0, RD27, .L00801489
// d_net.c:545   netbuffer->retransmitfrom |= 0x20;
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ18
  OR           RQ18, 32, RQ9
  MOVU.B       RQ9, (RQ27, 4)

.L00801489:
// d_net.c:546   if (respawnparm)
  MOV.L        respawnparm, RD27
  BREQ.L       R0, RD27, .L0080148A
// d_net.c:547   netbuffer->retransmitfrom |= 0x10;
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ23
  OR           RQ23, 16, RQ18
  MOVU.B       RQ18, (RQ27, 4)

.L0080148A:
// d_net.c:548   netbuffer->starttic = startepisode * 64 + startmap;
  MOV.L        startepisode, RD27
  SHAD.L       RD27, 6, RQ9
  MOV.L        startmap, RD27
  ADDS.L       RQ9, RD27, RQ23
  MOV.Q        netbuffer, RQ27
  MOVU.B       RQ23, (RQ27, 5)
// d_net.c:549   netbuffer->player = VERSION;
  ADD          R0, 110, RD26
  MOVU.B       RD26, (RQ27, 6)
// d_net.c:550   netbuffer->numtics = 0;
  MOVU.B       RD0, (RQ27, 7)
// d_net.c:551   HSendPacket (i, NCMD_SETUP);
  ADDS.L       RD8, 0, RD10
  LUI          0x00020000, RD11
  BSR          HSendPacket, R1
  ADDS.L       RD8, 1, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ18
  BRLT.L       RQ18, RD8, .L00801485

.L00801487:
// d_net.c:555   for(i = 10 ; i  &&  HGetPacket(); --i)
  ADD          R0, 10, RD8
  BREQ.L       R0, RD8, .L0080148D
  BSR          HGetPacket, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L0080148D

.L0080148E:

.L0080148B:
// d_net.c:556   {
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 6), RQ23
  AND          RQ23, 127, RQ18
  BRGE.L       8, RQ18, .L00801490
// d_net.c:558   gotinfo[netbuffer->player&0x7f] = true;
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 6), RQ9
  AND          RQ9, 127, RQ23
  ADD          R2, 96, RQ27
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ27, RQ23)

.L00801490:
  ADDS.L       RD8, -1, RD8
  BREQ.L       R0, RD8, .L00801491
  BSR          HGetPacket, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00801491
  BSR          .L0080148B, R0

.L00801491:

.L0080148D:
// d_net.c:567   for (i=1 ; i<doomcom->numnodes ; i++)
  ADD          R0, 1, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ9
  BRGE.L       RQ9, RD8, .L00801495

.L00801493:
// d_net.c:568   if (!gotinfo[i])
  ADD          R2, 96, RQ27
  MOV.L        (RQ27, RD8), RQ23
  BREQ.L       R0, RQ23, .L00801495
  ADDS.L       RD8, 1, RD8
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ18
  BRLT.L       RQ18, RD8, .L00801493

.L00801495:
  MOV.Q        doomcom, RQ27
  MOV.W        (RQ27, 16), RQ9
  BRLT.L       RQ9, RD8, .L00801482

.L00801481:

.L00C02DA6:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.Q        (R2, 40), R23
  MOV.X        (R2, 48), R26
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

IN_Commands:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
// i_btesh4.c:632   {
// i_btesh4.c:637   if(i_hDc>1)
  MOV.L        i_hDc, RD27
  BRLE.L       1, RD27, .L00801160
// i_btesh4.c:638   {
  BSR          thrd_yield, R1
// i_btesh4.c:640   imsg=&t_imsg;
  ADD          R2, 96, RQ20
  ADD          RQ20, 0, RQ22
// i_btesh4.c:642   while(1)

.L00801161:
// i_btesh4.c:643   {
  MOV.L        i_hDc, RD10
  ADD          RQ22, 0, RQ11
  BSR          tkgPollEvent, R1
  ADD          RQ10, 0, RD21
// i_btesh4.c:645   if(j<1)
  BRLT.L       1, RD21, .L00801162
// i_btesh4.c:647   if(imsg->fccMsg==0)
  MOVU.L       (RQ22, 8), RQ9
  BREQ.L       R0, RQ9, .L00801162
// i_btesh4.c:649   if(imsg->fccMsg==TKGDI_FCC_keyb)
  MOVU.L       (RQ22, 8), RQ9
  ADD          R0, 0x6279656B, RD27
  BRNE.Q       RD27, RQ9, .L00801164
// i_btesh4.c:650   {
  MOVU.L       (RQ22, 16), RQ9
  ADDS.L       RQ9, 0, RD18
// i_btesh4.c:652   dn=!(c&0x8000);
  LUI          8, RD27
  TSTN         RD18, RD27, RD8
// i_btesh4.c:653   c=c&0x7FFF;
  AND          RD18, 32767, RD18
// i_btesh4.c:655   switch(c)
  BREQ.Q       8, RD18, .L00801166
  BREQ.Q       153, RD18, .L00801167
  BREQ.Q       154, RD18, .L00801168
  BREQ.Q       155, RD18, .L00801169
  BREQ.Q       157, RD18, .L0080116A
  BREQ.Q       158, RD18, .L0080116B
  BREQ.Q       159, RD18, .L0080116C
  BSR          .L0080116D, R0

.L00801166:
// i_btesh4.c:657   case   8: c=K_BACKSPACE; break;
  ADD          R0, 127, RD18
  BSR          .L00801165, R0

.L00801167:
// i_btesh4.c:658   case 153: c=K_PAUSE; break;
  ADD          R0, 255, RD18
  BSR          .L00801165, R0

.L00801168:
// i_btesh4.c:659   case 154: c=K_MWHEELUP; break;
  ADD          R0, 239, RD18
  BSR          .L00801165, R0

.L00801169:
// i_btesh4.c:660   case 155: c=K_MWHEELDOWN; break;
  ADD          R0, 240, RD18
  BSR          .L00801165, R0

.L0080116A:
// i_btesh4.c:661   case 157: c=K_MOUSE1; break;
  ADD          R0, 200, RD18
  BSR          .L00801165, R0

.L0080116B:
// i_btesh4.c:662   case 158: c=K_MOUSE2; break;
  ADD          R0, 201, RD18
  BSR          .L00801165, R0

.L0080116C:
// i_btesh4.c:663   case 159: c=K_MOUSE3; break;
  ADD          R0, 202, RD18
  BSR          .L00801165, R0

.L0080116D:
// i_btesh4.c:664   default: break;

.L00801165:
  BRGE.L       256, RD18, .L00801161
// i_btesh4.c:670   Key_Event (c, dn);
  ADD          RD18, 0, RD10
  ADDS.L       RD8, 0, RD11
  BSR          Key_Event, R1

.L00801164:
  BSR          .L00801161, R0

.L00801162:
// i_btesh4.c:674   return;
  BSR          .L00C02DAF, R0

.L00801160:
// i_btesh4.c:677   while(tk_kbhit())
  BSR          .L00801170, R0

.L0080116E:
// i_btesh4.c:678   {
  BSR          tk_getch, R1
  ADD          RQ10, 0, RD18
// i_btesh4.c:681   switch(c)
  BREQ.Q       127, RD18, .L00801172
  BREQ.Q       255, RD18, .L00801173
  BREQ.Q       128, RD18, .L00801174
  BSR          .L00801175, R0

.L00801172:
// i_btesh4.c:683   case 0x7F:
  BSR          tk_getch, R1
  ADD          RQ10, 0, RD18
// i_btesh4.c:684   c=tk_getch(); dn=1;
  ADD          R0, 1, RD8
// i_btesh4.c:685   break;
  BSR          .L00801171, R0

.L00801173:
// i_btesh4.c:686   case 0xFF:
  BSR          tk_getch, R1
  ADD          RQ10, 0, RD18
// i_btesh4.c:687   c=tk_getch(); dn=0;
  ADD          R0, 0, RD8
// i_btesh4.c:688   break;
  BSR          .L00801171, R0

.L00801174:
// i_btesh4.c:689   case 0x80:
  BSR          tk_getch, R1
  ADD          RQ10, 0, RD18
// i_btesh4.c:691   c=(c<<8)|tk_getch();
  SHAD.L       RD18, 8, RQ9
  BSR          tk_getch, R1
  ADD          RQ10, 0, RQ23
  OR           RQ9, RQ23, RD18
// i_btesh4.c:692   dn=(c&0x8000)?0:1;
  LUI          8, RD27
  BTST.L       RD27, RD18, .L00801176
  ADD          R0, 0, RQ9
  BSR          .L00801177, R0

.L00801176:
  ADD          R0, 1, RQ9

.L00801177:
  ADDS.L       RQ9, 0, RD8
// i_btesh4.c:693   break;
  BSR          .L00801171, R0

.L00801175:
// i_btesh4.c:694   default:
  ADD          R0, 128, RD27
  BTST.L       RD27, RD18, .L00801178
  ADD          R0, 0, RQ23
  BSR          .L00801179, R0

.L00801178:
  ADD          R0, 1, RQ23

.L00801179:
  ADD          RQ23, 0, RD8
// i_btesh4.c:696   c=c&0x7F;
  AND          RD18, 127, RD18
// i_btesh4.c:697   break;

.L00801171:
// i_btesh4.c:700   switch(c)
  BREQ.Q       8, RD18, .L0080117B
  BREQ.Q       153, RD18, .L0080117C
  BREQ.Q       154, RD18, .L0080117D
  BREQ.Q       155, RD18, .L0080117E
  BREQ.Q       157, RD18, .L0080117F
  BREQ.Q       158, RD18, .L00801180
  BREQ.Q       159, RD18, .L00801181
  BSR          .L00801182, R0

.L0080117B:
// i_btesh4.c:702   case   8: c=K_BACKSPACE; break;
  ADD          R0, 127, RD18
  BSR          .L0080117A, R0

.L0080117C:
// i_btesh4.c:703   case 153: c=K_PAUSE; break;
  ADD          R0, 255, RD18
  BSR          .L0080117A, R0

.L0080117D:
// i_btesh4.c:704   case 154: c=K_MWHEELUP; break;
  ADD          R0, 239, RD18
  BSR          .L0080117A, R0

.L0080117E:
// i_btesh4.c:705   case 155: c=K_MWHEELDOWN; break;
  ADD          R0, 240, RD18
  BSR          .L0080117A, R0

.L0080117F:
// i_btesh4.c:706   case 157: c=K_MOUSE1; break;
  ADD          R0, 200, RD18
  BSR          .L0080117A, R0

.L00801180:
// i_btesh4.c:707   case 158: c=K_MOUSE2; break;
  ADD          R0, 201, RD18
  BSR          .L0080117A, R0

.L00801181:
// i_btesh4.c:708   case 159: c=K_MOUSE3; break;
  ADD          R0, 202, RD18
  BSR          .L0080117A, R0

.L00801182:
// i_btesh4.c:709   default: break;

.L0080117A:
// i_btesh4.c:712   if(c>=256)
  BRGE.L       256, RD18, .L00801170
// i_btesh4.c:715   Key_Event (c, dn);
  ADD          RD18, 0, RD10
  ADDS.L       RD8, 0, RD11
  BSR          Key_Event, R1

.L00801170:
  BSR          tk_kbhit, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L0080116E

.L0080116F:

.L00C02DAF:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

W_DecodeBufferRP2:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 136)
  MOV.Q        RQ11, (R2, 128)
  MOV.L        RD12, (R2, 124)
  MOV.L        RD13, (R2, 120)
// w_wad.c:825   cs=ibuf; cse=ibuf+ibsz;
  MOV.Q        (R2, 136), RQ13
  ADD          RQ13, 0, RQ8
  MOV.L        (R2, 124), RD12
  ADD          RQ13, RD12, RQ11
  MOV.Q        RQ11, (R2, 112)
// w_wad.c:826   ct=obuf;
  MOV.Q        (R2, 128), RQ21
// w_wad.c:829   while(1)

.L008028F4:
// w_wad.c:831   {
  MOV.Q        (RQ8, 0), RQ23
// w_wad.c:834   if(!(t0&0x01))
  ADD          R0, 1, RQ13
  BTSTN.Q      RQ13, RQ23, .L008028F7
// w_wad.c:835   {
  ADD          RQ8, 2, RQ8
// w_wad.c:837   rl=(t0>>1)&7;
  SHLR.Q       RQ23, 1, RQ18
  AND          RQ18, 7, RQ9
  ADDS.L       RQ9, 0, RD22
// w_wad.c:838   l=((t0>>4)&7)+3;
  SHLR.Q       RQ23, 4, RQ18
  AND          RQ18, 7, RQ18
  ADD          RQ18, 3, RQ9
  ADDS.L       RQ9, 0, RD13
  MOV.L        RD13, (R2, 108)
// w_wad.c:839   d=(t0>>7)&511;
  SHLR.Q       RQ23, 7, RQ18
  AND          RQ18, 511, RQ9
  ADDS.L       RQ9, 0, RD12
  MOV.L        RD12, (R2, 104)
  BSR          .L008028F8, R0

.L008028F7:
  ADD          R0, 2, RQ13
  BTSTN.Q      RQ13, RQ23, .L008028F9
// w_wad.c:842   {
  ADD          RQ8, 3, RQ8
// w_wad.c:844   rl=(t0>>2)&7;
  SHLR.Q       RQ23, 2, RQ18
  AND          RQ18, 7, RQ9
  ADDS.L       RQ9, 0, RD22
// w_wad.c:845   l=((t0>>5)&63)+4;
  SHLR.Q       RQ23, 5, RQ18
  AND          RQ18, 63, RQ18
  ADD          RQ18, 4, RQ9
  ADDS.L       RQ9, 0, RD13
  MOV.L        RD13, (R2, 108)
// w_wad.c:846   d=(t0>>11)&8191;
  SHLR.Q       RQ23, 11, RQ18
  AND          RQ18, 8191, RQ9
  ADDS.L       RQ9, 0, RD12
  MOV.L        RD12, (R2, 104)
  BSR          .L008028FA, R0

.L008028F9:
  ADD          R0, 4, RQ13
  BTSTN.Q      RQ13, RQ23, .L008028FB
// w_wad.c:849   {
  ADD          RQ8, 4, RQ8
// w_wad.c:851   rl=(t0>>3)&7;
  SHLR.Q       RQ23, 3, RQ18
  AND          RQ18, 7, RQ9
  ADDS.L       RQ9, 0, RD22
// w_wad.c:852   l=((t0>>6)&511)+4;
  SHLR.Q       RQ23, 6, RQ18
  AND          RQ18, 511, RQ18
  ADD          RQ18, 4, RQ9
  ADDS.L       RQ9, 0, RD13
  MOV.L        RD13, (R2, 108)
// w_wad.c:853   d=(t0>>15)&131071;
  SHLR.Q       RQ23, 15, RQ18
  AND          RQ18, 0x0001FFFF, RQ9
  ADDS.L       RQ9, 0, RD12
  MOV.L        RD12, (R2, 104)
  BSR          .L008028FC, R0

.L008028FB:
  ADD          R0, 8, RQ13
  BTSTN.Q      RQ13, RQ23, .L008028FD
// w_wad.c:856   {
  ADD          RQ8, 1, RQ8
// w_wad.c:858   t1=(t0>>4)&15;
  SHLR.Q       RQ23, 4, RQ18
  AND          RQ18, 15, RQ20
// w_wad.c:860   rl=(t1+1)<<3;
  ADD          RQ20, 1, RQ9
  SHLD.Q       RQ9, 3, RQ18
  ADDS.L       RQ18, 0, RD22
// w_wad.c:861   W_RawCopyB(ct, cs, rl);
  ADD          RQ21, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RD22, 0, RD12
  BSR          W_RawCopyB, R1
// w_wad.c:862   cs+=rl;
  ADD          RQ8, RD22, RQ8
// w_wad.c:863   ct+=rl;
  ADD          RQ21, RD22, RQ21
// w_wad.c:864   continue;
  BSR          .L008028F4, R0
  BSR          .L008028FE, R0

.L008028FD:
  ADD          R0, 16, RQ13
  BTSTN.Q      RQ13, RQ23, .L008028FF
// w_wad.c:871   cs++;
  ADD          RQ8, 1, RQ8
// w_wad.c:872   rl=(t0>>5)&7;
  SHLR.Q       RQ23, 5, RQ9
  AND          RQ9, 7, RQ18
  ADDS.L       RQ18, 0, RD22
// w_wad.c:873   t1=t0>>8;
  SHLR.Q       RQ23, 8, RQ20
  ADD          R0, 1, RQ13
  BTSTN.Q      RQ13, RQ20, .L00802900
// w_wad.c:875   { l=((t1>>1)&0x007F)+4; cs+=1; t2=t0>>16; }
  SHLR.Q       RQ20, 1, RQ9
  AND          RQ9, 127, RQ9
  ADD          RQ9, 4, RQ18
  ADDS.L       RQ18, 0, RD13
  MOV.L        RD13, (R2, 108)
  ADD          RQ8, 1, RQ8
  SHLR.Q       RQ23, 16, RQ12
  MOV.Q        RQ12, (R2, 96)
  BSR          .L00802901, R0

.L00802900:
// w_wad.c:877   { l=((t1>>2)&0x3FFF)+4; cs+=2; t2=t0>>24; }
  SHLR.Q       RQ20, 2, RQ9
  AND          RQ9, 16383, RQ9
  ADD          RQ9, 4, RQ18
  ADDS.L       RQ18, 0, RD13
  MOV.L        RD13, (R2, 108)
  ADD          RQ8, 2, RQ8
  SHLR.Q       RQ23, 24, RQ12
  MOV.Q        RQ12, (R2, 96)

.L00802901:
  MOV.Q        (R2, 96), RQ13
  ADD          R0, 1, RQ12
  BTSTN.Q      RQ12, RQ13, .L00802902
// w_wad.c:879   { d=((t2>>1)&0x007FFF); cs+=2; }
  MOV.Q        (R2, 96), RQ13
  SHLR.Q       RQ13, 1, RQ9
  AND          RQ9, 32767, RQ18
  ADDS.L       RQ18, 0, RD12
  MOV.L        RD12, (R2, 104)
  ADD          RQ8, 2, RQ8
  BSR          .L00802903, R0

.L00802902:
// w_wad.c:881   { d=((t2>>2)&0x3FFFFF); cs+=3; }
  MOV.Q        (R2, 96), RQ13
  SHLR.Q       RQ13, 2, RQ9
  AND          RQ9, 0x003FFFFF, RQ18
  ADDS.L       RQ18, 0, RD12
  MOV.L        RD12, (R2, 104)
  ADD          RQ8, 3, RQ8

.L00802903:
  BSR          .L00802904, R0

.L008028FF:
  ADD          R0, 32, RQ13
  BTSTN.Q      RQ13, RQ23, .L00802905
// w_wad.c:884   {
  ADD          RQ8, 1, RQ8
// w_wad.c:886   rl=(t0>>6)&3;
  SHLR.Q       RQ23, 6, RQ9
  AND          RQ9, 3, RQ18
  ADDS.L       RQ18, 0, RD22
  BREQ.L       R0, RD22, .L008028F5
// w_wad.c:888   *(u32 *)ct=*(u32 *)cs;
  MOVU.L       (RQ8, 0), RQ13
  MOVU.L       RQ13, (RQ21, 0)
// w_wad.c:890   cs+=rl;
  ADD          RQ8, RD22, RQ8
// w_wad.c:891   ct+=rl;
  ADD          RQ21, RD22, RQ21
// w_wad.c:892   continue;
  BSR          .L008028F4, R0
  BSR          .L00802906, R0

.L00802905:
  ADD          R0, 64, RQ13
  BTSTN.Q      RQ13, RQ23, .L00802907
// w_wad.c:897   cs+=2;
  ADD          RQ8, 2, RQ8
// w_wad.c:898   t1=(t0>>7)&511;
  SHLR.Q       RQ23, 7, RQ18
  AND          RQ18, 511, RQ20
// w_wad.c:900   rl=(t1+1)<<3;
  ADD          RQ20, 1, RQ9
  SHLD.Q       RQ9, 3, RQ18
  ADDS.L       RQ18, 0, RD22
// w_wad.c:901   W_RawCopyB(ct, cs, rl);
  ADD          RQ21, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          RD22, 0, RD12
  BSR          W_RawCopyB, R1
// w_wad.c:902   cs+=rl;
  ADD          RQ8, RD22, RQ8
// w_wad.c:903   ct+=rl;
  ADD          RQ21, RD22, RQ21
// w_wad.c:904   continue;
  BSR          .L008028F4, R0
  BSR          .L00802908, R0

.L00802907:
// w_wad.c:906   {
  ADD          RD0, 0, RD22
// w_wad.c:907   rl=0; l=0; d=0;
  MOV.L        RD0, (R2, 108)
  MOV.L        RD0, (R2, 104)
// w_wad.c:908   __debugbreak();

W_DecodeBufferRP2.debugbreak_L0552:
  BRK          1362

.L00802908:

.L00802906:

.L00802904:

.L008028FE:

.L008028FC:

.L008028FA:

.L008028F8:
// w_wad.c:911   if(!d)
  MOV.L        (R2, 104), RD13
  BRNE.L       R0, RD13, .L00802909
// w_wad.c:912   __debugbreak();

W_DecodeBufferRP2.debugbreak_L0553:
  BRK          1363

.L00802909:
// w_wad.c:914   *(u64 *)ct=*(u64 *)cs;
  MOV.Q        (RQ8, 0), RQ9
  MOV.Q        RQ9, (RQ21, 0)
// w_wad.c:916   cs+=rl;
  ADD          RQ8, RD22, RQ8
// w_wad.c:917   ct+=rl;
  ADD          RQ21, RD22, RQ21
// w_wad.c:918   W_MatchCopy2(ct, l, d);
  ADD          RQ21, 0, RQ10
  MOV.L        (R2, 108), RD11
  MOV.L        (R2, 104), RD12
  BSR          W_MatchCopy2, R1
// w_wad.c:919   ct+=l;
  MOV.L        (R2, 108), RD13
  ADD          RQ21, RD13, RQ21
  BSR          .L008028F4, R0

.L008028F5:
// w_wad.c:922   return(ct-obuf);
  MOV.Q        (R2, 128), RQ13
  SUB          RQ21, RQ13, RQ18
  ADDS.L       RQ18, 0, RQ12
  ADDS.L       RQ12, 0, RD10

.L00C02DBF:
  ADD          R2, 368, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_updateFaceWidget:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -328, R2
// st_stuff.c:793   if (priority < 10)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       10, RD27, .L00802BCB
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 36), RQ8
  BRNE.L       R0, RQ8, .L00802BCC
// st_stuff.c:797   {
  ADD          R0, 9, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:799   st_faceindex = ST_DEADFACE;
  ADD          R0, 41, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
// st_stuff.c:800   st_facecount = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount

.L00802BCC:

.L00802BCB:
// st_stuff.c:804   if (priority < 9)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       9, RD27, .L00802BCD
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 236), RQ8
  BREQ.L       R0, RQ8, .L00802BCE
// st_stuff.c:809   doevilgrin = false;
  ADD          RD0, 0, RD20
// st_stuff.c:811   for (i=0;i<NUMWEAPONS;i++)
  ADD          R0, 0, RD18

.L00802BCF:
// st_stuff.c:812   {
  MOV          TU7A00CB73/oldweaponsowned, RQ27
  MOV.L        (RQ27, RD18), RQ8
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 124, RQ26
  MOV.L        (RQ26, RD18), RQ9
  BREQ.Q       RQ9, RQ8, .L00802BD2
// st_stuff.c:814   {
  ADD          R0, 1, RD20
// st_stuff.c:816   oldweaponsowned[i] = plyr->weaponowned[i];
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 124, RQ26
  MOV.L        (RQ26, RD18), RQ9
  MOV          TU7A00CB73/oldweaponsowned, RQ27
  MOV.L        RQ9, (RQ27, RD18)

.L00802BD2:
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802BCF

.L00802BD1:
  BREQ.L       R0, RD20, .L00802BD3
// st_stuff.c:822   priority = 8;
  ADD          R0, 8, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:823   st_facecount = ST_EVILGRINCOUNT;
  ADD          R0, 70, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:824   st_faceindex = ST_calcPainOffset() + ST_EVILGRINOFFSET;
  BSR          ST_calcPainOffset, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, 6, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex

.L00802BD3:

.L00802BCE:

.L00802BCD:
// st_stuff.c:830   if (priority < 8)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       8, RD27, .L00802BD4
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 232), RQ9
  BREQ.L       R0, RQ9, .L00802BD5
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 240), RQ26
  BREQ.Q       R0, RQ26, .L00802BD5

.L00802BD7:
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 240), RQ26
  MOV.Q        (RQ27, 0), RQ21
  BREQ.Q       RQ21, RQ26, .L00802BD5

.L00802BD6:
// st_stuff.c:837   priority = 7;
  ADD          R0, 7, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 36), RQ8
  MOV.L        TU7A00CB73/st_oldhealth, RD27
  SUBS.L       RQ8, RD27, RQ9
  BRLE.L       20, RQ9, .L00802BD9
// st_stuff.c:840   {
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:842   st_faceindex = ST_calcPainOffset() + ST_OUCHOFFSET;
  BSR          ST_calcPainOffset, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, 5, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
  BSR          .L00802BDA, R0

.L00802BD9:
// st_stuff.c:845   {
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 240), RQ26
  MOV.L        (RQ26, 28), RQ9
  MOV.L        (RQ26, 24), RQ8
  MOV.Q        (RQ27, 0), RQ26
  MOV.L        (RQ26, 28), RQ23
  MOV.L        (RQ26, 24), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD27
  MOV.Q        TU7A00CB73/plyr, RQ25
  MOV.Q        (RQ25, 0), RQ26
  MOVU.L       (RQ26, 56), RQ9
  MOV.L        RD27, (R2, 124)
  BRLEU.L      RQ9, RD27, .L00802BDB
// st_stuff.c:854   diffang = badguyangle - plyr->mo->angle;
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 0), RQ21
  MOVU.L       (RQ21, 56), RQ23
  MOVU.L       (R2, 124), RD26
  SUBU.L       RD26, RQ23, RD27
// st_stuff.c:855   i = diffang > ANG180; 
  ADD          R0, 0x0000000080000000, RD25
  CMPGT.Q      RD27, RD25, RD18
  MOV.L        RD27, (R2, 120)
  BSR          .L00802BDC, R0

.L00802BDB:
// st_stuff.c:860   diffang = plyr->mo->angle - badguyangle;
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOVU.L       (RQ26, 56), RQ9
  MOVU.L       (R2, 124), RD25
  SUBU.L       RQ9, RD25, RD27
// st_stuff.c:861   i = diffang <= ANG180; 
  ADD          R0, 0x0000000080000000, RD13
  CMPGE.Q      RD13, RD27, RD18
  MOV.L        RD27, (R2, 120)

.L00802BDC:
// st_stuff.c:865   st_facecount = ST_TURNCOUNT;
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:866   st_faceindex = ST_calcPainOffset();
  BSR          ST_calcPainOffset, R1
  MOV.L        RQ10, TU7A00CB73/st_faceindex
  MOVU.L       (R2, 120), RD27
  LUI          0x00020000, RD26
  BRGEU.L      RD26, RD27, .L00802BDD
// st_stuff.c:871   st_faceindex += ST_RAMPAGEOFFSET;
  MOV.L        TU7A00CB73/st_faceindex, RD27
  ADDS.L       RD27, 7, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
  BSR          .L00802BDE, R0

.L00802BDD:
  BREQ.L       R0, RD18, .L00802BDF
// st_stuff.c:876   st_faceindex += ST_TURNOFFSET;
  MOV.L        TU7A00CB73/st_faceindex, RD27
  ADDS.L       RD27, 3, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
  BSR          .L00802BE0, R0

.L00802BDF:
// st_stuff.c:881   st_faceindex += ST_TURNOFFSET+1;
  MOV.L        TU7A00CB73/st_faceindex, RD27
  ADDS.L       RD27, 4, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex

.L00802BE0:

.L00802BDE:

.L00802BDA:

.L00802BD5:

.L00802BD4:
// st_stuff.c:887   if (priority < 7)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       7, RD27, .L00802BE1
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 232), RQ23
  BREQ.L       R0, RQ23, .L00802BE2
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 36), RQ22
  MOV.L        TU7A00CB73/st_oldhealth, RD27
  SUBS.L       RQ22, RD27, RQ8
  BRLE.L       20, RQ8, .L00802BE3
// st_stuff.c:893   {
  ADD          R0, 7, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:895   st_facecount = ST_TURNCOUNT;
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:896   st_faceindex = ST_calcPainOffset() + ST_OUCHOFFSET;
  BSR          ST_calcPainOffset, R1
  ADDS.L       RQ10, 0, RQ9
  ADDS.L       RQ9, 5, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
  BSR          .L00802BE4, R0

.L00802BE3:
// st_stuff.c:899   {
  ADD          R0, 6, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:901   st_facecount = ST_TURNCOUNT;
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:902   st_faceindex = ST_calcPainOffset() + ST_RAMPAGEOFFSET;
  BSR          ST_calcPainOffset, R1
  ADD          RQ10, 0, RQ23
  ADDS.L       RQ23, 7, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex

.L00802BE4:

.L00802BE2:

.L00802BE1:
// st_stuff.c:909   if (priority < 6)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       6, RD27, .L00802BE5
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 192), RQ22
  BREQ.L       R0, RQ22, .L00802BE6
  MOV.L        ST_updateFaceWidget/lastattackdown!54, RD27
  BRNE.Q       -1, RD27, .L00802BE7
// st_stuff.c:915   lastattackdown = ST_RAMPAGEDELAY;
  ADD          R0, 70, RD27
  MOV.L        RD27, ST_updateFaceWidget/lastattackdown!54
  BSR          .L00802BE8, R0

.L00802BE7:
  MOV.L        ST_updateFaceWidget/lastattackdown!54, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, ST_updateFaceWidget/lastattackdown!54
  BRNE.L       R0, RD27, .L00802BE9
// st_stuff.c:917   {
  ADD          R0, 5, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:919   st_faceindex = ST_calcPainOffset() + ST_RAMPAGEOFFSET;
  BSR          ST_calcPainOffset, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, 7, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
// st_stuff.c:920   st_facecount = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount
// st_stuff.c:921   lastattackdown = 1;
  MOV.L        RD27, ST_updateFaceWidget/lastattackdown!54

.L00802BE9:

.L00802BE8:
  BSR          .L00802BEA, R0

.L00802BE6:
// st_stuff.c:925   lastattackdown = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, ST_updateFaceWidget/lastattackdown!54

.L00802BEA:

.L00802BE5:
// st_stuff.c:929   if (priority < 5)
  MOV.L        ST_updateFaceWidget/priority!54, RD27
  BRGE.L       5, RD27, .L00802BEB
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 200), RQ9
  ADD          R0, 2, RD27
  BTSTN.L      RD27, RQ9, .L00802BED
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 48), RQ23
  BRNE.L       R0, RQ23, .L00802BED
  BSR          .L00802BEC, R0

.L00802BED:
// st_stuff.c:934   {
  ADD          R0, 4, RD27
  MOV.L        RD27, ST_updateFaceWidget/priority!54
// st_stuff.c:937   st_faceindex = ST_GODFACE;
  ADD          R0, 40, RD27
  MOV.L        RD27, TU7A00CB73/st_faceindex
// st_stuff.c:938   st_facecount = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount

.L00802BEC:

.L00802BEB:
// st_stuff.c:945   if (!st_facecount)
  MOV.L        TU7A00CB73/st_facecount, RD27
  BRNE.L       R0, RD27, .L00802BEF
// st_stuff.c:946   {
  BSR          ST_calcPainOffset, R1
  ADD          RQ10, 0, RQ22
  MOV.L        TU7A00CB73/st_randomnumber, RQ8
  ADD          R0, 3, RD27
  MODS.L       RQ8, RD27, RQ8
  ADDS.L       RQ22, RQ8, RD26
  MOV.L        RD26, TU7A00CB73/st_faceindex
// st_stuff.c:948   st_facecount = ST_STRAIGHTFACECOUNT;
  ADD          R0, 17, RD26
  MOV.L        RD26, TU7A00CB73/st_facecount
// st_stuff.c:949   priority = 0;
  MOV.L        RD0, ST_updateFaceWidget/priority!54

.L00802BEF:
// st_stuff.c:952   st_facecount--;
  MOV.L        TU7A00CB73/st_facecount, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU7A00CB73/st_facecount

.L00C02DC7:
  ADD          R2, 328, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

R_CheckBBox:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -312, R2
  ADD          RQ10, 0, RQ22
// r_bsp.c:473   if (viewx <= bspcoord[BOXLEFT])
  MOV.L        (RQ22, 8), RQ18
  MOV.L        viewx, RD27
  BRGT.L       RQ18, RD27, .L008023F2
// r_bsp.c:474   boxx = 0;
  MOV.L        RD0, (R2, 116)
  BSR          .L008023F3, R0

.L008023F2:
  MOV.L        (RQ22, 12), RQ18
  MOV.L        viewx, RD27
  BRGE.L       RQ18, RD27, .L008023F4
// r_bsp.c:476   boxx = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 116)
  BSR          .L008023F5, R0

.L008023F4:
// r_bsp.c:478   boxx = 2;
  ADD          R0, 2, RD27
  MOV.L        RD27, (R2, 116)

.L008023F5:

.L008023F3:
// r_bsp.c:480   if (viewy >= bspcoord[BOXTOP])
  MOV.L        (RQ22, 0), RQ18
  MOV.L        viewy, RD27
  BRLT.L       RQ18, RD27, .L008023F6
// r_bsp.c:481   boxy = 0;
  MOV.L        RD0, (R2, 112)
  BSR          .L008023F7, R0

.L008023F6:
  MOV.L        (RQ22, 4), RQ18
  MOV.L        viewy, RD27
  BRLE.L       RQ18, RD27, .L008023F8
// r_bsp.c:483   boxy = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 112)
  BSR          .L008023F9, R0

.L008023F8:
// r_bsp.c:485   boxy = 2;
  ADD          R0, 2, RD27
  MOV.L        RD27, (R2, 112)

.L008023F9:

.L008023F7:
// r_bsp.c:487   boxpos = (boxy<<2)+boxx;
  MOV.L        (R2, 112), RD27
  SHAD.L       RD27, 2, RQ18
  MOV.L        (R2, 116), RD25
  ADDS.L       RQ18, RD25, RD26
// r_bsp.c:488   if (boxpos == 5)
  MOV.L        RD26, (R2, 108)
  BRNE.Q       5, RD26, .L008023FA
// r_bsp.c:489   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02DCD, R0

.L008023FA:
// r_bsp.c:491   x1 = bspcoord[checkcoord[boxpos][0]];
  MOV          checkcoord, RQ27
  MOV.L        (R2, 108), RD26
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        (RQ25, 0), RQ18
  MOV.L        (RQ22, RQ18), RD24
  MOV.L        RD24, (R2, 104)
// r_bsp.c:492   y1 = bspcoord[checkcoord[boxpos][1]];
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        (RQ25, 4), RQ18
  MOV.L        (RQ22, RQ18), RD19
  MOV.L        RD19, (R2, 100)
// r_bsp.c:493   x2 = bspcoord[checkcoord[boxpos][2]];
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        (RQ25, 8), RQ18
  MOV.L        (RQ22, RQ18), RD27
  MOV.L        RD27, (R2, 96)
// r_bsp.c:494   y2 = bspcoord[checkcoord[boxpos][3]];
  MOV          checkcoord, RQ27
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        (RQ25, 12), RQ18
  MOV.L        (RQ22, RQ18), RD27
  MOV.L        RD27, (R2, 92)
// r_bsp.c:497   angle1 = R_PointToAngle (x1, y1) - viewangle;
  ADD          RD24, 0, RD10
  ADD          RD19, 0, RD11
  BSR          R_PointToAngle, R1
  ADD          RQ10, 0, RQ18
  MOVU.L       viewangle, RD27
  SUBU.L       RQ18, RD27, RD21
// r_bsp.c:498   angle2 = R_PointToAngle (x2, y2) - viewangle;
  MOV.L        (R2, 96), RD10
  MOV.L        (R2, 92), RD11
  BSR          R_PointToAngle, R1
  ADD          RQ10, 0, RQ18
  MOVU.L       viewangle, RD27
  SUBU.L       RQ18, RD27, RD20
// r_bsp.c:500   span = angle1 - angle2;
  SUBU.L       RD21, RD20, RD27
// r_bsp.c:503   if (span >= ANG180)
  MOV.L        RD27, (R2, 88)
  ADD          R0, 0x0000000080000000, RD26
  BRLTU.L      RD26, RD27, .L008023FB
// r_bsp.c:504   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02DCD, R0

.L008023FB:
// r_bsp.c:506   tspan = angle1 + clipangle;
  MOVU.L       clipangle, RD27
  ADDU.L       RD21, RD27, RD8
// r_bsp.c:508   if (tspan > 2*clipangle)
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  BRLEU.L      RQ18, RD8, .L008023FC
// r_bsp.c:509   {
  MOVU.L       clipangle, RD27
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  SUBU.L       RD8, RQ18, RD8
  MOVU.L       (R2, 88), RD27
  BRGEU.L      RD27, RD8, .L00C00E2F
// r_bsp.c:516   angle1 = clipangle;
  MOVU.L       clipangle, RD21

.L008023FC:
// r_bsp.c:519   tspan = clipangle - angle2;
  MOVU.L       clipangle, RD27
  SUBU.L       RD27, RD20, RD8
// r_bsp.c:521   if (tspan > 2*clipangle)
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  BRLEU.L      RQ18, RD8, .L008023FD
// r_bsp.c:522   {
  MOVU.L       clipangle, RD27
  SHAD.L       RD27, 1, RQ18
  ADDU.L       RQ18, R0, RQ18
  SUBU.L       RD8, RQ18, RD8
  MOVU.L       (R2, 88), RD27
  BRGEU.L      RD27, RD8, .L00C00E2F
// r_bsp.c:529   angle2 = -clipangle;
  MOVU.L       clipangle, RD27
  SUBU.L       R0, RD27, RD20

.L008023FD:
// r_bsp.c:536   angle1 = (angle1+ANG90)>>ANGLETOFINESHIFT;
  ADD          RD21, 0, RQ18
  LUI          0x00040000, RD27
  ADDU.L       RQ18, RD27, RQ18
  SHLR         RQ18, 19, RD21
// r_bsp.c:537   angle2 = (angle2+ANG90)>>ANGLETOFINESHIFT;
  ADD          RD20, 0, RQ18
  ADDU.L       RQ18, RD27, RQ18
  SHLR         RQ18, 19, RD20
// r_bsp.c:538   sx1 = viewangletox[angle1];
  MOV          viewangletox, RQ26
  MOV.W        (RQ26, RD21), RD25
// r_bsp.c:539   sx2 = viewangletox[angle2];
  MOV.W        (RQ26, RD20), RD23
// r_bsp.c:542   if (sx1 == sx2)
  MOV.L        RD25, (R2, 84)
  BREQ.Q       RD23, RD25, .L00C00E2F
// r_bsp.c:544   sx2--;
  ADDS.L       RD23, -1, RD23
// r_bsp.c:546   start = solidsegs;
  MOV          solidsegs, RQ9
// r_bsp.c:547   while (start->last < sx2)
  BSR          .L00802400, R0

.L008023FE:
// r_bsp.c:548   start++;
  ADD          RQ9, 8, RQ9

.L00802400:
  MOV.L        (RQ9, 4), RQ18
  BRLT.L       RD23, RQ18, .L008023FE

.L008023FF:
// r_bsp.c:550   if (sx1 >= start->first
  MOV.L        (RQ9, 0), RQ18
  MOV.L        (R2, 84), RD27
  BRLT.L       RQ18, RD27, .L00802401
  MOV.L        (RQ9, 4), RQ18
  BRGT.L       RQ18, RD23, .L00802401
  BSR          .L00C00E2F, R0

.L00802401:
// r_bsp.c:557   return true;
  ADD          R0, 1, RD10
  BSR          .L00C02DCD, R0

.L00C00E2F:
  ADD          R0, 0, RQ10

.L00C02DCD:
  ADD          R2, 312, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

P_XYMovement:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ18
// p_mobj.c:141   if (!mo->momx && !mo->momy)
  MOV.L        (RQ18, 112), RQ9
  BRNE.L       R0, RQ9, .L00802244
  MOV.L        (RQ18, 116), RQ9
  BRNE.L       R0, RQ9, .L00802244

.L00802245:
  MOV.L        (RQ18, 160), RQ9
  LUI          4096, RD27
  BTST.L       RD27, RQ9, .L00802247
// p_mobj.c:146   mo->flags &= ~MF_SKULLFLY;
  MOV.L        (RQ18, 160), RQ9
  AND          RQ9, 0xFFFFFFFFFEFFFFFF, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_mobj.c:147   mo->momx = mo->momy = mo->momz = 0;
  MOV.L        RD0, (RQ18, 120)
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)
// p_mobj.c:149   P_SetMobjState (mo, mo->info->spawnstate);
  MOV.Q        (RQ18, 136), RQ22
  MOV.L        (RQ22, 4), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          P_SetMobjState, R1

.L00802247:
// p_mobj.c:150   }
  BSR          .L00C02DD3, R0

.L00802244:
// p_mobj.c:154   player = mo->player;
  MOV.Q        (RQ18, 192), RQ27
  MOV.Q        RQ27, (R2, 136)
// p_mobj.c:156   if (mo->momx > MAXMOVE)
  MOV.L        (RQ18, 112), RQ23
  LUI          480, RD13
  BRLE.L       RD13, RQ23, .L00802248
// p_mobj.c:157   mo->momx = MAXMOVE;
  LUI          480, RD27
  MOV.L        RD27, (RQ18, 112)
  BSR          .L00802249, R0

.L00802248:
  MOV.L        (RQ18, 112), RQ9
  LUI          -480, RD27
  BRGE.L       RD27, RQ9, .L0080224A
// p_mobj.c:159   mo->momx = -MAXMOVE;
  LUI          -480, RD27
  MOV.L        RD27, (RQ18, 112)

.L0080224A:

.L00802249:
// p_mobj.c:161   if (mo->momy > MAXMOVE)
  MOV.L        (RQ18, 116), RQ23
  LUI          480, RD27
  BRLE.L       RD27, RQ23, .L0080224B
// p_mobj.c:162   mo->momy = MAXMOVE;
  LUI          480, RD27
  MOV.L        RD27, (RQ18, 116)
  BSR          .L0080224C, R0

.L0080224B:
  MOV.L        (RQ18, 116), RQ9
  LUI          -480, RD27
  BRGE.L       RD27, RQ9, .L0080224D
// p_mobj.c:164   mo->momy = -MAXMOVE;
  LUI          -480, RD27
  MOV.L        RD27, (RQ18, 116)

.L0080224D:

.L0080224C:
// p_mobj.c:166   xmove = mo->momx;
  MOV.L        (RQ18, 112), RD21
// p_mobj.c:167   ymove = mo->momy;
  MOV.L        (RQ18, 116), RD20
// p_mobj.c:169   do

.L0080224E:
// p_mobj.c:170   {
  LUI          240, RD27
  CMPGT.Q      RD21, RD27, RQ23
  CMPGT.Q      RD20, RD27, RQ9
  OR           RQ23, RQ9, RQ8
  BREQ.L       R0, RQ8, .L00802251
// p_mobj.c:172   {
  MOV.L        (RQ18, 24), RQ9
  ADD          RD21, 0, RQ23
  ADD          R0, 2, RD27
  DIVS.L       RQ23, RD27, RQ23
  ADDS.L       RQ9, RQ23, RD13
  MOV.L        RD13, (R2, 148)
// p_mobj.c:174   ptryy = mo->y + ymove/2;
  MOV.L        (RQ18, 28), RQ8
  ADD          RD20, 0, RQ9
  DIVS.L       RQ9, RD27, RQ9
  ADDS.L       RQ8, RQ9, RD12
  MOV.L        RD12, (R2, 144)
// p_mobj.c:175   xmove >>= 1;
  SHAR         RD21, 1, RD21
// p_mobj.c:176   ymove >>= 1;
  SHAR         RD20, 1, RD20
  BSR          .L00802252, R0

.L00802251:
// p_mobj.c:179   {
  MOV.L        (RQ18, 24), RQ23
  ADDS.L       RQ23, RD21, RD27
  MOV.L        RD27, (R2, 148)
// p_mobj.c:181   ptryy = mo->y + ymove;
  MOV.L        (RQ18, 28), RQ8
  ADDS.L       RQ8, RD20, RD13
  MOV.L        RD13, (R2, 144)
// p_mobj.c:182   xmove = ymove = 0;
  ADD          RD0, 0, RD20
  ADD          R0, 0, RD21

.L00802252:
// p_mobj.c:185   if (!P_TryMove (mo, ptryx, ptryy))
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 148), RD11
  MOV.L        (R2, 144), RD12
  BSR          P_TryMove, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00802253
  MOV.Q        (RQ18, 192), RQ22
  BREQ.Q       R0, RQ22, .L00802254
// p_mobj.c:189   {	// try to slide along it
  ADD          RQ18, 0, RQ10
  BSR          P_SlideMove, R1
  BSR          .L00802255, R0

.L00802254:
  MOV.L        (RQ18, 160), RQ8
  LUI          16, RD27
  BTST.L       RD27, RQ8, .L00802256
  MOV.Q        ceilingline, RQ27
  BREQ.Q       R0, RQ27, .L00802257
  MOV.Q        ceilingline, RQ27
  MOV.Q        (RQ27, 72), RQ22
  BREQ.Q       R0, RQ22, .L00802257

.L00802259:
  MOV.Q        ceilingline, RQ27
  MOV.Q        (RQ27, 72), RQ22
  MOV.W        (RQ22, 10), RQ8
  MOV.L        skyflatnum, RD27
  BRNE.Q       RD27, RQ8, .L00802257

.L00802258:
// p_mobj.c:202   P_RemoveMobj (mo);
  ADD          RQ18, 0, RQ10
  BSR          P_RemoveMobj, R1
// p_mobj.c:203   return;
  BSR          .L00C02DD3, R0

.L00802257:
// p_mobj.c:204   }
  ADD          RQ18, 0, RQ10
  BSR          P_ExplodeMissile, R1
  BSR          .L0080225B, R0

.L00802256:
// p_mobj.c:208   mo->momx = mo->momy = 0;
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)

.L0080225B:

.L00802255:

.L00802253:
  BRNE.L       R0, RD21, .L0080224E
  BRNE.L       R0, RD20, .L0080224E

.L0080225C:
// p_mobj.c:213   if (player && player->cheats & CF_NOMOMENTUM)
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L0080225E
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 200), RQ9
  ADD          R0, 4, RD13
  BTST.L       RD13, RQ9, .L0080225E

.L0080225F:
// p_mobj.c:216   mo->momx = mo->momy = 0;
  MOV.L        RD0, (RQ18, 116)
  MOV.L        RD0, (RQ18, 112)
// p_mobj.c:217   return;
  BSR          .L00C02DD3, R0

.L0080225E:
// p_mobj.c:220   if (mo->flags & (MF_MISSILE | MF_SKULLFLY) )
  MOV.L        (RQ18, 160), RQ23
  LUI          4112, RD27
  BTSTN.L      RD27, RQ23, .L00C02DD3
// p_mobj.c:223   if (mo->z > mo->floorz)
  MOV.L        (RQ18, 32), RQ8
  MOV.L        (RQ18, 96), RQ9
  BRGT.L       RQ9, RQ8, .L00C02DD3
// p_mobj.c:226   if (mo->flags & MF_CORPSE)
  MOV.L        (RQ18, 160), RQ23
  LUI          256, RD27
  BTST.L       RD27, RQ23, .L00802261
  MOV.L        (RQ18, 112), RQ8
  LUI          4, RD27
  BRGT.L       RD27, RQ8, .L00802263
  MOV.L        (RQ18, 112), RQ9
  LUI          -4, RD27
  BRLT.L       RD27, RQ9, .L00802263

.L00802265:
  MOV.L        (RQ18, 116), RQ23
  LUI          4, RD27
  BRGT.L       RD27, RQ23, .L00802263

.L00802264:
  MOV.L        (RQ18, 116), RQ8
  LUI          -4, RD27
  BRLT.L       RD27, RQ8, .L00802263
  BSR          .L00802262, R0

.L00802263:
  MOV.L        (RQ18, 96), RQ9
  MOV.Q        (RQ18, 88), RQ22
  MOV.Q        (RQ22, 0), RQ27
  MOV.L        (RQ27, 0), RQ23
  BRNE.Q       RQ23, RQ9, .L00C02DD3

.L00802262:

.L00802261:
// p_mobj.c:240   if (mo->momx > -STOPSPEED
  MOV.L        (RQ18, 112), RQ8
  LUI          -1, RD27
  BRLE.L       RD27, RQ8, .L00802267
  MOV.L        (RQ18, 112), RQ9
  LUI          1, RD27
  BRGE.L       RD27, RQ9, .L00802267

.L0080226B:
  MOV.L        (RQ18, 116), RQ23
  LUI          -1, RD27
  BRLE.L       RD27, RQ23, .L00802267

.L0080226A:
  MOV.L        (RQ18, 116), RQ8
  LUI          1, RD27
  BRGE.L       RD27, RQ8, .L00802267

.L00802269:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L00802268
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 12, RQ13
  MOV.B        (RQ13, 0), RQ9
  BRNE.L       R0, RQ9, .L00802267
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 12, RQ13
  MOV.B        (RQ13, 1), RQ9
  BRNE.L       R0, RQ9, .L00802267

.L00802268:
  MOV.Q        (R2, 136), RQ27
  BREQ.Q       R0, RQ27, .L0080226F
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 0), RQ22
  MOV.Q        (RQ22, 152), RQ13
  MOV          states, RQ12
  ADD          RQ13, 0, RQ11
  SUB          RQ11, RQ12, RQ11
  ADD          R0, 40, RD12
  DIVS.L       RQ11, RD12, RQ11
  ADD          RQ11, -150, RQ10
  ADDU.L       RQ10, R0, RQ9
  BRGEU.L      4, RQ9, .L0080226F

.L00802270:
// p_mobj.c:250   P_SetMobjState (player->mo, S_PLAY);
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 0), RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 149, RD11
  BSR          P_SetMobjState, R1

.L0080226F:
// p_mobj.c:252   mo->momx = 0;
  MOV.L        RD0, (RQ18, 112)
// p_mobj.c:253   mo->momy = 0;
  MOV.L        RD0, (RQ18, 116)
  BSR          .L00802272, R0

.L00802267:
// p_mobj.c:256   {
  MOV.L        (RQ18, 112), RQ8
  ADDS.L       RQ8, 0, RD10
  LDIZ         0x0000E800, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 112)
// p_mobj.c:258   mo->momy = FixedMul (mo->momy, FRICTION);
  MOV.L        (RQ18, 116), RQ23
  ADD          RQ23, 0, RD10
  LDIZ         0x0000E800, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, (RQ18, 116)

.L00802272:

.L00C02DD3:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

TKMM_MMList_AllocBrkCat:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  ADD          RD10, 0, RD20
  ADD          RD11, 0, RD22
// tk_core/tk_mmllist.c:231   
  ADD          R0, -8, RD27
  BTST.L       RD27, RD22, .L00800A08
// tk_core/tk_mmllist.c:232   

TKMM_MMList_AllocBrkCat.debugbreak_L059A:
  BRK          1434

.L00800A08:
// tk_core/tk_mmllist.c:234   
  ADD          R0, 0, RQ9
// tk_core/tk_mmllist.c:236   
  LDIZ         0x0000FF00, RD27
  BRLT.L       RD27, RD20, .L00800A09
  BRNE.Q       6, RD22, .L00800A0A
// tk_core/tk_mmllist.c:257   
  ADDS.L       RD20, 256, RQ27
  ADDS.L       RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 144)
  ADD          RQ0, 0, RQ10
  ADD          RQ26, 0, RQ11
  ADD          R0, 7, RD12
  ADD          R0, 262, RD13
  ADD          R0, -1, RD14
  ADD          RQ0, 0, RQ15
  BSR          tk_mmap, R1
  ADD          RQ10, 0, RQ9
  BREQ.Q       R0, RQ9, .L00800A0B
// tk_core/tk_mmllist.c:263   
  ADDS.L       RD20, 0, RQ27
  MOV.Q        RQ27, (R2, 144)
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// tk_core/tk_mmllist.c:265   
  ADD          RQ9, 0, RQ10
  BSR          .L00C02E1F, R0

.L00800A0B:

.L00800A0A:
  BRNE.Q       7, RD22, .L00800A0C
// tk_core/tk_mmllist.c:270   
  ADDS.L       RD20, 256, RQ27
  ADDS.L       RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 144)
  ADD          RQ0, 0, RQ10
  ADD          RQ26, 0, RQ11
  ADD          R0, 7, RD12
  ADD          R0, 517, RD13
  ADD          R0, -1, RD14
  ADD          RQ0, 0, RQ15
  BSR          tk_mmap, R1
  ADD          RQ10, 0, RQ9
  BREQ.Q       R0, RQ9, .L00800A0D
// tk_core/tk_mmllist.c:276   
  ADDS.L       RD20, 0, RQ27
  MOV.Q        RQ27, (R2, 144)
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// tk_core/tk_mmllist.c:278   
  ADD          RQ9, 0, RQ10
  BSR          .L00C02E1F, R0

.L00800A0D:

.L00800A0C:
  BRNE.L       R0, RD22, .L00800A0E
// tk_core/tk_mmllist.c:286   
  ADDS.L       RD20, 256, RQ10
  BSR          TKMM_PageAllocUsc, R1
  ADD          RQ10, 0, RQ9
  BSR          .L00800A0F, R0

.L00800A0E:
// tk_core/tk_mmllist.c:288   
  ADDS.L       RD20, 256, RQ10
  BSR          TKMM_PageAlloc, R1
  ADD          RQ10, 0, RQ9

.L00800A0F:
  BRNE.Q       R0, RQ9, .L00800A10
// tk_core/tk_mmllist.c:291   
  MOV          .L00C02E21, RQ10
  BSR          tk_puts, R1
// tk_core/tk_mmllist.c:293   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02E1F, R0

.L00800A10:
// tk_core/tk_mmllist.c:296   
  ADD          RQ9, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          RD22, 0, RD12
  BSR          TKMM_MMList_MProtectCat, R1
// tk_core/tk_mmllist.c:298   
  ADDS.L       RD20, 0, RQ27
  MOV.Q        RQ27, (R2, 144)
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ27, 0, RQ12
  BSR          memset, R1
// tk_core/tk_mmllist.c:300   
  ADD          RQ9, 0, RQ10
  ADD          RD20, 0, RD11
  ADD          R0, 1, RD12
  BSR          TKMM_MMList_AddVrmBrk, R1
// tk_core/tk_mmllist.c:302   
  ADD          RQ9, 0, RQ10
  BSR          .L00C02E1F, R0

.L00800A09:
// tk_core/tk_mmllist.c:306   
  MOV.L        tkmm_mmlist_brkpos_init, RD27
  LDIZ         4660, RD26
  BREQ.Q       RD26, RD27, .L00800A11
// tk_core/tk_mmllist.c:307   
  ADD          R0, 0, RD18

.L00800A12:
// tk_core/tk_mmllist.c:309   
  MOV          tkmm_mmlist_brkbuf_c, RQ27
  MOV.Q        (RQ27, RD18), RQ8
// tk_core/tk_mmllist.c:311   
  MOV          tkmm_mmlist_brkpos_c, RQ27
  MOV.Q        (RQ27, RD18), RQ23
// tk_core/tk_mmllist.c:312   
  MOV          tkmm_mmlist_brkend_c, RQ27
  MOV.Q        (RQ27, RD18), RQ21
// tk_core/tk_mmllist.c:314   
  BRNE.Q       R0, RQ8, .L00800A13
  BRNE.Q       R0, RQ23, .L00800A13

.L00800A14:
  BRNE.Q       R0, RQ21, .L00800A13
  BSR          .L00800A15, R0

.L00800A13:
// tk_core/tk_mmllist.c:317   
  MOV          .L00C02E22, RQ10
  ADD          RD18, 0, RD11
  ADD          RQ8, 0, RQ12
  ADD          RQ23, 0, RQ13
  ADD          RQ21, 0, RQ14
  BSR          tk_dbg_printf, R1

.L00800A15:
// tk_core/tk_mmllist.c:323   
  MOV          tkmm_mmlist_brkbuf_c, RQ27
  MOV.Q        RQ0, (RQ27, RD18)
// tk_core/tk_mmllist.c:324   
  MOV          tkmm_mmlist_brkpos_c, RQ27
  MOV.Q        RQ0, (RQ27, RD18)
// tk_core/tk_mmllist.c:325   
  MOV          tkmm_mmlist_brkend_c, RQ27
  MOV.Q        RQ0, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       8, RD18, .L00800A12

.L00800A16:
// tk_core/tk_mmllist.c:328   
  LDIZ         4660, RD27
  MOV.L        RD27, tkmm_mmlist_brkpos_init

.L00800A11:
// tk_core/tk_mmllist.c:332   
  ADDS.L       RD20, 31, RQ27
  AND          RQ27, -16, RD20
// tk_core/tk_mmllist.c:334   
  MOV          tkmm_mmlist_brkbuf_c, RQ26
  MOV.Q        (RQ26, RD22), RQ8
// tk_core/tk_mmllist.c:335   
  MOV          tkmm_mmlist_brkpos_c, RQ26
  MOV.Q        (RQ26, RD22), RQ23
// tk_core/tk_mmllist.c:336   
  MOV          tkmm_mmlist_brkend_c, RQ26
  MOV.Q        (RQ26, RD22), RQ21
// tk_core/tk_mmllist.c:338   
  ADD          R0, 15, RQ26
  BTST.Q       RQ26, RQ23, .L00800A17
// tk_core/tk_mmllist.c:339   

TKMM_MMList_AllocBrkCat.debugbreak_L059B:
  BRK          1435

.L00800A17:
// tk_core/tk_mmllist.c:341   
  BREQ.Q       R0, RQ8, .L00800A18
  ADD          RQ23, RD20, RQ27
  BRLE.Q       RQ21, RQ27, .L00800A18

.L00800A19:
// tk_core/tk_mmllist.c:343   
  MOV          tkmm_mmlist_brkbuf_c, RQ27
  MOV.Q        RQ0, (RQ27, RD22)
// tk_core/tk_mmllist.c:345   
  ADD          R0, 0, RQ8

.L00800A18:
// tk_core/tk_mmllist.c:348   
  BRNE.Q       R0, RQ8, .L00800A1A
// tk_core/tk_mmllist.c:349   
  MOV          .L00C02E24, RQ10
  ADD          RD22, 0, RD11
  BSR          tk_dbg_printf, R1
  BRNE.L       R0, RD22, .L00800A1B
// tk_core/tk_mmllist.c:353   
  ADD          R0, 0x00100100, RD10
  BSR          TKMM_PageAllocUsc, R1
  ADD          RQ10, 0, RQ9
  BSR          .L00800A1C, R0

.L00800A1B:
  BRNE.Q       6, RD22, .L00800A1D
// tk_core/tk_mmllist.c:368   
  ADD          RQ0, 0, RQ10
  ADD          R0, 0x00100100, RQ11
  ADD          R0, 7, RD12
  ADD          R0, 262, RD13
  ADD          R0, -1, RD14
  ADD          RQ0, 0, RQ15
  BSR          tk_mmap, R1
  ADD          RQ10, 0, RQ9
  BSR          .L00800A1E, R0

.L00800A1D:
  BRNE.Q       7, RD22, .L00800A1F
// tk_core/tk_mmllist.c:374   
  ADD          RQ0, 0, RQ10
  ADD          R0, 0x00100100, RQ11
  ADD          R0, 7, RD12
  ADD          R0, 517, RD13
  ADD          R0, -1, RD14
  ADD          RQ0, 0, RQ15
  BSR          tk_mmap, R1
  ADD          RQ10, 0, RQ9
  BSR          .L00800A20, R0

.L00800A1F:
// tk_core/tk_mmllist.c:380   
  ADD          R0, 0x00100100, RD10
  BSR          TKMM_PageAlloc, R1
  ADD          RQ10, 0, RQ9

.L00800A20:

.L00800A1E:

.L00800A1C:
  BRNE.Q       R0, RQ9, .L00800A21
// tk_core/tk_mmllist.c:385   
  ADD          R0, 0x00100100, RD10
  BSR          TKMM_PageAlloc, R1
  ADD          RQ10, 0, RQ9

.L00800A21:
// tk_core/tk_mmllist.c:389   
  MOV          tkmm_mmlist_brkbuf_c, RQ27
  MOV.Q        RQ9, (RQ27, RD22)
// tk_core/tk_mmllist.c:390   
  ADD          RQ9, 0, RQ8
  BRNE.Q       R0, RQ8, .L00800A22
// tk_core/tk_mmllist.c:393   
  MOV          .L00C02E25, RQ10
  BSR          tk_puts, R1
// tk_core/tk_mmllist.c:395   
  ADD          RQ0, 0, RQ10
  BSR          .L00C02E1F, R0

.L00800A22:
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ8, .L00800A23
// tk_core/tk_mmllist.c:399   

TKMM_MMList_AllocBrkCat.debugbreak_L059C:
  BRK          1436

.L00800A23:
  BRGE.Q       RQ9, RQ8, .L00800A24
// tk_core/tk_mmllist.c:402   

TKMM_MMList_AllocBrkCat.debugbreak_L059D:
  BRK          1437

.L00800A24:
  BRLE.Q       RQ9, RQ8, .L00800A25
// tk_core/tk_mmllist.c:404   

TKMM_MMList_AllocBrkCat.debugbreak_L059E:
  BRK          1438

.L00800A25:
// tk_core/tk_mmllist.c:406   
  ADD          RQ8, 0, RQ10
  LUI          256, RD11
  ADD          RD22, 0, RD12
  BSR          TKMM_MMList_MProtectCat, R1
// tk_core/tk_mmllist.c:411   
  ADD          RQ8, 0, RQ10
  ADD          R0, 0, RQ11
  LUI          256, RQ12
  BSR          memset, R1
// tk_core/tk_mmllist.c:417   
  ADD          RQ8, 0x00100000, RQ27
  ADD          RQ27, -4096, RQ21
// tk_core/tk_mmllist.c:418   
  MOV          tkmm_mmlist_brkend_c, RQ26
  MOV.Q        RQ21, (RQ26, RD22)
// tk_core/tk_mmllist.c:420   
  ADD          RQ8, 0, RQ26
// tk_core/tk_mmllist.c:421   
  ADD          RQ26, 4120, RQ27
  MOV.Q        RQ26, (R2, 160)
  SUB          RQ27, RQ8, RQ13
  MOV.Q        RQ27, (R2, 120)
  ADDS.L       RQ13, 0, RD18
  MOV.Q        RQ13, (R2, 144)
// tk_core/tk_mmllist.c:423   
  ADDS.L       RD18, 31, RQ12
  AND          RQ12, -16, RD18
// tk_core/tk_mmllist.c:424   
  ADD          RQ8, RD18, RQ23
// tk_core/tk_mmllist.c:425   
  MOV          tkmm_mmlist_brkpos_c, RQ11
  MOV.Q        RQ23, (RQ11, RD22)
  BRNE.L       R0, RD18, .L00800A26
// tk_core/tk_mmllist.c:428   

TKMM_MMList_AllocBrkCat.debugbreak_L059F:
  BRK          1439

.L00800A26:
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ23, .L00800A27
// tk_core/tk_mmllist.c:431   

TKMM_MMList_AllocBrkCat.debugbreak_L05A0:
  BRK          1440

.L00800A27:
  BRGT.Q       RQ9, RQ23, .L00800A28
// tk_core/tk_mmllist.c:434   

TKMM_MMList_AllocBrkCat.debugbreak_L05A1:
  BRK          1441

.L00800A28:
// tk_core/tk_mmllist.c:436   
  MOV.Q        (R2, 160), RQ27
  ADD          R0, 1028, R5
  MOV.L        RD0, (RQ27, R5)
// tk_core/tk_mmllist.c:438   
  ADD          RQ8, 0, RQ10
  LUI          256, RD11
  ADD          R0, 0, RD12
  BSR          TKMM_MMList_AddVrmBrk, R1

.L00800A1A:
// tk_core/tk_mmllist.c:443   
  MOV.Q        RQ8, (R2, 160)
// tk_core/tk_mmllist.c:445   
  ADD          RQ23, 0, RQ9
// tk_core/tk_mmllist.c:447   
  BRGE.Q       RQ9, RQ23, .L00800A29
// tk_core/tk_mmllist.c:448   

TKMM_MMList_AllocBrkCat.debugbreak_L05A2:
  BRK          1442

.L00800A29:
// tk_core/tk_mmllist.c:449   
  BRLE.Q       RQ9, RQ23, .L00800A2A
// tk_core/tk_mmllist.c:450   

TKMM_MMList_AllocBrkCat.debugbreak_L05A3:
  BRK          1443

.L00800A2A:
// tk_core/tk_mmllist.c:452   
  ADD          RQ9, RD20, RQ23
// tk_core/tk_mmllist.c:453   
  MOV          tkmm_mmlist_brkpos_c, RQ27
  MOV.Q        RQ23, (RQ27, RD22)
// tk_core/tk_mmllist.c:455   
  BRGT.Q       RQ9, RQ23, .L00800A2B
// tk_core/tk_mmllist.c:456   

TKMM_MMList_AllocBrkCat.debugbreak_L05A4:
  BRK          1444

.L00800A2B:
// tk_core/tk_mmllist.c:458   
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ9, .L00800A2C
// tk_core/tk_mmllist.c:459   

TKMM_MMList_AllocBrkCat.debugbreak_L05A5:
  BRK          1445

.L00800A2C:
// tk_core/tk_mmllist.c:461   
  ADD          R0, 15, RQ27
  BTST.Q       RQ27, RQ23, .L00800A2D
// tk_core/tk_mmllist.c:462   

TKMM_MMList_AllocBrkCat.debugbreak_L05A6:
  BRK          1446

.L00800A2D:
// tk_core/tk_mmllist.c:465   
  MOV.Q        (R2, 160), RQ27
  MOV.L        (RQ27, 0x1010), RQ26
  ADD          RQ26, 0, RQ13
  ADDS.L       RQ26, 1, RQ12
  ADD          R0, 1028, R5
  MOV.L        RQ12, (RQ27, R5)
  ADD          RQ13, 0, RD18
  MOV.Q        RQ13, (R2, 112)
// tk_core/tk_mmllist.c:466   
  ADD          R0, 1024, RD11
  BRLT.L       RD11, RD18, .L00800A2E
// tk_core/tk_mmllist.c:467   

TKMM_MMList_AllocBrkCat.debugbreak_L05A7:
  BRK          1447

.L00800A2E:
// tk_core/tk_mmllist.c:469   
  MOV.Q        (R2, 160), RQ27
  SUB          RQ9, RQ27, RQ26
  ADD          RQ27, 0, RQ13
  ADDS.L       RQ26, 0, RQ12
  MOV.Q        RQ26, (R2, 144)
  MOV.L        RQ12, (RQ13, RD18)
  MOV.Q        RQ13, (R2, 120)
  MOV.Q        RQ12, (R2, 112)
// tk_core/tk_mmllist.c:476   
  ADD          RQ9, 0, RQ10

.L00C02E1F:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_updateDeathmatchStats:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          R0, 4, RD21
  ADD          R0, 99, RD20
// wi_stuff.c:914   WI_updateAnimatedBack();
  BSR          WI_updateAnimatedBack, R1
// wi_stuff.c:916   if (acceleratestage && dm_state != 4)
  MOV.L        TU7A00CB85/acceleratestage, RD27
  BREQ.L       R0, RD27, .L008029F7
  MOV.L        TU7A00CB85/dm_state, RD27
  BREQ.Q       4, RD27, .L008029F7

.L008029F8:
// wi_stuff.c:917   {
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:920   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L008029FA:
// wi_stuff.c:921   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD9), RQ8
  BREQ.L       R0, RQ8, .L008029FD
// wi_stuff.c:923   {
  ADD          R0, 0, RD18

.L008029FE:
// wi_stuff.c:925   if (playeringame[j])
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ8
  BREQ.L       R0, RQ8, .L00802A01
// wi_stuff.c:926   dm_frags[i][j] = plrs[i].frags[j];
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD9, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  ADD          RQ13, 20, RQ27
  MOV.L        (RQ27, RD18), RQ8
  MOV          TU7A00CB85/dm_frags, RQ12
  SHAD.L       RD9, 4, RQ27
  ADD          RQ12, RQ27, RQ27
  MOV.L        RQ8, (RQ27, RD18)

.L00802A01:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L008029FE

.L00802A00:
// wi_stuff.c:928   dm_totals[i] = WI_fragSum(i);
  ADDS.L       RD9, 0, RD10
  BSR          WI_fragSum, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          TU7A00CB85/dm_totals, RQ27
  MOV.L        RQ8, (RQ27, RD9)

.L008029FD:
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L008029FA

.L008029FC:
// wi_stuff.c:933   S_StartSound(0, sfx_barexp);
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:934   dm_state = 4;
  MOV.L        RD21, TU7A00CB85/dm_state

.L008029F7:
// wi_stuff.c:938   if (dm_state == 2)
  MOV.L        TU7A00CB85/dm_state, RD27
  BRNE.Q       2, RD27, .L00802A02
  MOV.L        TU7A00CB85/bcnt, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00802A03
// wi_stuff.c:941   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A03:
// wi_stuff.c:943   stillticking = false;
  ADD          RD0, 0, RD22
// wi_stuff.c:945   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L00802A04:
// wi_stuff.c:946   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD9), RQ8
  BREQ.L       R0, RQ8, .L00802A07
// wi_stuff.c:948   {
  ADD          R0, 0, RD18

.L00802A08:
// wi_stuff.c:950   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ8
  BREQ.L       R0, RQ8, .L00802A0B
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, RD18), RQ8
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD9, R5, RQ12
  ADD          RQ27, RQ12, RQ12
  ADD          RQ12, 20, RQ13
  MOV.L        (RQ13, RD18), RQ23
  BREQ.Q       RQ23, RQ8, .L00802A0B

.L00802A0C:
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD9, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  ADD          RQ13, 20, RQ27
  MOV.L        (RQ27, RD18), RQ23
  BRGE.L       R0, RQ23, .L00802A0E
// wi_stuff.c:955   dm_frags[i][j]--;
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, RD18), RQ23
  ADDS.L       RQ23, -1, RQ8
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        RQ8, (RQ13, RD18)
  BSR          .L00802A0F, R0

.L00802A0E:
// wi_stuff.c:957   dm_frags[i][j]++;
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, RD18), RQ23
  ADDS.L       RQ23, 1, RQ8
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        RQ8, (RQ13, RD18)

.L00802A0F:
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, RD18), RQ23
  BRLE.L       99, RQ23, .L00802A10
// wi_stuff.c:960   dm_frags[i][j] = 99;
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        RD20, (RQ13, RD18)

.L00802A10:
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, RD18), RQ23
  BRGE.L       -99, RQ23, .L00802A11
// wi_stuff.c:963   dm_frags[i][j] = -99;
  MOV          TU7A00CB85/dm_frags, RQ27
  SHAD.L       RD9, 4, RQ13
  ADD          RQ27, RQ13, RQ13
  ADD          R0, -99, RD27
  MOV.L        RD27, (RQ13, RD18)

.L00802A11:
// wi_stuff.c:965   stillticking = true;
  ADD          R0, 1, RD22

.L00802A0B:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A08

.L00802A0A:
// wi_stuff.c:967   }
  ADDS.L       RD9, 0, RD10
  BSR          WI_fragSum, R1
  ADD          RQ10, 0, RQ23
  MOV          TU7A00CB85/dm_totals, RQ27
  MOV.L        RQ23, (RQ27, RD9)
  BRLE.L       99, RQ23, .L00802A12
// wi_stuff.c:971   dm_totals[i] = 99;
  MOV          TU7A00CB85/dm_totals, RQ27
  MOV.L        RD20, (RQ27, RD9)

.L00802A12:
  MOV          TU7A00CB85/dm_totals, RQ27
  MOV.L        (RQ27, RD9), RQ23
  BRGE.L       -99, RQ23, .L00802A13
// wi_stuff.c:974   dm_totals[i] = -99;
  MOV          TU7A00CB85/dm_totals, RQ27
  ADD          R0, -99, RD13
  MOV.L        RD13, (RQ27, RD9)

.L00802A13:

.L00802A07:
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L00802A04

.L00802A06:
  BRNE.L       R0, RD22, .L00802A14
// wi_stuff.c:979   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:981   dm_state++;
  MOV.L        TU7A00CB85/dm_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/dm_state

.L00802A14:
  BSR          .L00802A15, R0

.L00802A02:
  MOV.L        TU7A00CB85/dm_state, RD27
  BRNE.Q       4, RD27, .L00802A16
  MOV.L        TU7A00CB85/acceleratestage, RD27
  BREQ.L       R0, RD27, .L00802A17
// wi_stuff.c:988   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 31, RD11
  BSR          S_StartSound, R1
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ8
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ23
  OR           RQ8, RQ23, RQ27
  BREQ.L       R0, RQ27, .L00802A18
// wi_stuff.c:994   WI_initNoState();
  BSR          WI_initNoState, R1
  BSR          .L00802A19, R0

.L00802A18:
// wi_stuff.c:996   WI_initShowNextLoc();
  BSR          WI_initShowNextLoc, R1

.L00802A19:

.L00802A17:
  BSR          .L00802A1A, R0

.L00802A16:
  MOV.L        TU7A00CB85/dm_state, RD27
  ADD          R0, 1, RD13
  BTST.L       RD13, RD27, .L00802A1B
  MOV.L        TU7A00CB85/cnt_pause, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU7A00CB85/cnt_pause
  BRNE.L       R0, RD27, .L00802A1C
// wi_stuff.c:1002   {
  MOV.L        TU7A00CB85/dm_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/dm_state
// wi_stuff.c:1004   cnt_pause = TICRATE;
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB85/cnt_pause

.L00802A1C:

.L00802A1B:

.L00802A1A:

.L00802A15:

.L00C02E37:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_PlayerThink:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// p_user.c:244   if (player->cheats & CF_NOCLIP)
  MOV.L        (RQ18, 200), RQ8
  ADD          R0, 1, RD13
  BTST.L       RD13, RQ8, .L00802398
// p_user.c:245   player->mo->flags |= MF_NOCLIP;
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 160), RQ8
  OR           RQ8, 4096, RQ9
  MOV.L        RQ9, (RQ23, 160)
  BSR          .L00802399, R0

.L00802398:
// p_user.c:247   player->mo->flags &= ~MF_NOCLIP;
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 160), RQ9
  AND          RQ9, -4097, RQ8
  MOV.L        RQ8, (RQ23, 160)

.L00802399:
// p_user.c:250   cmd = &player->cmd;
  ADD          RQ18, 12, RQ23
  MOV.Q        RQ23, (R2, 112)
// p_user.c:251   if (player->mo->flags & MF_JUSTATTACKED)
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 160), RQ9
  ADD          R0, 128, RD13
  BTST.L       RD13, RQ9, .L0080239A
// p_user.c:252   {
  MOV.Q        (R2, 112), RQ13
  MOV.W        RD0, (RQ13, 2)
// p_user.c:254   cmd->forwardmove = 0xc800/512;
  ADD          R0, 100, RD12
  MOV.B        RD12, (RQ13, 0)
// p_user.c:255   cmd->sidemove = 0;
  MOV.B        RD0, (RQ13, 1)
// p_user.c:256   player->mo->flags &= ~MF_JUSTATTACKED;
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 160), RQ9
  AND          RQ9, -129, RQ8
  MOV.L        RQ8, (RQ23, 160)

.L0080239A:
// p_user.c:260   if (player->playerstate == PST_DEAD)
  MOV.L        (RQ18, 8), RQ9
  BRNE.Q       1, RQ9, .L0080239B
// p_user.c:261   {
  ADD          RQ18, 0, RQ10
  BSR          P_DeathThink, R1
// p_user.c:263   return;
  BSR          .L00C02E3D, R0

.L0080239B:
// p_user.c:269   if (player->mo->reactiontime)
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 184), RQ9
  BREQ.L       R0, RQ9, .L0080239C
// p_user.c:270   player->mo->reactiontime--;
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 184), RQ9
  ADDS.L       RQ9, -1, RQ8
  MOV.L        RQ8, (RQ23, 184)
  BSR          .L0080239D, R0

.L0080239C:
// p_user.c:272   P_MovePlayer (player);
  ADD          RQ18, 0, RQ10
  BSR          P_MovePlayer, R1

.L0080239D:
// p_user.c:274   P_CalcHeight (player);
  ADD          RQ18, 0, RQ10
  BSR          P_CalcHeight, R1
// p_user.c:276   if (player->mo->subsector->sector->special)
  MOV.Q        (RQ18, 0), RQ23
  MOV.Q        (RQ23, 88), RQ22
  MOV.Q        (RQ22, 0), RQ23
  MOV.W        (RQ23, 14), RQ9
  BREQ.L       R0, RQ9, .L0080239E
// p_user.c:277   P_PlayerInSpecialSector (player);
  ADD          RQ18, 0, RQ10
  BSR          P_PlayerInSpecialSector, R1

.L0080239E:
// p_user.c:282   if (cmd->buttons & BT_SPECIAL)
  MOV.Q        (R2, 112), RQ13
  MOVU.B       (RQ13, 7), RQ8
  ADD          R0, 128, RD12
  BTST.L       RD12, RQ8, .L0080239F
// p_user.c:283   cmd->buttons = 0;			
  MOV.Q        (R2, 112), RQ13
  MOVU.B       RD0, (RQ13, 7)

.L0080239F:
// p_user.c:285   if (cmd->buttons & BT_CHANGE)
  MOV.Q        (R2, 112), RQ13
  MOVU.B       (RQ13, 7), RQ9
  ADD          R0, 4, RD12
  BTST.L       RD12, RQ9, .L008023A0
// p_user.c:290   newweapon = (cmd->buttons&BT_WEAPONMASK)>>BT_WEAPONSHIFT;
  MOV.Q        (R2, 112), RQ13
  MOVU.B       (RQ13, 7), RQ8
  AND          RQ8, 56, RQ9
  SHAR         RQ9, 3, RD20
  BRNE.L       R0, RD20, .L008023A1
  MOV.L        (RQ18, 152), RQ8
  BREQ.L       R0, RQ8, .L008023A1

.L008023A3:
  MOV.L        (RQ18, 116), RQ9
  BRNE.Q       7, RQ9, .L008023A5
  MOV.L        (RQ18, 52), RQ8
  BREQ.L       R0, RQ8, .L008023A5
  BSR          .L008023A1, R0

.L008023A5:

.L008023A2:
// p_user.c:296   {
  ADD          R0, 7, RD20

.L008023A1:
  MOV.L        gamemode, RD13
  ADD          R0, 2, R5
  CMPEQ.Q      RD13, R5, RQ9
  ADD          R0, 2, R5
  CMPEQ.Q      RD20, R5, RQ8
  BTST.L       RQ8, RQ9, .L008023A7
  MOV.L        (RQ18, 156), RQ9
  BREQ.L       R0, RQ9, .L008023A7

.L008023A9:
  MOV.L        (RQ18, 116), RQ8
  BREQ.Q       8, RQ8, .L008023A7

.L008023A8:
// p_user.c:304   {
  ADD          R0, 8, RD20

.L008023A7:
  ADD          RQ18, 124, RQ23
  MOV.L        (RQ23, RD20), RQ9
  BREQ.L       R0, RQ9, .L008023AB
  MOV.L        (RQ18, 116), RQ8
  BREQ.Q       RQ8, RD20, .L008023AB

.L008023AC:
  ADD          R0, 5, R5
  CMPNE.Q      RD20, R5, RQ9
  ADD          R0, 6, R5
  CMPNE.Q      RD20, R5, RQ8
  AND          RQ9, RQ8, RQ21
  MOV.L        gamemode, RD13
  CMPNE.Q      RD13, R0, RQ8
  OR           RQ21, RQ8, RQ9
  BREQ.L       R0, RQ9, .L008023AE
// p_user.c:317   {
  MOV.L        RD20, (RQ18, 120)

.L008023AE:

.L008023AB:

.L008023A0:
// p_user.c:324   if (cmd->buttons & BT_USE)
  MOV.Q        (R2, 112), RQ13
  MOVU.B       (RQ13, 7), RQ21
  ADD          R0, 2, RD12
  BTST.L       RD12, RQ21, .L008023AF
  MOV.L        (RQ18, 196), RQ8
  BRNE.L       R0, RQ8, .L008023B0
// p_user.c:327   {
  ADD          RQ18, 0, RQ10
  BSR          P_UseLines, R1
// p_user.c:329   player->usedown = true;
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ18, 196)

.L008023B0:
  BSR          .L008023B1, R0

.L008023AF:
// p_user.c:333   player->usedown = false;
  MOV.L        RD0, (RQ18, 196)

.L008023B1:
// p_user.c:336   P_MovePsprites (player);
  ADD          RQ18, 0, RQ10
  BSR          P_MovePsprites, R1
// p_user.c:341   if (player->powers[pw_strength])
  MOV.L        (RQ18, 52), RQ9
  BREQ.L       R0, RQ9, .L008023B2
// p_user.c:342   player->powers[pw_strength]++;	
  ADD          RQ18, 48, RQ22
  MOV.L        (RQ22, 4), RQ21
  ADDS.L       RQ21, 1, RQ8
  MOV.L        RQ8, (RQ22, 4)

.L008023B2:
// p_user.c:344   if (player->powers[pw_invulnerability])
  MOV.L        (RQ18, 48), RQ9
  BREQ.L       R0, RQ9, .L008023B3
// p_user.c:345   player->powers[pw_invulnerability]--;
  ADD          RQ18, 48, RQ22
  MOV.L        (RQ22, 0), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ22, 0)

.L008023B3:
// p_user.c:347   if (player->powers[pw_invisibility])
  MOV.L        (RQ18, 56), RQ9
  BREQ.L       R0, RQ9, .L008023B4
  ADD          RQ18, 48, RQ22
  MOV.L        (RQ22, 8), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ22, 8)
  BRNE.L       R0, RQ8, .L008023B5
// p_user.c:349   player->mo->flags &= ~MF_SHADOW;
  MOV.Q        (RQ18, 0), RQ23
  MOV.L        (RQ23, 160), RQ9
  AND          RQ9, 0xFFFFFFFFFFFBFFFF, RQ21
  MOV.L        RQ21, (RQ23, 160)

.L008023B5:

.L008023B4:
// p_user.c:351   if (player->powers[pw_infrared])
  MOV.L        (RQ18, 68), RQ9
  BREQ.L       R0, RQ9, .L008023B6
// p_user.c:352   player->powers[pw_infrared]--;
  ADD          RQ18, 48, RQ22
  MOV.L        (RQ22, 20), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ22, 20)

.L008023B6:
// p_user.c:354   if (player->powers[pw_ironfeet])
  MOV.L        (RQ18, 60), RQ9
  BREQ.L       R0, RQ9, .L008023B7
// p_user.c:355   player->powers[pw_ironfeet]--;
  ADD          RQ18, 48, RQ22
  MOV.L        (RQ22, 12), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ22, 12)

.L008023B7:
// p_user.c:357   if (player->damagecount)
  MOV.L        (RQ18, 232), RQ9
  BREQ.L       R0, RQ9, .L008023B8
// p_user.c:358   player->damagecount--;
  MOV.L        (RQ18, 232), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ18, 232)

.L008023B8:
// p_user.c:360   if (player->bonuscount)
  MOV.L        (RQ18, 236), RQ9
  BREQ.L       R0, RQ9, .L008023B9
// p_user.c:361   player->bonuscount--;
  MOV.L        (RQ18, 236), RQ21
  ADDS.L       RQ21, -1, RQ8
  MOV.L        RQ8, (RQ18, 236)

.L008023B9:
// p_user.c:365   if (player->powers[pw_invulnerability])
  MOV.L        (RQ18, 48), RQ9
  BREQ.L       R0, RQ9, .L008023BA
  MOV.L        (RQ18, 48), RQ21
  BRGT.L       128, RQ21, .L008023BC
  MOV.L        (RQ18, 48), RQ9
  ADD          R0, 8, RD13
  BTSTN.L      RD13, RQ9, .L008023BC
  BSR          .L008023BB, R0

.L008023BC:
// p_user.c:369   player->fixedcolormap = INVERSECOLORMAP;
  ADD          R0, 32, RD13
  MOV.L        RD13, (RQ18, 252)
  BSR          .L008023BE, R0

.L008023BB:
// p_user.c:371   player->fixedcolormap = 0;
  MOV.L        RD0, (RQ18, 252)

.L008023BE:
  BSR          .L008023BF, R0

.L008023BA:
  MOV.L        (RQ18, 68), RQ21
  BREQ.L       R0, RQ21, .L008023C0
  MOV.L        (RQ18, 68), RQ9
  BRGT.L       128, RQ9, .L008023C2
  MOV.L        (RQ18, 68), RQ21
  ADD          R0, 8, RD13
  BTSTN.L      RD13, RQ21, .L008023C2
  BSR          .L008023C1, R0

.L008023C2:
// p_user.c:379   player->fixedcolormap = 1;
  ADD          R0, 1, RD13
  MOV.L        RD13, (RQ18, 252)
  BSR          .L008023C4, R0

.L008023C1:
// p_user.c:382   player->fixedcolormap = 0;
  MOV.L        RD0, (RQ18, 252)

.L008023C4:
  BSR          .L008023C5, R0

.L008023C0:
// p_user.c:385   player->fixedcolormap = 0;
  MOV.L        RD0, (RQ18, 252)

.L008023C5:

.L008023BF:

.L00C02E3D:
  ADD          R2, 352, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0
  .balign 4

__memcpy32:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.Q        RQ12, (R2, 72)
// pdpc201/string.c:2223   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.Q        (R2, 72), RQ12
  BSR          memcpy, R1

.L00C02E43:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

F_CastTicker:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// f_finale.c:425   if (--casttics > 0)
  MOV.L        casttics, RD22
  ADDS.L       RD22, -1, RD22
  MOV.L        RD22, casttics
  BRGT.L       R0, RD22, .L00C02E49
// f_finale.c:428   if (caststate->tics == -1 || caststate->nextstate == S_NULL)
  MOV.Q        caststate, RQ22
  MOV.L        (RQ22, 8), RQ18
  BREQ.Q       -1, RQ18, .L008012DA
  MOV.Q        caststate, RQ22
  MOV.L        (RQ22, 24), RQ18
  BREQ.L       R0, RQ18, .L008012DA
  BSR          .L008012D9, R0

.L008012DA:
// f_finale.c:431   castnum++;
  MOV.L        castnum, RD22
  ADDS.L       RD22, 1, RD22
// f_finale.c:432   castdeath = false;
  MOV.L        RD0, castdeath
  MOV          castorder, RQ21
  SHAD.L       RD22, 4, RQ20
  ADD          RQ21, RQ20, RQ20
  MOV.L        RD22, castnum
  MOV.Q        (RQ20, 0), RQ23
  BRNE.Q       RQ0, RQ23, .L008012DC
// f_finale.c:434   castnum = 0;
  MOV.L        RD0, castnum

.L008012DC:
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 16), RQ18
  BREQ.L       R0, RQ18, .L008012DD
// f_finale.c:436   S_StartSound (NULL, mobjinfo[castorder[castnum].type].seesound);
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 16), RQ18
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          S_StartSound, R1

.L008012DD:
// f_finale.c:437   caststate = &states[mobjinfo[castorder[castnum].type].seestate];
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 12), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate
// f_finale.c:438   castframes = 0;
  MOV.L        RD0, castframes
  BSR          .L008012DE, R0

.L008012D9:
  MOV          states, RQ22
  ADD          R0, 154, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ23
  ADD          RQ22, RQ23, RQ23
  MOV.Q        caststate, RQ22
  BRNE.Q       RQ23, RQ22, .L008012DF
// f_finale.c:444   goto stopattack;	// Oh, gross hack!
  BSR          .L008012E0, R0

.L008012DF:
// f_finale.c:445   st = caststate->nextstate;
  MOV.Q        caststate, RQ22
  MOV.L        (RQ22, 24), RD8
// f_finale.c:446   caststate = &states[st];
  MOV          states, RQ21
  ADD          R0, 40, R5
  MUL.L        RD8, R5, RQ22
  ADD          RQ21, RQ22, RQ22
  MOV.Q        RQ22, caststate
// f_finale.c:447   castframes++;
  MOV.L        castframes, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, castframes
// f_finale.c:450   switch (st)
  AND          RD8, -1, RQ18
  BRGE.L       419, RQ18, .L008012FD
  AND          RD8, -1, RQ18
  BRGE.L       340, RQ18, .L008012FE
  BREQ.Q       154, RD8, .L008012E2
  BREQ.Q       185, RD8, .L008012E3
  BREQ.Q       218, RD8, .L008012E4
  BREQ.Q       256, RD8, .L008012E5
  BREQ.Q       336, RD8, .L008012E6
  BREQ.Q       338, RD8, .L008012E7
  BSR          .L008012FC, R0

.L008012FE:
  BREQ.Q       340, RD8, .L008012E8
  BREQ.Q       377, RD8, .L008012EB
  BREQ.Q       380, RD8, .L008012EA
  BREQ.Q       383, RD8, .L008012E9
  BREQ.Q       417, RD8, .L008012EC
  BREQ.Q       418, RD8, .L008012ED

.L008012FD:
  AND          RD8, -1, RQ18
  BRGE.L       616, RQ18, .L008012FF
  BREQ.Q       419, RD8, .L008012EE
  BREQ.Q       454, RD8, .L008012EF
  BREQ.Q       486, RD8, .L008012F0
  BREQ.Q       505, RD8, .L008012F3
  BREQ.Q       538, RD8, .L008012F1
  BREQ.Q       567, RD8, .L008012F2
  BREQ.Q       590, RD8, .L008012F4
  BSR          .L008012FC, R0

.L008012FF:
  BREQ.Q       616, RD8, .L008012F5
  BREQ.Q       617, RD8, .L008012F6
  BREQ.Q       648, RD8, .L008012F7
  BREQ.Q       685, RD8, .L008012F8
  BREQ.Q       687, RD8, .L008012F9
  BREQ.Q       689, RD8, .L008012FA
  BREQ.Q       710, RD8, .L008012FB
  BSR          .L008012FC, R0

.L008012E2:
// f_finale.c:452   case S_PLAY_ATK1:	sfx = sfx_dshtgn; break;
  ADD          R0, 4, RD9
  BSR          .L008012E1, R0

.L008012E3:
// f_finale.c:453   case S_POSS_ATK2:	sfx = sfx_pistol; break;
  ADD          R0, 1, RD9
  BSR          .L008012E1, R0

.L008012E4:
// f_finale.c:454   case S_SPOS_ATK2:	sfx = sfx_shotgn; break;
  ADD          R0, 2, RD9
  BSR          .L008012E1, R0

.L008012E5:
// f_finale.c:455   case S_VILE_ATK2:	sfx = sfx_vilatk; break;
  ADD          R0, 54, RD9
  BSR          .L008012E1, R0

.L008012E6:
// f_finale.c:456   case S_SKEL_FIST2:	sfx = sfx_skeswg; break;
  ADD          R0, 56, RD9
  BSR          .L008012E1, R0

.L008012E7:
// f_finale.c:457   case S_SKEL_FIST4:	sfx = sfx_skepch; break;
  ADD          R0, 53, RD9
  BSR          .L008012E1, R0

.L008012E8:
// f_finale.c:458   case S_SKEL_MISS2:	sfx = sfx_skeatk; break;
  ADD          R0, 107, RD9
  BSR          .L008012E1, R0

.L008012E9:

.L008012EA:

.L008012EB:
// f_finale.c:461   case S_FATT_ATK2:	sfx = sfx_firsht; break;
  ADD          R0, 16, RD9
  BSR          .L008012E1, R0

.L008012EC:

.L008012ED:

.L008012EE:
// f_finale.c:464   case S_CPOS_ATK4:	sfx = sfx_shotgn; break;
  ADD          R0, 2, RD9
  BSR          .L008012E1, R0

.L008012EF:
// f_finale.c:465   case S_TROO_ATK3:	sfx = sfx_claw; break;
  ADD          R0, 55, RD9
  BSR          .L008012E1, R0

.L008012F0:
// f_finale.c:466   case S_SARG_ATK2:	sfx = sfx_sgtatk; break;
  ADD          R0, 52, RD9
  BSR          .L008012E1, R0

.L008012F1:

.L008012F2:

.L008012F3:
// f_finale.c:469   case S_HEAD_ATK2:	sfx = sfx_firsht; break;
  ADD          R0, 16, RD9
  BSR          .L008012E1, R0

.L008012F4:
// f_finale.c:470   case S_SKULL_ATK2:	sfx = sfx_sklatk; break;
  ADD          R0, 51, RD9
  BSR          .L008012E1, R0

.L008012F5:

.L008012F6:
// f_finale.c:472   case S_SPID_ATK3:	sfx = sfx_shotgn; break;
  ADD          R0, 2, RD9
  BSR          .L008012E1, R0

.L008012F7:
// f_finale.c:473   case S_BSPI_ATK2:	sfx = sfx_plasma; break;
  ADD          R0, 8, RD9
  BSR          .L008012E1, R0

.L008012F8:

.L008012F9:

.L008012FA:
// f_finale.c:476   case S_CYBER_ATK6:	sfx = sfx_rlaunc; break;
  ADD          R0, 14, RD9
  BSR          .L008012E1, R0

.L008012FB:
// f_finale.c:477   case S_PAIN_ATK3:	sfx = sfx_sklatk; break;
  ADD          R0, 51, RD9
  BSR          .L008012E1, R0

.L008012FC:
// f_finale.c:478   default: sfx = 0; break;
  ADD          R0, 0, RD9

.L008012E1:
  BREQ.L       R0, RD9, .L00801300
// f_finale.c:482   S_StartSound (NULL, sfx);
  ADD          RQ0, 0, RQ10
  ADDS.L       RD9, 0, RD11
  BSR          S_StartSound, R1

.L00801300:

.L008012DE:
// f_finale.c:485   if (castframes == 12)
  MOV.L        castframes, RD22
  BRNE.Q       12, RD22, .L00801301
// f_finale.c:488   castattacking = true;
  ADD          R0, 1, RD22
  MOV.L        RD22, castattacking
  MOV.L        castonmelee, RD22
  BREQ.L       R0, RD22, .L00801302
// f_finale.c:490   caststate=&states[mobjinfo[castorder[castnum].type].meleestate];
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 40), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate
  BSR          .L00801303, R0

.L00801302:
// f_finale.c:492   caststate=&states[mobjinfo[castorder[castnum].type].missilestate];
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 44), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate

.L00801303:
// f_finale.c:493   castonmelee ^= 1;
  MOV.L        castonmelee, RD22
  XOR          RD22, 1, RD22
  MOV.L        RD22, castonmelee
  MOV          states, RQ22
  ADD          RQ22, 0, RQ23
  MOV.Q        caststate, RQ22
  BRNE.Q       RQ23, RQ22, .L00801304
  MOV.L        castonmelee, RD22
  BREQ.L       R0, RD22, .L00801305
// f_finale.c:497   caststate=
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 40), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate
  BSR          .L00801306, R0

.L00801305:
// f_finale.c:500   caststate=
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 44), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate

.L00801306:

.L00801304:

.L00801301:
// f_finale.c:505   if (castattacking)
  MOV.L        castattacking, RD22
  BREQ.L       R0, RD22, .L00801307
  MOV.L        castframes, RD22
  BREQ.Q       24, RD22, .L00801309
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 12), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ23
  ADD          RQ22, RQ23, RQ23
  MOV.Q        caststate, RQ22
  BREQ.Q       RQ23, RQ22, .L00801309
  BSR          .L00801308, R0

.L00801309:
// f_finale.c:509   {

.L008012E0:
// f_finale.c:510   stopattack:
  MOV.L        RD0, castattacking
// f_finale.c:512   castframes = 0;
  MOV.L        RD0, castframes
// f_finale.c:513   caststate = &states[mobjinfo[castorder[castnum].type].seestate];
  MOV          castorder, RQ22
  MOV.L        castnum, RD21
  SHAD.L       RD21, 4, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  MOV          mobjinfo, RQ22
  ADD          R0, 92, R5
  MUL.L        RQ18, R5, RQ21
  ADD          RQ22, RQ21, RQ21
  MOV.L        (RQ21, 12), RQ18
  MOV          states, RQ22
  ADD          R0, 40, R5
  MUL.L        RQ18, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        RQ13, caststate

.L00801308:

.L00801307:
// f_finale.c:517   casttics = caststate->tics;
  MOV.Q        caststate, RQ22
  MOV.L        (RQ22, 8), RD21
// f_finale.c:518   if (casttics == -1)
  MOV.L        RD21, casttics
  BRNE.Q       -1, RD21, .L0080130B
// f_finale.c:519   casttics = 15;
  ADD          R0, 15, RD22
  MOV.L        RD22, casttics

.L0080130B:

.L00C02E49:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_TouchSpecialThing:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -416, R2
  ADD          RQ10, 0, RQ23
  MOV.Q        RQ11, (R2, 192)
// p_inter.c:350   delta = special->z - toucher->z;
  MOV.L        (RQ23, 32), RQ18
  MOV.Q        (R2, 192), RQ27
  MOV.L        (RQ27, 32), RQ26
  SUBS.L       RQ18, RQ26, RD13
// p_inter.c:352   if (delta > toucher->height
  MOV.L        (RQ27, 108), RQ18
  CMPGT.Q      RD13, RQ18, RQ26
  LUI          -128, RD12
  CMPGT.Q      RD12, RD13, RQ18
  MOV.L        RD13, (R2, 188)
  OR           RQ26, RQ18, RQ11
  MOV.Q        RQ26, (R2, 168)
  BRNE.L       R0, RQ11, .L00C02E4F
// p_inter.c:360   sound = sfx_itemup;	
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 184)
// p_inter.c:361   player = toucher->player;
  MOV.Q        (R2, 192), RQ26
  MOV.Q        (RQ26, 192), RQ9
// p_inter.c:365   if (toucher->health <= 0)
  MOV.L        (RQ26, 164), RQ18
  BRLE.L       R0, RQ18, .L00C02E4F
// p_inter.c:369   switch (special->sprite)
  MOV.L        (RQ23, 60), RQ27
  AND          RQ27, -1, RQ26
  MOV.Q        RQ27, (R2, 168)
  ADD          RQ26, -55, RQ10
  ADD          R0, 39, RQ6
  BRGTU.Q      RQ6, RQ10, .L00801C87
  LEA.B        .L00C80019, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80019:
  BSR          .L00801C63, R0
  BSR          .L00801C64, R0
  BSR          .L00801C87, R0
  BSR          .L00801C87, R0
  BSR          .L00801C87, R0
  BSR          .L00801C65, R0
  BSR          .L00801C66, R0
  BSR          .L00801C69, R0
  BSR          .L00801C6B, R0
  BSR          .L00801C6A, R0
  BSR          .L00801C6C, R0
  BSR          .L00801C6E, R0
  BSR          .L00801C6D, R0
  BSR          .L00801C6F, R0
  BSR          .L00801C70, R0
  BSR          .L00801C67, R0
  BSR          .L00801C71, R0
  BSR          .L00801C72, R0
  BSR          .L00801C73, R0
  BSR          .L00801C68, R0
  BSR          .L00801C74, R0
  BSR          .L00801C75, R0
  BSR          .L00801C76, R0
  BSR          .L00801C77, R0
  BSR          .L00801C78, R0
  BSR          .L00801C79, R0
  BSR          .L00801C7A, R0
  BSR          .L00801C7B, R0
  BSR          .L00801C7C, R0
  BSR          .L00801C7D, R0
  BSR          .L00801C7E, R0
  BSR          .L00801C7F, R0
  BSR          .L00801C80, R0
  BSR          .L00801C81, R0
  BSR          .L00801C82, R0
  BSR          .L00801C83, R0
  BSR          .L00801C84, R0
  BSR          .L00801C85, R0
  BSR          .L00801C86, R0
  BSR          .L00801C87, R0

.L00801C63:
// p_inter.c:372   case SPR_ARM1:
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_GiveArmor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:375   player->message = GOTARMOR;
  MOV          .L00C02E50, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:376   break;
  BSR          .L00801C62, R0

.L00801C64:
// p_inter.c:378   case SPR_ARM2:
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          P_GiveArmor, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:381   player->message = GOTMEGA;
  MOV          .L00C02E51, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:382   break;
  BSR          .L00801C62, R0

.L00801C65:
// p_inter.c:385   case SPR_BON1:
  MOV.L        (RQ9, 36), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ9, 36)
// p_inter.c:387   if (player->health > 200)
  MOV.L        (RQ9, 36), RQ18
  BRLE.L       200, RQ18, .L00801C88
// p_inter.c:388   player->health = 200;
  ADD          R0, 200, RD27
  MOV.L        RD27, (RQ9, 36)

.L00801C88:
// p_inter.c:389   player->mo->health = player->health;
  MOV.L        (RQ9, 36), RQ8
  MOV.Q        (RQ9, 0), RQ21
  MOV.L        RQ8, (RQ21, 164)
// p_inter.c:390   player->message = GOTHTHBONUS;
  MOV          .L00C02E52, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:391   break;
  BSR          .L00801C62, R0

.L00801C66:
// p_inter.c:393   case SPR_BON2:
  MOV.L        (RQ9, 40), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ9, 40)
// p_inter.c:395   if (player->armorpoints > 200)
  MOV.L        (RQ9, 40), RQ18
  BRLE.L       200, RQ18, .L00801C89
// p_inter.c:396   player->armorpoints = 200;
  ADD          R0, 200, RD27
  MOV.L        RD27, (RQ9, 40)

.L00801C89:
// p_inter.c:397   if (!player->armortype)
  MOV.L        (RQ9, 44), RQ8
  BRNE.L       R0, RQ8, .L00801C8A
// p_inter.c:398   player->armortype = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, 44)

.L00801C8A:
// p_inter.c:399   player->message = GOTARMBONUS;
  MOV          .L00C02E53, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:400   break;
  BSR          .L00801C62, R0

.L00801C67:
// p_inter.c:402   case SPR_SOUL:
  MOV.L        (RQ9, 36), RQ18
  ADDS.L       RQ18, 100, RQ8
  MOV.L        RQ8, (RQ9, 36)
// p_inter.c:404   if (player->health > 200)
  MOV.L        (RQ9, 36), RQ18
  BRLE.L       200, RQ18, .L00801C8B
// p_inter.c:405   player->health = 200;
  ADD          R0, 200, RD27
  MOV.L        RD27, (RQ9, 36)

.L00801C8B:
// p_inter.c:406   player->mo->health = player->health;
  MOV.L        (RQ9, 36), RQ8
  MOV.Q        (RQ9, 0), RQ21
  MOV.L        RQ8, (RQ21, 164)
// p_inter.c:407   player->message = GOTSUPER;
  MOV          .L00C02E54, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:408   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:409   break;
  BSR          .L00801C62, R0

.L00801C68:
// p_inter.c:411   case SPR_MEGA:
  MOV.L        gamemode, RD27
  ADD          R0, 2, RD26
  BRNE.Q       RD26, RD27, .L00C02E4F
// p_inter.c:414   player->health = 200;
  ADD          R0, 200, RD27
  MOV.L        RD27, (RQ9, 36)
// p_inter.c:415   player->mo->health = player->health;
  MOV.L        (RQ9, 36), RQ18
  MOV.Q        (RQ9, 0), RQ21
  MOV.L        RQ18, (RQ21, 164)
// p_inter.c:416   P_GiveArmor (player,2);
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          P_GiveArmor, R1
// p_inter.c:417   player->message = GOTMSPHERE;
  MOV          .L00C02E55, RQ26
  MOV.Q        RQ26, (RQ9, 224)
// p_inter.c:418   sound = sfx_getpow;
  ADD          R0, 93, RD13
  MOV.L        RD13, (R2, 184)
// p_inter.c:419   break;
  BSR          .L00801C62, R0

.L00801C69:
// p_inter.c:423   case SPR_BKEY:
  MOV.L        (RQ9, 72), RQ18
  BRNE.L       R0, RQ18, .L00801C8C
// p_inter.c:425   player->message = GOTBLUECARD;
  MOV          .L00C02E56, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C8C:
// p_inter.c:426   P_GiveCard (player, it_bluecard);
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_GiveCard, R1
// p_inter.c:427   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:429   return;
  BSR          .L00C02E4F, R0

.L00801C6A:
// p_inter.c:431   case SPR_YKEY:
  MOV.L        (RQ9, 76), RQ18
  BRNE.L       R0, RQ18, .L00801C8D
// p_inter.c:433   player->message = GOTYELWCARD;
  MOV          .L00C02E57, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C8D:
// p_inter.c:434   P_GiveCard (player, it_yellowcard);
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_GiveCard, R1
// p_inter.c:435   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:437   return;
  BSR          .L00C02E4F, R0

.L00801C6B:
// p_inter.c:439   case SPR_RKEY:
  MOV.L        (RQ9, 80), RQ18
  BRNE.L       R0, RQ18, .L00801C8E
// p_inter.c:441   player->message = GOTREDCARD;
  MOV          .L00C02E58, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C8E:
// p_inter.c:442   P_GiveCard (player, it_redcard);
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          P_GiveCard, R1
// p_inter.c:443   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:445   return;
  BSR          .L00C02E4F, R0

.L00801C6C:
// p_inter.c:447   case SPR_BSKU:
  MOV.L        (RQ9, 84), RQ18
  BRNE.L       R0, RQ18, .L00801C8F
// p_inter.c:449   player->message = GOTBLUESKUL;
  MOV          .L00C02E59, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C8F:
// p_inter.c:450   P_GiveCard (player, it_blueskull);
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          P_GiveCard, R1
// p_inter.c:451   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:453   return;
  BSR          .L00C02E4F, R0

.L00801C6D:
// p_inter.c:455   case SPR_YSKU:
  MOV.L        (RQ9, 88), RQ18
  BRNE.L       R0, RQ18, .L00801C90
// p_inter.c:457   player->message = GOTYELWSKUL;
  MOV          .L00C02E5A, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C90:
// p_inter.c:458   P_GiveCard (player, it_yellowskull);
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  BSR          P_GiveCard, R1
// p_inter.c:459   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:461   return;
  BSR          .L00C02E4F, R0

.L00801C6E:
// p_inter.c:463   case SPR_RSKU:
  MOV.L        (RQ9, 92), RQ18
  BRNE.L       R0, RQ18, .L00801C91
// p_inter.c:465   player->message = GOTREDSKULL;
  MOV          .L00C02E5B, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C91:
// p_inter.c:466   P_GiveCard (player, it_redskull);
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  BSR          P_GiveCard, R1
// p_inter.c:467   if (!netgame)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00801C62
// p_inter.c:469   return;
  BSR          .L00C02E4F, R0

.L00801C6F:
// p_inter.c:472   case SPR_STIM:
  ADD          RQ9, 0, RQ10
  ADD          R0, 10, RD11
  BSR          P_GiveBody, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:475   player->message = GOTSTIM;
  MOV          .L00C02E5C, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:476   break;
  BSR          .L00801C62, R0

.L00801C70:
// p_inter.c:478   case SPR_MEDI:
  ADD          RQ9, 0, RQ10
  ADD          R0, 25, RD11
  BSR          P_GiveBody, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:482   if (player->health < 25)
  MOV.L        (RQ9, 36), RQ8
  BRGE.L       25, RQ8, .L00801C92
// p_inter.c:483   player->message = GOTMEDINEED;
  MOV          .L00C02E5D, RQ27
  MOV.Q        RQ27, (RQ9, 224)
  BSR          .L00801C93, R0

.L00801C92:
// p_inter.c:485   player->message = GOTMEDIKIT;
  MOV          .L00C02E5E, RQ27
  MOV.Q        RQ27, (RQ9, 224)

.L00801C93:
// p_inter.c:486   break;
  BSR          .L00801C62, R0

.L00801C71:
// p_inter.c:490   case SPR_PINV:
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_GivePower, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:493   player->message = GOTINVUL;
  MOV          .L00C02E5F, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:494   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:495   break;
  BSR          .L00801C62, R0

.L00801C72:
// p_inter.c:497   case SPR_PSTR:
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_GivePower, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:500   player->message = GOTBERSERK;
  MOV          .L00C02E60, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:501   if (player->readyweapon != wp_fist)
  MOV.L        (RQ9, 116), RQ18
  BREQ.L       R0, RQ18, .L00801C94
// p_inter.c:502   player->pendingweapon = wp_fist;
  MOV.L        RD0, (RQ9, 120)

.L00801C94:
// p_inter.c:503   sound = sfx_getpow;
  ADD          R0, 93, RD27
  MOV.L        RD27, (R2, 184)
// p_inter.c:504   break;
  BSR          .L00801C62, R0

.L00801C73:
// p_inter.c:506   case SPR_PINS:
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  BSR          P_GivePower, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:509   player->message = GOTINVIS;
  MOV          .L00C02E61, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:510   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:511   break;
  BSR          .L00801C62, R0

.L00801C74:
// p_inter.c:513   case SPR_SUIT:
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  BSR          P_GivePower, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:516   player->message = GOTSUIT;
  MOV          .L00C02E62, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:517   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:518   break;
  BSR          .L00801C62, R0

.L00801C75:
// p_inter.c:520   case SPR_PMAP:
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  BSR          P_GivePower, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:523   player->message = GOTMAP;
  MOV          .L00C02E63, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:524   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:525   break;
  BSR          .L00801C62, R0

.L00801C76:
// p_inter.c:527   case SPR_PVIS:
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  BSR          P_GivePower, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:530   player->message = GOTVISOR;
  MOV          .L00C02E64, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:531   sound = sfx_getpow;
  ADD          R0, 93, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:532   break;
  BSR          .L00801C62, R0

.L00801C77:
// p_inter.c:535   case SPR_CLIP:
  MOV.L        (RQ23, 160), RQ8
  LUI          32, RD27
  BTST.L       RD27, RQ8, .L00801C95
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 0, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
  BSR          .L00801C96, R0

.L00801C95:
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F

.L00801C96:
// p_inter.c:545   }
  MOV          .L00C02E65, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:547   break;
  BSR          .L00801C62, R0

.L00801C78:
// p_inter.c:549   case SPR_AMMO:
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          R0, 5, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:552   player->message = GOTCLIPBOX;
  MOV          .L00C02E66, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:553   break;
  BSR          .L00801C62, R0

.L00801C79:
// p_inter.c:555   case SPR_ROCK:
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:558   player->message = GOTROCKET;
  MOV          .L00C02E67, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:559   break;
  BSR          .L00801C62, R0

.L00801C7A:
// p_inter.c:561   case SPR_BROK:
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          R0, 5, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:564   player->message = GOTROCKBOX;
  MOV          .L00C02E68, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:565   break;
  BSR          .L00801C62, R0

.L00801C7B:
// p_inter.c:567   case SPR_CELL:
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:570   player->message = GOTCELL;
  MOV          .L00C02E69, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:571   break;
  BSR          .L00801C62, R0

.L00801C7C:
// p_inter.c:573   case SPR_CELP:
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          R0, 5, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:576   player->message = GOTCELLBOX;
  MOV          .L00C02E6A, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:577   break;
  BSR          .L00801C62, R0

.L00801C7D:
// p_inter.c:579   case SPR_SHEL:
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:582   player->message = GOTSHELLS;
  MOV          .L00C02E6B, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:583   break;
  BSR          .L00801C62, R0

.L00801C7E:
// p_inter.c:585   case SPR_SBOX:
  ADD          RQ9, 0, RQ10
  ADD          R0, 1, RD11
  ADD          R0, 5, RD12
  BSR          P_GiveAmmo, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:588   player->message = GOTSHELLBOX;
  MOV          .L00C02E6C, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:589   break;
  BSR          .L00801C62, R0

.L00801C7F:
// p_inter.c:591   case SPR_BPAK:
  MOV.L        (RQ9, 96), RQ8
  BRNE.L       R0, RQ8, .L00801C97
// p_inter.c:593   {
  ADD          R0, 0, RD22

.L00801C98:
// p_inter.c:595   player->maxammo[i] *= 2;
  ADD          RQ9, 176, RQ21
  MOV.L        (RQ21, RD22), RQ18
  SHAD.L       RQ18, 1, RQ8
  MOV.L        RQ8, (RQ21, RD22)
  ADDS.L       RD22, 1, RD22
  BRLT.L       4, RD22, .L00801C98

.L00801C9A:
// p_inter.c:596   player->backpack = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, 96)

.L00801C97:
// p_inter.c:597   }
  ADD          R0, 0, RD22

.L00801C9B:
// p_inter.c:599   P_GiveAmmo (player, i, 1);
  ADD          RQ9, 0, RQ10
  ADD          RD22, 0, RD11
  ADD          R0, 1, RD12
  BSR          P_GiveAmmo, R1
  ADDS.L       RD22, 1, RD22
  BRLT.L       4, RD22, .L00801C9B

.L00801C9D:
// p_inter.c:600   player->message = GOTBACKPACK;
  MOV          .L00C02E6D, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:601   break;
  BSR          .L00801C62, R0

.L00801C80:
// p_inter.c:604   case SPR_BFUG:
  ADD          RQ9, 0, RQ10
  ADD          R0, 6, RD11
  ADD          R0, 0, RD12
  BSR          P_GiveWeapon, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:607   player->message = GOTBFG9000;
  MOV          .L00C02E6E, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:608   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:609   break;
  BSR          .L00801C62, R0

.L00801C81:
// p_inter.c:611   case SPR_MGUN:
  MOV.L        (RQ23, 160), RQ8
  AND          RQ8, 0x00020000, RQ18
  ADD          RQ9, 0, RQ10
  ADD          R0, 3, RD11
  ADD          RQ18, 0, RD12
  BSR          P_GiveWeapon, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:614   player->message = GOTCHAINGUN;
  MOV          .L00C02E6F, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:615   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:616   break;
  BSR          .L00801C62, R0

.L00801C82:
// p_inter.c:618   case SPR_CSAW:
  ADD          RQ9, 0, RQ10
  ADD          R0, 7, RD11
  ADD          R0, 0, RD12
  BSR          P_GiveWeapon, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:621   player->message = GOTCHAINSAW;
  MOV          .L00C02E70, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:622   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:623   break;
  BSR          .L00801C62, R0

.L00801C83:
// p_inter.c:625   case SPR_LAUN:
  ADD          RQ9, 0, RQ10
  ADD          R0, 4, RD11
  ADD          R0, 0, RD12
  BSR          P_GiveWeapon, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:628   player->message = GOTLAUNCHER;
  MOV          .L00C02E71, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:629   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:630   break;
  BSR          .L00801C62, R0

.L00801C84:
// p_inter.c:632   case SPR_PLAS:
  ADD          RQ9, 0, RQ10
  ADD          R0, 5, RD11
  ADD          R0, 0, RD12
  BSR          P_GiveWeapon, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:635   player->message = GOTPLASMA;
  MOV          .L00C02E72, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:636   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:637   break;
  BSR          .L00801C62, R0

.L00801C85:
// p_inter.c:639   case SPR_SHOT:
  MOV.L        (RQ23, 160), RQ8
  AND          RQ8, 0x00020000, RQ18
  ADD          RQ9, 0, RQ10
  ADD          R0, 2, RD11
  ADD          RQ18, 0, RD12
  BSR          P_GiveWeapon, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00C02E4F
// p_inter.c:642   player->message = GOTSHOTGUN;
  MOV          .L00C02E73, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:643   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:644   break;
  BSR          .L00801C62, R0

.L00801C86:
// p_inter.c:646   case SPR_SGN2:
  MOV.L        (RQ23, 160), RQ18
  AND          RQ18, 0x00020000, RQ8
  ADD          RQ9, 0, RQ10
  ADD          R0, 8, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          P_GiveWeapon, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00C02E4F
// p_inter.c:649   player->message = GOTSHOTGUN2;
  MOV          .L00C02E74, RQ27
  MOV.Q        RQ27, (RQ9, 224)
// p_inter.c:650   sound = sfx_wpnup;	
  ADD          R0, 33, RD26
  MOV.L        RD26, (R2, 184)
// p_inter.c:651   break;
  BSR          .L00801C62, R0

.L00801C87:
// p_inter.c:653   default:
  MOV          .L00C02E75, RQ10
  BSR          I_Error, R1

.L00801C62:
// p_inter.c:657   if(special->spawnpoint.ac_spec)
  ADD          RQ23, 204, RQ27
  MOVU.B       (RQ27, 14), RQ18
  BREQ.L       R0, RQ18, .L00801C9E
// p_inter.c:660   P_AcsDoSpecialCmd(
  ADD          RQ23, 204, RQ27
  MOVU.B       (RQ27, 19), RQ18
  MOVU.B       (RQ27, 18), RQ8
  MOVU.B       (RQ27, 17), RQ20
  MOVU.B       (RQ27, 16), RQ26
  MOVU.B       (RQ27, 15), RQ11
  MOVU.B       (RQ27, 14), RQ10
  ADD          RQ26, 0, RD12
  ADD          RQ20, 0, RD13
  AND          RQ8, 255, RD14
  ADD          RQ18, 0, RD15
  BSR          P_AcsDoSpecialCmd, R1

.L00801C9E:
// p_inter.c:669   if (special->flags & MF_COUNTITEM)
  MOV.L        (RQ23, 160), RQ18
  LUI          2048, RD27
  BTST.L       RD27, RQ18, .L00801C9F
// p_inter.c:670   player->itemcount++;
  MOV.L        (RQ9, 212), RQ8
  ADDS.L       RQ8, 1, RQ20
  MOV.L        RQ20, (RQ9, 212)

.L00801C9F:
// p_inter.c:671   P_RemoveMobj (special);
  ADD          RQ23, 0, RQ10
  BSR          P_RemoveMobj, R1
// p_inter.c:672   player->bonuscount += BONUSADD;
  MOV.L        (RQ9, 236), RQ27
  ADDS.L       RQ27, 6, RQ26
  MOV.L        RQ26, (RQ9, 236)
// p_inter.c:673   if (player == &players[consoleplayer])
  MOV          players, RQ13
  MOV.L        consoleplayer, RD12
  ADD          R0, 320, R5
  MUL.L        RD12, R5, RQ21
  ADD          RQ13, RQ21, RQ21
  BRNE.Q       RQ21, RQ9, .L00801CA0
// p_inter.c:674   S_StartSound (NULL, sound);
  ADD          RQ0, 0, RQ10
  MOV.L        (R2, 184), RD11
  BSR          S_StartSound, R1

.L00801CA0:

.L00C02E4F:
  ADD          R2, 416, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

P_ArchiveSpecials:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
// p_saveg.c:363   for (th = thinkercap.next ; th != &thinkercap ; th=th->next)
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ22
  ADD          RQ27, 0, RQ9
  BREQ.Q       RQ9, RQ22, .L00802352

.L00802350:
// p_saveg.c:364   {
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ9
  ADD          R0, 0, RQ8
  BRNE.Q       RQ8, RQ9, .L00802353
// p_saveg.c:366   {
  ADD          R0, 0, RD20

.L00802354:
// p_saveg.c:368   if (activeceilings[i] == (ceiling_t *)th)
  MOV          activeceilings, RQ27
  MOV.Q        (RQ27, RD20), RQ9
  BREQ.Q       RQ22, RQ9, .L00802356
  ADDS.L       RD20, 1, RD20
  BRLT.L       30, RD20, .L00802354

.L00802356:
  BRGE.L       30, RD20, .L00802357
// p_saveg.c:372   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  MOVU.B       RD0, (RQ8, 0)
// p_saveg.c:374   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ21
  SUB          RQ21, RQ23, RQ18
  AND          RQ18, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:375   ceiling = (ceiling_t *)save_p;
  MOV.Q        RQ27, (R2, 168)
  MOV.Q        RQ27, save_p
// p_saveg.c:376   memcpy (ceiling, th, sizeof(*ceiling));
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          __memcpy64_72, R1
// p_saveg.c:377   save_p += sizeof(*ceiling);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 72, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:378   ceiling->sector = (sector_t *)(ceiling->sector - sectors);
  MOV.Q        (RQ27, 32), RQ9
  MOV.Q        sectors, RQ26
  SUB          RQ9, RQ26, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 32)

.L00802357:
// p_saveg.c:379   }
  BSR          .L00802351, R0

.L00802353:
// p_saveg.c:383   if (th->function.acp1 == (actionf_p1)T_MoveCeiling)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_MoveCeiling, RQ9
  BRNE.Q       RQ9, RQ8, .L00802358
// p_saveg.c:384   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  MOVU.B       RD0, (RQ8, 0)
// p_saveg.c:386   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:387   ceiling = (ceiling_t *)save_p;
  MOV.Q        RQ27, (R2, 168)
  MOV.Q        RQ27, save_p
// p_saveg.c:388   memcpy (ceiling, th, sizeof(*ceiling));
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          __memcpy64_72, R1
// p_saveg.c:389   save_p += sizeof(*ceiling);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 72, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:390   ceiling->sector = (sector_t *)(ceiling->sector - sectors);
  MOV.Q        (RQ27, 32), RQ9
  MOV.Q        sectors, RQ26
  SUB          RQ9, RQ26, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 32)
// p_saveg.c:391   continue;
  BSR          .L00802351, R0

.L00802358:
// p_saveg.c:394   if (th->function.acp1 == (actionf_p1)T_VerticalDoor)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_VerticalDoor, RQ9
  BRNE.Q       RQ9, RQ8, .L00802359
// p_saveg.c:395   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 1, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:397   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:398   door = (vldoor_t *)save_p;
  MOV.Q        RQ27, (R2, 160)
  MOV.Q        RQ27, save_p
// p_saveg.c:399   memcpy (door, th, sizeof(*door));
  MOV.Q        (R2, 160), RQ27
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        (RQ22, 32), RQ10
  MOV.Q        (RQ22, 48), RQ12
  MOV.Q        (RQ22, 40), RQ11
  MOV.Q        (RQ22, 56), RQ13
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ13, (RQ27, 56)
// p_saveg.c:400   save_p += sizeof(*door);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 64, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:401   door->sector = (sector_t *)(door->sector - sectors);
  MOV.Q        (RQ27, 32), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 32)
// p_saveg.c:402   continue;
  BSR          .L00802351, R0

.L00802359:
// p_saveg.c:405   if (th->function.acp1 == (actionf_p1)T_MoveFloor)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_MoveFloor, RQ9
  BRNE.Q       RQ9, RQ8, .L0080235A
// p_saveg.c:406   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 2, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:408   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:409   floor = (floormove_t *)save_p;
  MOV.Q        RQ27, (R2, 152)
  MOV.Q        RQ27, save_p
// p_saveg.c:410   memcpy (floor, th, sizeof(*floor));
  MOV.Q        (R2, 152), RQ27
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        (RQ22, 32), RQ10
  MOV.Q        (RQ22, 48), RQ12
  MOV.Q        (RQ22, 40), RQ11
  MOV.Q        (RQ22, 56), RQ13
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ13, (RQ27, 56)
// p_saveg.c:411   save_p += sizeof(*floor);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 64, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:412   floor->sector = (sector_t *)(floor->sector - sectors);
  MOV.Q        (RQ27, 32), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 32)
// p_saveg.c:413   continue;
  BSR          .L00802351, R0

.L0080235A:
// p_saveg.c:416   if (th->function.acp1 == (actionf_p1)T_PlatRaise)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_PlatRaise, RQ9
  BRNE.Q       RQ9, RQ8, .L0080235B
// p_saveg.c:417   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 3, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:419   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:420   plat = (plat_t *)save_p;
  MOV.Q        RQ27, (R2, 144)
  MOV.Q        RQ27, save_p
// p_saveg.c:421   memcpy (plat, th, sizeof(*plat));
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 0, RQ10
  ADD          RQ22, 0, RQ11
  BSR          __memcpy64_72, R1
// p_saveg.c:422   save_p += sizeof(*plat);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 72, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:423   plat->sector = (sector_t *)(plat->sector - sectors);
  MOV.Q        (RQ27, 24), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 24)
// p_saveg.c:424   continue;
  BSR          .L00802351, R0

.L0080235B:
// p_saveg.c:427   if (th->function.acp1 == (actionf_p1)T_LightFlash)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_LightFlash, RQ9
  BRNE.Q       RQ9, RQ8, .L0080235C
// p_saveg.c:428   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 4, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:430   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:431   flash = (lightflash_t *)save_p;
  MOV.Q        RQ27, (R2, 136)
  MOV.Q        RQ27, save_p
// p_saveg.c:432   memcpy (flash, th, sizeof(*flash));
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        (RQ22, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ22, 32), RQ10
  MOV.Q        (RQ22, 40), RQ11
  MOV.Q        (RQ22, 48), RQ12
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
// p_saveg.c:433   save_p += sizeof(*flash);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 56, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:434   flash->sector = (sector_t *)(flash->sector - sectors);
  MOV.Q        (RQ27, 24), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 24)
// p_saveg.c:435   continue;
  BSR          .L00802351, R0

.L0080235C:
// p_saveg.c:438   if (th->function.acp1 == (actionf_p1)T_StrobeFlash)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_StrobeFlash, RQ9
  BRNE.Q       RQ9, RQ8, .L0080235D
// p_saveg.c:439   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 5, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:441   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:442   strobe = (strobe_t *)save_p;
  MOV.Q        RQ27, (R2, 128)
  MOV.Q        RQ27, save_p
// p_saveg.c:443   memcpy (strobe, th, sizeof(*strobe));
  MOV.Q        (R2, 128), RQ27
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        (RQ22, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ22, 32), RQ10
  MOV.Q        (RQ22, 40), RQ11
  MOV.Q        (RQ22, 48), RQ12
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
// p_saveg.c:444   save_p += sizeof(*strobe);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 56, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:445   strobe->sector = (sector_t *)(strobe->sector - sectors);
  MOV.Q        (RQ27, 24), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 24)
// p_saveg.c:446   continue;
  BSR          .L00802351, R0

.L0080235D:
// p_saveg.c:449   if (th->function.acp1 == (actionf_p1)T_Glow)
  ADD          RQ22, 16, RQ27
  MOV.Q        (RQ27, 0), RQ8
  MOV          T_Glow, RQ9
  BRNE.Q       RQ9, RQ8, .L0080235E
// p_saveg.c:450   {
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  ADD          R0, 6, RD26
  MOVU.B       RD26, (RQ8, 0)
// p_saveg.c:452   PADSAVEP();
  ADD          RQ27, 0, RQ18
  AND          RQ18, 3, RQ23
  ADD          R0, 4, RQ18
  SUB          RQ18, RQ23, RQ21
  AND          RQ21, 3, RQ23
  ADD          RQ27, RQ23, RQ27
// p_saveg.c:453   glow = (glow_t *)save_p;
  MOV.Q        RQ27, (R2, 120)
  MOV.Q        RQ27, save_p
// p_saveg.c:454   memcpy (glow, th, sizeof(*glow));
  MOV.Q        (R2, 120), RQ27
  MOV.Q        (RQ22, 0), RQ10
  MOV.Q        (RQ22, 8), RQ11
  MOV.Q        (RQ22, 16), RQ12
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        (RQ22, 24), RQ10
  MOV.Q        (RQ22, 32), RQ11
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ22, 40), RQ12
  MOV.Q        RQ10, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 40)
// p_saveg.c:455   save_p += sizeof(*glow);
  MOV.Q        save_p, RQ13
  ADD          RQ13, 48, RQ13
  MOV.Q        RQ13, save_p
// p_saveg.c:456   glow->sector = (sector_t *)(glow->sector - sectors);
  MOV.Q        (RQ27, 24), RQ9
  MOV.Q        sectors, RQ13
  SUB          RQ9, RQ13, RQ18
  SHAR.Q       RQ18, 7, RQ18
  MOV.Q        RQ18, (RQ27, 24)
// p_saveg.c:457   continue;
  BSR          .L00802351, R0

.L0080235E:

.L00802351:
  MOV.Q        (RQ22, 8), RQ22
  MOV          thinkercap, RQ9
  BRNE.Q       RQ9, RQ22, .L00802350

.L00802352:
// p_saveg.c:462   *save_p++ = tc_endspecials;	
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, save_p
  ADD          R0, 7, RD27
  MOVU.B       RD27, (RQ8, 0)

.L00C02E7B:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ExecuteSetViewSize:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// r_main.c:722   setsizeneeded = false;
  MOV.L        RD0, setsizeneeded
// r_main.c:724   if (setblocks == 11)
  MOV.L        setblocks, RD27
  BRNE.Q       11, RD27, .L00802684
// r_main.c:725   {
  ADD          R0, 320, RD27
  MOV.L        RD27, scaledviewwidth
// r_main.c:727   viewheight = SCREENHEIGHT;
  ADD          R0, 200, RD27
  MOV.L        RD27, viewheight
  BSR          .L00802685, R0

.L00802684:
// r_main.c:730   {
  MOV.L        setblocks, RD27
  SHAD.L       RD27, 5, RD26
  MOV.L        RD26, scaledviewwidth
// r_main.c:732   viewheight = (setblocks*168/10)&~7;
  ADD          R0, 168, R5
  MULS.L       RD27, R5, RQ9
  ADD          RQ9, 0, RQ18
  ADD          R0, 10, RD27
  DIVS.L       RQ18, RD27, RQ18
  AND          RQ18, -8, RD26
  MOV.L        RD26, viewheight

.L00802685:
// r_main.c:735   detailshift = setdetail;
  MOV.L        setdetail, RD27
// r_main.c:736   viewwidth = scaledviewwidth>>detailshift;
  MOV.L        scaledviewwidth, RD25
  SHAR         RD25, RD27, RD26
// r_main.c:738   centery = viewheight/2;
  MOV.L        viewheight, RD25
  ADD          R0, 2, RD13
  DIVS.L       RD25, RD13, RD25
// r_main.c:739   centerx = viewwidth/2;
  ADD          RD26, 0, RD12
  MOV.L        RD26, viewwidth
  DIVS.L       RD12, RD13, RD12
// r_main.c:740   centerxfrac = centerx<<FRACBITS;
  SHAD.L       RD12, 16, RD26
  MOV.L        RD12, centerx
// r_main.c:741   centeryfrac = centery<<FRACBITS;
  SHAD.L       RD25, 16, RD12
  MOV.L        RD12, centeryfrac
  MOV.L        RD25, centery
// r_main.c:742   projection = centerxfrac;
  MOV.L        RD26, projection
  MOV.L        RD26, centerxfrac
// r_main.c:744   if (!detailshift)
  MOV.L        RD27, detailshift
  BRNE.L       R0, RD27, .L00802686
// r_main.c:745   {
  MOV          R_DrawColumn, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ26, colfunc
// r_main.c:747   wallcolfunc = basecolfunc;
  MOV.Q        RQ27, wallcolfunc
  MOV.Q        RQ27, basecolfunc
// r_main.c:753   sprcolfunc = R_DrawColumn;
  MOV.Q        RQ26, sprcolfunc
// r_main.c:754   fuzzcolfunc = R_DrawFuzzColumn;
  MOV          R_DrawFuzzColumn, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, fuzzcolfunc
// r_main.c:755   transcolfunc = R_DrawTranslatedColumn;
  MOV          R_DrawTranslatedColumn, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, transcolfunc
// r_main.c:760   spanfunc = R_DrawSpan;
  MOV          R_DrawSpan, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, spanfunc
  BSR          .L00802687, R0

.L00802686:
// r_main.c:769   {
  MOV          R_DrawColumnLow, RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ26, colfunc
// r_main.c:771   wallcolfunc = basecolfunc;
  MOV.Q        RQ27, wallcolfunc
  MOV.Q        RQ27, basecolfunc
// r_main.c:777   sprcolfunc = R_DrawColumnLow;
  MOV.Q        RQ26, sprcolfunc
// r_main.c:778   fuzzcolfunc = R_DrawFuzzColumnLow;
  MOV          R_DrawFuzzColumnLow, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, fuzzcolfunc
// r_main.c:779   transcolfunc = R_DrawTranslatedColumn;
  MOV          R_DrawTranslatedColumn, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, transcolfunc
// r_main.c:784   spanfunc = R_DrawSpanLow;
  MOV          R_DrawSpanLow, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, spanfunc

.L00802687:
// r_main.c:788   R_InitBuffer (scaledviewwidth, viewheight);
  MOV.L        scaledviewwidth, RD10
  MOV.L        viewheight, RD11
  BSR          R_InitBuffer, R1
// r_main.c:790   R_InitTextureMapping ();
  BSR          R_InitTextureMapping, R1
// r_main.c:793   pspritescale = FRACUNIT*viewwidth/SCREENWIDTH;
  MOV.L        viewwidth, RD27
  SHAD.L       RD27, 16, RQ9
  MOV.L        RQ9, pspritescale
  ADD          R0, 320, RD26
  MOV.L        pspritescale, RD25
  DIVS.L       RD25, RD26, RD25
  MOV.L        RD25, pspritescale
// r_main.c:794   pspriteiscale = FRACUNIT*SCREENWIDTH/viewwidth;
  LUI          5120, RD13
  DIVS.L       RD13, RD27, RD25
  MOV.L        RD25, pspriteiscale
// r_main.c:797   for (i=0 ; i<viewwidth ; i++)
  ADD          R0, 0, RD8
  BRGE.L       RD27, RD8, .L0080268A

.L00802688:
// r_main.c:798   screenheightarray[i] = viewheight;
  MOV          screenheightarray, RQ27
  MOV.L        viewheight, RD26
  MOV.W        RD26, (RQ27, RD8)
  ADDS.L       RD8, 1, RD8
  MOV.L        viewwidth, RD27
  BRLT.L       RD27, RD8, .L00802688

.L0080268A:
// r_main.c:801   for (i=0 ; i<viewheight ; i++)
  ADD          R0, 0, RD8
  MOV.L        viewheight, RD27
  BRGE.L       RD27, RD8, .L0080268D

.L0080268B:
// r_main.c:802   {
  MOV.L        viewheight, RQ18
  ADD          R0, 2, RD27
  DIVS.L       RQ18, RD27, RQ18
  SUBS.L       RD8, RQ18, RQ9
  SHAD.L       RQ9, 16, RQ18
  ADDS.L       RQ18, 0x00008000, RD21
// r_main.c:804   dy = abs(dy);
  SHAR.Q       RD21, 63, RQ7
  SUB          R0, RD21, RQ6
  SHAR.Q       RQ6, 63, RQ10
  AND          RQ6, RQ7, RQ7
  AND          RD21, RQ10, RQ10
  OR           RQ7, RQ10, RD21
// r_main.c:805   yslope[i] = FixedDiv ( (viewwidth<<detailshift)/2*FRACUNIT, dy);
  MOV.L        viewwidth, RD26
  MOV.L        detailshift, RD25
  SHAD.L       RD26, RD25, RQ9
  ADD          RQ9, 0, RQ18
  DIVS.L       RQ18, RD27, RQ18
  SHAD.L       RQ18, 16, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ18
  MOV          yslope, RQ26
  MOV.L        RQ18, (RQ26, RD8)
  ADDS.L       RD8, 1, RD8
  MOV.L        viewheight, RD26
  BRLT.L       RD26, RD8, .L0080268B

.L0080268D:
// r_main.c:808   for (i=0 ; i<viewwidth ; i++)
  ADD          R0, 0, RD8
  MOV.L        viewwidth, RD27
  BRGE.L       RD27, RD8, .L00802690

.L0080268E:
// r_main.c:809   {
  MOV          xtoviewangle, RQ27
  MOVU.L       (RQ27, RD8), RQ9
  SHLR         RQ9, 19, RQ18
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RQ18), RQ9
  SHAR.Q       RQ9, 63, RQ6
  SUB          R0, RQ9, RD27
  SHAR.Q       RD27, 63, RQ7
  AND          RD27, RQ6, RQ6
  AND          RQ9, RQ7, RQ7
  OR           RQ6, RQ7, RD27
  MOV.L        RD27, (R2, 108)
// r_main.c:811   distscale[i] = FixedDiv (FRACUNIT,cosadj);
  LUI          16, RD10
  ADD          RD27, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ18
  MOV          distscale, RQ26
  MOV.L        RQ18, (RQ26, RD8)
  ADDS.L       RD8, 1, RD8
  MOV.L        viewwidth, RD26
  BRLT.L       RD26, RD8, .L0080268E

.L00802690:
// r_main.c:816   for (i=0 ; i< LIGHTLEVELS ; i++)
  ADD          R0, 0, RD8

.L00802691:
// r_main.c:817   {
  ADD          R0, 15, R5
  SUBS.L       R5, RD8, RQ9
  SHAD.L       RQ9, 1, RQ18
  SHAD.L       RQ18, 5, RQ9
  MOV.L        RD9, (R2, 104)
  ADD          R0, 16, RD27
  MOV.L        (R2, 104), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 104)
// r_main.c:819   for (j=0 ; j<MAXLIGHTSCALE ; j++)
  ADD          R0, 0, RD22

.L00802694:
// r_main.c:820   {
  ADD          R0, 320, R5
  MULS.L       RD22, R5, RQ18
  MOV.L        viewwidth, RD27
  MOV.L        detailshift, RD26
  SHAD.L       RD27, RD26, RQ9
  DIVS.L       RQ18, RQ9, RQ20
  ADD          RQ20, 0, RQ9
  ADD          R0, 2, RD27
  DIVS.L       RQ9, RD27, RQ9
  MOV.L        (R2, 104), RD26
  SUBS.L       RD26, RQ9, RD23
// r_main.c:823   if (level < 0)
  BRGE.L       R0, RD23, .L00802697
// r_main.c:824   level = 0;
  ADD          R0, 0, RD23

.L00802697:
// r_main.c:826   if (level >= NUMCOLORMAPS)
  BRLT.L       32, RD23, .L00802698
// r_main.c:827   level = NUMCOLORMAPS-1;
  ADD          R0, 31, RD23

.L00802698:
// r_main.c:829   scalelight[i][j] = colormaps + level*256;
  SHAD.L       RD23, 8, RQ18
  MOV.Q        colormaps, RQ27
  LEA.W        RQ27, RQ18, RQ26
  MOV          scalelight, RQ27
  ADD          R0, 384, R5
  MUL.L        RD8, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        RQ26, (RQ25, RD22)
  ADDS.L       RD22, 1, RD22
  BRLT.L       48, RD22, .L00802694

.L00802696:
  ADDS.L       RD8, 1, RD8
  BRLT.L       16, RD8, .L00802691

.L00802693:

.L00C02E81:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

R_InitSpriteDefs:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.Q        RQ10, (R2, 168)
// r_things.c:192   check = namelist;
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 160)
// r_things.c:199   for(i=0; i<8192; i++)
  MOV.L        RD0, (R2, 148)

.L008027B3:
// r_things.c:200   {
  MOV.Q        (R2, 168), RQ27
  MOV.L        (R2, 148), RD26
  MOV.Q        (RQ27, RD26), RQ25
// r_things.c:202   if(!s)
  MOV.Q        RQ25, (R2, 152)
  BREQ.Q       R0, RQ25, .L008027B5
  MOV.L        (R2, 148), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 148)
  LUI          2, RD26
  BRLT.L       RD26, RD27, .L008027B3

.L008027B5:
// r_things.c:204   }
  MOV.L        (R2, 148), RD27
// r_things.c:210   if (!numsprites)
  MOV.L        RD27, numsprites
  BREQ.L       R0, RD27, .L00C02E8C
// r_things.c:213   printf("R_InitSpriteDefs: numsprites=%d\n", numsprites);
  MOV          .L00C02E8D, RQ10
  MOV.L        numsprites, RD11
  BSR          printf, R1
// r_things.c:216   sprites = Z_Malloc((numsprites+16) *sizeof(*sprites), PU_STATIC, NULL);
  MOV.L        numsprites, RD27
  ADDS.L       RD27, 16, RQ9
  SHAD.L       RQ9, 4, RQ21
  ADD          RQ21, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, sprites
// r_things.c:218   start = firstspritelump-1;
  MOV.L        firstspritelump, RD27
  ADDS.L       RD27, -1, RD26
  MOV.L        RD26, (R2, 140)
// r_things.c:219   end = lastspritelump+1;
  MOV.L        lastspritelump, RD27
  ADDS.L       RD27, 1, RD25
  MOV.L        RD25, (R2, 136)
// r_things.c:224   for (i=0 ; i<numsprites ; i++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 148)
  MOV.L        numsprites, RD24
  BRGE.L       RD24, RD27, .L008027B8

.L008027B6:
// r_things.c:225   {
  MOV.Q        (R2, 168), RQ27
  MOV.L        (R2, 148), RD26
  MOV.Q        (RQ27, RD26), RQ25
  MOV.Q        RQ25, spritename
// r_things.c:227   memset (sprtemp,-1, sizeof(sprtemp));
  MOV          sprtemp, RQ10
  ADD          R0, -1, RD11
  ADD          R0, 812, RQ12
  BSR          memset, R1
// r_things.c:229   if(!spritename)
  MOV.Q        spritename, RQ25
  BRNE.Q       R0, RQ25, .L008027B9
// r_things.c:230   __debugbreak();

R_InitSpriteDefs.debugbreak_L05AD:
  BRK          1453

.L008027B9:
// r_things.c:232   maxframe = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, maxframe
// r_things.c:234   intname = *(int *)(spritename);
  MOV.Q        spritename, RQ18
  MOV.L        (RQ18, 0), RD27
  MOV.L        RD27, (R2, 144)
// r_things.c:239   for (l=start+1 ; l<end ; l++)
  MOV.L        (R2, 140), RD26
  ADDS.L       RD26, 1, RD22
  MOV.L        (R2, 136), RD25
  BRGE.L       RD25, RD22, .L008027BC

.L008027BA:
// r_things.c:240   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ9
  MOV.L        (R2, 144), RD27
  BRNE.Q       RD27, RQ9, .L008027BD
// r_things.c:242   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ18
  MOV.B        (RQ18, 4), RQ9
  ADDS.L       RQ9, -65, RD23
// r_things.c:244   rotation = lumpinfo[l].name[5] - '0';
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ18
  MOV.B        (RQ18, 5), RQ9
  ADDS.L       RQ9, -48, RD8
// r_things.c:246   patched = W_GetNumForName (lumpinfo[l].name);
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          W_GetNumForName, R1
  MOV.L        RD10, (R2, 132)
// r_things.c:253   R_InstallSpriteLump (patched, frame, rotation, false);
  ADDU.L       RD23, R0, RQ9
  ADDU.L       RD8, R0, RQ21
  MOV.L        (R2, 132), RD10
  ADDU.L       RQ9, R0, RD11
  ADD          RQ21, 0, RD12
  ADD          R0, 0, RD13
  BSR          R_InstallSpriteLump, R1
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.B        (RQ26, 6), RQ9
  BREQ.L       R0, RQ9, .L008027BE
// r_things.c:256   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 0, RQ18
  MOV.B        (RQ18, 6), RQ9
  ADDS.L       RQ9, -65, RD23
// r_things.c:258   rotation = lumpinfo[l].name[7] - '0';
  ADD          R0, 40, R5
  MUL.L        RD22, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.B        (RQ26, 7), RQ9
  ADDS.L       RQ9, -48, RD8
// r_things.c:259   R_InstallSpriteLump (l, frame, rotation, true);
  ADDU.L       RD23, R0, RQ21
  ADDU.L       RD8, R0, RQ9
  ADD          RD22, 0, RD10
  ADD          RQ21, 0, RD11
  ADDU.L       RQ9, R0, RD12
  ADD          R0, 1, RD13
  BSR          R_InstallSpriteLump, R1

.L008027BE:

.L008027BD:
  ADDS.L       RD22, 1, RD22
  MOV.L        (R2, 136), RD27
  BRLT.L       RD27, RD22, .L008027BA

.L008027BC:
// r_things.c:265   if (maxframe == -1)
  MOV.L        maxframe, RD27
  BRNE.Q       -1, RD27, .L008027BF
// r_things.c:266   {
  MOV.Q        sprites, RQ27
  MOV.L        (R2, 148), RD26
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        RD0, (RQ25, 0)
// r_things.c:268   continue;
  BSR          .L008027B7, R0

.L008027BF:
// r_things.c:271   maxframe++;
  MOV.L        maxframe, RD27
  ADDS.L       RD27, 1, RD27
// r_things.c:273   for (frame = 0 ; frame < maxframe ; frame++)
  ADD          R0, 0, RD23
  MOV.L        RD27, maxframe
  BRGE.L       RD27, RD23, .L008027C2

.L008027C0:
// r_things.c:274   {
  MOV          sprtemp, RQ27
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ9
  BREQ.Q       -1, RQ9, .L008027C4
  BREQ.L       R0, RQ9, .L008027C5
  BREQ.Q       1, RQ9, .L008027C6
  BSR          .L008027C3, R0

.L008027C4:
// r_things.c:279   I_Error ("R_InitSprites: No patches found "
  ADDS.L       RD23, 65, RQ21
  MOV.Q        (R2, 168), RQ27
  MOV.L        (R2, 148), RD26
  MOV.Q        (RQ27, RD26), RQ18
  MOV          .L00C02E8F, RQ10
  ADD          RQ18, 0, RQ11
  ADD          RQ21, 0, RD12
  BSR          I_Error, R1
// r_things.c:281   break;
  BSR          .L008027C3, R0

.L008027C5:
// r_things.c:285   break;
  BSR          .L008027C3, R0

.L008027C6:
// r_things.c:289   for (rotation=0 ; rotation<8 ; rotation++)
  ADD          R0, 0, RD8

.L008027C7:
// r_things.c:290   if (sprtemp[frame].lump[rotation] == -1)
  MOV          sprtemp, RQ27
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 4, RQ18
  MOV.W        (RQ18, RD8), RQ9
  BRNE.Q       -1, RQ9, .L008027CA
  BRLT.L       4, RD8, .L008027CB
// r_things.c:293   rotn1 = (rotation+1)&7;
  ADDS.L       RD8, 1, RQ21
  AND          RQ21, 7, RD20
  BSR          .L008027CC, R0

.L008027CB:
// r_things.c:295   rotn1 = (rotation-1)&7;
  ADDS.L       RD8, -1, RQ9
  AND          RQ9, 7, RD20

.L008027CC:
  ADD          R0, 1, RD27
  BTST.L       RD27, RD8, .L008027CD
  MOV          sprtemp, RQ27
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 4, RQ18
  MOV.W        (RQ18, RD20), RQ9
  BRLE.L       R0, RQ9, .L008027CD

.L008027CE:
// r_things.c:301   sprtemp[frame].lump[rotation]=
  MOV          sprtemp, RQ27
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 4, RQ18
  MOV.W        (RQ18, RD20), RQ9
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 4, RQ18
  MOV.W        RQ9, (RQ18, RD8)
// r_things.c:303   sprtemp[frame].flip[rotation]=
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 20, RQ18
  MOVU.B       (RQ18, RD20), RQ9
  ADD          R0, 28, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 20, RQ18
  MOVU.B       RQ9, (RQ18, RD8)
// r_things.c:305   continue;
  BSR          .L008027C8, R0

.L008027CD:
// r_things.c:308   I_Error ("R_InitSprites: Sprite %s frame %c "
  ADDS.L       RD23, 65, RQ9
  MOV.Q        (R2, 168), RQ27
  MOV.L        (R2, 148), RD26
  MOV.Q        (RQ27, RD26), RQ18
  MOV          .L00C02E90, RQ10
  ADD          RQ18, 0, RQ11
  ADDS.L       RQ9, 0, RD12
  BSR          I_Error, R1

.L008027CA:

.L008027C8:
  ADDS.L       RD8, 1, RD8
  BRLT.L       8, RD8, .L008027C7

.L008027C9:
// r_things.c:311   }

.L008027C3:
  ADDS.L       RD23, 1, RD23
  MOV.L        maxframe, RD27
  BRLT.L       RD27, RD23, .L008027C0

.L008027C2:
// r_things.c:317   sprites[i].numframes = maxframe;
  MOV.Q        sprites, RQ27
  MOV.L        (R2, 148), RD26
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        maxframe, RD27
  MOV.L        RD27, (RQ25, 0)
// r_things.c:318   sprites[i].spriteframes = 
  ADDS.L       RD27, 4, RQ9
  ADD          R0, 28, R5
  MULS.L       RQ9, R5, RQ21
  ADD          RQ21, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        sprites, RQ27
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        RQ18, (RQ25, 8)
// r_things.c:320   memcpy (sprites[i].spriteframes, sprtemp,
  MOV.L        maxframe, RD24
  ADD          R0, 28, R5
  MULS.L       RD24, R5, RQ9
  SHAD.L       RD26, 4, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 8), RQ18
  ADDS.L       RQ9, 0, RQ27
  ADD          RQ18, 0, RQ10
  MOV          sprtemp, RQ11
  ADD          RQ27, 0, RQ12
  BSR          memcpy, R1

.L008027B7:
  MOV.L        (R2, 148), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 148)
  MOV.L        numsprites, RD26
  BRLT.L       RD26, RD27, .L008027B6

.L008027B8:

.L00C02E8C:
  ADD          R2, 368, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

R_RenderSegLoop:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -312, R2
// r_segs.c:264   texturecolumn = 0;
  ADD          RD0, 0, RD21
// r_segs.c:268   dc_isspr = 0;
  MOV.B        RD0, dc_isspr
// r_segs.c:270   for ( ; rw_x < rw_stopx ; rw_x++)
  MOV.L        rw_x, RD27
  MOV.L        rw_stopx, RD26
  BRGE.L       RD26, RD27, .L00802731

.L0080272F:
// r_segs.c:273   yl = (topfrac+HEIGHTUNIT-1)>>HEIGHTBITS;
  MOV.L        topfrac, RD27
  ADDS.L       RD27, 4096, RQ18
  ADDS.L       RQ18, -1, RQ9
  SHAR         RQ9, 12, RD23
// r_segs.c:276   if (yl < ceilingclip[rw_x]+1)
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, 1, RQ9
  BRGE.L       RQ9, RD23, .L00802732
// r_segs.c:277   yl = ceilingclip[rw_x]+1;
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, 1, RD23

.L00802732:
// r_segs.c:279   if (markceiling)
  MOV.L        markceiling, RD27
  BREQ.L       R0, RD27, .L00802733
// r_segs.c:280   {
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  ADDS.L       RQ9, 1, RD20
// r_segs.c:282   bottom = yl-1;
  ADDS.L       RD23, -1, RD27
  MOV          floorclip, RQ25
  MOV.W        (RQ25, RD26), RQ18
  MOV.L        RD27, (R2, 100)
  BRLT.L       RQ18, RD27, .L00802734
// r_segs.c:285   bottom = floorclip[rw_x]-1;
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  ADDS.L       RQ9, -1, RD27
  MOV.L        RD27, (R2, 100)

.L00802734:
  MOV.L        (R2, 100), RD27
  BRGT.L       RD27, RD20, .L00802735
// r_segs.c:288   {
  MOV.Q        ceilingplane, RQ27
  ADD          RQ27, 21, RQ26
  MOV.L        rw_x, RD25
  MOVU.B       RD20, (RQ26, RD25)
// r_segs.c:290   ceilingplane->bottom[rw_x] = bottom;
  ADD          RQ27, 343, RQ26
  MOV.L        (R2, 100), RD27
  MOVU.B       RD27, (RQ26, RD25)

.L00802735:

.L00802733:
// r_segs.c:294   yh = bottomfrac>>HEIGHTBITS;
  MOV.L        bottomfrac, RD27
  SHAR         RD27, 12, RD22
// r_segs.c:296   if (yh >= floorclip[rw_x])
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  BRLT.L       RQ18, RD22, .L00802736
// r_segs.c:297   yh = floorclip[rw_x]-1;
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  ADDS.L       RQ9, -1, RD22

.L00802736:
// r_segs.c:299   if (markfloor)
  MOV.L        markfloor, RD27
  BREQ.L       R0, RD27, .L00802737
// r_segs.c:300   {
  ADDS.L       RD22, 1, RD20
// r_segs.c:302   bottom = floorclip[rw_x]-1;
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, -1, RD27
  MOV.L        RD27, (R2, 100)
  MOV          ceilingclip, RQ25
  MOV.W        (RQ25, RD26), RQ9
  BRGT.L       RQ9, RD20, .L00802738
// r_segs.c:304   top = ceilingclip[rw_x]+1;
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  ADDS.L       RQ18, 1, RD20

.L00802738:
  MOV.L        (R2, 100), RD27
  BRGT.L       RD27, RD20, .L00802739
// r_segs.c:306   {
  MOV.Q        floorplane, RQ27
  ADD          RQ27, 21, RQ26
  MOV.L        rw_x, RD25
  MOVU.B       RD20, (RQ26, RD25)
// r_segs.c:308   floorplane->bottom[rw_x] = bottom;
  ADD          RQ27, 343, RQ26
  MOV.L        (R2, 100), RD27
  MOVU.B       RD27, (RQ26, RD25)

.L00802739:

.L00802737:
// r_segs.c:313   if (segtextured)
  MOV.L        segtextured, RD27
  BREQ.L       R0, RD27, .L0080273A
// r_segs.c:316   angle = (rw_centerangle + xtoviewangle[rw_x])>>ANGLETOFINESHIFT;
  MOV          xtoviewangle, RQ27
  MOV.L        rw_x, RD26
  MOVU.L       (RQ27, RD26), RQ18
  MOVU.L       rw_centerangle, RD27
  ADDU.L       RD27, RQ18, RQ9
  SHLR         RQ9, 19, RD27
// r_segs.c:317   angle &= (FINEANGLES-1);
  AND          RD27, 8191, RD27
// r_segs.c:318   texturecolumn = rw_offset-FixedMul(finetangent[angle],rw_distance);
  MOV          finetangent, RQ26
  MOV.L        (RQ26, RD27), RQ18
  MOV.L        RD27, (R2, 108)
  ADD          RQ18, 0, RD10
  MOV.L        rw_distance, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        rw_offset, RD26
  SUBS.L       RD26, RQ9, RD21
// r_segs.c:319   texturecolumn >>= FRACBITS;
  SHAR         RD21, 16, RD21
// r_segs.c:321   index = rw_scale>>LIGHTSCALESHIFT;
  MOV.L        rw_scale, RD26
  SHAR         RD26, 12, RQ18
  ADDU.L       RQ18, R0, RD26
  MOV.L        RD26, (R2, 104)
  BRLTU.L      48, RD26, .L0080273B
// r_segs.c:324   index = MAXLIGHTSCALE-1;
  ADD          R0, 47, RD27
  MOV.L        RD27, (R2, 104)

.L0080273B:
// r_segs.c:327   dc_colormap = R_ColormapRemapForBlend(walllights[index]);
  MOV.Q        walllights, RQ27
  MOVU.L       (R2, 104), RD26
  MOV.Q        (RQ27, RD26), RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap
// r_segs.c:328   dc_x = rw_x;
  MOV.L        rw_x, RD27
  ADD          RD27, 0, RD25
  MOV.L        RD25, dc_x
// r_segs.c:331   dc_iscale = M_SoftDivRcp(rw_scale);
  MOV.L        rw_scale, RD27
  ADDU.L       RD27, R0, RQ9
  ADDU.L       RQ9, R0, RD10
  BSR          M_SoftDivRcp, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 0, RD27
  MOV.L        RD27, dc_iscale
// r_segs.c:332   dc_scale = rw_scale;
  MOV.L        rw_scale, RD27
  ADD          RD27, 0, RD25
  MOV.L        RD25, dc_scale
// r_segs.c:333   dc_zdist = rw_z;
  MOV.L        rw_z, RD27
  ADD          RD27, 0, RD25
  MOV.L        RD25, dc_zdist
// r_segs.c:352   dc_color = 0xFFFFAAAA55551111ULL;
  ADD          R0, -21846, RQ25
  LDSH32       RQ25, 0x55551111, RQ25
  ADD          RQ25, 0, RQ27
  MOV.Q        RQ27, dc_color

.L0080273A:
// r_segs.c:356   dc_col = texturecolumn;
  MOV.L        RD21, dc_col
// r_segs.c:361   if (midtexture)
  MOV.L        midtexture, RD27
  BREQ.L       R0, RD27, .L0080273C
// r_segs.c:367   dc_yl = yl;
  MOV.L        RD23, dc_yl
// r_segs.c:368   dc_yh = yh;
  MOV.L        RD22, dc_yh
// r_segs.c:369   dc_texturemid = rw_midtexturemid;
  MOV.L        rw_midtexturemid, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_texturemid
// r_segs.c:373   dc_source = R_GetColumn(midtexture,texturecolumn);
  MOV.L        midtexture, RD10
  ADD          RD21, 0, RD11
  BSR          R_GetColumn, R1
  MOV.Q        RQ10, dc_source
// r_segs.c:375   wallcolfunc ();
  MOV.Q        wallcolfunc, RQ27
  JSR          RQ27, 0, R1
  MOVU.B       r_ispolyobj, RD27
  BRNE.L       R0, RD27, .L0080273D
// r_segs.c:378   {
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.L        viewheight, RD25
  MOV.W        RD25, (RQ27, RD26)
// r_segs.c:380   floorclip[rw_x] = -1;
  MOV          floorclip, RQ27
  ADD          R0, -1, RD25
  MOV.W        RD25, (RQ27, RD26)

.L0080273D:
  BSR          .L0080273E, R0

.L0080273C:
  MOV.L        toptexture, RD27
  BREQ.L       R0, RD27, .L0080273F
// r_segs.c:389   mid = pixhigh>>HEIGHTBITS;
  MOV.L        pixhigh, RD27
  SHAR         RD27, 12, RD8
// r_segs.c:390   pixhigh += pixhighstep;
  MOV.L        pixhighstep, RD26
  ADDS.L       RD27, RD26, RD27
  MOV.L        RD27, pixhigh
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  BRLT.L       RQ18, RD8, .L00802740
// r_segs.c:393   mid = floorclip[rw_x]-1;
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  ADDS.L       RQ9, -1, RD8

.L00802740:
  BRLT.L       RD23, RD8, .L00802741
// r_segs.c:396   {
  MOV.L        RD23, dc_yl
// r_segs.c:398   dc_yh = mid;
  MOV.L        RD8, dc_yh
// r_segs.c:399   dc_texturemid = rw_toptexturemid;
  MOV.L        rw_toptexturemid, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_texturemid
// r_segs.c:404   dc_source = R_GetColumn(toptexture,texturecolumn);
  MOV.L        toptexture, RD10
  ADD          RD21, 0, RD11
  BSR          R_GetColumn, R1
  MOV.Q        RQ10, dc_source
// r_segs.c:406   wallcolfunc ();
  MOV.Q        wallcolfunc, RQ27
  JSR          RQ27, 0, R1
// r_segs.c:407   ceilingclip[rw_x] = mid;
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RD8, (RQ27, RD26)
  BSR          .L00802742, R0

.L00802741:
// r_segs.c:410   ceilingclip[rw_x] = yl-1;
  ADDS.L       RD23, -1, RQ18
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RQ18, (RQ27, RD26)

.L00802742:
  BSR          .L00802743, R0

.L0080273F:
  MOV.L        markceiling, RD27
  BREQ.L       R0, RD27, .L00802744
// r_segs.c:416   ceilingclip[rw_x] = yl-1;
  ADDS.L       RD23, -1, RQ9
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RQ9, (RQ27, RD26)

.L00802744:

.L00802743:
  MOV.L        bottomtexture, RD27
  BREQ.L       R0, RD27, .L00802745
// r_segs.c:422   mid = (pixlow+HEIGHTUNIT-1)>>HEIGHTBITS;
  MOV.L        pixlow, RD27
  ADDS.L       RD27, 4096, RQ18
  ADDS.L       RQ18, -1, RQ9
  SHAR         RQ9, 12, RD8
// r_segs.c:423   pixlow += pixlowstep;
  MOV.L        pixlowstep, RD26
  ADDS.L       RD27, RD26, RD27
  MOV.L        RD27, pixlow
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ18
  BRGT.L       RQ18, RD8, .L00802746
// r_segs.c:427   mid = ceilingclip[rw_x]+1;
  MOV          ceilingclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        (RQ27, RD26), RQ9
  ADDS.L       RQ9, 1, RD8

.L00802746:
  BRGT.L       RD22, RD8, .L00802747
// r_segs.c:430   {
  MOV.L        RD8, dc_yl
// r_segs.c:432   dc_yh = yh;
  MOV.L        RD22, dc_yh
// r_segs.c:433   dc_texturemid = rw_bottomtexturemid;
  MOV.L        rw_bottomtexturemid, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_texturemid
// r_segs.c:438   dc_source = R_GetColumn(bottomtexture,
  MOV.L        bottomtexture, RD10
  ADD          RD21, 0, RD11
  BSR          R_GetColumn, R1
  MOV.Q        RQ10, dc_source
// r_segs.c:441   wallcolfunc ();
  MOV.Q        wallcolfunc, RQ27
  JSR          RQ27, 0, R1
// r_segs.c:442   floorclip[rw_x] = mid;
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RD8, (RQ27, RD26)
  BSR          .L00802748, R0

.L00802747:
// r_segs.c:445   floorclip[rw_x] = yh+1;
  ADDS.L       RD22, 1, RQ18
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RQ18, (RQ27, RD26)

.L00802748:
  BSR          .L00802749, R0

.L00802745:
  MOV.L        markfloor, RD27
  BREQ.L       R0, RD27, .L0080274A
// r_segs.c:451   floorclip[rw_x] = yh+1;
  ADDS.L       RD22, 1, RQ9
  MOV          floorclip, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RQ9, (RQ27, RD26)

.L0080274A:

.L00802749:
  MOV.L        maskedtexture, RD27
  BREQ.L       R0, RD27, .L0080274B
// r_segs.c:458   maskedtexturecol[rw_x] = texturecolumn;
  MOV.Q        maskedtexturecol, RQ27
  MOV.L        rw_x, RD26
  MOV.W        RD21, (RQ27, RD26)

.L0080274B:

.L0080273E:
// r_segs.c:462   rw_scale += rw_scalestep;
  MOV.L        rw_scalestep, RD27
  MOV.L        rw_scale, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, rw_scale
// r_segs.c:463   rw_z += rw_zstep;
  MOV.L        rw_zstep, RD27
  MOV.L        rw_z, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, rw_z
// r_segs.c:464   topfrac += topstep;
  MOV.L        topstep, RD27
  MOV.L        topfrac, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, topfrac
// r_segs.c:465   bottomfrac += bottomstep;
  MOV.L        bottomstep, RD27
  MOV.L        bottomfrac, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, bottomfrac
  MOV.L        rw_x, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, rw_x
  MOV.L        rw_stopx, RD26
  BRLT.L       RD26, RD27, .L0080272F

.L00802731:

.L00C02E96:
  ADD          R2, 312, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

HU_Responder:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ20
// hu_stuff.c:645   boolean		eatkey = false;
  MOV.L        RD0, (R2, 124)
// hu_stuff.c:662   numplayers = 0;
  MOV.L        RD0, (R2, 120)
// hu_stuff.c:663   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD9

.L00802C99:
// hu_stuff.c:664   numplayers += playeringame[i];
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD9), RQ18
  MOV.L        (R2, 120), RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        RD27, (R2, 120)
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L00802C99

.L00802C9B:
// hu_stuff.c:666   if (ev->data1 == KEY_RSHIFT)
  MOV.L        (RQ20, 4), RQ18
  BRNE.Q       182, RQ18, .L00802C9C
// hu_stuff.c:667   {
  MOV.L        (RQ20, 0), RQ18
  CMPEQ.Q      RQ18, R0, RD27
  MOV.L        RD27, HU_Responder/shiftdown!42
// hu_stuff.c:669   return false;
  ADD          R0, 0, RD10
  BSR          .L00C02E9C, R0
  BSR          .L00802C9D, R0

.L00802C9C:
  MOV.L        (RQ20, 4), RQ18
  BREQ.Q       184, RQ18, .L00802C9F
  MOV.L        (RQ20, 4), RQ18
  BREQ.Q       184, RQ18, .L00802C9F
  BSR          .L00802C9E, R0

.L00802C9F:
// hu_stuff.c:672   {
  MOV.L        (RQ20, 0), RQ18
  CMPEQ.Q      RQ18, R0, RD27
  MOV.L        RD27, HU_Responder/altdown!42
// hu_stuff.c:674   return false;
  ADD          R0, 0, RD10
  BSR          .L00C02E9C, R0

.L00802C9E:

.L00802C9D:
// hu_stuff.c:677   if (ev->type != ev_keydown)
  MOV.L        (RQ20, 0), RQ18
  BRNE.L       R0, RQ18, .L00C00E9A
// hu_stuff.c:680   if (!chat_on)
  MOV.L        chat_on, RD27
  BRNE.L       R0, RD27, .L00802CA1
  MOV.L        (RQ20, 4), RQ18
  BRNE.Q       13, RQ18, .L00802CA2
// hu_stuff.c:683   {
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CA82/message_on
// hu_stuff.c:685   message_counter = HU_MSGTIMEOUT;
  ADD          R0, 140, RD26
  MOV.L        RD26, TU7A00CA82/message_counter
// hu_stuff.c:686   eatkey = true;
  MOV.L        RD27, (R2, 124)
  BSR          .L00802CA3, R0

.L00802CA2:
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00802CA4
  MOV.L        (RQ20, 4), RQ18
  BRNE.Q       116, RQ18, .L00802CA4

.L00802CA5:
// hu_stuff.c:689   {
  ADD          R0, 1, RD27
  MOV.L        RD27, chat_on
  MOV.L        RD27, (R2, 124)
// hu_stuff.c:691   HUlib_resetIText(&w_chat);
  MOV          TU7A00CA82/w_chat, RQ22
  ADD          RQ22, 0, RQ10
  BSR          HUlib_resetIText, R1
// hu_stuff.c:692   HU_queueChatChar(HU_BROADCAST);
  ADD          R0, 5, RD10
  BSR          HU_queueChatChar, R1
  BSR          .L00802CA7, R0

.L00802CA4:
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00802CA8
  MOV.L        (R2, 120), RD27
  BRLE.L       2, RD27, .L00802CA8

.L00802CA9:
// hu_stuff.c:695   {
  ADD          R0, 0, RD9

.L00802CAB:
// hu_stuff.c:697   {
  MOV.L        (RQ20, 4), RQ18
  MOV          HU_Responder/destination_keys!42, RQ27
  MOV.B        (RQ27, RD9), RQ21
  BRNE.Q       RQ21, RQ18, .L00802CAE
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L00802CAF
  MOV.L        consoleplayer, RD27
  BREQ.Q       RD27, RD9, .L00802CAF

.L00802CB0:
// hu_stuff.c:701   {
  ADD          R0, 1, RD27
  MOV.L        RD27, chat_on
  MOV.L        RD27, (R2, 124)
// hu_stuff.c:703   HUlib_resetIText(&w_chat);
  MOV          TU7A00CA82/w_chat, RQ22
  ADD          RQ22, 0, RQ10
  BSR          HUlib_resetIText, R1
// hu_stuff.c:704   HU_queueChatChar(i+1);
  ADDS.L       RD9, 1, RQ21
  SHAD.Q       RQ21, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ18, 0, RD10
  BSR          HU_queueChatChar, R1
// hu_stuff.c:705   break;
  BSR          .L00802CAD, R0
  BSR          .L00802CB2, R0

.L00802CAF:
  MOV.L        consoleplayer, RD27
  BRNE.Q       RD27, RD9, .L00802CB3
// hu_stuff.c:708   {
  MOV.L        HU_Responder/num_nobrainers!42, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, HU_Responder/num_nobrainers!42
  BRGE.L       3, RD27, .L00802CB4
// hu_stuff.c:711   plr->message = HUSTR_TALKTOSELF1;
  MOV          .L00C02E9D, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802CB5, R0

.L00802CB4:
  MOV.L        HU_Responder/num_nobrainers!42, RD27
  BRGE.L       6, RD27, .L00802CB6
// hu_stuff.c:713   plr->message = HUSTR_TALKTOSELF2;
  MOV          .L00C02E9E, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802CB7, R0

.L00802CB6:
  MOV.L        HU_Responder/num_nobrainers!42, RD27
  BRGE.L       9, RD27, .L00802CB8
// hu_stuff.c:715   plr->message = HUSTR_TALKTOSELF3;
  MOV          .L00C02E9F, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802CB9, R0

.L00802CB8:
  MOV.L        HU_Responder/num_nobrainers!42, RD27
  BRGE.L       32, RD27, .L00802CBA
// hu_stuff.c:717   plr->message = HUSTR_TALKTOSELF4;
  MOV          .L00C02EA0, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802CBB, R0

.L00802CBA:
// hu_stuff.c:719   plr->message = HUSTR_TALKTOSELF5;
  MOV          .L00C02EA1, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)

.L00802CBB:

.L00802CB9:

.L00802CB7:

.L00802CB5:

.L00802CB3:

.L00802CB2:

.L00802CAE:
  ADDS.L       RD9, 1, RD9
  BRLT.L       4, RD9, .L00802CAB

.L00802CAD:

.L00802CA8:

.L00802CA7:

.L00802CA3:
  BSR          .L00802CBC, R0

.L00802CA1:
// hu_stuff.c:726   {
  MOV.L        (RQ20, 4), RQ18
  AND          RQ18, 255, RD23
  MOV.L        HU_Responder/altdown!42, RD27
  BREQ.L       R0, RD27, .L00802CBD
// hu_stuff.c:730   {
  ADDS.L       RD23, -48, RQ18
  AND          RQ18, 255, RD23
  BRGT.L       9, RD23, .L00C00E9A
// hu_stuff.c:735   macromessage = chat_macros[c];
  MOV          chat_macros, RQ27
  MOV.Q        (RQ27, RD23), RQ26
  MOV.Q        RQ26, (R2, 128)
// hu_stuff.c:738   HU_queueChatChar(KEY_ENTER); // DEBUG!!!
  ADD          R0, 13, RD10
  BSR          HU_queueChatChar, R1
// hu_stuff.c:741   while (*macromessage)
  BSR          .L00802CC0, R0

.L00802CBE:
// hu_stuff.c:742   HU_queueChatChar(*macromessage++);
  MOV.Q        (R2, 128), RQ27
  MOV.B        (RQ27, 0), RQ18
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 128)
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  SHAD.Q       RQ8, 56, RD10
  SHAR.Q       RD10, 56, RD10
  BSR          HU_queueChatChar, R1

.L00802CC0:
  MOV.Q        (R2, 128), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.L       R0, RQ8, .L00802CBE

.L00802CBF:
// hu_stuff.c:743   HU_queueChatChar(KEY_ENTER);
  ADD          R0, 13, RD10
  BSR          HU_queueChatChar, R1
// hu_stuff.c:746   chat_on = false;
  MOV.L        RD0, chat_on
// hu_stuff.c:747   strcpy(lastmessage, chat_macros[c]);
  MOV          chat_macros, RQ27
  MOV.Q        (RQ27, RD23), RQ22
  MOV          HU_Responder/lastmessage!42, RQ10
  ADD          RQ22, 0, RQ11
  BSR          strcpy, R1
// hu_stuff.c:748   plr->message = lastmessage;
  MOV          HU_Responder/lastmessage!42, RQ27
  MOV.Q        TU7A00CA82/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
// hu_stuff.c:749   eatkey = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 124)
  BSR          .L00802CC1, R0

.L00802CBD:
// hu_stuff.c:754   c = ForeignTranslation(c);
  ADD          RD23, 0, RD10
  BSR          ForeignTranslation, R1
  SHAD.Q       RQ10, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  AND          RQ8, 255, RD23
  MOV.L        HU_Responder/shiftdown!42, RD27
  BRNE.L       R0, RD27, .L00802CC3
  ADD          R0, 97, R5
  CMPGE.Q      RD23, R5, RQ8
  ADD          R0, 122, R5
  CMPLE.Q      RD23, R5, RQ27
  BTSTN.L      RQ27, RQ8, .L00802CC3
  BSR          .L00802CC2, R0

.L00802CC3:
// hu_stuff.c:756   c = shiftxform[c];
  MOV.Q        shiftxform, RQ27
  MOV.B        (RQ27, RD23), RQ8
  AND          RQ8, 255, RD23

.L00802CC2:
// hu_stuff.c:757   eatkey = HUlib_keyInIText(&w_chat, c);
  MOV          TU7A00CA82/w_chat, RQ22
  ADD          RQ22, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          HUlib_keyInIText, R1
  ADD          RQ10, 0, RD27
  MOV.L        RD27, (R2, 124)
  BREQ.L       R0, RD27, .L00802CC5
// hu_stuff.c:761   HU_queueChatChar(c);
  SHAD.Q       RD23, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  SHAD.Q       RQ8, 56, RD10
  SHAR.Q       RD10, 56, RD10
  BSR          HU_queueChatChar, R1

.L00802CC5:
  BRNE.Q       13, RD23, .L00802CC6
// hu_stuff.c:767   {
  MOV.L        RD0, chat_on
  MOV          TU7A00CA82/w_chat, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 104), RQ8
  BREQ.L       R0, RQ8, .L00802CC7
// hu_stuff.c:770   {
  MOV          TU7A00CA82/w_chat, RQ27
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 20, RQ22
  MOV          HU_Responder/lastmessage!42, RQ10
  ADD          RQ22, 0, RQ11
  BSR          strcpy, R1
// hu_stuff.c:772   plr->message = lastmessage;
  MOV          HU_Responder/lastmessage!42, RQ27
  MOV.Q        TU7A00CA82/plr, RQ13
  MOV.Q        RQ27, (RQ13, 224)

.L00802CC7:
  BSR          .L00802CC8, R0

.L00802CC6:
  BRNE.Q       27, RD23, .L00802CC9
// hu_stuff.c:776   chat_on = false;
  MOV.L        RD0, chat_on

.L00802CC9:

.L00802CC8:

.L00802CC1:

.L00802CBC:
// hu_stuff.c:780   return eatkey;
  MOV.L        (R2, 124), RD10
  BSR          .L00C02E9C, R0

.L00C00E9A:
  ADD          R0, 0, RQ10

.L00C02E9C:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

S_StartSoundAtVolume:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -392, R2
  MOV.Q        RQ10, (R2, 184)
  ADD          RD11, 0, RD21
  MOV.L        RD12, (R2, 176)
// s_sound.c:282   mobj_t*	origin = (mobj_t *) origin_p;
  MOV.Q        (R2, 184), RQ20
// s_sound.c:291   if (sfx_id < 1 || sfx_id > NUMSFX)
  ADD          R0, 1, R5
  CMPLT.Q      RD21, R5, RQ18
  ADD          R0, 109, R5
  CMPGT.Q      RD21, R5, RQ8
  OR           RQ18, RQ8, RQ9
  BREQ.L       R0, RQ9, .L00802D37
// s_sound.c:292   I_Error("Bad sfx #: %d", sfx_id);
  MOV          .L00C02EA8, RQ10
  ADD          RD21, 0, RD11
  BSR          I_Error, R1

.L00802D37:
// s_sound.c:294   sfx = &S_sfx[sfx_id];
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD21, R5, RQ23
  ADD          RQ27, RQ23, RQ23
// s_sound.c:297   if (sfx->link)
  MOV.Q        (RQ23, 16), RQ27
  BREQ.Q       R0, RQ27, .L00802D38
// s_sound.c:298   {
  MOV.L        (RQ23, 24), RD27
  MOV.L        RD27, (R2, 164)
// s_sound.c:300   priority = sfx->priority;
  MOV.L        (RQ23, 12), RD27
  MOV.L        RD27, (R2, 160)
// s_sound.c:301   volume += sfx->volume;
  MOV.L        (RQ23, 28), RQ18
  MOV.L        (R2, 176), RD26
  ADDS.L       RD26, RQ18, RD26
  MOV.L        RD26, (R2, 176)
  ADD          R0, 1, RD25
  BRLT.L       RD25, RD26, .L00C02EA7
  MOV.L        (R2, 176), RD27
  MOV.L        snd_SfxVolume, RD26
  BRLE.L       RD26, RD27, .L00802D39
// s_sound.c:307   volume = snd_SfxVolume;
  MOV.L        snd_SfxVolume, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 176)

.L00802D39:
  BSR          .L00802D3A, R0

.L00802D38:
// s_sound.c:310   {
  ADD          R0, 128, RD27
  MOV.L        RD27, (R2, 164)
// s_sound.c:312   priority = NORM_PRIORITY;
  ADD          R0, 64, RD27
  MOV.L        RD27, (R2, 160)

.L00802D3A:
// s_sound.c:315   sep = 0;
  MOV.L        RD0, (R2, 168)
// s_sound.c:319   if (origin && origin != players[consoleplayer].mo)
  BREQ.Q       R0, RQ20, .L00802D3B
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ27
  BREQ.Q       RQ27, RQ20, .L00802D3B

.L00802D3C:
// s_sound.c:320   {
  ADD          R2, 164, RQ27
  MOV.Q        RQ27, (R2, 120)
  ADD          R2, 168, RQ22
  ADD          R2, 176, RQ12
  MOV          players, RQ26
  MOV.L        consoleplayer, RD25
  ADD          R0, 320, R5
  MUL.L        RD25, R5, RQ27
  ADD          RQ26, RQ27, RQ27
  MOV.Q        (RQ27, 0), RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ22, 0, RQ13
  MOV.Q        (R2, 120), RQ14
  BSR          S_AdjustSoundParams, R1
  MOV.L        RD10, (R2, 172)
  MOV.L        (RQ20, 24), RQ18
  MOV          players, RQ26
  MOV.L        consoleplayer, RD25
  ADD          R0, 320, R5
  MUL.L        RD25, R5, RQ27
  ADD          RQ26, RQ27, RQ27
  MOV.Q        (RQ27, 0), RQ22
  MOV.L        (RQ22, 24), RQ8
  BRNE.Q       RQ8, RQ18, .L00802D3E
  MOV.L        (RQ20, 28), RQ9
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ22
  MOV.L        (RQ22, 28), RQ18
  BRNE.Q       RQ18, RQ9, .L00802D3E

.L00802D3F:
// s_sound.c:329   {	
  ADD          R0, 128, RD27
  MOV.L        RD27, (R2, 168)

.L00802D3E:
  MOV.L        (R2, 172), RD27
  BREQ.L       R0, RD27, .L00C02EA7
  BSR          .L00802D41, R0

.L00802D3B:
// s_sound.c:337   {
  ADD          R0, 128, RD27
  MOV.L        RD27, (R2, 168)

.L00802D41:
// s_sound.c:342   if (sfx_id >= sfx_sawup
  ADD          R0, 10, R5
  CMPGE.Q      RD21, R5, RQ8
  ADD          R0, 13, R5
  CMPLE.Q      RD21, R5, RQ9
  BTST.L       RQ9, RQ8, .L00802D42
// s_sound.c:344   {	
  BSR          M_Random, R1
  ADD          RQ10, 0, RQ18
  AND          RQ18, 15, RQ8
  ADD          R0, 8, R5
  SUBS.L       R5, RQ8, RQ9
  MOV.L        (R2, 164), RD27
  ADDS.L       RD27, RQ9, RD27
  MOV.L        RD27, (R2, 164)
  BRGE.L       R0, RD27, .L00802D43
// s_sound.c:348   pitch = 0;
  MOV.L        RD0, (R2, 164)
  BSR          .L00802D44, R0

.L00802D43:
  MOV.L        (R2, 164), RD27
  BRLE.L       255, RD27, .L00802D45
// s_sound.c:350   pitch = 255;
  ADD          R0, 255, RD27
  MOV.L        RD27, (R2, 164)

.L00802D45:

.L00802D44:
  BSR          .L00802D46, R0

.L00802D42:
  ADD          R0, 32, R5
  CMPNE.Q      RD21, R5, RQ18
  ADD          R0, 87, R5
  CMPNE.Q      RD21, R5, RQ8
  BTST.L       RQ8, RQ18, .L00802D47
// s_sound.c:354   {
  BSR          M_Random, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 31, RQ18
  ADD          R0, 16, R5
  SUBS.L       R5, RQ18, RQ8
  MOV.L        (R2, 164), RD27
  ADDS.L       RD27, RQ8, RD27
  MOV.L        RD27, (R2, 164)
  BRGE.L       R0, RD27, .L00802D48
// s_sound.c:358   pitch = 0;
  MOV.L        RD0, (R2, 164)
  BSR          .L00802D49, R0

.L00802D48:
  MOV.L        (R2, 164), RD27
  BRLE.L       255, RD27, .L00802D4A
// s_sound.c:360   pitch = 255;
  ADD          R0, 255, RD27
  MOV.L        RD27, (R2, 164)

.L00802D4A:

.L00802D49:

.L00802D47:

.L00802D46:
// s_sound.c:364   S_StopSound(origin);
  ADD          RQ20, 0, RQ10
  BSR          S_StopSound, R1
// s_sound.c:367   cnum = S_getChannel(origin, sfx);
  ADD          RQ20, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          S_getChannel, R1
  ADD          RQ10, 0, RD27
// s_sound.c:369   if (cnum<0)
  MOV.L        RD27, (R2, 156)
  BRLT.L       R0, RD27, .L00C02EA7
// s_sound.c:379   if (sfx->lumpnum < 0)
  MOV.L        (RQ23, 44), RQ9
  BRGE.L       R0, RQ9, .L00802D4B
// s_sound.c:380   sfx->lumpnum = I_GetSfxLumpNum(sfx);
  ADD          RQ23, 0, RQ10
  BSR          I_GetSfxLumpNum, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, (RQ23, 44)

.L00802D4B:
// s_sound.c:384   if (!sfx->data)
  MOV.Q        (RQ23, 32), RQ27
  BRNE.Q       R0, RQ27, .L00802D4C
// s_sound.c:385   {
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ22
  MOV.Q        (RQ22, 0), RQ10
  MOV          .L00C02EA9, RQ11
  BSR          fprintf, R1

.L00802D4C:
// s_sound.c:399   if (sfx->usefulness++ < 0)
  MOV.L        (RQ23, 40), RQ18
  ADD          RQ18, 0, RQ8
  ADDS.L       RQ18, 1, RQ9
  MOV.L        RQ9, (RQ23, 40)
  BRGE.L       R0, RQ8, .L00802D4D
// s_sound.c:400   sfx->usefulness = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ23, 40)

.L00802D4D:
// s_sound.c:404   s_channels[cnum].handle = I_StartSound(sfx_id,
  ADD          RD21, 0, RD10
  MOV.L        (R2, 176), RD11
  MOV.L        (R2, 168), RD12
  MOV.L        (R2, 164), RD13
  MOV.L        (R2, 160), RD14
  BSR          I_StartSound, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        TU7A00CA3E/s_channels, RQ27
  MOV.L        (R2, 156), RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        RQ18, (RQ25, 16)

.L00C02EA7:
  ADD          R2, 392, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

W_AddFile:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -416, R2
  MOV.Q        RQ10, (R2, 216)
// w_wad.c:291   {
// w_wad.c:299   filelump_t		singleinfo;
// w_wad.c:309   if (filename[0] == '~')
  MOV.Q        (R2, 216), RQ27
  MOV.B        (RQ27, 0), RQ20
  BRNE.Q       126, RQ20, .L00802899
// w_wad.c:310   {
  MOV.Q        (R2, 216), RQ27
  ADD          RQ27, 1, RQ27
// w_wad.c:312   reloadname = filename;
  MOV.Q        RQ27, reloadname
  MOV.Q        RQ27, (R2, 216)
// w_wad.c:313   reloadlump = numlumps;
  MOV.L        numlumps, RD26
  ADD          RD26, 0, RD25
  MOV.L        RD25, reloadlump

.L00802899:
// w_wad.c:316   i=*filename;
  MOV.Q        (R2, 216), RQ27
  MOV.B        (RQ27, 0), RD22
// w_wad.c:317   if((i<' ') || (i>'~'))
  ADD          R0, 32, RQ21
  CMPGT.Q      RQ21, RD22, RQ20
  ADD          R0, 126, RQ18
  CMPGT.Q      RD22, RQ18, RQ21
  OR           RQ20, RQ21, RQ18
  BREQ.L       R0, RQ18, .L0080289A
// w_wad.c:318   __debugbreak();

W_AddFile.debugbreak_L0608:
  BRK          1544

.L0080289A:
// w_wad.c:321   if ( (handle = w_open (filename, "rb")) == -1)
  MOV.Q        (R2, 216), RQ10
  MOV          .L00C01607, RQ11
  BSR          w_open, R1
  ADD          RQ10, 0, RQ20
  MOV.L        RD20, (R2, 188)
  BRNE.Q       -1, RQ20, .L0080289B
// w_wad.c:322   {
  MOV          .L00C02F0B, RQ10
  MOV.Q        (R2, 216), RQ11
  BSR          printf, R1
// w_wad.c:324   return;
  BSR          .L00C02F09, R0

.L0080289B:
// w_wad.c:327   i=*filename;
  MOV.Q        (R2, 216), RQ27
  MOV.B        (RQ27, 0), RD22
// w_wad.c:328   if((i<' ') || (i>'~'))
  ADD          R0, 32, RQ18
  CMPGT.Q      RQ18, RD22, RQ21
  ADD          R0, 126, RQ18
  CMPGT.Q      RD22, RQ18, RQ20
  OR           RQ21, RQ20, RQ18
  BREQ.L       R0, RQ18, .L0080289C
// w_wad.c:329   __debugbreak();

W_AddFile.debugbreak_L0609:
  BRK          1545

.L0080289C:
// w_wad.c:331   printf (" adding %s\n", filename);
  MOV          .L00C02F0D, RQ10
  MOV.Q        (R2, 216), RQ11
  BSR          printf, R1
// w_wad.c:332   startlump = numlumps;
  MOV.L        numlumps, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 180)
// w_wad.c:334   fileinfo = NULL;
  MOV.Q        RQ0, (R2, 168)
// w_wad.c:335   wad2info = NULL;
  ADD          R0, 0, RQ23
// w_wad.c:338   if (strcmp (filename+strlen(filename)-3 , "wad" ) )
  MOV.Q        (R2, 216), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (R2, 216), RQ25
  ADD          RQ25, RQ27, RQ8
  ADD          RQ8, -3, RQ24
  ADD          RQ24, 0, RQ10
  MOV          .L00C02F0E, RQ11
  BSR          strcmp, R1
  ADD          RQ10, 0, RQ20
  BREQ.L       R0, RQ20, .L0080289D
// w_wad.c:341   fileinfo = &singleinfo;
  ADD          R2, 144, RQ27
  ADD          RQ27, 0, RQ8
  MOV.Q        RQ8, (R2, 168)
// w_wad.c:342   singleinfo.filepos = 0;
  MOV.L        RD0, (RQ27, 0)
// w_wad.c:343   singleinfo.size = LONG(w_filelength(handle));
  MOV.L        (R2, 188), RD10
  BSR          w_filelength, R1
  ADD          RQ10, 0, RQ20
  MOV.L        RQ20, (RQ27, 4)
// w_wad.c:344   ExtractFileBase (filename, singleinfo.name);
  ADD          RQ27, 8, RQ8
  MOV.Q        (R2, 216), RQ10
  ADD          RQ8, 0, RQ11
  BSR          ExtractFileBase, R1
// w_wad.c:345   numlumps++;
  MOV.L        numlumps, RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, numlumps
  BSR          .L0080289E, R0

.L0080289D:
// w_wad.c:383   w_read (handle, &header, sizeof(header));
  ADD          R2, 192, RQ27
  ADD          RQ27, 0, RQ11
  MOV.L        (R2, 188), RD10
  ADD          R0, 12, RD12
  BSR          w_read, R1
  ADD          RQ27, 0, RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C02F0F, RQ11
  ADD          R0, 4, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ20
  BREQ.L       R0, RQ20, .L008028A0
  ADD          R2, 192, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C02F10, RQ11
  ADD          R0, 4, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ20
  BREQ.L       R0, RQ20, .L008028A0
  BSR          .L0080289F, R0

.L008028A0:
// w_wad.c:387   {
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RD26
// w_wad.c:391   header.numlumps = LONG(header.numlumps);
  MOV.L        RD26, (RQ27, 4)
// w_wad.c:392   header.infotableofs = LONG(header.infotableofs);
  MOV.L        (RQ27, 8), RQ21
  MOV.L        RQ21, (RQ27, 8)
  MOV.L        (RQ27, 4), RQ18
  MOV.L        RD26, (R2, 136)
  BREQ.Q       RD26, RQ18, .L008028A2
// w_wad.c:395   __debugbreak();

W_AddFile.debugbreak_L060A:
  BRK          1546

.L008028A2:
// w_wad.c:397   printf("    IW1 wlumps=%d\n",
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ20
  MOV          .L00C02F12, RQ10
  ADD          RQ20, 0, RD11
  BSR          printf, R1
  MOV.L        (RQ27, 4), RQ21
  MOV.L        (R2, 136), RD26
  BREQ.Q       RD26, RQ21, .L008028A3
// w_wad.c:401   __debugbreak();

W_AddFile.debugbreak_L060B:
  BRK          1547

.L008028A3:
// w_wad.c:403   length = header.numlumps*sizeof(filelump_t);
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ18
  SHAD.L       RQ18, 4, RD26
// w_wad.c:405   fileinfo = malloc (length * 2);
  SHAD.L       RD26, 1, RQ20
  MOV.L        RD26, (R2, 184)
  ADDS.L       RQ20, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 168)
  MOV.L        (RQ27, 4), RQ21
  MOV.L        (R2, 136), RD25
  BREQ.Q       RD25, RQ21, .L008028A4
// w_wad.c:408   __debugbreak();

W_AddFile.debugbreak_L060C:
  BRK          1548

.L008028A4:
// w_wad.c:410   w_lseek (handle, header.infotableofs, SEEK_SET);
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 8), RQ18
  MOV.L        (R2, 188), RD10
  ADD          RQ18, 0, RD11
  ADD          R0, 0, RD12
  BSR          w_lseek, R1
  MOV.L        (RQ27, 4), RQ21
  MOV.L        (R2, 136), RD26
  BREQ.Q       RD26, RQ21, .L008028A5
// w_wad.c:413   __debugbreak();

W_AddFile.debugbreak_L060D:
  BRK          1549

.L008028A5:
// w_wad.c:415   w_read (handle, fileinfo, length);
  MOV.L        (R2, 188), RD10
  MOV.Q        (R2, 168), RQ11
  MOV.L        (R2, 184), RD12
  BSR          w_read, R1
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.L        (R2, 136), RD26
  BREQ.Q       RD26, RQ18, .L008028A6
// w_wad.c:418   __debugbreak();

W_AddFile.debugbreak_L060E:
  BRK          1550

.L008028A6:
// w_wad.c:420   numlumps += header.numlumps;
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ21
  MOV.L        numlumps, RD26
  ADDS.L       RD26, RQ21, RD26
  MOV.L        RD26, numlumps
  BRGE.L       RQ21, RD26, .L008028A7
// w_wad.c:422   __debugbreak();

W_AddFile.debugbreak_L060F:
  BRK          1551

.L008028A7:
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.L        (R2, 136), RD26
  BREQ.Q       RD26, RQ18, .L008028A8
// w_wad.c:425   __debugbreak();

W_AddFile.debugbreak_L0610:
  BRK          1552

.L008028A8:
// w_wad.c:429   printf("    IW wlumps=%d numlumps=%d\n",
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ21
  MOV          .L00C02F19, RQ10
  ADD          RQ21, 0, RD11
  MOV.L        numlumps, RD12
  BSR          printf, R1
  MOV.L        (RQ27, 4), RQ18
  MOV.L        (R2, 136), RD26
  BREQ.Q       RD26, RQ18, .L008028A9
// w_wad.c:433   __debugbreak();

W_AddFile.debugbreak_L0611:
  BRK          1553

.L008028A9:
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ21
  MOV.L        numlumps, RD26
  BRGE.L       RQ21, RD26, .L008028AA
// w_wad.c:436   __debugbreak();

W_AddFile.debugbreak_L0612:
  BRK          1554

.L008028AA:
  BSR          .L008028AB, R0

.L0080289F:
  ADD          R2, 192, RQ27
  ADD          RQ27, 0, RQ8
  ADD          RQ8, 0, RQ10
  MOV          .L00C02F1C, RQ11
  ADD          R0, 4, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ21
  BRNE.L       R0, RQ21, .L008028AC
// w_wad.c:440   {
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RD26
// w_wad.c:443   header.numlumps = LONG(header.numlumps);
  MOV.L        RD26, (RQ27, 4)
  MOV.L        RD26, (R2, 136)
// w_wad.c:444   header.infotableofs = LONG(header.infotableofs);
  MOV.L        (RQ27, 8), RQ18
  MOV.L        RQ18, (RQ27, 8)
// w_wad.c:448   length = header.numlumps*sizeof(wad2lump_t);
  MOV.L        (RQ27, 4), RQ21
  SHAD.L       RQ21, 5, RD25
// w_wad.c:449   wad2info = malloc (length);
  ADDS.L       RD25, 0, RQ10
  MOV.L        RD25, (R2, 184)
  BSR          malloc, R1
  ADD          RQ10, 0, RQ23
// w_wad.c:450   w_lseek (handle, header.infotableofs, SEEK_SET);
  MOV.L        (RQ27, 8), RQ21
  MOV.L        (R2, 188), RD10
  ADD          RQ21, 0, RD11
  ADD          R0, 0, RD12
  BSR          w_lseek, R1
// w_wad.c:451   w_read (handle, wad2info, length);
  MOV.L        (R2, 188), RD10
  ADD          RQ23, 0, RQ11
  ADD          RD25, 0, RD12
  BSR          w_read, R1
// w_wad.c:452   numlumps += header.numlumps;
  MOV.L        (RQ27, 4), RQ18
  MOV.L        numlumps, RD24
  ADDS.L       RD24, RQ18, RD24
  MOV.L        RD24, numlumps
  BREQ.Q       RD26, RQ18, .L008028AD
// w_wad.c:455   __debugbreak();

W_AddFile.debugbreak_L0613:
  BRK          1555

.L008028AD:
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ21
  MOV.L        numlumps, RD26
  BRGE.L       RQ21, RD26, .L008028AE
// w_wad.c:458   __debugbreak();

W_AddFile.debugbreak_L0614:
  BRK          1556

.L008028AE:
// w_wad.c:460   printf("    W2 wlumps=%d numlumps=%d\n",
  ADD          R2, 192, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV          .L00C02F1F, RQ10
  ADD          RQ18, 0, RD11
  MOV.L        numlumps, RD12
  BSR          printf, R1
  BSR          .L008028AF, R0

.L008028AC:
// w_wad.c:463   {
  MOV          .L00C02F20, RQ10
  MOV.Q        (R2, 216), RQ11
  BSR          I_Error, R1

.L008028AF:

.L008028AB:

.L0080289E:
// w_wad.c:470   if(startlump>=numlumps)
  MOV.L        (R2, 180), RD27
  MOV.L        numlumps, RD26
  BRLT.L       RD26, RD27, .L008028B0
// w_wad.c:471   __debugbreak();

W_AddFile.debugbreak_L0615:
  BRK          1557

.L008028B0:
// w_wad.c:477   lumpinfo = realloc (lumpinfo, numlumps*sizeof(lumpinfo_t));
  MOV.L        numlumps, RD27
  ADD          R0, 40, R5
  MULS.L       RD27, R5, RQ21
  ADDS.L       RQ21, 0, RQ11
  MOV.Q        lumpinfo, RQ10
  BSR          realloc, R1
  ADD          RQ10, 0, RQ27
// w_wad.c:479   if (!lumpinfo)
  MOV.Q        RQ27, lumpinfo
  BRNE.Q       R0, RQ27, .L008028B1
// w_wad.c:480   I_Error ("Couldn't realloc lumpinfo");
  MOV          .L00C02F22, RQ10
  BSR          I_Error, R1

.L008028B1:
// w_wad.c:482   printf("sizeof(*lump_p)=%d\n", sizeof(*lump_p));
  MOV          .L00C02F23, RQ10
  ADD          R0, 40, RD11
  BSR          printf, R1
// w_wad.c:485   lump_p = lumpinfo + startlump;
  MOV.Q        lumpinfo, RQ27
  MOV.L        (R2, 180), RD26
  ADD          R0, 40, R5
  MUL.L        RD26, R5, RQ9
  ADD          RQ27, RQ9, RQ9
// w_wad.c:487   memset(lump_p, 0, (numlumps-startlump)*sizeof(*lump_p));
  MOV.L        numlumps, RD27
  SUBS.L       RD27, RD26, RQ18
  ADD          R0, 40, R5
  MULS.L       RQ18, R5, RQ27
  ADDS.L       RQ27, 0, RQ25
  ADD          RQ9, 0, RQ10
  ADD          R0, 0, RD11
  ADD          RQ25, 0, RQ12
  BSR          memset, R1
// w_wad.c:492   storehandle = reloadname ? -1 : handle;
  MOV.Q        reloadname, RQ24
  BREQ.Q       R0, RQ24, .L008028B2
  ADD          R0, -1, RQ18
  BSR          .L008028B3, R0

.L008028B2:
  MOV.L        (R2, 188), RD18

.L008028B3:
  MOV.L        RD18, (R2, 140)
// w_wad.c:494   if(wad2info)
  BREQ.Q       R0, RQ23, .L008028B4
// w_wad.c:495   {
  MOV.L        (R2, 180), RD27
  ADDU.L       RD27, R0, RD22
  MOV.L        numlumps, RD26
  BRGEU.L      RD26, RD22, .L008028B7

.L008028B5:
// w_wad.c:499   lump_p->handle = handle;
  MOV.L        (R2, 188), RD27
  MOV.L        RD27, (RQ9, 16)
// w_wad.c:500   lump_p->position = LONG(wad2info->filepos);
  MOV.L        (RQ23, 0), RQ18
  MOV.L        RQ18, (RQ9, 20)
// w_wad.c:501   lump_p->size = LONG(wad2info->dsize);
  MOV.L        (RQ23, 8), RQ18
  MOV.L        RQ18, (RQ9, 24)
// w_wad.c:502   lump_p->csize = LONG(wad2info->csize);
  MOV.L        (RQ23, 4), RQ18
  MOV.L        RQ18, (RQ9, 32)
// w_wad.c:503   lump_p->ety = wad2info->ety;
  MOV.B        (RQ23, 12), RQ18
  MOV.B        RQ18, (RQ9, 36)
// w_wad.c:504   lump_p->cmp = wad2info->cmp;
  MOV.B        (RQ23, 13), RQ18
  MOV.B        RQ18, (RQ9, 37)
// w_wad.c:506   w_strupr_n (lump_p->name, wad2info->name, 16);
  ADD          RQ23, 16, RQ8
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  ADD          R0, 16, RD12
  BSR          w_strupr_n, R1
// w_wad.c:508   if(!lump_p->name[0])
  MOV.B        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L008028B8
// w_wad.c:509   __debugbreak();

W_AddFile.debugbreak_L0616:
  BRK          1558

.L008028B8:
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, 1, RD22
  ADDU.L       RD22, R0, RD22
  ADDU.L       RD22, R0, RD22
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 40, RQ9
  MOV.Q        RQ23, (R2, 88)
  ADD          RQ23, 32, RQ23
  MOV.L        numlumps, RD27
  BRLTU.L      RD27, RD22, .L008028B5

.L008028B7:
  BSR          .L008028B9, R0

.L008028B4:
// w_wad.c:514   for (i=startlump ; i<numlumps ; i++)
  MOV.L        (R2, 180), RD27
  ADDU.L       RD27, R0, RD22
  MOV.L        numlumps, RD26
  BRGEU.L      RD26, RD22, .L008028BC

.L008028BA:
// w_wad.c:517   lump_p->handle = storehandle;
  MOV.L        (R2, 140), RD27
  MOV.L        RD27, (RQ9, 16)
// w_wad.c:518   lump_p->position = LONG(fileinfo->filepos);
  MOV.Q        (R2, 168), RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.L        RQ18, (RQ9, 20)
// w_wad.c:519   lump_p->size = LONG(fileinfo->size);
  MOV.L        (RQ26, 4), RQ18
  MOV.L        RQ18, (RQ9, 24)
// w_wad.c:520   lump_p->csize = LONG(fileinfo->size);
  MOV.L        RQ18, (RQ9, 32)
// w_wad.c:521   lump_p->ety = 0;
  MOV.B        RD0, (RQ9, 36)
// w_wad.c:522   lump_p->cmp = 0;
  MOV.B        RD0, (RQ9, 37)
// w_wad.c:524   memcpy (lump_p->name, fileinfo->name, 8);
  ADD          RQ26, 8, RQ8
  ADD          RQ9, 0, RQ25
  MOV.Q        (RQ8, 0), RQ10
  MOV.Q        RQ10, (RQ25, 0)
// w_wad.c:526   if(!lump_p->name[0])
  MOV.B        (RQ9, 0), RQ18
  BRNE.L       R0, RQ18, .L008028BD
// w_wad.c:527   __debugbreak();

W_AddFile.debugbreak_L0617:
  BRK          1559

.L008028BD:
// w_wad.c:529   lump_p++;
  ADD          RQ9, 40, RQ9
// w_wad.c:530   fileinfo++;
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 16, RQ27
  MOV.Q        RQ27, (R2, 168)
  ADDS.L       RD22, 1, RD22
  ADDU.L       RD22, R0, RD22
  ADDU.L       RD22, R0, RD22
  MOV.L        numlumps, RD26
  BRLTU.L      RD26, RD22, .L008028BA

.L008028BC:

.L008028B9:
// w_wad.c:534   if(!lumpinfo->name[0])
  MOV.Q        lumpinfo, RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.L       R0, RQ18, .L008028BE
// w_wad.c:535   __debugbreak();

W_AddFile.debugbreak_L0618:
  BRK          1560

.L008028BE:
// w_wad.c:536   if(!lumpinfo[1].name[0])
  MOV.Q        lumpinfo, RQ27
  ADD          RQ27, 40, RQ26
  MOV.B        (RQ26, 0), RQ18
  BRNE.L       R0, RQ18, .L008028BF
// w_wad.c:537   __debugbreak();

W_AddFile.debugbreak_L0619:
  BRK          1561

.L008028BF:
// w_wad.c:539   printf("    numlumps=%d\n",
  MOV          .L00C02F28, RQ10
  MOV.L        numlumps, RD11
  BSR          printf, R1
// w_wad.c:542   if (reloadname)
  MOV.Q        reloadname, RQ27
  BREQ.Q       R0, RQ27, .L008028C0
// w_wad.c:543   w_close (handle);
  MOV.L        (R2, 188), RD10
  BSR          w_close, R1

.L008028C0:

.L00C02F09:
  ADD          R2, 416, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

P_KillMobj:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -424, R2
  MOV.Q        RQ10, (R2, 216)
  ADD          RQ11, 0, RQ18
// p_inter.c:689   if(target->spawnpoint.ac_spec)
  ADD          RQ18, 204, RQ27
  MOVU.B       (RQ27, 14), RQ9
  BREQ.L       R0, RQ9, .L00801CA1
// p_inter.c:692   P_AcsDoSpecialCmd(
  ADD          RQ18, 204, RQ27
  MOVU.B       (RQ27, 19), RQ9
  MOVU.B       (RQ27, 18), RQ23
  MOVU.B       (RQ27, 17), RQ22
  MOVU.B       (RQ27, 16), RQ20
  MOVU.B       (RQ27, 15), RQ26
  MOVU.B       (RQ27, 14), RQ10
  ADD          RQ26, 0, RD11
  ADD          RQ20, 0, RD12
  ADD          RQ22, 0, RD13
  ADD          RQ23, 0, RD14
  AND          RQ9, 255, RD15
  BSR          P_AcsDoSpecialCmd, R1

.L00801CA1:
// p_inter.c:701   target->flags &= ~(MF_SHOOTABLE|MF_FLOAT|MF_SKULLFLY);
  MOV.L        (RQ18, 160), RQ9
  AND          RQ9, 0xFFFFFFFFFEFFBFFB, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_inter.c:703   if (target->type != MT_SKULL)
  MOV.L        (RQ18, 128), RQ22
  BREQ.Q       18, RQ22, .L00801CA2
// p_inter.c:704   target->flags &= ~MF_NOGRAVITY;
  MOV.L        (RQ18, 160), RQ20
  AND          RQ20, -513, RQ27
  MOV.L        RQ27, (RQ18, 160)

.L00801CA2:
// p_inter.c:706   target->flags |= MF_CORPSE|MF_DROPOFF;
  MOV.L        (RQ18, 160), RQ27
  OR           RQ27, 0x00100400, RQ9
  MOV.L        RQ9, (RQ18, 160)
// p_inter.c:707   target->height >>= 2;
  MOV.L        (RQ18, 108), RQ23
  SHAR         RQ23, 2, RQ22
  MOV.L        RQ22, (RQ18, 108)
// p_inter.c:709   if (source && source->player)
  MOV.Q        (R2, 216), RQ26
  BREQ.Q       R0, RQ26, .L00801CA3
  MOV.Q        (R2, 216), RQ27
  MOV.Q        (RQ27, 192), RQ8
  BREQ.Q       R0, RQ8, .L00801CA3

.L00801CA4:
  MOV.L        (RQ18, 160), RQ9
  LUI          1024, RD27
  BTST.L       RD27, RQ9, .L00801CA6
// p_inter.c:713   source->player->killcount++;	
  MOV.Q        (R2, 216), RQ27
  MOV.Q        (RQ27, 192), RQ8
  MOV.L        (RQ8, 208), RQ9
  ADDS.L       RQ9, 1, RQ23
  MOV.L        RQ23, (RQ8, 208)

.L00801CA6:
  MOV.Q        (RQ18, 192), RQ8
  BREQ.Q       R0, RQ8, .L00801CA7
// p_inter.c:716   source->player->frags[target->player-players]++;
  MOV.Q        (R2, 216), RQ27
  MOV.Q        (RQ27, 192), RQ8
  ADD          RQ8, 100, RQ26
  MOV.Q        (RQ18, 192), RQ8
  MOV          players, RQ25
  ADD          RQ8, 0, RQ21
  SUB          RQ21, RQ25, RQ21
  ADD          R0, 320, RD13
  DIVS.L       RQ21, RD13, RQ21
  MOV.L        (RQ26, RQ21), RQ9
  ADDS.L       RQ9, 1, RQ23
  MOV.Q        (RQ27, 192), RQ8
  ADD          RQ8, 100, RQ26
  MOV.Q        (RQ18, 192), RQ8
  ADD          RQ8, 0, RQ21
  SUB          RQ21, RQ25, RQ21
  DIVS.L       RQ21, RD13, RQ21
  MOV.L        RQ23, (RQ26, RQ21)
  MOV.Q        RQ26, (R2, 120)

.L00801CA7:
  BSR          .L00801CA8, R0

.L00801CA3:
  MOV.L        netgame, RD27
  BRNE.L       R0, RD27, .L00801CA9
  MOV.L        (RQ18, 160), RQ9
  LUI          1024, RD27
  BTST.L       RD27, RQ9, .L00801CA9

.L00801CAA:
// p_inter.c:722   players[0].killcount++;
  MOV          players, RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (RQ26, 208), RQ9
  ADDS.L       RQ9, 1, RQ23
  MOV.L        RQ23, (RQ26, 208)

.L00801CA9:

.L00801CA8:
// p_inter.c:725   if (target->player)
  MOV.Q        (RQ18, 192), RQ8
  BREQ.Q       R0, RQ8, .L00801CAC
  MOV.Q        (R2, 216), RQ27
  BRNE.Q       R0, RQ27, .L00801CAD
// p_inter.c:729   target->player->frags[target->player-players]++;
  MOV.Q        (RQ18, 192), RQ27
  ADD          RQ27, 100, RQ8
  MOV          players, RQ26
  ADD          RQ27, 0, RQ21
  SUB          RQ21, RQ26, RQ21
  ADD          R0, 320, RD25
  DIVS.L       RQ21, RD25, RQ21
  MOV.L        (RQ8, RQ21), RQ9
  ADDS.L       RQ9, 1, RQ23
  ADD          RQ27, 0, RQ21
  SUB          RQ21, RQ26, RQ21
  MOV.Q        RQ27, (R2, 120)
  DIVS.L       RQ21, RD25, RQ21
  MOV.L        RQ23, (RQ8, RQ21)

.L00801CAD:
// p_inter.c:731   target->flags &= ~MF_SOLID;
  MOV.L        (RQ18, 160), RQ9
  AND          RQ9, -3, RQ23
  MOV.L        RQ23, (RQ18, 160)
// p_inter.c:732   target->player->playerstate = PST_DEAD;
  MOV.Q        (RQ18, 192), RQ8
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ8, 8)
// p_inter.c:733   P_DropWeapon (target->player);
  ADD          RQ8, 0, RQ10
  BSR          P_DropWeapon, R1
  MOV.Q        (RQ18, 192), RQ26
  MOV          players, RQ25
  MOV.L        consoleplayer, RD13
  ADD          R0, 320, R5
  MUL.L        RD13, R5, RQ8
  ADD          RQ25, RQ8, RQ8
  MOV.Q        RQ26, (R2, 120)
  BRNE.Q       RQ8, RQ26, .L00801CAE
  MOV.L        automapactive, RD27
  BREQ.L       R0, RD27, .L00801CAE

.L00801CAF:
// p_inter.c:740   AM_Stop ();
  BSR          AM_Stop, R1

.L00801CAE:

.L00801CAC:
// p_inter.c:745   if (target->health < -target->info->spawnhealth 
  MOV.L        (RQ18, 164), RQ9
  MOV.Q        (RQ18, 136), RQ8
  MOV.L        (RQ8, 8), RQ23
  SUBS.L       R0, RQ23, RQ22
  BRGE.L       RQ22, RQ9, .L00801CB1
  MOV.Q        (RQ18, 136), RQ8
  MOV.L        (RQ8, 52), RQ9
  BREQ.L       R0, RQ9, .L00801CB1

.L00801CB2:
// p_inter.c:747   {
  MOV.Q        (RQ18, 136), RQ8
  MOV.L        (RQ8, 52), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          P_SetMobjState, R1
  BSR          .L00801CB4, R0

.L00801CB1:
// p_inter.c:751   P_SetMobjState (target, target->info->deathstate);
  MOV.Q        (RQ18, 136), RQ8
  MOV.L        (RQ8, 48), RQ9
  ADD          RQ18, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  BSR          P_SetMobjState, R1

.L00801CB4:
// p_inter.c:753   target->tics -= P_Random()&3;
  MOV.L        (RQ18, 144), RQ23
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ22
  AND          RQ22, 3, RQ20
  SUBS.L       RQ23, RQ20, RQ27
  MOV.L        RQ27, (RQ18, 144)
// p_inter.c:755   if (target->tics < 1)
  MOV.L        (RQ18, 144), RQ26
  BRGE.L       1, RQ26, .L00801CB5
// p_inter.c:756   target->tics = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 144)

.L00801CB5:
// p_inter.c:764   switch (target->type)
  MOV.L        (RQ18, 128), RQ9
  BREQ.Q       23, RQ9, .L00801CB7
  BREQ.Q       1, RQ9, .L00801CB8
  BREQ.Q       2, RQ9, .L00801CB9
  BREQ.Q       10, RQ9, .L00801CBA
  BSR          .L00801CBB, R0

.L00801CB7:

.L00801CB8:
// p_inter.c:767   case MT_POSSESSED:
  ADD          R0, 63, RD27
  MOV.L        RD27, (R2, 204)
// p_inter.c:769   break;
  BSR          .L00801CB6, R0

.L00801CB9:
// p_inter.c:771   case MT_SHOTGUY:
  ADD          R0, 77, RD27
  MOV.L        RD27, (R2, 204)
// p_inter.c:773   break;
  BSR          .L00801CB6, R0

.L00801CBA:
// p_inter.c:775   case MT_CHAINGUY:
  ADD          R0, 73, RD27
  MOV.L        RD27, (R2, 204)
// p_inter.c:777   break;
  BSR          .L00801CB6, R0

.L00801CBB:
// p_inter.c:779   default:
  BSR          .L00C02F2E, R0

.L00801CB6:
// p_inter.c:783   mo = P_SpawnMobj (target->x,target->y,ONFLOORZ, item);
  MOV.L        (RQ18, 28), RQ23
  MOV.L        (RQ18, 24), RQ22
  ADD          RQ22, 0, RD10
  ADD          RQ23, 0, RD11
  LUI          0xFFFFFFFFFFF80000, RD12
  MOV.L        (R2, 204), RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ27
// p_inter.c:784   mo->flags |= MF_DROPPED;	// special versions of items
  MOV.L        (RQ27, 160), RQ20
  OR           RQ20, 0x00020000, RQ26
  MOV.L        RQ26, (RQ27, 160)
  MOV.Q        RQ27, (R2, 192)

.L00C02F2E:
  ADD          R2, 424, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

R_GenerateLookup:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
  MOV.L        RD10, (R2, 156)
// r_data.c:476   texture = textures[texnum];
  MOV.Q        textures, RQ27
  MOV.L        (R2, 156), RD26
  MOV.Q        (RQ27, RD26), RQ22
// r_data.c:479   texturecomposite[texnum] = 0;
  ADD          R0, 0, RQ23
  MOV.Q        texturecomposite, RQ27
  MOV.Q        RQ23, (RQ27, RD26)
// r_data.c:481   texturecompositesize[texnum] = 0;
  MOV.Q        texturecompositesize, RQ27
  MOV.L        RD0, (RQ27, RD26)
// r_data.c:482   collump = texturecolumnlump[texnum];
  MOV.Q        texturecolumnlump, RQ27
  MOV.Q        (RQ27, RD26), RQ13
  MOV.Q        RQ13, (R2, 128)
// r_data.c:483   colofs = texturecolumnofs[texnum];
  MOV.Q        texturecolumnofs, RQ27
  MOV.Q        (RQ27, RD26), RQ12
  MOV.Q        RQ12, (R2, 120)
// r_data.c:485   if(texture->width<0)
  MOV.W        (RQ22, 16), RQ27
  BRGE.L       R0, RQ27, .L00802434
// r_data.c:486   __debugbreak();

R_GenerateLookup.debugbreak_L0624:
  BRK          1572

.L00802434:
// r_data.c:487   if(texture->height<0)
  MOV.W        (RQ22, 18), RQ27
  BRGE.L       R0, RQ27, .L00802435
// r_data.c:488   __debugbreak();

R_GenerateLookup.debugbreak_L0625:
  BRK          1573

.L00802435:
// r_data.c:496   if(!patchcount)
  MOV.Q        R_GenerateLookup/patchcount!22, RQ27
  BRNE.Q       R0, RQ27, .L00802436
// r_data.c:497   patchcount = (byte *)malloc (1024);
  ADD          R0, 1024, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ23
  MOV.Q        RQ23, R_GenerateLookup/patchcount!22

.L00802436:
// r_data.c:498   memset (patchcount, 0, texture->width);
  MOV.W        (RQ22, 16), RQ27
  SHAD.Q       RQ27, 48, RQ26
  SHAR.Q       RQ26, 48, RQ26
  MOV.Q        R_GenerateLookup/patchcount!22, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// r_data.c:499   patch = texture->patches;
  ADD          RQ22, 24, RQ21
// r_data.c:501   for (i=0 , patch = texture->patches;
  ADD          R0, 0, RD13
  ADD          RQ22, 24, RQ23
  ADD          RQ23, 0, RQ21
  MOV.W        (RQ22, 22), RQ18
  MOV.L        RD13, (R2, 136)
  BRGE.L       RQ18, RD13, .L00802439

.L00802437:
// r_data.c:506   realpatch = W_CachePatchNum (patch->patch, PU_CACHE);
  MOV.L        (RQ21, 8), RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CachePatchNum, R1
  ADD          RQ10, 0, RQ27
// r_data.c:507   x1 = patch->originx;
  MOV.L        (RQ21, 0), RD20
// r_data.c:509   x2 = x1 + (realpatch->width);
  MOV.W        (RQ27, 0), RQ18
  MOV.Q        RQ27, (R2, 144)
  ADDS.L       RD20, RQ18, RD26
  MOV.L        RD26, (R2, 140)
// r_data.c:511   if (x1 < 0)
  BRGE.L       R0, RD20, .L0080243A
// r_data.c:512   x = 0;
  ADD          R0, 0, RD9
  BSR          .L0080243B, R0

.L0080243A:
// r_data.c:514   x = x1;
  ADD          RD20, 0, RD9

.L0080243B:
// r_data.c:516   if (x2 > texture->width)
  MOV.W        (RQ22, 16), RQ18
  MOV.L        (R2, 140), RD27
  BRLE.L       RQ18, RD27, .L0080243C
// r_data.c:517   x2 = texture->width;
  MOV.W        (RQ22, 16), RD27
  MOV.L        RD27, (R2, 140)

.L0080243C:
// r_data.c:518   for ( ; x<x2 ; x++)
  MOV.L        (R2, 140), RD27
  BRGE.L       RD27, RD9, .L0080243F

.L0080243D:
// r_data.c:519   {
  MOV.Q        R_GenerateLookup/patchcount!22, RQ27
  MOVU.B       (RQ27, RD9), RQ18
  ADDS.L       RQ18, 1, RQ8
  MOVU.B       RQ8, (RQ27, RD9)
// r_data.c:521   collump[x] = patch->patch;
  MOV.L        (RQ21, 8), RQ18
  MOV.Q        (R2, 128), RQ27
  MOV.W        RQ18, (RQ27, RD9)
// r_data.c:523   colofs[x] = (realpatch->columnofs[x-x1])+3;
  MOV.Q        (R2, 144), RQ26
  ADD          RQ26, 8, RQ23
  SUBS.L       RD9, RD20, RQ18
  MOV.L        (RQ23, RQ18), RQ8
  ADDS.L       RQ8, 3, RQ18
  MOV.Q        (R2, 120), RQ13
  MOVU.W       RQ18, (RQ13, RD9)
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 140), RD12
  BRLT.L       RD12, RD9, .L0080243D

.L0080243F:
  MOV.L        (R2, 136), RD27
  ADD          RD27, 0, RQ8
  ADDS.L       RD27, 1, RD27
  ADD          RQ21, 0, RQ23
  ADD          RQ21, 12, RQ21
  MOV.W        (RQ22, 22), RQ18
  MOV.L        RD27, (R2, 136)
  BRLT.L       RQ18, RD27, .L00802437

.L00802439:
// r_data.c:527   for (x=0 ; x<texture->width ; x++)
  ADD          R0, 0, RD9
  MOV.W        (RQ22, 16), RQ8
  BRGE.L       RQ8, RD9, .L00802442

.L00802440:
// r_data.c:528   {
  MOV.Q        R_GenerateLookup/patchcount!22, RQ27
  MOVU.B       (RQ27, RD9), RQ18
  BRNE.L       R0, RQ18, .L00802443
// r_data.c:530   {
  ADD          RQ22, 0, RQ23
  MOV          .L00C02F41, RQ10
  ADD          RQ23, 0, RQ11
  BSR          printf, R1
// r_data.c:533   return;
  BSR          .L00C02F3E, R0

.L00802443:
// r_data.c:537   if (patchcount[x] > 1)
  MOV.Q        R_GenerateLookup/patchcount!22, RQ27
  MOVU.B       (RQ27, RD9), RQ18
  BRLE.L       1, RQ18, .L00802444
// r_data.c:540   collump[x] = -1;	
  MOV.Q        (R2, 128), RQ27
  ADD          R0, -1, RD26
  MOV.W        RD26, (RQ27, RD9)
// r_data.c:541   colofs[x] = texturecompositesize[texnum];
  MOV.Q        texturecompositesize, RQ13
  MOV.L        (R2, 156), RD12
  MOV.L        (RQ13, RD12), RQ8
  MOV.Q        (R2, 120), RQ13
  MOVU.W       RQ8, (RQ13, RD9)
  MOV.W        (RQ22, 18), RQ18
  LUI          16, R5
  SUBS.L       R5, RQ18, RQ11
  BRLE.L       RQ11, RQ8, .L00802445
// r_data.c:544   {
  MOV          .L00C02F42, RQ10
  MOV.L        (R2, 156), RD11
  BSR          I_Error, R1

.L00802445:
// r_data.c:549   texturecompositesize[texnum] += texture->height;
  MOV.Q        texturecompositesize, RQ27
  MOV.L        (R2, 156), RD26
  MOV.L        (RQ27, RD26), RQ18
  MOV.W        (RQ22, 18), RQ8
  ADDS.L       RQ18, RQ8, RQ13
  MOV.L        RQ13, (RQ27, RD26)

.L00802444:
  ADDS.L       RD9, 1, RD9
  MOV.W        (RQ22, 16), RQ18
  BRLT.L       RQ18, RD9, .L00802440

.L00802442:

.L00C02F3E:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_loadData:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
  ADD          R2, 144, RQ6
  MOV.Q        RQ6, (R2, 136)
// wi_stuff.c:1578   char	name[9];
// wi_stuff.c:1581   wi_anims[0] = epsd0animinfo;	//BGB: Debug
  MOV          TU7A00CB85/wi_anims, RQ27
  MOV          TU7A00CB85/epsd0animinfo, RQ26
  MOV.Q        RQ26, (RQ27, 0)
// wi_stuff.c:1582   wi_anims[1] = epsd1animinfo;	//BGB: Debug
  MOV          TU7A00CB85/epsd1animinfo, RQ26
  MOV.Q        RQ26, (RQ27, 8)
// wi_stuff.c:1583   wi_anims[2] = epsd2animinfo;	//BGB: Debug
  MOV          TU7A00CB85/epsd2animinfo, RQ26
  MOV.Q        RQ26, (RQ27, 16)
// wi_stuff.c:1586   if ((gamemode == commercial) || (gamemode == hexen))
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ8
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ23
  OR           RQ8, RQ23, RQ22
  BREQ.L       R0, RQ22, .L00802A97
// wi_stuff.c:1587   strcpy(name, "INTERPIC");
  ADD          R2, 144, RQ27
  MOV          .L00C02F49, RQ26
  MOV.L        (RQ26, 0), RQ10
  MOV.L        (RQ26, 4), RQ11
  MOV.L        (RQ26, 8), RQ12
  MOV.L        RQ10, (RQ27, 0)
  MOV.L        RQ11, (RQ27, 4)
  MOV.L        RQ12, (RQ27, 8)
  BSR          .L00802A98, R0

.L00802A97:
// wi_stuff.c:1589   sprintf(name, "WIMAP%d", wbs->epsd);
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  ADD          R2, 144, RQ10
  MOV          .L00C02F4A, RQ11
  ADDS.L       RQ8, 0, RD12
  BSR          sprintf, R1

.L00802A98:
// wi_stuff.c:1591   if ( gamemode == retail )
  MOV.L        gamemode, RD27
  BRNE.Q       3, RD27, .L00802A99
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  BRNE.Q       3, RQ23, .L00802A9A
// wi_stuff.c:1594   strcpy(name,"INTERPIC");
  ADD          R2, 144, RQ27
  MOV          .L00C02F49, RQ26
  MOV.L        (RQ26, 0), RQ10
  MOV.L        (RQ26, 4), RQ11
  MOV.L        (RQ26, 8), RQ12
  MOV.L        RQ10, (RQ27, 0)
  MOV.L        RQ11, (RQ27, 4)
  MOV.L        RQ12, (RQ27, 8)

.L00802A9A:

.L00802A99:
// wi_stuff.c:1599   bg = W_CachePatchName(name, PU_CACHE);	
  ADD          R2, 144, RQ10
  ADD          R0, 101, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/bg
// wi_stuff.c:1600   V_DrawPatch(0, 0, 1, bg);
  ADD          R0, 0, RD10
  ADD          R0, 0, RD11
  ADD          R0, 1, RD12
  MOV.Q        TU7A00CB85/bg, RQ13
  BSR          V_DrawPatch, R1
// wi_stuff.c:1602   printf("WI_loadData: A\n");
  MOV          .L00C02F4B, RQ10
  BSR          printf, R1
// wi_stuff.c:1616   if ((gamemode == commercial) || (gamemode == hexen))
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ22
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ8
  OR           RQ22, RQ8, RQ23
  BREQ.L       R0, RQ23, .L00802A9B
// wi_stuff.c:1617   {
  ADD          R0, 32, RD27
// wi_stuff.c:1619   lnames = (patch_t **) Z_Malloc(sizeof(patch_t*) * (NUMCMAPS+8),
  ADDS.L       RD27, 8, RQ22
  MOV.L        RD27, TU7A00CB85/NUMCMAPS
  SHAD.L       RQ22, 3, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, TU7A00CB85/lnames
// wi_stuff.c:1621   for (i=0 ; i<NUMCMAPS ; i++)
  ADD          R0, 0, RD18
  MOV.L        TU7A00CB85/NUMCMAPS, RD27
  BRGE.L       RD27, RD18, .L00802A9E

.L00802A9C:
// wi_stuff.c:1622   {								
  ADD          R2, 144, RQ10
  MOV          .L00C02F4C, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
// wi_stuff.c:1625   lnames[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        TU7A00CB85/lnames, RQ27
  MOV.Q        RQ9, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  MOV.L        TU7A00CB85/NUMCMAPS, RD27
  BRLT.L       RD27, RD18, .L00802A9C

.L00802A9E:
  BSR          .L00802A9F, R0

.L00802A9B:
// wi_stuff.c:1629   {
  ADD          R0, 104, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        RQ9, TU7A00CB85/lnames
// wi_stuff.c:1632   for (i=0 ; i<NUMMAPS ; i++)
  ADD          R0, 0, RD18

.L00802AA0:
// wi_stuff.c:1633   {
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  ADD          R2, 144, RQ10
  MOV          .L00C02F4D, RQ11
  ADDS.L       RQ8, 0, RD12
  ADD          RD18, 0, RD13
  BSR          sprintf, R1
// wi_stuff.c:1636   lnames[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        TU7A00CB85/lnames, RQ27
  MOV.Q        RQ9, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802AA0

.L00802AA2:
// wi_stuff.c:1639   printf("WI_loadData: A-1\n");
  MOV          .L00C02F4E, RQ10
  BSR          printf, R1
// wi_stuff.c:1643   yah[0] = W_CachePatchName("WIURH0", PU_PATCH);
  MOV          .L00C02F4F, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        RQ9, (RQ27, 0)
// wi_stuff.c:1647   yah[1] = W_CachePatchName("WIURH1", PU_PATCH);
  MOV          .L00C02F50, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        RQ9, (RQ27, 8)
// wi_stuff.c:1651   splat = W_CachePatchName("WISPLAT", PU_PATCH); 
  MOV          .L00C02F51, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/splat
// wi_stuff.c:1653   printf("WI_loadData: A-2\n");
  MOV          .L00C02F52, RQ10
  BSR          printf, R1
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  BRGE.L       3, RQ8, .L00802AA3
// wi_stuff.c:1656   {
  ADD          R0, 0, RD20
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/NUMANIMS, RQ27
  MOV.L        (RQ27, RQ23), RQ22
  BRGE.L       RQ22, RD20, .L00802AA6

.L00802AA4:
// wi_stuff.c:1658   {
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV          TU7A00CB85/wi_anims, RQ27
  MOV.Q        (RQ27, RQ8), RQ9
  ADD          R0, 72, R5
  MUL.L        RD20, R5, RQ21
  ADD          RQ9, RQ21, RQ21
// wi_stuff.c:1661   if(!a)		continue;		//BGB: Debug
  BREQ.Q       R0, RQ21, .L00802AA5
// wi_stuff.c:1662   if(!a->p)	continue;		//BGB: Debug
  ADD          RQ21, 32, RQ9
  BREQ.Q       R0, RQ9, .L00802AA5
// wi_stuff.c:1664   for (i=0;i<a->nanims;i++)
  ADD          R0, 0, RD18
  MOV.L        (RQ21, 8), RQ8
  BRGE.L       RQ8, RD18, .L00802AA9

.L00802AA7:
// wi_stuff.c:1667   if (wbs->epsd != 1 || j != 8) 
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  ADD          R0, 1, R5
  CMPNE.Q      RQ23, R5, RQ22
  ADD          R0, 8, R5
  CMPNE.Q      RD20, R5, RQ8
  OR           RQ22, RQ8, RQ23
  BREQ.L       R0, RQ23, .L00802AAA
// wi_stuff.c:1670   sprintf(name, "WIA%d%.2d%.2d", wbs->epsd, j, i);	
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ22
  ADD          R2, 144, RQ10
  MOV          .L00C02F53, RQ11
  ADD          RQ22, 0, RD12
  ADD          RD20, 0, RD13
  ADD          RD18, 0, RD14
  BSR          sprintf, R1
// wi_stuff.c:1672   a->p[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  ADD          RQ21, 32, RQ27
  MOV.Q        RQ9, (RQ27, RD18)
  BSR          .L00802AAB, R0

.L00802AAA:
// wi_stuff.c:1677   a->p[i] = wi_anims[1][4].p[i]; 
  MOV          TU7A00CB85/wi_anims, RQ27
  MOV.Q        (RQ27, 8), RQ9
  ADD          RQ9, 288, RQ27
  ADD          RQ27, 32, RQ9
  MOV.Q        (RQ9, RD18), RQ26
  ADD          RQ21, 32, RQ9
  MOV.Q        RQ26, (RQ9, RD18)

.L00802AAB:
  ADDS.L       RD18, 1, RD18
  MOV.L        (RQ21, 8), RQ8
  BRLT.L       RQ8, RD18, .L00802AA7

.L00802AA9:

.L00802AA5:
  ADDS.L       RD20, 1, RD20
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/NUMANIMS, RQ27
  MOV.L        (RQ27, RQ23), RQ22
  BRLT.L       RQ22, RD20, .L00802AA4

.L00802AA6:

.L00802AA3:

.L00802A9F:
// wi_stuff.c:1684   printf("WI_loadData: B\n");
  MOV          .L00C02F54, RQ10
  BSR          printf, R1
// wi_stuff.c:1688   wiminus = W_CachePatchName("WIMINUS", PU_PATCH); 
  MOV          .L00C02F55, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/wiminus
// wi_stuff.c:1690   for (i=0;i<10;i++)
  ADD          R0, 0, RD18

.L00802AAC:
// wi_stuff.c:1693   sprintf(name, "WINUM%d", i);	 
  ADD          R2, 144, RQ10
  MOV          .L00C02F56, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
// wi_stuff.c:1695   num[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        RQ9, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       10, RD18, .L00802AAC

.L00802AAE:
// wi_stuff.c:1700   percent = W_CachePatchName("WIPCNT", PU_PATCH);
  MOV          .L00C02F57, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/percent
// wi_stuff.c:1704   finished = W_CachePatchName("WIF", PU_PATCH);
  MOV          .L00C02F58, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/finished
// wi_stuff.c:1708   entering = W_CachePatchName("WIENTER", PU_PATCH);
  MOV          .L00C02F59, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/entering
// wi_stuff.c:1712   kills = W_CachePatchName("WIOSTK", PU_PATCH);	 
  MOV          .L00C02F5A, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/kills
// wi_stuff.c:1716   secret = W_CachePatchName("WIOSTS", PU_PATCH);
  MOV          .L00C02F5B, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/secret
// wi_stuff.c:1720   sp_secret = W_CachePatchName("WISCRT2", PU_PATCH);
  MOV          .L00C02F5C, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/sp_secret
// wi_stuff.c:1722   printf("WI_loadData: C\n");
  MOV          .L00C02F5D, RQ10
  BSR          printf, R1
// wi_stuff.c:1725   if (french)
  MOV.L        netgame, RD27
  BREQ.L       R0, RD27, .L00802AAF
  MOV.L        deathmatch, RD27
  BRNE.L       R0, RD27, .L00802AAF

.L00802AB0:
// wi_stuff.c:1730   items = W_CachePatchName("WIOBJ", PU_PATCH);	
  MOV          .L00C02F5E, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/items
  BSR          .L00802AB2, R0

.L00802AAF:
// wi_stuff.c:1733   items = W_CachePatchName("WIOSTI", PU_PATCH);
  MOV          .L00C02F5F, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/items

.L00802AB2:
// wi_stuff.c:1740   frags = W_CachePatchName("WIFRGS", PU_PATCH);	
  MOV          .L00C02F60, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/frags
// wi_stuff.c:1744   colon = W_CachePatchName("WICOLON", PU_PATCH); 
  MOV          .L00C02F61, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/colon
// wi_stuff.c:1748   wi_time = W_CachePatchName("WITIME", PU_PATCH);	 
  MOV          .L00C02F62, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/wi_time
// wi_stuff.c:1752   sucks = W_CachePatchName("WISUCKS", PU_PATCH);	
  MOV          .L00C02F63, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/sucks
// wi_stuff.c:1756   par = W_CachePatchName("WIPAR", PU_PATCH);	 
  MOV          .L00C02F64, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/par
// wi_stuff.c:1760   killers = W_CachePatchName("WIKILRS", PU_PATCH);
  MOV          .L00C02F65, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/killers
// wi_stuff.c:1764   victims = W_CachePatchName("WIVCTMS", PU_PATCH);
  MOV          .L00C02F66, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/victims
// wi_stuff.c:1768   total = W_CachePatchName("WIMSTT", PU_PATCH);	 
  MOV          .L00C02F67, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/total
// wi_stuff.c:1772   star = W_CachePatchName("STFST01", PU_PATCH);
  MOV          .L00C02F68, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/star
// wi_stuff.c:1776   bstar = W_CachePatchName("STFDEAD0", PU_PATCH);	
  MOV          .L00C02F69, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  MOV.Q        RQ10, TU7A00CB85/bstar
// wi_stuff.c:1778   printf("WI_loadData: D\n");
  MOV          .L00C02F6A, RQ10
  BSR          printf, R1
// wi_stuff.c:1780   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802AB3:
// wi_stuff.c:1783   sprintf(name, "STPB%d", i);		
  ADD          R2, 144, RQ10
  MOV          .L00C02F6B, RQ11
  ADD          RD18, 0, RD12
  BSR          sprintf, R1
// wi_stuff.c:1785   p[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ27
  MOV          TU7A00CB85/p, RQ26
  MOV.Q        RQ27, (RQ26, RD18)
// wi_stuff.c:1788   sprintf(name, "WIBP%d", i+1);	 
  ADDS.L       RD18, 1, RQ8
  ADD          R2, 144, RQ10
  MOV          .L00C02F6C, RQ11
  ADDS.L       RQ8, 0, RD12
  BSR          sprintf, R1
// wi_stuff.c:1790   bp[i] = W_CachePatchName(name, PU_PATCH);
  ADD          R2, 144, RQ10
  ADD          R0, 8, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ9
  MOV          TU7A00CB85/bp, RQ26
  MOV.Q        RQ9, (RQ26, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802AB3

.L00802AB5:
// wi_stuff.c:1793   printf("WI_loadData: E\n");
  MOV          .L00C02F6D, RQ10
  BSR          printf, R1

.L00C02F48:
  ADD          R2, 400, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_drawFline:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 136)
  MOV.L        RD11, (R2, 132)
// am_map.c:1008   if (      fl->a.x < 0 || fl->a.x >= f_w
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 0), RQ18
  BRLT.L       R0, RQ18, .L00801829
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 0), RQ18
  MOV.L        TU7A00C41B/f_w, RD12
  BRGE.L       RD12, RQ18, .L00801829

.L0080182F:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 4), RQ18
  BRLT.L       R0, RQ18, .L00801829

.L0080182E:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 4), RQ18
  MOV.L        TU7A00C41B/f_h, RD12
  BRGE.L       RD12, RQ18, .L00801829

.L0080182D:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 0), RQ18
  BRLT.L       R0, RQ18, .L00801829

.L0080182C:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 0), RQ18
  MOV.L        TU7A00C41B/f_w, RD12
  BRGE.L       RD12, RQ18, .L00801829

.L0080182B:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 4), RQ18
  BRLT.L       R0, RQ18, .L00801829

.L0080182A:
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 4), RQ18
  MOV.L        TU7A00C41B/f_h, RD12
  BRGE.L       RD12, RQ18, .L00801829
  BSR          .L00801828, R0

.L00801829:
// am_map.c:1012   {
  MOV.L        AM_drawFline/fuck!56, RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, AM_drawFline/fuck!56
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV          .L00C02F74, RQ11
  ADD          RQ18, 0, RD12
  BSR          fprintf, R1
// am_map.c:1014   return;
  BSR          .L00C02F73, R0

.L00801828:
// am_map.c:1020   dx = fl->b.x - fl->a.x;
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 0), RQ18
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 0), RQ22
  SUBS.L       RQ18, RQ22, RD12
// am_map.c:1021   ax = 2 * (dx<0 ? -dx : dx);
  MOV.L        RD12, (R2, 128)
  BRGE.L       R0, RD12, .L00801831
  MOV.L        (R2, 128), RD27
  SUBS.L       R0, RD27, RQ22
  ADD          RQ22, 0, RQ18
  BSR          .L00801832, R0

.L00801831:
  MOV.L        (R2, 128), RD18

.L00801832:
  SHAD.L       RQ18, 1, RD20
// am_map.c:1022   sx = dx<0 ? -1 : 1;
  MOV.L        (R2, 128), RD27
  BRGE.L       R0, RD27, .L00801833
  ADD          R0, -1, RQ18
  BSR          .L00801834, R0

.L00801833:
  ADD          R0, 1, RQ18

.L00801834:
  MOV.L        RD18, (R2, 120)
// am_map.c:1024   dy = fl->b.y - fl->a.y;
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ13
  MOV.L        (RQ13, 4), RQ18
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 4), RQ22
  SUBS.L       RQ18, RQ22, RD12
// am_map.c:1025   ay = 2 * (dy<0 ? -dy : dy);
  MOV.L        RD12, (R2, 124)
  BRGE.L       R0, RD12, .L00801835
  MOV.L        (R2, 124), RD27
  SUBS.L       R0, RD27, RQ22
  ADD          RQ22, 0, RQ18
  BSR          .L00801836, R0

.L00801835:
  MOV.L        (R2, 124), RD18

.L00801836:
  SHAD.L       RQ18, 1, RD21
// am_map.c:1026   sy = dy<0 ? -1 : 1;
  MOV.L        (R2, 124), RD27
  BRGE.L       R0, RD27, .L00801837
  ADD          R0, -1, RQ18
  BSR          .L00801838, R0

.L00801837:
  ADD          R0, 1, RQ18

.L00801838:
  MOV.L        RD18, (R2, 116)
// am_map.c:1028   x = fl->a.x;
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ13
  MOV.L        (RQ13, 0), RD8
// am_map.c:1029   y = fl->a.y;
  MOV.L        (RQ13, 4), RD23
// am_map.c:1031   if (ax > ay)
  BRLE.L       RD21, RD20, .L00801839
// am_map.c:1032   {
  ADD          RD20, 0, RQ18
  ADD          R0, 2, RD27
  DIVS.L       RQ18, RD27, RQ18
  SUBS.L       RD21, RQ18, RD9
// am_map.c:1034   while (1)

.L0080183A:
// am_map.c:1035   {
  MOV.Q        colormaps, RQ27
  MOV.L        (R2, 132), RD13
  MOVU.W       (RQ27, RD13), RQ22
  MOV.L        TU7A00C41B/f_w, RD27
  MULS.L       RD23, RD27, RQ18
  ADDS.L       RQ18, RD8, RQ27
  MOV.Q        TU7A00C41B/fb, RQ12
  MOVU.W       RQ22, (RQ12, RQ27)
// am_map.c:1037   if (x == fl->b.x) return;
  MOV.Q        (R2, 136), RQ12
  ADD          RQ12, 8, RQ11
  MOV.L        (RQ11, 0), RQ18
  BREQ.Q       RQ18, RD8, .L00C02F73
// am_map.c:1038   if (d>=0)
  BRLT.L       R0, RD9, .L0080183D
// am_map.c:1039   {
  MOV.L        (R2, 116), RD27
  ADDS.L       RD23, RD27, RD23
// am_map.c:1041   d -= ax;
  SUBS.L       RD9, RD20, RD9

.L0080183D:
// am_map.c:1042   }
  MOV.L        (R2, 120), RD27
  ADDS.L       RD8, RD27, RD8
// am_map.c:1044   d += ay;
  ADDS.L       RD9, RD21, RD9
  BSR          .L0080183A, R0

.L0080183B:
  BSR          .L0080183E, R0

.L00801839:
// am_map.c:1048   {
  ADD          RD21, 0, RQ22
  ADD          R0, 2, RD27
  DIVS.L       RQ22, RD27, RQ22
  SUBS.L       RD20, RQ22, RD9
// am_map.c:1050   while (1)

.L0080183F:
// am_map.c:1051   {
  MOV.Q        colormaps, RQ27
  MOV.L        (R2, 132), RD13
  MOVU.W       (RQ27, RD13), RQ12
  MOV.L        TU7A00C41B/f_w, RD27
  MULS.L       RD23, RD27, RQ18
  ADDS.L       RQ18, RD8, RQ22
  MOV.Q        TU7A00C41B/fb, RQ27
  MOVU.W       RQ12, (RQ27, RQ22)
// am_map.c:1053   if (y == fl->b.y) return;
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 8, RQ11
  MOV.L        (RQ11, 4), RQ18
  BREQ.Q       RQ18, RD23, .L00C02F73
// am_map.c:1054   if (d >= 0)
  BRLT.L       R0, RD9, .L00801842
// am_map.c:1055   {
  MOV.L        (R2, 120), RD27
  ADDS.L       RD8, RD27, RD8
// am_map.c:1057   d -= ay;
  SUBS.L       RD9, RD21, RD9

.L00801842:
// am_map.c:1058   }
  MOV.L        (R2, 116), RD27
  ADDS.L       RD23, RD27, RD23
// am_map.c:1060   d += ax;
  ADDS.L       RD9, RD20, RD9
  BSR          .L0080183F, R0

.L00801840:

.L0080183E:

.L00C02F73:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

examine:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -984, R2
  MOV.Q        RQ10, (R2, 440)
  MOV.Q        RQ11, (R2, 432)
  ADD          RQ12, 0, RQ23
  MOV.Q        RQ13, (R2, 416)
  MOV.L        RD14, (R2, 412)
  MOV.Q        RQ15, (R2, 400)
  ADD          R2, 448, RQ6
  MOV.Q        RQ6, (R2, 288)
// pdpc201/stdio.c:1578   
  MOV.L        RD0, (R2, 396)
// pdpc201/stdio.c:1580   
  MOV.L        RD0, (R2, 392)
// pdpc201/stdio.c:1581   
  MOV.L        RD0, (R2, 388)
// pdpc201/stdio.c:1582   
  MOV.L        RD0, (R2, 384)
// pdpc201/stdio.c:1583   
  MOV.L        RD0, (R2, 380)
// pdpc201/stdio.c:1584   
  MOV.L        RD0, (R2, 376)
// pdpc201/stdio.c:1585   
  MOV.L        RD0, (R2, 372)
// pdpc201/stdio.c:1586   
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 368)
// pdpc201/stdio.c:1587   
  MOV.L        RD0, (R2, 364)
// pdpc201/stdio.c:1588   
  MOV.L        RD0, (R2, 360)
// pdpc201/stdio.c:1589   
  MOV.L        RD0, (R2, 356)
// pdpc201/stdio.c:1590   
  MOV.L        RD0, (R2, 352)
// pdpc201/stdio.c:1591   
  MOV.L        RD0, (R2, 348)
// pdpc201/stdio.c:1609   
// pdpc201/stdio.c:1637   
  MOV.Q        (R2, 440), RQ26
  MOV.Q        (RQ26, 0), RQ21
// pdpc201/stdio.c:1639   
  MOV.L        RD0, (R2, 344)
// pdpc201/stdio.c:1640   
  BSR          .L008003CD, R0

.L008003CE:
// pdpc201/stdio.c:1641   
  MOV.B        (RQ21, 0), RQ18
  BREQ.Q       45, RQ18, .L008003CF
  BREQ.Q       43, RQ18, .L008003D0
  BREQ.Q       32, RQ18, .L008003D1
  BREQ.Q       35, RQ18, .L008003D2
  BREQ.Q       48, RQ18, .L008003D3
  BREQ.Q       42, RQ18, .L008003D4
  BSR          .L008003D5, R0

.L008003CF:
// pdpc201/stdio.c:1644   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 392)
// pdpc201/stdio.c:1645   
  BSR          .L008003D6, R0

.L008003D0:
// pdpc201/stdio.c:1646   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 388)
// pdpc201/stdio.c:1647   
  BSR          .L008003D6, R0

.L008003D1:
// pdpc201/stdio.c:1648   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 384)
// pdpc201/stdio.c:1649   
  BSR          .L008003D6, R0

.L008003D2:
// pdpc201/stdio.c:1650   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 380)
// pdpc201/stdio.c:1651   
  BSR          .L008003D6, R0

.L008003D3:
// pdpc201/stdio.c:1652   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 376)
// pdpc201/stdio.c:1653   
  BSR          .L008003D6, R0

.L008003D4:
// pdpc201/stdio.c:1654   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ18
  ADD          RQ18, 0, RD25
// pdpc201/stdio.c:1655   
  MOV.L        RD25, (R2, 372)
  BRGE.L       R0, RD25, .L008003D7
// pdpc201/stdio.c:1656   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 392)
// pdpc201/stdio.c:1658   
  MOV.L        (R2, 372), RD26
  SUBS.L       R0, RD26, RD26
  MOV.L        RD26, (R2, 372)

.L008003D7:
// pdpc201/stdio.c:1659   
  BSR          .L008003D6, R0

.L008003D5:
// pdpc201/stdio.c:1661   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 344)
// pdpc201/stdio.c:1662   

.L008003D6:
// pdpc201/stdio.c:1663   
  MOV.L        (R2, 344), RD27
  BRNE.L       R0, RD27, .L008003D8
// pdpc201/stdio.c:1665   
  ADD          RQ21, 1, RQ21
  BSR          .L008003D9, R0

.L008003D8:
  MOV.L        (R2, 384), RD27
  BREQ.L       R0, RD27, .L008003DA
  MOV.L        (R2, 388), RD27
  BREQ.L       R0, RD27, .L008003DA

.L008003DB:
// pdpc201/stdio.c:1671   
  MOV.L        RD0, (R2, 384)

.L008003DA:
  MOV.L        (R2, 392), RD27
  BREQ.L       R0, RD27, .L008003DC
// pdpc201/stdio.c:1675   
  MOV.L        RD0, (R2, 376)

.L008003DC:

.L008003D9:

.L008003CD:
  MOV.L        (R2, 344), RD27
  BREQ.L       R0, RD27, .L008003CE

.L008003DD:
// pdpc201/stdio.c:1682   
  MOV.B        (RQ21, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isdigit, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L008003DE
// pdpc201/stdio.c:1683   
  BSR          .L008003DF, R0

.L008003E0:
// pdpc201/stdio.c:1685   
  MOV.L        (R2, 372), RD27
  ADD          R0, 10, R5
  MULS.L       RD27, R5, RQ8
  MOV.B        (RQ21, 0), RQ18
  ADDS.L       RQ18, -48, RQ22
  ADDS.L       RQ8, RQ22, RD27
  MOV.L        RD27, (R2, 372)
// pdpc201/stdio.c:1687   
  ADD          RQ21, 1, RQ21

.L008003DF:
  MOV.B        (RQ21, 0), RQ18
  AND          RQ18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isdigit, R1
  ADD          RQ10, 0, RQ22
  BRNE.L       R0, RQ22, .L008003E0

.L008003E1:

.L008003DE:
// pdpc201/stdio.c:1692   
  MOV.B        (RQ21, 0), RQ18
  BRNE.Q       46, RQ18, .L008003E2
// pdpc201/stdio.c:1693   
  ADD          RQ21, 1, RQ21
  MOV.B        (RQ21, 0), RQ8
  BRNE.Q       42, RQ8, .L008003E3
// pdpc201/stdio.c:1696   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_i, R1
  ADDS.L       RD10, 0, RQ8
  MOV.L        RD8, (R2, 368)
// pdpc201/stdio.c:1698   
  ADD          RQ21, 1, RQ21
  BSR          .L008003E4, R0

.L008003E3:
// pdpc201/stdio.c:1701   
  MOV.L        RD0, (R2, 368)
// pdpc201/stdio.c:1703   
  BSR          .L008003E5, R0

.L008003E6:
// pdpc201/stdio.c:1704   
  MOV.L        (R2, 368), RD27
  ADD          R0, 10, R5
  MULS.L       RD27, R5, RQ22
  MOV.B        (RQ21, 0), RQ18
  ADDS.L       RQ18, -48, RQ8
  ADDS.L       RQ22, RQ8, RD27
  MOV.L        RD27, (R2, 368)
// pdpc201/stdio.c:1706   
  ADD          RQ21, 1, RQ21

.L008003E5:
  MOV.B        (RQ21, 0), RQ22
  AND          RQ22, 255, RQ18
  ADD          RQ18, 0, RD10
  BSR          isdigit, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008003E6

.L008003E7:

.L008003E4:

.L008003E2:
// pdpc201/stdio.c:1712   
  MOV.B        (RQ21, 0), RQ22
  BREQ.Q       104, RQ22, .L008003E8
  MOV.B        (RQ21, 0), RQ18
  BRNE.Q       108, RQ18, .L008003E9
// pdpc201/stdio.c:1720   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 360)
  MOV.B        (RQ21, 1), RQ8
  BRNE.Q       108, RQ8, .L008003EA
// pdpc201/stdio.c:1723   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 356)
// pdpc201/stdio.c:1725   
  ADD          RQ21, 1, RQ21

.L008003EA:
  BSR          .L008003EB, R0

.L008003E9:
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       116, RQ22, .L008003EC
// pdpc201/stdio.c:1729   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 360)
  BSR          .L008003ED, R0

.L008003EC:
  MOV.B        (RQ21, 0), RQ18
  BRNE.Q       76, RQ18, .L008003EE
// pdpc201/stdio.c:1736   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 352)
  MOV.B        (RQ21, 1), RQ8
  BRNE.Q       76, RQ8, .L008003EF
// pdpc201/stdio.c:1738   
  ADD          RQ21, 1, RQ21

.L008003EF:
  BSR          .L008003F0, R0

.L008003EE:
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       106, RQ22, .L008003F1
// pdpc201/stdio.c:1743   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 352)
  BSR          .L008003F2, R0

.L008003F1:
  MOV.B        (RQ21, 0), RQ18
  BRNE.Q       73, RQ18, .L008003F3
  MOV.B        (RQ21, 1), RQ8
  BRLT.L       48, RQ8, .L008003F3

.L008003F4:
  MOV.B        (RQ21, 1), RQ22
  BRGT.L       57, RQ22, .L008003F3

.L008003F5:
// pdpc201/stdio.c:1749   
  ADD          RQ21, 1, RQ21
// pdpc201/stdio.c:1750   
  MOV.L        RD0, (R2, 244)
// pdpc201/stdio.c:1751   
  BSR          .L008003F6, R0

.L008003F7:
// pdpc201/stdio.c:1752   
  MOV.L        (R2, 244), RD27
  ADD          R0, 10, R5
  MULS.L       RD27, R5, RQ18
  MOV.B        (RQ21, 0), RQ8
  ADD          RQ21, 1, RQ21
  ADDS.L       RQ8, -48, RQ22
  ADDS.L       RQ18, RQ22, RD27
  MOV.L        RD27, (R2, 244)

.L008003F6:
  MOV.B        (RQ21, 0), RQ18
  BRLT.L       48, RQ18, .L008003F8
  MOV.B        (RQ21, 0), RQ8
  BRGT.L       57, RQ8, .L008003F8
  BSR          .L008003F7, R0

.L008003F8:

.L008003F9:
// pdpc201/stdio.c:1753   
  ADD          RQ21, -1, RQ21
  MOV.L        (R2, 244), RD27
  ADD          R0, 32, R5
  CMPGT.Q      RD27, R5, RQ22
  ADD          R0, 64, R5
  CMPLE.Q      RD27, R5, RQ18
  BTST.L       RQ18, RQ22, .L008003FA
// pdpc201/stdio.c:1756   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 356)
  BSR          .L008003FB, R0

.L008003FA:
  MOV.L        (R2, 244), RD27
  ADD          R0, 64, R5
  CMPGT.Q      RD27, R5, RQ8
  ADD          R0, 128, R5
  CMPLE.Q      RD27, R5, RQ22
  BTST.L       RQ22, RQ8, .L008003FC
// pdpc201/stdio.c:1758   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 352)

.L008003FC:

.L008003FB:
  BSR          .L008003FD, R0

.L008003F3:
// pdpc201/stdio.c:1761   
  ADD          RQ21, -1, RQ21

.L008003FD:

.L008003F2:

.L008003F0:

.L008003ED:

.L008003EB:

.L008003E8:
// pdpc201/stdio.c:1763   
  ADD          RQ21, 1, RQ21
// pdpc201/stdio.c:1767   
  MOV.B        (RQ21, 0), RD27
  MOV.L        RD27, (R2, 348)
// pdpc201/stdio.c:1769   
  MOV          .L00C02F7B, RQ10
  ADD          RD27, 0, RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ20
  BREQ.Q       RQ0, RQ20, .L008003FE
  MOV.L        (R2, 348), RD27
  BREQ.L       R0, RD27, .L008003FE

.L008003FF:
  MOV.L        (R2, 368), RD27
  BRGE.L       R0, RD27, .L00800400
// pdpc201/stdio.c:1772   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 368)

.L00800400:
// pdpc201/stdio.c:1776   
  MOV.L        RD0, (R2, 264)
  MOV.L        (R2, 348), RD27
  ADD          R0, 117, R5
  CMPEQ.Q      RD27, R5, RQ18
  ADD          R0, 112, R5
  CMPEQ.Q      RD27, R5, RQ8
  OR           RQ18, RQ8, RQ22
  ADD          R0, 120, R5
  CMPEQ.Q      RD27, R5, RQ18
  OR           RQ22, RQ18, RQ8
  ADD          R0, 88, R5
  CMPEQ.Q      RD27, R5, RQ22
  OR           RQ8, RQ22, RQ18
  BREQ.L       R0, RQ18, .L00800401
// pdpc201/stdio.c:1781   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 264)

.L00800401:
  MOV.L        (R2, 360), RD27
  BREQ.L       R0, RD27, .L00800402
// pdpc201/stdio.c:1817   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ25
  ADD          RQ25, 0, RQ24
  MOV.Q        RQ24, (R2, 336)
  MOV.L        (R2, 264), RD19
  BREQ.L       R0, RD19, .L00800403
// pdpc201/stdio.c:1824   

.L00800403:
  BSR          .L00800404, R0

.L00800402:
  MOV.L        (R2, 364), RD27
  BREQ.L       R0, RD27, .L00800405
// pdpc201/stdio.c:1829   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_i, R1
  ADDS.L       RD10, 0, RQ8
  SHAD.Q       RQ8, 48, RD25
  SHAR.Q       RD25, 48, RD25
  MOV.L        RD25, (R2, 316)
  MOV.L        (R2, 264), RD24
  BREQ.L       R0, RD24, .L00800406
// pdpc201/stdio.c:1835   
  MOV.L        (R2, 316), RD27
  AND          RD27, 0x0000FFFF, RQ22
  AND          RQ22, 0x0000FFFF, RQ26
  MOV.Q        RQ26, (R2, 336)
  BSR          .L00800407, R0

.L00800406:
// pdpc201/stdio.c:1837   
  MOV.L        (R2, 316), RD27
  SHAD.Q       RD27, 48, RQ26
  SHAR.Q       RQ26, 48, RQ26
  MOV.Q        RQ26, (R2, 336)

.L00800407:
  BSR          .L00800408, R0

.L00800405:
// pdpc201/stdio.c:1840   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_i, R1
  ADDS.L       RD10, 0, RQ8
  MOV.L        RD8, (R2, 312)
  MOV.L        (R2, 264), RD25
  BREQ.L       R0, RD25, .L00800409
// pdpc201/stdio.c:1847   
  MOV.L        (R2, 312), RD27
  ADDU.L       RD27, R0, RQ22
  ADDU.L       RQ22, R0, RQ26
  MOV.Q        RQ26, (R2, 336)
  BSR          .L0080040A, R0

.L00800409:
// pdpc201/stdio.c:1849   
  MOV.L        (R2, 312), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        RQ26, (R2, 336)

.L0080040A:

.L00800408:

.L00800404:
// pdpc201/stdio.c:1852   
  MOV.Q        (R2, 336), RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 328)
  ADD          R0, 0, RQ25
  CMPGT.Q      RQ25, RQ26, RQ18
  MOV.L        (R2, 264), RD24
  CMPEQ.Q      RD24, R0, RQ8
  BTST.L       RQ8, RQ18, .L0080040B
// pdpc201/stdio.c:1855   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 268)
// pdpc201/stdio.c:1857   
  MOV.Q        (R2, 336), RQ26
  SUB          R0, RQ26, RQ25
  MOV.Q        RQ25, (R2, 328)
  BSR          .L0080040C, R0

.L0080040B:
// pdpc201/stdio.c:1860   
  MOV.L        RD0, (R2, 268)

.L0080040C:
  MOV.L        (R2, 348), RD27
  ADD          R0, 88, R5
  CMPEQ.Q      RD27, R5, RQ22
  ADD          R0, 120, R5
  CMPEQ.Q      RD27, R5, RQ18
  OR           RQ22, RQ18, RQ8
  ADD          R0, 112, R5
  CMPEQ.Q      RD27, R5, RQ22
  OR           RQ8, RQ22, RQ18
  BREQ.L       R0, RQ18, .L0080040D
// pdpc201/stdio.c:1870   
  ADD          R0, 16, RD27
  MOV.L        RD27, (R2, 276)
  BSR          .L0080040E, R0

.L0080040D:
  MOV.L        (R2, 348), RD27
  BRNE.Q       111, RD27, .L0080040F
// pdpc201/stdio.c:1874   
  ADD          R0, 8, RD27
  MOV.L        RD27, (R2, 276)
  BSR          .L00800410, R0

.L0080040F:
// pdpc201/stdio.c:1878   
  ADD          R0, 10, RD27
  MOV.L        RD27, (R2, 276)

.L00800410:

.L0080040E:
  MOV.L        (R2, 348), RD27
  BRNE.Q       112, RD27, .L00800411
// pdpc201/stdio.c:1886   
  ADD          R0, 8, RD27
  MOV.L        RD27, (R2, 368)

.L00800411:
// pdpc201/stdio.c:1893   
  ADD          R0, 0, RD9
// pdpc201/stdio.c:1895   
  ADD          R0, 64, RD27
  MOV.L        RD27, (R2, 240)
// pdpc201/stdio.c:1897   
  BSR          .L00800412, R0

.L00800413:
// pdpc201/stdio.c:1898   
  MOV.L        (R2, 276), RD27
  BRNE.Q       16, RD27, .L00800414
// pdpc201/stdio.c:1900   
  MOV.Q        (R2, 328), RQ27
  AND          RQ27, 15, RQ26
  ADDS.L       RQ26, 0, RD25
  MOV.L        RD25, (R2, 280)
// pdpc201/stdio.c:1902   
  SHLR.Q       RQ27, 4, RQ27
  MOV.Q        RQ27, (R2, 328)
  BSR          .L00800415, R0

.L00800414:
// pdpc201/stdio.c:1904   
  MOV.L        (R2, 276), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 328), RQ25
  MODU.Q       RQ25, RQ26, RQ24
  ADDS.L       RQ24, 0, RD19
  MOV.L        RD19, (R2, 280)
// pdpc201/stdio.c:1906   
  ADDS.L       RD27, 0, RQ24
  DIVU.Q       RQ25, RQ24, RQ25
  MOV.Q        RQ25, (R2, 328)

.L00800415:
// pdpc201/stdio.c:1909   
  MOV.L        (R2, 280), RD27
  BRGE.L       10, RD27, .L00800416
// pdpc201/stdio.c:1910   
  MOV.L        (R2, 280), RD27
  ADDS.L       RD27, 48, RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          R2, 448, RQ26
  MOV.B        RQ8, (RQ26, RD9)
  BSR          .L00800417, R0

.L00800416:
  MOV.L        (R2, 348), RD27
  ADD          R0, 88, R5
  CMPEQ.Q      RD27, R5, RQ22
  ADD          R0, 112, R5
  CMPEQ.Q      RD27, R5, RQ18
  OR           RQ22, RQ18, RQ8
  BREQ.L       R0, RQ8, .L00800418
// pdpc201/stdio.c:1916   
  MOV.L        (R2, 280), RD27
  ADDS.L       RD27, -10, RQ22
  ADDS.L       RQ22, 65, RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          R2, 448, RQ26
  MOV.B        RQ8, (RQ26, RD9)
  BSR          .L00800419, R0

.L00800418:
// pdpc201/stdio.c:1920   
  MOV.L        (R2, 280), RD27
  ADDS.L       RD27, -10, RQ22
  ADDS.L       RQ22, 97, RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          R2, 448, RQ26
  MOV.B        RQ8, (RQ26, RD9)

.L00800419:

.L00800417:
// pdpc201/stdio.c:1923   
  ADDS.L       RD9, 1, RD9

.L00800412:
  MOV.Q        (R2, 328), RQ27
  BREQ.Q       R0, RQ27, .L0080041A
  MOV.L        (R2, 240), RD27
  ADD          RD27, 0, RQ22
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 240)
  BRLE.L       R0, RQ22, .L0080041A
  BSR          .L00800413, R0

.L0080041A:

.L0080041B:
// pdpc201/stdio.c:1943   
  BSR          .L0080041C, R0

.L0080041D:
// pdpc201/stdio.c:1944   
  ADD          R2, 448, RQ27
  ADD          R0, 48, RD26
  MOV.B        RD26, (RQ27, RD9)
// pdpc201/stdio.c:1946   
  ADDS.L       RD9, 1, RD9

.L0080041C:
  MOV.L        (R2, 368), RD27
  BRLT.L       RD27, RD9, .L0080041D

.L0080041E:
  MOV.L        (R2, 268), RD27
  BREQ.L       R0, RD27, .L0080041F
// pdpc201/stdio.c:1949   
  ADD          RD9, 0, RQ18
  ADDS.L       RD9, 1, RD9
  ADD          R2, 448, RQ27
  ADD          R0, 45, RD26
  MOV.B        RD26, (RQ27, RQ18)
  BSR          .L00800420, R0

.L0080041F:
  MOV.L        (R2, 388), RD27
  BREQ.L       R0, RD27, .L00800421
// pdpc201/stdio.c:1953   
  ADDS.L       RD9, 0, RQ8
  ADDS.L       RD9, 1, RD9
  ADD          R2, 448, RQ27
  ADD          R0, 43, RD26
  MOV.B        RD26, (RQ27, RQ8)

.L00800421:

.L00800420:
  MOV.L        (R2, 376), RD27
  BREQ.L       R0, RD27, .L00800422
// pdpc201/stdio.c:1957   
  ADD          R0, 48, RD27
  MOV.L        RD27, (R2, 272)
  BSR          .L00800423, R0

.L00800422:
// pdpc201/stdio.c:1961   
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 272)

.L00800423:
// pdpc201/stdio.c:1963   
  MOV.L        RD9, (R2, 284)
  MOV.L        (R2, 392), RD27
  BRNE.L       R0, RD27, .L00800424
// pdpc201/stdio.c:1966   
  BSR          .L00800425, R0

.L00800426:
// pdpc201/stdio.c:1968   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800427
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800428
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ20, 0)
  BSR          .L00800429, R0

.L00800428:

.L00800429:
  BSR          .L0080042A, R0

.L00800427:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L0080042A:
// pdpc201/stdio.c:1970   
  MOV.L        (R2, 396), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 396)
// pdpc201/stdio.c:1971   
  MOV.L        (R2, 284), RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, (R2, 284)

.L00800425:
  MOV.L        (R2, 284), RD27
  MOV.L        (R2, 372), RD26
  BRLT.L       RD26, RD27, .L00800426

.L0080042B:

.L00800424:
  MOV.L        (R2, 380), RD27
  BREQ.L       R0, RD27, .L0080042C
  MOV.L        (R2, 348), RD27
  AND          RD27, 255, RQ18
  ADD          RQ18, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.Q       88, RQ8, .L0080042C

.L0080042D:
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L0080042E
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L0080042F
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  ADD          R0, 48, RD27
  MOV.B        RD27, (RQ20, 0)
  BSR          .L00800430, R0

.L0080042F:

.L00800430:
  BSR          .L00800431, R0

.L0080042E:
  ADD          R0, 48, RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800431:
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800432
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800433
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  ADD          R0, 120, RD27
  MOV.B        RD27, (RQ20, 0)
  BSR          .L00800434, R0

.L00800433:

.L00800434:
  BSR          .L00800435, R0

.L00800432:
  ADD          R0, 120, RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800435:
// pdpc201/stdio.c:1978   
  MOV.L        (R2, 396), RD27
  ADDS.L       RD27, 2, RD27
  MOV.L        RD27, (R2, 396)

.L0080042C:
// pdpc201/stdio.c:1979   
  ADDS.L       RD9, -1, RD9
// pdpc201/stdio.c:1981   
  BSR          .L00800436, R0

.L00800437:
// pdpc201/stdio.c:1982   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800438
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800439
  ADD          R2, 448, RQ27
  MOV.B        (RQ27, RD9), RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ8, (RQ20, 0)
  BSR          .L0080043A, R0

.L00800439:

.L0080043A:
  BSR          .L0080043B, R0

.L00800438:
  ADD          R2, 448, RQ27
  MOV.B        (RQ27, RD9), RQ18
  ADD          RQ18, 0, RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L0080043B:
// pdpc201/stdio.c:1984   
  MOV.L        (R2, 396), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 396)
// pdpc201/stdio.c:1985   
  ADDS.L       RD9, -1, RD9

.L00800436:
  BRGE.L       R0, RD9, .L00800437

.L0080043C:
  MOV.L        (R2, 392), RD27
  BREQ.L       R0, RD27, .L0080043D
// pdpc201/stdio.c:1988   
  BSR          .L0080043E, R0

.L0080043F:
// pdpc201/stdio.c:1990   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800440
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800441
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ8, (RQ20, 0)
  BSR          .L00800442, R0

.L00800441:

.L00800442:
  BSR          .L00800443, R0

.L00800440:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800443:
// pdpc201/stdio.c:1992   
  MOV.L        (R2, 396), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 396)
// pdpc201/stdio.c:1993   
  MOV.L        (R2, 284), RD26
  ADDS.L       RD26, 1, RD26
  MOV.L        RD26, (R2, 284)

.L0080043E:
  MOV.L        (R2, 284), RD27
  MOV.L        (R2, 372), RD26
  BRLT.L       RD26, RD27, .L0080043F

.L00800444:

.L0080043D:
  BSR          .L00800445, R0

.L008003FE:
  MOV          .L00C02F7C, RQ10
  MOV.L        (R2, 348), RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ20
  BREQ.Q       RQ0, RQ20, .L00800446
  MOV.L        (R2, 348), RD27
  BREQ.L       R0, RD27, .L00800446

.L00800447:
  MOV.L        (R2, 368), RD27
  BRGE.L       R0, RD27, .L00800448
// pdpc201/stdio.c:2000   
  ADD          R0, 6, RD27
  MOV.L        RD27, (R2, 368)

.L00800448:
  MOV.L        (R2, 360), RD27
  BRNE.L       R0, RD27, .L00800449
  MOV.L        (R2, 352), RD27
  BRNE.L       R0, RD27, .L00800449
  BSR          .L0080044A, R0

.L00800449:
// pdpc201/stdio.c:2004   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_x, R1
  ADD          RQ10, 0, RQ24
  ADD          RQ11, 0, RQ25
  ADD          RQ24, 0, RQ10
  ADD          RQ25, 0, RQ11
  BSR          __xlf_todbl, R1
  MOV.Q        RQ10, (R2, 304)
  BSR          .L0080044B, R0

.L0080044A:
// pdpc201/stdio.c:2007   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ19
  ADD          RQ19, 0, RQ24
  MOV.Q        RQ24, (R2, 304)

.L0080044B:
// pdpc201/stdio.c:2009   
  MOV.L        (R2, 348), RD27
  SHAD.Q       RD27, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  MOV.L        (R2, 372), RD26
  ADDS.L       RD26, 0, RQ12
  MOV.Q        (R2, 304), RQ10
  ADD          RQ18, 0, RD11
  MOV.L        (R2, 368), RD13
  ADD          R2, 448, RQ14
  BSR          dblcvt, R1
// pdpc201/stdio.c:2011   
  ADD          R2, 448, RQ10
  BSR          strlen, R1
  MOV.Q        RQ10, (R2, 248)
  MOV.Q        (R2, 432), RQ25
  BRNE.Q       RQ0, RQ25, .L0080044C
// pdpc201/stdio.c:2013   
  ADD          RQ23, 0, RQ10
  ADD          R2, 448, RQ11
  MOV.Q        (R2, 248), RQ12
  BSR          memcpy, R1
// pdpc201/stdio.c:2015   
  MOV.Q        (R2, 248), RQ27
  ADD          RQ23, RQ27, RQ23
  BSR          .L0080044D, R0

.L0080044C:
// pdpc201/stdio.c:2018   
  ADD          R2, 448, RQ10
  MOV.Q        (R2, 432), RQ11
  BSR          fputs, R1

.L0080044D:
// pdpc201/stdio.c:2020   
  MOV.L        (R2, 396), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 248), RQ25
  ADD          RQ26, RQ25, RQ24
  ADDS.L       RQ24, 0, RD27
  MOV.L        RD27, (R2, 396)
  BSR          .L0080044E, R0

.L00800446:
  MOV.L        (R2, 348), RD27
  BRNE.Q       115, RD27, .L0080044F
  MOV.L        (R2, 368), RD27
  BRGE.L       R0, RD27, .L00800450
// pdpc201/stdio.c:2026   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 368)

.L00800450:
// pdpc201/stdio.c:2028   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ20
  MOV.Q        RQ20, (R2, 296)
// pdpc201/stdio.c:2030   
  ADD          R0, 32, RD25
  MOV.L        RD25, (R2, 272)
  MOV.L        (R2, 368), RD24
  BRLE.L       1, RD24, .L00800451
// pdpc201/stdio.c:2035   
  MOV.L        (R2, 368), RD27
  ADDS.L       RD27, 0, RQ12
  MOV.Q        (R2, 296), RQ10
  ADD          R0, 0, RD11
  BSR          memchr, R1
  ADD          RQ10, 0, RQ26
// pdpc201/stdio.c:2036   
  MOV.Q        RQ26, (R2, 232)
  BREQ.Q       RQ0, RQ26, .L00800452
// pdpc201/stdio.c:2037   
  MOV.Q        (R2, 232), RQ27
  MOV.Q        (R2, 296), RQ26
  SUB          RQ27, RQ26, RQ25
  ADDS.L       RQ25, 0, RD24
  MOV.L        RD24, (R2, 260)
  BSR          .L00800453, R0

.L00800452:
// pdpc201/stdio.c:2041   
  MOV.L        (R2, 368), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 260)

.L00800453:
  BSR          .L00800454, R0

.L00800451:
// pdpc201/stdio.c:2046   
  MOV.Q        (R2, 296), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RD26
  MOV.L        RD26, (R2, 260)

.L00800454:
  MOV.L        (R2, 392), RD27
  BRNE.L       R0, RD27, .L00800455
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 372), RD26
  BRGE.L       RD26, RD27, .L00800456
// pdpc201/stdio.c:2052   
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  MOV.L        (R2, 396), RD25
  ADDS.L       RD25, RQ18, RD25
  MOV.L        RD25, (R2, 396)
// pdpc201/stdio.c:2054   
  ADD          R0, 0, RD9
  SUBS.L       RD27, RD26, RQ8
  BRGE.L       RQ8, RD9, .L00800457

.L00800458:
// pdpc201/stdio.c:2055   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800459
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L0080045A
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ20, 0)
  BSR          .L0080045B, R0

.L0080045A:

.L0080045B:
  BSR          .L0080045C, R0

.L00800459:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L0080045C:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  BRLT.L       RQ18, RD9, .L00800458

.L00800457:

.L00800456:

.L00800455:
// pdpc201/stdio.c:2059   
  ADD          R0, 0, RD9
  MOV.L        (R2, 260), RD27
  BRGE.L       RD27, RD9, .L0080045D

.L0080045E:
// pdpc201/stdio.c:2061   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L0080045F
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800460
  MOV.Q        (R2, 296), RQ27
  MOV.B        (RQ27, RD9), RQ8
  SHAD.Q       RQ8, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ20, 0)
  BSR          .L00800461, R0

.L00800460:

.L00800461:
  BSR          .L00800462, R0

.L0080045F:
  MOV.Q        (R2, 296), RQ27
  MOV.B        (RQ27, RD9), RQ18
  ADD          RQ18, 0, RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800462:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 260), RD27
  BRLT.L       RD27, RD9, .L0080045E

.L0080045D:
// pdpc201/stdio.c:2063   
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 396), RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 396)
  MOV.L        (R2, 392), RD25
  BREQ.L       R0, RD25, .L00800463
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 372), RD26
  BRGE.L       RD26, RD27, .L00800464
// pdpc201/stdio.c:2068   
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ8
  MOV.L        (R2, 396), RD25
  ADDS.L       RD25, RQ8, RD25
  MOV.L        RD25, (R2, 396)
// pdpc201/stdio.c:2070   
  ADD          R0, 0, RD9
  SUBS.L       RD27, RD26, RQ22
  BRGE.L       RQ22, RD9, .L00800465

.L00800466:
// pdpc201/stdio.c:2071   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800467
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800468
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ18, (RQ20, 0)
  BSR          .L00800469, R0

.L00800468:

.L00800469:
  BSR          .L0080046A, R0

.L00800467:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L0080046A:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  BRLT.L       RQ18, RD9, .L00800466

.L00800465:

.L00800464:

.L00800463:
  BSR          .L0080046B, R0

.L0080044F:
  MOV.L        (R2, 348), RD27
  ADD          R0, 118, R5
  CMPEQ.Q      RD27, R5, RQ8
  ADD          R0, 86, R5
  CMPEQ.Q      RD27, R5, RQ22
  OR           RQ8, RQ22, RQ18
  BREQ.L       R0, RQ18, .L0080046C
  MOV.L        (R2, 368), RD27
  BRGE.L       R0, RD27, .L0080046D
// pdpc201/stdio.c:2081   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 368)

.L0080046D:
// pdpc201/stdio.c:2085   
  MOV.Q        (R2, 416), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 208)
  MOV.Q        (R2, 208), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ25
  ADD          RQ25, 0, RQ24
  MOV.Q        RQ24, (R2, 320)
// pdpc201/stdio.c:2086   
  ADD          RQ24, 0, RQ10
  BSR          __lva_conv_tostring, R1
  MOV.Q        RQ10, (R2, 296)
// pdpc201/stdio.c:2088   
  ADD          R0, 32, RD19
  MOV.L        RD19, (R2, 272)
  MOV.L        (R2, 368), RD24
  BRLE.L       1, RD24, .L0080046E
// pdpc201/stdio.c:2093   
  MOV.L        (R2, 368), RD27
  ADDS.L       RD27, 0, RQ12
  MOV.Q        (R2, 296), RQ10
  ADD          R0, 0, RD11
  BSR          memchr, R1
  ADD          RQ10, 0, RQ26
// pdpc201/stdio.c:2094   
  MOV.Q        RQ26, (R2, 224)
  BREQ.Q       RQ0, RQ26, .L0080046F
// pdpc201/stdio.c:2095   
  MOV.Q        (R2, 224), RQ27
  MOV.Q        (R2, 296), RQ26
  SUB          RQ27, RQ26, RQ25
  ADDS.L       RQ25, 0, RD24
  MOV.L        RD24, (R2, 260)
  BSR          .L00800470, R0

.L0080046F:
// pdpc201/stdio.c:2099   
  MOV.L        (R2, 368), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 260)

.L00800470:
  BSR          .L00800471, R0

.L0080046E:
// pdpc201/stdio.c:2104   
  MOV.Q        (R2, 296), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RQ27, 0, RD26
  MOV.L        RD26, (R2, 260)

.L00800471:
  MOV.L        (R2, 392), RD27
  BRNE.L       R0, RD27, .L00800472
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 372), RD26
  BRGE.L       RD26, RD27, .L00800473
// pdpc201/stdio.c:2110   
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  MOV.L        (R2, 396), RD25
  ADDS.L       RD25, RQ18, RD25
  MOV.L        RD25, (R2, 396)
// pdpc201/stdio.c:2112   
  ADD          R0, 0, RD9
  SUBS.L       RD27, RD26, RQ8
  BRGE.L       RQ8, RD9, .L00800474

.L00800475:
// pdpc201/stdio.c:2113   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800476
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800477
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ20, 0)
  BSR          .L00800478, R0

.L00800477:

.L00800478:
  BSR          .L00800479, R0

.L00800476:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800479:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  BRLT.L       RQ18, RD9, .L00800475

.L00800474:

.L00800473:

.L00800472:
// pdpc201/stdio.c:2117   
  ADD          R0, 0, RD9
  MOV.L        (R2, 260), RD27
  BRGE.L       RD27, RD9, .L0080047A

.L0080047B:
// pdpc201/stdio.c:2119   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L0080047C
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L0080047D
  MOV.Q        (R2, 296), RQ27
  MOV.B        (RQ27, RD9), RQ8
  SHAD.Q       RQ8, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ22, (RQ20, 0)
  BSR          .L0080047E, R0

.L0080047D:

.L0080047E:
  BSR          .L0080047F, R0

.L0080047C:
  MOV.Q        (R2, 296), RQ27
  MOV.B        (RQ27, RD9), RQ18
  ADD          RQ18, 0, RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L0080047F:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 260), RD27
  BRLT.L       RD27, RD9, .L0080047B

.L0080047A:
// pdpc201/stdio.c:2121   
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 396), RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 396)
  MOV.L        (R2, 392), RD25
  BREQ.L       R0, RD25, .L00800480
  MOV.L        (R2, 260), RD27
  MOV.L        (R2, 372), RD26
  BRGE.L       RD26, RD27, .L00800481
// pdpc201/stdio.c:2126   
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ8
  MOV.L        (R2, 396), RD25
  ADDS.L       RD25, RQ8, RD25
  MOV.L        RD25, (R2, 396)
// pdpc201/stdio.c:2128   
  ADD          R0, 0, RD9
  SUBS.L       RD27, RD26, RQ22
  BRGE.L       RQ22, RD9, .L00800482

.L00800483:
// pdpc201/stdio.c:2129   
  MOV.Q        (R2, 432), RQ27
  BRNE.Q       RQ0, RQ27, .L00800484
  MOV.Q        (R2, 400), RQ27
  BRGE.Q       RQ27, RQ23, .L00800485
  MOV.L        (R2, 272), RD27
  SHAD.Q       RD27, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ23, 0, RQ20
  ADD          RQ23, 1, RQ23
  MOV.B        RQ18, (RQ20, 0)
  BSR          .L00800486, R0

.L00800485:

.L00800486:
  BSR          .L00800487, R0

.L00800484:
  MOV.L        (R2, 272), RD10
  MOV.Q        (R2, 432), RQ11
  BSR          putc, R1

.L00800487:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 372), RD27
  MOV.L        (R2, 260), RD26
  SUBS.L       RD27, RD26, RQ18
  BRLT.L       RQ18, RD9, .L00800483

.L00800482:

.L00800481:

.L00800480:

.L0080046C:

.L0080046B:

.L0080044E:

.L00800445:
// pdpc201/stdio.c:2137   
  MOV.Q        (R2, 440), RQ27
  MOV.Q        RQ21, (RQ27, 0)
// pdpc201/stdio.c:2138   
  MOV.L        (R2, 396), RD10

.L00C02F7A:
  ADD          R2, 984, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

FindResponseFile:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -552, R2
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 120)
// d_main.c:916   for (i = 1;i < myargc;i++)
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 156)
  MOV.L        myargc, RD26
  BRGE.L       RD26, RD27, .L008013C5

.L008013C3:
// d_main.c:917   if (myargv[i][0] == '@')
  MOV.Q        myargv, RQ27
  MOV.L        (R2, 156), RD26
  MOV.Q        (RQ27, RD26), RQ21
  MOV.B        (RQ21, 0), RQ8
  BRNE.Q       64, RQ8, .L008013C6
// d_main.c:926   char	*moreargs[20];
// d_main.c:930   handle = fopen (&myargv[i][1],"rb");
  MOV.Q        myargv, RQ27
  MOV.L        (R2, 156), RD26
  MOV.Q        (RQ27, RD26), RQ21
  ADD          R0, 1, RD27
  ADD          RQ21, RD27, RQ9
  ADD          RQ9, 0, RQ10
  MOV          .L00C01607, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ25
// d_main.c:931   if (!handle)
  MOV.Q        RQ25, (R2, 144)
  BRNE.Q       R0, RQ25, .L008013C7
// d_main.c:932   {
  MOV          .L00C02F83, RQ10
  BSR          printf, R1
// d_main.c:934   exit(1);
  ADD          R0, 1, RD10
  BSR          exit, R1

.L008013C7:
// d_main.c:935   }
  MOV.Q        myargv, RQ27
  MOV.L        (R2, 156), RD26
  MOV.Q        (RQ27, RD26), RQ21
  ADD          R0, 1, RD27
  ADD          RQ21, RD27, RQ9
  MOV          .L00C02F84, RQ10
  ADD          RQ9, 0, RQ11
  BSR          printf, R1
// d_main.c:937   fseek (handle,0,SEEK_END);
  MOV.Q        (R2, 144), RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 2, RD12
  BSR          fseek, R1
// d_main.c:938   size = ftell(handle);
  MOV.Q        (R2, 144), RQ10
  BSR          ftell, R1
  ADD          RQ10, 0, RQ25
  ADDS.L       RQ25, 0, RD20
// d_main.c:939   fseek (handle,0,SEEK_SET);
  MOV.Q        (R2, 144), RQ10
  ADD          RQ0, 0, RQ11
  ADD          R0, 0, RD12
  BSR          fseek, R1
// d_main.c:940   file = malloc (size);
  ADDS.L       RD20, 0, RQ25
  ADD          RQ25, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 128)
// d_main.c:941   k = fread (file,size,1,handle);
  ADDS.L       RD20, 0, RQ11
  MOV.Q        (R2, 128), RQ10
  ADD          R0, 1, RQ12
  MOV.Q        (R2, 144), RQ13
  BSR          fread, R1
  ADD          RQ10, 0, RQ25
  ADDS.L       RQ25, 0, RD18
// d_main.c:942   fclose (handle);
  MOV.Q        (R2, 144), RQ10
  BSR          fclose, R1
// d_main.c:945   for (index = 0,k = i+1; k < myargc; k++)
  MOV.L        RD0, (R2, 140)
  ADDS.L       RD26, 1, RQ8
  ADD          RQ8, 0, RD18
  MOV.L        myargc, RD13
  BRGE.L       RD13, RD18, .L008013CA

.L008013C8:
// d_main.c:946   moreargs[index++] = myargv[k];
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  MOV.L        (R2, 140), RD27
  ADD          RD27, 0, RQ8
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 140)
  ADD          R2, 160, RQ26
  MOV.Q        RQ9, (RQ26, RQ8)
  ADDS.L       RD18, 1, RD18
  MOV.L        myargc, RD25
  BRLT.L       RD25, RD18, .L008013C8

.L008013CA:
// d_main.c:948   firstargv = myargv[0];
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.Q        RQ26, (R2, 112)
// d_main.c:949   myargv = malloc(sizeof(char *)*MAXARGVS);
  ADD          R0, 800, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, myargv
// d_main.c:950   memset(myargv,0,sizeof(char *)*MAXARGVS);
  MOV.Q        myargv, RQ27
  ADD          RQ27, 0, RQ10
  ADD          R0, 0, RQ11
  ADD          R0, 800, RQ12
  BSR          memset, R1
// d_main.c:951   myargv[0] = firstargv;
  MOV.Q        myargv, RQ27
  MOV.Q        RQ26, (RQ27, 0)
// d_main.c:953   infile = file;
  MOV.Q        (R2, 128), RQ23
// d_main.c:954   indexinfile = k = 0;
  ADD          RD0, 0, RD18
  ADD          R0, 0, RD22
// d_main.c:955   indexinfile++;  // SKIP PAST ARGV[0] (KEEP IT)
  ADDS.L       RD22, 1, RD22
// d_main.c:956   do

.L008013CB:
// d_main.c:957   {
  ADD          RQ23, RD18, RQ9
  ADD          RD22, 0, RQ8
  ADDS.L       RD22, 1, RD22
  MOV.Q        myargv, RQ27
  MOV.Q        RQ9, (RQ27, RQ8)
// d_main.c:959   while(k < size &&
  BSR          .L008013D0, R0

.L008013CE:
// d_main.c:961   k++;
  ADDS.L       RD18, 1, RD18

.L008013D0:
  BRGE.L       RD20, RD18, .L008013D1
  ADD          RQ23, RD18, RQ9
  MOV.B        (RQ9, 0), RQ8
  BRLT.L       33, RQ8, .L008013D1
  ADD          RQ23, RD18, RQ9
  MOV.B        (RQ9, 0), RQ8
  BRGT.L       122, RQ8, .L008013D1
  BSR          .L008013CE, R0

.L008013D1:

.L008013CF:
// d_main.c:962   *(infile+k) = 0;
  ADD          RQ23, RD18, RQ9
  MOV.B        RD0, (RQ9, 0)
// d_main.c:963   while(k < size &&
  BSR          .L008013D6, R0

.L008013D4:
// d_main.c:965   k++;
  ADDS.L       RD18, 1, RD18

.L008013D6:
  BRGE.L       RD20, RD18, .L008013D7
  ADD          RQ23, RD18, RQ21
  MOV.B        (RQ21, 0), RQ8
  BRLE.L       32, RQ8, .L008013D4
  ADD          RQ23, RD18, RQ9
  MOV.B        (RQ9, 0), RQ8
  BRGT.L       122, RQ8, .L008013D4

.L008013D7:

.L008013D5:
  BRLT.L       RD20, RD18, .L008013CB
// d_main.c:968   for (k = 0;k < index;k++)
  ADD          R0, 0, RD18
  MOV.L        (R2, 140), RD27
  BRGE.L       RD27, RD18, .L008013DC

.L008013DA:
// d_main.c:969   myargv[indexinfile++] = moreargs[k];
  ADD          R2, 160, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  ADD          RD22, 0, RQ8
  ADDS.L       RD22, 1, RD22
  MOV.Q        myargv, RQ26
  MOV.Q        RQ9, (RQ26, RQ8)
  ADDS.L       RD18, 1, RD18
  MOV.L        (R2, 140), RD26
  BRLT.L       RD26, RD18, .L008013DA

.L008013DC:
// d_main.c:970   myargc = indexinfile;
  MOV.L        RD22, myargc
// d_main.c:973   printf("%d command-line args:\n",myargc);
  MOV          .L00C02F85, RQ10
  MOV.L        myargc, RD11
  BSR          printf, R1
// d_main.c:974   for (k=1;k<myargc;k++)
  ADD          R0, 1, RD18
  MOV.L        myargc, RD27
  BRGE.L       RD27, RD18, .L008013DF

.L008013DD:
// d_main.c:975   printf("%s\n",myargv[k]);
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  MOV          .L00C0237A, RQ10
  ADD          RQ9, 0, RQ11
  BSR          printf, R1
  ADDS.L       RD18, 1, RD18
  MOV.L        myargc, RD27
  BRLT.L       RD27, RD18, .L008013DD

.L008013DF:
// d_main.c:977   break;
  BSR          .L008013C5, R0

.L008013C6:
  MOV.L        (R2, 156), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 156)
  MOV.L        myargc, RD26
  BRLT.L       RD26, RD27, .L008013C3

.L008013C5:

.L00C02F82:
  ADD          R2, 552, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

GetPackets:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// d_net.c:289   while ( HGetPacket() )
  BSR          .L00801451, R0

.L0080144F:
// d_net.c:290   {
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  LUI          0x00020000, RD27
  BTSTN.L      RD27, RQ18, .L00801451
// d_net.c:294   netconsole = netbuffer->player & ~PL_DRONE;
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 6), RQ18
  AND          RQ18, -129, RD21
// d_net.c:295   netnode = doomcom->remotenode;
  MOV.Q        doomcom, RQ26
  MOV.W        (RQ26, 12), RD8
// d_net.c:299   realstart = ExpandTics (netbuffer->starttic);				
  MOVU.B       (RQ27, 5), RQ18
  ADD          RQ18, 0, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RD22
// d_net.c:300   realend = (realstart+netbuffer->numtics);
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 7), RQ18
  ADDS.L       RD22, RQ18, RD20
// d_net.c:303   if (netbuffer->checksum & NCMD_EXIT)
  MOVU.L       (RQ27, 0), RQ18
  ADD          R0, 0x0000000080000000, RD27
  BTST.L       RD27, RQ18, .L00801452
  MOV          nodeingame, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BREQ.L       R0, RQ18, .L00801451
// d_net.c:307   nodeingame[netnode] = false;
  MOV          nodeingame, RQ27
  MOV.L        RD0, (RQ27, RD8)
// d_net.c:308   playeringame[netconsole] = false;
  MOV          playeringame, RQ27
  MOV.L        RD0, (RQ27, RD21)
// d_net.c:309   strcpy (exitmsg, "Player 1 left the game");
  MOV          exitmsg, RQ10
  MOV          .L00C02F8C, RQ11
  BSR          strcpy, R1
// d_net.c:310   exitmsg[7] += netconsole;
  MOV          exitmsg, RQ27
  MOV.B        (RQ27, 7), RQ18
  ADDS.L       RQ18, RD21, RQ9
  MOV.B        RQ9, (RQ27, 7)
// d_net.c:311   players[consoleplayer].message = exitmsg;
  MOV          players, RQ26
  MOV.L        consoleplayer, RD25
  ADD          R0, 320, R5
  MUL.L        RD25, R5, RQ24
  ADD          RQ26, RQ24, RQ24
  MOV.Q        RQ27, (RQ24, 224)
  MOV.L        demorecording, RD27
  BREQ.L       R0, RD27, .L00801453
// d_net.c:313   G_CheckDemoStatus ();
  BSR          G_CheckDemoStatus, R1

.L00801453:
// d_net.c:314   continue;
  BSR          .L00801451, R0

.L00801452:
// d_net.c:318   if (netbuffer->checksum & NCMD_KILL)
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  LUI          0x00010000, RD27
  BTST.L       RD27, RQ18, .L00801454
// d_net.c:319   I_Error ("Killed by network driver");
  MOV          .L00C02F8D, RQ10
  BSR          I_Error, R1

.L00801454:
// d_net.c:321   nodeforplayer[netconsole] = netnode;
  MOV          nodeforplayer, RQ27
  MOV.L        RD8, (RQ27, RD21)
// d_net.c:324   if ( resendcount[netnode] <= 0 
  MOV          resendcount, RQ27
  MOV.L        (RQ27, RD8), RQ9
  BRGT.L       R0, RQ9, .L00801455
  MOV.Q        netbuffer, RQ27
  MOVU.L       (RQ27, 0), RQ18
  LUI          0x00040000, RD27
  BTST.L       RD27, RQ18, .L00801455

.L00801456:
// d_net.c:326   {
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 4), RQ9
  AND          RQ9, 255, RD10
  BSR          ExpandTics, R1
  ADD          RQ10, 0, RQ18
  MOV          resendto, RQ27
  MOV.L        RQ18, (RQ27, RD8)
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L00801458
// d_net.c:329   fprintf (debugfile,"retransmit from %i\n", resendto[netnode]);
  MOV          resendto, RQ27
  MOV.L        (RQ27, RD8), RQ9
  MOV.Q        debugfile, RQ10
  MOV          .L00C02F8E, RQ11
  ADDS.L       RQ9, 0, RD12
  BSR          fprintf, R1

.L00801458:
// d_net.c:330   resendcount[netnode] = RESENDCOUNT;
  MOV          resendcount, RQ27
  ADD          R0, 10, RD26
  MOV.L        RD26, (RQ27, RD8)
  BSR          .L00801459, R0

.L00801455:
// d_net.c:333   resendcount[netnode]--;
  MOV          resendcount, RQ27
  MOV.L        (RQ27, RD8), RQ18
  ADDS.L       RQ18, -1, RQ9
  MOV.L        RQ9, (RQ27, RD8)

.L00801459:
// d_net.c:336   if (realend == nettics[netnode])
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BREQ.Q       RQ18, RD20, .L00801451
// d_net.c:339   if (realend < nettics[netnode])
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ9
  BRGE.L       RQ9, RD20, .L0080145A
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L0080145B
// d_net.c:342   fprintf (debugfile,
  MOV.Q        netbuffer, RQ27
  MOVU.B       (RQ27, 7), RQ18
  MOV.Q        debugfile, RQ10
  MOV          .L00C02F8F, RQ11
  ADD          RD22, 0, RD12
  ADD          RQ18, 0, RD13
  BSR          fprintf, R1

.L0080145B:
// d_net.c:345   continue;
  BSR          .L00801451, R0

.L0080145A:
// d_net.c:349   if (realstart > nettics[netnode])
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ9
  BRLE.L       RQ9, RD22, .L0080145C
  MOV.Q        debugfile, RQ27
  BREQ.Q       R0, RQ27, .L0080145D
// d_net.c:353   fprintf (debugfile,
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ18
  MOV.Q        debugfile, RQ10
  MOV          .L00C02F90, RQ11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RQ18, 0, RD14
  BSR          fprintf, R1

.L0080145D:
// d_net.c:356   remoteresend[netnode] = true;
  MOV          remoteresend, RQ27
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ27, RD8)
// d_net.c:357   continue;
  BSR          .L00801451, R0

.L0080145C:
// d_net.c:364   remoteresend[netnode] = false;
  MOV          remoteresend, RQ27
  MOV.L        RD0, (RQ27, RD8)
// d_net.c:366   start = nettics[netnode] - realstart;				
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ9
  SUBS.L       RQ9, RD22, RD27
// d_net.c:367   src = &netbuffer->cmds[start];
  MOV.Q        netbuffer, RQ26
  ADD          RQ26, 8, RQ25
  LEA.Q        RQ25, RD27, RQ23
  MOV.L        RD27, (R2, 132)
// d_net.c:369   while (nettics[netnode] < realend)
  BSR          .L00801460, R0

.L0080145E:
// d_net.c:370   {
  MOV          netcmds, RQ27
  ADD          R0, 96, R5
  MUL.L        RD21, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ18
  ADD          RQ18, 0, RQ9
  ADD          R0, 12, RD25
  MODS.L       RQ9, RD25, RQ9
  LEA.Q        RQ26, RQ9, RQ24
// d_net.c:372   nettics[netnode]++;
  MOV.L        (RQ27, RD8), RQ18
  ADDS.L       RQ18, 1, RQ9
  MOV.L        RQ9, (RQ27, RD8)
// d_net.c:373   *dest = *src;
  ADD          RQ23, 0, RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        RQ10, (RQ24, 0)
  MOV.Q        RQ24, (R2, 136)
// d_net.c:374   src++;
  ADD          RQ23, 8, RQ23

.L00801460:
  MOV          nettics, RQ27
  MOV.L        (RQ27, RD8), RQ18
  BRLT.L       RD20, RQ18, .L0080145E

.L0080145F:

.L00801451:
  BSR          HGetPacket, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L0080144F

.L00801450:

.L00C02F8B:
  ADD          R2, 336, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

A_Tracer:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RQ10, 0, RQ18
// p_enemy.c:1062   if (gametic & 3)
  MOV.L        gametic, RD27
  ADD          R0, 3, RD26
  BTSTN.L      RD26, RD27, .L00C02F96
// p_enemy.c:1066   P_SpawnPuff (actor->x, actor->y, actor->z);
  MOV.L        (RQ18, 32), RQ23
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 24), RQ8
  ADDS.L       RQ8, 0, RD10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ23, 0, RD12
  BSR          P_SpawnPuff, R1
// p_enemy.c:1068   th = P_SpawnMobj (actor->x-actor->momx,
  MOV.L        (RQ18, 32), RQ23
  MOV.L        (RQ18, 28), RQ9
  MOV.L        (RQ18, 116), RQ8
  SUBS.L       RQ9, RQ8, RQ22
  MOV.L        (RQ18, 24), RQ9
  MOV.L        (RQ18, 112), RQ8
  SUBS.L       RQ9, RQ8, RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ22, 0, RD11
  ADD          RQ23, 0, RD12
  ADD          R0, 7, RD13
  BSR          P_SpawnMobj, R1
  ADD          RQ10, 0, RQ27
// p_enemy.c:1072   th->momz = FRACUNIT;
  LUI          16, RD26
  MOV.L        RD26, (RQ27, 120)
// p_enemy.c:1073   th->tics -= P_Random()&3;
  MOV.L        (RQ27, 144), RQ23
  MOV.Q        RQ27, (R2, 112)
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  AND          RQ9, 3, RQ8
  SUBS.L       RQ23, RQ8, RQ22
  MOV.L        RQ22, (RQ27, 144)
// p_enemy.c:1074   if (th->tics < 1)
  MOV.L        (RQ27, 144), RQ21
  BRGE.L       1, RQ21, .L00801B5C
// p_enemy.c:1075   th->tics = 1;
  ADD          R0, 1, RD27
  MOV.Q        (R2, 112), RQ26
  MOV.L        RD27, (RQ26, 144)

.L00801B5C:
// p_enemy.c:1078   dest = actor->tracer;
  MOV.Q        (RQ18, 224), RQ27
// p_enemy.c:1080   if (!dest || dest->health <= 0)
  MOV.Q        RQ27, (R2, 120)
  BREQ.Q       R0, RQ27, .L00C02F96
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 164), RQ23
  BRLE.L       R0, RQ23, .L00C02F96

.L00801B5D:
// p_enemy.c:1084   exact = R_PointToAngle2 (actor->x,
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 28), RQ9
  MOV.L        (RQ27, 24), RQ8
  MOV.L        (RQ18, 28), RQ22
  MOV.L        (RQ18, 24), RQ21
  ADD          RQ21, 0, RD10
  ADD          RQ22, 0, RD11
  ADDS.L       RQ8, 0, RD12
  ADDS.L       RQ9, 0, RD13
  BSR          R_PointToAngle2, R1
  ADD          RQ10, 0, RD20
// p_enemy.c:1089   if (exact != actor->angle)
  MOVU.L       (RQ18, 56), RQ23
  BREQ.Q       RQ23, RD20, .L00801B5F
  MOVU.L       (RQ18, 56), RQ9
  SUBU.L       RD20, RQ9, RQ8
  ADD          R0, 0x0000000080000000, RD27
  BRLEU.L      RD27, RQ8, .L00801B60
// p_enemy.c:1092   {
  MOVU.L       (RQ18, 56), RQ22
  MOV.L        TRACEANGLE, RD27
  ADDU.L       RD27, R0, RQ23
  SUBU.L       RQ22, RQ23, RQ21
  MOVU.L       RQ21, (RQ18, 56)
  MOVU.L       (RQ18, 56), RQ9
  SUBU.L       RD20, RQ9, RQ8
  ADD          R0, 0x0000000080000000, RD27
  BRGEU.L      RD27, RQ8, .L00801B61
// p_enemy.c:1095   actor->angle = exact;
  MOVU.L       RD20, (RQ18, 56)

.L00801B61:
  BSR          .L00801B62, R0

.L00801B60:
// p_enemy.c:1098   {
  MOVU.L       (RQ18, 56), RQ22
  MOV.L        TRACEANGLE, RD27
  ADDU.L       RD27, R0, RQ23
  ADDU.L       RQ22, RQ23, RQ21
  MOVU.L       RQ21, (RQ18, 56)
  MOVU.L       (RQ18, 56), RQ9
  SUBU.L       RD20, RQ9, RQ8
  ADD          R0, 0x0000000080000000, RD27
  BRLEU.L      RD27, RQ8, .L00801B63
// p_enemy.c:1101   actor->angle = exact;
  MOVU.L       RD20, (RQ18, 56)

.L00801B63:

.L00801B62:

.L00801B5F:
// p_enemy.c:1105   exact = actor->angle>>ANGLETOFINESHIFT;
  MOVU.L       (RQ18, 56), RQ22
  SHLR         RQ22, 19, RD20
// p_enemy.c:1106   actor->momx = FixedMul (actor->info->speed, finecosine[exact]);
  MOV.Q        finecosine, RQ27
  MOV.L        (RQ27, RD20), RQ21
  MOV.Q        (RQ18, 136), RQ27
  MOV.L        (RQ27, 60), RQ23
  ADD          RQ23, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 112)
// p_enemy.c:1107   actor->momy = FixedMul (actor->info->speed, finesine[exact]);
  MOV          finesine, RQ26
  MOV.L        (RQ26, RD20), RQ8
  MOV.Q        (RQ18, 136), RQ27
  MOV.L        (RQ27, 60), RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, (RQ18, 116)
// p_enemy.c:1110   dist = P_AproxDistance (dest->x - actor->x,
  MOV.Q        (R2, 120), RQ26
  MOV.L        (RQ26, 28), RQ8
  MOV.L        (RQ18, 28), RQ22
  SUBS.L       RQ8, RQ22, RQ21
  MOV.L        (RQ26, 24), RQ23
  MOV.L        (RQ18, 24), RQ9
  SUBS.L       RQ23, RQ9, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD25
// p_enemy.c:1113   dist = dist / actor->info->speed;
  MOV.Q        (RQ18, 136), RQ27
  MOV.L        (RQ27, 60), RQ23
  DIVS.L       RD25, RQ23, RD25
// p_enemy.c:1115   if (dist < 1)
  MOV.L        RD25, (R2, 132)
  BRGE.L       1, RD25, .L00801B64
// p_enemy.c:1116   dist = 1;
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L00801B64:
// p_enemy.c:1117   slope = (dest->z+40*FRACUNIT - actor->z) / dist;
  MOV.Q        (R2, 120), RQ27
  MOV.L        (RQ27, 32), RQ9
  ADDS.L       RQ9, 0x00280000, RQ8
  MOV.L        (RQ18, 32), RQ22
  SUBS.L       RQ8, RQ22, RQ21
  MOV.L        (R2, 132), RD25
  DIVS.L       RQ21, RD25, RD26
// p_enemy.c:1119   if (slope < actor->momz)
  MOV.L        (RQ18, 120), RQ23
  MOV.L        RD26, (R2, 128)
  BRGE.L       RQ23, RD26, .L00801B65
// p_enemy.c:1120   actor->momz -= FRACUNIT/8;
  MOV.L        (RQ18, 120), RQ9
  ADDS.L       RQ9, -8192, RQ8
  MOV.L        RQ8, (RQ18, 120)
  BSR          .L00801B66, R0

.L00801B65:
// p_enemy.c:1122   actor->momz += FRACUNIT/8;
  MOV.L        (RQ18, 120), RQ22
  ADDS.L       RQ22, 8192, RQ21
  MOV.L        RQ21, (RQ18, 120)

.L00801B66:

.L00C02F96:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

tk_rename2:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -1000, R2
  MOV.Q        RQ10, (R2, 248)
  MOV.Q        RQ11, (R2, 240)
  MOV.Q        RQ12, (R2, 232)
  MOV.Q        RQ13, (R2, 224)
  ADD          R2, 256, RQ6
  MOV.Q        RQ6, (R2, 216)
// tk_core/tk_vfile.c:630   
// tk_core/tk_vfile.c:639   
  BSR          tk_vfile_init, R1
// tk_core/tk_vfile.c:641   
  MOV.Q        (R2, 240), RQ27
  MOV.Q        RQ27, (R2, 208)
// tk_core/tk_vfile.c:642   
  MOV.Q        (R2, 232), RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, (R2, 200)
// tk_core/tk_vfile.c:644   
  MOV.B        (RQ27, 0), RQ22
  BRNE.Q       46, RQ22, .L00800ADE
  MOV.Q        (R2, 240), RQ27
  MOV.B        (RQ27, 1), RQ22
  BRNE.Q       47, RQ22, .L00800ADE

.L00800ADF:
// tk_core/tk_vfile.c:645   
  MOV.Q        (R2, 240), RQ27
  ADD          RQ27, 2, RQ27
  MOV.Q        RQ27, (R2, 240)

.L00800ADE:
// tk_core/tk_vfile.c:646   
  MOV.Q        (R2, 240), RQ27
  MOV.B        (RQ27, 0), RQ22
  BRNE.Q       47, RQ22, .L00800AE0
// tk_core/tk_vfile.c:647   
  MOV.Q        (R2, 240), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 240)

.L00800AE0:
// tk_core/tk_vfile.c:649   
  MOV.Q        (R2, 232), RQ27
  MOV.B        (RQ27, 0), RQ22
  BRNE.Q       46, RQ22, .L00800AE1
  MOV.Q        (R2, 232), RQ27
  MOV.B        (RQ27, 1), RQ22
  BRNE.Q       47, RQ22, .L00800AE1

.L00800AE2:
// tk_core/tk_vfile.c:650   
  MOV.Q        (R2, 232), RQ27
  ADD          RQ27, 2, RQ27
  MOV.Q        RQ27, (R2, 232)

.L00800AE1:
// tk_core/tk_vfile.c:651   
  MOV.Q        (R2, 232), RQ27
  MOV.B        (RQ27, 0), RQ22
  BRNE.Q       47, RQ22, .L00800AE3
// tk_core/tk_vfile.c:652   
  MOV.Q        (R2, 232), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 232)

.L00800AE3:
// tk_core/tk_vfile.c:654   
  MOV.L        RD0, (R2, 188)
// tk_core/tk_vfile.c:655   
  MOV.Q        (R2, 224), RQ27
  BREQ.Q       R0, RQ27, .L00800AE4
// tk_core/tk_vfile.c:656   
  MOV.Q        (R2, 224), RQ27
  MOV.B        (RQ27, 0), RD26
  ADD          R0, 108, R5
  CMPEQ.Q      RD26, R5, RQ22
  ADD          R0, 76, R5
  CMPEQ.Q      RD26, R5, RQ25
  MOV.L        RD26, (R2, 180)
  OR           RQ22, RQ25, RQ21
  BREQ.L       R0, RQ21, .L00800AE5
// tk_core/tk_vfile.c:659   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 188)

.L00800AE5:
  MOV.L        (R2, 180), RD27
  BRNE.Q       115, RD27, .L00800AE6
// tk_core/tk_vfile.c:661   
  ADD          R0, 2, RD27
  MOV.L        RD27, (R2, 188)

.L00800AE6:
  MOV.L        (R2, 180), RD27
  BRNE.Q       83, RD27, .L00800AE7
// tk_core/tk_vfile.c:663   
  ADD          R0, 3, RD27
  MOV.L        RD27, (R2, 188)

.L00800AE7:

.L00800AE4:
// tk_core/tk_vfile.c:666   
  MOV.L        RD0, (R2, 184)
// tk_core/tk_vfile.c:667   
  MOV.Q        (R2, 208), RQ23
// tk_core/tk_vfile.c:668   
  BSR          .L00800AE8, R0

.L00800AE9:
// tk_core/tk_vfile.c:669   
  ADD          RQ23, 1, RQ23

.L00800AE8:
  MOV.B        (RQ23, 0), RQ22
  BREQ.L       R0, RQ22, .L00800AEA
  MOV.B        (RQ23, 0), RQ27
  BRLT.L       97, RQ27, .L00800AEA

.L00800AEB:
  MOV.B        (RQ23, 0), RQ21
  BRGT.L       122, RQ21, .L00800AEA
  BSR          .L00800AE9, R0

.L00800AEA:

.L00800AEC:
// tk_core/tk_vfile.c:670   
  MOV.B        (RQ23, 0), RQ22
  BRNE.Q       58, RQ22, .L00800AED
// tk_core/tk_vfile.c:671   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 184)

.L00800AED:
// tk_core/tk_vfile.c:676   
  MOV.Q        tk_vf_mount, RQ18
// tk_core/tk_vfile.c:677   
  BSR          .L00800AEE, R0

.L00800AEF:
// tk_core/tk_vfile.c:678   
  MOV.Q        (R2, 240), RQ23
// tk_core/tk_vfile.c:680   
  MOV.Q        (R2, 232), RQ20
// tk_core/tk_vfile.c:681   
  MOV.Q        (RQ18, 16), RQ8
  BREQ.Q       R0, RQ8, .L00800AF0
  MOV.L        (RQ18, 32), RQ22
  BRLE.L       R0, RQ22, .L00800AF0

.L00800AF1:
  MOV.L        (RQ18, 32), RQ27
  MOV.Q        (RQ18, 16), RQ8
  ADDS.L       RQ27, 0, RQ26
  ADD          RQ8, 0, RQ10
  MOV.Q        (R2, 232), RQ11
  ADD          RQ26, 0, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ22
  BREQ.L       R0, RQ22, .L00800AF2
// tk_core/tk_vfile.c:684   
  MOV.Q        (RQ18, 16), RQ8
  MOV          .L00C02F9D, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:686   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:687   
  BSR          .L00800AEE, R0

.L00800AF2:
  MOV.L        (RQ18, 32), RQ22
  MOV.Q        (RQ18, 16), RQ8
  ADDS.L       RQ22, 0, RQ27
  ADD          RQ8, 0, RQ10
  MOV.Q        (R2, 240), RQ11
  ADD          RQ27, 0, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ21
  BREQ.L       R0, RQ21, .L00800AF3
  MOV.L        (R2, 188), RD27
  ADD          R0, 2, RD26
  BTSTN.L      RD26, RD27, .L00800AF3

.L00800AF4:
// tk_core/tk_vfile.c:691   
  MOV.Q        (RQ18, 16), RQ8
  MOV          .L00C02F9E, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:693   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:694   
  BSR          .L00800AEE, R0

.L00800AF3:
// tk_core/tk_vfile.c:697   
  MOV.L        (RQ18, 32), RQ21
  ADD          RQ23, RQ21, RQ23
// tk_core/tk_vfile.c:698   
  MOV.L        (RQ18, 32), RQ21
  ADD          RQ20, RQ21, RQ20
  MOV.L        (R2, 188), RD27
  BRNE.Q       3, RD27, .L00800AF5
// tk_core/tk_vfile.c:704   
  MOV.Q        (R2, 208), RQ23
  BSR          .L00800AF6, R0

.L00800AF5:
  MOV.L        (R2, 188), RD27
  BRNE.Q       2, RD27, .L00800AF7
  MOV.L        (RQ18, 32), RQ21
  MOV.Q        (RQ18, 16), RQ8
  ADDS.L       RQ21, 0, RQ27
  ADD          RQ8, 0, RQ10
  MOV.Q        (R2, 240), RQ11
  ADD          RQ27, 0, RQ12
  BSR          strncmp, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00800AF8
  MOV.L        (R2, 184), RD27
  BRNE.L       R0, RD27, .L00800AF8
  BSR          .L00800AF9, R0

.L00800AF8:
  MOV.L        (R2, 184), RD27
  BRNE.L       R0, RD27, .L00800AFA
  MOV.Q        (R2, 208), RQ27
  MOV.B        (RQ27, 0), RQ9
  BREQ.Q       47, RQ9, .L00800AFA

.L00800AFB:
// tk_core/tk_vfile.c:710   
  MOV.Q        (RQ18, 8), RQ18
  BSR          .L00800AEE, R0

.L00800AFA:
  MOV.Q        (R2, 208), RQ23
  BSR          .L00800AFC, R0

.L00800AF9:
// tk_core/tk_vfile.c:713   
  BSR          .L00800AFD, R0

.L00800AFE:
// tk_core/tk_vfile.c:715   
  ADD          RQ23, 1, RQ23

.L00800AFD:
  MOV.B        (RQ23, 0), RQ9
  BREQ.Q       47, RQ9, .L00800AFE

.L00800AFF:
// tk_core/tk_vfile.c:716   
  ADD          R2, 256, RQ27
  ADD          R0, 58, RD26
  MOV.B        RD26, (RQ27, 0)
// tk_core/tk_vfile.c:717   
  ADD          RQ27, 1, RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ23, 0, RQ11
  BSR          strcpy, R1
// tk_core/tk_vfile.c:718   
  ADD          RQ27, 0, RQ10
  BSR          tk_rstrdup, R1
  ADD          RQ10, 0, RQ25
// tk_core/tk_vfile.c:720   
  ADD          RQ25, 0, RQ23
  MOV.Q        RQ25, (R2, 192)

.L00800AFC:
  BSR          .L00800B00, R0

.L00800AF7:
  MOV.B        (RQ23, 0), RQ9
  BREQ.L       R0, RQ9, .L00800B01
  MOV.B        (RQ23, 0), RQ9
  BREQ.Q       47, RQ9, .L00800B01

.L00800B02:
  ADD          RQ23, -1, RQ8
  MOV.B        (RQ8, 0), RQ9
  BREQ.Q       58, RQ9, .L00800B01

.L00800B03:
// tk_core/tk_vfile.c:725   
  MOV.Q        (RQ18, 16), RQ8
  MOV          .L00C02F9F, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:728   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:729   
  BSR          .L00800AEE, R0

.L00800B01:
  MOV.B        (RQ23, 0), RQ9
  BRNE.Q       47, RQ9, .L00800B04
// tk_core/tk_vfile.c:732   
  ADD          RQ23, 1, RQ23

.L00800B04:

.L00800B00:

.L00800AF6:
  MOV.B        (RQ20, 0), RQ9
  BREQ.L       R0, RQ9, .L00800B05
  MOV.B        (RQ20, 0), RQ9
  BREQ.Q       47, RQ9, .L00800B05

.L00800B06:
  ADD          RQ20, -1, RQ8
  MOV.B        (RQ8, 0), RQ9
  BREQ.Q       58, RQ9, .L00800B05

.L00800B07:
// tk_core/tk_vfile.c:736   
  MOV.Q        (RQ18, 16), RQ8
  MOV          .L00C02FA0, RQ10
  ADD          RQ8, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:739   
  MOV.Q        (RQ18, 8), RQ18
// tk_core/tk_vfile.c:740   
  BSR          .L00800AEE, R0

.L00800B05:
  MOV.B        (RQ20, 0), RQ9
  BRNE.Q       47, RQ9, .L00800B08
// tk_core/tk_vfile.c:743   
  ADD          RQ20, 1, RQ20

.L00800B08:
  BSR          .L00800B09, R0

.L00800AF0:
  MOV.L        (R2, 188), RD27
  ADD          R0, 2, RD26
  BTST.L       RD26, RD27, .L00800B0A
// tk_core/tk_vfile.c:747   
  MOV.Q        (R2, 208), RQ23

.L00800B0A:

.L00800B09:
// tk_core/tk_vfile.c:750   
  MOV.Q        (RQ18, 0), RQ8
  MOV.Q        (RQ8, 48), RQ27
  BREQ.Q       R0, RQ27, .L00800B0B
// tk_core/tk_vfile.c:751   
  MOV.Q        (RQ18, 0), RQ8
  ADD          RQ8, 0, RQ27
  MOV.Q        (RQ8, 48), RQ26
  ADD          RQ18, 0, RQ10
  MOV.Q        (R2, 248), RQ11
  ADD          RQ23, 0, RQ12
  ADD          RQ20, 0, RQ13
  MOV.Q        (R2, 224), RQ14
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1
  ADDS.L       RQ10, 0, RQ9
  ADD          RQ9, 0, RD25
  MOV.L        RD25, (R2, 180)
  BRLT.L       R0, RD25, .L00800B0C
// tk_core/tk_vfile.c:754   
  MOV.L        (R2, 180), RD10
  BSR          .L00C02F9C, R0

.L00800B0C:

.L00800B0B:
// tk_core/tk_vfile.c:755   
  MOV.Q        (RQ18, 8), RQ18

.L00800AEE:
  BRNE.Q       R0, RQ18, .L00800AEF

.L00800B0D:
// tk_core/tk_vfile.c:759   
  MOV          .L00C02FA1, RQ10
  MOV.Q        (R2, 208), RQ11
  MOV.Q        (R2, 200), RQ12
  MOV.Q        (R2, 224), RQ13
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:761   
  ADD          R0, -1, RD10

.L00C02F9C:
  ADD          R2, 1000, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

fopen3:
  ADD          R2, -64, R2
  MOV.Q        RQ1, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
// pdpc201/stdio.c:368   
  LDIZ         6152, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        TU61F874B9/myfile, RQ22
  MOV.Q        RQ18, (RQ22, 72)
// pdpc201/stdio.c:370   
  MOV.Q        (RQ22, 72), RQ18
  LDIZ         4660, RD21
  MOVU.W       RD21, (RQ18, 0)
// pdpc201/stdio.c:371   
  MOV.Q        (RQ22, 72), RQ18
  ADD          RQ18, 6150, RQ9
  LDIZ         17185, RD20
  MOVU.W       RD20, (RQ9, 0)
// pdpc201/stdio.c:372   
  MOV.Q        (RQ22, 72), RQ18
  BRNE.Q       RQ0, RQ18, .L008002E2
// pdpc201/stdio.c:373   
  MOV          .L00C02FA8, RQ10
  BSR          tk_puts, R1
// pdpc201/stdio.c:375   
  ADD          R0, 1, RD22
  MOV.L        RD22, TU61F874B9/err
  BSR          .L008002E3, R0

.L008002E2:
// pdpc201/stdio.c:378   
  MOV.Q        TU61F874B9/myfile, RQ22
  MOV.L        RD0, (RQ22, 92)
// pdpc201/stdio.c:380   
  MOV.Q        (RQ22, 72), RQ9
  ADD          RQ9, 2, RQ18
  MOV.Q        RQ18, (RQ22, 24)
// pdpc201/stdio.c:381   
  MOV.Q        (RQ22, 24), RQ9
  ADD          RQ9, 0, RQ18
  ADD          RQ9, 1, RQ23
  MOV.Q        RQ23, (RQ22, 24)
  MOV.B        RD0, (RQ18, 0)
// pdpc201/stdio.c:382   
  MOV.Q        (RQ22, 24), RQ18
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 1, RQ23
  MOV.Q        RQ23, (RQ22, 24)
  MOV.B        RD0, (RQ9, 0)
// pdpc201/stdio.c:383   
  LDIZ         6144, RQ8
  MOV.Q        RQ8, (RQ22, 32)
// pdpc201/stdio.c:384   
  MOV.B        RD0, (RQ22, 9)
// pdpc201/stdio.c:385   
  MOV.L        RD0, (RQ22, 80)
// pdpc201/stdio.c:386   
  MOV.Q        (RQ22, 24), RQ18
  MOV.Q        (RQ22, 32), RQ8
  ADD          RQ18, RQ8, RQ9
  MOV.Q        RQ9, (RQ22, 48)
// pdpc201/stdio.c:387   
  MOV.Q        (RQ22, 48), RQ23
  ADD          R0, 10, RD21
  MOV.B        RD21, (RQ23, 0)
// pdpc201/stdio.c:389   
  MOV.Q        (RQ22, 48), RQ18
  MOV.Q        RQ18, (RQ22, 40)
// pdpc201/stdio.c:390   
  MOV.Q        (RQ22, 32), RQ8
  SUB          R0, RQ8, RQ20
  MOV.Q        RQ20, (RQ22, 16)
// pdpc201/stdio.c:391   
  MOV.L        RD0, (RQ22, 56)
// pdpc201/stdio.c:392   
  MOV.L        RD0, (RQ22, 60)
// pdpc201/stdio.c:393   
  ADD          R0, -1, RD13
  MOV.L        RD13, (RQ22, 64)
// pdpc201/stdio.c:394   
  MOV.L        RD0, (RQ22, 88)
  MOV.L        TU61F874B9/inreopen, RD22
  BRNE.L       R0, RD22, .L008002E4
// pdpc201/stdio.c:396   
  MOV.Q        TU61F874B9/myfile, RQ22
  MOV.L        RD0, (RQ22, 96)

.L008002E4:
// pdpc201/stdio.c:398   
  ADD          R0, 1, RD22
  MOV.Q        TU61F874B9/myfile, RQ21
  MOV.L        RD22, (RQ21, 100)
// pdpc201/stdio.c:403   
  MOV.B        RD22, (RQ21, 8)
// pdpc201/stdio.c:411   
  ADD          R0, 2, RD20
  MOV.L        RD20, (RQ21, 84)
// pdpc201/stdio.c:412   
  MOV.L        TU61F874B9/modeType, RD21
  AND          RD21, -1, RQ13
  BRGE.L       8, RQ13, .L008002E5
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       2, RD22, .L008002E6
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       3, RD22, .L008002E7
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       5, RD22, .L008002E8
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       6, RD22, .L008002E9
  BSR          .L008002EA, R0

.L008002E5:
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       8, RD22, .L008002EB
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       9, RD22, .L008002EC
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       11, RD22, .L008002ED
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       12, RD22, .L008002EE
  BSR          .L008002EA, R0

.L008002E6:

.L008002E7:

.L008002E8:

.L008002E9:

.L008002EB:

.L008002EC:

.L008002ED:

.L008002EE:
// pdpc201/stdio.c:421   
  ADD          R0, 0, RQ8
  MOV.Q        TU61F874B9/myfile, RQ22
  MOV.Q        RQ8, (RQ22, 16)
// pdpc201/stdio.c:423   
  MOV.Q        (RQ22, 24), RQ18
  MOV.Q        RQ18, (RQ22, 40)
// pdpc201/stdio.c:424   
  ADD          R0, 1, RD21
  MOV.L        RD21, (RQ22, 84)
// pdpc201/stdio.c:425   
  BSR          .L008002EF, R0

.L008002EA:

.L008002EF:
// pdpc201/stdio.c:426   
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       7, RD22, .L008002F0
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       8, RD22, .L008002F1
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       10, RD22, .L008002F2
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       11, RD22, .L008002F3
  MOV.L        TU61F874B9/modeType, RD22
  BREQ.Q       12, RD22, .L008002F4
  BSR          .L008002F5, R0

.L008002F0:

.L008002F1:

.L008002F2:

.L008002F3:

.L008002F4:
// pdpc201/stdio.c:433   
  ADD          R0, 1, RD22
  MOV.Q        TU61F874B9/myfile, RQ21
  MOV.L        RD22, (RQ21, 88)
// pdpc201/stdio.c:435   

.L008002F5:
// pdpc201/stdio.c:438   
  MOV.Q        TU61F874B9/myfile, RQ10
  BSR          __stdio_chkmagic, R1

.L008002E3:
// pdpc201/stdio.c:439   

.L00C02FA7:
  ADD          R2, 336, R2
  MOV.Q        (R2, 56), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 64, R2
  JSR          RQ1, 0, R0

P_NewChaseDir:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ8
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// p_enemy.c:374   dirtype_t	d[3];
// p_enemy.c:381   if (!actor->target)
  MOV.Q        (RQ8, 176), RQ20
  BRNE.Q       R0, RQ20, .L00801AE7
// p_enemy.c:382   I_Error ("P_NewChaseDir: called with no target");
  MOV          .L00C02FAF, RQ10
  BSR          I_Error, R1

.L00801AE7:
// p_enemy.c:384   olddir = actor->movedir;
  MOV.L        (RQ8, 168), RD27
// p_enemy.c:385   turnaround=opposite[olddir];
  MOV          opposite, RQ26
  MOV.L        (RQ26, RD27), RD21
  MOV.L        RD27, (R2, 100)
// p_enemy.c:387   deltax = actor->target->x - actor->x;
  MOV.Q        (RQ8, 176), RQ20
  MOV.L        (RQ20, 24), RQ9
  MOV.L        (RQ8, 24), RQ22
  SUBS.L       RQ9, RQ22, RD26
// p_enemy.c:388   deltay = actor->target->y - actor->y;
  MOV.L        (RQ20, 28), RQ9
  MOV.L        (RQ8, 28), RQ22
  SUBS.L       RQ9, RQ22, RD13
  MOV.L        RD13, (R2, 112)
// p_enemy.c:390   if (deltax>10*FRACUNIT)
  MOV.L        RD26, (R2, 116)
  LUI          160, RD12
  BRLE.L       RD12, RD26, .L00801AE8
// p_enemy.c:391   d[1]= DI_EAST;
  ADD          R2, 128, RQ27
  MOV.L        RD0, (RQ27, 4)
  BSR          .L00801AE9, R0

.L00801AE8:
  MOV.L        (R2, 116), RD27
  LUI          -160, RD26
  BRGE.L       RD26, RD27, .L00801AEA
// p_enemy.c:393   d[1]= DI_WEST;
  ADD          R2, 128, RQ27
  ADD          R0, 4, RD26
  MOV.L        RD26, (RQ27, 4)
  BSR          .L00801AEB, R0

.L00801AEA:
// p_enemy.c:395   d[1]=DI_NODIR;
  ADD          R2, 128, RQ27
  ADD          R0, 8, RD26
  MOV.L        RD26, (RQ27, 4)

.L00801AEB:

.L00801AE9:
// p_enemy.c:397   if (deltay<-10*FRACUNIT)
  MOV.L        (R2, 112), RD27
  LUI          -160, RD26
  BRGE.L       RD26, RD27, .L00801AEC
// p_enemy.c:398   d[2]= DI_SOUTH;
  ADD          R2, 128, RQ27
  ADD          R0, 6, RD26
  MOV.L        RD26, (RQ27, 8)
  BSR          .L00801AED, R0

.L00801AEC:
  MOV.L        (R2, 112), RD27
  LUI          160, RD26
  BRLE.L       RD26, RD27, .L00801AEE
// p_enemy.c:400   d[2]= DI_NORTH;
  ADD          R2, 128, RQ27
  ADD          R0, 2, RD26
  MOV.L        RD26, (RQ27, 8)
  BSR          .L00801AEF, R0

.L00801AEE:
// p_enemy.c:402   d[2]=DI_NODIR;
  ADD          R2, 128, RQ27
  ADD          R0, 8, RD26
  MOV.L        RD26, (RQ27, 8)

.L00801AEF:

.L00801AED:
// p_enemy.c:405   if (d[1] != DI_NODIR
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 4), RQ9
  BREQ.Q       8, RQ9, .L00801AF0
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 8), RQ22
  BREQ.Q       8, RQ22, .L00801AF0

.L00801AF1:
// p_enemy.c:407   {
  MOV.L        (R2, 112), RD27
  CMPLT.Q      RD27, R0, RQ9
  SHAD.L       RQ9, 1, RQ22
  MOV.L        (R2, 116), RD26
  CMPGT.Q      RD26, R0, RQ9
  ADDS.L       RQ22, RQ9, RQ23
  MOV          diags, RQ13
  MOV.L        (RQ13, RQ23), RQ9
  MOV.L        RQ9, (RQ8, 168)
  MOV.L        (RQ8, 168), RQ22
  BREQ.Q       RD21, RQ22, .L00801AF3
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADD          RQ10, 0, RQ23
  BREQ.L       R0, RQ23, .L00801AF3
  BSR          .L00C02FAE, R0

.L00801AF3:

.L00801AF0:
// p_enemy.c:414   if (P_Random() > 200
  BSR          P_Random, R1
  ADDS.L       RQ10, 0, RQ9
  BRGT.L       200, RQ9, .L00801AF6
  MOV.L        (R2, 112), RD27
  SHAR.Q       RD27, 63, RQ6
  SUB          R0, RD27, RQ22
  SHAR.Q       RQ22, 63, RQ7
  AND          RQ22, RQ6, RQ6
  AND          RD27, RQ7, RQ7
  OR           RQ6, RQ7, RQ22
  MOV.L        (R2, 116), RD26
  SHAR.Q       RD26, 63, RQ6
  SUB          R0, RD26, RQ23
  SHAR.Q       RQ23, 63, RQ7
  AND          RQ23, RQ6, RQ6
  AND          RD26, RQ7, RQ7
  OR           RQ6, RQ7, RQ23
  BRGT.L       RQ23, RQ22, .L00801AF6
  BSR          .L00801AF5, R0

.L00801AF6:
// p_enemy.c:416   {
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 4), RD18
// p_enemy.c:418   d[1]=d[2];
  MOV.L        (RQ27, 8), RQ9
  MOV.L        RQ9, (RQ27, 4)
// p_enemy.c:419   d[2]=tdir;
  MOV.L        RD18, (RQ27, 8)

.L00801AF5:
// p_enemy.c:422   if (d[1]==turnaround)
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 4), RQ22
  BRNE.Q       RD21, RQ22, .L00801AF8
// p_enemy.c:423   d[1]=DI_NODIR;
  ADD          R2, 128, RQ27
  ADD          R0, 8, RD26
  MOV.L        RD26, (RQ27, 4)

.L00801AF8:
// p_enemy.c:424   if (d[2]==turnaround)
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 8), RQ23
  BRNE.Q       RD21, RQ23, .L00801AF9
// p_enemy.c:425   d[2]=DI_NODIR;
  ADD          R2, 128, RQ27
  ADD          R0, 8, RD26
  MOV.L        RD26, (RQ27, 8)

.L00801AF9:
// p_enemy.c:427   if (d[1]!=DI_NODIR)
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 4), RQ9
  BREQ.Q       8, RQ9, .L00801AFA
// p_enemy.c:428   {
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 4), RQ22
  MOV.L        RQ22, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00C02FAE

.L00801AFA:
// p_enemy.c:437   if (d[2]!=DI_NODIR)
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 8), RQ9
  BREQ.Q       8, RQ9, .L00801AFB
// p_enemy.c:438   {
  ADD          R2, 128, RQ27
  MOV.L        (RQ27, 8), RQ22
  MOV.L        RQ22, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00C02FAE

.L00801AFB:
// p_enemy.c:447   if (olddir!=DI_NODIR)
  MOV.L        (R2, 100), RD27
  BREQ.Q       8, RD27, .L00801AFC
// p_enemy.c:448   {
  MOV.L        (R2, 100), RD27
  MOV.L        RD27, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00C02FAE

.L00801AFC:
// p_enemy.c:456   if (P_Random()&1) 	
  BSR          P_Random, R1
  ADD          RQ10, 0, RQ22
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ22, .L00801AFD
// p_enemy.c:457   {
  ADD          R0, 0, RD18

.L00801AFE:
// p_enemy.c:461   {
  BREQ.Q       RD21, RD18, .L00801B01
// p_enemy.c:463   {
  MOV.L        RD18, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L00C02FAE

.L00801B01:
  ADDS.L       RD18, 1, RD18
  BRLE.L       7, RD18, .L00801AFE

.L00801B00:
  BSR          .L00801B02, R0

.L00801AFD:
// p_enemy.c:472   {
  ADD          R0, 7, RD18
  BREQ.Q       -1, RD18, .L00801B05

.L00801B03:
// p_enemy.c:476   {
  BREQ.Q       RD21, RD18, .L00801B06
// p_enemy.c:478   {
  MOV.L        RD18, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADDS.L       RQ10, 0, RQ9
  BRNE.L       R0, RQ9, .L00C02FAE

.L00801B06:
  ADDS.L       RD18, -1, RD18
  BRNE.Q       -1, RD18, .L00801B03

.L00801B05:

.L00801B02:
// p_enemy.c:487   if (turnaround !=  DI_NODIR)
  BREQ.Q       8, RD21, .L00801B07
// p_enemy.c:488   {
  MOV.L        RD21, (RQ8, 168)
  ADD          RQ8, 0, RQ10
  BSR          P_TryWalk, R1
  ADD          RQ10, 0, RQ22
  BRNE.L       R0, RQ22, .L00C02FAE

.L00801B07:
// p_enemy.c:494   actor->movedir = DI_NODIR;	// can not move
  ADD          R0, 8, RD27
  MOV.L        RD27, (RQ8, 168)

.L00C02FAE:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_Responder:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -496, R2
  MOV.Q        RQ10, (R2, 248)
  ADD          R2, 256, RQ6
  MOV.Q        RQ6, (R2, 240)
  ADD          R2, 272, RQ6
  MOV.Q        RQ6, (R2, 224)
// st_stuff.c:555   if (ev->type == ev_keyup
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 0), RQ26
  MOV.Q        RQ26, (R2, 208)
  BRNE.Q       1, RQ26, .L00802B8A
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  ADDU.L       RQ26, R0, RQ25
  ADD          R0, 0x00000000FFFF0000, RD24
  AND          RQ25, RD24, RQ8
  MOV.Q        RQ26, (R2, 208)
  LUI          0x000616D0, RD13
  BRNE.Q       RD13, RQ8, .L00802B8A

.L00802B8B:
// st_stuff.c:557   {
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV.Q        RQ26, (R2, 208)
  ADD          R0, 0x616D6500, RD25
  BREQ.Q       RD25, RQ26, .L00802B8E
  MOV.L        (R2, 208), RQ27
  ADD          R0, 0x616D7800, RD26
  BREQ.Q       RD26, RQ27, .L00802B8F
  BSR          .L00802B8D, R0

.L00802B8E:
// st_stuff.c:560   case AM_MSGENTERED:
  MOV.L        RD0, TU7A00CB73/st_gamestate
// st_stuff.c:562   st_firsttime = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CB73/st_firsttime
// st_stuff.c:563   break;
  BSR          .L00802B8D, R0

.L00802B8F:
// st_stuff.c:567   st_gamestate = FirstPersonState;
  ADD          R0, 1, RD27
  MOV.L        RD27, TU7A00CB73/st_gamestate
// st_stuff.c:568   break;

.L00802B8D:
  BSR          .L00802B90, R0

.L00802B8A:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 0), RQ8
  BRNE.L       R0, RQ8, .L00802B91
  MOV.L        netgame, RD27
  BRNE.L       R0, RD27, .L00802B92
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_god, RQ9
  SHAD.Q       RQ26, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          RQ9, 0, RQ10
  SHAD.Q       RQ8, 56, RD11
  SHAR.Q       RD11, 56, RD11
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ25
  MOV.Q        RQ25, (R2, 208)
  BREQ.L       R0, RQ25, .L00802B93
// st_stuff.c:582   {
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 200), RQ26
  XOR          RQ26, 2, RQ8
  MOV.L        RQ8, (RQ27, 200)
  MOV.L        (RQ27, 200), RQ26
  MOV.Q        RQ26, (R2, 208)
  ADD          R0, 2, RD27
  BTST.L       RD27, RQ26, .L00802B94
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 0), RQ9
  BREQ.Q       R0, RQ9, .L00802B95
// st_stuff.c:587   plyr->mo->health = 100;
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.Q        (RQ27, 0), RQ9
  ADD          R0, 100, RD27
  MOV.L        RD27, (RQ9, 164)

.L00802B95:
// st_stuff.c:589   plyr->health = 100;
  ADD          R0, 100, RD27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.L        RD27, (RQ26, 36)
// st_stuff.c:590   plyr->message = STSTR_DQDON;
  MOV          .L00C02FB6, RQ25
  MOV.Q        RQ25, (RQ26, 224)
  BSR          .L00802B96, R0

.L00802B94:
// st_stuff.c:593   plyr->message = STSTR_DQDOFF;
  MOV          .L00C02FB7, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)

.L00802B96:
  BSR          .L00802B97, R0

.L00802B93:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_ammonokey, RQ9
  SHAD.Q       RQ26, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  MOV.Q        RQ26, (R2, 208)
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00802B98
// st_stuff.c:597   {
  ADD          R0, 200, RD27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.L        RD27, (RQ26, 40)
// st_stuff.c:599   plyr->armortype = 2;
  ADD          R0, 2, RD25
  MOV.L        RD25, (RQ26, 44)
// st_stuff.c:601   for (i=0;i<NUMWEAPONS;i++)
  ADD          R0, 0, RD18

.L00802B99:
// st_stuff.c:602   plyr->weaponowned[i] = true;
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 124, RQ9
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802B99

.L00802B9B:
// st_stuff.c:604   for (i=0;i<NUMAMMO;i++)
  ADD          R0, 0, RD18

.L00802B9C:
// st_stuff.c:605   plyr->ammo[i] = plyr->maxammo[i];
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 176, RQ9
  MOV.L        (RQ9, RD18), RQ26
  ADD          RQ27, 160, RQ9
  MOV.L        RQ26, (RQ9, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802B9C

.L00802B9E:
// st_stuff.c:607   plyr->message = STSTR_FAADDED;
  MOV          .L00C02FB8, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802B9F, R0

.L00802B98:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_ammo, RQ9
  SHAD.Q       RQ26, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00802BA0
// st_stuff.c:611   {
  ADD          R0, 200, RD27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.L        RD27, (RQ26, 40)
// st_stuff.c:613   plyr->armortype = 2;
  ADD          R0, 2, RD25
  MOV.L        RD25, (RQ26, 44)
// st_stuff.c:615   for (i=0;i<NUMWEAPONS;i++)
  ADD          R0, 0, RD18

.L00802BA1:
// st_stuff.c:616   plyr->weaponowned[i] = true;
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 124, RQ9
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802BA1

.L00802BA3:
// st_stuff.c:618   for (i=0;i<NUMAMMO;i++)
  ADD          R0, 0, RD18

.L00802BA4:
// st_stuff.c:619   plyr->ammo[i] = plyr->maxammo[i];
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 176, RQ9
  MOV.L        (RQ9, RD18), RQ26
  ADD          RQ27, 160, RQ9
  MOV.L        RQ26, (RQ9, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802BA4

.L00802BA6:
// st_stuff.c:621   for (i=0;i<NUMCARDS;i++)
  ADD          R0, 0, RD18

.L00802BA7:
// st_stuff.c:622   plyr->cards[i] = true;
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 72, RQ9
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       6, RD18, .L00802BA7

.L00802BA9:
// st_stuff.c:624   plyr->message = STSTR_KFAADDED;
  MOV          .L00C02FB9, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802BAA, R0

.L00802BA0:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_mus, RQ9
  SHAD.Q       RQ26, 56, RQ23
  SHAR.Q       RQ23, 56, RQ23
  ADD          RQ9, 0, RQ10
  ADD          RQ23, 0, RD11
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00802BAB
// st_stuff.c:630   char	buf[3];
// st_stuff.c:633   plyr->message = STSTR_MUS;
  MOV          .L00C02FBA, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
// st_stuff.c:634   cht_GetParam(&cheat_mus, buf);
  MOV          cheat_mus, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R2, 256, RQ11
  BSR          cht_GetParam, R1
// st_stuff.c:636   if (gamemode == commercial)
  MOV.L        gamemode, RD26
  BRNE.Q       2, RD26, .L00802BAC
// st_stuff.c:637   {
  ADD          R2, 256, RQ27
  MOV.B        (RQ27, 0), RQ23
  ADDS.L       RQ23, -48, RQ8
  ADD          R0, 10, R5
  MULS.L       RQ8, R5, RQ23
  ADDS.L       RQ23, 33, RQ8
  MOV.B        (RQ27, 1), RQ23
  ADDS.L       RQ8, RQ23, RQ21
  ADDS.L       RQ21, -48, RQ8
  ADDS.L       RQ8, -1, RD26
  MOV.L        RD26, (R2, 236)
  MOV.B        (RQ27, 0), RQ23
  ADDS.L       RQ23, -48, RQ21
  ADD          R0, 10, R5
  MULS.L       RQ21, R5, RQ8
  MOV.B        (RQ27, 1), RQ23
  ADDS.L       RQ8, RQ23, RQ21
  ADDS.L       RQ21, -48, RQ8
  BRLE.L       35, RQ8, .L00802BAD
// st_stuff.c:641   plyr->message = STSTR_NOMUS;
  MOV          .L00C02FBB, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802BAE, R0

.L00802BAD:
// st_stuff.c:643   S_ChangeMusic(musnum, 1);
  MOV.L        (R2, 236), RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1

.L00802BAE:
  BSR          .L00802BAF, R0

.L00802BAC:
// st_stuff.c:646   {
  ADD          R2, 256, RQ27
  MOV.B        (RQ27, 0), RQ23
  ADDS.L       RQ23, -49, RQ21
  ADD          R0, 9, R5
  MULS.L       RQ21, R5, RQ8
  ADDS.L       RQ8, 1, RQ23
  MOV.B        (RQ27, 1), RQ21
  ADDS.L       RQ21, -49, RQ8
  ADDS.L       RQ23, RQ8, RD26
  MOV.L        RD26, (R2, 236)
  MOV.B        (RQ27, 0), RQ23
  ADDS.L       RQ23, -49, RQ21
  ADD          R0, 9, R5
  MULS.L       RQ21, R5, RQ8
  MOV.B        (RQ27, 1), RQ23
  ADDS.L       RQ8, RQ23, RQ21
  ADDS.L       RQ21, -49, RQ8
  BRLE.L       31, RQ8, .L00802BB0
// st_stuff.c:650   plyr->message = STSTR_NOMUS;
  MOV          .L00C02FBB, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802BB1, R0

.L00802BB0:
// st_stuff.c:652   S_ChangeMusic(musnum, 1);
  MOV.L        (R2, 236), RD10
  ADD          R0, 1, RD11
  BSR          S_ChangeMusic, R1

.L00802BB1:

.L00802BAF:
  BSR          .L00802BB2, R0

.L00802BAB:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ23
  MOV          cheat_noclip, RQ9
  SHAD.Q       RQ23, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          RQ9, 0, RQ10
  SHAD.Q       RQ8, 56, RD11
  SHAR.Q       RD11, 56, RD11
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ21
  BRNE.L       R0, RQ21, .L00802BB4
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ21
  MOV          cheat_commercial_noclip, RQ9
  SHAD.Q       RQ21, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00802BB4
  BSR          .L00802BB3, R0

.L00802BB4:
// st_stuff.c:659   {	
  MOV.Q        TU7A00CB73/plyr, RQ27
  MOV.L        (RQ27, 200), RQ8
  XOR          RQ8, 1, RQ26
  MOV.L        RQ26, (RQ27, 200)
  MOV.L        (RQ27, 200), RQ8
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ8, .L00802BB6
// st_stuff.c:663   plyr->message = STSTR_NCON;
  MOV          .L00C02FBC, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802BB7, R0

.L00802BB6:
// st_stuff.c:665   plyr->message = STSTR_NCOFF;
  MOV          .L00C02FBD, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)

.L00802BB7:

.L00802BB3:

.L00802BB2:

.L00802BAA:

.L00802B9F:

.L00802B97:
// st_stuff.c:668   for (i=0;i<6;i++)
  ADD          R0, 0, RD18

.L00802BB8:
// st_stuff.c:669   {
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_powerup, RQ25
  SHAD.L       RD18, 4, RQ9
  ADD          RQ25, RQ9, RQ9
  SHAD.Q       RQ26, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  MOV.Q        RQ11, (R2, 136)
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00802BBB
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 48, RQ9
  MOV.L        (RQ9, RD18), RQ27
  BRNE.L       R0, RQ27, .L00802BBC
// st_stuff.c:673   P_GivePower( plyr, i);
  MOV.Q        TU7A00CB73/plyr, RQ10
  ADD          RD18, 0, RD11
  BSR          P_GivePower, R1
  BSR          .L00802BBD, R0

.L00802BBC:
  BREQ.Q       1, RD18, .L00802BBE
// st_stuff.c:675   plyr->powers[i] = 1;
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 48, RQ9
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, RD18)
  BSR          .L00802BBF, R0

.L00802BBE:
// st_stuff.c:677   plyr->powers[i] = 0;
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 48, RQ9
  MOV.L        RD0, (RQ9, RD18)

.L00802BBF:

.L00802BBD:
// st_stuff.c:679   plyr->message = STSTR_BEHOLDX;
  MOV          .L00C02FBE, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)

.L00802BBB:
  ADDS.L       RD18, 1, RD18
  BRLT.L       6, RD18, .L00802BB8

.L00802BBA:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_powerup, RQ25
  ADD          R0, 6, RD24
  SHAD.L       RD24, 4, RQ9
  ADD          RQ25, RQ9, RQ9
  SHAD.Q       RQ26, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  MOV.Q        RQ26, (R2, 136)
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00802BC0
// st_stuff.c:685   {
  MOV          .L00C02FBF, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
  BSR          .L00802BC1, R0

.L00802BC0:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV          cheat_choppers, RQ9
  SHAD.Q       RQ8, 56, RQ11
  SHAR.Q       RQ11, 56, RQ11
  ADD          RQ9, 0, RQ10
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ26
  BREQ.L       R0, RQ26, .L00802BC2
// st_stuff.c:690   {
  MOV.Q        TU7A00CB73/plyr, RQ27
  ADD          RQ27, 124, RQ9
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ9, 28)
// st_stuff.c:692   plyr->powers[pw_invulnerability] = true;
  ADD          RQ27, 48, RQ9
  MOV.L        RD26, (RQ9, 0)
// st_stuff.c:693   plyr->message = STSTR_CHOPPERS;
  MOV          .L00C02FC0, RQ25
  MOV.Q        RQ25, (RQ27, 224)
  BSR          .L00802BC3, R0

.L00802BC2:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_mypos, RQ9
  SHAD.Q       RQ26, 56, RQ22
  SHAR.Q       RQ22, 56, RQ22
  ADD          RQ9, 0, RQ10
  ADD          RQ22, 0, RD11
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ25
  BREQ.L       R0, RQ25, .L00802BC4
// st_stuff.c:699   sprintf(buf, "ang=0x%8x;x,y=(0x%8x,0x%8x)",
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ9
  MOV.L        (RQ9, 28), RQ14
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ9
  MOV.L        (RQ9, 24), RQ22
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (RQ25, 0), RQ9
  MOVU.L       (RQ9, 56), RQ20
  MOV          ST_Responder/buf!19, RQ10
  MOV          .L00C02FC1, RQ11
  ADD          RQ20, 0, RD12
  ADD          RQ22, 0, RD13
  BSR          sprintf, R1
// st_stuff.c:703   plyr->message = buf;
  MOV          ST_Responder/buf!19, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)

.L00802BC4:

.L00802BC3:

.L00802BC1:

.L00802B92:
  MOV.Q        (R2, 248), RQ27
  MOV.L        (RQ27, 4), RQ26
  MOV          cheat_clev, RQ9
  SHAD.Q       RQ26, 56, RQ20
  SHAR.Q       RQ20, 56, RQ20
  ADD          RQ9, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ22
  BREQ.L       R0, RQ22, .L00802BC5
// st_stuff.c:709   {
// st_stuff.c:714   cht_GetParam(&cheat_clev, buf);
  MOV          cheat_clev, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R2, 272, RQ11
  BSR          cht_GetParam, R1
// st_stuff.c:716   if (gamemode == commercial)
  MOV.L        gamemode, RD27
  BRNE.Q       2, RD27, .L00802BC6
// st_stuff.c:717   {
  MOV.L        RD0, (R2, 220)
// st_stuff.c:719   map = (buf[0] - '0')*10 + buf[1] - '0';
  ADD          R2, 272, RQ27
  MOV.B        (RQ27, 0), RQ22
  ADDS.L       RQ22, -48, RQ20
  ADD          R0, 10, R5
  MULS.L       RQ20, R5, RQ22
  MOV.B        (RQ27, 1), RQ20
  ADDS.L       RQ22, RQ20, RQ26
  ADDS.L       RQ26, -48, RD25
  MOV.L        RD25, (R2, 216)
  BSR          .L00802BC7, R0

.L00802BC6:
// st_stuff.c:722   {
  ADD          R2, 272, RQ27
  MOV.B        (RQ27, 0), RQ22
  ADDS.L       RQ22, -48, RD26
  MOV.L        RD26, (R2, 220)
// st_stuff.c:724   map = buf[1] - '0';
  MOV.B        (RQ27, 1), RQ20
  ADDS.L       RQ20, -48, RD25
  MOV.L        RD25, (R2, 216)

.L00802BC7:
// st_stuff.c:728   if (epsd < 1)
  MOV.L        (R2, 220), RD27
  BRLT.L       1, RD27, .L00C00EF0
// st_stuff.c:731   if (map < 1)
  MOV.L        (R2, 216), RD27
  BRLT.L       1, RD27, .L00C00EF0
// st_stuff.c:735   if ((gamemode == retail)
  MOV.L        gamemode, RD27
  ADD          R0, 3, R5
  CMPEQ.Q      RD27, R5, RQ26
  MOV.L        (R2, 220), RD27
  ADD          R0, 4, R5
  CMPGT.Q      RD27, R5, RQ22
  MOV.L        (R2, 216), RD25
  ADD          R0, 9, R5
  CMPGT.Q      RD25, R5, RQ20
  OR           RQ22, RQ20, RQ24
  BTSTN.L      RQ24, RQ26, .L00C00EF0
// st_stuff.c:739   if ((gamemode == registered)
  MOV.L        gamemode, RD27
  ADD          R0, 1, R5
  CMPEQ.Q      RD27, R5, RQ22
  MOV.L        (R2, 220), RD27
  ADD          R0, 3, R5
  CMPGT.Q      RD27, R5, RQ20
  MOV.L        (R2, 216), RD26
  ADD          R0, 9, R5
  CMPGT.Q      RD26, R5, RQ25
  OR           RQ20, RQ25, RQ24
  BTSTN.L      RQ24, RQ22, .L00C00EF0
// st_stuff.c:743   if ((gamemode == shareware)
  MOV.L        gamemode, RD27
  CMPEQ.Q      RD27, R0, RQ22
  MOV.L        (R2, 220), RD27
  ADD          R0, 1, R5
  CMPGT.Q      RD27, R5, RQ20
  MOV.L        (R2, 216), RD26
  ADD          R0, 9, R5
  CMPGT.Q      RD26, R5, RQ25
  OR           RQ20, RQ25, RQ24
  BTSTN.L      RQ24, RQ22, .L00C00EF0
// st_stuff.c:747   if ((gamemode == commercial)
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ22
  MOV.L        (R2, 220), RD27
  ADD          R0, 1, R5
  CMPGT.Q      RD27, R5, RQ20
  MOV.L        (R2, 216), RD26
  ADD          R0, 34, R5
  CMPGT.Q      RD26, R5, RQ25
  OR           RQ20, RQ25, RQ24
  BTSTN.L      RQ24, RQ22, .L00C00EF0
// st_stuff.c:752   plyr->message = STSTR_CLEV;
  MOV          .L00C02FC2, RQ27
  MOV.Q        TU7A00CB73/plyr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
// st_stuff.c:753   G_DeferedInitNew(gameskill, epsd, map);
  MOV.L        gameskill, RD10
  MOV.L        (R2, 220), RD11
  MOV.L        (R2, 216), RD12
  BSR          G_DeferedInitNew, R1

.L00802BC5:

.L00802B91:

.L00802B90:
// st_stuff.c:755   }
  ADD          R0, 0, RD10
  BSR          .L00C02FB5, R0

.L00C00EF0:
  ADD          R0, 0, RQ10

.L00C02FB5:
  ADD          R2, 496, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

AM_Responder:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
  ADD          RQ10, 0, RQ21
// am_map.c:628   rc = false;
  ADD          R0, 0, RD22
// am_map.c:630   if (!automapactive)
  MOV.L        automapactive, RD27
  BRNE.L       R0, RD27, .L008017B2
  MOV.L        (RQ21, 0), RQ8
  BRNE.L       R0, RQ8, .L008017B3
  MOV.L        (RQ21, 4), RQ8
  BRNE.Q       9, RQ8, .L008017B3

.L008017B4:
// am_map.c:633   {
  BSR          AM_Start, R1
// am_map.c:635   viewactive = false;
  MOV.L        RD0, viewactive
// am_map.c:636   rc = true;
  ADD          R0, 1, RD22

.L008017B3:
  BSR          .L008017B6, R0

.L008017B2:
  MOV.L        (RQ21, 0), RQ8
  BRNE.L       R0, RQ8, .L008017B7
// am_map.c:643   rc = true;
  ADD          R0, 1, RD22
// am_map.c:644   switch(ev->data1)
  MOV.L        (RQ21, 4), RQ8
  AND          RQ8, -1, RQ9
  BRGE.L       103, RQ9, .L008017C6
  BREQ.Q       9, RQ8, .L008017BF
  BREQ.Q       45, RQ8, .L008017BD
  BREQ.Q       48, RQ8, .L008017C0
  BREQ.Q       61, RQ8, .L008017BE
  BREQ.Q       99, RQ8, .L008017C4
  BREQ.Q       102, RQ8, .L008017C1

.L008017C6:
  BREQ.Q       103, RQ8, .L008017C2
  BREQ.Q       109, RQ8, .L008017C3
  BREQ.Q       172, RQ8, .L008017BA
  BREQ.Q       173, RQ8, .L008017BB
  BREQ.Q       174, RQ8, .L008017B9
  BREQ.Q       175, RQ8, .L008017BC
  BSR          .L008017C5, R0

.L008017B9:
// am_map.c:646   case AM_PANRIGHTKEY: // pan right
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017C7
// am_map.c:647   if (!followplayer) m_paninc.x = FTOM(F_PANINC);
  LUI          64, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RQ9, (RQ27, 0)
  BSR          .L008017C8, R0

.L008017C7:
// am_map.c:648   else rc = false;
  ADD          R0, 0, RD22

.L008017C8:
// am_map.c:649   break;
  BSR          .L008017B8, R0

.L008017BA:
// am_map.c:650   case AM_PANLEFTKEY: // pan left
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017C9
// am_map.c:651   if (!followplayer) m_paninc.x = -FTOM(F_PANINC);
  LUI          64, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       R0, RQ9, RQ18
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RQ18, (RQ27, 0)
  BSR          .L008017CA, R0

.L008017C9:
// am_map.c:652   else rc = false;
  ADD          R0, 0, RD22

.L008017CA:
// am_map.c:653   break;
  BSR          .L008017B8, R0

.L008017BB:
// am_map.c:654   case AM_PANUPKEY: // pan up
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017CB
// am_map.c:655   if (!followplayer) m_paninc.y = FTOM(F_PANINC);
  LUI          64, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RQ9, (RQ27, 4)
  BSR          .L008017CC, R0

.L008017CB:
// am_map.c:656   else rc = false;
  ADD          R0, 0, RD22

.L008017CC:
// am_map.c:657   break;
  BSR          .L008017B8, R0

.L008017BC:
// am_map.c:658   case AM_PANDOWNKEY: // pan down
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017CD
// am_map.c:659   if (!followplayer) m_paninc.y = -FTOM(F_PANINC);
  LUI          64, RD10
  MOV.L        TU7A00C41B/scale_ftom, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RQ9
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RQ9, (RQ27, 4)
  BSR          .L008017CE, R0

.L008017CD:
// am_map.c:660   else rc = false;
  ADD          R0, 0, RD22

.L008017CE:
// am_map.c:661   break;
  BSR          .L008017B8, R0

.L008017BD:
// am_map.c:662   case AM_ZOOMOUTKEY: // zoom out
  LDIZ         0x0000FAFA, RD27
  MOV.L        RD27, TU7A00C41B/mtof_zoommul
// am_map.c:664   ftom_zoommul = M_ZOOMIN;
  ADD          R0, 0x0001051E, RD27
  MOV.L        RD27, TU7A00C41B/ftom_zoommul
// am_map.c:665   break;
  BSR          .L008017B8, R0

.L008017BE:
// am_map.c:666   case AM_ZOOMINKEY: // zoom in
  ADD          R0, 0x0001051E, RD27
  MOV.L        RD27, TU7A00C41B/mtof_zoommul
// am_map.c:668   ftom_zoommul = M_ZOOMOUT;
  LDIZ         0x0000FAFA, RD27
  MOV.L        RD27, TU7A00C41B/ftom_zoommul
// am_map.c:669   break;
  BSR          .L008017B8, R0

.L008017BF:
// am_map.c:670   case AM_ENDKEY:
  MOV.L        RD0, AM_Responder/bigstate!33
// am_map.c:672   viewactive = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, viewactive
// am_map.c:673   AM_Stop ();
  BSR          AM_Stop, R1
// am_map.c:674   break;
  BSR          .L008017B8, R0

.L008017C0:
// am_map.c:675   case AM_GOBIGKEY:
  MOV.L        AM_Responder/bigstate!33, RD27
  CMPEQ.Q      RD27, R0, RD27
// am_map.c:677   if (bigstate)
  MOV.L        RD27, AM_Responder/bigstate!33
  BREQ.L       R0, RD27, .L008017CF
// am_map.c:678   {
  BSR          AM_saveScaleAndLoc, R1
// am_map.c:680   AM_minOutWindowScale();
  BSR          AM_minOutWindowScale, R1
  BSR          .L008017D0, R0

.L008017CF:
// am_map.c:682   else AM_restoreScaleAndLoc();
  BSR          AM_restoreScaleAndLoc, R1

.L008017D0:
// am_map.c:683   break;
  BSR          .L008017B8, R0

.L008017C1:
// am_map.c:684   case AM_FOLLOWKEY:
  MOV.L        TU7A00C41B/followplayer, RD27
  CMPEQ.Q      RD27, R0, RD27
// am_map.c:686   f_oldloc.x = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD26
  MOV          TU7A00C41B/f_oldloc, RQ13
  MOV.L        RD26, (RQ13, 0)
// am_map.c:687   plr->message = followplayer ? AMSTR_FOLLOWON : AMSTR_FOLLOWOFF;
  MOV.L        RD27, TU7A00C41B/followplayer
  BREQ.L       R0, RD27, .L008017D1
  MOV          .L00C02FC9, RQ23
  BSR          .L008017D2, R0

.L008017D1:
  MOV          .L00C02FCA, RQ23

.L008017D2:
  MOV.Q        TU7A00C41B/plr, RQ27
  MOV.Q        RQ23, (RQ27, 224)
// am_map.c:688   break;
  BSR          .L008017B8, R0

.L008017C2:
// am_map.c:689   case AM_GRIDKEY:
  MOV.L        TU7A00C41B/grid, RD27
  CMPEQ.Q      RD27, R0, RD27
// am_map.c:691   plr->message = grid ? AMSTR_GRIDON : AMSTR_GRIDOFF;
  MOV.L        RD27, TU7A00C41B/grid
  BREQ.L       R0, RD27, .L008017D3
  MOV          .L00C02FCB, RQ23
  BSR          .L008017D4, R0

.L008017D3:
  MOV          .L00C02FCC, RQ23

.L008017D4:
  MOV.Q        TU7A00C41B/plr, RQ27
  MOV.Q        RQ23, (RQ27, 224)
// am_map.c:692   break;
  BSR          .L008017B8, R0

.L008017C3:
// am_map.c:693   case AM_MARKKEY:
  MOV          AM_Responder/buffer!33, RQ10
  MOV          .L00C02FCD, RQ11
  MOV          .L00C02FCE, RQ12
  MOV.L        TU7A00C41B/markpointnum, RD13
  BSR          sprintf, R1
// am_map.c:695   plr->message = buffer;
  MOV          AM_Responder/buffer!33, RQ27
  MOV.Q        TU7A00C41B/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
// am_map.c:696   AM_addMark();
  BSR          AM_addMark, R1
// am_map.c:697   break;
  BSR          .L008017B8, R0

.L008017C4:
// am_map.c:698   case AM_CLEARMARKKEY:
  BSR          AM_clearMarks, R1
// am_map.c:700   plr->message = AMSTR_MARKSCLEARED;
  MOV          .L00C02FCF, RQ27
  MOV.Q        TU7A00C41B/plr, RQ26
  MOV.Q        RQ27, (RQ26, 224)
// am_map.c:701   break;
  BSR          .L008017B8, R0

.L008017C5:
// am_map.c:702   default:
  MOV.L        RD0, AM_Responder/cheatstate!33
// am_map.c:704   rc = false;
  ADD          R0, 0, RD22

.L008017B8:
  MOV.L        deathmatch, RD27
  BRNE.L       R0, RD27, .L008017D5
  MOV.L        (RQ21, 4), RQ9
  MOV          TU7A00C41B/cheat_amap, RQ23
  SHAD.Q       RQ9, 56, RQ20
  SHAR.Q       RQ20, 56, RQ20
  ADD          RQ23, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          cht_CheckCheat, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L008017D5

.L008017D6:
// am_map.c:707   {
  ADD          R0, 0, RD22
// am_map.c:709   cheating = (cheating+1) % 3;
  MOV.L        TU7A00C41B/cheating, RD27
  ADDS.L       RD27, 1, RQ18
  ADD          RQ18, 0, RD27
  MOV.L        RD27, TU7A00C41B/cheating
  ADD          R0, 3, RD27
  MOV.L        TU7A00C41B/cheating, RD26
  MODS.L       RD26, RD27, RD26
  MOV.L        RD26, TU7A00C41B/cheating

.L008017D5:
  BSR          .L008017D8, R0

.L008017B7:
  MOV.L        (RQ21, 0), RQ20
  BRNE.Q       1, RQ20, .L008017D9
// am_map.c:714   {
  ADD          R0, 0, RD22
// am_map.c:716   switch (ev->data1)
  MOV.L        (RQ21, 4), RQ18
  BREQ.Q       174, RQ18, .L008017DB
  BREQ.Q       172, RQ18, .L008017DC
  BREQ.Q       173, RQ18, .L008017DD
  BREQ.Q       175, RQ18, .L008017DE
  BREQ.Q       45, RQ18, .L008017DF
  BREQ.Q       61, RQ18, .L008017E0
  BSR          .L008017DA, R0

.L008017DB:
// am_map.c:718   case AM_PANRIGHTKEY:
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017E1
// am_map.c:719   if (!followplayer) m_paninc.x = 0;
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RD0, (RQ27, 0)

.L008017E1:
// am_map.c:720   break;
  BSR          .L008017DA, R0

.L008017DC:
// am_map.c:721   case AM_PANLEFTKEY:
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017E2
// am_map.c:722   if (!followplayer) m_paninc.x = 0;
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RD0, (RQ27, 0)

.L008017E2:
// am_map.c:723   break;
  BSR          .L008017DA, R0

.L008017DD:
// am_map.c:724   case AM_PANUPKEY:
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017E3
// am_map.c:725   if (!followplayer) m_paninc.y = 0;
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RD0, (RQ27, 4)

.L008017E3:
// am_map.c:726   break;
  BSR          .L008017DA, R0

.L008017DE:
// am_map.c:727   case AM_PANDOWNKEY:
  MOV.L        TU7A00C41B/followplayer, RD27
  BRNE.L       R0, RD27, .L008017E4
// am_map.c:728   if (!followplayer) m_paninc.y = 0;
  MOV          TU7A00C41B/m_paninc, RQ27
  MOV.L        RD0, (RQ27, 4)

.L008017E4:
// am_map.c:729   break;
  BSR          .L008017DA, R0

.L008017DF:

.L008017E0:
// am_map.c:731   case AM_ZOOMINKEY:
  LUI          16, RD27
  MOV.L        RD27, TU7A00C41B/mtof_zoommul
// am_map.c:733   ftom_zoommul = FRACUNIT;
  MOV.L        RD27, TU7A00C41B/ftom_zoommul
// am_map.c:734   break;

.L008017DA:

.L008017D9:

.L008017D8:

.L008017B6:
// am_map.c:738   return rc;
  ADD          RD22, 0, RD10

.L00C02FC8:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_ZMovement:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -344, R2
  ADD          RQ10, 0, RQ18
// p_mobj.c:271   if (mo->player && mo->z < mo->floorz)
  MOV.Q        (RQ18, 192), RQ21
  BREQ.Q       R0, RQ21, .L00802273
  MOV.L        (RQ18, 32), RQ9
  MOV.L        (RQ18, 96), RQ8
  BRGE.L       RQ8, RQ9, .L00802273

.L00802274:
// p_mobj.c:272   {
  MOV.Q        (RQ18, 192), RQ21
  MOV.L        (RQ21, 24), RQ9
  MOV.L        (RQ18, 96), RQ8
  MOV.L        (RQ18, 32), RQ23
  SUBS.L       RQ8, RQ23, RQ22
  SUBS.L       RQ9, RQ22, RQ8
  MOV.L        RQ8, (RQ21, 24)
// p_mobj.c:275   mo->player->deltaviewheight
  MOV.L        (RQ21, 24), RQ23
  LUI          656, R5
  SUBS.L       R5, RQ23, RQ22
  SHAR         RQ22, 3, RQ9
  MOV.L        RQ9, (RQ21, 28)

.L00802273:
// p_mobj.c:280   mo->z += mo->momz;
  MOV.L        (RQ18, 32), RQ8
  MOV.L        (RQ18, 120), RQ23
  ADDS.L       RQ8, RQ23, RQ22
  MOV.L        RQ22, (RQ18, 32)
// p_mobj.c:282   if ( mo->flags & MF_FLOAT
  MOV.L        (RQ18, 160), RQ9
  LUI          4, RD27
  BTST.L       RD27, RQ9, .L00802276
  MOV.Q        (RQ18, 176), RQ21
  BREQ.Q       R0, RQ21, .L00802276

.L00802277:
  MOV.L        (RQ18, 160), RQ9
  LUI          4096, RD27
  BTSTN.L      RD27, RQ9, .L00802279
  MOV.L        (RQ18, 160), RQ8
  LUI          512, RD27
  BTSTN.L      RD27, RQ8, .L00802279

.L0080227A:
// p_mobj.c:288   {
  MOV.L        (RQ18, 28), RQ23
  MOV.Q        (RQ18, 176), RQ21
  MOV.L        (RQ21, 28), RQ9
  SUBS.L       RQ23, RQ9, RQ8
  MOV.L        (RQ18, 24), RQ23
  MOV.L        (RQ21, 24), RQ22
  SUBS.L       RQ23, RQ22, RQ9
  ADDS.L       RQ9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AproxDistance, R1
  ADD          RQ10, 0, RD27
// p_mobj.c:292   delta =(mo->target->z + (mo->height>>1)) - mo->z;
  MOV.Q        (RQ18, 176), RQ21
  MOV.L        (RQ21, 32), RQ9
  MOV.L        (RQ18, 108), RQ8
  SHAR         RQ8, 1, RQ23
  ADDS.L       RQ9, RQ23, RQ22
  MOV.L        (RQ18, 32), RQ9
  SUBS.L       RQ22, RQ9, RD20
  CMPLT.Q      RD20, R0, RQ8
  ADD          R0, 3, R5
  MULS.L       RD20, R5, RQ23
  SUBS.L       R0, RQ23, RQ22
  CMPGT.Q      RQ22, RD27, RQ9
  MOV.L        RD27, (R2, 116)
  BTST.L       RQ9, RQ8, .L0080227C
// p_mobj.c:295   mo->z -= FLOATSPEED;
  MOV.L        (RQ18, 32), RQ8
  ADDS.L       RQ8, 0xFFFFFFFFFFFC0000, RQ23
  MOV.L        RQ23, (RQ18, 32)
  BSR          .L0080227D, R0

.L0080227C:
  CMPGT.Q      RD20, R0, RQ22
  ADD          R0, 3, R5
  MULS.L       RD20, R5, RQ9
  MOV.L        (R2, 116), RD27
  CMPGT.Q      RQ9, RD27, RQ8
  BTST.L       RQ8, RQ22, .L0080227E
// p_mobj.c:297   mo->z += FLOATSPEED;			
  MOV.L        (RQ18, 32), RQ23
  ADDS.L       RQ23, 0x00040000, RQ22
  MOV.L        RQ22, (RQ18, 32)

.L0080227E:

.L0080227D:

.L00802279:

.L00802276:
// p_mobj.c:303   if (mo->z <= mo->floorz)
  MOV.L        (RQ18, 32), RQ9
  MOV.L        (RQ18, 96), RQ8
  BRGT.L       RQ8, RQ9, .L0080227F
  MOV.L        (RQ18, 120), RQ23
  BRGE.L       R0, RQ23, .L00802280
  MOV.Q        (RQ18, 192), RQ21
  BREQ.Q       R0, RQ21, .L00802281
  MOV.L        (RQ18, 120), RQ9
  LUI          -128, RD27
  BRGE.L       RD27, RQ9, .L00802281

.L00802282:
// p_mobj.c:326   mo->player->deltaviewheight = mo->momz>>3;
  MOV.L        (RQ18, 120), RQ8
  SHAR         RQ8, 3, RQ23
  MOV.Q        (RQ18, 192), RQ21
  MOV.L        RQ23, (RQ21, 28)
// p_mobj.c:327   S_StartSound (mo, sfx_oof);
  ADD          RQ18, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1

.L00802281:
// p_mobj.c:328   }
  MOV.L        RD0, (RQ18, 120)

.L00802280:
// p_mobj.c:330   }
  MOV.L        (RQ18, 96), RQ9
  MOV.L        RQ9, (RQ18, 32)
  MOV.L        (RQ18, 160), RQ8
  LUI          4096, RD27
  BTST.L       RD27, RQ8, .L00802284
// p_mobj.c:336   mo->momz = -mo->momz;
  MOV.L        (RQ18, 120), RQ23
  SUBS.L       R0, RQ23, RQ22
  MOV.L        RQ22, (RQ18, 120)

.L00802284:
  MOV.L        (RQ18, 160), RQ9
  LUI          16, RD27
  BTST.L       RD27, RQ9, .L00802285
  MOV.L        (RQ18, 160), RQ8
  LUI          1, RD27
  BTSTN.L      RD27, RQ8, .L00802285

.L00802286:
// p_mobj.c:341   {
  ADD          RQ18, 0, RQ10
  BSR          P_ExplodeMissile, R1
// p_mobj.c:343   return;
  BSR          .L00C02FD5, R0

.L00802285:
  BSR          .L00802288, R0

.L0080227F:
  MOV.L        (RQ18, 160), RQ23
  ADD          R0, 512, RD27
  BTSTN.L      RD27, RQ23, .L00802289
  MOV.L        (RQ18, 120), RQ22
  BRNE.L       R0, RQ22, .L0080228A
// p_mobj.c:349   mo->momz = -GRAVITY*2;
  LUI          -32, RD27
  MOV.L        RD27, (RQ18, 120)
  BSR          .L0080228B, R0

.L0080228A:
// p_mobj.c:351   mo->momz -= GRAVITY;
  MOV.L        (RQ18, 120), RQ9
  ADDS.L       RQ9, 0xFFFFFFFFFFFF0000, RQ8
  MOV.L        RQ8, (RQ18, 120)

.L0080228B:

.L00802289:

.L00802288:
// p_mobj.c:354   if (mo->z + mo->height > mo->ceilingz)
  MOV.L        (RQ18, 32), RQ23
  MOV.L        (RQ18, 108), RQ22
  ADDS.L       RQ23, RQ22, RQ9
  MOV.L        (RQ18, 100), RQ8
  BRLE.L       RQ8, RQ9, .L0080228C
  MOV.L        (RQ18, 120), RQ23
  BRLE.L       R0, RQ23, .L0080228D
// p_mobj.c:358   mo->momz = 0;
  MOV.L        RD0, (RQ18, 120)

.L0080228D:
// p_mobj.c:359   {	//BGB: ? typo ?
  MOV.L        (RQ18, 100), RQ22
  MOV.L        (RQ18, 108), RQ9
  SUBS.L       RQ22, RQ9, RQ8
  MOV.L        RQ8, (RQ18, 32)
  MOV.L        (RQ18, 160), RQ23
  LUI          4096, RD27
  BTST.L       RD27, RQ23, .L0080228E
// p_mobj.c:364   {	// the skull slammed into something
  MOV.L        (RQ18, 120), RQ22
  SUBS.L       R0, RQ22, RQ9
  MOV.L        RQ9, (RQ18, 120)

.L0080228E:
  MOV.L        (RQ18, 160), RQ8
  LUI          16, RD27
  BTST.L       RD27, RQ8, .L0080228F
  MOV.L        (RQ18, 160), RQ23
  LUI          1, RD27
  BTSTN.L      RD27, RQ23, .L0080228F

.L00802290:
// p_mobj.c:370   {
  ADD          RQ18, 0, RQ10
  BSR          P_ExplodeMissile, R1
// p_mobj.c:372   return;
  BSR          .L00C02FD5, R0

.L0080228F:

.L0080228C:

.L00C02FD5:
  ADD          R2, 344, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

TKMM_LVA_ArrayInit:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -280, R2
// tk_core/lva_array.c:46   
  MOV.L        tkmm_lva_ntag, RD21
  BRNE.L       R0, RD21, .L00C02FDB
// tk_core/lva_array.c:49   
  BSR          TKMM_LVA_TagInit, R1
// tk_core/lva_array.c:51   
  MOV          .L00C02FDC, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_tagarray
// tk_core/lva_array.c:52   
  MOV          .L00C02FDD, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_variant
// tk_core/lva_array.c:53   
  MOV          .L00C02FDE, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_string
// tk_core/lva_array.c:54   
  MOV          .L00C02FDF, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_wstring
// tk_core/lva_array.c:55   
  MOV          .L00C02FE0, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_ustring
// tk_core/lva_array.c:56   
  MOV          .L00C02FE1, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_classobj
// tk_core/lva_array.c:57   
  MOV          .L00C02FE2, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_pointer
// tk_core/lva_array.c:58   
  MOV          .L00C02FE3, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_byte
// tk_core/lva_array.c:59   
  MOV          .L00C02FE4, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_sbyte
// tk_core/lva_array.c:60   
  MOV          .L00C02FE5, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_short
// tk_core/lva_array.c:61   
  MOV          .L00C02FE6, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_ushort
// tk_core/lva_array.c:62   
  MOV          .L00C02FE7, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_int
// tk_core/lva_array.c:63   
  MOV          .L00C02FE8, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_uint
// tk_core/lva_array.c:64   
  MOV          .L00C02FE9, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_long
// tk_core/lva_array.c:65   
  MOV          .L00C02FEA, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_ulong
// tk_core/lva_array.c:66   
  MOV          .L00C02FEB, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_float
// tk_core/lva_array.c:67   
  MOV          .L00C02FEC, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_double
// tk_core/lva_array.c:68   
  MOV          .L00C02FED, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_int128
// tk_core/lva_array.c:69   
  MOV          .L00C02FEE, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_float128
// tk_core/lva_array.c:70   
  MOV          .L00C02FEF, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_fixnum
// tk_core/lva_array.c:71   
  MOV          .L00C02FF0, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_flonum
// tk_core/lva_array.c:72   
  MOV          .L00C02FF1, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_tagobj
// tk_core/lva_array.c:73   
  MOV          .L00C02FF2, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_cons
// tk_core/lva_array.c:74   
  MOV          .L00C02FF3, RQ10
  BSR          TKMM_LVA_GetTagIndexForName, R1
  MOV.L        RQ10, tkmm_lvatyi_bigint
// tk_core/lva_array.c:76   
  MOV          tkmm_lvatyi_arrmt, RQ21
  MOV.L        tkmm_lvatyi_int, RD20
  MOV.L        RD20, (RQ21, 0)
// tk_core/lva_array.c:77   
  MOV.L        tkmm_lvatyi_long, RD20
  MOV.L        RD20, (RQ21, 4)
// tk_core/lva_array.c:78   
  MOV.L        tkmm_lvatyi_float, RD27
  MOV.L        RD27, (RQ21, 8)
// tk_core/lva_array.c:79   
  MOV.L        tkmm_lvatyi_double, RD27
  MOV.L        RD27, (RQ21, 12)
// tk_core/lva_array.c:80   
  MOV.L        tkmm_lvatyi_pointer, RD27
  MOV.L        RD27, (RQ21, 16)
// tk_core/lva_array.c:81   
  MOV.L        tkmm_lvatyi_variant, RD27
  MOV.L        RD27, (RQ21, 20)
// tk_core/lva_array.c:82   
  MOV.L        RD0, (RQ21, 24)
// tk_core/lva_array.c:83   
  MOV.L        RD20, (RQ21, 28)
// tk_core/lva_array.c:84   
  MOV.L        tkmm_lvatyi_sbyte, RD20
  MOV.L        RD20, (RQ21, 32)
// tk_core/lva_array.c:85   
  MOV.L        tkmm_lvatyi_byte, RD20
  MOV.L        RD20, (RQ21, 36)
// tk_core/lva_array.c:86   
  MOV.L        tkmm_lvatyi_short, RD20
  MOV.L        RD20, (RQ21, 40)
// tk_core/lva_array.c:87   
  MOV.L        tkmm_lvatyi_ushort, RD20
  MOV.L        RD20, (RQ21, 44)
// tk_core/lva_array.c:88   
  MOV.L        tkmm_lvatyi_uint, RD20
  MOV.L        RD20, (RQ21, 48)
// tk_core/lva_array.c:89   
  MOV.L        tkmm_lvatyi_ulong, RD20
  MOV.L        RD20, (RQ21, 52)
// tk_core/lva_array.c:90   
  MOV.L        RD20, (RQ21, 56)
// tk_core/lva_array.c:91   
  MOV.L        RD0, (RQ21, 60)
// tk_core/lva_array.c:93   
  MOV          tkmm_lvatyi_arrmsc, RQ21
  ADD          R0, 2, RD20
  MOV.L        RD20, (RQ21, 0)
// tk_core/lva_array.c:94   
  ADD          R0, 3, RD27
  MOV.L        RD27, (RQ21, 4)
// tk_core/lva_array.c:95   
  MOV.L        RD20, (RQ21, 8)
// tk_core/lva_array.c:96   
  MOV.L        RD27, (RQ21, 12)
// tk_core/lva_array.c:101   
  MOV.L        RD27, (RQ21, 16)
// tk_core/lva_array.c:102   
  MOV.L        RD27, (RQ21, 20)
// tk_core/lva_array.c:104   
  MOV.L        RD20, (RQ21, 24)
// tk_core/lva_array.c:105   
  MOV.L        RD27, (RQ21, 28)
// tk_core/lva_array.c:106   
  MOV.L        RD0, (RQ21, 32)
// tk_core/lva_array.c:107   
  MOV.L        RD0, (RQ21, 36)
// tk_core/lva_array.c:108   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ21, 40)
// tk_core/lva_array.c:109   
  MOV.L        RD26, (RQ21, 44)
// tk_core/lva_array.c:110   
  MOV.L        RD20, (RQ21, 48)
// tk_core/lva_array.c:111   
  MOV.L        RD27, (RQ21, 52)
// tk_core/lva_array.c:112   
  MOV.L        RD27, (RQ21, 56)
// tk_core/lva_array.c:113   
  MOV.L        RD27, (RQ21, 60)
// tk_core/lva_array.c:115   
  ADD          R0, 96, RD10
  BSR          tk_malloc, R1
  ADD          RQ10, 0, RQ9
// tk_core/lva_array.c:119   
  ADD          RQ9, 0, RQ18
// tk_core/lva_array.c:121   
  MOV.Q        RQ18, tkmm_lva_clsvt
// tk_core/lva_array.c:122   
  ADD          RQ18, 40, RQ18
// tk_core/lva_array.c:123   
  ADD          RQ18, 0, RQ21
// tk_core/lva_array.c:124   
  ADD          RQ18, 24, RQ18
// tk_core/lva_array.c:125   
  ADD          RQ18, 0, RQ22
// tk_core/lva_array.c:127   
  ADD          RQ21, 0, RQ25
  SUB          RQ25, RQ9, RQ8
  ADDU.L       RQ8, R0, RQ23
  MOVU.L       RQ23, (RQ21, 0)
// tk_core/lva_array.c:128   
  SUB          RQ22, RQ9, RQ8
  ADDU.L       RQ8, R0, RQ23
  MOVU.L       RQ23, (RQ21, 4)
  MOV.Q        RQ21, tkmm_lva_clsinfo
// tk_core/lva_array.c:129   
  MOV          .L00C02FF4, RQ21
  MOV.Q        (RQ21, 0), RQ10
  MOV.Q        RQ10, (RQ22, 0)
  MOV.W        (RQ21, 8), RQ10
  MOV.W        RQ10, (RQ22, 8)
  MOV.B        (RQ21, 10), RQ10
  MOV.B        RQ10, (RQ22, 10)
// tk_core/lva_array.c:131   
  MOV.Q        tkmm_lva_clsinfo, RQ24
  MOV.Q        tkmm_lva_clsvt, RQ19
  MOV.Q        RQ24, (RQ19, 0)
// tk_core/lva_array.c:133   
  BSR          TKMM_LVA_InitTagOpr, R1

.L00C02FDB:
  ADD          R2, 280, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SpawnSpecials:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -312, R2
// p_spec.c:1312   episode = 1;
  ADD          R0, 1, RD21
// p_spec.c:1313   if (W_CheckNumForName("texture2") >= 0)
  MOV          .L00C02FFB, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ23
  BRLT.L       R0, RQ23, .L0080215A
// p_spec.c:1314   episode = 2;
  ADD          R0, 2, RD21

.L0080215A:
// p_spec.c:1318   levelTimer = false;
  MOV.L        RD0, levelTimer
// p_spec.c:1320   i = M_CheckParm("-avg");
  MOV          .L00C02D6A, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// p_spec.c:1321   if (i && deathmatch)
  BREQ.L       R0, RD18, .L0080215B
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L0080215B

.L0080215C:
// p_spec.c:1322   {
  ADD          R0, 1, RD27
  MOV.L        RD27, levelTimer
// p_spec.c:1324   levelTimeCount = 20 * 60 * 35;
  LDIZ         0x0000A410, RD27
  MOV.L        RD27, levelTimeCount

.L0080215B:
// p_spec.c:1327   i = M_CheckParm("-timer");
  MOV          .L00C02D66, RQ10
  BSR          M_CheckParm, R1
  ADD          RQ10, 0, RD18
// p_spec.c:1328   if (i && deathmatch)
  BREQ.L       R0, RD18, .L0080215E
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L0080215E

.L0080215F:
// p_spec.c:1331   time = atoi(myargv[i+1]) * 60 * 35;
  ADDS.L       RD18, 1, RQ23
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ23), RQ22
  ADD          RQ22, 0, RQ10
  BSR          atoi, R1
  ADD          RQ10, 0, RQ23
  ADD          R0, 60, R5
  MULS.L       RQ23, R5, RQ8
  ADD          R0, 35, R5
  MULS.L       RQ8, R5, RD20
// p_spec.c:1332   levelTimer = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, levelTimer
// p_spec.c:1333   levelTimeCount = time;
  MOV.L        RD20, levelTimeCount

.L0080215E:
// p_spec.c:1337   sector = sectors;
  MOV.Q        sectors, RQ9
// p_spec.c:1338   for (i=0 ; i<numsectors ; i++, sector++)
  ADD          R0, 0, RD18
  MOV.L        numsectors, RD27
  BRGE.L       RD27, RD18, .L00802163

.L00802161:
// p_spec.c:1339   {
  MOV.W        (RQ9, 14), RQ23
  BREQ.L       R0, RQ23, .L00802162
// p_spec.c:1343   switch (sector->special)
  MOV.W        (RQ9, 14), RQ8
  AND          RQ8, 0x0000FFFF, RQ23
  BRGE.L       9, RQ23, .L00802171
  BREQ.Q       1, RQ8, .L00802165
  BREQ.Q       2, RQ8, .L00802166
  BREQ.Q       3, RQ8, .L00802167
  BREQ.Q       4, RQ8, .L00802168
  BREQ.Q       8, RQ8, .L00802169

.L00802171:
  BREQ.Q       9, RQ8, .L0080216A
  BREQ.Q       10, RQ8, .L0080216B
  BREQ.Q       12, RQ8, .L0080216C
  BREQ.Q       13, RQ8, .L0080216D
  BREQ.Q       14, RQ8, .L0080216E
  BREQ.Q       17, RQ8, .L0080216F
  BSR          .L00802170, R0

.L00802165:
// p_spec.c:1347   P_SpawnLightFlash (sector);
  ADD          RQ9, 0, RQ10
  BSR          P_SpawnLightFlash, R1
// p_spec.c:1348   break;
  BSR          .L00802164, R0

.L00802166:
// p_spec.c:1352   P_SpawnStrobeFlash(sector,FASTDARK,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 15, RD11
  ADD          R0, 0, RD12
  BSR          P_SpawnStrobeFlash, R1
// p_spec.c:1353   break;
  BSR          .L00802164, R0

.L00802167:
// p_spec.c:1357   P_SpawnStrobeFlash(sector,SLOWDARK,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 35, RD11
  ADD          R0, 0, RD12
  BSR          P_SpawnStrobeFlash, R1
// p_spec.c:1358   break;
  BSR          .L00802164, R0

.L00802168:
// p_spec.c:1362   P_SpawnStrobeFlash(sector,FASTDARK,0);
  ADD          RQ9, 0, RQ10
  ADD          R0, 15, RD11
  ADD          R0, 0, RD12
  BSR          P_SpawnStrobeFlash, R1
// p_spec.c:1363   sector->special = 4;
  ADD          R0, 4, RD27
  MOV.W        RD27, (RQ9, 14)
// p_spec.c:1364   break;
  BSR          .L00802164, R0

.L00802169:
// p_spec.c:1368   P_SpawnGlowingLight(sector);
  ADD          RQ9, 0, RQ10
  BSR          P_SpawnGlowingLight, R1
// p_spec.c:1369   break;
  BSR          .L00802164, R0

.L0080216A:
// p_spec.c:1372   totalsecret++;
  MOV.L        totalsecret, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, totalsecret
// p_spec.c:1373   break;
  BSR          .L00802164, R0

.L0080216B:
// p_spec.c:1377   P_SpawnDoorCloseIn30 (sector);
  ADD          RQ9, 0, RQ10
  BSR          P_SpawnDoorCloseIn30, R1
// p_spec.c:1378   break;
  BSR          .L00802164, R0

.L0080216C:
// p_spec.c:1382   P_SpawnStrobeFlash (sector, SLOWDARK, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 35, RD11
  ADD          R0, 1, RD12
  BSR          P_SpawnStrobeFlash, R1
// p_spec.c:1383   break;
  BSR          .L00802164, R0

.L0080216D:
// p_spec.c:1387   P_SpawnStrobeFlash (sector, FASTDARK, 1);
  ADD          RQ9, 0, RQ10
  ADD          R0, 15, RD11
  ADD          R0, 1, RD12
  BSR          P_SpawnStrobeFlash, R1
// p_spec.c:1388   break;
  BSR          .L00802164, R0

.L0080216E:
// p_spec.c:1392   P_SpawnDoorRaiseIn5Mins (sector, i);
  ADD          RQ9, 0, RQ10
  ADD          RD18, 0, RD11
  BSR          P_SpawnDoorRaiseIn5Mins, R1
// p_spec.c:1393   break;
  BSR          .L00802164, R0

.L0080216F:
// p_spec.c:1395   case 17:
  ADD          RQ9, 0, RQ10
  BSR          P_SpawnFireFlicker, R1
// p_spec.c:1397   break;
  BSR          .L00802164, R0

.L00802170:

.L00802164:

.L00802162:
  ADD          RD18, 0, RQ23
  ADDS.L       RD18, 1, RD18
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 128, RQ9
  MOV.L        numsectors, RD27
  BRLT.L       RD27, RD18, .L00802161

.L00802163:
// p_spec.c:1403   numlinespecials = 0;
  MOV.W        RD0, numlinespecials
// p_spec.c:1404   for (i = 0;i < numlines; i++)
  ADD          R0, 0, RD18
  MOV.L        numlines, RD27
  BRGE.L       RD27, RD18, .L00802174

.L00802172:
// p_spec.c:1405   {
  MOV.Q        lines, RQ27
  ADD          R0, 96, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.W        (RQ13, 26), RQ23
  BREQ.Q       48, RQ23, .L00802176
  BSR          .L00802175, R0

.L00802176:
// p_spec.c:1410   linespeciallist[numlinespecials] = &lines[i];
  MOV.Q        lines, RQ27
  ADD          R0, 96, R5
  MUL.L        RD18, R5, RQ22
  ADD          RQ27, RQ22, RQ22
  MOV          linespeciallist, RQ27
  MOV.W        numlinespecials, RD13
  MOV.Q        RQ22, (RQ27, RD13)
// p_spec.c:1411   numlinespecials++;
  ADDS.L       RD13, 1, RD13
  SHAD.Q       RD13, 48, RD13
  SHAR.Q       RD13, 48, RD13
  MOV.W        RD13, numlinespecials
// p_spec.c:1412   break;

.L00802175:
  ADDS.L       RD18, 1, RD18
  MOV.L        numlines, RD27
  BRLT.L       RD27, RD18, .L00802172

.L00802174:
// p_spec.c:1418   for (i = 0;i < MAXCEILINGS;i++)
  ADD          R0, 0, RD18

.L00802177:
// p_spec.c:1419   activeceilings[i] = NULL;
  MOV          activeceilings, RQ27
  MOV.Q        RQ0, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       30, RD18, .L00802177

.L00802179:
// p_spec.c:1421   for (i = 0;i < MAXPLATS;i++)
  ADD          R0, 0, RD18

.L0080217A:
// p_spec.c:1422   activeplats[i] = NULL;
  MOV          activeplats, RQ27
  MOV.Q        RQ0, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       30, RD18, .L0080217A

.L0080217C:
// p_spec.c:1424   for (i = 0;i < MAXBUTTONS;i++)
  ADD          R0, 0, RD18

.L0080217D:
// p_spec.c:1425   memset(&buttonlist[i],0,sizeof(button_t));
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ22
  ADD          RQ27, RQ22, RQ22
  MOV.Q        RQ0, (RQ22, 0)
  MOV.Q        RQ0, (RQ22, 8)
  MOV.Q        RQ0, (RQ22, 16)
  MOV.Q        RQ0, (RQ22, 24)
  ADDS.L       RD18, 1, RD18
  BRLT.L       16, RD18, .L0080217D

.L0080217F:

.L00C02FFA:
  ADD          R2, 312, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_unloadData:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
// wi_stuff.c:1802   if(wiminus)
  MOV.Q        TU7A00CB85/wiminus, RQ27
  BREQ.Q       R0, RQ27, .L00802AB6
// wi_stuff.c:1803   Z_ChangeTag(wiminus, PU_CACHE);
  MOV.Q        TU7A00CB85/wiminus, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802AB6:
// wi_stuff.c:1805   for (i=0 ; i<10 ; i++)
  ADD          R0, 0, RD18

.L00802AB7:
// wi_stuff.c:1806   {
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  BREQ.Q       R0, RQ9, .L00802ABA
// wi_stuff.c:1808   Z_ChangeTag(num[i], PU_CACHE);
  MOV          TU7A00CB85/num, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802ABA:
  ADDS.L       RD18, 1, RD18
  BRLT.L       10, RD18, .L00802AB7

.L00802AB9:
// wi_stuff.c:1812   if ((gamemode == commercial) || (gamemode == hexen))
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ8
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ23
  OR           RQ8, RQ23, RQ20
  BREQ.L       R0, RQ20, .L00802ABB
// wi_stuff.c:1813   {
  ADD          R0, 0, RD18
  MOV.L        TU7A00CB85/NUMCMAPS, RD27
  BRGE.L       RD27, RD18, .L00802ABE

.L00802ABC:
// wi_stuff.c:1815   {
  MOV.Q        TU7A00CB85/lnames, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  BREQ.Q       R0, RQ9, .L00802ABF
// wi_stuff.c:1817   Z_ChangeTag(lnames[i], PU_CACHE);
  MOV.Q        TU7A00CB85/lnames, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802ABF:
  ADDS.L       RD18, 1, RD18
  MOV.L        TU7A00CB85/NUMCMAPS, RD27
  BRLT.L       RD27, RD18, .L00802ABC

.L00802ABE:
  BSR          .L00802AC0, R0

.L00802ABB:
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        (RQ27, 0), RQ9
  BREQ.Q       R0, RQ9, .L00802AC1
// wi_stuff.c:1823   Z_ChangeTag(yah[0], PU_CACHE);
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        (RQ27, 0), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802AC1:
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        (RQ27, 8), RQ9
  BREQ.Q       R0, RQ9, .L00802AC2
// wi_stuff.c:1825   Z_ChangeTag(yah[1], PU_CACHE);
  MOV          TU7A00CB85/yah, RQ27
  MOV.Q        (RQ27, 8), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802AC2:
  MOV.Q        TU7A00CB85/splat, RQ27
  BREQ.Q       R0, RQ27, .L00802AC3
// wi_stuff.c:1828   Z_ChangeTag(splat, PU_CACHE);
  MOV.Q        TU7A00CB85/splat, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L00802AC3:
// wi_stuff.c:1830   for (i=0 ; i<NUMMAPS ; i++)
  ADD          R0, 0, RD18

.L00802AC4:
// wi_stuff.c:1831   Z_ChangeTag(lnames[i], PU_CACHE);
  MOV.Q        TU7A00CB85/lnames, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       9, RD18, .L00802AC4

.L00802AC6:
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  BRGE.L       3, RQ8, .L00802AC7
// wi_stuff.c:1834   {
  ADD          R0, 0, RD21
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/NUMANIMS, RQ27
  MOV.L        (RQ27, RQ23), RQ20
  BRGE.L       RQ20, RD21, .L00802ACA

.L00802AC8:
// wi_stuff.c:1836   {
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ8
  ADD          R0, 1, R5
  CMPNE.Q      RQ8, R5, RQ23
  ADD          R0, 8, R5
  CMPNE.Q      RD21, R5, RQ20
  OR           RQ23, RQ20, RQ8
  BREQ.L       R0, RQ8, .L00802ACB
// wi_stuff.c:1838   for (i=0;i<wi_anims[wbs->epsd][j].nanims;i++)
  ADD          R0, 0, RD18
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/wi_anims, RQ27
  MOV.Q        (RQ27, RQ23), RQ9
  ADD          R0, 72, R5
  MUL.L        RD21, R5, RQ27
  ADD          RQ9, RQ27, RQ27
  MOV.L        (RQ27, 8), RQ8
  BRGE.L       RQ8, RD18, .L00802ACE

.L00802ACC:
// wi_stuff.c:1839   Z_ChangeTag(wi_anims[wbs->epsd][j].p[i], PU_CACHE);
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/wi_anims, RQ27
  MOV.Q        (RQ27, RQ23), RQ9
  ADD          R0, 72, R5
  MUL.L        RD21, R5, RQ27
  ADD          RQ9, RQ27, RQ27
  ADD          RQ27, 32, RQ9
  MOV.Q        (RQ9, RD18), RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  ADDS.L       RD18, 1, RD18
  MOV.Q        TU7A00CB85/wbs, RQ13
  MOV.L        (RQ13, 0), RQ8
  MOV          TU7A00CB85/wi_anims, RQ13
  MOV.Q        (RQ13, RQ8), RQ22
  ADD          R0, 72, R5
  MUL.L        RD21, R5, RQ27
  ADD          RQ22, RQ27, RQ27
  MOV.L        (RQ27, 8), RQ8
  BRLT.L       RQ8, RD18, .L00802ACC

.L00802ACE:

.L00802ACB:
  ADDS.L       RD21, 1, RD21
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 0), RQ23
  MOV          TU7A00CB85/NUMANIMS, RQ27
  MOV.L        (RQ27, RQ23), RQ20
  BRLT.L       RQ20, RD21, .L00802AC8

.L00802ACA:

.L00802AC7:

.L00802AC0:
// wi_stuff.c:1844   Z_Free(lnames);
  MOV.Q        TU7A00CB85/lnames, RQ10
  BSR          Z_Free, R1
// wi_stuff.c:1846   Z_ChangeTag(percent, PU_CACHE);
  MOV.Q        TU7A00CB85/percent, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  MOV.Q        TU7A00CB85/colon, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1847   Z_ChangeTag(colon, PU_CACHE);
  MOV.Q        TU7A00CB85/finished, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1848   Z_ChangeTag(finished, PU_CACHE);
  MOV.Q        TU7A00CB85/entering, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1849   Z_ChangeTag(entering, PU_CACHE);
  MOV.Q        TU7A00CB85/kills, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1850   Z_ChangeTag(kills, PU_CACHE);
  MOV.Q        TU7A00CB85/secret, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1851   Z_ChangeTag(secret, PU_CACHE);
  MOV.Q        TU7A00CB85/sp_secret, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1852   Z_ChangeTag(sp_secret, PU_CACHE);
  MOV.Q        TU7A00CB85/items, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1853   Z_ChangeTag(items, PU_CACHE);
  MOV.Q        TU7A00CB85/frags, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1854   Z_ChangeTag(frags, PU_CACHE);
  MOV.Q        TU7A00CB85/wi_time, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1855   Z_ChangeTag(wi_time, PU_CACHE);
  MOV.Q        TU7A00CB85/sucks, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1856   Z_ChangeTag(sucks, PU_CACHE);
  MOV.Q        TU7A00CB85/par, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1859   Z_ChangeTag(victims, PU_CACHE);
  MOV.Q        TU7A00CB85/victims, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  MOV.Q        TU7A00CB85/killers, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1860   Z_ChangeTag(killers, PU_CACHE);
  MOV.Q        TU7A00CB85/total, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
// wi_stuff.c:1865   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802ACF:
// wi_stuff.c:1866   Z_ChangeTag(p[i], PU_CACHE);
  MOV          TU7A00CB85/p, RQ27
  MOV.Q        (RQ27, RD18), RQ22
  ADD          RQ22, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802ACF

.L00802AD1:
// wi_stuff.c:1868   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802AD2:
// wi_stuff.c:1869   Z_ChangeTag(bp[i], PU_CACHE);
  MOV          TU7A00CB85/bp, RQ27
  MOV.Q        (RQ27, RD18), RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802AD2

.L00802AD4:

.L00C03001:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_vprintf:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -624, R2
  MOV.Q        RQ10, (R2, 168)
  MOV.Q        RQ11, (R2, 160)
// tk_core/tk_puts.c:1345   
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 144)
// tk_core/tk_puts.c:1346   
  BSR          .L00800C56, R0

.L00800C57:
// tk_core/tk_puts.c:1347   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       37, RQ18, .L00800C58
// tk_core/tk_puts.c:1352   
  ADD          R2, 144, RQ10
  BSR          TK_ReadCharUtf8, R1
  ADDS.L       RQ10, 0, RD9
// tk_core/tk_puts.c:1353   
  ADDS.L       RD9, 0, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1354   
  BSR          .L00800C56, R0

.L00800C58:
// tk_core/tk_puts.c:1355   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 1), RQ18
  BRNE.Q       37, RQ18, .L00800C59
// tk_core/tk_puts.c:1357   
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 2, RQ27
  MOV.Q        RQ27, (R2, 144)
  ADD          R0, 37, RD10
  BSR          tk_putc, R1
  BSR          .L00800C56, R0

.L00800C59:
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 144)
// tk_core/tk_puts.c:1360   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       45, RQ18, .L00800C5A
// tk_core/tk_puts.c:1361   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 136)
// tk_core/tk_puts.c:1363   
  MOV.Q        (R2, 144), RQ26
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 144)
  BSR          .L00800C5B, R0

.L00800C5A:
// tk_core/tk_puts.c:1365   
  MOV.L        RD0, (R2, 136)

.L00800C5B:
// tk_core/tk_puts.c:1369   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       48, RQ18, .L00800C5C
// tk_core/tk_puts.c:1370   
  ADD          R0, 48, RD27
  MOV.L        RD27, (R2, 156)
// tk_core/tk_puts.c:1372   
  MOV.Q        (R2, 144), RQ26
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 144)
  BSR          .L00800C5D, R0

.L00800C5C:
// tk_core/tk_puts.c:1374   
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 156)

.L00800C5D:
// tk_core/tk_puts.c:1378   
  ADD          R0, 0, RD23
// tk_core/tk_puts.c:1379   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRLT.L       48, RQ18, .L00800C5E
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRGT.L       57, RQ18, .L00800C5E

.L00800C5F:
// tk_core/tk_puts.c:1380   
  BSR          .L00800C60, R0

.L00800C61:
// tk_core/tk_puts.c:1382   
  ADD          R0, 10, R5
  MULS.L       RD23, R5, RQ18
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ22
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 144)
  ADDS.L       RQ22, -48, RQ8
  ADDS.L       RQ18, RQ8, RD23

.L00800C60:
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRLT.L       48, RQ18, .L00800C62
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ22
  BRGT.L       57, RQ22, .L00800C62
  BSR          .L00800C61, R0

.L00800C62:

.L00800C63:

.L00800C5E:
// tk_core/tk_puts.c:1385   
  MOV.L        RD0, (R2, 140)
// tk_core/tk_puts.c:1386   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       108, RQ8, .L00800C64
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       76, RQ18, .L00800C64
  BSR          .L00800C65, R0

.L00800C64:
// tk_core/tk_puts.c:1387   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 140)
// tk_core/tk_puts.c:1389   
  MOV.Q        (R2, 144), RQ26
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 144)
  MOV.Q        (R2, 144), RQ26
  MOV.B        (RQ26, 0), RQ22
  BRNE.Q       108, RQ22, .L00800C66
// tk_core/tk_puts.c:1391   
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 144)

.L00800C66:

.L00800C65:
// tk_core/tk_puts.c:1397   
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ8
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 144)
  BREQ.Q       100, RQ8, .L00800C67
  BREQ.Q       88, RQ8, .L00800C68
  BREQ.Q       120, RQ8, .L00800C69
  BREQ.Q       115, RQ8, .L00800C6A
  BREQ.Q       112, RQ8, .L00800C6B
  BREQ.Q       102, RQ8, .L00800C6C
  BSR          .L00800C6D, R0

.L00800C67:
// tk_core/tk_puts.c:1399   
  MOV.L        (R2, 140), RD27
  BREQ.L       R0, RD27, .L00800C6E
// tk_core/tk_puts.c:1401   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ20
  BSR          .L00800C6F, R0

.L00800C6E:
// tk_core/tk_puts.c:1406   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ18
  ADDS.L       RQ18, 0, RQ20

.L00800C6F:
// tk_core/tk_puts.c:1409   
  BREQ.L       R0, RD23, .L00800C70
// tk_core/tk_puts.c:1410   
  ADDS.L       RQ20, 0, RQ22
  ADD          RQ22, 0, RD10
  ADD          RD23, 0, RD11
  BSR          tk_print_decimal_n, R1
  BSR          .L00800C71, R0

.L00800C70:
// tk_core/tk_puts.c:1413   
  ADDS.L       RQ20, 0, RQ8
  ADDS.L       RQ8, 0, RD10
  BSR          tk_print_decimal, R1

.L00800C71:
// tk_core/tk_puts.c:1415   
  BSR          .L00800C72, R0

.L00800C68:

.L00800C69:
// tk_core/tk_puts.c:1419   
  MOV.L        (R2, 140), RD27
  BREQ.L       R0, RD27, .L00800C73
// tk_core/tk_puts.c:1421   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ20
  BSR          .L00800C74, R0

.L00800C73:
// tk_core/tk_puts.c:1427   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ18
  ADDS.L       RQ18, 0, RQ20

.L00800C74:
// tk_core/tk_puts.c:1432   
  BRNE.L       R0, RD23, .L00800C75
  ADD          RQ20, 0, RQ10
  BSR          tk_print_hex_genw, R1
  ADD          RQ10, 0, RD23

.L00800C75:
// tk_core/tk_puts.c:1436   
  ADD          RQ20, 0, RQ10
  ADD          RD23, 0, RD11
  BSR          tk_print_hex_n, R1
// tk_core/tk_puts.c:1438   
  BSR          .L00800C72, R0

.L00800C6A:
// tk_core/tk_puts.c:1442   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ21
// tk_core/tk_puts.c:1443   
  BRNE.Q       R0, RQ21, .L00800C76
// tk_core/tk_puts.c:1444   
  MOV          .L00C03008, RQ21

.L00800C76:
// tk_core/tk_puts.c:1445   
  BREQ.L       R0, RD23, .L00800C77
// tk_core/tk_puts.c:1446   
  ADD          RQ21, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RD23, 0, RQ26
  SUB          RQ26, RQ27, RQ25
  ADDS.L       RQ25, 0, RD9
  MOV.L        (R2, 136), RD24
  BREQ.L       R0, RD24, .L00800C78
// tk_core/tk_puts.c:1449   
  ADD          RQ21, 0, RQ10
  BSR          tk_puts, R1
// tk_core/tk_puts.c:1451   
  BSR          .L00800C79, R0

.L00800C7A:
// tk_core/tk_puts.c:1452   
  ADD          R0, 32, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1454   
  ADDS.L       RD9, -1, RD9

.L00800C79:
  BRGT.L       R0, RD9, .L00800C7A

.L00800C7B:
  BSR          .L00800C7C, R0

.L00800C78:
// tk_core/tk_puts.c:1457   
  BSR          .L00800C7D, R0

.L00800C7E:
// tk_core/tk_puts.c:1459   
  ADD          R0, 32, RD10
  BSR          tk_putc, R1
// tk_core/tk_puts.c:1461   
  ADDS.L       RD9, -1, RD9

.L00800C7D:
  BRGT.L       R0, RD9, .L00800C7E

.L00800C7F:
// tk_core/tk_puts.c:1462   
  ADD          RQ21, 0, RQ10
  BSR          tk_puts, R1

.L00800C7C:
  BSR          .L00800C80, R0

.L00800C77:
// tk_core/tk_puts.c:1466   
  ADD          RQ21, 0, RQ10
  BSR          tk_puts, R1

.L00800C80:
// tk_core/tk_puts.c:1468   
  BSR          .L00800C72, R0

.L00800C6B:
// tk_core/tk_puts.c:1471   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ21
// tk_core/tk_puts.c:1473   
  ADD          RQ21, 0, RQ10
  BSR          tk_print_hexptr, R1
// tk_core/tk_puts.c:1474   
  BSR          .L00800C72, R0

.L00800C6C:
// tk_core/tk_puts.c:1477   
  MOV.Q        (R2, 160), RQ10
  BSR          __va64_arg_l, R1
  MOV.Q        RQ10, (R2, 72)
  MOV.Q        (R2, 72), RQ10
  BSR          tk_print_float, R1
// tk_core/tk_puts.c:1479   
  BSR          .L00800C72, R0

.L00800C6D:
// tk_core/tk_puts.c:1484   

.L00800C72:

.L00800C56:
  MOV.Q        (R2, 144), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.L       R0, RQ18, .L00800C57

.L00800C81:
// tk_core/tk_puts.c:1486   

.L00C03007:
  ADD          R2, 624, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

__memcpy128:
  ADD          R2, -24, R2
  MOV.Q        RQ1, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -360, R2
  ADD          RQ10, 0, RQ9
  ADD          RQ11, 0, RQ8
  MOV.Q        RQ12, (R2, 72)
// pdpc201/string.c:2233   
  ADD          RQ9, 0, RQ10
  ADD          RQ8, 0, RQ11
  MOV.Q        (R2, 72), RQ12
  BSR          memcpy, R1

.L00C0300E:
  ADD          R2, 360, R2
  MOV.Q        (R2, 16), RQ1
  MOV.X        (R2, 0), R8
  ADD          R2, 24, R2
  JSR          RQ1, 0, R0

__start:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -344, R2
// pdpc201/start.c:119   
  BSR          __start_first, R1
// pdpc201/start.c:135   
  BSR          __start_early, R1
// pdpc201/start.c:137   
  BSR          __get_cmdline, R1
  ADD          RQ10, 0, RQ18
// pdpc201/start.c:138   
  BSR          __get_cmdenv, R1
  MOV.Q        RQ10, (R2, 120)
// pdpc201/start.c:147   
  MOV.Q        RQ0, _ctype_tolow
// pdpc201/start.c:148   
  MOV.Q        RQ0, _ctype_toup
// pdpc201/start.c:150   
  BSR          __init_stdin, R1
// pdpc201/start.c:151   
  BSR          _ctype_init, R1
// pdpc201/start.c:152   
  BSR          __init_getprocstub, R1
// pdpc201/start.c:154   
  BSR          __get_stdin, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ22
// pdpc201/start.c:155   
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ20
// pdpc201/start.c:156   
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ27
// pdpc201/start.c:158   
  MOV.L        RD0, (RQ22, 0)
// pdpc201/start.c:159   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ20, 0)
// pdpc201/start.c:160   
  ADD          R0, 2, RD25
  MOV.L        RD25, (RQ27, 0)
// pdpc201/start.c:162   
  MOV.B        RD0, (RQ22, 8)
// pdpc201/start.c:163   
  MOV.B        RD0, (RQ22, 9)
// pdpc201/start.c:164   
  MOV.B        RD26, (RQ22, 10)
// pdpc201/start.c:165   
  MOV.L        RD0, (RQ22, 12)
// pdpc201/start.c:166   
  ADD          R0, 0, RQ24
  MOV.Q        RQ24, (RQ22, 16)
// pdpc201/start.c:167   
  MOV.L        RD25, (RQ22, 68)
// pdpc201/start.c:168   
  MOV          TU61F874B9/buffer1, RQ19
  MOV.Q        RQ19, (RQ22, 72)
// pdpc201/start.c:169   
  MOV.Q        (RQ22, 72), RQ8
  LDIZ         4660, RD19
  MOVU.W       RD19, (RQ8, 0)
// pdpc201/start.c:170   
  MOV.Q        (RQ22, 72), RQ8
  ADD          RQ8, 6150, RQ21
  LDIZ         17185, RD26
  MOVU.W       RD26, (RQ21, 0)
// pdpc201/start.c:171   
  MOV.Q        (RQ22, 72), RQ8
  ADD          RQ8, 2, RQ21
  MOV.Q        RQ21, (RQ22, 24)
// pdpc201/start.c:172   
  MOV.Q        (RQ22, 24), RQ8
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 1, RQ25
  MOV.Q        RQ25, (RQ22, 24)
  MOV.B        RD0, (RQ21, 0)
// pdpc201/start.c:173   
  MOV.Q        (RQ22, 24), RQ8
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 1, RQ25
  MOV.Q        RQ25, (RQ22, 24)
  MOV.B        RD0, (RQ21, 0)
// pdpc201/start.c:174   
  LDIZ         6144, RQ24
  MOV.Q        RQ24, (RQ22, 32)
// pdpc201/start.c:175   
  MOV.Q        (RQ22, 24), RQ21
  MOV.Q        (RQ22, 32), RQ24
  ADD          RQ21, RQ24, RQ25
  MOV.Q        RQ25, (RQ22, 48)
// pdpc201/start.c:176   
  MOV.Q        (RQ22, 48), RQ8
  ADD          R0, 10, RD26
  MOV.B        RD26, (RQ8, 0)
// pdpc201/start.c:177   
  MOV.L        RD0, (RQ22, 80)
// pdpc201/start.c:178   
  MOV.Q        (RQ22, 48), RQ21
  MOV.Q        RQ21, (RQ22, 40)
// pdpc201/start.c:179   
  MOV.Q        (RQ22, 32), RQ24
  SUB          R0, RQ24, RQ19
  MOV.Q        RQ19, (RQ22, 16)
// pdpc201/start.c:180   
  ADD          R0, 2, RD26
  MOV.L        RD26, (RQ22, 84)
// pdpc201/start.c:181   
  ADD          R0, -1, RD26
  MOV.L        RD26, (RQ22, 64)
// pdpc201/start.c:182   
  MOV.L        RD0, (RQ22, 88)
// pdpc201/start.c:183   
  MOV.L        RD0, (RQ22, 92)
// pdpc201/start.c:184   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ22, 96)
// pdpc201/start.c:185   
  MOV.L        RD26, (RQ22, 100)
// pdpc201/start.c:187   
  MOV.B        RD0, (RQ20, 8)
// pdpc201/start.c:188   
  MOV.B        RD0, (RQ20, 9)
// pdpc201/start.c:189   
  MOV.B        RD26, (RQ20, 10)
// pdpc201/start.c:190   
  ADD          R0, 2, RD26
  MOV.L        RD26, (RQ20, 68)
// pdpc201/start.c:191   
  MOV          TU61F874B9/buffer2, RQ26
  MOV.Q        RQ26, (RQ20, 72)
// pdpc201/start.c:192   
  MOV.Q        (RQ20, 72), RQ8
  LDIZ         4660, RD26
  MOVU.W       RD26, (RQ8, 0)
// pdpc201/start.c:193   
  MOV.Q        (RQ20, 72), RQ21
  ADD          RQ21, 6150, RQ25
  LDIZ         17185, RD26
  MOVU.W       RD26, (RQ25, 0)
// pdpc201/start.c:194   
  MOV.Q        (RQ20, 72), RQ8
  ADD          RQ8, 2, RQ21
  MOV.Q        RQ21, (RQ20, 24)
// pdpc201/start.c:195   
  MOV.Q        (RQ20, 24), RQ25
  ADD          RQ25, 0, RQ8
  ADD          RQ25, 1, RQ21
  MOV.Q        RQ21, (RQ20, 24)
  MOV.B        RD0, (RQ8, 0)
// pdpc201/start.c:196   
  MOV.Q        (RQ20, 24), RQ25
  ADD          RQ25, 0, RQ8
  ADD          RQ25, 1, RQ21
  MOV.Q        RQ21, (RQ20, 24)
  MOV.B        RD0, (RQ8, 0)
// pdpc201/start.c:197   
  LDIZ         6144, RQ19
  MOV.Q        RQ19, (RQ20, 32)
// pdpc201/start.c:198   
  MOV.Q        (RQ20, 24), RQ8
  MOV.Q        (RQ20, 32), RQ24
  ADD          RQ8, RQ24, RQ21
  MOV.Q        RQ21, (RQ20, 48)
// pdpc201/start.c:199   
  MOV.Q        (RQ20, 48), RQ25
  ADD          R0, 10, RD26
  MOV.B        RD26, (RQ25, 0)
// pdpc201/start.c:200   
  MOV.L        RD0, (RQ20, 80)
// pdpc201/start.c:201   
  MOV.Q        (RQ20, 24), RQ8
  MOV.Q        RQ8, (RQ20, 40)
// pdpc201/start.c:202   
  ADD          R0, 0, RQ24
  MOV.Q        RQ24, (RQ20, 16)
// pdpc201/start.c:203   
  ADD          R0, 1, RD26
  MOV.L        RD26, (RQ20, 84)
// pdpc201/start.c:204   
  MOV.L        RD0, (RQ20, 88)
// pdpc201/start.c:205   
  MOV.L        RD0, (RQ20, 92)
// pdpc201/start.c:206   
  MOV.L        RD26, (RQ20, 96)
// pdpc201/start.c:207   
  MOV.L        RD26, (RQ20, 100)
// pdpc201/start.c:209   
  MOV.B        RD0, (RQ27, 8)
// pdpc201/start.c:210   
  MOV.B        RD0, (RQ27, 9)
// pdpc201/start.c:211   
  MOV.B        RD26, (RQ27, 10)
// pdpc201/start.c:212   
  ADD          R0, 2, RD26
  MOV.L        RD26, (RQ27, 68)
// pdpc201/start.c:213   
  MOV          TU61F874B9/buffer3, RQ26
  MOV.Q        RQ26, (RQ27, 72)
// pdpc201/start.c:214   
  MOV.Q        (RQ27, 72), RQ21
  LDIZ         4660, RD26
  MOVU.W       RD26, (RQ21, 0)
// pdpc201/start.c:215   
  MOV.Q        (RQ27, 72), RQ25
  ADD          RQ25, 6150, RQ8
  LDIZ         17185, RD26
  MOVU.W       RD26, (RQ8, 0)
// pdpc201/start.c:216   
  MOV.Q        (RQ27, 72), RQ21
  ADD          RQ21, 2, RQ25
  MOV.Q        RQ25, (RQ27, 24)
// pdpc201/start.c:217   
  MOV.Q        (RQ27, 24), RQ8
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 1, RQ25
  MOV.Q        RQ25, (RQ27, 24)
  MOV.B        RD0, (RQ21, 0)
// pdpc201/start.c:218   
  MOV.Q        (RQ27, 24), RQ8
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 1, RQ25
  MOV.Q        RQ25, (RQ27, 24)
  MOV.B        RD0, (RQ21, 0)
// pdpc201/start.c:219   
  LDIZ         6144, RQ19
  MOV.Q        RQ19, (RQ27, 32)
// pdpc201/start.c:220   
  MOV.Q        (RQ27, 24), RQ8
  MOV.Q        (RQ27, 32), RQ24
  ADD          RQ8, RQ24, RQ21
  MOV.Q        RQ21, (RQ27, 48)
// pdpc201/start.c:221   
  MOV.Q        (RQ27, 48), RQ25
  ADD          R0, 10, RD26
  MOV.B        RD26, (RQ25, 0)
// pdpc201/start.c:222   
  MOV.L        RD0, (RQ27, 80)
// pdpc201/start.c:223   
  MOV.Q        (RQ27, 24), RQ8
  MOV.Q        RQ8, (RQ27, 40)
// pdpc201/start.c:224   
  ADD          R0, 0, RQ24
  MOV.Q        RQ24, (RQ27, 16)
// pdpc201/start.c:225   
  ADD          R0, 1, RD19
  MOV.L        RD19, (RQ27, 84)
// pdpc201/start.c:226   
  MOV.L        RD0, (RQ27, 88)
// pdpc201/start.c:227   
  MOV.L        RD0, (RQ27, 92)
// pdpc201/start.c:228   
  MOV.L        RD19, (RQ27, 96)
// pdpc201/start.c:229   
  MOV.L        RD19, (RQ27, 100)
  MOV.Q        RQ27, (R2, 136)
// pdpc201/start.c:231   
  ADD          R0, 0, RD23

.L008007B3:
// pdpc201/start.c:232   
  MOV          __userFiles, RQ27
  MOV.Q        RQ0, (RQ27, RD23)
  ADDS.L       RD23, 1, RD23
  BRLT.L       253, RD23, .L008007B3

.L008007B4:
// pdpc201/start.c:238   
  BREQ.Q       R0, RQ18, .L008007B5
  MOV.B        (RQ18, 0), RQ9
  BRNE.Q       34, RQ9, .L008007B6
// pdpc201/start.c:241   
  ADD          RQ18, 1, RQ18
// pdpc201/start.c:243   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ18, (RQ27, 0)
// pdpc201/start.c:244   
  BSR          .L008007B7, R0

.L008007B8:
  ADD          RQ18, 1, RQ18

.L008007B7:
  BREQ.Q       R0, RQ18, .L008007B9
  MOV.B        (RQ18, 0), RQ9
  BREQ.Q       34, RQ9, .L008007B9
  BSR          .L008007B8, R0

.L008007B9:

.L008007BA:
// pdpc201/start.c:246   
  ADD          RQ18, 0, RQ8
  ADD          RQ18, 1, RQ18
  MOV.B        RD0, (RQ8, 0)
  BSR          .L008007BB, R0

.L008007B6:
// pdpc201/start.c:248   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ18, (RQ27, 0)
// pdpc201/start.c:251   
  BSR          .L008007BC, R0

.L008007BD:
// pdpc201/start.c:252   
  MOV.B        (RQ18, 0), RQ9
  BREQ.Q       32, RQ9, .L008007BE
// pdpc201/start.c:255   
  ADD          RQ18, 1, RQ18

.L008007BC:
  MOV.B        (RQ18, 0), RQ9
  BRNE.L       R0, RQ9, .L008007BD

.L008007BE:
  MOV.B        (RQ18, 0), RQ9
  BRNE.L       R0, RQ9, .L008007BF
// pdpc201/start.c:260   
  MOV          .L00C00FE7, RQ18
  BSR          .L008007C0, R0

.L008007BF:
// pdpc201/start.c:266   
  MOV.B        RD0, (RQ18, 0)
// pdpc201/start.c:267   
  ADD          RQ18, 1, RQ18

.L008007C0:

.L008007BB:
  BSR          .L008007C1, R0

.L008007B5:
// pdpc201/start.c:271   
  MOV          __start/argv!864, RQ27
  MOV          .L00C00FE7, RQ26
  MOV.Q        RQ26, (RQ27, 0)

.L008007C1:
// pdpc201/start.c:277   
  BREQ.Q       R0, RQ18, .L008007C2
// pdpc201/start.c:278   
  BSR          .L008007C3, R0

.L008007C4:
// pdpc201/start.c:280   
  ADD          RQ18, 1, RQ18

.L008007C3:
  MOV.B        (RQ18, 0), RQ9
  BREQ.Q       32, RQ9, .L008007C4

.L008007C5:
  MOV.B        (RQ18, 0), RQ9
  BRNE.L       R0, RQ9, .L008007C6
// pdpc201/start.c:285   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ0, (RQ27, 8)
// pdpc201/start.c:287   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)
  BSR          .L008007C7, R0

.L008007C6:
// pdpc201/start.c:290   
  ADD          R0, 1, RD23

.L008007C8:
// pdpc201/start.c:292   
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 116)
// pdpc201/start.c:295   
  MOV.B        (RQ18, 0), RQ9
  BRNE.Q       34, RQ9, .L008007C9
// pdpc201/start.c:296   
  ADD          RQ18, 1, RQ18
// pdpc201/start.c:298   
  ADD          R0, 34, RD27
  MOV.L        RD27, (R2, 116)

.L008007C9:
// pdpc201/start.c:299   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ18, (RQ27, RD23)
// pdpc201/start.c:301   
  ADDS.L       RD23, 1, RD23
// pdpc201/start.c:303   
  BRGE.L       50, RD23, .L008007CA
// pdpc201/start.c:306   
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 116), RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ18
// pdpc201/start.c:308   
  BRNE.Q       R0, RQ18, .L008007CB
// pdpc201/start.c:309   
  BSR          .L008007CA, R0
  BSR          .L008007CC, R0

.L008007CB:
// pdpc201/start.c:315   
  MOV.B        RD0, (RQ18, 0)
// pdpc201/start.c:316   
  ADD          RQ18, 1, RQ18
// pdpc201/start.c:317   
  BSR          .L008007CD, R0

.L008007CE:
  ADD          RQ18, 1, RQ18

.L008007CD:
  MOV.B        (RQ18, 0), RQ9
  BREQ.Q       32, RQ9, .L008007CE

.L008007CF:
  MOV.B        (RQ18, 0), RQ9
  BREQ.L       R0, RQ9, .L008007CA

.L008007CC:
  BRLT.L       50, RD23, .L008007C8

.L008007CA:
// pdpc201/start.c:320   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ0, (RQ27, RD23)
// pdpc201/start.c:322   
  MOV.L        RD23, (R2, 132)

.L008007C7:
  BSR          .L008007D0, R0

.L008007C2:
// pdpc201/start.c:325   
  MOV          __start/argv!864, RQ27
  MOV.Q        RQ0, (RQ27, 8)
// pdpc201/start.c:327   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 132)

.L008007D0:
// pdpc201/start.c:332   
  BSR          __start_late, R1
// pdpc201/start.c:336   
  MOV.L        (R2, 132), RD10
  MOV          __start/argv!864, RQ11
  BSR          main, R1
  MOV.L        RD10, (R2, 128)
// pdpc201/start.c:337   
  MOV.L        (R2, 128), RD10
  BSR          __exit, R1
// pdpc201/start.c:338   
  MOV.L        (R2, 128), RD10

.L00C03014:
  ADD          R2, 344, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_opendir2:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -896, R2
  MOV.Q        RQ10, (R2, 136)
  ADD          RQ11, 0, RQ21
  ADD          R2, 144, RQ6
  MOV.Q        RQ6, (R2, 120)
// tk_core/tk_vfile.c:1439   
// tk_core/tk_vfile.c:1446   
  MOV.L        TU61F874B9/tk_opendir_reclim, RD27
  BRLT.L       8, RD27, .L00800BAD
// tk_core/tk_vfile.c:1447   
  ADD          RQ0, 0, RQ10
  BSR          .L00C0301A, R0

.L00800BAD:
// tk_core/tk_vfile.c:1449   
  BSR          tk_vfile_init, R1
// tk_core/tk_vfile.c:1451   
  ADD          RQ21, 0, RQ10
  ADD          R0, 0, RD11
  BSR          TKDFS_TempNormalizeStringUtf8, R1
  ADD          RQ10, 0, RQ21
// tk_core/tk_vfile.c:1453   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       46, RQ22, .L00800BAE
  MOV.B        (RQ21, 1), RQ22
  BRNE.Q       47, RQ22, .L00800BAE

.L00800BAF:
// tk_core/tk_vfile.c:1454   
  ADD          RQ21, 2, RQ21

.L00800BAE:
// tk_core/tk_vfile.c:1455   
  MOV.B        (RQ21, 0), RQ22
  BRNE.Q       47, RQ22, .L00800BB0
// tk_core/tk_vfile.c:1456   
  ADD          RQ21, 1, RQ21

.L00800BB0:
// tk_core/tk_vfile.c:1458   
  MOV.L        TU61F874B9/tk_opendir_reclim, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU61F874B9/tk_opendir_reclim
// tk_core/tk_vfile.c:1460   
  MOV.L        RD0, (R2, 116)
// tk_core/tk_vfile.c:1461   
  MOV.Q        tk_vf_mount, RQ9
// tk_core/tk_vfile.c:1462   
  BSR          .L00800BB1, R0

.L00800BB2:
// tk_core/tk_vfile.c:1463   
  ADD          RQ21, 0, RQ23
// tk_core/tk_vfile.c:1465   
  MOV.Q        (RQ9, 16), RQ8
  BREQ.Q       R0, RQ8, .L00800BB3
  MOV.L        (RQ9, 32), RQ22
  BRLE.L       R0, RQ22, .L00800BB3

.L00800BB4:
  MOV.L        (RQ9, 32), RQ22
  MOV.Q        (RQ9, 16), RQ8
  ADDS.L       RQ22, 0, RQ12
  ADD          RQ8, 0, RQ10
  ADD          RQ21, 0, RQ11
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BREQ.L       R0, RQ18, .L00800BB5
// tk_core/tk_vfile.c:1470   
  MOV.Q        (RQ9, 8), RQ9
// tk_core/tk_vfile.c:1472   
  BSR          .L00800BB1, R0

.L00800BB5:
// tk_core/tk_vfile.c:1473   
  MOV.L        (RQ9, 32), RQ18
  ADD          RQ23, RQ18, RQ23
  MOV.B        (RQ23, 0), RQ18
  BREQ.L       R0, RQ18, .L00800BB6
  MOV.B        (RQ23, 0), RQ18
  BREQ.Q       47, RQ18, .L00800BB6

.L00800BB7:
  ADD          RQ23, -1, RQ8
  MOV.B        (RQ8, 0), RQ18
  BREQ.Q       58, RQ18, .L00800BB6

.L00800BB8:
// tk_core/tk_vfile.c:1476   
  MOV.Q        (RQ9, 8), RQ9
// tk_core/tk_vfile.c:1478   
  BSR          .L00800BB1, R0

.L00800BB6:
  MOV.B        (RQ23, 0), RQ18
  BRNE.Q       47, RQ18, .L00800BB9
// tk_core/tk_vfile.c:1481   
  ADD          RQ23, 1, RQ23

.L00800BB9:

.L00800BB3:
// tk_core/tk_vfile.c:1486   
  MOV.Q        (RQ9, 0), RQ8
  MOV.Q        (RQ8, 32), RQ27
  BREQ.Q       R0, RQ27, .L00800BBA
// tk_core/tk_vfile.c:1489   
  MOV.Q        (RQ9, 0), RQ8
  ADD          RQ8, 0, RQ27
  MOV.Q        (RQ8, 32), RQ26
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 136), RQ11
  ADD          RQ23, 0, RQ12
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ8, 0, RQ20
  BREQ.Q       R0, RQ20, .L00800BBB
// tk_core/tk_vfile.c:1491   
  MOV.L        (R2, 116), RD27
  ADD          RD27, 0, RQ18
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 116)
  ADD          R2, 144, RQ26
  MOV.Q        RQ20, (RQ26, RQ18)

.L00800BBB:

.L00800BBA:
// tk_core/tk_vfile.c:1496   
  MOV.Q        (RQ9, 8), RQ9

.L00800BB1:
  BRNE.Q       R0, RQ9, .L00800BB2

.L00800BBC:
// tk_core/tk_vfile.c:1500   
  MOV.L        (R2, 116), RD27
  BRNE.Q       1, RD27, .L00800BBD
// tk_core/tk_vfile.c:1501   
  ADD          R2, 144, RQ27
  MOV.Q        (RQ27, 0), RQ20
// tk_core/tk_vfile.c:1503   
  MOV.L        TU61F874B9/tk_opendir_reclim, RD26
  ADDS.L       RD26, -1, RD26
  MOV.L        RD26, TU61F874B9/tk_opendir_reclim
// tk_core/tk_vfile.c:1504   
  ADD          RQ20, 0, RQ10
  BSR          .L00C0301A, R0

.L00800BBD:
// tk_core/tk_vfile.c:1507   
  MOV.L        (R2, 116), RD27
  BRLE.L       1, RD27, .L00800BBE
// tk_core/tk_vfile.c:1508   
  ADD          R2, 144, RQ10
  MOV.L        (R2, 116), RD11
  BSR          tk_multidir_create, R1
  ADD          RQ10, 0, RQ20
// tk_core/tk_vfile.c:1511   
  MOV.L        TU61F874B9/tk_opendir_reclim, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU61F874B9/tk_opendir_reclim
// tk_core/tk_vfile.c:1512   
  ADD          RQ20, 0, RQ10
  BSR          .L00C0301A, R0

.L00800BBE:
// tk_core/tk_vfile.c:1515   
  MOV          .L00C0301B, RQ10
  ADD          RQ21, 0, RQ11
  BSR          tk_dbg_printf, R1
// tk_core/tk_vfile.c:1516   
  MOV.L        TU61F874B9/tk_opendir_reclim, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU61F874B9/tk_opendir_reclim
// tk_core/tk_vfile.c:1517   
  ADD          RQ0, 0, RQ10

.L00C0301A:
  ADD          R2, 896, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

R_DrawPlanes:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
// r_plane.c:416   if (ds_p - drawsegs > MAXDRAWSEGS)
  MOV.Q        ds_p, RQ27
  MOV          drawsegs, RQ26
  ADD          RQ27, 0, RQ25
  SUB          RQ25, RQ26, RQ25
  ADD          R0, 80, RD27
  DIVS.L       RQ25, RD27, RQ25
  LDIZ         2048, RQ26
  BRLE.Q       RQ26, RQ25, .L008026D3
// r_plane.c:417   {

R_DrawPlanes.debugbreak_L0635:
  BRK          1589
// r_plane.c:419   I_Error ("R_DrawPlanes: drawsegs overflow (%i)",
  MOV.Q        ds_p, RQ27
  MOV          drawsegs, RQ26
  ADD          RQ27, 0, RQ11
  SUB          RQ11, RQ26, RQ11
  MOV.Q        RQ11, (R2, 128)
  ADD          R0, 80, RD27
  MOV.Q        (R2, 128), RQ26
  DIVS.L       RQ26, RD27, RQ26
  MOV          .L00C03032, RQ10
  ADD          RQ26, 0, RQ11
  BSR          I_Error, R1

.L008026D3:
// r_plane.c:423   if (lastvisplane - visplanes > MAXVISPLANES)
  MOV.Q        lastvisplane, RQ27
  MOV          visplanes, RQ26
  ADD          RQ27, 0, RQ25
  SUB          RQ25, RQ26, RQ25
  ADD          R0, 664, RD27
  DIVS.L       RQ25, RD27, RQ25
  BRLE.Q       512, RQ25, .L008026D4
// r_plane.c:424   {

R_DrawPlanes.debugbreak_L0636:
  BRK          1590
// r_plane.c:426   I_Error ("R_DrawPlanes: visplane overflow (%i)",
  MOV.Q        lastvisplane, RQ27
  MOV          visplanes, RQ26
  ADD          RQ27, 0, RQ11
  SUB          RQ11, RQ26, RQ11
  MOV.Q        RQ11, (R2, 128)
  ADD          R0, 664, RD27
  MOV.Q        (R2, 128), RQ26
  DIVS.L       RQ26, RD27, RQ26
  MOV          .L00C03034, RQ10
  ADD          RQ26, 0, RQ11
  BSR          I_Error, R1

.L008026D4:
// r_plane.c:430   if (lastopening - openings > MAXOPENINGS)
  MOV.Q        lastopening, RQ27
  MOV          openings, RQ26
  SUB          RQ27, RQ26, RQ25
  SHAR.Q       RQ25, 1, RQ25
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ25, .L008026D5
// r_plane.c:431   {

R_DrawPlanes.debugbreak_L0637:
  BRK          1591
// r_plane.c:433   I_Error ("R_DrawPlanes: opening overflow (%i)",
  MOV.Q        lastopening, RQ27
  MOV          openings, RQ26
  SUB          RQ27, RQ26, RQ11
  SHAR.Q       RQ11, 1, RQ11
  MOV          .L00C03036, RQ10
  BSR          I_Error, R1

.L008026D5:
// r_plane.c:439   for (pl = visplanes ; pl < lastvisplane ; pl++)
  MOV          visplanes, RQ9
  MOV.Q        lastvisplane, RQ27
  BRGE.Q       RQ27, RQ9, .L008026D8

.L008026D6:
// r_plane.c:440   {
  MOV.L        (RQ9, 12), RQ8
  MOV.L        (RQ9, 16), RQ23
  BRGT.L       RQ23, RQ8, .L008026D7
// r_plane.c:446   if (pl->picnum == skyflatnum)
  MOV.L        (RQ9, 4), RQ8
  MOV.L        skyflatnum, RD27
  BRNE.Q       RD27, RQ8, .L008026D9
// r_plane.c:448   {
  MOV.L        pspriteiscale, RD26
  MOV.L        detailshift, RD25
  SHAR         RD26, RD25, RD27
  MOV.L        RD27, dc_iscale
// r_plane.c:450   dc_scale = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, dc_scale
// r_plane.c:452   dc_isspr = 1;
  ADD          R0, 1, RD27
  MOV.B        RD27, dc_isspr
// r_plane.c:459   dc_colormap = R_ColormapRemapForBlend(colormaps);
  MOV.Q        colormaps, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap
// r_plane.c:460   dc_texturemid = skytexturemid;
  MOV.L        skytexturemid, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, dc_texturemid
  MOV.Q        fixedcolormap, RQ27
  BREQ.Q       R0, RQ27, .L008026DA
// r_plane.c:464   dc_colormap = R_ColormapRemapForBlend(fixedcolormap);
  MOV.Q        fixedcolormap, RQ10
  BSR          R_ColormapRemapForBlend, R1
  MOV.Q        RQ10, dc_colormap

.L008026DA:
// r_plane.c:467   for (x=pl->minx ; x <= pl->maxx ; x++)
  MOV.L        (RQ9, 12), RD18
  MOV.L        (RQ9, 16), RQ23
  BRGT.L       RQ23, RD18, .L008026DD

.L008026DB:
// r_plane.c:468   {
  ADD          RQ9, 21, RQ27
  MOVU.B       (RQ27, RD18), RD26
// r_plane.c:470   dc_yh = pl->bottom[x];
  ADD          RQ9, 343, RQ27
  MOVU.B       (RQ27, RD18), RD25
// r_plane.c:472   if (dc_yl <= dc_yh)
  MOV.L        RD26, dc_yl
  MOV.L        RD25, dc_yh
  BRGT.L       RD25, RD26, .L008026DE
// r_plane.c:473   {
  MOV          xtoviewangle, RQ27
  MOVU.L       (RQ27, RD18), RQ8
  MOVU.L       viewangle, RD27
  ADDU.L       RD27, RQ8, RQ23
  SHLR         RQ23, 22, RD20
// r_plane.c:475   dc_x = x;
  MOV.L        RD18, dc_x
// r_plane.c:476   dc_source = R_GetColumn(skytexture, angle);
  MOV.L        skytexture, RD10
  ADD          RD20, 0, RD11
  BSR          R_GetColumn, R1
  MOV.Q        RQ10, dc_source
// r_plane.c:477   colfunc ();
  MOV.Q        colfunc, RQ27
  JSR          RQ27, 0, R1

.L008026DE:
  ADDS.L       RD18, 1, RD18
  MOV.L        (RQ9, 16), RQ8
  BRLE.L       RQ8, RD18, .L008026DB

.L008026DD:
// r_plane.c:479   }
  BSR          .L008026D7, R0

.L008026D9:
// r_plane.c:491   ds_source = W_CacheFlatNum(pl->picnum, PU_STATIC);
  MOV.L        (RQ9, 4), RQ23
  ADD          RQ23, 0, RD10
  ADD          R0, 1, RD11
  BSR          W_CacheFlatNum, R1
  MOV.Q        RQ10, ds_source
// r_plane.c:494   planeheight = abs(pl->height-viewz);
  MOV.L        (RQ9, 0), RQ8
  MOV.L        viewz, RD27
  SUBS.L       RQ8, RD27, RQ23
  SHAR.Q       RQ23, 63, RQ6
  SUB          R0, RQ23, RD27
  SHAR.Q       RD27, 63, RQ7
  AND          RD27, RQ6, RQ6
  AND          RQ23, RQ7, RQ7
  OR           RQ6, RQ7, RD27
  MOV.L        RD27, planeheight
// r_plane.c:495   light = (pl->lightlevel >> LIGHTSEGSHIFT)+extralight;
  MOV.L        (RQ9, 8), RQ8
  SHAR         RQ8, 4, RQ23
  MOV.L        extralight, RD27
  ADDS.L       RQ23, RD27, RD21
// r_plane.c:497   if (light >= LIGHTLEVELS)
  BRLT.L       16, RD21, .L008026DF
// r_plane.c:498   light = LIGHTLEVELS-1;
  ADD          R0, 15, RD21

.L008026DF:
// r_plane.c:500   if (light < 0)
  BRGE.L       R0, RD21, .L008026E0
// r_plane.c:501   light = 0;
  ADD          R0, 0, RD21

.L008026E0:
// r_plane.c:503   planezlight = zlight[light];
  MOV          zlight, RQ27
  SHAD.L       RD21, 10, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ26, planezlight
// r_plane.c:506   ds_baseluma = (light<<12);
  SHAD.L       RD21, 12, RQ8
  AND          RQ8, 0x0000FFFF, RD27
  MOV.W        RD27, ds_baseluma
// r_plane.c:508   pl->top[pl->maxx+1] = 0xff;
  ADD          RQ9, 21, RQ27
  MOV.L        (RQ9, 16), RQ8
  ADD          R0, 255, RD26
  ADD          RQ27, RQ8, R5
  MOVU.B       RD26, (R5, 1)
// r_plane.c:509   pl->top[pl->minx-1] = 0xff;
  MOV.L        (RQ9, 12), RQ8
  ADDS.L       RQ8, -1, RQ23
  MOVU.B       RD26, (RQ27, RQ23)
// r_plane.c:511   stop = pl->maxx + 1;
  MOV.L        (RQ9, 16), RQ8
  ADDS.L       RQ8, 1, RD25
// r_plane.c:513   for (x=pl->minx ; x<= stop ; x++)
  MOV.L        (RQ9, 12), RD18
  MOV.L        RD25, (R2, 140)
  BRGT.L       RD25, RD18, .L008026E3

.L008026E1:
// r_plane.c:514   {
  ADD          RQ9, 343, RQ27
  MOVU.B       (RQ27, RD18), RQ8
  ADD          RQ9, 21, RQ27
  MOVU.B       (RQ27, RD18), RQ23
  ADD          RQ9, 343, RQ27
  ADDS.L       RD18, -1, RQ22
  MOVU.B       (RQ27, RQ22), RQ12
  ADD          RQ9, 21, RQ27
  ADDS.L       RD18, -1, RQ22
  MOVU.B       (RQ27, RQ22), RQ26
  ADD          RD18, 0, RD10
  ADD          RQ26, 0, RD11
  ADD          RQ23, 0, RD13
  ADDS.L       RQ8, 0, RD14
  BSR          R_MakeSpans, R1
  ADDS.L       RD18, 1, RD18
  MOV.L        (R2, 140), RD25
  BRLE.L       RD25, RD18, .L008026E1

.L008026E3:
// r_plane.c:521   Z_ChangeTag (ds_source, PU_CACHE);
  MOV.Q        ds_source, RQ10
  ADD          R0, 101, RD11
  BSR          Z_ChangeTag2, R1

.L008026D7:
  ADD          RQ9, 664, RQ9
  MOV.Q        lastvisplane, RQ27
  BRLT.Q       RQ27, RQ9, .L008026D6

.L008026D8:

.L00C03030:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_updateNetgameStats:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -328, R2
  ADD          R0, 100, RD20
// wi_stuff.c:1144   WI_updateAnimatedBack();
  BSR          WI_updateAnimatedBack, R1
// wi_stuff.c:1146   if (acceleratestage && ng_state != 10)
  MOV.L        TU7A00CB85/acceleratestage, RD27
  BREQ.L       R0, RD27, .L00802A2D
  MOV.L        TU7A00CB85/ng_state, RD27
  BREQ.Q       10, RD27, .L00802A2D

.L00802A2E:
// wi_stuff.c:1147   {
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:1150   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802A30:
// wi_stuff.c:1151   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ23
  BREQ.L       R0, RQ23, .L00802A31
// wi_stuff.c:1155   cnt_kills[i] = (plrs[i].skills * 100) / wbs->maxkills;
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 4), RQ23
  ADD          R0, 100, R5
  MULS.L       RQ23, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ12
  MOV.L        (RQ12, 16), RQ23
  DIVS.L       RQ9, RQ23, RQ8
  MOV          TU7A00CB85/cnt_kills, RQ11
  MOV.L        RQ8, (RQ11, RD18)
// wi_stuff.c:1156   cnt_items[i] = (plrs[i].sitems * 100) / wbs->maxitems;
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 8), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.L        (RQ12, 20), RQ23
  DIVS.L       RQ8, RQ23, RQ9
  MOV          TU7A00CB85/cnt_items, RQ11
  MOV.L        RQ9, (RQ11, RD18)
// wi_stuff.c:1157   cnt_secret[i] = (plrs[i].ssecret * 100) / wbs->maxsecret;
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 12), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.L        (RQ12, 24), RQ23
  DIVS.L       RQ8, RQ23, RQ9
  MOV          TU7A00CB85/cnt_secret, RQ27
  MOV.L        RQ9, (RQ27, RD18)
// wi_stuff.c:1159   if (dofrags)
  MOV.L        TU7A00CB85/dofrags, RD27
  BREQ.L       R0, RD27, .L00802A33
// wi_stuff.c:1160   cnt_frags[i] = WI_fragSum(i);
  ADD          RD18, 0, RD10
  BSR          WI_fragSum, R1
  ADDS.L       RQ10, 0, RQ8
  MOV          TU7A00CB85/cnt_frags, RQ27
  MOV.L        RQ8, (RQ27, RD18)

.L00802A33:

.L00802A31:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A30

.L00802A32:
// wi_stuff.c:1161   }
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1163   ng_state = 10;
  ADD          R0, 10, RD27
  MOV.L        RD27, TU7A00CB85/ng_state

.L00802A2D:
// wi_stuff.c:1166   if (ng_state == 2)
  MOV.L        TU7A00CB85/ng_state, RD27
  BRNE.Q       2, RD27, .L00802A34
  MOV.L        TU7A00CB85/bcnt, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00802A35
// wi_stuff.c:1169   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A35:
// wi_stuff.c:1171   stillticking = false;
  ADD          RD0, 0, RD21
// wi_stuff.c:1173   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802A36:
// wi_stuff.c:1174   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ23
  BREQ.L       R0, RQ23, .L00802A37
// wi_stuff.c:1178   cnt_kills[i] += 2;
  MOV          TU7A00CB85/cnt_kills, RQ27
  MOV.L        (RQ27, RD18), RQ9
  ADDS.L       RQ9, 2, RQ8
  MOV.L        RQ8, (RQ27, RD18)
// wi_stuff.c:1180   if (cnt_kills[i] >= (plrs[i].skills * 100) / wbs->maxkills)
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 4), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ23
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 16), RQ9
  DIVS.L       RQ23, RQ9, RQ22
  BRLT.L       RQ22, RQ8, .L00802A39
// wi_stuff.c:1181   cnt_kills[i] = (plrs[i].skills * 100) / wbs->maxkills;
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 4), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 16), RQ22
  DIVS.L       RQ8, RQ22, RQ23
  MOV          TU7A00CB85/cnt_kills, RQ27
  MOV.L        RQ23, (RQ27, RD18)
  BSR          .L00802A3A, R0

.L00802A39:
// wi_stuff.c:1183   stillticking = true;
  ADD          R0, 1, RD21

.L00802A3A:

.L00802A37:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A36

.L00802A38:
  BRNE.L       R0, RD21, .L00802A3B
// wi_stuff.c:1187   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1189   ng_state++;
  MOV.L        TU7A00CB85/ng_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/ng_state

.L00802A3B:
  BSR          .L00802A3C, R0

.L00802A34:
  MOV.L        TU7A00CB85/ng_state, RD27
  BRNE.Q       4, RD27, .L00802A3D
  MOV.L        TU7A00CB85/bcnt, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00802A3E
// wi_stuff.c:1195   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A3E:
// wi_stuff.c:1197   stillticking = false;
  ADD          RD0, 0, RD21
// wi_stuff.c:1199   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802A3F:
// wi_stuff.c:1200   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802A40
// wi_stuff.c:1204   cnt_items[i] += 2;
  MOV          TU7A00CB85/cnt_items, RQ27
  MOV.L        (RQ27, RD18), RQ8
  ADDS.L       RQ8, 2, RQ22
  MOV.L        RQ22, (RQ27, RD18)
// wi_stuff.c:1205   if (cnt_items[i] >= (plrs[i].sitems * 100) / wbs->maxitems)
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 8), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 20), RQ23
  DIVS.L       RQ8, RQ23, RQ9
  BRLT.L       RQ9, RQ22, .L00802A42
// wi_stuff.c:1206   cnt_items[i] = (plrs[i].sitems * 100) / wbs->maxitems;
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 8), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 20), RQ22
  DIVS.L       RQ8, RQ22, RQ23
  MOV          TU7A00CB85/cnt_items, RQ27
  MOV.L        RQ23, (RQ27, RD18)
  BSR          .L00802A43, R0

.L00802A42:
// wi_stuff.c:1208   stillticking = true;
  ADD          R0, 1, RD21

.L00802A43:

.L00802A40:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A3F

.L00802A41:
  BRNE.L       R0, RD21, .L00802A44
// wi_stuff.c:1211   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1213   ng_state++;
  MOV.L        TU7A00CB85/ng_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/ng_state

.L00802A44:
  BSR          .L00802A45, R0

.L00802A3D:
  MOV.L        TU7A00CB85/ng_state, RD27
  BRNE.Q       6, RD27, .L00802A46
  MOV.L        TU7A00CB85/bcnt, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00802A47
// wi_stuff.c:1219   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A47:
// wi_stuff.c:1221   stillticking = false;
  ADD          RD0, 0, RD21
// wi_stuff.c:1223   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802A48:
// wi_stuff.c:1224   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802A49
// wi_stuff.c:1228   cnt_secret[i] += 2;
  MOV          TU7A00CB85/cnt_secret, RQ27
  MOV.L        (RQ27, RD18), RQ8
  ADDS.L       RQ8, 2, RQ22
  MOV.L        RQ22, (RQ27, RD18)
// wi_stuff.c:1230   if (cnt_secret[i] >= (plrs[i].ssecret * 100) / wbs->maxsecret)
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 12), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 24), RQ23
  DIVS.L       RQ8, RQ23, RQ9
  BRLT.L       RQ9, RQ22, .L00802A4B
// wi_stuff.c:1231   cnt_secret[i] = (plrs[i].ssecret * 100) / wbs->maxsecret;
  MOV.Q        TU7A00CB85/plrs, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.L        (RQ13, 12), RQ9
  ADD          R0, 100, R5
  MULS.L       RQ9, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 24), RQ22
  DIVS.L       RQ8, RQ22, RQ23
  MOV          TU7A00CB85/cnt_secret, RQ27
  MOV.L        RQ23, (RQ27, RD18)
  BSR          .L00802A4C, R0

.L00802A4B:
// wi_stuff.c:1233   stillticking = true;
  ADD          R0, 1, RD21

.L00802A4C:

.L00802A49:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A48

.L00802A4A:
  BRNE.L       R0, RD21, .L00802A4D
// wi_stuff.c:1237   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1239   ng_state += 1 + 2*!dofrags;
  MOV.L        TU7A00CB85/dofrags, RD27
  CMPEQ.Q      RD27, R0, RQ9
  SHAD.L       RQ9, 1, RQ8
  ADDS.L       RQ8, 1, RQ22
  MOV.L        TU7A00CB85/ng_state, RD27
  ADDS.L       RD27, RQ22, RD27
  MOV.L        RD27, TU7A00CB85/ng_state

.L00802A4D:
  BSR          .L00802A4E, R0

.L00802A46:
  MOV.L        TU7A00CB85/ng_state, RD27
  BRNE.Q       8, RD27, .L00802A4F
  MOV.L        TU7A00CB85/bcnt, RD27
  ADD          R0, 3, RD13
  BTSTN.L      RD13, RD27, .L00802A50
// wi_stuff.c:1245   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A50:
// wi_stuff.c:1247   stillticking = false;
  ADD          RD0, 0, RD21
// wi_stuff.c:1249   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          R0, 0, RD18

.L00802A51:
// wi_stuff.c:1250   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ23
  BREQ.L       R0, RQ23, .L00802A52
// wi_stuff.c:1254   cnt_frags[i] += 1;
  MOV          TU7A00CB85/cnt_frags, RQ27
  MOV.L        (RQ27, RD18), RQ9
  ADDS.L       RQ9, 1, RQ8
  MOV.L        RQ8, (RQ27, RD18)
// wi_stuff.c:1256   if (cnt_frags[i] >= (fsum = WI_fragSum(i)))
  ADD          RD18, 0, RD10
  BSR          WI_fragSum, R1
  ADD          RQ10, 0, RQ23
  MOV.L        RD23, (R2, 108)
  BRLT.L       RQ23, RQ8, .L00802A54
// wi_stuff.c:1257   cnt_frags[i] = fsum;
  MOV          TU7A00CB85/cnt_frags, RQ27
  MOV.L        (R2, 108), RD13
  MOV.L        RD13, (RQ27, RD18)
  BSR          .L00802A55, R0

.L00802A54:
// wi_stuff.c:1259   stillticking = true;
  ADD          R0, 1, RD21

.L00802A55:

.L00802A52:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802A51

.L00802A53:
  BRNE.L       R0, RD21, .L00802A56
// wi_stuff.c:1263   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 57, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1265   ng_state++;
  MOV.L        TU7A00CB85/ng_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/ng_state

.L00802A56:
  BSR          .L00802A57, R0

.L00802A4F:
  MOV.L        TU7A00CB85/ng_state, RD27
  BRNE.Q       10, RD27, .L00802A58
  MOV.L        TU7A00CB85/acceleratestage, RD27
  BREQ.L       R0, RD27, .L00802A59
// wi_stuff.c:1271   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 3, RD11
  BSR          S_StartSound, R1
  MOV.L        gamemode, RD27
  ADD          R0, 2, R5
  CMPEQ.Q      RD27, R5, RQ9
  ADD          R0, 5, R5
  CMPEQ.Q      RD27, R5, RQ8
  OR           RQ9, RQ8, RQ22
  BREQ.L       R0, RQ22, .L00802A5A
// wi_stuff.c:1275   WI_initNoState();
  BSR          WI_initNoState, R1
  BSR          .L00802A5B, R0

.L00802A5A:
// wi_stuff.c:1277   WI_initShowNextLoc();
  BSR          WI_initShowNextLoc, R1

.L00802A5B:

.L00802A59:
  BSR          .L00802A5C, R0

.L00802A58:
  MOV.L        TU7A00CB85/ng_state, RD27
  ADD          R0, 1, RD13
  BTST.L       RD13, RD27, .L00802A5D
  MOV.L        TU7A00CB85/cnt_pause, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, TU7A00CB85/cnt_pause
  BRNE.L       R0, RD27, .L00802A5E
// wi_stuff.c:1283   {
  MOV.L        TU7A00CB85/ng_state, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, TU7A00CB85/ng_state
// wi_stuff.c:1285   cnt_pause = TICRATE;
  ADD          R0, 35, RD27
  MOV.L        RD27, TU7A00CB85/cnt_pause

.L00802A5E:

.L00802A5D:

.L00802A5C:

.L00802A57:

.L00802A4E:

.L00802A45:

.L00802A3C:

.L00C0303C:
  ADD          R2, 328, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

P_AcsRunLoop:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -440, R2
  ADD          RQ10, 0, RQ18
// p_acspec.c:1107   lim=4096;
  LUI          1, RD27
  MOV.L        RD27, (R2, 224)
// p_acspec.c:1109   while(((lim--)>0) && !(run->status))
  BSR          .L00801950, R0

.L0080194E:
// p_acspec.c:1110   {
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD27
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1112   switch(op)
  AND          RD27, -1, RQ26
  MOV.L        RD27, (R2, 228)
  ADD          R0, 48, RD25
  BRGE.L       RD25, RQ26, .L008019BB
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          RQ26, 0, RQ10
  ADD          R0, 48, RQ6
  BRGTU.Q      RQ6, RQ10, .L008019BA
  LEA.B        .L00C8001A, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001A:
  BSR          .L00801952, R0
  BSR          .L00801953, R0
  BSR          .L00801954, R0
  BSR          .L00801955, R0
  BSR          .L00801956, R0
  BSR          .L00801957, R0
  BSR          .L00801958, R0
  BSR          .L00801959, R0
  BSR          .L0080195A, R0
  BSR          .L0080195B, R0
  BSR          .L0080195C, R0
  BSR          .L0080195D, R0
  BSR          .L0080195E, R0
  BSR          .L0080195F, R0
  BSR          .L00801960, R0
  BSR          .L00801961, R0
  BSR          .L00801962, R0
  BSR          .L00801963, R0
  BSR          .L00801964, R0
  BSR          .L00801965, R0
  BSR          .L00801966, R0
  BSR          .L00801967, R0
  BSR          .L00801968, R0
  BSR          .L00801969, R0
  BSR          .L0080196A, R0
  BSR          .L0080196B, R0
  BSR          .L0080196C, R0
  BSR          .L0080196D, R0
  BSR          .L0080196E, R0
  BSR          .L0080196F, R0
  BSR          .L00801970, R0
  BSR          .L00801971, R0
  BSR          .L00801972, R0
  BSR          .L00801973, R0
  BSR          .L00801974, R0
  BSR          .L00801975, R0
  BSR          .L00801976, R0
  BSR          .L00801977, R0
  BSR          .L00801978, R0
  BSR          .L00801979, R0
  BSR          .L0080197A, R0
  BSR          .L0080197B, R0
  BSR          .L0080197C, R0
  BSR          .L0080197D, R0
  BSR          .L0080197E, R0
  BSR          .L0080197F, R0
  BSR          .L00801980, R0
  BSR          .L00801981, R0
  BSR          .L008019BA, R0

.L008019BB:
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          R0, 74, RD25
  BRGE.L       RD25, RQ26, .L008019BC
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          RQ26, -48, RQ10
  ADD          R0, 26, RQ6
  BRGTU.Q      RQ6, RQ10, .L008019BA
  LEA.B        .L00C8001B, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001B:
  BSR          .L00801982, R0
  BSR          .L00801983, R0
  BSR          .L00801984, R0
  BSR          .L00801985, R0
  BSR          .L00801986, R0
  BSR          .L00801987, R0
  BSR          .L00801988, R0
  BSR          .L00801989, R0
  BSR          .L0080198A, R0
  BSR          .L0080198B, R0
  BSR          .L0080198C, R0
  BSR          .L0080198D, R0
  BSR          .L0080198E, R0
  BSR          .L0080198F, R0
  BSR          .L00801990, R0
  BSR          .L00801991, R0
  BSR          .L00801992, R0
  BSR          .L00801993, R0
  BSR          .L00801994, R0
  BSR          .L00801995, R0
  BSR          .L00801996, R0
  BSR          .L00801997, R0
  BSR          .L00801998, R0
  BSR          .L00801999, R0
  BSR          .L0080199A, R0
  BSR          .L0080199B, R0
  BSR          .L008019BA, R0

.L008019BC:
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          R0, 89, RD25
  BRGE.L       RD25, RQ26, .L008019BD
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          RQ26, -74, RQ10
  ADD          R0, 15, RQ6
  BRGTU.Q      RQ6, RQ10, .L008019BA
  LEA.B        .L00C8001C, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001C:
  BSR          .L0080199C, R0
  BSR          .L0080199D, R0
  BSR          .L0080199E, R0
  BSR          .L0080199F, R0
  BSR          .L008019A0, R0
  BSR          .L008019A1, R0
  BSR          .L008019BA, R0
  BSR          .L008019A2, R0
  BSR          .L008019A3, R0
  BSR          .L008019A4, R0
  BSR          .L008019A5, R0
  BSR          .L008019A6, R0
  BSR          .L008019A7, R0
  BSR          .L008019A8, R0
  BSR          .L008019A9, R0
  BSR          .L008019BA, R0

.L008019BD:
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          R0, 97, RD25
  BRGE.L       RD25, RQ26, .L008019BE
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ26
  ADD          RQ26, -89, RQ10
  ADD          R0, 8, RQ6
  BRGTU.Q      RQ6, RQ10, .L008019BA
  LEA.B        .L00C8001D, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001D:
  BSR          .L008019AA, R0
  BSR          .L008019AB, R0
  BSR          .L008019AC, R0
  BSR          .L008019AD, R0
  BSR          .L008019AE, R0
  BSR          .L008019AF, R0
  BSR          .L008019B0, R0
  BSR          .L008019B1, R0
  BSR          .L008019BA, R0

.L008019BE:
  MOV.L        (R2, 228), RD27
  AND          RD27, -1, RQ20
  ADD          R0, 101, RD26
  BRGE.L       RD26, RQ20, .L008019BF
  MOV.L        (R2, 228), RD27
  ADD          R0, 97, RD26
  BREQ.Q       RD26, RD27, .L008019B2
  MOV.L        (R2, 228), RD27
  ADD          R0, 98, RD26
  BREQ.Q       RD26, RD27, .L008019B3
  MOV.L        (R2, 228), RD27
  ADD          R0, 99, RD26
  BREQ.Q       RD26, RD27, .L008019B4
  MOV.L        (R2, 228), RD27
  ADD          R0, 100, RD26
  BREQ.Q       RD26, RD27, .L008019B5

.L008019BF:
  MOV.L        (R2, 228), RD27
  ADD          R0, 101, RD26
  BREQ.Q       RD26, RD27, .L008019B6
  MOV.L        (R2, 228), RD27
  ADD          R0, 102, RD26
  BREQ.Q       RD26, RD27, .L008019B7
  MOV.L        (R2, 228), RD27
  ADD          R0, 103, RD26
  BREQ.Q       RD26, RD27, .L008019B8
  MOV.L        (R2, 228), RD27
  ADD          R0, 104, RD26
  BREQ.Q       RD26, RD27, .L008019B9
  BSR          .L008019BA, R0

.L00801952:
// p_acspec.c:1114   case 0:
  BSR          .L00801951, R0

.L00801953:
// p_acspec.c:1116   case 1:
  ADD          R0, 1, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1118   break;
  BSR          .L00801951, R0

.L00801954:
// p_acspec.c:1119   case 2:
  ADD          R0, 2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1121   break;
  BSR          .L00801951, R0

.L00801955:
// p_acspec.c:1122   case 3:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD27
  MOV.L        RD27, (R2, 200)
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1124   P_AcsRun_Push(run, i);
  ADD          RQ18, 0, RQ10
  ADD          RD27, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1125   break;
  BSR          .L00801951, R0

.L00801956:
// p_acspec.c:1127   case 4:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1128   sp=*run->cs++;			a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1129   P_AcsRun_LpSec(run, sp, a1, 0, 0, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1130   break;
  BSR          .L00801951, R0

.L00801957:
// p_acspec.c:1131   case 5:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1132   sp=*run->cs++;			a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1133   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1134   P_AcsRun_LpSec(run, sp, a1, a2, 0, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1135   break;
  BSR          .L00801951, R0

.L00801958:
// p_acspec.c:1136   case 6:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1137   sp=*run->cs++;			a3=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1138   a2=P_AcsRun_Pop(run);	a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1139   P_AcsRun_LpSec(run, sp, a1, a2, a3, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  MOV.L        (R2, 220), RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1140   break;
  BSR          .L00801951, R0

.L00801959:
// p_acspec.c:1141   case 7:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1142   sp=*run->cs++;			a4=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 216)
// p_acspec.c:1143   a3=P_AcsRun_Pop(run);	a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1144   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1145   P_AcsRun_LpSec(run, sp, a1, a2, a3, a4, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  MOV.L        (R2, 220), RD14
  MOV.L        (R2, 216), RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1146   break;
  BSR          .L00801951, R0

.L0080195A:
// p_acspec.c:1147   case 8:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1148   sp=*run->cs++;			a5=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 212)
// p_acspec.c:1149   a4=P_AcsRun_Pop(run);	a3=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 216)
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1150   a2=P_AcsRun_Pop(run);	a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1151   P_AcsRun_LpSec(run, sp, a1, a2, a3, a4, a5);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  MOV.L        (R2, 220), RD14
  MOV.L        (R2, 216), RD15
  MOV.L        (R2, 212), RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1152   break;
  BSR          .L00801951, R0

.L0080195B:
// p_acspec.c:1154   case 9:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1155   sp=*run->cs++;			a1=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD8
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1156   P_AcsRun_LpSec(run, sp, a1, 0, 0, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          R0, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1157   break;
  BSR          .L00801951, R0

.L0080195C:
// p_acspec.c:1158   case 10:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1159   sp=*run->cs++;			a1=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD8
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1160   a2=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD22
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1161   P_AcsRun_LpSec(run, sp, a1, a2, 0, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          R0, 0, RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1162   break;
  BSR          .L00801951, R0

.L0080195D:
// p_acspec.c:1163   case 11:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1164   sp=*run->cs++;			a1=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1165   a2=*run->cs++;			a3=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD27
  MOV.L        RD27, (R2, 220)
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1166   P_AcsRun_LpSec(run, sp, a1, a2, a3, 0, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RD27, 0, RD14
  ADD          R0, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1167   break;
  BSR          .L00801951, R0

.L0080195E:
// p_acspec.c:1168   case 12:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1169   sp=*run->cs++;			a1=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1170   a2=*run->cs++;			a3=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD27
  MOV.L        RD27, (R2, 220)
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1171   a4=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD26
  MOV.L        RD26, (R2, 216)
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1172   P_AcsRun_LpSec(run, sp, a1, a2, a3, a4, 0);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RD27, 0, RD14
  ADD          RD26, 0, RD15
  ADD          R0, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1173   break;
  BSR          .L00801951, R0

.L0080195F:
// p_acspec.c:1174   case 13:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1175   sp=*run->cs++;			a1=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD8
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1176   a2=*run->cs++;			a3=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD22
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD27
  MOV.L        RD27, (R2, 220)
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1177   a4=*run->cs++;			a5=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD26
  MOV.L        RD26, (R2, 216)
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD25
  MOV.L        RD25, (R2, 212)
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1178   P_AcsRun_LpSec(run, sp, a1, a2, a3, a4, a5);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  ADD          RD22, 0, RD13
  ADD          RD27, 0, RD14
  ADD          RD26, 0, RD15
  ADD          RD25, 0, RD16
  BSR          P_AcsRun_LpSec, R1
// p_acspec.c:1179   break;
  BSR          .L00801951, R0

.L00801960:
// p_acspec.c:1181   case 14:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1183   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1184   P_AcsRun_Push(run, a1+a2);
  ADDS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1185   break;
  BSR          .L00801951, R0

.L00801961:
// p_acspec.c:1186   case 15:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1188   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1189   P_AcsRun_Push(run, a1-a2);
  SUBS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1190   break;
  BSR          .L00801951, R0

.L00801962:
// p_acspec.c:1191   case 16:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1193   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1194   P_AcsRun_Push(run, a1*a2);
  MULS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1195   break;
  BSR          .L00801951, R0

.L00801963:
// p_acspec.c:1196   case 17:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1198   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1199   if(!a2)
  BRNE.L       R0, RD22, .L008019C0
// p_acspec.c:1200   {
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1202   break;
  BSR          .L00801951, R0

.L008019C0:
// p_acspec.c:1203   }
  DIVS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1205   break;
  BSR          .L00801951, R0

.L00801964:
// p_acspec.c:1206   case 18:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1208   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1209   if(!a2)
  BRNE.L       R0, RD22, .L008019C1
// p_acspec.c:1210   {
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1212   break;
  BSR          .L00801951, R0

.L008019C1:
// p_acspec.c:1213   }
  MODS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1215   break;
  BSR          .L00801951, R0

.L00801965:
// p_acspec.c:1216   case 19:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1218   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1219   P_AcsRun_Push(run, a1==a2);
  CMPEQ.Q      RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1220   break;
  BSR          .L00801951, R0

.L00801966:
// p_acspec.c:1221   case 20:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1223   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1224   P_AcsRun_Push(run, a1!=a2);
  CMPNE.Q      RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1225   break;
  BSR          .L00801951, R0

.L00801967:
// p_acspec.c:1226   case 21:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1228   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1230   P_AcsRun_Push(run, a2<a1);
  CMPGT.Q      RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1231   break;
  BSR          .L00801951, R0

.L00801968:
// p_acspec.c:1232   case 22:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1234   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1236   P_AcsRun_Push(run, a2>a1);
  CMPGT.Q      RD22, RD8, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1237   break;
  BSR          .L00801951, R0

.L00801969:
// p_acspec.c:1238   case 23:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1240   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1242   P_AcsRun_Push(run, a2<=a1);
  CMPGE.Q      RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1243   break;
  BSR          .L00801951, R0

.L0080196A:
// p_acspec.c:1244   case 24:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1246   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1248   P_AcsRun_Push(run, a2>=a1);
  CMPGE.Q      RD22, RD8, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1249   break;
  BSR          .L00801951, R0

.L0080196B:
// p_acspec.c:1251   case 25:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1253   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1254   P_AcsRun_SetLocalVar(run, sp, a1);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1255   break;
  BSR          .L00801951, R0

.L0080196C:
// p_acspec.c:1256   case 26:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1258   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1259   P_AcsRun_SetMapVar(run, sp, a1);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1260   break;
  BSR          .L00801951, R0

.L0080196D:
// p_acspec.c:1261   case 27:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1263   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1264   P_AcsRun_SetWorldVar(run, sp, a1);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADDS.L       RD8, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1265   break;
  BSR          .L00801951, R0

.L0080196E:
// p_acspec.c:1267   case 28:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1269   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1270   P_AcsRun_Push(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1271   break;
  BSR          .L00801951, R0

.L0080196F:
// p_acspec.c:1272   case 29:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1274   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1275   P_AcsRun_Push(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1276   break;
  BSR          .L00801951, R0

.L00801970:
// p_acspec.c:1277   case 30:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD21
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1279   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1280   P_AcsRun_Push(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1281   break;
  BSR          .L00801951, R0

.L00801971:
// p_acspec.c:1283   case 31:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1285   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1286   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1287   P_AcsRun_SetLocalVar(run, sp, a1+a2);
  ADDS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1288   break;
  BSR          .L00801951, R0

.L00801972:
// p_acspec.c:1289   case 32:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1291   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1292   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1293   P_AcsRun_SetMapVar(run, sp, a1+a2);
  ADDS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1294   break;
  BSR          .L00801951, R0

.L00801973:
// p_acspec.c:1295   case 33:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1297   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1298   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1299   P_AcsRun_SetWorldVar(run, sp, a1+a2);
  ADDS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1300   break;
  BSR          .L00801951, R0

.L00801974:
// p_acspec.c:1302   case 34:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1304   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1305   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1306   P_AcsRun_SetLocalVar(run, sp, a1-a2);
  SUBS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1307   break;
  BSR          .L00801951, R0

.L00801975:
// p_acspec.c:1308   case 35:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1310   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1311   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1312   P_AcsRun_SetMapVar(run, sp, a1-a2);
  SUBS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1313   break;
  BSR          .L00801951, R0

.L00801976:
// p_acspec.c:1314   case 36:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1316   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1317   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1318   P_AcsRun_SetWorldVar(run, sp, a1-a2);
  SUBS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1319   break;
  BSR          .L00801951, R0

.L00801977:
// p_acspec.c:1321   case 37:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1323   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1324   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1325   P_AcsRun_SetLocalVar(run, sp, a1*a2);
  MULS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1326   break;
  BSR          .L00801951, R0

.L00801978:
// p_acspec.c:1327   case 38:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1329   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1330   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1331   P_AcsRun_SetMapVar(run, sp, a1*a2);
  MULS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1332   break;
  BSR          .L00801951, R0

.L00801979:
// p_acspec.c:1333   case 39:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1335   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1336   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1337   P_AcsRun_SetWorldVar(run, sp, a1*a2);
  MULS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1338   break;
  BSR          .L00801951, R0

.L0080197A:
// p_acspec.c:1340   case 40:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1342   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1343   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1344   if(!a2)
  BRNE.L       R0, RD22, .L008019C2
// p_acspec.c:1345   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1346   break;		}
  BSR          .L00801951, R0

.L008019C2:
  DIVS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1348   break;
  BSR          .L00801951, R0

.L0080197B:
// p_acspec.c:1349   case 41:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1351   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1352   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1353   if(!a2)
  BRNE.L       R0, RD22, .L008019C3
// p_acspec.c:1354   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1355   break;		}
  BSR          .L00801951, R0

.L008019C3:
  DIVS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1357   break;
  BSR          .L00801951, R0

.L0080197C:
// p_acspec.c:1358   case 42:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1360   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1361   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1362   if(!a2)
  BRNE.L       R0, RD22, .L008019C4
// p_acspec.c:1363   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1364   break;		}
  BSR          .L00801951, R0

.L008019C4:
  DIVS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1366   break;
  BSR          .L00801951, R0

.L0080197D:
// p_acspec.c:1368   case 43:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1370   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1371   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1372   if(!a2)
  BRNE.L       R0, RD22, .L008019C5
// p_acspec.c:1373   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1374   break;		}
  BSR          .L00801951, R0

.L008019C5:
  MODS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1376   break;
  BSR          .L00801951, R0

.L0080197E:
// p_acspec.c:1377   case 44:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1379   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1380   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1381   if(!a2)
  BRNE.L       R0, RD22, .L008019C6
// p_acspec.c:1382   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1383   break;		}
  BSR          .L00801951, R0

.L008019C6:
  MODS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1385   break;
  BSR          .L00801951, R0

.L0080197F:
// p_acspec.c:1386   case 45:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1388   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1389   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1390   if(!a2)
  BRNE.L       R0, RD22, .L008019C7
// p_acspec.c:1391   {	run->status=-2;
  ADD          R0, -2, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1392   break;		}
  BSR          .L00801951, R0

.L008019C7:
  MODS.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1394   break;
  BSR          .L00801951, R0

.L00801980:
// p_acspec.c:1397   case 46:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1399   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1400   P_AcsRun_SetLocalVar(run, sp, a1+1);
  ADDS.L       RD8, 1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1401   break;
  BSR          .L00801951, R0

.L00801981:
// p_acspec.c:1402   case 47:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1404   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1405   P_AcsRun_SetMapVar(run, sp, a1+1);
  ADDS.L       RD8, 1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1406   break;
  BSR          .L00801951, R0

.L00801982:
// p_acspec.c:1407   case 48:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1409   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1410   P_AcsRun_SetWorldVar(run, sp, a1+1);
  ADDS.L       RD8, 1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1411   break;
  BSR          .L00801951, R0

.L00801983:
// p_acspec.c:1413   case 49:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1415   a1=P_AcsRun_GetLocalVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetLocalVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1416   P_AcsRun_SetLocalVar(run, sp, a1-1);
  ADDS.L       RD8, -1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetLocalVar, R1
// p_acspec.c:1417   break;
  BSR          .L00801951, R0

.L00801984:
// p_acspec.c:1418   case 50:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1420   a1=P_AcsRun_GetMapVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetMapVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1421   P_AcsRun_SetMapVar(run, sp, a1-1);
  ADDS.L       RD8, -1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetMapVar, R1
// p_acspec.c:1422   break;
  BSR          .L00801951, R0

.L00801985:
// p_acspec.c:1423   case 51:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1425   a1=P_AcsRun_GetWorldVar(run, sp);
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  BSR          P_AcsRun_GetWorldVar, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1426   P_AcsRun_SetWorldVar(run, sp, a1-1);
  ADDS.L       RD8, -1, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RD21, 0, RD11
  ADD          RQ20, 0, RD12
  BSR          P_AcsRun_SetWorldVar, R1
// p_acspec.c:1427   break;
  BSR          .L00801951, R0

.L00801986:
// p_acspec.c:1429   case 52:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1431   run->cs=(int *)(p_acsvm_imgdat+sp);
  MOV.Q        p_acsvm_imgdat, RQ27
  ADD          RQ27, RD21, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1432   break;
  BSR          .L00801951, R0

.L00801987:
// p_acspec.c:1433   case 53:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1435   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1436   if(a1)
  BREQ.L       R0, RD8, .L008019C8
// p_acspec.c:1437   {
  MOV.Q        p_acsvm_imgdat, RQ27
  ADD          RQ27, RD21, RQ23
  MOV.Q        RQ23, (RQ18, 24)

.L008019C8:
// p_acspec.c:1439   }
  BSR          .L00801951, R0

.L00801988:
// p_acspec.c:1441   case 54:	/* drop item */
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
// p_acspec.c:1443   break;
  BSR          .L00801951, R0

.L00801989:
// p_acspec.c:1444   case 55:	/* delay */
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1446   run->delay=a1;
  MOV.L        RD8, (RQ18, 1068)
// p_acspec.c:1447   run->status=3;
  ADD          R0, 3, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1448   break;
  BSR          .L00801951, R0

.L0080198A:
// p_acspec.c:1449   case 56:	/* delaydirect */
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1451   run->delay=a1;
  MOV.L        RD8, (RQ18, 1068)
// p_acspec.c:1452   run->status=3;
  ADD          R0, 3, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1453   break;
  BSR          .L00801951, R0

.L0080198B:
// p_acspec.c:1454   case 57:	/* random(lo, hi) */
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1456   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1457   if(a1>a2)
  BRLE.L       RD22, RD8, .L008019C9
// p_acspec.c:1458   { a3=a1; a1=a2; a2=a3; }
  ADD          RD8, 0, RD27
  ADD          RD22, 0, RD8
  ADD          RD27, 0, RD22
  MOV.L        RD27, (R2, 220)

.L008019C9:
  BRLE.L       RD8, RD22, .L008019CA
// p_acspec.c:1460   a3=a1+(rand()%(a2-a1));
  BSR          rand, R1
  ADD          RQ10, 0, RQ20
  SUBS.L       RD22, RD8, RQ27
  MODS.L       RQ20, RQ27, RQ26
  MOV.Q        RQ27, (R2, 136)
  ADDS.L       RD8, RQ26, RD25
  MOV.L        RD25, (R2, 220)
  BSR          .L008019CB, R0

.L008019CA:
// p_acspec.c:1462   a3=a1;
  MOV.L        RD8, (R2, 220)

.L008019CB:
// p_acspec.c:1463   P_AcsRun_Push(run, a3);
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 220), RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1464   break;
  BSR          .L00801951, R0

.L0080198C:
// p_acspec.c:1465   case 58:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1467   a2=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1468   if(a1>a2)
  BRLE.L       RD22, RD8, .L008019CC
// p_acspec.c:1469   { a3=a1; a1=a2; a2=a3; }
  ADD          RD8, 0, RD27
  ADD          RD22, 0, RD8
  ADD          RD27, 0, RD22
  MOV.L        RD27, (R2, 220)

.L008019CC:
  BRLE.L       RD8, RD22, .L008019CD
// p_acspec.c:1471   a3=a1+(rand()%(a2-a1));
  BSR          rand, R1
  ADD          RQ10, 0, RQ20
  SUBS.L       RD22, RD8, RQ27
  MODS.L       RQ20, RQ27, RQ26
  MOV.Q        RQ27, (R2, 136)
  ADDS.L       RD8, RQ26, RD25
  MOV.L        RD25, (R2, 220)
  BSR          .L008019CE, R0

.L008019CD:
// p_acspec.c:1473   a3=a1;
  MOV.L        RD8, (R2, 220)

.L008019CE:
// p_acspec.c:1474   P_AcsRun_Push(run, a3);
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 220), RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1475   break;
  BSR          .L00801951, R0

.L0080198D:
// p_acspec.c:1476   case 59:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1478   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1479   a3=P_AcsRun_ThingCount(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ThingCount, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1480   P_AcsRun_Push(run, a3);
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 220), RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1481   break;
  BSR          .L00801951, R0

.L0080198E:
// p_acspec.c:1482   case 60:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1484   a2=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1485   a3=P_AcsRun_ThingCount(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ThingCount, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1486   P_AcsRun_Push(run, a3);
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 220), RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1487   break;
  BSR          .L00801951, R0

.L0080198F:
// p_acspec.c:1488   case 61:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1490   P_AcsRun_TagWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_TagWait, R1
// p_acspec.c:1491   break;
  BSR          .L00801951, R0

.L00801990:
// p_acspec.c:1492   case 62:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1494   P_AcsRun_TagWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_TagWait, R1
// p_acspec.c:1495   break;
  BSR          .L00801951, R0

.L00801991:
// p_acspec.c:1496   case 63:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1498   P_AcsRun_PolyWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_PolyWait, R1
// p_acspec.c:1499   break;
  BSR          .L00801951, R0

.L00801992:
// p_acspec.c:1500   case 64:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD8
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1502   P_AcsRun_PolyWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_PolyWait, R1
// p_acspec.c:1503   break;
  BSR          .L00801951, R0

.L00801993:
// p_acspec.c:1504   case 65:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1506   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1507   P_AcsRun_ChangeFloor(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ChangeFloor, R1
// p_acspec.c:1508   break;
  BSR          .L00801951, R0

.L00801994:
// p_acspec.c:1509   case 66:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1511   a2=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1512   P_AcsRun_ChangeFloor(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ChangeFloor, R1
// p_acspec.c:1513   break;
  BSR          .L00801951, R0

.L00801995:
// p_acspec.c:1514   case 67:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1516   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1517   P_AcsRun_ChangeCeiling(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ChangeCeiling, R1
// p_acspec.c:1518   break;
  BSR          .L00801951, R0

.L00801996:
// p_acspec.c:1519   case 68:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1521   a2=*run->cs++;
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1522   P_AcsRun_ChangeCeiling(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ChangeCeiling, R1
// p_acspec.c:1523   break;
  BSR          .L00801951, R0

.L00801997:
// p_acspec.c:1524   case 69:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsTryStartRun, R1
// p_acspec.c:1526   break;
  BSR          .L00801951, R0

.L00801998:
// p_acspec.c:1527   case 70:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1529   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1530   P_AcsRun_Push(run, (a1&&a2)?1:0);
  BREQ.L       R0, RD8, .L008019CF
  BREQ.L       R0, RD22, .L008019CF

.L008019D1:
  ADD          R0, 1, RQ20
  BSR          .L008019D0, R0

.L008019CF:
  ADD          R0, 0, RQ20

.L008019D0:
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1531   break;
  BSR          .L00801951, R0

.L00801999:
// p_acspec.c:1532   case 71:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1534   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1535   P_AcsRun_Push(run, (a1||a2)?1:0);
  BRNE.L       R0, RD8, .L008019D5
  BRNE.L       R0, RD22, .L008019D5
  BSR          .L008019D3, R0

.L008019D5:
  ADD          R0, 1, RQ27
  MOV.Q        RQ27, (R2, 136)
  BSR          .L008019D4, R0

.L008019D3:
  MOV.Q        RQ0, (R2, 136)

.L008019D4:
  ADD          RQ18, 0, RQ10
  MOV.L        (R2, 136), RQ11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1536   break;
  BSR          .L00801951, R0

.L0080199A:
// p_acspec.c:1537   case 72:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1539   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1540   P_AcsRun_Push(run, a1&a2);
  AND          RD8, RD22, RQ11
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1541   break;
  BSR          .L00801951, R0

.L0080199B:
// p_acspec.c:1542   case 73:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1544   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1545   P_AcsRun_Push(run, a1|a2);
  OR           RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1546   break;
  BSR          .L00801951, R0

.L0080199C:
// p_acspec.c:1547   case 74:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1549   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1550   P_AcsRun_Push(run, a1^a2);
  XOR          RD8, RD22, RQ11
  MOV.Q        RQ11, (R2, 136)
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1551   break;
  BSR          .L00801951, R0

.L0080199D:
// p_acspec.c:1552   case 75:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1554   P_AcsRun_Push(run, !a1);
  CMPEQ.Q      RD8, R0, RQ11
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1555   break;
  BSR          .L00801951, R0

.L0080199E:
// p_acspec.c:1556   case 76:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1558   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1559   P_AcsRun_Push(run, a1<<a2);
  SHAD.L       RD8, RD22, RQ20
  ADD          RQ18, 0, RQ10
  ADD          RQ20, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1560   break;
  BSR          .L00801951, R0

.L0080199F:
// p_acspec.c:1561   case 77:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1563   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1564   P_AcsRun_Push(run, a1>>a2);
  SHAR         RD8, RD22, RQ11
  MOV.Q        RQ11, (R2, 136)
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1565   break;
  BSR          .L00801951, R0

.L008019A0:
// p_acspec.c:1566   case 78:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1568   P_AcsRun_Push(run, -a1);
  SUBS.L       R0, RD8, RQ11
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1569   break;
  BSR          .L00801951, R0

.L008019A1:
// p_acspec.c:1570   case 79:
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1572   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1573   if(!a1)
  BRNE.L       R0, RD8, .L008019D7
// p_acspec.c:1574   {
  MOV.Q        p_acsvm_imgdat, RQ27
  ADD          RQ27, RD21, RQ23
  MOV.Q        RQ23, (RQ18, 24)

.L008019D7:
// p_acspec.c:1576   }
  BSR          .L00801951, R0

.L008019A2:
// p_acspec.c:1580   case 81:	/* scriptwait */
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1582   P_AcsRun_ScriptWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_ScriptWait, R1
// p_acspec.c:1583   break;
  BSR          .L00801951, R0

.L008019A3:
// p_acspec.c:1584   case 82:	/* scriptwaitdirect */
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD8
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1586   P_AcsRun_ScriptWait(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_ScriptWait, R1
// p_acspec.c:1587   break;
  BSR          .L00801951, R0

.L008019A4:
// p_acspec.c:1588   case 83:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_ClearLineSpecial, R1
// p_acspec.c:1590   break;
  BSR          .L00801951, R0

.L008019A5:
// p_acspec.c:1591   case 84:
  MOV.Q        (RQ18, 24), RQ23
  ADD          RQ23, 0, RQ9
  MOV.L        (RQ23, 0), RD22
  ADD          RQ9, 4, RQ23
  MOV.Q        RQ23, (RQ18, 24)
// p_acspec.c:1593   sp=*run->cs++;
  MOV.Q        (RQ18, 24), RQ9
  ADD          RQ9, 0, RQ23
  MOV.L        (RQ9, 0), RD21
  ADD          RQ23, 4, RQ9
  MOV.Q        RQ9, (RQ18, 24)
// p_acspec.c:1594   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1595   if(a1==a2)
  BRNE.Q       RD22, RD8, .L008019D8
// p_acspec.c:1596   {
  MOV.Q        p_acsvm_imgdat, RQ27
  ADD          RQ27, RD21, RQ23
  MOV.Q        RQ23, (RQ18, 24)

.L008019D8:
// p_acspec.c:1598   }
  BSR          .L00801951, R0

.L008019A6:
// p_acspec.c:1600   case 85:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_BeginPrint, R1
// p_acspec.c:1602   break;
  BSR          .L00801951, R0

.L008019A7:
// p_acspec.c:1603   case 86:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_EndPrint, R1
// p_acspec.c:1605   break;
  BSR          .L00801951, R0

.L008019A8:
// p_acspec.c:1606   case 87:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1608   P_AcsRun_PrintString(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_PrintString, R1
// p_acspec.c:1609   break;
  BSR          .L00801951, R0

.L008019A9:
// p_acspec.c:1610   case 88:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1612   P_AcsRun_PrintNumber(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_PrintNumber, R1
// p_acspec.c:1613   break;
  BSR          .L00801951, R0

.L008019AA:
// p_acspec.c:1614   case 89:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1616   P_AcsRun_PrintChar(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_PrintChar, R1
// p_acspec.c:1617   break;
  BSR          .L00801951, R0

.L008019AB:
// p_acspec.c:1618   case 90:	/* Player Count */
  ADD          RQ18, 0, RQ10
  ADD          R0, 1, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1620   break;
  BSR          .L00801951, R0

.L008019AC:
// p_acspec.c:1621   case 91:	/* Game Type */
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1623   break;
  BSR          .L00801951, R0

.L008019AD:
// p_acspec.c:1624   case 92:	/* Get Skill */
  ADD          RQ18, 0, RQ10
  ADD          R0, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1626   break;
  BSR          .L00801951, R0

.L008019AE:
// p_acspec.c:1629   a1=leveltime;
  MOV.L        leveltime, RD8
// p_acspec.c:1630   P_AcsRun_Push(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_Push, R1
// p_acspec.c:1631   break;
  BSR          .L00801951, R0

.L008019AF:
// p_acspec.c:1633   case 94:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1635   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1636   P_AcsRun_SectorSound(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_SectorSound, R1
// p_acspec.c:1637   break;
  BSR          .L00801951, R0

.L008019B0:
// p_acspec.c:1638   case 95:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1640   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1641   P_AcsRun_AmbientSound(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_AmbientSound, R1
// p_acspec.c:1642   break;
  BSR          .L00801951, R0

.L008019B1:
// p_acspec.c:1643   case 96:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1645   P_AcsRun_SoundSequence(run, a1);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  BSR          P_AcsRun_SoundSequence, R1
// p_acspec.c:1646   break;
  BSR          .L00801951, R0

.L008019B2:
// p_acspec.c:1647   case 97:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 216)
// p_acspec.c:1649   a3=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1650   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1651   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1652   P_AcsRun_SetLineTexture(run, a1, a2, a3, a4);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  MOV.L        (R2, 220), RD13
  MOV.L        (R2, 216), RD14
  BSR          P_AcsRun_SetLineTexture, R1
// p_acspec.c:1653   break;
  BSR          .L00801951, R0

.L008019B3:
// p_acspec.c:1654   case 98:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1656   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1657   P_AcsRun_SetLineBlocking(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_SetLineBlocking, R1
// p_acspec.c:1658   break;
  BSR          .L00801951, R0

.L008019B4:
// p_acspec.c:1659   case 99:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 204)
// p_acspec.c:1661   a6=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 208)
// p_acspec.c:1662   a5=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 212)
// p_acspec.c:1663   a4=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 216)
// p_acspec.c:1664   a3=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1665   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1666   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1667   P_AcsRun_SetLineSpecial(run, a1, a2, a3, a4, a5, a6, a7);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  MOV.L        (R2, 220), RD13
  MOV.L        (R2, 216), RD14
  MOV.L        (R2, 212), RD15
  MOV.L        (R2, 208), RD16
  MOV.L        (R2, 204), RD17
  BSR          P_AcsRun_SetLineSpecial, R1
// p_acspec.c:1668   break;
  BSR          .L00801951, R0

.L008019B5:
// p_acspec.c:1669   case 100:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  MOV.L        RD10, (R2, 220)
// p_acspec.c:1671   a2=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1672   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1673   P_AcsRun_ThingSound(run, a1, a2, a3);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  MOV.L        (R2, 220), RD13
  BSR          P_AcsRun_ThingSound, R1
// p_acspec.c:1674   break;
  BSR          .L00801951, R0

.L008019B6:
// p_acspec.c:1675   case 101:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_EndPrintBold, R1
// p_acspec.c:1677   break;
  BSR          .L00801951, R0

.L008019B7:
// p_acspec.c:1678   case 102:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1680   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1681   P_AcsRun_ActivatorSound(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_ActivatorSound, R1
// p_acspec.c:1682   break;
  BSR          .L00801951, R0

.L008019B8:
// p_acspec.c:1683   case 103:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1685   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1686   P_AcsRun_LocalAmbientSound(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_LocalAmbientSound, R1
// p_acspec.c:1687   break;
  BSR          .L00801951, R0

.L008019B9:
// p_acspec.c:1688   case 104:
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADD          RQ10, 0, RD22
// p_acspec.c:1690   a1=P_AcsRun_Pop(run);
  ADD          RQ18, 0, RQ10
  BSR          P_AcsRun_Pop, R1
  ADDS.L       RQ10, 0, RD8
// p_acspec.c:1691   P_AcsRun_SetLineMonsterBlocking(run, a1, a2);
  ADD          RQ18, 0, RQ10
  ADDS.L       RD8, 0, RD11
  ADD          RD22, 0, RD12
  BSR          P_AcsRun_SetLineMonsterBlocking, R1
// p_acspec.c:1692   break;
  BSR          .L00801951, R0

.L008019BA:
// p_acspec.c:1694   default:
  ADD          R0, -1, RD27
  MOV.B        RD27, (RQ18, 1065)
// p_acspec.c:1696   break;

.L00801951:

.L00801950:
  MOV.L        (R2, 224), RD27
  ADD          RD27, 0, RQ20
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 224)
  BRLE.L       R0, RQ20, .L008019D9
  MOV.B        (RQ18, 1065), RQ27
  MOV.Q        RQ27, (R2, 136)
  BRNE.L       R0, RQ27, .L008019D9
  BSR          .L0080194E, R0

.L008019D9:

.L0080194F:

.L00C03042:
  ADD          R2, 440, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SetupRemapThingType:
  ADD          R2, -56, R2
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  ADD          R2, -264, R2
  ADD          RD10, 0, RD23
  ADD          R0, 10, RD22
  ADD          R0, 29, RD20
// p_setup.c:347   ttype=type;
  ADD          RD23, 0, RD18
// p_setup.c:349   if ( gamemode == hexen)
  MOV.L        gamemode, RD13
  BRNE.Q       5, RD13, .L00801EEF
// p_setup.c:350   {
  AND          RD18, -1, RQ8
  LDIZ         3002, RD13
  BRGE.L       RD13, RQ8, .L00801F84
  AND          RD18, -1, RQ8
  BRGE.L       123, RQ8, .L00801F85
  AND          RD18, -1, RQ8
  ADD          RQ8, -1, RQ10
  ADD          R0, 122, RQ6
  BRGTU.Q      RQ6, RQ10, .L00801F83
  LEA.B        .L00C8001E, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001E:
  BSR          .L00801EF1, R0
  BSR          .L00801EF2, R0
  BSR          .L00801EF3, R0
  BSR          .L00801EF4, R0
  BSR          .L00801EF5, R0
  BSR          .L00801EF6, R0
  BSR          .L00801EF7, R0
  BSR          .L00801EF8, R0
  BSR          .L00801EF9, R0
  BSR          .L00801EFA, R0
  BSR          .L00801EFB, R0
  BSR          .L00801EFC, R0
  BSR          .L00801EFD, R0
  BSR          .L00801EFE, R0
  BSR          .L00801EFF, R0
  BSR          .L00801F00, R0
  BSR          .L00801F01, R0
  BSR          .L00801F02, R0
  BSR          .L00801F03, R0
  BSR          .L00801F04, R0
  BSR          .L00801F05, R0
  BSR          .L00801F06, R0
  BSR          .L00801F07, R0
  BSR          .L00801F08, R0
  BSR          .L00801F09, R0
  BSR          .L00801F0A, R0
  BSR          .L00801F0B, R0
  BSR          .L00801F0C, R0
  BSR          .L00801F0D, R0
  BSR          .L00801F0E, R0
  BSR          .L00801F0F, R0
  BSR          .L00801F83, R0
  BSR          .L00801F83, R0
  BSR          .L00801F10, R0
  BSR          .L00801F11, R0
  BSR          .L00801F83, R0
  BSR          .L00801F12, R0
  BSR          .L00801F13, R0
  BSR          .L00801F14, R0
  BSR          .L00801F15, R0
  BSR          .L00801F16, R0
  BSR          .L00801F17, R0
  BSR          .L00801F18, R0
  BSR          .L00801F19, R0
  BSR          .L00801F1A, R0
  BSR          .L00801F1B, R0
  BSR          .L00801F1C, R0
  BSR          .L00801F1D, R0
  BSR          .L00801F1E, R0
  BSR          .L00801F1F, R0
  BSR          .L00801F20, R0
  BSR          .L00801F21, R0
  BSR          .L00801F22, R0
  BSR          .L00801F23, R0
  BSR          .L00801F24, R0
  BSR          .L00801F25, R0
  BSR          .L00801F26, R0
  BSR          .L00801F27, R0
  BSR          .L00801F28, R0
  BSR          .L00801F29, R0
  BSR          .L00801F2A, R0
  BSR          .L00801F2B, R0
  BSR          .L00801F2C, R0
  BSR          .L00801F2D, R0
  BSR          .L00801F2E, R0
  BSR          .L00801F2F, R0
  BSR          .L00801F83, R0
  BSR          .L00801F30, R0
  BSR          .L00801F31, R0
  BSR          .L00801F32, R0
  BSR          .L00801F33, R0
  BSR          .L00801F34, R0
  BSR          .L00801F35, R0
  BSR          .L00801F36, R0
  BSR          .L00801F37, R0
  BSR          .L00801F38, R0
  BSR          .L00801F39, R0
  BSR          .L00801F3A, R0
  BSR          .L00801F3B, R0
  BSR          .L00801F3C, R0
  BSR          .L00801F3D, R0
  BSR          .L00801F3E, R0
  BSR          .L00801F3F, R0
  BSR          .L00801F40, R0
  BSR          .L00801F41, R0
  BSR          .L00801F42, R0
  BSR          .L00801F43, R0
  BSR          .L00801F44, R0
  BSR          .L00801F45, R0
  BSR          .L00801F46, R0
  BSR          .L00801F47, R0
  BSR          .L00801F48, R0
  BSR          .L00801F49, R0
  BSR          .L00801F4A, R0
  BSR          .L00801F4B, R0
  BSR          .L00801F4C, R0
  BSR          .L00801F4D, R0
  BSR          .L00801F4E, R0
  BSR          .L00801F4F, R0
  BSR          .L00801F50, R0
  BSR          .L00801F51, R0
  BSR          .L00801F52, R0
  BSR          .L00801F53, R0
  BSR          .L00801F54, R0
  BSR          .L00801F55, R0
  BSR          .L00801F56, R0
  BSR          .L00801F57, R0
  BSR          .L00801F58, R0
  BSR          .L00801F59, R0
  BSR          .L00801F5A, R0
  BSR          .L00801F5B, R0
  BSR          .L00801F5C, R0
  BSR          .L00801F5D, R0
  BSR          .L00801F5E, R0
  BSR          .L00801F5F, R0
  BSR          .L00801F60, R0
  BSR          .L00801F61, R0
  BSR          .L00801F62, R0
  BSR          .L00801F63, R0
  BSR          .L00801F64, R0
  BSR          .L00801F65, R0
  BSR          .L00801F66, R0
  BSR          .L00801F83, R0

.L00801F85:
  AND          RD18, -1, RQ9
  ADD          R0, 2002, RD13
  BRGE.L       RD13, RQ9, .L00801F86
  BREQ.Q       123, RD18, .L00801F67
  BREQ.Q       124, RD18, .L00801F68
  BREQ.Q       140, RD18, .L00801F69
  BREQ.Q       254, RD18, .L00801F6A
  ADD          R0, 1410, RD13
  BREQ.Q       RD13, RD18, .L00801F6B
  ADD          R0, 2001, RD13
  BREQ.Q       RD13, RD18, .L00801F6C

.L00801F86:
  ADD          R0, 2002, RD13
  BREQ.Q       RD13, RD18, .L00801F6D
  ADD          R0, 2003, RD13
  BREQ.Q       RD13, RD18, .L00801F6E
  ADD          R0, 2004, RD13
  BREQ.Q       RD13, RD18, .L00801F6F
  ADD          R0, 2005, RD13
  BREQ.Q       RD13, RD18, .L00801F70
  ADD          R0, 2035, RD13
  BREQ.Q       RD13, RD18, .L00801F71
  LDIZ         3000, RD13
  BREQ.Q       RD13, RD18, .L00801F72
  LDIZ         3001, RD13
  BREQ.Q       RD13, RD18, .L00801F73

.L00801F84:
  AND          RD18, -1, RQ9
  LDIZ         10011, RD13
  BRGE.L       RD13, RQ9, .L00801F87
  LDIZ         3002, RD13
  BREQ.Q       RD13, RD18, .L00801F74
  LDIZ         3003, RD13
  BREQ.Q       RD13, RD18, .L00801F75
  LDIZ         8004, RD13
  BREQ.Q       RD13, RD18, .L00801F76
  LDIZ         8020, RD13
  BREQ.Q       RD13, RD18, .L00801F77
  LDIZ         8065, RD13
  BREQ.Q       RD13, RD18, .L00801F79
  LDIZ         8080, RD13
  BREQ.Q       RD13, RD18, .L00801F78
  LDIZ         8100, RD13
  BREQ.Q       RD13, RD18, .L00801F7A
  BSR          .L00801F83, R0

.L00801F87:
  AND          RD18, -1, RQ9
  LDIZ         10100, RD13
  BRGE.L       RD13, RQ9, .L00801F88
  LDIZ         10011, RD13
  BREQ.Q       RD13, RD18, .L00801F7B
  LDIZ         10030, RD13
  BREQ.Q       RD13, RD18, .L00801F7C
  LDIZ         10060, RD13
  BREQ.Q       RD13, RD18, .L00801F7D
  LDIZ         10080, RD13
  BREQ.Q       RD13, RD18, .L00801F7E
  BSR          .L00801F83, R0

.L00801F88:
  LDIZ         10100, RD13
  BREQ.Q       RD13, RD18, .L00801F7F
  LDIZ         10101, RD13
  BREQ.Q       RD13, RD18, .L00801F80
  LDIZ         10102, RD13
  BREQ.Q       RD13, RD18, .L00801F81
  LDIZ         10200, RD13
  BREQ.Q       RD13, RD18, .L00801F82
  BSR          .L00801F83, R0

.L00801EF1:
// p_setup.c:353   case 1:					break; //Player Spawn
  BSR          .L00801EF0, R0

.L00801EF2:
// p_setup.c:354   case 2:					break; //Player Spawn
  BSR          .L00801EF0, R0

.L00801EF3:
// p_setup.c:355   case 3:					break; //Player Spawn
  BSR          .L00801EF0, R0

.L00801EF4:
// p_setup.c:356   case 4:					break; //Player Spawn
  BSR          .L00801EF0, R0

.L00801EF5:
// p_setup.c:357   case 5:		ttype=10;	break;	//Winged Statue
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801EF6:
// p_setup.c:358   case 6:		ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801EF7:
// p_setup.c:359   case 7:		ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801EF8:
// p_setup.c:360   case 8:					break; //BagOfHolding -> Backpack
  BSR          .L00801EF0, R0

.L00801EF9:
// p_setup.c:361   case 9:		ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801EFA:
// p_setup.c:362   case 10:	ttype=2007;	break;	//Wand Ammo -> Clip
  ADD          R0, 2007, RD18
  BSR          .L00801EF0, R0

.L00801EFB:
// p_setup.c:363   case 11:				break;	//Deathmatch Start
  BSR          .L00801EF0, R0

.L00801EFC:
// p_setup.c:364   case 12:	ttype=5010;	break;	//Gold Wand -> Pistol
  LDIZ         5010, RD18
  BSR          .L00801EF0, R0

.L00801EFD:
// p_setup.c:365   case 13:	ttype=2048;	break;	//Mace Ammo
  LDIZ         2048, RD18
  BSR          .L00801EF0, R0

.L00801EFE:
// p_setup.c:366   case 14:				break;	//Teleport Dest
  BSR          .L00801EF0, R0

.L00801EFF:
// p_setup.c:367   case 15:	ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F00:
// p_setup.c:368   case 16:	ttype=2002;	break;	//Weapon Piece
  ADD          R0, 2002, RD18
  BSR          .L00801EF0, R0

.L00801F01:
// p_setup.c:369   case 17:	ttype=35;	break;	//Chandalier
  ADD          R0, 35, RD18
  BSR          .L00801EF0, R0

.L00801F02:
// p_setup.c:370   case 18:	ttype=2049;	break;	//Weapon Piece
  LDIZ         2049, RD18
  BSR          .L00801EF0, R0

.L00801F03:
// p_setup.c:371   case 19:	ttype=2001;	break;	//Weapon Piece
  ADD          R0, 2001, RD18
  BSR          .L00801EF0, R0

.L00801F04:
// p_setup.c:372   case 20:	ttype=2047;	break;	//Weapon Piece
  ADD          R0, 2047, RD18
  BSR          .L00801EF0, R0

.L00801F05:
// p_setup.c:373   case 21:	ttype=2004;	break;	//Weapon Piece
  ADD          R0, 2004, RD18
  BSR          .L00801EF0, R0

.L00801F06:
// p_setup.c:374   case 22:	ttype=2046;	break;	//Weapon Piece
  ADD          R0, 2046, RD18
  BSR          .L00801EF0, R0

.L00801F07:
// p_setup.c:375   case 23:	ttype=2003;	break;	//Weapon Piece
  ADD          R0, 2003, RD18
  BSR          .L00801EF0, R0

.L00801F08:
// p_setup.c:377   case 24:	ttype=54;	break;	//Dead Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F09:
// p_setup.c:378   case 25:	ttype=54;	break;	//Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F0A:
// p_setup.c:379   case 26:	ttype=54;	break;	//Swamp Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F0B:
// p_setup.c:380   case 27:	ttype=54;	break;	//Swamp Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F0C:
// p_setup.c:381   case 28:	ttype=43;	break;	//Burned Stump
  ADD          R0, 43, RD18
  BSR          .L00801EF0, R0

.L00801F0D:
// p_setup.c:382   case 29:	ttype=47;	break;	//Bare Stump
  ADD          R0, 47, RD18
  BSR          .L00801EF0, R0

.L00801F0E:
// p_setup.c:383   case 30:	ttype=10;	break;	//Artifact Pork
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F0F:
// p_setup.c:385   case 31:	ttype=3001;	break;	//Demon
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F10:
// p_setup.c:387   case 34:	ttype=3005;	break;	//Wraith
  LDIZ         3005, RD18
  BSR          .L00801EF0, R0

.L00801F11:
// p_setup.c:388   case 35:	ttype=2026;	break;	//Super Map
  ADD          R0, 2026, RD18
  BSR          .L00801EF0, R0

.L00801F12:
// p_setup.c:390   case 37:	ttype=47;	break;	//Stump
  ADD          R0, 47, RD18
  BSR          .L00801EF0, R0

.L00801F13:
// p_setup.c:391   case 38:	ttype=47;	break;	//Stump
  ADD          R0, 47, RD18
  BSR          .L00801EF0, R0

.L00801F14:
// p_setup.c:392   case 39:	ttype=85;	break;	//Shroom Large
  ADD          R0, 85, RD18
  BSR          .L00801EF0, R0

.L00801F15:
// p_setup.c:393   case 40:	ttype=85;	break;	//Shroom Large
  ADD          R0, 85, RD18
  BSR          .L00801EF0, R0

.L00801F16:
// p_setup.c:394   case 41:	ttype=85;	break;	//Shroom Large
  ADD          R0, 85, RD18
  BSR          .L00801EF0, R0

.L00801F17:
// p_setup.c:395   case 42:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F18:
// p_setup.c:396   case 43:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F19:
// p_setup.c:397   case 44:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F1A:
// p_setup.c:398   case 45:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F1B:
// p_setup.c:399   case 46:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F1C:
// p_setup.c:400   case 47:	ttype=86;	break;	//Shroom Small
  ADD          R0, 86, RD18
  BSR          .L00801EF0, R0

.L00801F1D:
// p_setup.c:401   case 48:	ttype=48;	break;	//Stalagmite Pillar
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F1E:
// p_setup.c:402   case 49:	ttype=10;	break;	//Stalagmite Large
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F1F:
// p_setup.c:403   case 50:	ttype=10;	break;	//Stalagmite Medium
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F20:
// p_setup.c:404   case 51:	ttype=10;	break;	//Stalagmite Small
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F21:
// p_setup.c:405   case 52:	ttype=10;	break;	//Stalactite Large
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F22:
// p_setup.c:406   case 53:	ttype=10;	break;	//Weapon Frost
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F23:
// p_setup.c:407   case 54:	ttype=34;	break;	//Wall Torch
  ADD          R0, 34, RD18
  BSR          .L00801EF0, R0

.L00801F24:
// p_setup.c:408   case 55:	ttype=34;	break;	//Wall Torch (Unlit)
  ADD          R0, 34, RD18
  BSR          .L00801EF0, R0

.L00801F25:
// p_setup.c:409   case 56:	ttype=10;	break;	//Stalactite Medium
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F26:
// p_setup.c:410   case 57:	ttype=10;	break;	//Stalactite Small
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F27:
// p_setup.c:411   case 58:	ttype=60;	break;	//Hanging Moss
  ADD          R0, 60, RD18
  BSR          .L00801EF0, R0

.L00801F28:
// p_setup.c:412   case 59:	ttype=60;	break;	//Hanging Moss
  ADD          R0, 60, RD18
  BSR          .L00801EF0, R0

.L00801F29:
// p_setup.c:413   case 60:	ttype=62;	break;	//Swamp Vine
  ADD          R0, 62, RD18
  BSR          .L00801EF0, R0

.L00801F2A:
// p_setup.c:414   case 61:	ttype=26;	break;	//Corpse Kabob
  ADD          R0, 26, RD18
  BSR          .L00801EF0, R0

.L00801F2B:
// p_setup.c:415   case 62:	ttype=15;	break;	//Corpse Sleeping
  ADD          R0, 15, RD18
  BSR          .L00801EF0, R0

.L00801F2C:
// p_setup.c:416   case 63:	ttype=29;	break;	//Tombstone
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F2D:
// p_setup.c:418   case 64:	ttype=29;	break;	//Tombstone
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F2E:
// p_setup.c:419   case 65:	ttype=29;	break;	//Tombstone
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F2F:
// p_setup.c:420   case 66:	ttype=29;	break;	//Tombstone
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F30:
// p_setup.c:421   case 68:	ttype=29;	break;	//Tombstone
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F31:
// p_setup.c:422   case 69:	ttype=20;	break;	//Tombstone
  ADD          R0, 20, RD18
  BSR          .L00801EF0, R0

.L00801F32:
// p_setup.c:423   case 70:	ttype=10;	break;	//?
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F33:
// p_setup.c:424   case 71:	ttype=49;	break;	//Hanging Corpse
  ADD          R0, 49, RD18
  BSR          .L00801EF0, R0

.L00801F34:
// p_setup.c:425   case 72:	ttype=10;	break;	//Gargoyle Statue
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F35:
// p_setup.c:426   case 73:	ttype=10;	break;	//Gargoyle Statue
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F36:
// p_setup.c:427   case 74:	ttype=10;	break;	//Gargoyle Statue
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F37:
// p_setup.c:428   case 75:	ttype=10;	break;	//?
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F38:
// p_setup.c:429   case 76:	ttype=50;	break;	//Hanging Corpse
  ADD          R0, 50, RD18
  BSR          .L00801EF0, R0

.L00801F39:
// p_setup.c:430   case 77:	ttype=10;	break;	//Tattered Banner
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F3A:
// p_setup.c:431   case 78:	ttype=54;	break;	//Large Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F3B:
// p_setup.c:432   case 79:	ttype=54;	break;	//Large Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F3C:
// p_setup.c:433   case 80:	ttype=54;	break;	//Gnarled Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F3D:
// p_setup.c:434   case 81:	ttype=2014;	break;	//Crystal Vial
  ADD          R0, 2014, RD18
  BSR          .L00801EF0, R0

.L00801F3E:
// p_setup.c:435   case 82:	ttype=10;	break;	//?
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F3F:
// p_setup.c:436   case 83:	ttype=10;	break;	//?
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F40:
// p_setup.c:438   case 84:	ttype=2022;	break;	//Invulnerability
  ADD          R0, 2022, RD18
  BSR          .L00801EF0, R0

.L00801F41:
// p_setup.c:439   case 85:	ttype=2018;	break;	//Silver Sheild
  ADD          R0, 2018, RD18
  BSR          .L00801EF0, R0

.L00801F42:
// p_setup.c:440   case 86:	ttype=2023;	break;	//Tome of Power
  ADD          R0, 2023, RD18
  BSR          .L00801EF0, R0

.L00801F43:
// p_setup.c:441   case 87:	ttype=54;	break;	//Gnarled Tree
  ADD          R0, 54, RD18
  BSR          .L00801EF0, R0

.L00801F44:
// p_setup.c:442   case 88:	ttype=10;	break;	//Log
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F45:
// p_setup.c:443   case 89:	ttype=10;	break;	//Stalactite Large
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F46:
// p_setup.c:444   case 90:	ttype=10;	break;	//Stalactite Medium
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F47:
// p_setup.c:445   case 91:	ttype=48;	break;	//Stalagmiticle Small
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F48:
// p_setup.c:446   case 92:	ttype=48;	break;	//Stalagmiticle Tiny
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F49:
// p_setup.c:447   case 93:	ttype=48;	break;	//Stalagmiticle Large
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F4A:
// p_setup.c:448   case 94:	ttype=48;	break;	//Stalagmiticle Medium
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F4B:
// p_setup.c:449   case 95:	ttype=48;	break;	//Stalagmiticle Small
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F4C:
// p_setup.c:450   case 96:	ttype=48;	break;	//Stalagmiticle Tiny
  ADD          R0, 48, RD18
  BSR          .L00801EF0, R0

.L00801F4D:
// p_setup.c:451   case 97:	ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F4E:
// p_setup.c:452   case 98:	ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F4F:
// p_setup.c:453   case 99:	ttype=29;	break;	//Rock
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F50:
// p_setup.c:454   case 100:	ttype=29;	break;	//Rubble
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F51:
// p_setup.c:455   case 101:	ttype=29;	break;	//Rubble
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F52:
// p_setup.c:456   case 102:	ttype=29;	break;	//Rubble
  ADD          RD20, 0, RD18
  BSR          .L00801EF0, R0

.L00801F53:
// p_setup.c:457   case 103:	ttype=37;	break;	//Vase Pillar
  ADD          R0, 37, RD18
  BSR          .L00801EF0, R0

.L00801F54:
// p_setup.c:458   case 104:	ttype=10;	break;	//Pottery
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F55:
// p_setup.c:459   case 105:	ttype=10;	break;	//Pottery
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F56:
// p_setup.c:460   case 106:	ttype=10;	break;	//Pottery
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F57:
// p_setup.c:462   case 107:	ttype=3004;	break;	//Centaur
  LDIZ         3004, RD18
  BSR          .L00801EF0, R0

.L00801F58:
// p_setup.c:464   case 108:	ttype=51;	break;	//Lynched Corpse
  ADD          R0, 51, RD18
  BSR          .L00801EF0, R0

.L00801F59:
// p_setup.c:465   case 109:	ttype=49;	break;	//Lynched Corpse
  ADD          R0, 49, RD18
  BSR          .L00801EF0, R0

.L00801F5A:
// p_setup.c:466   case 110:	ttype=18;	break;	//Sitting Corpse
  ADD          R0, 18, RD18
  BSR          .L00801EF0, R0

.L00801F5B:
// p_setup.c:467   case 111:	ttype=10;	break;	//Blood Pool
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F5C:
// p_setup.c:468   case 112:	ttype=10;	break;	//Little Fly
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F5D:
// p_setup.c:469   case 113:	ttype=10;	break;	//Leaf Spawner
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F5E:
// p_setup.c:471   case 114:	ttype=3004;	break;	//Bishop
  LDIZ         3004, RD18
  BSR          .L00801EF0, R0

.L00801F5F:
// p_setup.c:472   case 115:	ttype=3002;	break;	//Centaur Leader
  LDIZ         3002, RD18
  BSR          .L00801EF0, R0

.L00801F60:
// p_setup.c:474   case 116:	ttype=34;	break;	//Twined Torch
  ADD          R0, 34, RD18
  BSR          .L00801EF0, R0

.L00801F61:
// p_setup.c:475   case 117:	ttype=34;	break;	//Twined Torch Unlit
  ADD          R0, 34, RD18
  BSR          .L00801EF0, R0

.L00801F62:
// p_setup.c:476   case 118:	ttype=10;	break;	//?
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F63:
// p_setup.c:477   case 119:	ttype=34;	break;	//Candle
  ADD          R0, 34, RD18
  BSR          .L00801EF0, R0

.L00801F64:
// p_setup.c:479   case 120:	ttype=3001;	break;	//Stalker Boss
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F65:
// p_setup.c:480   case 121:	ttype=3001;	break;	//Stalker
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F66:
// p_setup.c:482   case 122:	ttype=2048;	break;	//Mana
  LDIZ         2048, RD18
  BSR          .L00801EF0, R0

.L00801F67:
// p_setup.c:483   case 123:	ttype=2046;	break;	//Hammer
  ADD          R0, 2046, RD18
  BSR          .L00801EF0, R0

.L00801F68:
// p_setup.c:484   case 124:	ttype=2049;	break;	//Mana
  LDIZ         2049, RD18
  BSR          .L00801EF0, R0

.L00801F69:
// p_setup.c:486   case 140:	ttype=10;	break;	//Tele Smoke
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F6A:
// p_setup.c:488   case 254:	ttype=3004;	break;	//Dragon
  LDIZ         3004, RD18
  BSR          .L00801EF0, R0

.L00801F6B:
// p_setup.c:490   case 1410:	ttype=10;	break;	//Sound Wind
  ADD          RD22, 0, RD18
  BSR          .L00801EF0, R0

.L00801F6C:
// p_setup.c:492   case 2001:				break;	//Crossbow / Shotgun
  BSR          .L00801EF0, R0

.L00801F6D:
// p_setup.c:493   case 2002:				break;	//Mace / Chaingun
  BSR          .L00801EF0, R0

.L00801F6E:
// p_setup.c:494   case 2003:				break;	//Rocket Launcher / Pheonix Rod
  BSR          .L00801EF0, R0

.L00801F6F:
// p_setup.c:495   case 2004:				break;	//Plasma Gun / Skull Rod
  BSR          .L00801EF0, R0

.L00801F70:
// p_setup.c:496   case 2005:				break;	//Chainsaw / Gauntlets
  BSR          .L00801EF0, R0

.L00801F71:
// p_setup.c:498   case 2035:	ttype=2035;	break;	//Bell
  ADD          R0, 2035, RD18
  BSR          .L00801EF0, R0

.L00801F72:
// p_setup.c:500   case 3000:	ttype=9300;	break;	//PolyObj
  LDIZ         9300, RD18
  BSR          .L00801EF0, R0

.L00801F73:
// p_setup.c:501   case 3001:	ttype=9301;	break;	//PolyObj
  LDIZ         9301, RD18
  BSR          .L00801EF0, R0

.L00801F74:
// p_setup.c:502   case 3002:	ttype=9302;	break;	//PolyObj
  LDIZ         9302, RD18
  BSR          .L00801EF0, R0

.L00801F75:
// p_setup.c:503   case 3003:	ttype=9303;	break;	//PolyObj
  LDIZ         9303, RD18
  BSR          .L00801EF0, R0

.L00801F76:
// p_setup.c:505   case 8004:	ttype=2046;	break;	//Combined Mana
  ADD          R0, 2046, RD18
  BSR          .L00801EF0, R0

.L00801F77:
// p_setup.c:507   case 8020:	ttype=9;	break;	//Wendigo
  ADD          R0, 9, RD18
  BSR          .L00801EF0, R0

.L00801F78:
// p_setup.c:508   case 8080:	ttype=3001;	break;	//Chaos Serpent
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F79:
// p_setup.c:510   case 8065:	ttype=2035;	break;	//Bell
  ADD          R0, 2035, RD18
  BSR          .L00801EF0, R0

.L00801F7A:
// p_setup.c:512   case 8100:	ttype=2035;	break;	//Barrel
  ADD          R0, 2035, RD18
  BSR          .L00801EF0, R0

.L00801F7B:
// p_setup.c:514   case 10011:	ttype=71;	break;	//Reiver (Buried)
  ADD          R0, 71, RD18
  BSR          .L00801EF0, R0

.L00801F7C:
// p_setup.c:515   case 10030:	ttype=3004;	break;	//Ettin
  LDIZ         3004, RD18
  BSR          .L00801EF0, R0

.L00801F7D:
// p_setup.c:516   case 10060:	ttype=3006;	break;	//Afrit
  LDIZ         3006, RD18
  BSR          .L00801EF0, R0

.L00801F7E:
// p_setup.c:517   case 10080:	ttype=3001;	break;	//Heresiarch
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F7F:
// p_setup.c:518   case 10100:	ttype=3001;	break;	//Zedek
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F80:
// p_setup.c:519   case 10101:	ttype=3001;	break;	//Traductus
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F81:
// p_setup.c:520   case 10102:	ttype=3001;	break;	//Menelkir
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F82:
// p_setup.c:521   case 10200:	ttype=3001;	break;	//Korax
  LDIZ         3001, RD18
  BSR          .L00801EF0, R0

.L00801F83:
// p_setup.c:523   default:
  ADD          RD22, 0, RD18
// p_setup.c:525   break;

.L00801EF0:
  BSR          .L00801F89, R0

.L00801EEF:
  MOV.L        gamemode, RD13
  BRNE.Q       4, RD13, .L00801F8A
// p_setup.c:530   {
  AND          RD18, -1, RQ9
  BRGE.L       94, RQ9, .L00801FDA
  AND          RD18, -1, RQ9
  ADD          RQ9, -1, RQ10
  ADD          R0, 92, RQ6
  BRGTU.Q      RQ6, RQ10, .L00801FD9
  LEA.B        .L00C8001F, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C8001F:
  BSR          .L00801F8C, R0
  BSR          .L00801F8D, R0
  BSR          .L00801F8E, R0
  BSR          .L00801F8F, R0
  BSR          .L00801F90, R0
  BSR          .L00801F91, R0
  BSR          .L00801F92, R0
  BSR          .L00801F93, R0
  BSR          .L00801F94, R0
  BSR          .L00801F95, R0
  BSR          .L00801F96, R0
  BSR          .L00801F97, R0
  BSR          .L00801F98, R0
  BSR          .L00801FD9, R0
  BSR          .L00801F99, R0
  BSR          .L00801F9A, R0
  BSR          .L00801F9B, R0
  BSR          .L00801F9C, R0
  BSR          .L00801F9D, R0
  BSR          .L00801F9E, R0
  BSR          .L00801F9F, R0
  BSR          .L00801FA0, R0
  BSR          .L00801FA1, R0
  BSR          .L00801FA2, R0
  BSR          .L00801FA3, R0
  BSR          .L00801FA4, R0
  BSR          .L00801FA5, R0
  BSR          .L00801FA6, R0
  BSR          .L00801FA7, R0
  BSR          .L00801FA8, R0
  BSR          .L00801FA9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FAA, R0
  BSR          .L00801FAB, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FAC, R0
  BSR          .L00801FAD, R0
  BSR          .L00801FAE, R0
  BSR          .L00801FAF, R0
  BSR          .L00801FB0, R0
  BSR          .L00801FB1, R0
  BSR          .L00801FB2, R0
  BSR          .L00801FB3, R0
  BSR          .L00801FB4, R0
  BSR          .L00801FB5, R0
  BSR          .L00801FB6, R0
  BSR          .L00801FB7, R0
  BSR          .L00801FB8, R0
  BSR          .L00801FB9, R0
  BSR          .L00801FBA, R0
  BSR          .L00801FBB, R0
  BSR          .L00801FBC, R0
  BSR          .L00801FBD, R0
  BSR          .L00801FBE, R0
  BSR          .L00801FBF, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FC0, R0
  BSR          .L00801FC1, R0
  BSR          .L00801FC2, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FC3, R0
  BSR          .L00801FC4, R0
  BSR          .L00801FC5, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FC6, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FC7, R0
  BSR          .L00801FC8, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FC9, R0
  BSR          .L00801FCA, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FCB, R0
  BSR          .L00801FCC, R0
  BSR          .L00801FCD, R0
  BSR          .L00801FCE, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FCF, R0
  BSR          .L00801FD9, R0
  BSR          .L00801FD0, R0
  BSR          .L00801FD9, R0

.L00801FDA:
  AND          RD18, -1, RQ21
  ADD          R0, 2002, RD13
  BRGE.L       RD13, RQ21, .L00801FDB
  BREQ.Q       94, RD18, .L00801FD1
  BREQ.Q       95, RD18, .L00801FD2
  BREQ.Q       96, RD18, .L00801FD3
  ADD          R0, 2001, RD13
  BREQ.Q       RD13, RD18, .L00801FD4

.L00801FDB:
  ADD          R0, 2002, RD13
  BREQ.Q       RD13, RD18, .L00801FD5
  ADD          R0, 2003, RD13
  BREQ.Q       RD13, RD18, .L00801FD6
  ADD          R0, 2004, RD13
  BREQ.Q       RD13, RD18, .L00801FD7
  ADD          R0, 2005, RD13
  BREQ.Q       RD13, RD18, .L00801FD8
  BSR          .L00801FD9, R0

.L00801F8C:
// p_setup.c:533   case 1:						break; //Player Spawn
  BSR          .L00801F8B, R0

.L00801F8D:
// p_setup.c:534   case 2:						break; //Player Spawn
  BSR          .L00801F8B, R0

.L00801F8E:
// p_setup.c:535   case 3:						break; //Player Spawn
  BSR          .L00801F8B, R0

.L00801F8F:
// p_setup.c:536   case 4:						break; //Player Spawn
  BSR          .L00801F8B, R0

.L00801F90:
// p_setup.c:537   case 5:		ttype=3001;	break;	//ImpLeader -> Imp
  LDIZ         3001, RD18
  BSR          .L00801F8B, R0

.L00801F91:
// p_setup.c:538   case 6:		ttype=3004;	break;	//IronLich -> Baron
  LDIZ         3004, RD18
  BSR          .L00801F8B, R0

.L00801F92:
// p_setup.c:539   case 7:		ttype=3003;	break;	//Sorcerer -> Baron Of Hell
  LDIZ         3003, RD18
  BSR          .L00801F8B, R0

.L00801F93:
// p_setup.c:540   case 8:						break; //BagOfHolding -> Backpack
  BSR          .L00801F8B, R0

.L00801F94:
// p_setup.c:541   case 9:		ttype=3002;	break;	//Minotaur -> Demon
  LDIZ         3002, RD18
  BSR          .L00801F8B, R0

.L00801F95:
// p_setup.c:542   case 10:	ttype=2007;	break;	//Wand Ammo -> Clip
  ADD          R0, 2007, RD18
  BSR          .L00801F8B, R0

.L00801F96:
// p_setup.c:543   case 11:					break;	//Deathmatch Start
  BSR          .L00801F8B, R0

.L00801F97:
// p_setup.c:544   case 12:	ttype=5010;	break;	//Gold Wand -> Pistol
  LDIZ         5010, RD18
  BSR          .L00801F8B, R0

.L00801F98:
// p_setup.c:545   case 13:	ttype=2048;	break;	//Mace Ammo
  LDIZ         2048, RD18
  BSR          .L00801F8B, R0

.L00801F99:
// p_setup.c:546   case 15:					break;	//Teleport Dest
  BSR          .L00801F8B, R0

.L00801F9A:
// p_setup.c:547   case 16:	ttype=2002;	break;	//Mace
  ADD          R0, 2002, RD18
  BSR          .L00801F8B, R0

.L00801F9B:
// p_setup.c:548   case 17:	ttype=10;	break;	//Hanging Skull
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801F9C:
// p_setup.c:549   case 18:	ttype=2049;	break;	//Crossbow Ammo
  LDIZ         2049, RD18
  BSR          .L00801F8B, R0

.L00801F9D:
// p_setup.c:550   case 19:	ttype=2001;	break;	//Crossbow
  ADD          R0, 2001, RD18
  BSR          .L00801F8B, R0

.L00801F9E:
// p_setup.c:551   case 20:	ttype=2047;	break;	//Skull Rod Ammo
  ADD          R0, 2047, RD18
  BSR          .L00801F8B, R0

.L00801F9F:
// p_setup.c:552   case 21:	ttype=2004;	break;	//Skull Rod
  ADD          R0, 2004, RD18
  BSR          .L00801F8B, R0

.L00801FA0:
// p_setup.c:553   case 22:	ttype=2046;	break;	//Pheonix Rod Ammo
  ADD          R0, 2046, RD18
  BSR          .L00801F8B, R0

.L00801FA1:
// p_setup.c:554   case 23:	ttype=2003;	break;	//Pheonix Rod
  ADD          R0, 2003, RD18
  BSR          .L00801F8B, R0

.L00801FA2:
// p_setup.c:556   case 24:	ttype=10;	break;	//Hanging Skull
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA3:
// p_setup.c:557   case 25:	ttype=10;	break;	//Hanging Skull
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA4:
// p_setup.c:558   case 26:	ttype=10;	break;	//Hanging Skull
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA5:
// p_setup.c:559   case 27:	ttype=35;	break;	//Serpent Torch
  ADD          R0, 35, RD18
  BSR          .L00801F8B, R0

.L00801FA6:
// p_setup.c:560   case 28:	ttype=10;	break;	//Chandelier
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA7:
// p_setup.c:561   case 29:	ttype=10;	break;	//Small Pillar
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA8:
// p_setup.c:562   case 30:	ttype=10;	break;	//Artifact Egg
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FA9:
// p_setup.c:564   case 31:	ttype=10;	break;	//Enchanted Shield
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FAA:
// p_setup.c:566   case 34:	ttype=10;	break;	//Artifact Time Bomb
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FAB:
// p_setup.c:567   case 35:	ttype=2026;	break;	//Super Map
  ADD          R0, 2026, RD18
  BSR          .L00801F8B, R0

.L00801FAC:
// p_setup.c:569   case 37:	ttype=5050;	break;	//Stalagmite Small
  LDIZ         5050, RD18
  BSR          .L00801F8B, R0

.L00801FAD:
// p_setup.c:570   case 38:	ttype=5050;	break;	//Stalagmite Large
  LDIZ         5050, RD18
  BSR          .L00801F8B, R0

.L00801FAE:
// p_setup.c:571   case 39:	ttype=5050;	break;	//Stalactite Small
  LDIZ         5050, RD18
  BSR          .L00801F8B, R0

.L00801FAF:
// p_setup.c:572   case 40:	ttype=5050;	break;	//Stalactite Large
  LDIZ         5050, RD18
  BSR          .L00801F8B, R0

.L00801FB0:
// p_setup.c:573   case 41:	ttype=10;	break;	//Waterfall Sound
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB1:
// p_setup.c:574   case 42:	ttype=10;	break;	//Wind Sound
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB2:
// p_setup.c:575   case 43:	ttype=10;	break;	//Pod Generator
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB3:
// p_setup.c:576   case 44:	ttype=10;	break;	//Wooden Barrel
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB4:
// p_setup.c:577   case 45:	ttype=10;	break;	//Mummy Leader
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB5:
// p_setup.c:578   case 46:	ttype=10;	break;	//Mummy Leader Ghost
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB6:
// p_setup.c:579   case 47:	ttype=10;	break;	//Brown Pillar
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB7:
// p_setup.c:580   case 48:	ttype=10;	break;	//Moss
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB8:
// p_setup.c:581   case 49:	ttype=10;	break;	//Moss
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FB9:
// p_setup.c:582   case 50:	ttype=10;	break;	//Wall Torch
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FBA:
// p_setup.c:583   case 51:	ttype=10;	break;	//Hanging Corpse
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FBB:
// p_setup.c:584   case 52:	ttype=10;	break;	//Teleport Glitter
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FBC:
// p_setup.c:585   case 53:	ttype=10;	break;	//Blaster
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FBD:
// p_setup.c:586   case 54:	ttype=2007;	break;	//Blaster Ammo
  ADD          R0, 2007, RD18
  BSR          .L00801F8B, R0

.L00801FBE:
// p_setup.c:587   case 55:	ttype=10;	break;	//Blaster
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FBF:
// p_setup.c:588   case 56:	ttype=	0;	break;	//Boss Spot
  ADD          R0, 0, RD18
  BSR          .L00801F8B, R0

.L00801FC0:
// p_setup.c:590   case 64:	ttype=3001;	break;	//Knight
  LDIZ         3001, RD18
  BSR          .L00801F8B, R0

.L00801FC1:
// p_setup.c:591   case 65:	ttype=3001;	break;	//Knight Ghost
  LDIZ         3001, RD18
  BSR          .L00801F8B, R0

.L00801FC2:
// p_setup.c:592   case 66:	ttype=3004;	break;	//Imp
  LDIZ         3004, RD18
  BSR          .L00801F8B, R0

.L00801FC3:
// p_setup.c:593   case 68:	ttype=3004;	break;	//Mummy
  LDIZ         3004, RD18
  BSR          .L00801F8B, R0

.L00801FC4:
// p_setup.c:594   case 69:	ttype=3004;	break;	//Mummy Ghost
  LDIZ         3004, RD18
  BSR          .L00801F8B, R0

.L00801FC5:
// p_setup.c:595   case 70:	ttype=3004;	break;	//Beast
  LDIZ         3004, RD18
  BSR          .L00801F8B, R0

.L00801FC6:
// p_setup.c:597   case 73:	ttype=  13;	break;	//Green Key
  ADD          R0, 13, RD18
  BSR          .L00801F8B, R0

.L00801FC7:
// p_setup.c:599   case 75:	ttype=2024;	break;	//Invisibility Artifact
  ADD          R0, 2024, RD18
  BSR          .L00801F8B, R0

.L00801FC8:
// p_setup.c:600   case 76:	ttype=56;	break;	//Fire Brazier
  ADD          R0, 56, RD18
  BSR          .L00801F8B, R0

.L00801FC9:
// p_setup.c:602   case 79:	ttype=	5;	break;	//Blue Key
  ADD          R0, 5, RD18
  BSR          .L00801F8B, R0

.L00801FCA:
// p_setup.c:603   case 80:	ttype=	6;	break;	//Yellow Key
  ADD          R0, 6, RD18
  BSR          .L00801F8B, R0

.L00801FCB:
// p_setup.c:605   case 84:	ttype=2022;	break;	//Invulnerability
  ADD          R0, 2022, RD18
  BSR          .L00801F8B, R0

.L00801FCC:
// p_setup.c:606   case 85:	ttype=2018;	break;	//Silver Sheild
  ADD          R0, 2018, RD18
  BSR          .L00801F8B, R0

.L00801FCD:
// p_setup.c:607   case 86:	ttype=2023;	break;	//Tome of Power
  ADD          R0, 2023, RD18
  BSR          .L00801F8B, R0

.L00801FCE:
// p_setup.c:608   case 87:	ttype=10;	break;	//Volcano
  ADD          RD22, 0, RD18
  BSR          .L00801F8B, R0

.L00801FCF:
// p_setup.c:610   case 90:	ttype=3002;	break;	//Clink
  LDIZ         3002, RD18
  BSR          .L00801F8B, R0

.L00801FD0:
// p_setup.c:612   case 92:	ttype=3001;	break;	//Snake
  LDIZ         3001, RD18
  BSR          .L00801F8B, R0

.L00801FD1:
// p_setup.c:614   case 94:	ttype=	5;	break;	//Blue Key
  ADD          R0, 5, RD18
  BSR          .L00801F8B, R0

.L00801FD2:
// p_setup.c:615   case 95:	ttype=  13;	break;	//Green Key
  ADD          R0, 13, RD18
  BSR          .L00801F8B, R0

.L00801FD3:
// p_setup.c:616   case 96:	ttype=	6;	break;	//Yellow Key
  ADD          R0, 6, RD18
  BSR          .L00801F8B, R0

.L00801FD4:
// p_setup.c:618   case 2001:					break;	//Crossbow / Shotgun
  BSR          .L00801F8B, R0

.L00801FD5:
// p_setup.c:619   case 2002:					break;	//Mace / Chaingun
  BSR          .L00801F8B, R0

.L00801FD6:
// p_setup.c:620   case 2003:					break;	//Rocket Launcher / Pheonix Rod
  BSR          .L00801F8B, R0

.L00801FD7:
// p_setup.c:621   case 2004:					break;	//Plasma Gun / Skull Rod
  BSR          .L00801F8B, R0

.L00801FD8:
// p_setup.c:622   case 2005:					break;	//Chainsaw / Gauntlets
  BSR          .L00801F8B, R0

.L00801FD9:
// p_setup.c:624   default:
  ADD          RD22, 0, RD18
// p_setup.c:626   break;

.L00801F8B:

.L00801F8A:

.L00801F89:
// p_setup.c:630   return(ttype);
  ADD          RD18, 0, RD10

.L00C03048:
  ADD          R2, 264, R2
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  ADD          R2, 56, R2
  JSR          R1, 0, R0

TKDFS_NormalizePathUtf8I:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -2528, R2
  MOV.Q        RQ10, (R2, 200)
  MOV.Q        RQ11, (R2, 192)
  ADD          RD12, 0, RD20
  ADD          R2, 208, RQ6
  MOV.Q        RQ6, (R2, 176)
  ADD          R2, 1248, RQ6
  MOV.Q        RQ6, (R2, 168)
  ADD          R2, 2288, RQ6
  MOV.Q        RQ6, (R2, 160)
// tk_core/tk_rwad.c:1509   
// tk_core/tk_rwad.c:1511   
// tk_core/tk_rwad.c:1516   
  BSR          TKDFS_UtfMergeInit, R1
// tk_core/tk_rwad.c:1518   
  MOV.Q        (R2, 192), RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 152)
// tk_core/tk_rwad.c:1519   
  ADD          R2, 208, RQ9
// tk_core/tk_rwad.c:1520   
  BSR          .L00800F78, R0

.L00800F79:
// tk_core/tk_rwad.c:1521   
  ADD          R2, 152, RQ23
  ADD          RQ23, 0, RQ10
  BSR          tkdfs_readutf8, R1
  ADD          RQ10, 0, RD27
  MOV.L        RD27, (R2, 132)
// tk_core/tk_rwad.c:1523   
  LDIZ         0x0000FFFF, RD26
  BRGT.L       RD26, RD27, .L00800F7A
// tk_core/tk_rwad.c:1524   
  ADD          RQ9, 0, RQ23
  ADD          RQ9, 2, RQ9
  MOV.L        (R2, 132), RD27
  MOVU.W       RD27, (RQ23, 0)
// tk_core/tk_rwad.c:1526   
  BSR          .L00800F78, R0

.L00800F7A:
// tk_core/tk_rwad.c:1529   
  MOV.L        (R2, 132), RD27
  SHLR.Q       RD27, 10, RQ18
  AND          RQ18, 1023, RQ18
  ADDS.L       RQ18, 0x0000D800, RD26
  MOV.L        RD26, (R2, 128)
// tk_core/tk_rwad.c:1530   
  AND          RD27, 1023, RQ18
  ADDS.L       RQ18, 0x0000DC00, RD27
  MOV.L        RD27, (R2, 124)
// tk_core/tk_rwad.c:1531   
  ADD          RQ9, 0, RQ23
  ADD          RQ9, 2, RQ9
  MOV.L        (R2, 128), RD27
  MOVU.W       RD27, (RQ23, 0)
// tk_core/tk_rwad.c:1532   
  ADD          RQ9, 0, RQ23
  ADD          RQ9, 2, RQ9
  MOV.L        (R2, 124), RD27
  MOVU.W       RD27, (RQ23, 0)

.L00800F78:
  MOV.Q        (R2, 152), RQ27
  MOVU.B       (RQ27, 0), RQ18
  BRNE.L       R0, RQ18, .L00800F79

.L00800F7B:
// tk_core/tk_rwad.c:1533   
  MOVU.W       RD0, (RQ9, 0)
// tk_core/tk_rwad.c:1535   
  ADD          R2, 208, RQ27
  SUB          RQ9, RQ27, RQ26
  SHAR.Q       RQ26, 1, RQ26
  ADDS.L       RQ26, 0, RD25
// tk_core/tk_rwad.c:1537   
  ADD          RQ27, 0, RQ8
  LEA.W        RQ27, RD25, RQ24
  MOV.Q        RQ24, (R2, 136)
  MOV.L        RD25, (R2, 120)
// tk_core/tk_rwad.c:1538   
  ADD          R2, 1248, RQ9
  ADD          R0, 0, RD21
// tk_core/tk_rwad.c:1539   
  BSR          .L00800F7C, R0

.L00800F7D:
// tk_core/tk_rwad.c:1540   
  ADD          RQ8, 0, RQ23
  MOVU.W       (RQ8, 0), RD27
  MOV.L        RD27, (R2, 132)
  ADD          RQ23, 2, RQ8
// tk_core/tk_rwad.c:1542   
  BSR          .L00800F7E, R0

.L00800F7F:
// tk_core/tk_rwad.c:1543   
  MOV.L        (R2, 124), RD27
  BREQ.L       R0, RD27, .L00800F80
// tk_core/tk_rwad.c:1545   
  ADD          RD21, 0, RQ18
  ADDS.L       RD21, 1, RD21
  ADD          R2, 2288, RQ27
  MOV.L        (R2, 124), RD26
  MOVU.W       RD26, (RQ27, RQ18)

.L00800F80:
// tk_core/tk_rwad.c:1546   
  MOV.L        (R2, 128), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 132)

.L00800F7E:
  ADD          R2, 124, RQ23
  ADD          R2, 128, RQ22
  MOV.L        (R2, 132), RD10
  ADD          RQ22, 0, RQ11
  ADD          RQ23, 0, RQ12
  ADD          RD20, 0, RD13
  BSR          TKDFS_UtfCheckSplit, R1
  ADD          RQ10, 0, RQ18
  BRGT.L       R0, RQ18, .L00800F7F

.L00800F81:
// tk_core/tk_rwad.c:1547   
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 2, RQ9
  MOV.L        (R2, 132), RD27
  MOVU.W       RD27, (RQ22, 0)
// tk_core/tk_rwad.c:1549   
  BSR          .L00800F82, R0

.L00800F83:
// tk_core/tk_rwad.c:1550   
  ADDS.L       RD21, -1, RD21
  ADD          R2, 2288, RQ27
  MOVU.W       (RQ27, RD21), RQ18
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 2, RQ9
  MOVU.W       RQ18, (RQ22, 0)

.L00800F82:
  BRNE.L       R0, RD21, .L00800F83

.L00800F84:

.L00800F7C:
  MOV.Q        (R2, 136), RQ27
  BRLT.Q       RQ27, RQ8, .L00800F7D

.L00800F85:
// tk_core/tk_rwad.c:1551   
  ADD          R2, 1248, RQ27
  SUB          RQ9, RQ27, RQ26
  SHAR.Q       RQ26, 1, RQ26
  ADDS.L       RQ26, 0, RD25
// tk_core/tk_rwad.c:1554   
  ADD          RQ27, 0, RQ8
  LEA.W        RQ27, RD25, RQ24
  MOV.Q        RQ24, (R2, 136)
  MOV.L        RD25, (R2, 116)
// tk_core/tk_rwad.c:1555   
  ADD          R2, 208, RQ9
// tk_core/tk_rwad.c:1556   
  BSR          .L00800F86, R0

.L00800F87:
// tk_core/tk_rwad.c:1557   
  ADD          RQ8, 0, RQ22
  MOVU.W       (RQ8, 0), RD27
  MOV.L        RD27, (R2, 128)
  ADD          RQ22, 2, RQ8
// tk_core/tk_rwad.c:1559   
  MOVU.W       (RQ8, 0), RD27
  MOV.L        RD27, (R2, 124)
// tk_core/tk_rwad.c:1560   
  BSR          .L00800F88, R0

.L00800F89:
// tk_core/tk_rwad.c:1561   
  ADD          RQ8, 2, RQ8
  MOV.L        (R2, 132), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 128)
  MOVU.W       (RQ8, 0), RD27
  MOV.L        RD27, (R2, 124)

.L00800F88:
  ADD          R2, 132, RQ23
  MOV.L        (R2, 128), RD10
  MOV.L        (R2, 124), RD11
  ADD          RQ23, 0, RQ12
  ADD          RD20, 0, RD13
  BSR          TKDFS_UtfCheckMerge, R1
  ADD          RQ10, 0, RQ18
  BRGT.L       R0, RQ18, .L00800F89

.L00800F8A:
  ADD          RQ9, 0, RQ22
  ADD          RQ9, 2, RQ9
  MOV.L        (R2, 128), RD27
  MOVU.W       RD27, (RQ22, 0)

.L00800F86:
  MOV.Q        (R2, 136), RQ27
  BRLT.Q       RQ27, RQ8, .L00800F87

.L00800F8B:
// tk_core/tk_rwad.c:1563   
  ADD          R2, 208, RQ27
  SUB          RQ9, RQ27, RQ26
  SHAR.Q       RQ26, 1, RQ26
  ADDS.L       RQ26, 0, RD25
// tk_core/tk_rwad.c:1566   
  ADD          RQ27, 0, RQ8
  LEA.W        RQ27, RD25, RQ24
  MOV.Q        RQ24, (R2, 136)
  MOV.L        RD25, (R2, 120)
// tk_core/tk_rwad.c:1567   
  MOV.Q        (R2, 200), RQ13
  ADD          RQ13, 0, RQ12
  MOV.Q        RQ12, (R2, 144)
// tk_core/tk_rwad.c:1568   
  BSR          .L00800F8C, R0

.L00800F8D:
// tk_core/tk_rwad.c:1569   
  MOVU.W       (RQ8, 0), RD27
  MOV.L        RD27, (R2, 128)
// tk_core/tk_rwad.c:1571   
  MOVU.W       (RQ8, 2), RD27
  MOV.L        RD27, (R2, 124)
// tk_core/tk_rwad.c:1573   
  ADD          R0, 1, RD27
  BTSTN.L      RD27, RD20, .L00800F8E
  MOV.L        (R2, 128), RD18
  LDIZ         0x0000FC00, RD27
  AND          RQ18, RD27, RQ18
  LDIZ         0x0000D800, RD26
  CMPEQ.Q      RQ18, RD26, RQ25
  MOV.L        (R2, 124), RD18
  AND          RQ18, RD27, RQ18
  LDIZ         0x0000DC00, RD24
  CMPEQ.Q      RQ18, RD24, RQ13
  BTST.L       RQ13, RQ25, .L00800F8F
// tk_core/tk_rwad.c:1576   
  MOV.L        (R2, 128), RD18
  ADD          R0, 1023, RD27
  AND          RQ18, RD27, RQ18
  SHAD.L       RQ18, 10, RQ26
  MOV.L        (R2, 124), RD25
  AND          RQ25, RD27, RQ25
  OR           RQ26, RQ25, RD24
  MOV.L        RD24, (R2, 132)
// tk_core/tk_rwad.c:1578   
  ADD          RQ8, 4, RQ8
// tk_core/tk_rwad.c:1579   
  ADD          R2, 144, RQ23
  ADD          RQ23, 0, RQ10
  MOV.L        (R2, 132), RD11
  BSR          tkdfs_writeutf8uz, R1
// tk_core/tk_rwad.c:1580   
  BSR          .L00800F8C, R0

.L00800F8F:

.L00800F8E:
// tk_core/tk_rwad.c:1584   
  ADD          RQ8, 2, RQ8
// tk_core/tk_rwad.c:1585   
  ADD          R2, 144, RQ22
  ADD          RQ22, 0, RQ10
  MOV.L        (R2, 128), RD11
  BSR          tkdfs_writeutf8uz, R1

.L00800F8C:
  MOV.Q        (R2, 136), RQ27
  BRLT.Q       RQ27, RQ8, .L00800F8D

.L00800F90:
// tk_core/tk_rwad.c:1586   
  MOV.Q        (R2, 144), RQ27
  ADD          RQ27, 0, RQ23
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 144)
  MOVU.B       RD0, (RQ23, 0)
// tk_core/tk_rwad.c:1588   
  ADD          R0, 0, RD10

.L00C0304E:
  ADD          R2, 2528, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

P_UnArchiveSpecials:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -376, R2
// p_saveg.c:483   while (1)

.L0080235F:
// p_saveg.c:484   {
  MOV.Q        save_p, RQ27
  MOVU.B       (RQ27, 0), RQ26
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, save_p
  AND          RQ26, 255, RD27
// p_saveg.c:486   switch (tclass)
  AND          RD27, 255, RQ26
  MOV.L        RD27, (R2, 172)
  BRGE.L       4, RQ26, .L0080236C
  MOV.L        (R2, 172), RD27
  BREQ.L       R0, RD27, .L00802364
  MOV.L        (R2, 172), RD27
  BREQ.Q       1, RD27, .L00802365
  MOV.L        (R2, 172), RD27
  BREQ.Q       2, RD27, .L00802366
  MOV.L        (R2, 172), RD27
  BREQ.Q       3, RD27, .L00802367

.L0080236C:
  MOV.L        (R2, 172), RD27
  BREQ.Q       4, RD27, .L00802368
  MOV.L        (R2, 172), RD27
  BREQ.Q       5, RD27, .L00802369
  MOV.L        (R2, 172), RD27
  BREQ.Q       6, RD27, .L0080236A
  MOV.L        (R2, 172), RD27
  BREQ.Q       7, RD27, .L00802363
  BSR          .L0080236B, R0

.L00802363:
// p_saveg.c:488   case tc_endspecials:
  BSR          .L00C03054, R0

.L00802364:
// p_saveg.c:491   case tc_ceiling:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ22
  SUB          RQ22, RQ8, RQ9
  AND          RQ9, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:493   ceiling = Z_Malloc (sizeof(*ceiling), PU_LEVEL, NULL);
  ADD          R0, 72, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ21
// p_saveg.c:494   memcpy (ceiling, save_p, sizeof(*ceiling));
  MOV.Q        save_p, RQ27
  ADD          RQ21, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          __memcpy64_72, R1
// p_saveg.c:495   save_p += sizeof(*ceiling);
  MOV.Q        save_p, RQ27
  ADD          RQ27, 72, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:496   ceiling->sector = &sectors[(nlint)ceiling->sector];
  MOV.Q        (RQ21, 32), RQ18
  MOV.Q        sectors, RQ27
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.Q        RQ23, (RQ21, 32)
// p_saveg.c:497   ceiling->sector->specialdata = ceiling;
  MOV.Q        (RQ21, 32), RQ18
  MOV.Q        RQ21, (RQ18, 104)
// p_saveg.c:499   if (ceiling->thinker.function.acp1)
  ADD          RQ21, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        (RQ26, 0), RQ18
  BREQ.Q       R0, RQ18, .L0080236D
// p_saveg.c:500   ceiling->thinker.function.acp1 = (actionf_p1)T_MoveCeiling;
  MOV          T_MoveCeiling, RQ23
  ADD          RQ21, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        RQ23, (RQ26, 0)

.L0080236D:
// p_saveg.c:502   P_AddThinker (&ceiling->thinker);
  ADD          RQ21, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:503   P_AddActiveCeiling(ceiling);
  ADD          RQ21, 0, RQ10
  BSR          P_AddActiveCeiling, R1
// p_saveg.c:504   break;
  BSR          .L00802362, R0

.L00802365:
// p_saveg.c:506   case tc_door:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:508   door = Z_Malloc (sizeof(*door), PU_LEVEL, NULL);
  ADD          R0, 64, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 160)
// p_saveg.c:509   memcpy (door, save_p, sizeof(*door));
  MOV.Q        (R2, 160), RQ27
  MOV.Q        save_p, RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        (RQ26, 32), RQ10
  MOV.Q        (RQ26, 48), RQ12
  MOV.Q        (RQ26, 40), RQ11
  MOV.Q        (RQ26, 56), RQ13
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ13, (RQ27, 56)
// p_saveg.c:510   save_p += sizeof(*door);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 64, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:511   door->sector = &sectors[(nlint)door->sector];
  MOV.Q        (RQ27, 32), RQ18
  MOV.Q        sectors, RQ26
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ26, RQ23, RQ23
  MOV.Q        RQ23, (RQ27, 32)
// p_saveg.c:512   door->sector->specialdata = door;
  MOV.Q        (RQ27, 32), RQ18
  MOV.Q        RQ27, (RQ18, 104)
// p_saveg.c:513   door->thinker.function.acp1 = (actionf_p1)T_VerticalDoor;
  MOV          T_VerticalDoor, RQ23
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ23, (RQ25, 0)
// p_saveg.c:514   P_AddThinker (&door->thinker);
  ADD          RQ27, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:515   break;
  BSR          .L00802362, R0

.L00802366:
// p_saveg.c:517   case tc_floor:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:519   floor = Z_Malloc (sizeof(*floor), PU_LEVEL, NULL);
  ADD          R0, 64, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 152)
// p_saveg.c:520   memcpy (floor, save_p, sizeof(*floor));
  MOV.Q        (R2, 152), RQ27
  MOV.Q        save_p, RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        (RQ26, 32), RQ10
  MOV.Q        (RQ26, 48), RQ12
  MOV.Q        (RQ26, 40), RQ11
  MOV.Q        (RQ26, 56), RQ13
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ13, (RQ27, 56)
// p_saveg.c:521   save_p += sizeof(*floor);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 64, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:522   floor->sector = &sectors[(nlint)floor->sector];
  MOV.Q        (RQ27, 32), RQ18
  MOV.Q        sectors, RQ26
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ26, RQ23, RQ23
  MOV.Q        RQ23, (RQ27, 32)
// p_saveg.c:523   floor->sector->specialdata = floor;
  MOV.Q        (RQ27, 32), RQ18
  MOV.Q        RQ27, (RQ18, 104)
// p_saveg.c:524   floor->thinker.function.acp1 = (actionf_p1)T_MoveFloor;
  MOV          T_MoveFloor, RQ23
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ23, (RQ25, 0)
// p_saveg.c:525   P_AddThinker (&floor->thinker);
  ADD          RQ27, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:526   break;
  BSR          .L00802362, R0

.L00802367:
// p_saveg.c:528   case tc_plat:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:530   plat = Z_Malloc (sizeof(*plat), PU_LEVEL, NULL);
  ADD          R0, 72, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ20
// p_saveg.c:531   memcpy (plat, save_p, sizeof(*plat));
  MOV.Q        save_p, RQ27
  ADD          RQ20, 0, RQ10
  ADD          RQ27, 0, RQ11
  BSR          __memcpy64_72, R1
// p_saveg.c:532   save_p += sizeof(*plat);
  MOV.Q        save_p, RQ27
  ADD          RQ27, 72, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:533   plat->sector = &sectors[(nlint)plat->sector];
  MOV.Q        (RQ20, 24), RQ18
  MOV.Q        sectors, RQ27
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ27, RQ23, RQ23
  MOV.Q        RQ23, (RQ20, 24)
// p_saveg.c:534   plat->sector->specialdata = plat;
  MOV.Q        (RQ20, 24), RQ18
  MOV.Q        RQ20, (RQ18, 104)
// p_saveg.c:536   if (plat->thinker.function.acp1)
  ADD          RQ20, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        (RQ26, 0), RQ18
  BREQ.Q       R0, RQ18, .L0080236E
// p_saveg.c:537   plat->thinker.function.acp1 = (actionf_p1)T_PlatRaise;
  MOV          T_PlatRaise, RQ23
  ADD          RQ20, 0, RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        RQ23, (RQ26, 0)

.L0080236E:
// p_saveg.c:539   P_AddThinker (&plat->thinker);
  ADD          RQ20, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:540   P_AddActivePlat(plat);
  ADD          RQ20, 0, RQ10
  BSR          P_AddActivePlat, R1
// p_saveg.c:541   break;
  BSR          .L00802362, R0

.L00802368:
// p_saveg.c:543   case tc_flash:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:545   flash = Z_Malloc (sizeof(*flash), PU_LEVEL, NULL);
  ADD          R0, 56, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 144)
// p_saveg.c:546   memcpy (flash, save_p, sizeof(*flash));
  MOV.Q        (R2, 144), RQ27
  MOV.Q        save_p, RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        (RQ26, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ26, 32), RQ10
  MOV.Q        (RQ26, 40), RQ11
  MOV.Q        (RQ26, 48), RQ12
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
// p_saveg.c:547   save_p += sizeof(*flash);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 56, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:548   flash->sector = &sectors[(nlint)flash->sector];
  MOV.Q        (RQ27, 24), RQ18
  MOV.Q        sectors, RQ26
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ26, RQ23, RQ23
  MOV.Q        RQ23, (RQ27, 24)
// p_saveg.c:549   flash->thinker.function.acp1 = (actionf_p1)T_LightFlash;
  MOV          T_LightFlash, RQ18
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ18, (RQ25, 0)
// p_saveg.c:550   P_AddThinker (&flash->thinker);
  ADD          RQ27, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:551   break;
  BSR          .L00802362, R0

.L00802369:
// p_saveg.c:553   case tc_strobe:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:555   strobe = Z_Malloc (sizeof(*strobe), PU_LEVEL, NULL);
  ADD          R0, 56, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 136)
// p_saveg.c:556   memcpy (strobe, save_p, sizeof(*strobe));
  MOV.Q        (R2, 136), RQ27
  MOV.Q        save_p, RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        (RQ26, 24), RQ13
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ26, 32), RQ10
  MOV.Q        (RQ26, 40), RQ11
  MOV.Q        (RQ26, 48), RQ12
  MOV.Q        RQ13, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 40)
  MOV.Q        RQ10, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 48)
// p_saveg.c:557   save_p += sizeof(*strobe);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 56, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:558   strobe->sector = &sectors[(nlint)strobe->sector];
  MOV.Q        (RQ27, 24), RQ18
  MOV.Q        sectors, RQ26
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ26, RQ23, RQ23
  MOV.Q        RQ23, (RQ27, 24)
// p_saveg.c:559   strobe->thinker.function.acp1 = (actionf_p1)T_StrobeFlash;
  MOV          T_StrobeFlash, RQ18
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ18, (RQ25, 0)
// p_saveg.c:560   P_AddThinker (&strobe->thinker);
  ADD          RQ27, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:561   break;
  BSR          .L00802362, R0

.L0080236A:
// p_saveg.c:563   case tc_glow:
  MOV.Q        save_p, RQ27
  ADD          RQ27, 0, RQ9
  AND          RQ9, 3, RQ8
  ADD          R0, 4, RQ9
  SUB          RQ9, RQ8, RQ22
  AND          RQ22, 3, RQ8
  ADD          RQ27, RQ8, RQ27
  MOV.Q        RQ27, save_p
// p_saveg.c:565   glow = Z_Malloc (sizeof(*glow), PU_LEVEL, NULL);
  ADD          R0, 48, RD10
  ADD          R0, 50, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, (R2, 128)
// p_saveg.c:566   memcpy (glow, save_p, sizeof(*glow));
  MOV.Q        (R2, 128), RQ27
  MOV.Q        save_p, RQ26
  MOV.Q        (RQ26, 0), RQ10
  MOV.Q        (RQ26, 8), RQ11
  MOV.Q        (RQ26, 16), RQ12
  MOV.Q        RQ10, (RQ27, 0)
  MOV.Q        RQ11, (RQ27, 8)
  MOV.Q        (RQ26, 24), RQ10
  MOV.Q        (RQ26, 32), RQ11
  MOV.Q        RQ12, (RQ27, 16)
  MOV.Q        (RQ26, 40), RQ12
  MOV.Q        RQ10, (RQ27, 24)
  MOV.Q        RQ11, (RQ27, 32)
  MOV.Q        RQ12, (RQ27, 40)
// p_saveg.c:567   save_p += sizeof(*glow);
  MOV.Q        save_p, RQ26
  ADD          RQ26, 48, RQ26
  MOV.Q        RQ26, save_p
// p_saveg.c:568   glow->sector = &sectors[(nlint)glow->sector];
  MOV.Q        (RQ27, 24), RQ18
  MOV.Q        sectors, RQ26
  SHAD.L       RQ18, 7, RQ23
  ADD          RQ26, RQ23, RQ23
  MOV.Q        RQ23, (RQ27, 24)
// p_saveg.c:569   glow->thinker.function.acp1 = (actionf_p1)T_Glow;
  MOV          T_Glow, RQ18
  ADD          RQ27, 0, RQ26
  ADD          RQ26, 16, RQ25
  MOV.Q        RQ18, (RQ25, 0)
// p_saveg.c:570   P_AddThinker (&glow->thinker);
  ADD          RQ27, 0, RQ18
  ADD          RQ18, 0, RQ10
  BSR          P_AddThinker, R1
// p_saveg.c:571   break;
  BSR          .L00802362, R0

.L0080236B:
// p_saveg.c:573   default:
  MOV          .L00C03055, RQ10
  MOV.L        (R2, 172), RD11
  BSR          I_Error, R1

.L00802362:
  BSR          .L0080235F, R0

.L00802360:

.L00C03054:
  ADD          R2, 376, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0
  .balign 4

R_PrecacheLevel:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -400, R2
// r_data.c:2192   if (demoplayback)
  MOV.L        demoplayback, RD27
  BRNE.L       R0, RD27, .L00C0305B
// r_data.c:2196   flatpresent = malloc(numflats);
  MOV.L        numflats, RD27
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 200)
// r_data.c:2197   memset (flatpresent,0,numflats);	
  MOV.L        numflats, RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 200), RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// r_data.c:2199   for (i=0 ; i<numsectors ; i++)
  ADD          R0, 0, RD9
  MOV.L        numsectors, RD27
  BRGE.L       RD27, RD9, .L00802587

.L00802585:
// r_data.c:2200   {
  MOV.Q        sectors, RQ27
  SHAD.L       RD9, 7, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.W        (RQ26, 8), RQ18
  MOV.Q        (R2, 200), RQ25
  ADD          R0, 1, RD24
  MOV.B        RD24, (RQ25, RQ18)
// r_data.c:2202   flatpresent[sectors[i].ceilingpic] = 1;
  SHAD.L       RD9, 7, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.W        (RQ26, 10), RQ18
  MOV.B        RD24, (RQ25, RQ18)
  ADDS.L       RD9, 1, RD9
  MOV.L        numsectors, RD27
  BRLT.L       RD27, RD9, .L00802585

.L00802587:
// r_data.c:2205   flatmemory = 0;
  MOV.L        RD0, flatmemory
// r_data.c:2207   for (i=0 ; i<numflats ; i++)
  ADD          R0, 0, RD9
  MOV.L        numflats, RD27
  BRGE.L       RD27, RD9, .L0080258A

.L00802588:
// r_data.c:2208   {
  MOV.Q        (R2, 200), RQ27
  MOV.B        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L0080258B
// r_data.c:2210   {
  MOV.L        firstflat, RD27
  ADDS.L       RD27, RD9, RD23
// r_data.c:2212   flatmemory += lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD23, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 24), RQ18
  MOV.L        flatmemory, RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        RD27, flatmemory
// r_data.c:2213   W_CacheLumpNum(lump, PU_CACHE);
  ADD          RD23, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1

.L0080258B:
  ADDS.L       RD9, 1, RD9
  MOV.L        numflats, RD27
  BRLT.L       RD27, RD9, .L00802588

.L0080258A:
// r_data.c:2218   texturepresent = malloc(numtextures);
  MOV.L        numtextures, RD27
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 192)
// r_data.c:2219   memset (texturepresent,0, numtextures);
  MOV.L        numtextures, RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 192), RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// r_data.c:2221   for (i=0 ; i<numsides ; i++)
  ADD          R0, 0, RD9
  MOV.L        numsides, RD27
  BRGE.L       RD27, RD9, .L0080258E

.L0080258C:
// r_data.c:2222   {
  MOV.Q        sides, RQ27
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.W        (RQ26, 8), RQ18
  MOV.Q        (R2, 192), RQ25
  ADD          R0, 1, RD24
  MOV.B        RD24, (RQ25, RQ18)
// r_data.c:2224   texturepresent[sides[i].midtexture] = 1;
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.W        (RQ26, 12), RQ18
  MOV.B        RD24, (RQ25, RQ18)
// r_data.c:2225   texturepresent[sides[i].bottomtexture] = 1;
  ADD          R0, 24, R5
  MUL.L        RD9, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.W        (RQ26, 10), RQ18
  MOV.B        RD24, (RQ25, RQ18)
  ADDS.L       RD9, 1, RD9
  MOV.L        numsides, RD27
  BRLT.L       RD27, RD9, .L0080258C

.L0080258E:
// r_data.c:2234   texturepresent[skytexture] = 1;
  MOV.Q        (R2, 192), RQ27
  MOV.L        skytexture, RD26
  ADD          R0, 1, RD25
  MOV.B        RD25, (RQ27, RD26)
// r_data.c:2236   texturememory = 0;
  MOV.L        RD0, texturememory
// r_data.c:2237   for (i=0 ; i<numtextures ; i++)
  ADD          R0, 0, RD9
  MOV.L        numtextures, RD26
  BRGE.L       RD26, RD9, .L00802591

.L0080258F:
// r_data.c:2238   {
  MOV.Q        (R2, 192), RQ27
  MOV.B        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L00802590
// r_data.c:2242   texture = textures[i];
  MOV.Q        textures, RQ27
  MOV.Q        (RQ27, RD9), RQ20
// r_data.c:2244   for (j=0 ; j<texture->patchcount ; j++)
  ADD          R0, 0, RD8
  MOV.W        (RQ20, 22), RQ18
  BRGE.L       RQ18, RD8, .L00802594

.L00802592:
// r_data.c:2245   {
  ADD          RQ20, 24, RQ27
  ADD          R0, 12, R5
  MUL.L        RD8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RD23
// r_data.c:2247   texturememory += lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ25
  ADD          R0, 40, R5
  MUL.L        RD23, R5, RQ24
  ADD          RQ25, RQ24, RQ24
  MOV.L        (RQ24, 24), RQ18
  MOV.L        texturememory, RD25
  ADDS.L       RD25, RQ18, RD25
  MOV.L        RD25, texturememory
// r_data.c:2248   W_CacheLumpNum(lump , PU_CACHE);
  ADD          RD23, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADDS.L       RD8, 1, RD8
  MOV.W        (RQ20, 22), RQ18
  BRLT.L       RQ18, RD8, .L00802592

.L00802594:

.L00802590:
  ADDS.L       RD9, 1, RD9
  MOV.L        numtextures, RD27
  BRLT.L       RD27, RD9, .L0080258F

.L00802591:
// r_data.c:2253   spritepresent = malloc(numsprites);
  MOV.L        numsprites, RD27
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 184)
// r_data.c:2254   memset (spritepresent,0, numsprites);
  MOV.L        numsprites, RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 184), RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// r_data.c:2256   for (th = thinkercap.next ; th != &thinkercap ; th=th->next)
  MOV          thinkercap, RQ27
  MOV.Q        (RQ27, 8), RQ25
  ADD          RQ27, 0, RQ24
  MOV.Q        RQ25, (R2, 176)
  BREQ.Q       RQ24, RQ25, .L00802597

.L00802595:
// r_data.c:2257   {
  MOV.Q        (R2, 176), RQ27
  ADD          RQ27, 16, RQ26
  MOV.Q        (RQ26, 0), RQ25
  MOV          P_MobjThinker, RQ21
  BRNE.Q       RQ21, RQ25, .L00802598
// r_data.c:2259   spritepresent[((mobj_t *)th)->sprite] = 1;
  MOV.Q        (R2, 176), RQ27
  MOV.L        (RQ27, 60), RQ18
  MOV.Q        (R2, 184), RQ26
  ADD          R0, 1, RD25
  MOV.B        RD25, (RQ26, RQ18)

.L00802598:
  MOV.Q        (R2, 176), RQ27
  MOV.Q        (RQ27, 8), RQ27
  MOV          thinkercap, RQ26
  MOV.Q        RQ27, (R2, 176)
  BRNE.Q       RQ26, RQ27, .L00802595

.L00802597:
// r_data.c:2262   spritememory = 0;
  MOV.L        RD0, spritememory
// r_data.c:2263   for (i=0 ; i<numsprites ; i++)
  ADD          R0, 0, RD9
  MOV.L        numsprites, RD27
  BRGE.L       RD27, RD9, .L0080259B

.L00802599:
// r_data.c:2264   {
  MOV.Q        (R2, 184), RQ27
  MOV.B        (RQ27, RD9), RQ18
  BREQ.L       R0, RQ18, .L0080259A
// r_data.c:2268   for (j=0 ; j<sprites[i].numframes ; j++)
  ADD          R0, 0, RD8
  MOV.Q        sprites, RQ27
  SHAD.L       RD9, 4, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  BRGE.L       RQ18, RD8, .L0080259E

.L0080259C:
// r_data.c:2269   {
  MOV.Q        sprites, RQ27
  SHAD.L       RD9, 4, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 8), RQ27
  ADD          R0, 28, R5
  MUL.L        RD8, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        RQ25, (R2, 168)
// r_data.c:2272   for (k=0 ; k<8 ; k++)
  ADD          R0, 0, RD22

.L0080259F:
// r_data.c:2273   {
  MOV.Q        (R2, 168), RQ27
  ADD          RQ27, 4, RQ21
  MOV.W        (RQ21, RD22), RQ18
  MOV.L        firstspritelump, RD26
  ADDS.L       RD26, RQ18, RD23
// r_data.c:2275   spritememory += lumpinfo[lump].size;
  MOV.Q        lumpinfo, RQ26
  ADD          R0, 40, R5
  MUL.L        RD23, R5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.L        (RQ25, 24), RQ18
  MOV.L        spritememory, RD26
  ADDS.L       RD26, RQ18, RD26
  MOV.L        RD26, spritememory
// r_data.c:2277   W_CacheLumpNum(lump , PU_CACHE);
  ADD          RD23, 0, RD10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpNum, R1
  ADDS.L       RD22, 1, RD22
  BRLT.L       8, RD22, .L0080259F

.L008025A1:
  ADDS.L       RD8, 1, RD8
  MOV.Q        sprites, RQ27
  SHAD.L       RD9, 4, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 0), RQ18
  BRLT.L       RQ18, RD8, .L0080259C

.L0080259E:

.L0080259A:
  ADDS.L       RD9, 1, RD9
  MOV.L        numsprites, RD27
  BRLT.L       RD27, RD9, .L00802599

.L0080259B:

.L00C0305B:
  ADD          R2, 400, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

dblcvt:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R22, (R2, 40)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R25, (R2, 56)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  MOV.Q        R56, (R2, 80)
  MOV.Q        R57, (R2, 88)
  MOV.X        R20, (R2, 24)
  ADD          R2, -536, R2
  MOV.Q        RQ10, (R2, 200)
  MOV.L        RD11, (R2, 196)
  MOV.Q        RQ12, (R2, 184)
  MOV.L        RD13, (R2, 180)
  ADD          RQ14, 0, RQ20
  ADD          R2, 208, RQ6
  MOV.Q        RQ6, (R2, 128)
// pdpc201/stdio.c:3525   
// pdpc201/stdio.c:3529   
  MOV.Q        (R2, 200), RQ56
  FCMP/GT      RQ0, RQ56, RQ6
  BREQ.Q       RQ6, R0, .L0080059E
// pdpc201/stdio.c:3530   
  MOV.Q        (R2, 200), RQ56
  FNEG         RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3532   
  ADD          R0, 45, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L0080059F, R0

.L0080059E:
// pdpc201/stdio.c:3535   
  MOV.Q        (R2, 200), RQ57
  FMOV         RQ57, RQ56
  MOV.Q        RQ56, (R2, 160)
// pdpc201/stdio.c:3537   
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 140)

.L0080059F:
// pdpc201/stdio.c:3544   
  ADD          R0, 0, RD23
// pdpc201/stdio.c:3545   
  MOV.Q        (R2, 160), RQ56
  ADD          R0, 0x3FF00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/GT      RQ56, RQ57, RQ6
  BREQ.Q       RQ6, R0, .L008005A0
// pdpc201/stdio.c:3546   
  BSR          .L008005A1, R0

.L008005A2:
// pdpc201/stdio.c:3548   
  ADDS.L       RD23, 1, RD23
// pdpc201/stdio.c:3551   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 160), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)

.L008005A1:
  MOV.Q        (R2, 160), RQ56
  ADD          R0, 0x40240000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/GT      RQ57, RQ56, RQ18
  XOR          RQ18, 1, RQ18
  ADD          R0, 35, R5
  CMPLT.Q      RD23, R5, RQ8
  BTSTN.L      RQ8, RQ18, .L008005A2

.L008005A3:
  BSR          .L008005A4, R0

.L008005A0:
  MOV.Q        (R2, 160), RQ56
  FCMP/EQ      RQ56, RQ0, RQ6
  BREQ.Q       RQ6, R0, .L008005A5
// pdpc201/stdio.c:3555   
  ADD          R0, 0, RD23
  BSR          .L008005A6, R0

.L008005A5:
  MOV.Q        (R2, 160), RQ56
  ADD          R0, 0x3FF00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/GT      RQ57, RQ56, RQ6
  BREQ.Q       RQ6, R0, .L008005A7
// pdpc201/stdio.c:3560   
  BSR          .L008005A8, R0

.L008005A9:
// pdpc201/stdio.c:3562   
  ADDS.L       RD23, -1, RD23
// pdpc201/stdio.c:3564   
  ADD          R0, 0x40240000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 160), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)

.L008005A8:
  MOV.Q        (R2, 160), RQ56
  ADD          R0, 0x3FF00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/GT      RQ57, RQ56, RQ18
  ADD          R0, -35, R5
  CMPGT.Q      RD23, R5, RQ8
  BTSTN.L      RQ8, RQ18, .L008005A9

.L008005AA:

.L008005A7:

.L008005A6:

.L008005A4:
// pdpc201/stdio.c:3570   
  ADD          R0, -35, R5
  CMPLE.Q      RD23, R5, RQ18
  ADD          R0, 35, R5
  CMPGE.Q      RD23, R5, RQ8
  OR           RQ18, RQ8, RQ21
  BREQ.L       R0, RQ21, .L008005AB
// pdpc201/stdio.c:3571   
  ADD          RD0, 0, RD23
// pdpc201/stdio.c:3573   
  MOV.Q        RQ0, (R2, 160)

.L008005AB:
// pdpc201/stdio.c:3583   
  MOV.L        (R2, 196), RD27
  BREQ.Q       69, RD27, .L008005AC
  MOV.L        (R2, 196), RD27
  BREQ.Q       101, RD27, .L008005AD
  MOV.L        (R2, 196), RD27
  BREQ.Q       102, RD27, .L008005AE
  MOV.L        (R2, 196), RD27
  BREQ.Q       70, RD27, .L008005AF
  BSR          .L008005B0, R0

.L008005AC:

.L008005AD:
// pdpc201/stdio.c:3586   
  MOV.L        RD0, (R2, 144)
// pdpc201/stdio.c:3588   
  BSR          .L008005B1, R0

.L008005AE:

.L008005AF:
// pdpc201/stdio.c:3590   
  BRLT.L       R0, RD23, .L008005B2
// pdpc201/stdio.c:3592   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 144)
  BSR          .L008005B3, R0

.L008005B2:
// pdpc201/stdio.c:3596   
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 144)

.L008005B3:
// pdpc201/stdio.c:3598   
  BSR          .L008005B1, R0

.L008005B0:
// pdpc201/stdio.c:3605   
  BRLT.L       R0, RD23, .L008005B4
  MOV.L        (R2, 180), RD27
  BRLE.L       RD23, RD27, .L008005B5
// pdpc201/stdio.c:3608   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 144)
  BSR          .L008005B6, R0

.L008005B5:
// pdpc201/stdio.c:3612   
  MOV.L        RD0, (R2, 144)

.L008005B6:
  BSR          .L008005B7, R0

.L008005B4:
  BRLT.L       -4, RD23, .L008005B8
// pdpc201/stdio.c:3620   
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 144)
  BSR          .L008005B9, R0

.L008005B8:
// pdpc201/stdio.c:3624   
  MOV.L        RD0, (R2, 144)

.L008005B9:

.L008005B7:
// pdpc201/stdio.c:3627   

.L008005B1:
// pdpc201/stdio.c:3633   
  MOV.L        (R2, 144), RD27
  BREQ.L       R0, RD27, .L008005BA
  MOV.L        (R2, 144), RD27
  BREQ.Q       1, RD27, .L008005BB
  MOV.L        (R2, 144), RD27
  BREQ.Q       -1, RD27, .L008005BC
  BSR          .L008005BD, R0

.L008005BA:
// pdpc201/stdio.c:3635   
  MOV.L        (R2, 180), RD27
  BRGE.L       53, RD27, .L008005BE
// pdpc201/stdio.c:3637   
  MOV.L        (R2, 180), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 148)
  BSR          .L008005BF, R0

.L008005BE:
// pdpc201/stdio.c:3641   
  ADD          R0, 53, RD27
  MOV.L        RD27, (R2, 148)

.L008005BF:
// pdpc201/stdio.c:3643   
  ADD          R0, 0x3FE00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        RQ56, (R2, 152)
// pdpc201/stdio.c:3645   
  ADD          R0, 0, RD9
// pdpc201/stdio.c:3646   
  BSR          .L008005C0, R0

.L008005C1:
// pdpc201/stdio.c:3649   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 152), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 152)

.L008005C0:
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 148), RD27
  BRLE.L       RD27, RD9, .L008005C1

.L008005C2:
// pdpc201/stdio.c:3651   
  MOV.Q        (R2, 152), RQ56
  MOV.Q        (R2, 160), RQ57
  FADD         RQ57, RQ56, RQ57
// pdpc201/stdio.c:3653   
  MOV.Q        RQ57, (R2, 160)
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FCMP/GT      RQ25, RQ57, RQ6
  BRNE.Q       RQ6, R0, .L008005C3
// pdpc201/stdio.c:3656   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 160), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3657   
  ADDS.L       RD23, 1, RD23

.L008005C3:
// pdpc201/stdio.c:3658   
  BSR          .L008005BD, R0

.L008005BB:
// pdpc201/stdio.c:3663   
  MOV.L        (R2, 180), RD27
  ADDS.L       RD23, RD27, RQ18
  BRGE.L       53, RQ18, .L008005C4
// pdpc201/stdio.c:3664   
  MOV.L        (R2, 180), RD26
  ADDS.L       RD23, RD26, RD27
  MOV.L        RD27, (R2, 148)
  BSR          .L008005C5, R0

.L008005C4:
// pdpc201/stdio.c:3668   
  ADD          R0, 53, RD27
  MOV.L        RD27, (R2, 148)

.L008005C5:
// pdpc201/stdio.c:3670   
  ADD          R0, 0x3FE00000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        RQ56, (R2, 152)
// pdpc201/stdio.c:3672   
  ADD          R0, 0, RD9
// pdpc201/stdio.c:3673   
  BSR          .L008005C6, R0

.L008005C7:
// pdpc201/stdio.c:3676   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 152), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 152)

.L008005C6:
  ADDS.L       RD9, 0, RQ8
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 148), RD27
  BRLT.L       RD27, RQ8, .L008005C7

.L008005C8:
// pdpc201/stdio.c:3677   
  MOV.Q        (R2, 152), RQ56
  MOV.Q        (R2, 160), RQ57
  FADD         RQ57, RQ56, RQ57
// pdpc201/stdio.c:3679   
  MOV.Q        RQ57, (R2, 160)
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FCMP/GT      RQ25, RQ57, RQ6
  BRNE.Q       RQ6, R0, .L008005C9
// pdpc201/stdio.c:3682   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 160), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3683   
  ADDS.L       RD23, 1, RD23

.L008005C9:
// pdpc201/stdio.c:3684   
  BSR          .L008005BD, R0

.L008005BC:
// pdpc201/stdio.c:3687   
  MOV.L        (R2, 180), RD27
  BRGE.L       53, RD27, .L008005CA
// pdpc201/stdio.c:3689   
  MOV.L        (R2, 180), RD27
  ADDS.L       RD27, RD23, RQ21
  ADDS.L       RQ21, 1, RD26
  MOV.L        RD26, (R2, 148)
  BSR          .L008005CB, R0

.L008005CA:
// pdpc201/stdio.c:3693   
  ADD          R0, 53, RD27
  MOV.L        RD27, (R2, 148)

.L008005CB:
// pdpc201/stdio.c:3695   
  ADD          R0, 0x40140000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ56
  MOV.Q        RQ56, (R2, 152)
// pdpc201/stdio.c:3697   
  ADD          R0, 0, RD9
// pdpc201/stdio.c:3698   
  BSR          .L008005CC, R0

.L008005CD:
// pdpc201/stdio.c:3701   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 152), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 152)

.L008005CC:
  ADD          RD9, 0, RQ18
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 148), RD27
  BRLT.L       RD27, RQ18, .L008005CD

.L008005CE:
// pdpc201/stdio.c:3702   
  MOV.L        (R2, 148), RD27
  BRLT.L       R0, RD27, .L008005CF
// pdpc201/stdio.c:3704   
  MOV.Q        (R2, 152), RQ56
  MOV.Q        (R2, 160), RQ57
  FADD         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)

.L008005CF:
// pdpc201/stdio.c:3706   
  MOV.Q        (R2, 160), RQ56
  ADD          R0, 0x40240000, R5
  LDSH32       R5, 0, R5
  FMOVID       R5, RQ57
  FCMP/GT      RQ57, RQ56, RQ6
  BRNE.Q       RQ6, R0, .L008005D0
// pdpc201/stdio.c:3710   
  ADD          R0, 0x3FB99999, R5
  LDSH32       R5, 0x0000000099999998, R5
  FMOVID       R5, RQ56
  MOV.Q        (R2, 160), RQ57
  FMUL         RQ57, RQ56, RQ57
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3711   
  ADDS.L       RD23, 1, RD23

.L008005D0:
// pdpc201/stdio.c:3712   
  BRLT.L       R0, RD23, .L008005D1
// pdpc201/stdio.c:3714   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 144)

.L008005D1:
// pdpc201/stdio.c:3716   

.L008005BD:
// pdpc201/stdio.c:3723   
  MOV.L        (R2, 144), RD27
  BRNE.Q       -1, RD27, .L008005D2
// pdpc201/stdio.c:3729   
  MOV.L        (R2, 140), RD27
  MOV.B        RD27, (RQ20, 0)
// pdpc201/stdio.c:3730   
  ADD          R0, 48, RD26
  MOV.B        RD26, (RQ20, 1)
// pdpc201/stdio.c:3731   
  ADD          R0, 46, RD25
  MOV.B        RD25, (RQ20, 2)
// pdpc201/stdio.c:3732   
  MOV.B        RD0, (RQ20, 3)
// pdpc201/stdio.c:3733   
  BSR          .L008005D3, R0

.L008005D4:
// pdpc201/stdio.c:3734   
  MOV.L        (R2, 180), RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 180)
// pdpc201/stdio.c:3736   
  ADD          RQ20, 0, RQ10
  MOV          .L00C03062, RQ11
  BSR          strcat, R1

.L008005D3:
  ADDS.L       RD23, 1, RD23
  BRNE.L       R0, RD23, .L008005D4

.L008005D5:
// pdpc201/stdio.c:3737   
  MOV.Q        (R2, 160), RQ56
  FSTCI        RQ56, RD9
// pdpc201/stdio.c:3739   
  MOV.L        (R2, 180), RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 180)
// pdpc201/stdio.c:3740   
  ADDS.L       RD9, 0, RQ8
  ADD          R0, 10, RD26
  MODS.L       RQ8, RD26, RQ8
  ADDS.L       RQ8, 48, RQ21
  SHAD.Q       RQ21, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          R2, 208, RQ25
  MOV.B        RQ18, (RQ25, 0)
// pdpc201/stdio.c:3741   
  MOV.B        RD0, (RQ25, 1)
// pdpc201/stdio.c:3742   
  ADD          RQ20, 0, RQ10
  ADD          RQ25, 0, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3744   
  ADD          RD27, 0, RD22
// pdpc201/stdio.c:3746   
  BSR          .L008005D6, R0

.L008005D7:
// pdpc201/stdio.c:3747   
  FLDCI        RD9, RQ56
  MOV.Q        (R2, 160), RQ57
  FSUB         RQ57, RQ56, RQ57
// pdpc201/stdio.c:3749   
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FMUL         RQ57, RQ25, RQ57
// pdpc201/stdio.c:3750   
  FSTCI        RQ57, RD9
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3751   
  ADD          RD9, 0, RQ18
  ADD          R0, 10, RD27
  MODS.L       RQ18, RD27, RQ18
  ADDS.L       RQ18, 48, RQ8
  SHAD.Q       RQ8, 56, RQ21
  SHAR.Q       RQ21, 56, RQ21
  ADD          R2, 208, RQ26
  MOV.B        RQ21, (RQ26, 0)
// pdpc201/stdio.c:3752   
  MOV.B        RD0, (RQ26, 1)
// pdpc201/stdio.c:3753   
  ADD          RQ20, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          strcat, R1

.L008005D6:
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, -1, RD22
  BRGT.L       R0, RQ18, .L008005D7

.L008005D8:
  BSR          .L008005D9, R0

.L008005D2:
  MOV.L        (R2, 144), RD27
  BRNE.Q       1, RD27, .L008005DA
// pdpc201/stdio.c:3760   
  MOV.Q        (R2, 160), RQ56
  FSTCI        RQ56, RD9
// pdpc201/stdio.c:3762   
  MOV.L        (R2, 140), RD27
  MOV.B        RD27, (RQ20, 0)
// pdpc201/stdio.c:3763   
  MOV.B        RD0, (RQ20, 1)
// pdpc201/stdio.c:3764   
  ADDS.L       RD9, 0, RQ8
  ADD          R0, 10, RD26
  MODS.L       RQ8, RD26, RQ8
  ADDS.L       RQ8, 48, RQ21
  SHAD.Q       RQ21, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          R2, 208, RQ25
  MOV.B        RQ18, (RQ25, 0)
// pdpc201/stdio.c:3765   
  MOV.B        RD0, (RQ25, 1)
// pdpc201/stdio.c:3766   
  ADD          RQ20, 0, RQ10
  ADD          RQ25, 0, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3767   
  MOV.L        (R2, 180), RD13
  ADDS.L       RD13, RD23, RD13
// pdpc201/stdio.c:3768   
  ADD          RD13, 0, RD22
  MOV.L        RD13, (R2, 180)
// pdpc201/stdio.c:3770   
  BSR          .L008005DB, R0

.L008005DC:
// pdpc201/stdio.c:3771   
  MOV.L        (R2, 180), RD27
  SUBS.L       RD27, RD22, RQ8
  ADDS.L       RQ8, -1, RQ21
  BRNE.Q       RD23, RQ21, .L008005DD
// pdpc201/stdio.c:3773   
  ADD          RQ20, 0, RQ10
  MOV          .L00C00FE6, RQ11
  BSR          strcat, R1

.L008005DD:
// pdpc201/stdio.c:3775   
  FLDCI        RD9, RQ56
  MOV.Q        (R2, 160), RQ57
  FSUB         RQ57, RQ56, RQ57
// pdpc201/stdio.c:3777   
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FMUL         RQ57, RQ25, RQ57
// pdpc201/stdio.c:3778   
  FSTCI        RQ57, RD9
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3779   
  ADD          RD9, 0, RQ18
  ADD          R0, 10, RD27
  MODS.L       RQ18, RD27, RQ18
  ADDS.L       RQ18, 48, RQ8
  SHAD.Q       RQ8, 56, RQ21
  SHAR.Q       RQ21, 56, RQ21
  ADD          R2, 208, RQ26
  MOV.B        RQ21, (RQ26, 0)
// pdpc201/stdio.c:3780   
  MOV.B        RD0, (RQ26, 1)
// pdpc201/stdio.c:3781   
  ADD          RQ20, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          strcat, R1

.L008005DB:
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, -1, RD22
  BRGT.L       R0, RQ18, .L008005DC

.L008005DE:
  BSR          .L008005DF, R0

.L008005DA:
// pdpc201/stdio.c:3788   
  MOV.Q        (R2, 160), RQ56
  FSTCI        RQ56, RD9
// pdpc201/stdio.c:3790   
  MOV.L        (R2, 140), RD27
  MOV.B        RD27, (RQ20, 0)
// pdpc201/stdio.c:3791   
  MOV.B        RD0, (RQ20, 1)
// pdpc201/stdio.c:3792   
  ADDS.L       RD9, 0, RQ8
  ADD          R0, 10, RD26
  MODS.L       RQ8, RD26, RQ8
  ADDS.L       RQ8, 48, RQ21
  SHAD.Q       RQ21, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          R2, 208, RQ25
  MOV.B        RQ18, (RQ25, 0)
// pdpc201/stdio.c:3793   
  MOV.B        RD0, (RQ25, 1)
// pdpc201/stdio.c:3794   
  ADD          RQ20, 0, RQ10
  ADD          RQ25, 0, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3795   
  ADD          RQ20, 0, RQ10
  MOV          .L00C00FE6, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3797   
  MOV.L        (R2, 180), RD22
// pdpc201/stdio.c:3799   
  BSR          .L008005E0, R0

.L008005E1:
// pdpc201/stdio.c:3800   
  FLDCI        RD9, RQ56
  MOV.Q        (R2, 160), RQ57
  FSUB         RQ57, RQ56, RQ57
// pdpc201/stdio.c:3802   
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FMUL         RQ57, RQ25, RQ57
// pdpc201/stdio.c:3803   
  FSTCI        RQ57, RD9
  MOV.Q        RQ57, (R2, 160)
// pdpc201/stdio.c:3804   
  ADD          RD9, 0, RQ18
  ADD          R0, 10, RD27
  MODS.L       RQ18, RD27, RQ18
  ADDS.L       RQ18, 48, RQ8
  SHAD.Q       RQ8, 56, RQ21
  SHAR.Q       RQ21, 56, RQ21
  ADD          R2, 208, RQ26
  MOV.B        RQ21, (RQ26, 0)
// pdpc201/stdio.c:3805   
  MOV.B        RD0, (RQ26, 1)
// pdpc201/stdio.c:3806   
  ADD          RQ20, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          strcat, R1

.L008005E0:
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, -1, RD22
  BRGT.L       R0, RQ18, .L008005E1

.L008005E2:

.L008005DF:

.L008005D9:
// pdpc201/stdio.c:3810   
  MOV.L        (R2, 144), RD27
  BRNE.L       R0, RD27, .L008005E3
// pdpc201/stdio.c:3811   
  ADD          R2, 208, RQ27
  ADD          R0, 69, RD26
  MOV.B        RD26, (RQ27, 0)
  BRGE.L       R0, RD23, .L008005E4
// pdpc201/stdio.c:3814   
  SUBS.L       R0, RD23, RD23
// pdpc201/stdio.c:3816   
  ADD          R2, 208, RQ27
  ADD          R0, 45, RD26
  MOV.B        RD26, (RQ27, 1)
  BSR          .L008005E5, R0

.L008005E4:
// pdpc201/stdio.c:3819   
  ADD          R2, 208, RQ27
  ADD          R0, 43, RD26
  MOV.B        RD26, (RQ27, 1)

.L008005E5:
// pdpc201/stdio.c:3821   
  ADD          RD23, 0, RQ8
  ADD          R0, 10, RD27
  DIVS.L       RQ8, RD27, RQ8
  ADD          RQ8, 0, RQ21
  MODS.L       RQ21, RD27, RQ21
  ADDS.L       RQ21, 48, RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  ADD          R2, 208, RQ26
  MOV.B        RQ8, (RQ26, 2)
// pdpc201/stdio.c:3823   
  ADD          RD23, 0, RQ21
  MODS.L       RQ21, RD27, RQ21
  ADDS.L       RQ21, 48, RQ18
  SHAD.Q       RQ18, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  MOV.B        RQ8, (RQ26, 3)
// pdpc201/stdio.c:3824   
  MOV.B        RD0, (RQ26, 4)
// pdpc201/stdio.c:3825   
  ADD          RQ20, 0, RQ10
  ADD          RQ26, 0, RQ11
  BSR          strcat, R1
  BSR          .L008005E6, R0

.L008005E3:
  MOV.L        (R2, 196), RD27
  ADD          R0, 71, R5
  CMPEQ.Q      RD27, R5, RQ21
  ADD          R0, 103, R5
  CMPEQ.Q      RD27, R5, RQ18
  OR           RQ21, RQ18, RQ8
  BREQ.L       R0, RQ8, .L008005E7
// pdpc201/stdio.c:3834   
  ADD          RQ20, 0, RQ10
  ADD          R0, 46, RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ27
// pdpc201/stdio.c:3835   
  MOV.Q        RQ27, (R2, 120)
  BREQ.Q       RQ0, RQ27, .L008005E8
// pdpc201/stdio.c:3836   
  MOV.Q        (R2, 120), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 120)
// pdpc201/stdio.c:3838   
  ADD          RQ27, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ26
  ADD          RQ27, RQ26, RQ25
  ADD          RQ25, -1, RQ27
  MOV.Q        RQ27, (R2, 120)
// pdpc201/stdio.c:3839   
  BSR          .L008005E9, R0

.L008005EA:
// pdpc201/stdio.c:3840   
  MOV.Q        (R2, 120), RQ27
  MOV.B        RD0, (RQ27, 0)
// pdpc201/stdio.c:3842   
  ADD          RQ27, -1, RQ27
  MOV.Q        RQ27, (R2, 120)

.L008005E9:
  MOV.Q        (R2, 120), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       46, RQ18, .L008005EB
  MOV.Q        (R2, 120), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.Q       48, RQ8, .L008005EB
  BSR          .L008005EA, R0

.L008005EB:

.L008005EC:
  MOV.Q        (R2, 120), RQ27
  MOV.B        (RQ27, 0), RQ21
  BRNE.Q       46, RQ21, .L008005ED
// pdpc201/stdio.c:3845   
  MOV.Q        (R2, 120), RQ27
  MOV.B        RD0, (RQ27, 0)

.L008005ED:

.L008005E8:

.L008005E7:

.L008005E6:
// pdpc201/stdio.c:3856   
  MOV.B        (RQ20, 0), RQ18
  BRNE.Q       32, RQ18, .L008005EE
  ADD          RQ20, 1, RQ27
  ADD          R2, 208, RQ10
  ADD          RQ27, 0, RQ11
  BSR          strcpy, R1
  BSR          .L008005EF, R0

.L008005EE:
  ADD          R2, 208, RQ10
  ADD          RQ20, 0, RQ11
  BSR          strcpy, R1

.L008005EF:
// pdpc201/stdio.c:3857   
  ADD          R2, 208, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (R2, 184), RQ26
  SUB          RQ26, RQ27, RQ25
  ADDS.L       RQ25, 0, RD22
// pdpc201/stdio.c:3858   
  MOV.B        RD0, (RQ20, 0)
// pdpc201/stdio.c:3859   
  BSR          .L008005F0, R0

.L008005F1:
// pdpc201/stdio.c:3860   
  ADD          RQ20, 0, RQ10
  MOV          .L00C03063, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3862   
  ADDS.L       RD22, -1, RD22

.L008005F0:
  BRGT.L       R0, RD22, .L008005F1

.L008005F2:
// pdpc201/stdio.c:3863   
  ADD          RQ20, 0, RQ10
  ADD          R2, 208, RQ11
  BSR          strcat, R1
// pdpc201/stdio.c:3865   

.L00C03061:
  ADD          R2, 536, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  MOV.Q        (R2, 80), R56
  MOV.Q        (R2, 88), R57
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

vvscanf:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -896, R2
  MOV.Q        RQ10, (R2, 440)
  MOV.Q        RQ11, (R2, 432)
  ADD          RQ12, 0, RQ21
  ADD          RQ13, 0, RQ22
// pdpc201/stdio.c:2903   
  MOV.L        RD0, (R2, 412)
// pdpc201/stdio.c:2904   
  MOV.L        RD0, (R2, 408)
// pdpc201/stdio.c:2924   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 312)
// pdpc201/stdio.c:2925   
  ADD          R2, 312, RQ26
  ADD          RQ26, 0, RQ25
// pdpc201/stdio.c:2926   
  ADD          RQ25, 0, RQ24
// pdpc201/stdio.c:2927   
  ADD          RQ24, 0, RQ25
// pdpc201/stdio.c:2928   
  ADD          RQ24, 0, RQ13
// pdpc201/stdio.c:2930   
  MOV.Q        RQ25, (R2, 368)
// pdpc201/stdio.c:2931   
  MOV.Q        RQ13, (R2, 352)
  MOV.Q        RQ13, (R2, 360)
// pdpc201/stdio.c:2932   
  MOV.Q        RQ24, (R2, 384)
// pdpc201/stdio.c:2933   
  MOV.Q        RQ24, (R2, 336)
  MOV.Q        RQ24, (R2, 392)
// pdpc201/stdio.c:2934   
  MOV.Q        RQ25, (R2, 344)
  MOV.Q        RQ25, (R2, 376)
// pdpc201/stdio.c:2937   
  BREQ.Q       RQ0, RQ21, .L008004C9
// pdpc201/stdio.c:2938   
  ADD          RQ21, 0, RQ10
  BSR          ftell, R1
  MOV.Q        RQ10, (R2, 328)
  BSR          .L008004CA, R0

.L008004C9:
// pdpc201/stdio.c:2942   
  MOV.Q        RQ22, (R2, 320)

.L008004CA:
// pdpc201/stdio.c:2944   
  BRNE.Q       RQ0, RQ21, .L008004CB
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L008004CC, R0

.L008004CB:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L008004CC:
// pdpc201/stdio.c:2946   
  MOV.L        RD0, (R2, 296)
// pdpc201/stdio.c:2947   
  CMPNE.Q      RQ21, R0, RQ9
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ8
  AND          RQ9, RQ8, RQ23
  CMPEQ.Q      RQ21, R0, RQ9
  CMPEQ.Q      RD18, R0, RQ8
  AND          RQ9, RQ8, RQ20
  OR           RQ23, RQ20, RQ9
  BREQ.L       R0, RQ9, .L008004CD
  ADD          R0, -1, RD10
  BSR          .L00C03069, R0

.L008004CD:
// pdpc201/stdio.c:2949   
  BSR          .L008004CE, R0

.L008004CF:
// pdpc201/stdio.c:2950   
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.L       R0, RQ8, .L008004D0
// pdpc201/stdio.c:2952   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)
  BSR          .L008004D1, R0

.L008004D0:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BREQ.Q       37, RQ23, .L008004D2
  MOV.L        (R2, 296), RD27
  BRNE.L       R0, RD27, .L008004D2
  BSR          .L008004D3, R0

.L008004D2:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ20
  BRNE.Q       37, RQ20, .L008004D4
// pdpc201/stdio.c:2958   
  MOV.Q        (R2, 440), RQ27
  ADD          RQ27, 1, RQ27
// pdpc201/stdio.c:2960   
  MOV.L        RD0, (R2, 304)
// pdpc201/stdio.c:2961   
  MOV.L        RD0, (R2, 300)
// pdpc201/stdio.c:2962   
  MOV.L        RD0, (R2, 308)
  MOV.B        (RQ27, 0), RQ9
  MOV.Q        RQ27, (R2, 440)
  BRNE.Q       42, RQ9, .L008004D5
// pdpc201/stdio.c:2964   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 308)
// pdpc201/stdio.c:2966   
  MOV.Q        (R2, 440), RQ26
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 440)

.L008004D5:
// pdpc201/stdio.c:2969   
  ADD          R2, 312, RQ27
  ADD          RQ27, 0, RQ26
// pdpc201/stdio.c:2970   
  ADD          RQ26, 0, RQ25
// pdpc201/stdio.c:2971   
  ADD          RQ25, 0, RQ26
// pdpc201/stdio.c:2972   
  ADD          RQ25, 0, RQ24
// pdpc201/stdio.c:2974   
  MOV.Q        RQ26, (R2, 368)
// pdpc201/stdio.c:2975   
  MOV.Q        RQ24, (R2, 352)
  MOV.Q        RQ24, (R2, 360)
// pdpc201/stdio.c:2976   
  MOV.Q        RQ25, (R2, 384)
// pdpc201/stdio.c:2977   
  MOV.Q        RQ25, (R2, 336)
  MOV.Q        RQ25, (R2, 392)
// pdpc201/stdio.c:2978   
  MOV.Q        RQ26, (R2, 344)
  MOV.Q        RQ26, (R2, 376)

.L008004D4:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BRNE.Q       37, RQ9, .L008004D6
  BREQ.Q       37, RD18, .L008004D7
// pdpc201/stdio.c:2983   
  MOV.L        (R2, 408), RD10
  BSR          .L00C03069, R0

.L008004D7:
  BRNE.Q       RQ0, RQ21, .L008004D8
  MOV.B        (RQ22, 0), RQ8
  ADD          RQ22, 1, RQ22
  AND          RQ8, 255, RD18
  BSR          .L008004D9, R0

.L008004D8:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L008004D9:
// pdpc201/stdio.c:2985   
  MOV.L        RD0, (R2, 296)
  BSR          .L008004DA, R0

.L008004D6:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BRNE.Q       108, RQ23, .L008004DB
// pdpc201/stdio.c:2990   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 304)
// pdpc201/stdio.c:2991   
  MOV.L        RD27, (R2, 296)
  BSR          .L008004DC, R0

.L008004DB:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ20
  BRNE.Q       104, RQ20, .L008004DD
// pdpc201/stdio.c:2996   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 300)
// pdpc201/stdio.c:2997   
  MOV.L        RD27, (R2, 296)
  BSR          .L008004DE, R0

.L008004DD:
// pdpc201/stdio.c:3000   
  MOV.L        RD0, (R2, 296)
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BRNE.Q       115, RQ9, .L008004DF
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L008004E0
// pdpc201/stdio.c:3005   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 400)

.L008004E0:
// pdpc201/stdio.c:3009   
  BSR          .L008004E1, R0

.L008004E2:
  BRNE.Q       RQ0, RQ21, .L008004E3
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L008004E4, R0

.L008004E3:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L008004E4:

.L008004E1:
  BRLT.L       R0, RD18, .L008004E5
  ADD          RD18, 0, RD10
  BSR          isspace, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L008004E5
  BSR          .L008004E2, R0

.L008004E5:

.L008004E6:
  CMPNE.Q      RQ21, R0, RQ23
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ20
  AND          RQ23, RQ20, RQ9
  CMPEQ.Q      RQ21, R0, RQ8
  CMPEQ.Q      RD18, R0, RQ23
  AND          RQ8, RQ23, RQ20
  OR           RQ9, RQ20, RQ8
  BREQ.L       R0, RQ8, .L008004E7
// pdpc201/stdio.c:3012   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)
  MOV.L        (R2, 308), RD26
  BRNE.L       R0, RD26, .L008004E8
// pdpc201/stdio.c:3015   
  MOV.Q        (R2, 400), RQ27
  MOV.B        RD0, (RQ27, 0)

.L008004E8:
  BSR          .L008004E9, R0

.L008004E7:
// pdpc201/stdio.c:3020   

.L008004EA:
// pdpc201/stdio.c:3022   
  ADD          RD18, 0, RD10
  BSR          isspace, R1
  ADD          RQ10, 0, RQ23
  BRNE.L       R0, RQ23, .L008004EB
// pdpc201/stdio.c:3024   
  CMPNE.Q      RQ21, R0, RQ20
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ9
  AND          RQ20, RQ9, RQ8
  CMPEQ.Q      RQ21, R0, RQ23
  CMPEQ.Q      RD18, R0, RQ20
  AND          RQ23, RQ20, RQ9
  OR           RQ8, RQ9, RQ23
  BREQ.L       R0, RQ23, .L008004EC
// pdpc201/stdio.c:3026   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)
// pdpc201/stdio.c:3028   
  BSR          .L008004EB, R0

.L008004EC:
// pdpc201/stdio.c:3029   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L008004ED
// pdpc201/stdio.c:3031   
  SHAD.Q       RD18, 56, RQ20
  SHAR.Q       RQ20, 56, RQ20
  MOV.Q        (R2, 400), RQ26
  ADD          RQ26, 0, RQ27
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 400)
  MOV.B        RQ20, (RQ27, 0)

.L008004ED:
// pdpc201/stdio.c:3033   
  BRNE.Q       RQ0, RQ21, .L008004EE
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L008004EF, R0

.L008004EE:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L008004EF:
  BSR          .L008004EA, R0

.L008004EB:
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L008004F0
// pdpc201/stdio.c:3037   
  MOV.Q        (R2, 400), RQ27
  MOV.B        RD0, (RQ27, 0)

.L008004F0:
// pdpc201/stdio.c:3039   
  MOV.L        (R2, 408), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 408)

.L008004E9:
  BSR          .L008004F1, R0

.L008004DF:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.Q       91, RQ8, .L008004F2
// pdpc201/stdio.c:3044   
  MOV.L        RD0, (R2, 292)
// pdpc201/stdio.c:3050   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 256)
// pdpc201/stdio.c:3052   
  MOV.L        (R2, 308), RD26
  BRNE.L       R0, RD26, .L008004F3
// pdpc201/stdio.c:3053   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 400)

.L008004F3:
// pdpc201/stdio.c:3055   
  MOV.Q        (R2, 440), RQ27
  ADD          RQ27, 1, RQ27
// pdpc201/stdio.c:3057   
  MOV.B        (RQ27, 0), RQ9
  MOV.Q        RQ27, (R2, 440)
  BRNE.Q       94, RQ9, .L008004F4
// pdpc201/stdio.c:3058   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 292)
// pdpc201/stdio.c:3060   
  MOV.Q        (R2, 440), RQ26
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 440)

.L008004F4:
// pdpc201/stdio.c:3061   
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.L       R0, RQ8, .L008004F5
// pdpc201/stdio.c:3063   
  MOV.Q        (R2, 440), RQ27
  MOV.Q        RQ27, (R2, 280)
// pdpc201/stdio.c:3064   
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 440)
// pdpc201/stdio.c:3065   
  ADD          RQ27, 0, RQ10
  ADD          R0, 93, RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ26
// pdpc201/stdio.c:3066   
  MOV.Q        RQ26, (R2, 272)
  BRNE.Q       RQ0, RQ26, .L008004F6
  MOV.L        (R2, 408), RD10
  BSR          .L00C03069, R0

.L008004F6:
// pdpc201/stdio.c:3067   
  MOV.Q        (R2, 272), RQ27
  MOV.Q        (R2, 280), RQ26
  SUB          RQ27, RQ26, RQ25
  ADD          RQ25, 0, RQ24
  MOV.Q        RQ24, (R2, 264)
  MOV.Q        RQ25, (R2, 112)
// pdpc201/stdio.c:3068   

.L008004F7:
// pdpc201/stdio.c:3073   
  MOV.Q        (R2, 280), RQ10
  ADD          RD18, 0, RD11
  MOV.Q        (R2, 264), RQ12
  BSR          memchr, R1
  ADD          RQ10, 0, RQ27
  CMPNE.Q      RQ27, R0, RD26
// pdpc201/stdio.c:3074   
  MOV.L        RD26, (R2, 288)
  BREQ.L       R0, RD26, .L008004F8
  MOV.L        (R2, 292), RD27
  BREQ.L       R0, RD27, .L008004F8
  BSR          .L008004F9, R0

.L008004F8:
// pdpc201/stdio.c:3075   
  MOV.L        (R2, 288), RD27
  CMPEQ.Q      RD27, R0, RQ9
  MOV.L        (R2, 292), RD26
  CMPEQ.Q      RD26, R0, RQ8
  BTSTN.L      RQ8, RQ9, .L008004F9
// pdpc201/stdio.c:3076   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L008004FA
// pdpc201/stdio.c:3077   
  SHAD.Q       RD18, 56, RQ23
  SHAR.Q       RQ23, 56, RQ23
  MOV.Q        (R2, 400), RQ26
  ADD          RQ26, 0, RQ27
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 400)
  MOV.B        RQ23, (RQ27, 0)

.L008004FA:
// pdpc201/stdio.c:3079   
  MOV.Q        (R2, 256), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 256)
// pdpc201/stdio.c:3081   
  BRNE.Q       RQ0, RQ21, .L008004FB
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L008004FC, R0

.L008004FB:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L008004FC:
// pdpc201/stdio.c:3083   
  CMPNE.Q      RQ21, R0, RQ8
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ23
  AND          RQ8, RQ23, RQ20
  CMPEQ.Q      RQ21, R0, RQ9
  CMPEQ.Q      RD18, R0, RQ8
  AND          RQ9, RQ8, RQ23
  OR           RQ20, RQ23, RQ9
  BRNE.L       R0, RQ9, .L008004F9
  BSR          .L008004F7, R0

.L008004F9:
// pdpc201/stdio.c:3088   
  MOV.Q        (R2, 256), RQ27
  BREQ.Q       R0, RQ27, .L008004FD
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L008004FE
// pdpc201/stdio.c:3092   
  MOV.Q        (R2, 400), RQ26
  ADD          RQ26, 0, RQ27
  ADD          RQ26, 1, RQ26
  MOV.Q        RQ26, (R2, 400)
  MOV.B        RD0, (RQ27, 0)

.L008004FE:
// pdpc201/stdio.c:3094   
  MOV.L        (R2, 408), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 408)
  BSR          .L008004FF, R0

.L008004FD:
// pdpc201/stdio.c:3098   
  BSR          .L008004F5, R0

.L008004FF:
// pdpc201/stdio.c:3100   
  MOV.Q        (R2, 272), RQ27
  ADD          RQ27, 1, RQ26
  MOV.Q        RQ26, (R2, 440)
  BSR          .L00800500, R0

.L008004F2:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BRNE.Q       99, RQ9, .L00800501
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L00800502
// pdpc201/stdio.c:3106   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 400)

.L00800502:
  CMPNE.Q      RQ21, R0, RQ9
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ8
  AND          RQ9, RQ8, RQ23
  CMPEQ.Q      RQ21, R0, RQ20
  CMPEQ.Q      RD18, R0, RQ9
  AND          RQ20, RQ9, RQ8
  OR           RQ23, RQ8, RQ20
  BREQ.L       R0, RQ20, .L00800503
// pdpc201/stdio.c:3109   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)
  BSR          .L00800504, R0

.L00800503:
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L00800505
// pdpc201/stdio.c:3115   
  MOV.Q        (R2, 400), RQ27
  MOV.B        RD18, (RQ27, 0)

.L00800505:
// pdpc201/stdio.c:3117   
  MOV.L        (R2, 408), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 408)
  BRNE.Q       RQ0, RQ21, .L00800506
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L00800507, R0

.L00800506:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800507:

.L00800504:
  BSR          .L00800508, R0

.L00800501:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.Q       110, RQ8, .L00800509
// pdpc201/stdio.c:3123   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 384)
  BREQ.Q       RQ0, RQ21, .L0080050A
// pdpc201/stdio.c:3126   
  ADD          RQ21, 0, RQ10
  BSR          ftell, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        (R2, 328), RQ26
  SUB          RQ27, RQ26, RQ25
  MOV.Q        RQ27, (R2, 112)
  ADDU.L       RQ25, R0, RQ9
  MOV.Q        (R2, 384), RQ24
  MOVU.L       RQ9, (RQ24, 0)
  BSR          .L0080050B, R0

.L0080050A:
// pdpc201/stdio.c:3130   
  MOV.Q        (R2, 320), RQ27
  SUB          RQ27, RQ22, RQ26
  ADDU.L       RQ26, R0, RQ9
  MOV.Q        RQ26, (R2, 112)
  MOV.Q        (R2, 384), RQ25
  MOVU.L       RQ9, (RQ25, 0)

.L0080050B:
  BSR          .L0080050C, R0

.L00800509:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       100, RQ8, .L0080050D
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BREQ.Q       117, RQ23, .L0080050D

.L0080050E:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ20
  BREQ.Q       120, RQ20, .L0080050D

.L0080050F:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BREQ.Q       111, RQ9, .L0080050D

.L00800510:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       112, RQ8, .L0080050D

.L00800511:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BREQ.Q       105, RQ23, .L0080050D
  BSR          .L00800512, R0

.L0080050D:
// pdpc201/stdio.c:3138   
  MOV.L        RD0, (R2, 252)
// pdpc201/stdio.c:3140   
  ADD          RQ0, 0, RQ27
  MOV.Q        RQ27, (R2, 240)
// pdpc201/stdio.c:3141   
  MOV.L        RD0, (R2, 236)
// pdpc201/stdio.c:3142   
  ADD          R0, 10, RD26
  MOV.L        RD26, (R2, 232)
// pdpc201/stdio.c:3143   
  MOV.L        RD0, (R2, 228)
// pdpc201/stdio.c:3145   
  MOV.Q        (R2, 440), RQ25
  MOV.B        (RQ25, 0), RQ20
  BRNE.Q       120, RQ20, .L00800513
  ADD          R0, 16, RD27
  MOV.L        RD27, (R2, 232)
  BSR          .L00800514, R0

.L00800513:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BRNE.Q       112, RQ9, .L00800515
// pdpc201/stdio.c:3146   
  ADD          R0, 16, RD27
  MOV.L        RD27, (R2, 232)
  BSR          .L00800516, R0

.L00800515:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.Q       111, RQ8, .L00800517
// pdpc201/stdio.c:3147   
  ADD          R0, 8, RD27
  MOV.L        RD27, (R2, 232)
  BSR          .L00800518, R0

.L00800517:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BRNE.Q       105, RQ23, .L00800519
// pdpc201/stdio.c:3148   
  MOV.L        RD0, (R2, 232)

.L00800519:

.L00800518:

.L00800516:

.L00800514:
// pdpc201/stdio.c:3149   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L0080051A
// pdpc201/stdio.c:3150   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 376)
  BRNE.Q       R0, RQ26, .L0080051B
// pdpc201/stdio.c:3153   
  ADD          R2, 312, RQ27
  MOV.Q        RQ27, (R2, 376)

.L0080051B:
// pdpc201/stdio.c:3154   
  MOV.Q        (R2, 376), RQ26
  ADD          RQ26, 0, RQ27
// pdpc201/stdio.c:3155   
  ADD          RQ26, 0, RQ25
// pdpc201/stdio.c:3157   
  MOV.Q        RQ26, (R2, 368)
// pdpc201/stdio.c:3158   
  MOV.Q        RQ27, (R2, 352)
  MOV.Q        RQ27, (R2, 360)
// pdpc201/stdio.c:3159   
  MOV.Q        RQ25, (R2, 384)
  MOV.Q        RQ25, (R2, 392)

.L0080051A:
// pdpc201/stdio.c:3178   
  BSR          .L0080051C, R0

.L0080051D:
  BRNE.Q       RQ0, RQ21, .L0080051E
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L0080051F, R0

.L0080051E:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L0080051F:

.L0080051C:
  BRLT.L       R0, RD18, .L00800520
  ADD          RD18, 0, RD10
  BSR          isspace, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00800520
  BSR          .L0080051D, R0

.L00800520:

.L00800521:
// pdpc201/stdio.c:3179   
  BRNE.Q       45, RD18, .L00800522
// pdpc201/stdio.c:3180   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 252)
  BRNE.Q       RQ0, RQ21, .L00800523
  MOV.B        (RQ22, 0), RQ23
  ADD          RQ22, 1, RQ22
  AND          RQ23, 255, RD18
  BSR          .L00800524, R0

.L00800523:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800524:
  BSR          .L00800525, R0

.L00800522:
  BRNE.Q       43, RD18, .L00800526
  BRNE.Q       RQ0, RQ21, .L00800527
  MOV.B        (RQ22, 0), RQ20
  ADD          RQ22, 1, RQ22
  AND          RQ20, 255, RD18
  BSR          .L00800528, R0

.L00800527:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800528:

.L00800526:

.L00800525:
// pdpc201/stdio.c:3189   
  MOV.L        (R2, 232), RD27
  BRNE.L       R0, RD27, .L00800529
// pdpc201/stdio.c:3190   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 236)

.L00800529:
// pdpc201/stdio.c:3192   
  BSR          .L0080052A, R0

.L0080052B:
// pdpc201/stdio.c:3195   
  AND          RD18, 255, RQ9
  AND          RQ9, 255, RD10
  BSR          isdigit, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L0080052C
  MOV.L        (R2, 232), RD27
  BRNE.L       R0, RD27, .L0080052D
  BRNE.Q       48, RD18, .L0080052E
// pdpc201/stdio.c:3201   
  ADD          R0, 8, RD27
  MOV.L        RD27, (R2, 232)
  BSR          .L0080052F, R0

.L0080052E:
// pdpc201/stdio.c:3205   
  ADD          R0, 10, RD27
  MOV.L        RD27, (R2, 232)
// pdpc201/stdio.c:3207   
  MOV.L        RD0, (R2, 236)

.L0080052F:

.L0080052D:
// pdpc201/stdio.c:3209   
  MOV.L        (R2, 232), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 240), RQ25
  MULU.Q       RQ25, RQ26, RQ24
  ADDS.L       RD18, -48, RQ9
  ADDS.L       RQ9, 0, RQ26
  ADD          RQ24, RQ26, RQ25
  MOV.Q        RQ25, (R2, 240)
  MOV.Q        RQ24, (R2, 112)
  BRNE.Q       RQ0, RQ21, .L00800530
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L00800531, R0

.L00800530:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800531:
  BSR          .L00800532, R0

.L0080052C:
  AND          RD18, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isalpha, R1
  ADD          RQ10, 0, RQ23
  BREQ.L       R0, RQ23, .L00800533
  ADD          R0, 88, R5
  CMPEQ.Q      RD18, R5, RQ20
  ADD          R0, 120, R5
  CMPEQ.Q      RD18, R5, RQ9
  OR           RQ20, RQ9, RQ8
  BREQ.L       R0, RQ8, .L00800534
  MOV.L        (R2, 232), RD27
  BREQ.L       R0, RD27, .L00800535
  MOV.L        (R2, 232), RD27
  BRNE.Q       8, RD27, .L00800536
  MOV.L        (R2, 236), RD27
  BREQ.L       R0, RD27, .L00800536

.L00800535:
// pdpc201/stdio.c:3225   
  ADD          R0, 16, RD27
  MOV.L        RD27, (R2, 232)
// pdpc201/stdio.c:3227   
  MOV.L        RD0, (R2, 236)
  BRNE.Q       RQ0, RQ21, .L00800537
  MOV.B        (RQ22, 0), RQ23
  ADD          RQ22, 1, RQ22
  AND          RQ23, 255, RD18
  BSR          .L00800538, R0

.L00800537:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800538:
  BSR          .L00800539, R0

.L00800536:
  MOV.L        (R2, 232), RD27
  BRNE.Q       16, RD27, .L0080053A
  BRNE.Q       RQ0, RQ21, .L0080053B
  MOV.B        (RQ22, 0), RQ20
  ADD          RQ22, 1, RQ22
  AND          RQ20, 255, RD18
  BSR          .L0080053C, R0

.L0080053B:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L0080053C:
  BSR          .L0080053D, R0

.L0080053A:
// pdpc201/stdio.c:3237   
  BSR          .L0080053E, R0

.L0080053D:

.L00800539:
  BSR          .L0080053F, R0

.L00800534:
  MOV.L        (R2, 232), RD27
  BRGT.L       10, RD27, .L00800540
// pdpc201/stdio.c:3242   
  BSR          .L0080053E, R0
  BSR          .L00800541, R0

.L00800540:
// pdpc201/stdio.c:3246   
  MOV.L        (R2, 232), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        (R2, 240), RQ25
  MULU.Q       RQ25, RQ26, RQ24
  MOV.Q        RQ24, (R2, 112)
  AND          RD18, 255, RQ9
  AND          RQ9, 255, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ8, -65, RQ23
  ADDS.L       RQ23, 0, RQ27
  ADD          RQ24, RQ27, RQ26
  ADD          RQ26, 10, RQ25
  MOV.Q        RQ25, (R2, 240)
  BRNE.Q       RQ0, RQ21, .L00800542
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L00800543, R0

.L00800542:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800543:

.L00800541:

.L0080053F:
  BSR          .L00800544, R0

.L00800533:
// pdpc201/stdio.c:3253   
  BSR          .L0080053E, R0

.L00800544:

.L00800532:
// pdpc201/stdio.c:3255   
  MOV.L        (R2, 228), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 228)

.L0080052A:
  CMPNE.Q      RQ21, R0, RQ8
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ23
  AND          RQ8, RQ23, RQ20
  CMPEQ.Q      RQ21, R0, RQ9
  CMPEQ.Q      RD18, R0, RQ8
  AND          RQ9, RQ8, RQ23
  OR           RQ20, RQ23, RQ9
  BREQ.L       R0, RQ9, .L0080052B

.L0080053E:
// pdpc201/stdio.c:3263   
  MOV.L        (R2, 228), RD27
  BREQ.L       R0, RD27, .L008004F5
// pdpc201/stdio.c:3269   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L00800545
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       100, RQ8, .L00800546
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BREQ.Q       105, RQ23, .L00800546
  BSR          .L00800547, R0

.L00800546:
// pdpc201/stdio.c:3275   
  MOV.L        (R2, 252), RD27
  BREQ.L       R0, RD27, .L00800548
// pdpc201/stdio.c:3276   
  MOV.Q        (R2, 240), RQ27
  SUB          R0, RQ27, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, (R2, 216)
  MOV.Q        RQ26, (R2, 112)
  BSR          .L00800549, R0

.L00800548:
// pdpc201/stdio.c:3280   
  MOV.Q        (R2, 240), RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 216)

.L00800549:
// pdpc201/stdio.c:3282   
  MOV.L        (R2, 304), RD27
  BREQ.L       R0, RD27, .L0080054A
// pdpc201/stdio.c:3284   
  MOV.Q        (R2, 376), RQ27
  MOV.Q        (R2, 216), RQ26
  MOV.Q        RQ26, (RQ27, 0)
  BSR          .L0080054B, R0

.L0080054A:
  MOV.L        (R2, 300), RD27
  BREQ.L       R0, RD27, .L0080054C
// pdpc201/stdio.c:3287   
  MOV.Q        (R2, 216), RQ27
  SHAD.Q       RQ27, 48, RQ9
  SHAR.Q       RQ9, 48, RQ9
  MOV.Q        (R2, 360), RQ26
  MOV.W        RQ9, (RQ26, 0)
  BSR          .L0080054D, R0

.L0080054C:
// pdpc201/stdio.c:3289   
  MOV.Q        (R2, 216), RQ27
  ADDS.L       RQ27, 0, RQ8
  MOV.Q        (R2, 392), RQ26
  MOV.L        RQ8, (RQ26, 0)

.L0080054D:

.L0080054B:
  BSR          .L0080054E, R0

.L00800547:
  MOV.L        (R2, 304), RD27
  BREQ.L       R0, RD27, .L0080054F
// pdpc201/stdio.c:3294   
  MOV.Q        (R2, 368), RQ27
  MOV.Q        (R2, 240), RQ26
  MOV.Q        RQ26, (RQ27, 0)
  BSR          .L00800550, R0

.L0080054F:
  MOV.L        (R2, 300), RD27
  BREQ.L       R0, RD27, .L00800551
// pdpc201/stdio.c:3296   
  MOV.Q        (R2, 240), RQ27
  AND          RQ27, 0x0000FFFF, RQ23
  MOV.Q        (R2, 352), RQ26
  MOVU.W       RQ23, (RQ26, 0)
  BSR          .L00800552, R0

.L00800551:
// pdpc201/stdio.c:3298   
  MOV.Q        (R2, 240), RQ27
  ADDU.L       RQ27, R0, RQ20
  MOV.Q        (R2, 384), RQ26
  MOVU.L       RQ20, (RQ26, 0)

.L00800552:

.L00800550:

.L0080054E:

.L00800545:
// pdpc201/stdio.c:3300   
  MOV.L        (R2, 408), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 408)
  BSR          .L00800553, R0

.L00800512:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BREQ.Q       101, RQ9, .L00800554
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       102, RQ8, .L00800554

.L00800555:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ23
  BREQ.Q       103, RQ23, .L00800554

.L00800556:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ20
  BREQ.Q       69, RQ20, .L00800554

.L00800557:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  BREQ.Q       71, RQ9, .L00800554
  BSR          .L00800558, R0

.L00800554:
// pdpc201/stdio.c:3311   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L00800559
  MOV.L        (R2, 304), RD27
  BREQ.L       R0, RD27, .L0080055A
// pdpc201/stdio.c:3313   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 344)
  BSR          .L0080055B, R0

.L0080055A:
// pdpc201/stdio.c:3314   
  MOV.Q        (R2, 432), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 336)

.L0080055B:

.L00800559:
// pdpc201/stdio.c:3315   
  MOV.L        RD0, (R2, 212)
// pdpc201/stdio.c:3317   
  MOV.L        RD0, (R2, 208)
// pdpc201/stdio.c:3318   
  MOV.L        RD0, (R2, 204)
// pdpc201/stdio.c:3319   
  MOV.L        RD0, (R2, 200)
// pdpc201/stdio.c:3320   
  MOV.L        RD0, (R2, 196)
// pdpc201/stdio.c:3321   
  MOV.L        RD0, (R2, 192)
// pdpc201/stdio.c:3322   
  MOV.L        RD0, (R2, 188)
// pdpc201/stdio.c:3323   
  MOV.L        RD0, (R2, 184)
// pdpc201/stdio.c:3324   
  MOV.L        RD0, (R2, 180)
// pdpc201/stdio.c:3325   
  MOV.L        RD0, (R2, 176)
// pdpc201/stdio.c:3326   
  MOV.Q        RQ0, (R2, 168)
// pdpc201/stdio.c:3328   
  BSR          .L0080055C, R0

.L0080055D:
  BRNE.Q       RQ0, RQ21, .L0080055E
  MOV.B        (RQ22, 0), RQ9
  ADD          RQ22, 1, RQ22
  AND          RQ9, 255, RD18
  BSR          .L0080055F, R0

.L0080055E:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L0080055F:

.L0080055C:
  BRLT.L       R0, RD18, .L00800560
  ADD          RD18, 0, RD10
  BSR          isspace, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00800560
  BSR          .L0080055D, R0

.L00800560:

.L00800561:
// pdpc201/stdio.c:3329   
  BRNE.Q       45, RD18, .L00800562
// pdpc201/stdio.c:3330   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 212)
  BRNE.Q       RQ0, RQ21, .L00800563
  MOV.B        (RQ22, 0), RQ23
  ADD          RQ22, 1, RQ22
  AND          RQ23, 255, RD18
  BSR          .L00800564, R0

.L00800563:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800564:
  BSR          .L00800565, R0

.L00800562:
  BRNE.Q       43, RD18, .L00800566
  BRNE.Q       RQ0, RQ21, .L00800567
  MOV.B        (RQ22, 0), RQ20
  ADD          RQ22, 1, RQ22
  AND          RQ20, 255, RD18
  BSR          .L00800568, R0

.L00800567:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800568:

.L00800566:

.L00800565:
// pdpc201/stdio.c:3335   
  BSR          .L00800569, R0

.L0080056A:
// pdpc201/stdio.c:3336   
  ADD          R0, 46, R5
  CMPEQ.Q      RD18, R5, RQ9
  MOV.L        (R2, 204), RD27
  CMPEQ.Q      RD27, R0, RQ8
  AND          RQ9, RQ8, RQ23
  MOV.L        (R2, 200), RD26
  CMPEQ.Q      RD26, R0, RQ20
  BTST.L       RQ20, RQ23, .L0080056B
// pdpc201/stdio.c:3337   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 204)
  BSR          .L0080056C, R0

.L0080056B:
  ADD          RD18, 0, RD10
  BSR          isdigit, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L0080056D
  MOV.L        (R2, 200), RD27
  BREQ.L       R0, RD27, .L0080056E
// pdpc201/stdio.c:3341   
  MOV.L        (R2, 192), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 192)
// pdpc201/stdio.c:3343   
  MOV.L        (R2, 180), RD26
  ADD          R0, 10, R5
  MULS.L       RD26, R5, RQ8
  ADDS.L       RD18, -48, RQ23
  ADDS.L       RQ8, RQ23, RD26
  MOV.L        RD26, (R2, 180)
  BSR          .L0080056F, R0

.L0080056E:
// pdpc201/stdio.c:3351   
  MOV.L        (R2, 196), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 196)
  MOV.L        (R2, 204), RD26
  BREQ.L       R0, RD26, .L00800570
// pdpc201/stdio.c:3352   
  MOV.L        (R2, 188), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 188)

.L00800570:
  ADD          R0, 48, R5
  CMPEQ.Q      RD18, R5, RQ20
  MOV.Q        (R2, 168), RQ24
  FCMP/EQ      RQ24, RQ0, RQ9
  XOR          RQ9, 1, RQ9
  BTST.L       RQ9, RQ20, .L00800571
// pdpc201/stdio.c:3356   
  MOV.L        (R2, 184), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 184)
  BSR          .L00800572, R0

.L00800571:
// pdpc201/stdio.c:3361   
  BSR          .L00800573, R0

.L00800574:
// pdpc201/stdio.c:3362   
  ADD          R0, 0x40240000, RQ24
  LDSH32       RQ24, 0, RQ24
  MOV.Q        (R2, 168), RQ25
  FMUL         RQ25, RQ24, RQ25
  MOV.Q        RQ25, (R2, 168)
// pdpc201/stdio.c:3364   
  MOV.L        (R2, 184), RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, (R2, 184)

.L00800573:
  MOV.L        (R2, 184), RD27
  BRGT.L       R0, RD27, .L00800574

.L00800575:
// pdpc201/stdio.c:3365   
  MOV.Q        (R2, 168), RQ24
  ADD          R0, 0x40240000, RQ25
  LDSH32       RQ25, 0, RQ25
  FMUL         RQ24, RQ25, RQ26
  ADDS.L       RD18, -48, RQ9
  FLDCI        RQ9, RQ27
  FADD         RQ26, RQ27, RQ24
  MOV.Q        RQ24, (R2, 168)

.L00800572:

.L0080056F:
  BSR          .L00800576, R0

.L0080056D:
  ADD          R0, 101, R5
  CMPEQ.Q      RD18, R5, RQ9
  ADD          R0, 69, R5
  CMPEQ.Q      RD18, R5, RQ8
  OR           RQ9, RQ8, RQ23
  MOV.L        (R2, 200), RD27
  CMPEQ.Q      RD27, R0, RQ20
  BTST.L       RQ20, RQ23, .L00800577
// pdpc201/stdio.c:3370   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 200)
  BSR          .L00800578, R0

.L00800577:
  ADD          R0, 43, R5
  CMPEQ.Q      RD18, R5, RQ9
  ADD          R0, 45, R5
  CMPEQ.Q      RD18, R5, RQ8
  OR           RQ9, RQ8, RQ23
  MOV.L        (R2, 200), RD27
  ADD          R0, 1, R5
  CMPEQ.Q      RD27, R5, RQ20
  AND          RQ23, RQ20, RQ9
  MOV.L        (R2, 192), RD26
  CMPEQ.Q      RD26, R0, RQ8
  BTST.L       RQ8, RQ9, .L00800579
  MOV.L        (R2, 176), RD27
  BRNE.L       R0, RD27, .L00800579

.L0080057A:
// pdpc201/stdio.c:3373   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 176)
  BRNE.Q       45, RD18, .L0080057B
// pdpc201/stdio.c:3375   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 208)

.L0080057B:
  BSR          .L0080057C, R0

.L00800579:
// pdpc201/stdio.c:3377   
  BSR          .L0080057D, R0

.L0080057C:

.L00800578:

.L00800576:

.L0080056C:
// pdpc201/stdio.c:3378   
  BRNE.Q       RQ0, RQ21, .L0080057E
  MOV.B        (RQ22, 0), RQ23
  ADD          RQ22, 1, RQ22
  AND          RQ23, 255, RD18
  BSR          .L0080057F, R0

.L0080057E:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L0080057F:

.L00800569:
  BRGT.L       R0, RD18, .L0080056A

.L0080057D:
// pdpc201/stdio.c:3379   
  CMPNE.Q      RQ21, R0, RQ20
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ9
  AND          RQ20, RQ9, RQ8
  CMPEQ.Q      RQ21, R0, RQ23
  CMPEQ.Q      RD18, R0, RQ20
  AND          RQ23, RQ20, RQ9
  OR           RQ8, RQ9, RQ23
  BREQ.L       R0, RQ23, .L00800580
// pdpc201/stdio.c:3380   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)

.L00800580:
// pdpc201/stdio.c:3383   
  MOV.L        (R2, 196), RD27
  BREQ.L       R0, RD27, .L00800581
  MOV.L        (R2, 200), RD27
  BREQ.L       R0, RD27, .L00800582
  MOV.L        (R2, 192), RD27
  BRNE.L       R0, RD27, .L00800582

.L00800581:
  MOV.L        (R2, 408), RD10
  BSR          .L00C03069, R0

.L00800582:
// pdpc201/stdio.c:3385   
  MOV.L        (R2, 208), RD27
  BREQ.L       R0, RD27, .L00800583
  MOV.L        (R2, 180), RD27
  SUBS.L       R0, RD27, RD27
  MOV.L        RD27, (R2, 180)

.L00800583:
// pdpc201/stdio.c:3386   
  MOV.L        (R2, 184), RD27
  MOV.L        (R2, 188), RD26
  SUBS.L       RD27, RD26, RQ20
  MOV.L        (R2, 180), RD25
  ADDS.L       RD25, RQ20, RD25
// pdpc201/stdio.c:3387   
  CMPNE.Q      RD25, R0, RQ9
  MOV.L        RD25, (R2, 180)
  MOV.Q        (R2, 168), RQ24
  FCMP/EQ      RQ24, RQ0, RQ8
  XOR          RQ8, 1, RQ8
  BTST.L       RQ8, RQ9, .L00800584
// pdpc201/stdio.c:3388   
  MOV.L        RD0, (R2, 208)
  MOV.L        (R2, 180), RD27
  BRGE.L       R0, RD27, .L00800585
// pdpc201/stdio.c:3391   
  MOV.L        (R2, 180), RD27
  SUBS.L       R0, RD27, RD27
  MOV.L        RD27, (R2, 180)
// pdpc201/stdio.c:3393   
  ADD          R0, 1, RD26
  MOV.L        RD26, (R2, 208)

.L00800585:
// pdpc201/stdio.c:3397   
  ADD          R0, 0x40240000, RQ24
  LDSH32       RQ24, 0, RQ24
  MOV.Q        RQ24, (R2, 160)
// pdpc201/stdio.c:3398   

.L00800586:
// pdpc201/stdio.c:3399   
  MOV.L        (R2, 180), RD27
  ADD          R0, 1, RD26
  BTST.L       RD26, RD27, .L00800587
  MOV.L        (R2, 208), RD27
  BREQ.L       R0, RD27, .L00800588
// pdpc201/stdio.c:3402   
  MOV.Q        (R2, 168), RQ10
  MOV.Q        (R2, 160), RQ11
  BSR          __fpu_fdiv, R1
  MOV.Q        RQ10, (R2, 168)
  BSR          .L00800589, R0

.L00800588:
// pdpc201/stdio.c:3403   
  MOV.Q        (R2, 160), RQ24
  MOV.Q        (R2, 168), RQ25
  FMUL         RQ25, RQ24, RQ25
  MOV.Q        RQ25, (R2, 168)

.L00800589:

.L00800587:
// pdpc201/stdio.c:3404   
  MOV.L        (R2, 180), RD27
  SHAR         RD27, 1, RD27
// pdpc201/stdio.c:3406   
  MOV.L        RD27, (R2, 180)
  BREQ.L       R0, RD27, .L0080058A
// pdpc201/stdio.c:3407   
  MOV.Q        (R2, 160), RQ24
  FMUL         RQ24, RQ24, RQ25
  ADD          RQ25, 0, RQ24
  MOV.Q        RQ24, (R2, 160)
  BSR          .L00800586, R0

.L0080058A:

.L00800584:
// pdpc201/stdio.c:3409   
  MOV.L        (R2, 212), RD27
  BREQ.L       R0, RD27, .L0080058B
// pdpc201/stdio.c:3410   
  MOV.Q        (R2, 168), RQ24
  FNEG         RQ24, RQ24
  MOV.Q        RQ24, (R2, 168)

.L0080058B:
// pdpc201/stdio.c:3411   
  MOV.L        (R2, 308), RD27
  BRNE.L       R0, RD27, .L0080058C
  MOV.L        (R2, 304), RD27
  BREQ.L       R0, RD27, .L0080058D
// pdpc201/stdio.c:3414   
  MOV.Q        (R2, 344), RQ27
  MOV.Q        (R2, 168), RQ24
  MOV.Q        RQ24, (RQ27, 0)
  BSR          .L0080058E, R0

.L0080058D:
// pdpc201/stdio.c:3415   
  MOV.Q        (R2, 168), RQ24
  ADD          RQ24, 0, RQ25
  MOV.Q        (R2, 336), RQ27
  FSTCF        RQ25, RQ6
  MOVD.L       RQ6, (RQ27, 0)

.L0080058E:

.L0080058C:
// pdpc201/stdio.c:3416   
  MOV.L        (R2, 408), RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, (R2, 408)

.L00800558:

.L00800553:

.L0080050C:

.L00800508:

.L00800500:

.L008004F1:

.L008004DE:

.L008004DC:

.L008004DA:
  BSR          .L0080058F, R0

.L008004D3:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ9
  AND          RQ9, 255, RQ8
  AND          RQ8, 255, RD10
  BSR          isspace, R1
  ADD          RQ10, 0, RQ23
  BREQ.L       R0, RQ23, .L00800590
// pdpc201/stdio.c:3426   
  BSR          .L00800591, R0

.L00800592:
// pdpc201/stdio.c:3427   
  BRNE.Q       RQ0, RQ21, .L00800593
  MOV.B        (RQ22, 0), RQ20
  ADD          RQ22, 1, RQ22
  AND          RQ20, 255, RD18
  BSR          .L00800594, R0

.L00800593:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L00800594:

.L00800591:
  BRLT.L       R0, RD18, .L00800595
  ADD          RD18, 0, RD10
  BSR          isspace, R1
  ADDS.L       RQ10, 0, RQ9
  BREQ.L       R0, RQ9, .L00800595
  BSR          .L00800592, R0

.L00800595:

.L00800596:
  BSR          .L00800597, R0

.L00800590:
  MOV.Q        (R2, 440), RQ27
  MOV.B        (RQ27, 0), RQ8
  BREQ.Q       RQ8, RD18, .L00800598
// pdpc201/stdio.c:3433   
  MOV.L        (R2, 408), RD10
  BSR          .L00C03069, R0

.L00800598:
  BRNE.Q       RQ0, RQ21, .L00800599
  MOV.B        (RQ22, 0), RQ23
  ADD          RQ22, 1, RQ22
  AND          RQ23, 255, RD18
  BSR          .L0080059A, R0

.L00800599:
  ADD          RQ21, 0, RQ10
  BSR          getc, R1
  ADD          RQ10, 0, RD18

.L0080059A:

.L00800597:

.L0080058F:

.L008004D1:
// pdpc201/stdio.c:3435   
  MOV.Q        (R2, 440), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 440)
// pdpc201/stdio.c:3437   
  CMPNE.Q      RQ21, R0, RQ20
  ADD          R0, -1, R5
  CMPEQ.Q      RD18, R5, RQ9
  AND          RQ20, RQ9, RQ8
  CMPEQ.Q      RQ21, R0, RQ23
  CMPEQ.Q      RD18, R0, RQ20
  AND          RQ23, RQ20, RQ9
  OR           RQ8, RQ9, RQ23
  BREQ.L       R0, RQ23, .L0080059B
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 412)

.L0080059B:

.L008004CE:
  MOV.L        (R2, 412), RD27
  BREQ.L       R0, RD27, .L008004CF

.L008004F5:
// pdpc201/stdio.c:3439   
  BREQ.Q       RQ0, RQ21, .L0080059C
// pdpc201/stdio.c:3440   
  ADD          RD18, 0, RD10
  ADD          RQ21, 0, RQ11
  BSR          ungetc, R1

.L0080059C:
// pdpc201/stdio.c:3441   
  MOV.L        (R2, 408), RD10

.L00C03069:
  ADD          R2, 896, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0
  .balign 4

R_StoreWallRange:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          RD10, 0, RD22
  MOV.L        RD11, (R2, 152)
// r_segs.c:489   if (ds_p == &drawsegs[MAXDRAWSEGS])
  MOV          drawsegs, RQ27
  LDIZ         2048, RD26
  ADD          R0, 80, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        ds_p, RQ27
  BRNE.Q       RQ25, RQ27, .L0080274C
// r_segs.c:490   {
  MOV          .L00C03093, RQ10
  BSR          printf, R1
// r_segs.c:492   return;
  BSR          .L00C03092, R0

.L0080274C:
// r_segs.c:498   if (start >=viewwidth || start > stop)
  MOV.L        viewwidth, RD27
  CMPGE.Q      RD22, RD27, RQ26
  MOV.L        (R2, 152), RD27
  CMPGT.Q      RD22, RD27, RQ18
  OR           RQ26, RQ18, RQ9
  BREQ.L       R0, RQ9, .L0080274D
// r_segs.c:499   {

R_StoreWallRange.debugbreak_L065B:
  BRK          1627
// r_segs.c:501   I_Error ("Bad R_RenderWallRange: %i to %i", start , stop);
  MOV          .L00C03095, RQ10
  ADD          RD22, 0, RD11
  MOV.L        (R2, 152), RD12
  BSR          I_Error, R1

.L0080274D:
// r_segs.c:505   sidedef = curline->sidedef;
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 24), RQ26
  MOV.Q        RQ26, sidedef
// r_segs.c:506   linedef = curline->linedef;
  MOV.Q        (RQ27, 32), RQ26
// r_segs.c:509   linedef->flags |= ML_MAPPED;
  MOV.W        (RQ26, 24), RQ25
  OR           RQ25, 256, RQ18
  MOV.W        RQ18, (RQ26, 24)
  MOV.Q        RQ26, linedef
// r_segs.c:512   rw_normalangle = curline->angle + ANG90;
  MOVU.L       (RQ27, 20), RQ9
  LUI          0x00040000, R5
  ADDU.L       R5, RQ9, RD27
// r_segs.c:513   offsetangle = abs(rw_normalangle-rw_angle1);
  MOV.L        rw_angle1, RD26
  ADDU.L       RD26, R0, RQ18
  SUBU.L       RD27, RQ18, RQ25
  MOV.L        RD27, rw_normalangle
  ADDS.L       RQ25, 0, RQ18
  SHAR.Q       RQ18, 63, RQ6
  SUB          R0, RQ18, RQ9
  SHAR.Q       RQ9, 63, RQ7
  AND          RQ9, RQ6, RQ6
  AND          RQ18, RQ7, RQ7
  OR           RQ6, RQ7, RQ9
  ADDU.L       RQ9, R0, RD27
// r_segs.c:515   if (offsetangle > ANG90)
  MOV.L        RD27, (R2, 136)
  LUI          0x00040000, RD26
  BRLEU.L      RD26, RD27, .L0080274E
// r_segs.c:516   offsetangle = ANG90;
  LUI          0x00040000, RD27
  MOV.L        RD27, (R2, 136)

.L0080274E:
// r_segs.c:518   distangle = ANG90 - offsetangle;
  MOVU.L       (R2, 136), RD27
  LUI          0x00040000, R5
  SUBU.L       R5, RD27, RD26
  MOV.L        RD26, (R2, 140)
// r_segs.c:519   hyp = R_PointToDist (curline->v1->x, curline->v1->y);
  MOV.Q        curline, RQ25
  MOV.Q        (RQ25, 0), RQ24
  MOV.L        (RQ24, 4), RQ18
  MOV.L        (RQ24, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_PointToDist, R1
  MOV.L        RD10, (R2, 148)
// r_segs.c:520   sineval = finesine[distangle>>ANGLETOFINESHIFT];
  SHLR         RD26, 19, RQ18
  MOV          finesine, RQ25
  MOV.L        (RQ25, RQ18), RD27
  MOV.L        RD27, (R2, 144)
// r_segs.c:521   rw_distance = FixedMul (hyp, sineval);
  MOV.L        (R2, 148), RD10
  ADD          RD27, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, rw_distance
// r_segs.c:524   ds_p->x1 = rw_x = start;
  MOV.L        RD22, rw_x
  MOV.Q        ds_p, RQ25
  MOV.L        RD22, (RQ25, 8)
// r_segs.c:525   ds_p->x2 = stop;
  MOV.L        (R2, 152), RD24
  MOV.L        RD24, (RQ25, 12)
// r_segs.c:526   ds_p->curline = curline;
  MOV.Q        curline, RQ27
  MOV.Q        RQ27, (RQ25, 0)
// r_segs.c:527   rw_stopx = stop+1;
  ADDS.L       RD24, 1, RD27
  MOV.L        RD27, rw_stopx
// r_segs.c:553   if(r_usezbuff)
  MOVU.B       r_usezbuff, RD27
  BREQ.L       R0, RD27, .L0080274F
// r_segs.c:558   ds_p->tz1 = R_PointToDist2 (curline->v1->x, curline->v1->y);
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        (RQ26, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_PointToDist2, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.Q        ds_p, RQ27
  MOV.L        RQ8, (RQ27, 28)
// r_segs.c:559   ds_p->tz2 = R_PointToDist2 (curline->v2->x, curline->v2->y);
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 8), RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.L        (RQ26, 0), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          R_PointToDist2, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.Q        ds_p, RQ27
  MOV.L        RQ8, (RQ27, 32)
  MOVU.B       rw_wall_isclip, RD27
  BREQ.L       R0, RD27, .L00802750
// r_segs.c:564   tz = (ds_p->tz1 + ds_p->tz2)/2;
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 28), RQ18
  MOV.L        (RQ27, 32), RQ9
  ADDS.L       RQ18, RQ9, RQ8
  ADD          RQ8, 0, RD26
  ADD          R0, 2, RD25
  DIVS.L       RD26, RD25, RD26
// r_segs.c:565   ds_p->tz1 = tz;
  MOV.L        RD26, (RQ27, 28)
// r_segs.c:566   ds_p->tz2 = tz;
  MOV.L        RD26, (RQ27, 32)
  MOV.L        RD26, (R2, 128)

.L00802750:
  BSR          .L00802751, R0

.L0080274F:
// r_segs.c:571   ds_p->tz1 = hyp;
  MOV.L        (R2, 148), RD27
  MOV.Q        ds_p, RQ26
  MOV.L        RD27, (RQ26, 28)
// r_segs.c:572   ds_p->tz2 = hyp;
  MOV.L        RD27, (RQ26, 32)

.L00802751:
// r_segs.c:576   ds_p->scale1 = rw_scale = 
  MOV          xtoviewangle, RQ27
  MOVU.L       (RQ27, RD22), RQ18
  MOVU.L       viewangle, RD27
  ADDU.L       RD27, RQ18, RQ9
  ADDU.L       RQ9, R0, RD10
  BSR          R_ScaleFromGlobalAngle, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        RQ8, rw_scale
  MOV.Q        ds_p, RQ27
  MOV.L        RQ8, (RQ27, 16)
// r_segs.c:581   if (stop > start )
  MOV.L        (R2, 152), RD27
  BRLE.L       RD22, RD27, .L00802752
// r_segs.c:582   {
  MOV          xtoviewangle, RQ27
  MOV.L        (R2, 152), RD26
  MOVU.L       (RQ27, RD26), RQ18
  MOVU.L       viewangle, RD27
  ADDU.L       RD27, RQ18, RQ9
  ADDU.L       RQ9, R0, RD10
  BSR          R_ScaleFromGlobalAngle, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.Q        ds_p, RQ27
  MOV.L        RQ8, (RQ27, 20)
// r_segs.c:586   ds_p->scalestep = rw_scalestep = 
  SUBS.L       RD26, RD22, RQ18
  MOV.L        (RQ27, 20), RQ9
  MOV.L        rw_scale, RD27
  SUBS.L       RQ9, RD27, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RQ18, 0, RD11
  BSR          M_SoftDivS, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        RQ9, rw_scalestep
  MOV.Q        ds_p, RQ27
  MOV.L        RQ9, (RQ27, 24)
// r_segs.c:589   ds_p->zstep = rw_zstep = 
  SUBS.L       RD26, RD22, RQ8
  MOV.L        (RQ27, 32), RQ18
  MOV.L        (RQ27, 28), RQ9
  SUBS.L       RQ18, RQ9, RQ23
  ADD          RQ23, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          M_SoftDivS, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RQ18, rw_zstep
  MOV.Q        ds_p, RQ27
  MOV.L        RQ18, (RQ27, 36)
// r_segs.c:591   rw_z = ds_p->tz1;
  MOV.L        (RQ27, 28), RD25
  MOV.L        RD25, rw_z
  BSR          .L00802753, R0

.L00802752:
// r_segs.c:610   ds_p->scale2 = ds_p->scale1;
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 16), RQ9
  MOV.L        RQ9, (RQ27, 20)
// r_segs.c:611   ds_p->zstep = rw_zstep = 0;
  MOV.L        RD0, rw_zstep
  MOV.L        RD0, (RQ27, 36)
// r_segs.c:612   rw_z = ds_p->tz1;
  MOV.L        (RQ27, 28), RD26
  MOV.L        RD26, rw_z

.L00802753:
// r_segs.c:617   worldtop = frontsector->ceilingheight - viewz;
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV.L        viewz, RD25
  SUBS.L       RQ8, RD25, RD26
  MOV.L        RD26, worldtop
// r_segs.c:618   worldbottom = frontsector->floorheight - viewz;
  MOV.L        (RQ27, 0), RQ23
  SUBS.L       RQ23, RD25, RD27
  MOV.L        RD27, worldbottom
// r_segs.c:620   midtexture = toptexture = bottomtexture = maskedtexture = 0;
  MOV.L        RD0, maskedtexture
  MOV.L        RD0, bottomtexture
  MOV.L        RD0, toptexture
  MOV.L        RD0, midtexture
// r_segs.c:621   ds_p->maskedtexturecol = NULL;
  MOV.Q        ds_p, RQ27
  MOV.Q        RQ0, (RQ27, 72)
// r_segs.c:623   if (!backsector)
  MOV.Q        backsector, RQ27
  BRNE.Q       R0, RQ27, .L00802754
// r_segs.c:627   midtexture = texturetranslation[sidedef->midtexture];
  MOV.Q        sidedef, RQ27
  MOV.W        (RQ27, 12), RQ18
  MOV.Q        texturetranslation, RQ27
  MOV.L        (RQ27, RQ18), RD26
  MOV.L        RD26, midtexture
// r_segs.c:638   markfloor = markceiling = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, markceiling
  MOV.L        RD27, markfloor
  MOV.Q        linedef, RQ26
  MOV.W        (RQ26, 24), RQ9
  ADD          R0, 16, RD26
  BTST.L       RD26, RQ9, .L00802755
// r_segs.c:640   {
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.Q        sidedef, RQ27
  MOV.W        (RQ27, 12), RQ23
  MOV.Q        textureheight, RQ27
  MOV.L        (RQ27, RQ23), RQ18
  ADDS.L       RQ8, RQ18, RD27
// r_segs.c:644   rw_midtexturemid = vtop - viewz;	
  MOV.L        viewz, RD25
  SUBS.L       RD27, RD25, RD26
  MOV.L        RD26, rw_midtexturemid
  MOV.L        RD27, (R2, 132)
  BSR          .L00802756, R0

.L00802755:
// r_segs.c:649   rw_midtexturemid = worldtop;
  MOV.L        worldtop, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, rw_midtexturemid

.L00802756:
// r_segs.c:650   }
  MOV.Q        sidedef, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        rw_midtexturemid, RD27
  ADDS.L       RD27, RQ9, RD27
  MOV.L        RD27, rw_midtexturemid
// r_segs.c:653   ds_p->silhouette = SIL_BOTH;
  ADD          R0, 3, RD27
  MOV.Q        ds_p, RQ26
  MOV.L        RD27, (RQ26, 40)
// r_segs.c:654   ds_p->sprtopclip = screenheightarray;
  MOV          screenheightarray, RQ25
  MOV.Q        RQ25, (RQ26, 56)
// r_segs.c:655   ds_p->sprbottomclip = negonearray;
  MOV          negonearray, RQ25
  MOV.Q        RQ25, (RQ26, 64)
// r_segs.c:656   ds_p->bsilheight = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD25
  MOV.L        RD25, (RQ26, 44)
// r_segs.c:657   ds_p->tsilheight = MININT;
  LUI          0xFFFFFFFFFFF80000, RD24
  MOV.L        RD24, (RQ26, 48)
  BSR          .L00802757, R0

.L00802754:
// r_segs.c:662   ds_p->sprtopclip = ds_p->sprbottomclip = NULL;
  MOV.Q        ds_p, RQ27
  MOV.Q        RQ0, (RQ27, 64)
  MOV.Q        RQ0, (RQ27, 56)
// r_segs.c:663   ds_p->silhouette = 0;
  MOV.L        RD0, (RQ27, 40)
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ23
  BRLE.L       RQ23, RQ8, .L00802758
// r_segs.c:666   {
  ADD          R0, 1, RD27
  MOV.Q        ds_p, RQ26
  MOV.L        RD27, (RQ26, 40)
// r_segs.c:668   ds_p->bsilheight = frontsector->floorheight;
  MOV.Q        frontsector, RQ25
  MOV.L        (RQ25, 0), RQ18
  MOV.L        RQ18, (RQ26, 44)
  BSR          .L00802759, R0

.L00802758:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV.L        viewz, RD27
  BRLE.L       RD27, RQ9, .L0080275A
// r_segs.c:671   {
  ADD          R0, 1, RD27
  MOV.Q        ds_p, RQ26
  MOV.L        RD27, (RQ26, 40)
// r_segs.c:673   ds_p->bsilheight = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD25
  MOV.L        RD25, (RQ26, 44)

.L0080275A:

.L00802759:
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  BRGE.L       RQ23, RQ8, .L0080275B
// r_segs.c:678   {
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  OR           RQ18, 2, RQ9
  MOV.L        RQ9, (RQ27, 40)
// r_segs.c:680   ds_p->tsilheight = frontsector->ceilingheight;
  MOV.Q        frontsector, RQ26
  MOV.L        (RQ26, 4), RQ8
  MOV.L        RQ8, (RQ27, 48)
  BSR          .L0080275C, R0

.L0080275B:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  MOV.L        viewz, RD27
  BRGE.L       RD27, RQ23, .L0080275D
// r_segs.c:683   {
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  OR           RQ18, 2, RQ9
  MOV.L        RQ9, (RQ27, 40)
// r_segs.c:685   ds_p->tsilheight = MININT;
  LUI          0xFFFFFFFFFFF80000, RD26
  MOV.L        RD26, (RQ27, 48)

.L0080275D:

.L0080275C:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ23
  BRGT.L       RQ23, RQ8, .L0080275E
// r_segs.c:690   {
  MOV          negonearray, RQ27
  MOV.Q        ds_p, RQ26
  MOV.Q        RQ27, (RQ26, 64)
// r_segs.c:692   ds_p->bsilheight = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD27
  MOV.L        RD27, (RQ26, 44)
// r_segs.c:693   ds_p->silhouette |= SIL_BOTTOM;
  MOV.L        (RQ26, 40), RQ18
  OR           RQ18, 1, RQ9
  MOV.L        RQ9, (RQ26, 40)

.L0080275E:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  BRLT.L       RQ23, RQ8, .L0080275F
// r_segs.c:697   {
  MOV          screenheightarray, RQ27
  MOV.Q        ds_p, RQ26
  MOV.Q        RQ27, (RQ26, 56)
// r_segs.c:699   ds_p->tsilheight = MININT;
  LUI          0xFFFFFFFFFFF80000, RD27
  MOV.L        RD27, (RQ26, 48)
// r_segs.c:700   ds_p->silhouette |= SIL_TOP;
  MOV.L        (RQ26, 40), RQ18
  OR           RQ18, 2, RQ9
  MOV.L        RQ9, (RQ26, 40)

.L0080275F:
// r_segs.c:703   worldhigh = backsector->ceilingheight - viewz;
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV.L        viewz, RD25
  SUBS.L       RQ8, RD25, RD26
  MOV.L        RD26, worldhigh
// r_segs.c:704   worldlow = backsector->floorheight - viewz;
  MOV.L        (RQ27, 0), RQ23
  SUBS.L       RQ23, RD25, RD27
  MOV.L        RD27, worldlow
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 10), RQ18
  MOV.L        skyflatnum, RD27
  BRNE.Q       RD27, RQ18, .L00802760
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 10), RQ9
  MOV.L        skyflatnum, RD27
  BRNE.Q       RD27, RQ9, .L00802760

.L00802761:
// r_segs.c:709   {
  MOV.L        worldhigh, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, worldtop

.L00802760:
  MOV.L        worldlow, RD27
  MOV.L        worldbottom, RD26
  BRNE.Q       RD26, RD27, .L00802764
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 8), RQ8
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 8), RQ23
  BRNE.Q       RQ23, RQ8, .L00802764

.L00802765:
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 12), RQ18
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ9
  BRNE.Q       RQ9, RQ18, .L00802764
  BSR          .L00802763, R0

.L00802764:
// r_segs.c:717   {
  ADD          R0, 1, RD27
  MOV.L        RD27, markfloor
  BSR          .L00802767, R0

.L00802763:
// r_segs.c:723   markfloor = false;
  MOV.L        RD0, markfloor

.L00802767:
  MOV.L        worldhigh, RD27
  MOV.L        worldtop, RD26
  BRNE.Q       RD26, RD27, .L00802769
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 10), RQ8
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 10), RQ23
  BRNE.Q       RQ23, RQ8, .L00802769

.L0080276A:
  MOV.Q        backsector, RQ27
  MOV.W        (RQ27, 12), RQ18
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ9
  BRNE.Q       RQ9, RQ18, .L00802769
  BSR          .L00802768, R0

.L00802769:
// r_segs.c:730   {
  ADD          R0, 1, RD27
  MOV.L        RD27, markceiling
  BSR          .L0080276C, R0

.L00802768:
// r_segs.c:736   markceiling = false;
  MOV.L        RD0, markceiling

.L0080276C:
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ8
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ23
  BRLE.L       RQ23, RQ8, .L0080276E
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 0), RQ18
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ9
  BRGE.L       RQ9, RQ18, .L0080276E
  BSR          .L0080276D, R0

.L0080276E:
// r_segs.c:743   markceiling = markfloor = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, markfloor
  MOV.L        RD27, markceiling

.L0080276D:
  MOV.L        worldhigh, RD27
  MOV.L        worldtop, RD26
  BRGE.L       RD26, RD27, .L00802770
// r_segs.c:750   toptexture = texturetranslation[sidedef->toptexture];
  MOV.Q        sidedef, RQ27
  MOV.W        (RQ27, 8), RQ8
  MOV.Q        texturetranslation, RQ27
  MOV.L        (RQ27, RQ8), RD26
  MOV.L        RD26, toptexture
  MOV.Q        linedef, RQ27
  MOV.W        (RQ27, 24), RQ23
  ADD          R0, 8, RD27
  BTST.L       RD27, RQ23, .L00802771
// r_segs.c:754   rw_toptexturemid = worldtop;
  MOV.L        worldtop, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, rw_toptexturemid
  BSR          .L00802772, R0

.L00802771:
// r_segs.c:757   {
  MOV.Q        backsector, RQ27
  MOV.L        (RQ27, 4), RQ18
  MOV.Q        sidedef, RQ27
  MOV.W        (RQ27, 8), RQ9
  MOV.Q        textureheight, RQ27
  MOV.L        (RQ27, RQ9), RQ8
  ADDS.L       RQ18, RQ8, RD27
// r_segs.c:763   rw_toptexturemid = vtop - viewz;	
  MOV.L        viewz, RD25
  SUBS.L       RD27, RD25, RD26
  MOV.L        RD26, rw_toptexturemid
  MOV.L        RD27, (R2, 132)

.L00802772:

.L00802770:
  MOV.L        worldlow, RD27
  MOV.L        worldbottom, RD26
  BRLE.L       RD26, RD27, .L00802773
// r_segs.c:769   bottomtexture = texturetranslation[sidedef->bottomtexture];
  MOV.Q        sidedef, RQ27
  MOV.W        (RQ27, 10), RQ23
  MOV.Q        texturetranslation, RQ27
  MOV.L        (RQ27, RQ23), RD26
  MOV.L        RD26, bottomtexture
  MOV.Q        linedef, RQ27
  MOV.W        (RQ27, 24), RQ18
  ADD          R0, 16, RD27
  BTST.L       RD27, RQ18, .L00802774
// r_segs.c:775   rw_bottomtexturemid = worldtop;
  MOV.L        worldtop, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, rw_bottomtexturemid
  BSR          .L00802775, R0

.L00802774:
// r_segs.c:778   rw_bottomtexturemid = worldlow;
  MOV.L        worldlow, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, rw_bottomtexturemid

.L00802775:

.L00802773:
// r_segs.c:779   }
  MOV.Q        sidedef, RQ27
  MOV.L        (RQ27, 4), RQ9
  MOV.L        rw_toptexturemid, RD26
  ADDS.L       RD26, RQ9, RD26
  MOV.L        RD26, rw_toptexturemid
// r_segs.c:781   rw_bottomtexturemid += sidedef->rowoffset;
  MOV.L        rw_bottomtexturemid, RD26
  ADDS.L       RD26, RQ9, RD26
  MOV.L        RD26, rw_bottomtexturemid
  MOV.W        (RQ27, 12), RQ8
  BREQ.L       R0, RQ8, .L00802776
// r_segs.c:787   maskedtexture = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, maskedtexture
// r_segs.c:788   ds_p->maskedtexturecol = maskedtexturecol = lastopening - rw_x;
  MOV.L        rw_x, RD27
  SUBS.L       R0, RD27, RQ23
  MOV.Q        lastopening, RQ26
  LEA.W        RQ26, RQ23, RQ25
  MOV.Q        RQ25, maskedtexturecol
  MOV.Q        ds_p, RQ24
  MOV.Q        RQ25, (RQ24, 72)
// r_segs.c:789   lastopening += rw_stopx - rw_x;
  MOV.L        rw_stopx, RD24
  SUBS.L       RD24, RD27, RQ18
  LEA.W        RQ26, RQ18, RQ26
  MOV          openings, RQ27
  SUB          RQ26, RQ27, RQ21
  SHAR.Q       RQ21, 1, RQ21
  MOV.Q        RQ26, lastopening
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ21, .L00802777
// r_segs.c:792   { __debugbreak(); }

R_StoreWallRange.debugbreak_L065C:
  BRK          1628

.L00802777:

.L00802776:

.L00802757:
// r_segs.c:797   segtextured = midtexture | toptexture | bottomtexture | maskedtexture;
  MOV.L        midtexture, RD27
  MOV.L        toptexture, RD26
  OR           RD27, RD26, RQ18
  MOV.L        bottomtexture, RD27
  OR           RQ18, RD27, RQ9
  MOV.L        maskedtexture, RD26
  OR           RQ9, RD26, RD27
// r_segs.c:799   if (segtextured)
  MOV.L        RD27, segtextured
  BREQ.L       R0, RD27, .L00802778
// r_segs.c:800   {
  MOV.L        rw_angle1, RD27
  ADDU.L       RD27, R0, RQ8
  MOVU.L       rw_normalangle, RD26
  SUBU.L       RD26, RQ8, RD27
  MOV.L        RD27, (R2, 136)
  ADD          R0, 0x0000000080000000, RD26
  BRLEU.L      RD26, RD27, .L00802779
// r_segs.c:804   offsetangle = -offsetangle;
  MOVU.L       (R2, 136), RD27
  SUBU.L       R0, RD27, RD27
  MOV.L        RD27, (R2, 136)

.L00802779:
  MOVU.L       (R2, 136), RD27
  LUI          0x00040000, RD26
  BRLEU.L      RD26, RD27, .L0080277A
// r_segs.c:807   offsetangle = ANG90;
  LUI          0x00040000, RD27
  MOV.L        RD27, (R2, 136)

.L0080277A:
// r_segs.c:809   sineval = finesine[offsetangle >>ANGLETOFINESHIFT];
  MOVU.L       (R2, 136), RD27
  SHLR         RD27, 19, RQ23
  MOV          finesine, RQ26
  MOV.L        (RQ26, RQ23), RD25
  MOV.L        RD25, (R2, 144)
// r_segs.c:810   rw_offset = FixedMul (hyp, sineval);
  MOV.L        (R2, 148), RD10
  ADD          RD25, 0, RD11
  BSR          FixedMul, R1
  MOV.L        RQ10, rw_offset
  MOV.L        rw_angle1, RD26
  ADDU.L       RD26, R0, RQ9
  MOVU.L       rw_normalangle, RD26
  SUBU.L       RD26, RQ9, RQ18
  ADD          R0, 0x0000000080000000, RD26
  BRGEU.L      RD26, RQ18, .L0080277B
// r_segs.c:813   rw_offset = -rw_offset;
  MOV.L        rw_offset, RD27
  SUBS.L       R0, RD27, RD27
  MOV.L        RD27, rw_offset

.L0080277B:
// r_segs.c:815   rw_offset += sidedef->textureoffset + curline->offset;
  MOV.Q        sidedef, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.Q        curline, RQ27
  MOV.L        (RQ27, 16), RQ23
  ADDS.L       RQ8, RQ23, RQ18
  MOV.L        rw_offset, RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        RD27, rw_offset
// r_segs.c:816   rw_centerangle = ANG90 + viewangle - rw_normalangle;
  MOVU.L       viewangle, RD27
  LUI          0x00040000, R5
  ADDU.L       R5, RD27, RQ9
  MOVU.L       rw_normalangle, RD26
  SUBU.L       RQ9, RD26, RD27
  MOV.L        RD27, rw_centerangle
  MOV.Q        fixedcolormap, RQ27
  BRNE.Q       R0, RQ27, .L0080277C
// r_segs.c:823   {
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 12), RQ8
  SHAR         RQ8, 4, RQ23
  MOV.L        extralight, RD27
  ADDS.L       RQ23, RD27, RD20
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.L        (RQ26, 4), RQ18
  MOV.Q        (RQ27, 8), RQ26
  MOV.L        (RQ26, 4), RQ9
  BRNE.Q       RQ9, RQ18, .L0080277D
// r_segs.c:827   lightnum--;
  ADDS.L       RD20, -1, RD20
  BSR          .L0080277E, R0

.L0080277D:
  MOV.Q        curline, RQ27
  MOV.Q        (RQ27, 0), RQ26
  MOV.L        (RQ26, 0), RQ18
  MOV.Q        (RQ27, 8), RQ26
  MOV.L        (RQ26, 0), RQ9
  BRNE.Q       RQ9, RQ18, .L0080277F
// r_segs.c:829   lightnum++;
  ADDS.L       RD20, 1, RD20

.L0080277F:

.L0080277E:
  BRGE.L       R0, RD20, .L00802780
// r_segs.c:832   {
  MOV          scalelight, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:834   dc_baseluma = 0x0000;
  MOV.W        RD0, dc_baseluma
  BSR          .L00802781, R0

.L00802780:
  BRLT.L       16, RD20, .L00802782
// r_segs.c:837   {
  MOV          scalelight, RQ27
  ADD          RQ27, 5760, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:839   dc_baseluma = 0xFF00;
  LDIZ         0x0000FF00, RD27
  MOV.W        RD27, dc_baseluma
  BSR          .L00802783, R0

.L00802782:
// r_segs.c:842   {
  MOV          scalelight, RQ27
  ADD          R0, 384, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ26, walllights
// r_segs.c:847   dc_baseluma = (cmap_luma[31-lightnum*2]<<8);
  SHAD.L       RD20, 1, RQ8
  ADD          R0, 31, R5
  SUBS.L       R5, RQ8, RQ23
  MOV          cmap_luma, RQ27
  MOVU.B       (RQ27, RQ23), RQ18
  SHAD.L       RQ18, 8, RQ9
  AND          RQ9, 0x0000FFFF, RD27
  MOV.W        RD27, dc_baseluma

.L00802783:

.L00802781:

.L0080277C:

.L00802778:
// r_segs.c:857   if (frontsector->floorheight >= viewz)
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.L        viewz, RD27
  BRLT.L       RD27, RQ8, .L00802784
// r_segs.c:860   markfloor = false;
  MOV.L        RD0, markfloor

.L00802784:
// r_segs.c:863   if (frontsector->ceilingheight <= viewz 
  MOV.Q        frontsector, RQ27
  MOV.L        (RQ27, 4), RQ23
  MOV.L        viewz, RD27
  BRGT.L       RD27, RQ23, .L00802785
  MOV.Q        frontsector, RQ27
  MOV.W        (RQ27, 10), RQ18
  MOV.L        skyflatnum, RD27
  BREQ.Q       RD27, RQ18, .L00802785

.L00802786:
// r_segs.c:867   markceiling = false;
  MOV.L        RD0, markceiling

.L00802785:
// r_segs.c:871   if(r_ispolyobj)
  MOVU.B       r_ispolyobj, RD27
  BREQ.L       R0, RD27, .L00802788
// r_segs.c:874   markfloor = false;
  MOV.L        RD0, markfloor
// r_segs.c:875   markceiling = false;
  MOV.L        RD0, markceiling

.L00802788:
// r_segs.c:881   worldtop >>= 4;
  MOV.L        worldtop, RD27
  SHAR         RD27, 4, RD27
  MOV.L        RD27, worldtop
// r_segs.c:882   worldbottom >>= 4;
  MOV.L        worldbottom, RD27
  SHAR         RD27, 4, RD27
  MOV.L        RD27, worldbottom
// r_segs.c:884   topstep = -FixedMul (rw_scalestep, worldtop);
  MOV.L        rw_scalestep, RD10
  MOV.L        worldtop, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       R0, RQ9, RD27
  MOV.L        RD27, topstep
// r_segs.c:885   topfrac = (centeryfrac>>4) - FixedMul (worldtop, rw_scale);
  MOV.L        centeryfrac, RD27
  SHAR         RD27, 4, RQ8
  MOV.L        worldtop, RD10
  MOV.L        rw_scale, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ8, RQ23, RD27
  MOV.L        RD27, topfrac
// r_segs.c:887   bottomstep = -FixedMul (rw_scalestep,worldbottom);
  MOV.L        rw_scalestep, RD10
  MOV.L        worldbottom, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RD27
  MOV.L        RD27, bottomstep
// r_segs.c:888   bottomfrac = (centeryfrac>>4) - FixedMul (worldbottom, rw_scale);
  MOV.L        centeryfrac, RD27
  SHAR         RD27, 4, RQ9
  MOV.L        worldbottom, RD10
  MOV.L        rw_scale, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  SUBS.L       RQ9, RQ8, RD27
  MOV.L        RD27, bottomfrac
// r_segs.c:890   if (backsector)
  MOV.Q        backsector, RQ27
  BREQ.Q       R0, RQ27, .L00802789
// r_segs.c:891   {	
  MOV.L        worldhigh, RD27
  SHAR         RD27, 4, RD27
// r_segs.c:893   worldlow >>= 4;
  MOV.L        worldlow, RD26
  SHAR         RD26, 4, RD26
  MOV.L        RD26, worldlow
  MOV.L        RD27, worldhigh
  MOV.L        worldtop, RD26
  BRGE.L       RD26, RD27, .L0080278A
// r_segs.c:896   {
  MOV.L        centeryfrac, RD27
  SHAR         RD27, 4, RQ23
  MOV.L        worldhigh, RD10
  MOV.L        rw_scale, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ23, RQ18, RD27
  MOV.L        RD27, pixhigh
// r_segs.c:898   pixhighstep = -FixedMul (rw_scalestep,worldhigh);
  MOV.L        rw_scalestep, RD10
  MOV.L        worldhigh, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  SUBS.L       R0, RQ9, RD27
  MOV.L        RD27, pixhighstep

.L0080278A:
  MOV.L        worldlow, RD27
  MOV.L        worldbottom, RD26
  BRLE.L       RD26, RD27, .L0080278B
// r_segs.c:902   {
  MOV.L        centeryfrac, RD27
  SHAR         RD27, 4, RQ8
  MOV.L        worldlow, RD10
  MOV.L        rw_scale, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ23
  SUBS.L       RQ8, RQ23, RD27
  MOV.L        RD27, pixlow
// r_segs.c:904   pixlowstep = -FixedMul (rw_scalestep,worldlow);
  MOV.L        rw_scalestep, RD10
  MOV.L        worldlow, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RD27
  MOV.L        RD27, pixlowstep

.L0080278B:

.L00802789:
// r_segs.c:910   if (markceiling)
  MOV.L        markceiling, RD27
  BREQ.L       R0, RD27, .L0080278C
// r_segs.c:911   ceilingplane = R_CheckPlane (ceilingplane, rw_x, rw_stopx-1);
  MOV.L        rw_stopx, RD27
  ADDS.L       RD27, -1, RQ9
  MOV.Q        ceilingplane, RQ10
  MOV.L        rw_x, RD11
  ADDS.L       RQ9, 0, RD12
  BSR          R_CheckPlane, R1
  MOV.Q        RQ10, ceilingplane

.L0080278C:
// r_segs.c:913   if (markfloor)
  MOV.L        markfloor, RD27
  BREQ.L       R0, RD27, .L0080278D
// r_segs.c:914   floorplane = R_CheckPlane (floorplane, rw_x, rw_stopx-1);
  MOV.L        rw_stopx, RD27
  ADDS.L       RD27, -1, RQ8
  MOV.Q        floorplane, RQ10
  MOV.L        rw_x, RD11
  ADDS.L       RQ8, 0, RD12
  BSR          R_CheckPlane, R1
  MOV.Q        RQ10, floorplane

.L0080278D:
// r_segs.c:917   R_RenderSegLoop ();
  BSR          R_RenderSegLoop, R1
// r_segs.c:920   if (lastopening - openings > MAXOPENINGS)
  MOV.Q        lastopening, RQ27
  MOV          openings, RQ26
  SUB          RQ27, RQ26, RQ21
  SHAR.Q       RQ21, 1, RQ21
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ21, .L0080278E
// r_segs.c:921   { __debugbreak(); }

R_StoreWallRange.debugbreak_L065D:
  BRK          1629

.L0080278E:
// r_segs.c:924   if(!r_ispolyobj)
  MOVU.B       r_ispolyobj, RD27
  BRNE.L       R0, RD27, .L0080278F
  LUI          5, RD27
  BRLE.L       RD27, RD22, .L00802790
// r_segs.c:928   { __debugbreak(); }

R_StoreWallRange.debugbreak_L065E:
  BRK          1630

.L00802790:
// r_segs.c:930   lightnum = lastopening - openings;
  MOV.Q        lastopening, RQ27
  MOV          openings, RQ26
  SUB          RQ27, RQ26, RQ21
  SHAR.Q       RQ21, 1, RQ21
  ADDS.L       RQ21, 0, RD20
  BRGE.L       RD22, RD20, .L00802791
// r_segs.c:932   {
  SUBS.L       RD22, RD20, RQ18
  MOV.Q        lastopening, RQ27
  LEA.W        RQ27, RQ18, RQ27
  MOV          openings, RQ26
  SUB          RQ27, RQ26, RQ21
  SHAR.Q       RQ21, 1, RQ21
  MOV.Q        RQ27, lastopening
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ21, .L00802792
// r_segs.c:935   { __debugbreak(); }

R_StoreWallRange.debugbreak_L065F:
  BRK          1631

.L00802792:

.L00802791:
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  ADD          R0, 2, RD27
  BTSTN.L      RD27, RQ18, .L00802795
  MOV.L        maskedtexture, RD27
  BRNE.L       R0, RD27, .L00802795
  BSR          .L00802793, R0

.L00802795:
  MOV.Q        ds_p, RQ27
  MOV.Q        (RQ27, 56), RQ26
  BRNE.Q       R0, RQ26, .L00802793

.L00802794:
// r_segs.c:943   memcpy (lastopening, ceilingclip+start, 2*(rw_stopx-start));
  MOV.L        rw_stopx, RD27
  SUBS.L       RD27, RD22, RQ18
  SHAD.L       RQ18, 1, RQ9
  MOV          ceilingclip, RQ27
  LEA.W        RQ27, RD22, RQ26
  ADDS.L       RQ9, 0, RQ21
  MOV.Q        lastopening, RQ10
  ADD          RQ26, 0, RQ11
  ADD          RQ21, 0, RQ12
  BSR          memcpy, R1
// r_segs.c:944   ds_p->sprtopclip = lastopening - start;
  SUBS.L       R0, RD22, RQ18
  MOV.Q        lastopening, RQ27
  LEA.W        RQ27, RQ18, RQ26
  MOV.Q        ds_p, RQ25
  MOV.Q        RQ26, (RQ25, 56)
// r_segs.c:945   lastopening += rw_stopx - start;
  MOV.L        rw_stopx, RD25
  SUBS.L       RD25, RD22, RQ18
  LEA.W        RQ27, RQ18, RQ27
  MOV          openings, RQ25
  SUB          RQ27, RQ25, RQ21
  SHAR.Q       RQ21, 1, RQ21
  MOV.Q        RQ27, lastopening
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ21, .L00802797
// r_segs.c:948   { __debugbreak(); }

R_StoreWallRange.debugbreak_L0660:
  BRK          1632

.L00802797:

.L00802793:
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  ADD          R0, 1, RD27
  BTSTN.L      RD27, RQ18, .L0080279A
  MOV.L        maskedtexture, RD27
  BRNE.L       R0, RD27, .L0080279A
  BSR          .L00802798, R0

.L0080279A:
  MOV.Q        ds_p, RQ27
  MOV.Q        (RQ27, 64), RQ26
  BRNE.Q       R0, RQ26, .L00802798

.L00802799:
// r_segs.c:953   {
  MOV.L        rw_stopx, RD27
  SUBS.L       RD27, RD22, RQ18
  SHAD.L       RQ18, 1, RQ8
  MOV          floorclip, RQ27
  LEA.W        RQ27, RD22, RQ26
  ADDS.L       RQ8, 0, RQ21
  MOV.Q        lastopening, RQ10
  ADD          RQ26, 0, RQ11
  ADD          RQ21, 0, RQ12
  BSR          memcpy, R1
// r_segs.c:955   ds_p->sprbottomclip = lastopening - start;
  SUBS.L       R0, RD22, RQ18
  MOV.Q        lastopening, RQ27
  LEA.W        RQ27, RQ18, RQ26
  MOV.Q        ds_p, RQ25
  MOV.Q        RQ26, (RQ25, 64)
// r_segs.c:956   lastopening += rw_stopx - start;	
  MOV.L        rw_stopx, RD25
  SUBS.L       RD25, RD22, RQ18
  LEA.W        RQ27, RQ18, RQ27
  MOV          openings, RQ25
  SUB          RQ27, RQ25, RQ21
  SHAR.Q       RQ21, 1, RQ21
  MOV.Q        RQ27, lastopening
  LUI          5, RQ27
  BRLE.Q       RQ27, RQ21, .L0080279C
// r_segs.c:959   { __debugbreak(); }

R_StoreWallRange.debugbreak_L0661:
  BRK          1633

.L0080279C:

.L00802798:
  MOV.L        maskedtexture, RD27
  BREQ.L       R0, RD27, .L0080279D
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  ADD          R0, 2, RD27
  BTSTN.L      RD27, RQ18, .L0080279D

.L0080279E:
// r_segs.c:963   {
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ23
  OR           RQ23, 2, RQ18
  MOV.L        RQ18, (RQ27, 40)
// r_segs.c:965   ds_p->tsilheight = MININT;
  LUI          0xFFFFFFFFFFF80000, RD26
  MOV.L        RD26, (RQ27, 48)

.L0080279D:
  MOV.L        maskedtexture, RD27
  BREQ.L       R0, RD27, .L008027A0
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ23
  ADD          R0, 1, RD27
  BTSTN.L      RD27, RQ23, .L008027A0

.L008027A1:
// r_segs.c:968   {
  MOV.Q        ds_p, RQ27
  MOV.L        (RQ27, 40), RQ18
  OR           RQ18, 1, RQ23
  MOV.L        RQ23, (RQ27, 40)
// r_segs.c:970   ds_p->bsilheight = MAXINT;
  ADD          R0, 0x7FFFFFFF, RD26
  MOV.L        RD26, (RQ27, 44)

.L008027A0:
// r_segs.c:971   }
  MOV.Q        ds_p, RQ27
  ADD          RQ27, 80, RQ27
  MOV.Q        RQ27, ds_p

.L0080278F:

.L00C03092:
  ADD          R2, 352, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

P_AcsDoSpecialCmd:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -392, R2
  ADD          RD10, 0, RD23
  ADDS.L       RD11, 0, RD9
  MOV.L        RD12, (R2, 164)
  ADD          RD13, 0, RD22
  MOV.L        RD14, (R2, 156)
  MOV.L        RD15, (R2, 152)
// p_acspec.c:153   ld=fakelines;
  MOV.Q        fakelines, RQ18
// p_acspec.c:154   ld->sidenum[0]=-1;
  ADD          RQ18, 36, RQ27
  ADD          R0, -1, RD13
  MOV.W        RD13, (RQ27, 0)
// p_acspec.c:155   ld->sidenum[1]=-1;
  MOV.W        RD13, (RQ27, 2)
// p_acspec.c:157   ld->acs_spec=sp;
  MOVU.B       RD23, (RQ18, 30)
// p_acspec.c:158   ld->arg1=arg1;
  MOVU.B       RD9, (RQ18, 31)
// p_acspec.c:159   ld->arg2=arg2;
  MOV.L        (R2, 164), RD12
  MOVU.B       RD12, (RQ18, 32)
// p_acspec.c:160   ld->arg3=arg3;
  MOVU.B       RD22, (RQ18, 33)
// p_acspec.c:161   ld->arg4=arg4;
  MOV.L        (R2, 156), RD11
  MOVU.B       RD11, (RQ18, 34)
// p_acspec.c:162   ld->arg5=arg5;
  MOV.L        (R2, 152), RD10
  MOVU.B       RD10, (RQ18, 35)
// p_acspec.c:164   switch(sp)
  ADD          RD23, 0, RQ20
  AND          RQ20, RD13, RQ20
  BRGE.L       61, RQ20, .L008018DB
  AND          RD23, -1, RQ20
  ADD          RQ20, -10, RQ10
  ADD          R0, 51, RQ6
  BRGTU.Q      RQ6, RQ10, .L008018DA
  LEA.B        .L00C80020, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80020:
  BSR          .L008018A3, R0
  BSR          .L008018A4, R0
  BSR          .L008018A5, R0
  BSR          .L008018A6, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018A7, R0
  BSR          .L008018A8, R0
  BSR          .L008018A9, R0
  BSR          .L008018AA, R0
  BSR          .L008018AB, R0
  BSR          .L008018AC, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018AD, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018AE, R0
  BSR          .L008018AF, R0
  BSR          .L008018B0, R0
  BSR          .L008018B1, R0
  BSR          .L008018B2, R0
  BSR          .L008018B3, R0
  BSR          .L008018B4, R0
  BSR          .L008018B5, R0
  BSR          .L008018B6, R0
  BSR          .L008018B7, R0
  BSR          .L008018B8, R0
  BSR          .L008018B9, R0
  BSR          .L008018BA, R0
  BSR          .L008018BB, R0
  BSR          .L008018BC, R0
  BSR          .L008018BD, R0
  BSR          .L008018BE, R0
  BSR          .L008018BF, R0
  BSR          .L008018C0, R0
  BSR          .L008018C1, R0
  BSR          .L008018C2, R0
  BSR          .L008018C3, R0
  BSR          .L008018C4, R0
  BSR          .L008018C5, R0
  BSR          .L008018C6, R0
  BSR          .L008018C7, R0
  BSR          .L008018C8, R0
  BSR          .L008018C9, R0
  BSR          .L008018DA, R0

.L008018DB:
  AND          RD23, -1, RQ27
  BRGE.L       74, RQ27, .L008018DC
  AND          RD23, -1, RQ27
  ADD          RQ27, -61, RQ10
  ADD          R0, 11, RQ6
  BRGTU.Q      RQ6, RQ10, .L008018DA
  LEA.B        .L00C80021, RQ6
  SHAD.L       RQ10, 2, RQ10
  ADD          RQ10, RQ6, RQ10
  JSR          RQ10, 0, R0

.L00C80021:
  BSR          .L008018CA, R0
  BSR          .L008018CB, R0
  BSR          .L008018CC, R0
  BSR          .L008018DA, R0
  BSR          .L008018CD, R0
  BSR          .L008018CE, R0
  BSR          .L008018CF, R0
  BSR          .L008018DA, R0
  BSR          .L008018DA, R0
  BSR          .L008018D0, R0
  BSR          .L008018D1, R0
  BSR          .L008018DA, R0

.L008018DC:
  AND          RD23, -1, RQ8
  BRGE.L       130, RQ8, .L008018DD
  BREQ.Q       74, RD23, .L008018D2
  BREQ.Q       80, RD23, .L008018D3
  BREQ.Q       94, RD23, .L008018D4
  BREQ.Q       121, RD23, .L008018D5
  BSR          .L008018DA, R0

.L008018DD:
  BREQ.Q       130, RD23, .L008018D6
  BREQ.Q       131, RD23, .L008018D7
  BREQ.Q       132, RD23, .L008018D8
  BREQ.Q       133, RD23, .L008018D9
  BSR          .L008018DA, R0

.L008018A3:
// p_acspec.c:166   case 10: /* Door_Close */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:168   ld->special = 50;
  ADD          R0, 50, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:169   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:170   break;
  BSR          .L008018A2, R0

.L008018A4:
// p_acspec.c:171   case 11: /* Door_Open */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:175   ld->special = 103;
  ADD          R0, 103, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:176   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:177   break;
  BSR          .L008018A2, R0

.L008018A5:
// p_acspec.c:178   case 12: /* Door_Raise */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:182   ld->special = 103;
  ADD          R0, 103, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:183   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:184   break;
  BSR          .L008018A2, R0

.L008018A6:
// p_acspec.c:185   case 13: /* Door_LockedRaise */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:189   ld->special = 103;
  ADD          R0, 103, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:190   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:191   break;
  BSR          .L008018A2, R0

.L008018A7:
// p_acspec.c:193   case 20:	/* Floor_LowerByValue */
  SUBS.L       R0, RD22, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:195   break;
  BSR          .L008018A2, R0

.L008018A8:
// p_acspec.c:196   case 21: /* Floor_LowerToLowest */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:198   ld->special = 38;
  ADD          R0, 38, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:199   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:200   break;
  BSR          .L008018A2, R0

.L008018A9:
// p_acspec.c:201   case 22: /* Floor_LowerToNearest */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:203   ld->special = 19;
  ADD          R0, 19, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:204   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:205   break;
  BSR          .L008018A2, R0

.L008018AA:
// p_acspec.c:206   case 23:	/* Floor_RaiseByValue */
  ADDS.L       RD9, 0, RD10
  ADD          RD22, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:208   break;
  BSR          .L008018A2, R0

.L008018AB:
// p_acspec.c:209   case 24: /* Floor_RaiseToHighest */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:211   ld->special = 94;
  ADD          R0, 94, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:212   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:213   break;
  BSR          .L008018A2, R0

.L008018AC:
// p_acspec.c:214   case 25: /* Floor_RaiseToNearest */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:216   ld->special = 119;
  ADD          R0, 119, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:217   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:218   break;
  BSR          .L008018A2, R0

.L008018AD:
// p_acspec.c:220   case 28: /* Floor_RaiseAndCrush */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:223   ld->special = 55;
  ADD          R0, 55, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:224   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:225   break;
  BSR          .L008018A2, R0

.L008018AE:

.L008018AF:
// p_acspec.c:228   case 34: /* ClearForceField, ZDoom */
  BSR          .L008018A2, R0

.L008018B0:
// p_acspec.c:230   case 35:	/* Floor_RaiseByValueTimes8 */
  SHAD.L       RD22, 3, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:232   break;
  BSR          .L008018A2, R0

.L008018B1:
// p_acspec.c:233   case 36:	/* Floor_LowerByValueTimes8 */
  SUBS.L       R0, RD22, RQ8
  SHAD.L       RQ8, 3, RQ21
  ADDS.L       RD9, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:235   break;
  BSR          .L008018A2, R0

.L008018B2:

.L008018B3:

.L008018B4:
// p_acspec.c:238   case 39: /* Teleport_ZombieChanger, ZDoom */
  BSR          .L008018A2, R0

.L008018B5:
// p_acspec.c:240   case 40:	/* Ceiling_LowerByValue */
  SUBS.L       R0, RD22, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AcsAdjustSectorCeilForTag, R1
// p_acspec.c:242   break;
  BSR          .L008018A2, R0

.L008018B6:
// p_acspec.c:243   case 41:	/* Ceiling_RaiseByValue */
  ADDS.L       RD9, 0, RD10
  ADD          RD22, 0, RD11
  BSR          P_AcsAdjustSectorCeilForTag, R1
// p_acspec.c:245   break;
  BSR          .L008018A2, R0

.L008018B7:
// p_acspec.c:246   case 42: /* Ceiling_CrushAndRaise */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:248   ld->special = 141;
  ADD          R0, 141, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:249   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:250   break;
  BSR          .L008018A2, R0

.L008018B8:
// p_acspec.c:251   case 43: /* Ceiling_LowerAndCrush */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:253   ld->special = 44;
  ADD          R0, 44, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:254   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:255   break;
  BSR          .L008018A2, R0

.L008018B9:
// p_acspec.c:256   case 44: /* Ceiling_CrushStop */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:258   ld->special = 57;
  ADD          R0, 57, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:259   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:260   break;
  BSR          .L008018A2, R0

.L008018BA:
// p_acspec.c:261   case 45: /* Ceiling_CrushRaiseAndStay */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:263   ld->special = 73;
  ADD          R0, 73, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:264   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:265   break;
  BSR          .L008018A2, R0

.L008018BB:
// p_acspec.c:266   case 46: /* Floor_CrushStop */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:268   ld->special = 54;
  ADD          R0, 54, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:269   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:270   break;
  BSR          .L008018A2, R0

.L008018BC:

.L008018BD:

.L008018BE:

.L008018BF:

.L008018C0:

.L008018C1:

.L008018C2:

.L008018C3:

.L008018C4:

.L008018C5:

.L008018C6:

.L008018C7:

.L008018C8:
// p_acspec.c:284   case 59: /* Polyobj_OR_MoveToSpot, ZDoom */
  BSR          .L008018A2, R0

.L008018C9:
// p_acspec.c:287   case 60: /* Plat_PerpetualRaise */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:289   ld->special = 18;
  ADD          R0, 18, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:290   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:291   break;
  BSR          .L008018A2, R0

.L008018CA:
// p_acspec.c:292   case 61: /* Plat_Stop */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:294   ld->special = 54;
  ADD          R0, 54, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:295   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:296   break;
  BSR          .L008018A2, R0

.L008018CB:
// p_acspec.c:297   case 62: /* Plat_DownWaitUpStay */
  MOV.W        RD9, (RQ18, 28)
// p_acspec.c:299   ld->special = 21;
  ADD          R0, 21, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:300   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:301   break;
  BSR          .L008018A2, R0

.L008018CC:
// p_acspec.c:302   case 63:	/* Plat_LowerByValue */
  SUBS.L       R0, RD22, RQ21
  SHAD.L       RQ21, 3, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:304   break;
  BSR          .L008018A2, R0

.L008018CD:
// p_acspec.c:312   case 65:	/* Plat_UpByValue */
  SHAD.L       RD22, 3, RQ21
  ADDS.L       RD9, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:314   break;
  BSR          .L008018A2, R0

.L008018CE:
// p_acspec.c:315   case 66:	/* Floor_LowerInstant */
  SUBS.L       R0, RD22, RQ8
  SHAD.L       RQ8, 3, RQ21
  ADDS.L       RD9, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:317   break;
  BSR          .L008018A2, R0

.L008018CF:
// p_acspec.c:318   case 67:	/* Floor_RaiseInstant */
  SHAD.L       RD22, 3, RQ8
  ADDS.L       RD9, 0, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:320   break;
  BSR          .L008018A2, R0

.L008018D0:

.L008018D1:
// p_acspec.c:326   break;
  BSR          .L008018A2, R0

.L008018D2:
// p_acspec.c:328   case 74: /* Teleport_NewMap */
  ADD          R0, 11, RD27
  MOV.W        RD27, (RQ18, 26)
// p_acspec.c:330   P_UseSpecialLine (NULL, ld, 0);
  ADD          RQ0, 0, RQ10
  ADD          RQ18, 0, RQ11
  ADD          R0, 0, RD12
  BSR          P_UseSpecialLine, R1
// p_acspec.c:331   break;
  BSR          .L008018A2, R0

.L008018D3:
// p_acspec.c:333   case 80:	/* ACS_Execute */
  ADDS.L       RD9, 0, RD10
  MOV.L        (R2, 164), RD11
  ADD          RD22, 0, RD12
  MOV.L        (R2, 156), RD13
  MOV.L        (R2, 152), RD14
  BSR          P_AcsRunScript, R1
// p_acspec.c:335   break;
  BSR          .L008018A2, R0

.L008018D4:
// p_acspec.c:337   case 94:	/* Floor_RaiseByValue */
  ADDS.L       RD9, 0, RD10
  ADD          RD22, 0, RD11
  BSR          P_AcsAdjustSectorFloorForTag, R1
// p_acspec.c:339   P_AcsAdjustSectorCeilForTag(arg1, -arg3);
  SUBS.L       R0, RD22, RQ21
  ADDS.L       RD9, 0, RD10
  ADD          RQ21, 0, RD11
  BSR          P_AcsAdjustSectorCeilForTag, R1
// p_acspec.c:340   break;
  BSR          .L008018A2, R0

.L008018D5:
// p_acspec.c:344   break;
  BSR          .L008018A2, R0

.L008018D6:
// p_acspec.c:346   case 130:
  ADDS.L       RD9, 0, RD10
  BSR          P_AcsThingActivate, R1
// p_acspec.c:348   break;
  BSR          .L008018A2, R0

.L008018D7:
// p_acspec.c:349   case 131:
  ADDS.L       RD9, 0, RD10
  BSR          P_AcsThingDeactivate, R1
// p_acspec.c:351   break;
  BSR          .L008018A2, R0

.L008018D8:
// p_acspec.c:352   case 132:
  ADDS.L       RD9, 0, RD10
  BSR          P_AcsThingRemove, R1
// p_acspec.c:354   break;
  BSR          .L008018A2, R0

.L008018D9:
// p_acspec.c:355   case 133:
  ADDS.L       RD9, 0, RD10
  MOV.L        (R2, 164), RD11
  BSR          P_AcsThingDestroy, R1
// p_acspec.c:357   break;
  BSR          .L008018A2, R0

.L008018DA:
// p_acspec.c:359   default:
  MOV          .L00C030A2, RQ10
  ADD          RD23, 0, RD11
  ADDS.L       RD9, 0, RD12
  MOV.L        (R2, 164), RD13
  ADD          RD22, 0, RD14
  MOV.L        (R2, 156), RD15
  MOV.L        (R2, 152), RD16
  BSR          printf, R1
// p_acspec.c:363   break;

.L008018A2:

.L00C030A1:
  ADD          R2, 392, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

IdentifyVersion:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -360, R2
// d_main.c:715   doomwaddir = ".";
  MOV          .L00C00FE6, RQ23
// d_main.c:718   doom2wad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ21
// d_main.c:719   sprintf(doom2wad, "%s/doom2lz.wad", doomwaddir);
  ADD          RQ21, 0, RQ10
  MOV          .L00C030A9, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:720   if ( w_chkaccess (doom2wad)<0)
  ADD          RQ21, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRGE.L       R0, RQ8, .L008013B6
// d_main.c:721   {
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ21
// d_main.c:723   sprintf(doom2wad, "%s/doom2.wad", doomwaddir);
  ADD          RQ21, 0, RQ10
  MOV          .L00C030AA, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1

.L008013B6:
// d_main.c:727   doomuwad = malloc(strlen(doomwaddir)+1+12+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 12, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ20
// d_main.c:728   sprintf(doomuwad, "%s/doomulz.wad", doomwaddir);
  ADD          RQ20, 0, RQ10
  MOV          .L00C030AB, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:729   if ( w_chkaccess (doomuwad)<0)
  ADD          RQ20, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRGE.L       R0, RQ8, .L008013B7
// d_main.c:730   {
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ20
// d_main.c:732   sprintf(doomuwad, "%s/doomu.wad", doomwaddir);
  ADD          RQ20, 0, RQ10
  MOV          .L00C030AC, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1

.L008013B7:
// d_main.c:736   doomwad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 136)
// d_main.c:737   sprintf(doomwad, "%s/doomlz.wad", doomwaddir);
  MOV.Q        (R2, 136), RQ10
  MOV          .L00C030AD, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:738   if ( w_chkaccess (doomwad)<0)
  MOV.Q        (R2, 136), RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRGE.L       R0, RQ8, .L008013B8
// d_main.c:739   {
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 136)
// d_main.c:741   sprintf(doomwad, "%s/doom.wad", doomwaddir);
  MOV.Q        (R2, 136), RQ10
  MOV          .L00C030AE, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1

.L008013B8:
// d_main.c:745   doom1wad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ22
// d_main.c:746   sprintf(doom1wad, "%s/doom1lz.wad", doomwaddir);
  ADD          RQ22, 0, RQ10
  MOV          .L00C030AF, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:747   if ( w_chkaccess (doom1wad)<0)
  ADD          RQ22, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRGE.L       R0, RQ8, .L008013B9
// d_main.c:748   {
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ22
// d_main.c:750   sprintf(doom1wad, "%s/doom1.wad", doomwaddir);
  ADD          RQ22, 0, RQ10
  MOV          .L00C030B0, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1

.L008013B9:
// d_main.c:755   plutoniawad = malloc(strlen(doomwaddir)+1+/*9*/12+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 12, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 120)
// d_main.c:756   sprintf(plutoniawad, "%s/plutonia.wad", doomwaddir);
  MOV.Q        (R2, 120), RQ10
  MOV          .L00C030B1, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:758   tntwad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 112)
// d_main.c:759   sprintf(tntwad, "%s/tnt.wad", doomwaddir);
  MOV.Q        (R2, 112), RQ10
  MOV          .L00C030B2, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:763   doom2fwad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 128)
// d_main.c:764   sprintf(doom2fwad, "%s/doom2f.wad", doomwaddir);
  MOV.Q        (R2, 128), RQ10
  MOV          .L00C030B3, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:766   htic1wad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 104)
// d_main.c:767   sprintf(htic1wad, "%s/heretic1.wad", doomwaddir);
  MOV.Q        (R2, 104), RQ10
  MOV          .L00C030B4, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:769   hex1wad = malloc(strlen(doomwaddir)+1+13+1);
  ADD          RQ23, 0, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 13, RQ18
  ADD          RQ18, 1, RQ9
  ADD          RQ9, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 96)
// d_main.c:770   sprintf(hex1wad, "%s/hexen.wad", doomwaddir);
  MOV.Q        (R2, 96), RQ10
  MOV          .L00C030B5, RQ11
  ADD          RQ23, 0, RQ12
  BSR          sprintf, R1
// d_main.c:778   sprintf(basedefault, "./default.cfg");
  MOV          basedefault, RQ10
  MOV          .L00C030B6, RQ11
  BSR          sprintf, R1
// d_main.c:781   if (M_CheckParm ("-shdev"))
  MOV          .L00C030B7, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L008013BA
// d_main.c:782   {
  MOV.L        RD0, gamemode
// d_main.c:784   devparm = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, devparm
// d_main.c:785   D_AddFile (DEVDATA"doom1.wad");
  MOV          .L00C030B8, RQ10
  BSR          D_AddFile, R1
// d_main.c:786   D_AddFile (DEVMAPS"data_se/texture1.lmp");
  MOV          .L00C030B9, RQ10
  BSR          D_AddFile, R1
// d_main.c:787   D_AddFile (DEVMAPS"data_se/pnames.lmp");
  MOV          .L00C030BA, RQ10
  BSR          D_AddFile, R1
// d_main.c:788   strcpy (basedefault,DEVDATA"default.cfg");
  MOV          basedefault, RQ10
  MOV          .L00C030BB, RQ11
  BSR          strcpy, R1
// d_main.c:789   return;
  BSR          .L00C030A8, R0

.L008013BA:
// d_main.c:792   if (M_CheckParm ("-regdev"))
  MOV          .L00C030BC, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L008013BB
// d_main.c:793   {
  ADD          R0, 1, RD27
  MOV.L        RD27, gamemode
// d_main.c:795   devparm = true;
  MOV.L        RD27, devparm
// d_main.c:796   D_AddFile (DEVDATA"doom.wad");
  MOV          .L00C030BD, RQ10
  BSR          D_AddFile, R1
// d_main.c:797   D_AddFile (DEVMAPS"data_se/texture1.lmp");
  MOV          .L00C030B9, RQ10
  BSR          D_AddFile, R1
// d_main.c:798   D_AddFile (DEVMAPS"data_se/texture2.lmp");
  MOV          .L00C030BE, RQ10
  BSR          D_AddFile, R1
// d_main.c:799   D_AddFile (DEVMAPS"data_se/pnames.lmp");
  MOV          .L00C030BA, RQ10
  BSR          D_AddFile, R1
// d_main.c:800   strcpy (basedefault,DEVDATA"default.cfg");
  MOV          basedefault, RQ10
  MOV          .L00C030BB, RQ11
  BSR          strcpy, R1
// d_main.c:801   return;
  BSR          .L00C030A8, R0

.L008013BB:
// d_main.c:804   if (M_CheckParm ("-comdev"))
  MOV          .L00C030BF, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L008013BC
// d_main.c:805   {
  ADD          R0, 2, RD27
  MOV.L        RD27, gamemode
// d_main.c:807   devparm = true;
  ADD          R0, 1, RD27
  MOV.L        RD27, devparm
// d_main.c:814   D_AddFile (DEVDATA"doom2.wad");
  MOV          .L00C030C0, RQ10
  BSR          D_AddFile, R1
// d_main.c:816   D_AddFile (DEVMAPS"cdata/texture1.lmp");
  MOV          .L00C030C1, RQ10
  BSR          D_AddFile, R1
// d_main.c:817   D_AddFile (DEVMAPS"cdata/pnames.lmp");
  MOV          .L00C030C2, RQ10
  BSR          D_AddFile, R1
// d_main.c:818   strcpy (basedefault,DEVDATA"default.cfg");
  MOV          basedefault, RQ10
  MOV          .L00C030BB, RQ11
  BSR          strcpy, R1
// d_main.c:819   return;
  BSR          .L00C030A8, R0

.L008013BC:
// d_main.c:822   if ( !w_chkaccess (htic1wad) )
  MOV.Q        (R2, 104), RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013BD
// d_main.c:823   {
  ADD          R0, 4, RD27
  MOV.L        RD27, gamemode
// d_main.c:825   D_AddFile (doom1wad);
  ADD          RQ22, 0, RQ10
  BSR          D_AddFile, R1
// d_main.c:826   D_AddFile (htic1wad);
  MOV.Q        (R2, 104), RQ10
  BSR          D_AddFile, R1
// d_main.c:827   return;
  BSR          .L00C030A8, R0

.L008013BD:
// d_main.c:841   if ( !w_chkaccess (doom2fwad) )
  MOV.Q        (R2, 128), RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013BE
// d_main.c:842   {
  ADD          R0, 2, RD27
  MOV.L        RD27, gamemode
// d_main.c:846   language = french;
  ADD          R0, 1, RD27
  MOV.L        RD27, language
// d_main.c:847   printf("French version\n");
  MOV          .L00C030C3, RQ10
  BSR          printf, R1
// d_main.c:848   D_AddFile (doom2fwad);
  MOV.Q        (R2, 128), RQ10
  BSR          D_AddFile, R1
// d_main.c:849   return;
  BSR          .L00C030A8, R0

.L008013BE:
// d_main.c:853   if ( !w_chkaccess (doom2wad) )
  ADD          RQ21, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013BF
// d_main.c:854   {
  ADD          R0, 2, RD27
  MOV.L        RD27, gamemode
// d_main.c:856   D_AddFile (doom2wad);
  ADD          RQ21, 0, RQ10
  BSR          D_AddFile, R1
// d_main.c:857   return;
  BSR          .L00C030A8, R0

.L008013BF:
// d_main.c:877   if ( !w_chkaccess (doomuwad) )
  ADD          RQ20, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013C0
// d_main.c:878   {
  ADD          R0, 3, RD27
  MOV.L        RD27, gamemode
// d_main.c:880   D_AddFile (doomuwad);
  ADD          RQ20, 0, RQ10
  BSR          D_AddFile, R1
// d_main.c:881   return;
  BSR          .L00C030A8, R0

.L008013C0:
// d_main.c:885   if ( !w_chkaccess (doomwad) )
  MOV.Q        (R2, 136), RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013C1
// d_main.c:886   {
  ADD          R0, 1, RD27
  MOV.L        RD27, gamemode
// d_main.c:888   D_AddFile (doomwad);
  MOV.Q        (R2, 136), RQ10
  BSR          D_AddFile, R1
// d_main.c:889   return;
  BSR          .L00C030A8, R0

.L008013C1:
// d_main.c:893   if ( !w_chkaccess (doom1wad) )
  ADD          RQ22, 0, RQ10
  BSR          w_chkaccess, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L008013C2
// d_main.c:894   {
  MOV.L        RD0, gamemode
// d_main.c:896   D_AddFile (doom1wad);
  ADD          RQ22, 0, RQ10
  BSR          D_AddFile, R1
// d_main.c:897   return;
  BSR          .L00C030A8, R0

.L008013C2:
// d_main.c:900   printf("Game mode indeterminate.\n");
  MOV          .L00C030C4, RQ10
  BSR          printf, R1
// d_main.c:901   gamemode = indetermined;
  ADD          R0, 6, RD27
  MOV.L        RD27, gamemode

.L00C030A8:
  ADD          R2, 360, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0

R_PolyObjGetBox:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -376, R2
  MOV.Q        RQ10, (R2, 184)
  MOV.Q        RQ11, (R2, 176)
  MOV.Q        RQ12, (R2, 168)
  MOV.Q        RQ13, (R2, 160)
  MOV.Q        RQ14, (R2, 152)
// r_polyobj.c:218   tid = thing->spawnpoint.angle;
  MOV.Q        (R2, 184), RQ27
  ADD          RQ27, 204, RQ26
  MOV.W        (RQ26, 8), RD25
  MOV.L        RD25, (R2, 116)
// r_polyobj.c:219   pobj = EV_FindPolyObjForId(tid);
  ADD          RD25, 0, RD10
  BSR          EV_FindPolyObjForId, R1
  ADD          RQ10, 0, RQ24
// r_polyobj.c:220   if(!pobj)
  MOV.Q        RQ24, (R2, 144)
  BRNE.Q       R0, RQ24, .L00802707
// r_polyobj.c:221   {
  MOV.Q        (R2, 176), RQ27
  MOV.L        RD0, (RQ27, 0)
// r_polyobj.c:223   *ry1=0;
  MOV.Q        (R2, 168), RQ26
  MOV.L        RD0, (RQ26, 0)
// r_polyobj.c:224   *rx2=0;
  MOV.Q        (R2, 160), RQ25
  MOV.L        RD0, (RQ25, 0)
// r_polyobj.c:225   *ry2=0;
  MOV.Q        (R2, 152), RQ24
  MOV.L        RD0, (RQ24, 0)
// r_polyobj.c:226   return(false);
  ADD          R0, 0, RD10
  BSR          .L00C030CA, R0

.L00802707:
// r_polyobj.c:229   poi = R_GetPolyObjInfoForId(tid);
  MOV.L        (R2, 116), RD10
  BSR          R_GetPolyObjInfoForId, R1
  ADD          RQ10, 0, RQ27
// r_polyobj.c:231   if(poi->bb_x1 || poi->bb_y2)
  MOV.L        (RQ27, 2056), RQ18
  MOV.Q        RQ27, (R2, 136)
  BRNE.L       R0, RQ18, .L00802709
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 2068), RQ18
  BRNE.L       R0, RQ18, .L00802709
  BSR          .L00802708, R0

.L00802709:
// r_polyobj.c:232   {
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 2056), RQ18
  MOV.Q        (R2, 176), RQ26
  MOV.L        RQ18, (RQ26, 0)
// r_polyobj.c:234   *ry1=poi->bb_y1;
  MOV.L        (RQ27, 2060), RQ18
  MOV.Q        (R2, 168), RQ25
  MOV.L        RQ18, (RQ25, 0)
// r_polyobj.c:235   *rx2=poi->bb_x2;
  MOV.L        (RQ27, 2064), RQ18
  MOV.Q        (R2, 160), RQ24
  MOV.L        RQ18, (RQ24, 0)
// r_polyobj.c:236   *ry2=poi->bb_y2;
  MOV.L        (RQ27, 2068), RQ18
  MOV.Q        (R2, 152), RQ19
  MOV.L        RQ18, (RQ19, 0)
// r_polyobj.c:237   return(true);
  ADD          R0, 1, RD10
  BSR          .L00C030CA, R0

.L00802708:
// r_polyobj.c:240   dx = thing->x - pobj->x;
  MOV.Q        (R2, 184), RQ27
  MOV.L        (RQ27, 24), RQ18
  MOV.Q        (R2, 144), RQ26
  MOV.L        (RQ26, 24), RQ25
  SUBS.L       RQ18, RQ25, RD24
  MOV.L        RD24, (R2, 112)
// r_polyobj.c:241   dy = thing->y - pobj->y;
  MOV.L        (RQ27, 28), RQ18
  MOV.L        (RQ26, 28), RQ25
  SUBS.L       RQ18, RQ25, RD19
  MOV.L        RD19, (R2, 108)
// r_polyobj.c:243   x1=MAXINT;		y1=MAXINT;
  ADD          R0, 0x7FFFFFFF, RD13
  ADDS.L       RD13, 0, RD9
  ADDS.L       RD13, 0, RD8
// r_polyobj.c:244   x2=-MAXINT;		y2=-MAXINT;
  ADD          R0, 0xFFFFFFFF80000001, RD12
  ADD          RD12, 0, RD23
  ADD          RD12, 0, RD22
// r_polyobj.c:246   for(i=0; i<poi->n_segs; i++)
  ADD          R0, 0, RD11
  MOV.Q        (R2, 136), RQ10
  MOV.L        (RQ10, 2048), RQ18
  MOV.L        RD11, (R2, 104)
  BRGE.L       RQ18, RD11, .L0080270D

.L0080270B:
// r_polyobj.c:247   {
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 0, RQ26
  MOV.L        (R2, 104), RD25
  MOV.Q        (RQ26, RD25), RQ24
// r_polyobj.c:249   line=seg->linedef;
  MOV.Q        (RQ24, 32), RQ19
  MOV.Q        RQ19, (R2, 120)
// r_polyobj.c:251   tx = seg->v1->x + dx;
  MOV.Q        (RQ24, 0), RQ26
  MOV.Q        RQ24, (R2, 128)
  MOV.L        (RQ26, 0), RQ18
  MOV.L        (R2, 112), RD27
  ADDS.L       RQ18, RD27, RD21
// r_polyobj.c:252   ty = seg->v1->y + dy;
  MOV.L        (RQ26, 4), RQ19
  MOV.L        (R2, 108), RD26
  ADDS.L       RQ19, RD26, RD20
// r_polyobj.c:253   x1=r_int_min(x1, tx);
  ADDS.L       RD9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          r_int_min, R1
  ADDS.L       RQ10, 0, RD9
// r_polyobj.c:254   y1=r_int_min(y1, ty);
  ADDS.L       RD8, 0, RD10
  ADD          RD20, 0, RD11
  BSR          r_int_min, R1
  ADDS.L       RQ10, 0, RD8
// r_polyobj.c:255   x2=r_int_max(x2, tx);
  ADD          RD23, 0, RD10
  ADD          RD21, 0, RD11
  BSR          r_int_max, R1
  ADD          RQ10, 0, RD23
// r_polyobj.c:256   y2=r_int_max(y2, ty);
  ADD          RD22, 0, RD10
  ADD          RD20, 0, RD11
  BSR          r_int_max, R1
  ADD          RQ10, 0, RD22
// r_polyobj.c:258   tx = seg->v2->x + dx;
  MOV.Q        (RQ24, 8), RQ25
  MOV.L        (RQ25, 0), RQ18
  ADDS.L       RQ18, RD27, RD21
// r_polyobj.c:259   ty = seg->v2->y + dy;
  MOV.L        (RQ25, 4), RQ19
  ADDS.L       RQ19, RD26, RD20
// r_polyobj.c:260   x1=r_int_min(x1, tx);
  ADDS.L       RD9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          r_int_min, R1
  ADDS.L       RQ10, 0, RD9
// r_polyobj.c:261   y1=r_int_min(y1, ty);
  ADDS.L       RD8, 0, RD10
  ADD          RD20, 0, RD11
  BSR          r_int_min, R1
  ADDS.L       RQ10, 0, RD8
// r_polyobj.c:262   x2=r_int_max(x2, tx);
  ADD          RD23, 0, RD10
  ADD          RD21, 0, RD11
  BSR          r_int_max, R1
  ADD          RQ10, 0, RD23
// r_polyobj.c:263   y2=r_int_max(y2, ty);
  ADD          RD22, 0, RD10
  ADD          RD20, 0, RD11
  BSR          r_int_max, R1
  ADD          RQ10, 0, RD22
  MOV.L        (R2, 104), RD24
  ADDS.L       RD24, 1, RD24
  MOV.Q        (R2, 136), RQ19
  MOV.L        (RQ19, 2048), RQ18
  MOV.L        RD24, (R2, 104)
  BRLT.L       RQ18, RD24, .L0080270B

.L0080270D:
// r_polyobj.c:266   poi->bb_x1=x1;
  MOV.Q        (R2, 136), RQ27
  ADD          R0, 514, R5
  MOV.L        RD9, (RQ27, R5)
// r_polyobj.c:267   poi->bb_y1=y1;
  ADD          R0, 515, R5
  MOV.L        RD8, (RQ27, R5)
// r_polyobj.c:268   poi->bb_x2=x2;
  ADD          R0, 516, R5
  MOV.L        RD23, (RQ27, R5)
// r_polyobj.c:269   poi->bb_y2=y2;
  ADD          R0, 517, R5
  MOV.L        RD22, (RQ27, R5)
// r_polyobj.c:271   *rx1=x1;
  MOV.Q        (R2, 176), RQ26
  MOV.L        RD9, (RQ26, 0)
// r_polyobj.c:272   *ry1=y1;
  MOV.Q        (R2, 168), RQ25
  MOV.L        RD8, (RQ25, 0)
// r_polyobj.c:273   *rx2=x2;
  MOV.Q        (R2, 160), RQ24
  MOV.L        RD23, (RQ24, 0)
// r_polyobj.c:274   *ry2=y2;
  MOV.Q        (R2, 152), RQ19
  MOV.L        RD22, (RQ19, 0)
// r_polyobj.c:275   return(true);
  ADD          R0, 1, RD10

.L00C030CA:
  ADD          R2, 376, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

G_BuildTiccmd:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -336, R2
  ADD          RQ10, 0, RQ23
// g_game.c:254   base = I_BaseTiccmd ();		// empty, or external driver
  BSR          I_BaseTiccmd, R1
  MOV.Q        RQ10, (R2, 96)
// g_game.c:255   memcpy (cmd,base,sizeof(*cmd));
  MOV.Q        (R2, 96), RQ27
  MOV.Q        (RQ27, 0), RQ10
  MOV.Q        RQ10, (RQ23, 0)
// g_game.c:257   cmd->consistancy =
  MOV          consistancy, RQ26
  MOV.L        consoleplayer, RD13
  ADD          R0, 24, R5
  MUL.L        RD13, R5, RQ12
  ADD          RQ26, RQ12, RQ12
  MOV.L        maketic, RQ18
  ADD          R0, 12, RD26
  MODS.L       RQ18, RD26, RQ18
  MOV.W        (RQ12, RQ18), RQ9
  MOV.W        RQ9, (RQ23, 4)
// g_game.c:260   if(!mousebuttons)
  MOV.Q        mousebuttons, RQ13
  BRNE.Q       R0, RQ13, .L008014E3
// g_game.c:261   {
  MOV          mousearray, RQ27
  ADD          RQ27, 4, RQ26
  MOV.Q        RQ26, mousebuttons
// g_game.c:263   joybuttons = &joyarray[1];
  MOV          joyarray, RQ27
  ADD          RQ27, 4, RQ26
  MOV.Q        RQ26, joybuttons

.L008014E3:
// g_game.c:267   strafe =
  MOV          gamekeydown, RQ27
  MOV.L        key_strafe, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014E4
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebstrafe, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014E4

.L008014E6:
  MOV.Q        joybuttons, RQ27
  MOV.L        joybstrafe, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014E4
  ADD          R0, 0, RQ18
  BSR          .L008014E5, R0

.L008014E4:
  ADD          R0, 1, RQ18

.L008014E5:
  MOV.L        RD18, (R2, 116)
// g_game.c:271   speed =
  MOV          gamekeydown, RQ27
  MOV.L        key_speed, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014E9
  MOV.Q        joybuttons, RQ27
  MOV.L        joybspeed, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014E9
  ADD          R0, 0, RQ18
  BSR          .L008014EA, R0

.L008014E9:
  ADD          R0, 1, RQ18

.L008014EA:
  MOV.L        RD18, (R2, 108)
// g_game.c:275   forward = side = 0;
  ADD          RD0, 0, RD22
  ADD          RD0, 0, RD20
// g_game.c:279   if (	(joyxmove < 0) || (joyxmove > 0) ||
  MOV.L        joyxmove, RD27
  CMPLT.Q      RD27, R0, RQ18
  CMPGT.Q      RD27, R0, RQ9
  OR           RQ18, RQ9, RQ8
  BRNE.L       R0, RQ8, .L008014EE
  MOV          gamekeydown, RQ27
  MOV.L        key_right, RD26
  MOV.L        (RQ27, RD26), RQ18
  BRNE.L       R0, RQ18, .L008014EE

.L008014EF:
  MOV          gamekeydown, RQ27
  MOV.L        key_left, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L008014EE
  BSR          .L008014ED, R0

.L008014EE:
// g_game.c:281   turnheld += ticdup;
  MOV.L        ticdup, RD27
  MOV.L        turnheld, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, turnheld
  BSR          .L008014F1, R0

.L008014ED:
// g_game.c:283   turnheld = 0;
  MOV.L        RD0, turnheld

.L008014F1:
// g_game.c:285   if (turnheld < SLOWTURNTICS)
  MOV.L        turnheld, RD27
  BRGE.L       6, RD27, .L008014F2
// g_game.c:286   tspeed = 2;				// slow turn
  ADD          R0, 2, RD27
  MOV.L        RD27, (R2, 104)
  BSR          .L008014F3, R0

.L008014F2:
// g_game.c:288   tspeed = speed;
  MOV.L        (R2, 108), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, (R2, 104)

.L008014F3:
// g_game.c:291   if (strafe)
  MOV.L        (R2, 116), RD27
  BREQ.L       R0, RD27, .L008014F4
  MOV          gamekeydown, RQ27
  MOV.L        key_right, RD26
  MOV.L        (RQ27, RD26), RQ8
  BREQ.L       R0, RQ8, .L008014F5
// g_game.c:296   side += sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ18
  ADDS.L       RD22, RQ18, RD22

.L008014F5:
  MOV          gamekeydown, RQ27
  MOV.L        key_left, RD26
  MOV.L        (RQ27, RD26), RQ9
  BREQ.L       R0, RQ9, .L008014F6
// g_game.c:301   side -= sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ8
  SUBS.L       RD22, RQ8, RD22

.L008014F6:
  MOV.L        joyxmove, RD27
  BRLE.L       R0, RD27, .L008014F7
// g_game.c:304   side += sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ18
  ADDS.L       RD22, RQ18, RD22

.L008014F7:
  MOV.L        joyxmove, RD27
  BRGE.L       R0, RD27, .L008014F8
// g_game.c:306   side -= sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ9
  SUBS.L       RD22, RQ9, RD22

.L008014F8:
  BSR          .L008014F9, R0

.L008014F4:
  MOV          gamekeydown, RQ27
  MOV.L        key_right, RD26
  MOV.L        (RQ27, RD26), RQ8
  BREQ.L       R0, RQ8, .L008014FA
// g_game.c:311   cmd->angleturn -= angleturn[tspeed];
  MOV.W        (RQ23, 2), RQ18
  MOV          angleturn, RQ27
  MOV.L        (R2, 104), RD26
  MOV.L        (RQ27, RD26), RQ9
  SUBS.L       RQ18, RQ9, RQ8
  MOV.W        RQ8, (RQ23, 2)

.L008014FA:
  MOV          gamekeydown, RQ27
  MOV.L        key_left, RD26
  MOV.L        (RQ27, RD26), RQ18
  BREQ.L       R0, RQ18, .L008014FB
// g_game.c:313   cmd->angleturn += angleturn[tspeed];
  MOV.W        (RQ23, 2), RQ9
  MOV          angleturn, RQ27
  MOV.L        (R2, 104), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RQ9, RQ8, RQ18
  MOV.W        RQ18, (RQ23, 2)

.L008014FB:
  MOV.L        joyxmove, RD27
  BRLE.L       R0, RD27, .L008014FC
// g_game.c:315   cmd->angleturn -= angleturn[tspeed];
  MOV.W        (RQ23, 2), RQ9
  MOV          angleturn, RQ27
  MOV.L        (R2, 104), RD26
  MOV.L        (RQ27, RD26), RQ8
  SUBS.L       RQ9, RQ8, RQ18
  MOV.W        RQ18, (RQ23, 2)

.L008014FC:
  MOV.L        joyxmove, RD27
  BRGE.L       R0, RD27, .L008014FD
// g_game.c:317   cmd->angleturn += angleturn[tspeed];
  MOV.W        (RQ23, 2), RQ9
  MOV          angleturn, RQ27
  MOV.L        (R2, 104), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RQ9, RQ8, RQ18
  MOV.W        RQ18, (RQ23, 2)

.L008014FD:

.L008014F9:
// g_game.c:320   if (gamekeydown[key_up])
  MOV          gamekeydown, RQ27
  MOV.L        key_up, RD26
  MOV.L        (RQ27, RD26), RQ9
  BREQ.L       R0, RQ9, .L008014FE
// g_game.c:323   forward += forwardmove[speed];
  MOV          forwardmove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RD20, RQ8, RD20

.L008014FE:
// g_game.c:324   }
  MOV          gamekeydown, RQ27
  MOV.L        key_down, RD26
  MOV.L        (RQ27, RD26), RQ18
  BREQ.L       R0, RQ18, .L008014FF
// g_game.c:328   forward -= forwardmove[speed];
  MOV          forwardmove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ9
  SUBS.L       RD20, RQ9, RD20

.L008014FF:
// g_game.c:329   }
  MOV.L        joyymove, RD27
  BRGE.L       R0, RD27, .L00801500
// g_game.c:331   forward += forwardmove[speed];
  MOV          forwardmove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RD20, RQ8, RD20

.L00801500:
// g_game.c:332   if (joyymove > 0)
  MOV.L        joyymove, RD27
  BRLE.L       R0, RD27, .L00801501
// g_game.c:333   forward -= forwardmove[speed];
  MOV          forwardmove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ18
  SUBS.L       RD20, RQ18, RD20

.L00801501:
// g_game.c:334   if (gamekeydown[key_straferight])
  MOV          gamekeydown, RQ27
  MOV.L        key_straferight, RD26
  MOV.L        (RQ27, RD26), RQ9
  BREQ.L       R0, RQ9, .L00801502
// g_game.c:335   side += sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RD22, RQ8, RD22

.L00801502:
// g_game.c:336   if (gamekeydown[key_strafeleft])
  MOV          gamekeydown, RQ27
  MOV.L        key_strafeleft, RD26
  MOV.L        (RQ27, RD26), RQ18
  BREQ.L       R0, RQ18, .L00801503
// g_game.c:337   side -= sidemove[speed];
  MOV          sidemove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ9
  SUBS.L       RD22, RQ9, RD22

.L00801503:
// g_game.c:340   cmd->chatchar = HU_dequeueChatChar();
  BSR          HU_dequeueChatChar, R1
  SHAD.Q       RQ10, 56, RQ8
  SHAR.Q       RQ8, 56, RQ8
  MOVU.B       RQ8, (RQ23, 6)
// g_game.c:342   if (gamekeydown[key_fire] ||
  MOV          gamekeydown, RQ27
  MOV.L        key_fire, RD26
  MOV.L        (RQ27, RD26), RQ18
  BRNE.L       R0, RQ18, .L00801505
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebfire, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L00801505

.L00801506:
  MOV.Q        joybuttons, RQ27
  MOV.L        joybfire, RD26
  MOV.L        (RQ27, RD26), RQ8
  BRNE.L       R0, RQ8, .L00801505
  BSR          .L00801504, R0

.L00801505:
// g_game.c:345   cmd->buttons |= BT_ATTACK;
  MOVU.B       (RQ23, 7), RQ18
  OR           RQ18, 1, RQ9
  MOVU.B       RQ9, (RQ23, 7)

.L00801504:
// g_game.c:347   if (gamekeydown[key_use] || joybuttons[joybuse] )
  MOV          gamekeydown, RQ27
  MOV.L        key_use, RD26
  MOV.L        (RQ27, RD26), RQ8
  BRNE.L       R0, RQ8, .L00801509
  MOV.Q        joybuttons, RQ27
  MOV.L        joybuse, RD26
  MOV.L        (RQ27, RD26), RQ18
  BRNE.L       R0, RQ18, .L00801509
  BSR          .L00801508, R0

.L00801509:
// g_game.c:348   {
  MOVU.B       (RQ23, 7), RQ9
  OR           RQ9, 2, RQ8
  MOVU.B       RQ8, (RQ23, 7)
// g_game.c:351   dclicks = 0;
  MOV.L        RD0, dclicks

.L00801508:
// g_game.c:355   for (i=0 ; i<NUMWEAPONS-1 ; i++)
  ADD          R0, 0, RD21

.L0080150B:
// g_game.c:356   if (gamekeydown['1'+i])
  ADDS.L       RD21, 49, RQ18
  MOV          gamekeydown, RQ27
  MOV.L        (RQ27, RQ18), RQ9
  BREQ.L       R0, RQ9, .L0080150E
// g_game.c:357   {
  MOVU.B       (RQ23, 7), RQ8
  OR           RQ8, 4, RQ18
  MOVU.B       RQ18, (RQ23, 7)
// g_game.c:359   cmd->buttons |= i<<BT_WEAPONSHIFT;
  MOVU.B       (RQ23, 7), RQ9
  SHAD.L       RD21, 3, RQ8
  OR           RQ9, RQ8, RQ18
  MOVU.B       RQ18, (RQ23, 7)
// g_game.c:360   break;
  BSR          .L0080150D, R0

.L0080150E:
  ADDS.L       RD21, 1, RD21
  BRLT.L       8, RD21, .L0080150B

.L0080150D:
// g_game.c:364   if (mousebuttons[mousebforward])
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebforward, RD26
  MOV.L        (RQ27, RD26), RQ9
  BREQ.L       R0, RQ9, .L0080150F
// g_game.c:365   forward += forwardmove[speed];
  MOV          forwardmove, RQ27
  MOV.L        (R2, 108), RD26
  MOV.L        (RQ27, RD26), RQ8
  ADDS.L       RD20, RQ8, RD20

.L0080150F:
// g_game.c:368   if (mousebuttons[mousebforward] != dclickstate && dclicktime > 1 )
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebforward, RD26
  MOV.L        (RQ27, RD26), RQ18
  MOV.L        dclickstate, RD27
  CMPNE.Q      RQ18, RD27, RQ9
  MOV.L        dclicktime, RD27
  ADD          R0, 1, R5
  CMPGT.Q      RD27, R5, RQ8
  BTST.L       RQ8, RQ9, .L00801510
// g_game.c:369   {
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebforward, RD26
  MOV.L        (RQ27, RD26), RD13
  MOV.L        RD13, dclickstate
  BREQ.L       R0, RD13, .L00801511
// g_game.c:372   dclicks++;
  MOV.L        dclicks, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, dclicks

.L00801511:
  MOV.L        dclicks, RD27
  BRNE.Q       2, RD27, .L00801512
// g_game.c:374   {
  MOVU.B       (RQ23, 7), RQ18
  OR           RQ18, 2, RQ9
  MOVU.B       RQ9, (RQ23, 7)
// g_game.c:376   dclicks = 0;
  MOV.L        RD0, dclicks
  BSR          .L00801513, R0

.L00801512:
// g_game.c:379   dclicktime = 0;
  MOV.L        RD0, dclicktime

.L00801513:
  BSR          .L00801514, R0

.L00801510:
// g_game.c:382   {
  MOV.L        ticdup, RD27
  MOV.L        dclicktime, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, dclicktime
  BRLE.L       20, RD26, .L00801515
// g_game.c:385   {
  MOV.L        RD0, dclicks
// g_game.c:387   dclickstate = 0;
  MOV.L        RD0, dclickstate

.L00801515:

.L00801514:
// g_game.c:392   bstrafe =
  MOV.Q        mousebuttons, RQ27
  MOV.L        mousebstrafe, RD26
  MOV.L        (RQ27, RD26), RQ18
  BRNE.L       R0, RQ18, .L00801516
  MOV.Q        joybuttons, RQ27
  MOV.L        joybstrafe, RD26
  MOV.L        (RQ27, RD26), RQ9
  BRNE.L       R0, RQ9, .L00801516
  ADD          R0, 0, RQ8
  BSR          .L00801517, R0

.L00801516:
  ADD          R0, 1, RQ8

.L00801517:
  ADD          RQ8, 0, RD27
// g_game.c:395   if (bstrafe != dclickstate2 && dclicktime2 > 1 )
  MOV.L        dclickstate2, RD26
  CMPNE.Q      RD27, RD26, RQ8
  MOV.L        RD27, (R2, 112)
  MOV.L        dclicktime2, RD26
  ADD          R0, 1, R5
  CMPGT.Q      RD26, R5, RQ18
  BTST.L       RQ18, RQ8, .L0080151A
// g_game.c:396   {
  MOV.L        (R2, 112), RD27
  MOV.L        RD27, dclickstate2
  BREQ.L       R0, RD27, .L0080151B
// g_game.c:399   dclicks2++;
  MOV.L        dclicks2, RD27
  ADDS.L       RD27, 1, RD27
  MOV.L        RD27, dclicks2

.L0080151B:
  MOV.L        dclicks2, RD27
  BRNE.Q       2, RD27, .L0080151C
// g_game.c:401   {
  MOVU.B       (RQ23, 7), RQ9
  OR           RQ9, 2, RQ8
  MOVU.B       RQ8, (RQ23, 7)
// g_game.c:403   dclicks2 = 0;
  MOV.L        RD0, dclicks2
  BSR          .L0080151D, R0

.L0080151C:
// g_game.c:406   dclicktime2 = 0;
  MOV.L        RD0, dclicktime2

.L0080151D:
  BSR          .L0080151E, R0

.L0080151A:
// g_game.c:409   {
  MOV.L        ticdup, RD27
  MOV.L        dclicktime2, RD26
  ADDS.L       RD26, RD27, RD26
  MOV.L        RD26, dclicktime2
  BRLE.L       20, RD26, .L0080151F
// g_game.c:412   {
  MOV.L        RD0, dclicks2
// g_game.c:414   dclickstate2 = 0;
  MOV.L        RD0, dclickstate2

.L0080151F:

.L0080151E:
// g_game.c:418   forward += mousey;
  MOV.L        mousey, RD27
  ADDS.L       RD20, RD27, RD20
// g_game.c:420   if (strafe)
  MOV.L        (R2, 116), RD27
  BREQ.L       R0, RD27, .L00801520
// g_game.c:421   side += mousex*2;
  MOV.L        mousex, RD27
  SHAD.L       RD27, 1, RQ18
  ADDS.L       RD22, RQ18, RD22
  BSR          .L00801521, R0

.L00801520:
// g_game.c:423   cmd->angleturn -= mousex*0x8;
  MOV.W        (RQ23, 2), RQ9
  MOV.L        mousex, RD27
  SHAD.L       RD27, 3, RQ8
  SUBS.L       RQ9, RQ8, RQ18
  MOV.W        RQ18, (RQ23, 2)

.L00801521:
// g_game.c:425   mousex = mousey = 0;
  MOV.L        RD0, mousey
  MOV.L        RD0, mousex
// g_game.c:427   if (forward > MAXPLMOVE)
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ9
  BRLE.L       RQ9, RD20, .L00801522
// g_game.c:428   forward = MAXPLMOVE;
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RD20
  BSR          .L00801523, R0

.L00801522:
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ8
  SUBS.L       R0, RQ8, RQ18
  BRGE.L       RQ18, RD20, .L00801524
// g_game.c:430   forward = -MAXPLMOVE;
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ9
  SUBS.L       R0, RQ9, RD20

.L00801524:

.L00801523:
// g_game.c:431   if (side > MAXPLMOVE)
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ8
  BRLE.L       RQ8, RD22, .L00801525
// g_game.c:432   side = MAXPLMOVE;
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RD22
  BSR          .L00801526, R0

.L00801525:
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ18
  SUBS.L       R0, RQ18, RQ9
  BRGE.L       RQ9, RD22, .L00801527
// g_game.c:434   side = -MAXPLMOVE;
  MOV          forwardmove, RQ27
  MOV.L        (RQ27, 4), RQ8
  SUBS.L       R0, RQ8, RD22

.L00801527:

.L00801526:
// g_game.c:436   cmd->forwardmove += forward;
  MOV.B        (RQ23, 0), RQ18
  ADDS.L       RQ18, RD20, RQ9
  MOV.B        RQ9, (RQ23, 0)
// g_game.c:437   cmd->sidemove += side;
  MOV.B        (RQ23, 1), RQ8
  ADDS.L       RQ8, RD22, RQ18
  MOV.B        RQ18, (RQ23, 1)
// g_game.c:440   if (sendpause)
  MOV.L        sendpause, RD27
  BREQ.L       R0, RD27, .L00801528
// g_game.c:441   {
  MOV.L        RD0, sendpause
// g_game.c:443   cmd->buttons = BT_SPECIAL | BTS_PAUSE;
  ADD          R0, 129, RD27
  MOVU.B       RD27, (RQ23, 7)

.L00801528:
// g_game.c:446   if (sendsave)
  MOV.L        sendsave, RD27
  BREQ.L       R0, RD27, .L00801529
// g_game.c:447   {
  MOV.L        RD0, sendsave
// g_game.c:449   cmd->buttons = BT_SPECIAL | BTS_SAVEGAME | (savegameslot<<BTS_SAVESHIFT);
  MOV.L        savegameslot, RD27
  SHAD.L       RD27, 2, RQ9
  OR           RQ9, 130, RQ8
  MOVU.B       RQ8, (RQ23, 7)

.L00801529:

.L00C030D0:
  ADD          R2, 336, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

WI_updateStats:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -320, R2
// wi_stuff.c:1364   WI_updateAnimatedBack();
  BSR          WI_updateAnimatedBack, R1
// wi_stuff.c:1366   if (acceleratestage && sp_state != 10)
  MOV.L        TU7A00CB85/acceleratestage, RD22
  BREQ.L       R0, RD22, .L00802A65
  MOV.L        TU7A00CB85/sp_state, RD22
  BREQ.Q       10, RD22, .L00802A65

.L00802A66:
// wi_stuff.c:1367   {
  MOV.L        RD0, TU7A00CB85/acceleratestage
// wi_stuff.c:1369   cnt_kills[0] = (plrs[me].skills * 100) / wbs->maxkills;
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 4), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ27
  MOV.L        (RQ27, 16), RQ18
  DIVS.L       RQ9, RQ18, RQ8
  MOV          TU7A00CB85/cnt_kills, RQ26
  MOV.L        RQ8, (RQ26, 0)
// wi_stuff.c:1370   cnt_items[0] = (plrs[me].sitems * 100) / wbs->maxitems;
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.L        (RQ27, 20), RQ8
  DIVS.L       RQ9, RQ8, RQ18
  MOV          TU7A00CB85/cnt_items, RQ26
  MOV.L        RQ18, (RQ26, 0)
// wi_stuff.c:1371   cnt_secret[0] = (plrs[me].ssecret * 100) / wbs->maxsecret;
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 12), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.L        (RQ27, 24), RQ8
  DIVS.L       RQ9, RQ8, RQ18
  MOV          TU7A00CB85/cnt_secret, RQ26
  MOV.L        RQ18, (RQ26, 0)
// wi_stuff.c:1372   cnt_time = plrs[me].stime / TICRATE;
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 16), RQ18
  MOV.L        RQ18, TU7A00CB85/cnt_time
  ADD          R0, 35, RD22
  MOV.L        TU7A00CB85/cnt_time, RD21
  DIVS.L       RD21, RD22, RD21
  MOV.L        RD21, TU7A00CB85/cnt_time
// wi_stuff.c:1373   cnt_par = wbs->partime / TICRATE;
  MOV.L        (RQ27, 32), RQ9
  MOV.L        RQ9, TU7A00CB85/cnt_par
  MOV.L        TU7A00CB85/cnt_par, RD21
  DIVS.L       RD21, RD22, RD21
  MOV.L        RD21, TU7A00CB85/cnt_par
// wi_stuff.c:1374   S_StartSound(0, sfx_barexp);
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1375   sp_state = 10;
  ADD          R0, 10, RD21
  MOV.L        RD21, TU7A00CB85/sp_state

.L00802A65:
// wi_stuff.c:1378   if (sp_state == 2)
  MOV.L        TU7A00CB85/sp_state, RD22
  BRNE.Q       2, RD22, .L00802A68
// wi_stuff.c:1379   {
  MOV          TU7A00CB85/cnt_kills, RQ22
  MOV.L        (RQ22, 0), RQ8
  ADDS.L       RQ8, 2, RQ18
  MOV.L        RQ18, (RQ22, 0)
  MOV.L        TU7A00CB85/bcnt, RD22
  ADD          R0, 3, RD21
  BTSTN.L      RD21, RD22, .L00802A69
// wi_stuff.c:1383   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A69:
  MOV          TU7A00CB85/cnt_kills, RQ22
  MOV.L        (RQ22, 0), RQ9
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 4), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ8
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 16), RQ18
  DIVS.L       RQ8, RQ18, RQ23
  BRLT.L       RQ23, RQ9, .L00802A6A
// wi_stuff.c:1386   {
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 4), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 16), RQ8
  DIVS.L       RQ9, RQ8, RQ23
  MOV          TU7A00CB85/cnt_kills, RQ22
  MOV.L        RQ23, (RQ22, 0)
// wi_stuff.c:1388   S_StartSound(0, sfx_barexp);
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1389   sp_state++;
  MOV.L        TU7A00CB85/sp_state, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, TU7A00CB85/sp_state

.L00802A6A:
  BSR          .L00802A6B, R0

.L00802A68:
  MOV.L        TU7A00CB85/sp_state, RD22
  BRNE.Q       4, RD22, .L00802A6C
// wi_stuff.c:1393   {
  MOV          TU7A00CB85/cnt_items, RQ22
  MOV.L        (RQ22, 0), RQ18
  ADDS.L       RQ18, 2, RQ9
  MOV.L        RQ9, (RQ22, 0)
  MOV.L        TU7A00CB85/bcnt, RD22
  ADD          R0, 3, RD21
  BTSTN.L      RD21, RD22, .L00802A6D
// wi_stuff.c:1397   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A6D:
  MOV          TU7A00CB85/cnt_items, RQ22
  MOV.L        (RQ22, 0), RQ8
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 20), RQ23
  DIVS.L       RQ9, RQ23, RQ18
  BRLT.L       RQ18, RQ8, .L00802A6E
// wi_stuff.c:1400   {
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 8), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 20), RQ8
  DIVS.L       RQ9, RQ8, RQ23
  MOV          TU7A00CB85/cnt_items, RQ22
  MOV.L        RQ23, (RQ22, 0)
// wi_stuff.c:1402   S_StartSound(0, sfx_barexp);
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1403   sp_state++;
  MOV.L        TU7A00CB85/sp_state, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, TU7A00CB85/sp_state

.L00802A6E:
  BSR          .L00802A6F, R0

.L00802A6C:
  MOV.L        TU7A00CB85/sp_state, RD22
  BRNE.Q       6, RD22, .L00802A70
// wi_stuff.c:1407   {
  MOV          TU7A00CB85/cnt_secret, RQ22
  MOV.L        (RQ22, 0), RQ18
  ADDS.L       RQ18, 2, RQ9
  MOV.L        RQ9, (RQ22, 0)
  MOV.L        TU7A00CB85/bcnt, RD22
  ADD          R0, 3, RD21
  BTSTN.L      RD21, RD22, .L00802A71
// wi_stuff.c:1411   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A71:
  MOV          TU7A00CB85/cnt_secret, RQ22
  MOV.L        (RQ22, 0), RQ8
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 12), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 24), RQ23
  DIVS.L       RQ9, RQ23, RQ18
  BRLT.L       RQ18, RQ8, .L00802A72
// wi_stuff.c:1414   {
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 12), RQ18
  ADD          R0, 100, R5
  MULS.L       RQ18, R5, RQ9
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 24), RQ8
  DIVS.L       RQ9, RQ8, RQ23
  MOV          TU7A00CB85/cnt_secret, RQ22
  MOV.L        RQ23, (RQ22, 0)
// wi_stuff.c:1416   S_StartSound(0, sfx_barexp);
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1417   sp_state++;
  MOV.L        TU7A00CB85/sp_state, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, TU7A00CB85/sp_state

.L00802A72:
  BSR          .L00802A73, R0

.L00802A70:
  MOV.L        TU7A00CB85/sp_state, RD22
  BRNE.Q       8, RD22, .L00802A74
  MOV.L        TU7A00CB85/bcnt, RD22
  ADD          R0, 3, RD21
  BTSTN.L      RD21, RD22, .L00802A75
// wi_stuff.c:1424   S_StartSound(0, sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L00802A75:
// wi_stuff.c:1426   cnt_time += 3;
  MOV.L        TU7A00CB85/cnt_time, RD22
  ADDS.L       RD22, 3, RD22
  MOV.Q        TU7A00CB85/plrs, RQ21
  MOV.L        TU7A00CB85/me, RD20
  ADD          R0, 40, R5
  MUL.L        RD20, R5, RQ27
  ADD          RQ21, RQ27, RQ27
  MOV.L        (RQ27, 16), RQ18
  ADD          R0, 35, R5
  DIVS.L       RQ18, R5, RQ9
  MOV.L        RD22, TU7A00CB85/cnt_time
  BRLT.L       RQ9, RD22, .L00802A76
// wi_stuff.c:1429   cnt_time = plrs[me].stime / TICRATE;
  MOV.Q        TU7A00CB85/plrs, RQ22
  MOV.L        TU7A00CB85/me, RD21
  ADD          R0, 40, R5
  MUL.L        RD21, R5, RQ20
  ADD          RQ22, RQ20, RQ20
  MOV.L        (RQ20, 16), RQ18
  ADD          R0, 35, R5
  DIVS.L       RQ18, R5, RD22
  MOV.L        RD22, TU7A00CB85/cnt_time

.L00802A76:
// wi_stuff.c:1431   cnt_par += 3;
  MOV.L        TU7A00CB85/cnt_par, RD22
  ADDS.L       RD22, 3, RD22
  MOV.Q        TU7A00CB85/wbs, RQ21
  MOV.L        (RQ21, 32), RQ9
  ADD          R0, 35, R5
  DIVS.L       RQ9, R5, RQ8
  MOV.L        RD22, TU7A00CB85/cnt_par
  BRLT.L       RQ8, RD22, .L00802A77
// wi_stuff.c:1434   {
  MOV.Q        TU7A00CB85/wbs, RQ22
  MOV.L        (RQ22, 32), RQ23
  MOV.L        RQ23, TU7A00CB85/cnt_par
  ADD          R0, 35, RD22
  MOV.L        TU7A00CB85/cnt_par, RD21
  DIVS.L       RD21, RD22, RD21
  MOV.L        RD21, TU7A00CB85/cnt_par
  MOV.Q        TU7A00CB85/plrs, RQ21
  MOV.L        TU7A00CB85/me, RD20
  ADD          R0, 40, R5
  MUL.L        RD20, R5, RQ27
  ADD          RQ21, RQ27, RQ27
  MOV.L        (RQ27, 16), RQ18
  ADD          RQ18, 0, RQ9
  DIVS.L       RQ9, RD22, RQ9
  MOV.L        TU7A00CB85/cnt_time, RD21
  BRLT.L       RQ9, RD21, .L00802A78
// wi_stuff.c:1438   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 82, RD11
  BSR          S_StartSound, R1
// wi_stuff.c:1440   sp_state++;
  MOV.L        TU7A00CB85/sp_state, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, TU7A00CB85/sp_state

.L00802A78:

.L00802A77:
  BSR          .L00802A79, R0

.L00802A74:
  MOV.L        TU7A00CB85/sp_state, RD22
  BRNE.Q       10, RD22, .L00802A7A
  MOV.L        TU7A00CB85/acceleratestage, RD22
  BREQ.L       R0, RD22, .L00802A7B
// wi_stuff.c:1447   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 3, RD11
  BSR          S_StartSound, R1
  MOV.L        gamemode, RD22
  ADD          R0, 2, R5
  CMPEQ.Q      RD22, R5, RQ8
  ADD          R0, 5, R5
  CMPEQ.Q      RD22, R5, RQ23
  OR           RQ8, RQ23, RQ18
  BREQ.L       R0, RQ18, .L00802A7C
// wi_stuff.c:1452   WI_initNoState();
  BSR          WI_initNoState, R1
  BSR          .L00802A7D, R0

.L00802A7C:
// wi_stuff.c:1454   WI_initShowNextLoc();
  BSR          WI_initShowNextLoc, R1

.L00802A7D:

.L00802A7B:
  BSR          .L00802A7E, R0

.L00802A7A:
  MOV.L        TU7A00CB85/sp_state, RD22
  ADD          R0, 1, RD21
  BTST.L       RD21, RD22, .L00802A7F
  MOV.L        TU7A00CB85/cnt_pause, RD22
  ADDS.L       RD22, -1, RD22
  MOV.L        RD22, TU7A00CB85/cnt_pause
  BRNE.L       R0, RD22, .L00802A80
// wi_stuff.c:1460   {
  MOV.L        TU7A00CB85/sp_state, RD22
  ADDS.L       RD22, 1, RD22
  MOV.L        RD22, TU7A00CB85/sp_state
// wi_stuff.c:1462   cnt_pause = TICRATE;
  ADD          R0, 35, RD22
  MOV.L        RD22, TU7A00CB85/cnt_pause

.L00802A80:

.L00802A7F:

.L00802A7E:

.L00802A79:

.L00802A73:

.L00802A6F:

.L00802A6B:

.L00C030D6:
  ADD          R2, 320, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

AM_drawWalls:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -352, R2
// am_map.c:1136   for (i=0;i<numlines;i++)
  ADD          R0, 0, RD8
  MOV.L        numlines, RD22
  BRGE.L       RD22, RD8, .L0080184E

.L0080184C:
// am_map.c:1137   {
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 0), RQ9
  MOV.L        (RQ9, 0), RQ18
  MOV          AM_drawWalls/l!71, RQ12
  ADD          RQ12, 0, RQ11
  MOV.L        RQ18, (RQ11, 0)
// am_map.c:1139   l.a.y = lines[i].v1->y;
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 0), RQ9
  MOV.L        (RQ9, 4), RQ18
  MOV.L        RQ18, (RQ11, 4)
// am_map.c:1140   l.b.x = lines[i].v2->x;
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 8), RQ9
  MOV.L        (RQ9, 0), RQ18
  ADD          RQ12, 8, RQ11
  MOV.L        RQ18, (RQ11, 0)
// am_map.c:1141   l.b.y = lines[i].v2->y;
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 8), RQ9
  MOV.L        (RQ9, 4), RQ18
  MOV.L        RQ18, (RQ11, 4)
  MOV.Q        RQ11, (R2, 80)
// am_map.c:1142   if (cheating || (lines[i].flags & ML_MAPPED))
  MOV.L        TU7A00C41B/cheating, RD22
  BRNE.L       R0, RD22, .L00801850
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.W        (RQ13, 24), RQ18
  ADD          R0, 256, RD22
  BTSTN.L      RD22, RQ18, .L00801850
  BSR          .L0080184F, R0

.L00801850:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.W        (RQ13, 24), RQ18
  ADD          R0, 128, RD22
  BTST.L       RD22, RQ18, .L00801852
  MOV.L        TU7A00C41B/cheating, RD22
  BRNE.L       R0, RD22, .L00801852
  BSR          .L0080184D, R0

.L00801852:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 72), RQ9
  BRNE.Q       R0, RQ9, .L00801854
// am_map.c:1147   {
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 176, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1
  BSR          .L00801855, R0

.L00801854:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.W        (RQ13, 26), RQ18
  BRNE.Q       39, RQ18, .L00801856
// am_map.c:1153   { // teleporters
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 184, RD11
  BSR          AM_drawMline, R1
  BSR          .L00801857, R0

.L00801856:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.W        (RQ13, 24), RQ18
  ADD          R0, 32, RD22
  BTST.L       RD22, RQ18, .L00801858
  MOV.L        TU7A00C41B/cheating, RD22
  BREQ.L       R0, RD22, .L00801859
// am_map.c:1158   if (cheating) AM_drawMline(&l, SECRETWALLCOLORS + lightlev);
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 176, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1
  BSR          .L0080185A, R0

.L00801859:
// am_map.c:1159   else AM_drawMline(&l, WALLCOLORS+lightlev);
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 176, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1

.L0080185A:
  BSR          .L0080185B, R0

.L00801858:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 72), RQ9
  MOV.L        (RQ9, 0), RQ18
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 64), RQ9
  MOV.L        (RQ9, 0), RQ23
  BREQ.Q       RQ23, RQ18, .L0080185C
// am_map.c:1163   AM_drawMline(&l, FDWALLCOLORS + lightlev); // floor level change
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 64, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1
  BSR          .L0080185D, R0

.L0080185C:
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 72), RQ9
  MOV.L        (RQ9, 4), RQ18
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.Q        (RQ13, 64), RQ9
  MOV.L        (RQ9, 4), RQ23
  BREQ.Q       RQ23, RQ18, .L0080185E
// am_map.c:1167   AM_drawMline(&l, CDWALLCOLORS+lightlev); // ceiling level change
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 231, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1
  BSR          .L0080185F, R0

.L0080185E:
  MOV.L        TU7A00C41B/cheating, RD22
  BREQ.L       R0, RD22, .L00801860
// am_map.c:1169   else if (cheating) {
  MOV.L        TU7A00C41B/lightlev, RD22
  ADDS.L       RD22, 96, RQ18
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          RQ18, 0, RD11
  BSR          AM_drawMline, R1

.L00801860:

.L0080185F:

.L0080185D:

.L0080185B:

.L00801857:

.L00801855:
  BSR          .L00801861, R0

.L0080184F:
  MOV.Q        TU7A00C41B/plr, RQ22
  MOV.L        (RQ22, 64), RQ18
  BREQ.L       R0, RQ18, .L00801862
  MOV.Q        lines, RQ22
  ADD          R0, 96, R5
  MUL.L        RD8, R5, RQ13
  ADD          RQ22, RQ13, RQ13
  MOV.W        (RQ13, 24), RQ18
  ADD          R0, 128, RD22
  BTSTN.L      RD22, RQ18, .L00801863
// am_map.c:1176   if (!(lines[i].flags & LINE_NEVERSEE)) AM_drawMline(&l, GRAYS+3);
  MOV          AM_drawWalls/l!71, RQ9
  ADD          RQ9, 0, RQ10
  ADD          R0, 99, RD11
  BSR          AM_drawMline, R1

.L00801863:

.L00801862:

.L00801861:

.L0080184D:
  ADDS.L       RD8, 1, RD8
  MOV.L        numlines, RD22
  BRLT.L       RD22, RD8, .L0080184C

.L0080184E:

.L00C030DC:
  ADD          R2, 352, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 4

W_InitMultipleFiles:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
  MOV.Q        RQ10, (R2, 136)
// w_wad.c:1387   for (i=0; filenames[i]; i++)
  ADD          R0, 0, RD18
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BREQ.Q       R0, RQ8, .L00802922

.L00802920:
// w_wad.c:1388   {
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ20
// w_wad.c:1390   j=*s0;
  MOV.B        (RQ20, 0), RD23
// w_wad.c:1391   if((j<=' ') || (j>'~'))
  ADD          R0, 32, R5
  CMPLE.Q      RD23, R5, RQ9
  ADD          R0, 126, R5
  CMPGT.Q      RD23, R5, RQ22
  OR           RQ9, RQ22, RQ21
  BREQ.L       R0, RQ21, .L00802923
// w_wad.c:1392   __debugbreak();

W_InitMultipleFiles.debugbreak_L068A:
  BRK          1674

.L00802923:
  ADDS.L       RD18, 1, RD18
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BRNE.Q       R0, RQ8, .L00802920

.L00802922:
// w_wad.c:1395   printf("W_InitMultipleFiles: A-1\n");
  MOV          .L00C0310C, RQ10
  BSR          printf, R1
// w_wad.c:1398   numlumps = 0;
  MOV.L        RD0, numlumps
// w_wad.c:1402   lumpinfo = malloc(256);	
  ADD          R0, 256, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, lumpinfo
// w_wad.c:1407   for (i=0; filenames[i]; i++)
  ADD          R0, 0, RD18
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BREQ.Q       R0, RQ8, .L00802926

.L00802924:
// w_wad.c:1408   {
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ20
// w_wad.c:1410   j=*s0;
  MOV.B        (RQ20, 0), RD23
// w_wad.c:1411   if((j<=' ') || (j>'~'))
  ADD          R0, 32, R5
  CMPLE.Q      RD23, R5, RQ9
  ADD          R0, 126, R5
  CMPGT.Q      RD23, R5, RQ22
  OR           RQ9, RQ22, RQ21
  BREQ.L       R0, RQ21, .L00802927
// w_wad.c:1412   __debugbreak();

W_InitMultipleFiles.debugbreak_L068B:
  BRK          1675

.L00802927:
// w_wad.c:1415   W_AddFile (s0);
  ADD          RQ20, 0, RQ10
  BSR          W_AddFile, R1
  ADDS.L       RD18, 1, RD18
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BRNE.Q       R0, RQ8, .L00802924

.L00802926:
// w_wad.c:1418   printf("W_InitMultipleFiles: A-2\n");
  MOV          .L00C0310E, RQ10
  BSR          printf, R1
// w_wad.c:1420   if (!numlumps)
  MOV.L        numlumps, RD27
  BRNE.L       R0, RD27, .L00802928
// w_wad.c:1421   I_Error ("W_InitFiles: no files found");
  MOV          .L00C0310F, RQ10
  BSR          I_Error, R1

.L00802928:
// w_wad.c:1423   if(!lumpinfo->name[0])
  MOV.Q        lumpinfo, RQ27
  ADD          RQ27, 0, RQ8
  MOV.B        (RQ8, 0), RQ9
  BRNE.L       R0, RQ9, .L00802929
// w_wad.c:1424   __debugbreak();

W_InitMultipleFiles.debugbreak_L068C:
  BRK          1676

.L00802929:
// w_wad.c:1426   if(!lumpinfo[1].name[0])
  MOV.Q        lumpinfo, RQ27
  ADD          RQ27, 40, RQ26
  ADD          RQ26, 0, RQ8
  MOV.B        (RQ8, 0), RQ9
  BRNE.L       R0, RQ9, .L0080292A
// w_wad.c:1427   __debugbreak();

W_InitMultipleFiles.debugbreak_L068D:
  BRK          1677

.L0080292A:
// w_wad.c:1430   printf("W_InitFiles: numlumps=%d\n", numlumps);
  MOV          .L00C03112, RQ10
  MOV.L        numlumps, RD11
  BSR          printf, R1
// w_wad.c:1432   for(i=0; i<64; i++)
  ADD          R0, 0, RD18

.L0080292B:
// w_wad.c:1433   {
  MOV          lumphash, RQ27
  ADD          R0, -1, RD26
  MOV.L        RD26, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  BRLT.L       64, RD18, .L0080292B

.L0080292D:
// w_wad.c:1437   for(i=0; i<numlumps; i++)
  ADD          R0, 0, RD18
  MOV.L        numlumps, RD27
  BRGE.L       RD27, RD18, .L00802930

.L0080292E:
// w_wad.c:1438   {
  MOV.Q        lumpinfo, RQ27
  ADD          R0, 40, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
// w_wad.c:1442   h = W_HashIndexForName(lump_p->name);
  ADD          RQ26, 0, RQ8
  MOV.Q        RQ26, (R2, 128)
  ADD          RQ8, 0, RQ10
  BSR          W_HashIndexForName, R1
  ADD          RQ10, 0, RD27
// w_wad.c:1443   lump_p->chain = lumphash[h];
  MOV          lumphash, RQ25
  MOV.L        (RQ25, RD27), RQ9
  MOV.L        RQ9, (RQ26, 28)
// w_wad.c:1444   lumphash[h] = i;
  MOV.L        RD18, (RQ25, RD27)
  MOV.L        RD27, (R2, 120)
  ADDS.L       RD18, 1, RD18
  MOV.L        numlumps, RD25
  BRLT.L       RD25, RD18, .L0080292E

.L00802930:
// w_wad.c:1447   if(!lumpinfo->name[0])
  MOV.Q        lumpinfo, RQ27
  ADD          RQ27, 0, RQ8
  MOV.B        (RQ8, 0), RQ9
  BRNE.L       R0, RQ9, .L00802931
// w_wad.c:1448   __debugbreak();

W_InitMultipleFiles.debugbreak_L068E:
  BRK          1678

.L00802931:
// w_wad.c:1450   if(!lumpinfo[1].name[0])
  MOV.Q        lumpinfo, RQ27
  ADD          RQ27, 40, RQ26
  ADD          RQ26, 0, RQ8
  MOV.B        (RQ8, 0), RQ9
  BRNE.L       R0, RQ9, .L00802932
// w_wad.c:1451   __debugbreak();

W_InitMultipleFiles.debugbreak_L068F:
  BRK          1679

.L00802932:
// w_wad.c:1453   if(W_GetNumForName("PNAMES")<0)
  MOV          .L00C03115, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ22
  BRGE.L       R0, RQ22, .L00802933
// w_wad.c:1456   __debugbreak();

W_InitMultipleFiles.debugbreak_L0690:
  BRK          1680

.L00802933:
// w_wad.c:1462   size = (numlumps + 64) * sizeof(void *);
  MOV.L        numlumps, RD27
  ADDS.L       RD27, 64, RQ21
  SHAD.L       RQ21, 3, RD27
// w_wad.c:1463   lumpcache = malloc (size);
  ADDS.L       RD27, 0, RQ10
  MOV.L        RD27, (R2, 124)
  BSR          malloc, R1
  MOV.Q        RQ10, lumpcache
// w_wad.c:1464   lumpcache_head = malloc (size);
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, lumpcache_head
// w_wad.c:1465   patchcache = malloc (size);
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, patchcache
// w_wad.c:1466   utxcache = malloc (size);
  ADDS.L       RD27, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ26
// w_wad.c:1468   if (!lumpcache || !patchcache || !utxcache)
  MOV.Q        lumpcache, RQ25
  CMPEQ.Q      RQ25, R0, RQ9
  MOV.Q        patchcache, RQ25
  CMPEQ.Q      RQ25, R0, RQ22
  OR           RQ9, RQ22, RQ21
  CMPEQ.Q      RQ26, R0, RQ9
  MOV.Q        RQ26, utxcache
  OR           RQ21, RQ9, RQ22
  BREQ.L       R0, RQ22, .L00802934
// w_wad.c:1469   I_Error ("Couldn't allocate lumpcache");
  MOV          .L00C03117, RQ10
  BSR          I_Error, R1

.L00802934:
// w_wad.c:1471   memset (lumpcache,0, size);
  MOV.L        (R2, 124), RD27
  ADDS.L       RD27, 0, RQ26
  MOV.Q        lumpcache, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// w_wad.c:1472   memset (lumpcache_head,0, size);
  ADDS.L       RD27, 0, RQ26
  MOV.Q        lumpcache_head, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// w_wad.c:1473   memset (patchcache,0, size);
  ADDS.L       RD27, 0, RQ26
  MOV.Q        patchcache, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// w_wad.c:1474   memset (utxcache,0, size);
  ADDS.L       RD27, 0, RQ26
  MOV.Q        utxcache, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// w_wad.c:1476   if(W_GetNumForName("PNAMES")<0)
  MOV          .L00C03115, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RQ9
  BRGE.L       R0, RQ9, .L00802935
// w_wad.c:1477   {

W_InitMultipleFiles.debugbreak_L0691:
  BRK          1681

.L00802935:

.L00C0310A:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

I_InitSound:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -368, R2
// i_sound_btsh.c:1092   if(i_sound_init)
  MOV.L        i_sound_init, RD27
  BREQ.L       R0, RD27, .L0080120A
// i_sound_btsh.c:1093   {
  MOV          .L00C03129, RQ10
  BSR          printf, R1
// i_sound_btsh.c:1095   return;
  BSR          .L00C03128, R0

.L0080120A:
// i_sound_btsh.c:1096   }
  ADD          R0, 1, RD27
  MOV.L        RD27, i_sound_init
// i_sound_btsh.c:1099   rate=0;
  MOV.L        RD0, (R2, 140)
// i_sound_btsh.c:1102   fprintf( stderr, "I_InitSound: ");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C0312A, RQ11
  BSR          fprintf, R1
// i_sound_btsh.c:1104   i=SAMPLERATE;
  LDIZ         11025, RD18
// i_sound_btsh.c:1108   fprintf(stderr, " configured audio device\n" );
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C0312B, RQ11
  BSR          fprintf, R1
// i_sound_btsh.c:1112   fprintf( stderr, "I_InitSound: ");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C0312A, RQ11
  BSR          fprintf, R1
// i_sound_btsh.c:1113   fflush(stderr);
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          RQ22, 0, RQ10
  BSR          fflush, R1
// i_sound_btsh.c:1115   dotrem=NUMSFX>>3;
  ADD          R0, 13, RD27
  MOV.L        RD27, (R2, 136)
// i_sound_btsh.c:1116   dotfra=0;
  ADD          R0, 0, RD21
// i_sound_btsh.c:1118   for (i=1 ; i<NUMSFX ; i++)
  ADD          R0, 1, RD18

.L0080120B:
// i_sound_btsh.c:1119   {
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
// i_sound_btsh.c:1121   lsfx=tsfx->link;
  MOV.Q        (RQ26, 16), RQ27
  MOV.Q        RQ26, (R2, 152)
// i_sound_btsh.c:1123   if(lsfx)
  MOV.Q        RQ27, (R2, 144)
  BREQ.Q       R0, RQ27, .L0080120E
// i_sound_btsh.c:1124   {
  MOV.Q        (R2, 144), RQ27
  MOV          S_sfx, RQ26
  ADD          RQ27, 0, RQ20
  SUB          RQ20, RQ26, RQ20
  ADD          R0, 56, RD26
  DIVS.L       RQ20, RD26, RQ20
  ADDS.L       RQ20, 0, RD13
  MOV.L        RD13, (R2, 132)
  BRGE.L       R0, RD13, .L0080120F
// i_sound_btsh.c:1127   { __debugbreak(); }

I_InitSound.debugbreak_L069C:
  BRK          1692

.L0080120F:
  MOV.L        (R2, 132), RD27
  BRLT.L       109, RD27, .L00801210
// i_sound_btsh.c:1129   { __debugbreak(); }

I_InitSound.debugbreak_L069D:
  BRK          1693

.L00801210:

.L0080120E:
// i_sound_btsh.c:1134   if (!S_sfx[i].link)
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ9
  BRNE.Q       R0, RQ9, .L00801211
// i_sound_btsh.c:1137   S_sfx[i].data = getsfx( S_sfx[i].name, &lengths[i], &rate );
  ADD          R2, 140, RQ22
  MOV          lengths, RQ27
  LEA.L        RQ27, RD18, RQ9
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ8
  ADD          RQ8, 0, RQ10
  ADD          RQ9, 0, RQ11
  ADD          RQ22, 0, RQ12
  BSR          getsfx, R1
  ADD          RQ10, 0, RQ23
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ23, (RQ26, 32)
// i_sound_btsh.c:1138   S_sfx[i].samprate = rate;
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (R2, 140), RD27
  MOV.L        RD27, (RQ26, 48)
  BSR          .L00801212, R0

.L00801211:
// i_sound_btsh.c:1144   S_sfx[i].data = S_sfx[i].link->data;
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ8
  MOV.Q        (RQ8, 32), RQ23
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ23, (RQ26, 32)
// i_sound_btsh.c:1145   lengths[i] = lengths[(S_sfx[i].link - S_sfx)/sizeof(sfxinfo_t)];
  ADD          R0, 56, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ8
  ADD          RQ8, 0, RQ20
  SUB          RQ20, RQ27, RQ20
  ADD          R0, 56, RD27
  DIVS.L       RQ20, RD27, RQ20
  ADD          RQ20, 0, RQ13
  DIVS.Q       RQ13, RQ27, RQ13
  MOV          lengths, RQ12
  MOV.L        (RQ12, RQ13), RQ11
  MOV.L        RQ11, (RQ12, RD18)

.L00801212:
// i_sound_btsh.c:1148   dotfra++;
  ADDS.L       RD21, 1, RD21
// i_sound_btsh.c:1149   if(dotfra>=dotrem)
  MOV.L        (R2, 136), RD27
  BRLT.L       RD27, RD21, .L00801213
// i_sound_btsh.c:1150   {
  ADD          R0, 0, RD21
// i_sound_btsh.c:1152   fputc('.', stderr);
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          R0, 46, RD10
  ADD          RQ22, 0, RQ11
  BSR          fputc, R1
// i_sound_btsh.c:1153   fflush(stderr);
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ23
  ADD          RQ23, 0, RQ10
  BSR          fflush, R1

.L00801213:
  ADDS.L       RD18, 1, RD18
  BRLT.L       109, RD18, .L0080120B

.L0080120D:
// i_sound_btsh.c:1157   fprintf( stderr, " pre-cached all sound data\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ9
  MOV.Q        (RQ9, 0), RQ22
  ADD          RQ22, 0, RQ10
  MOV          .L00C0312E, RQ11
  BSR          fprintf, R1
// i_sound_btsh.c:1160   for ( i = 0; i< MIXBUFFERSIZE; i++ )
  ADD          R0, 0, RD18

.L00801214:
// i_sound_btsh.c:1161   mixbuffer[i] = 0;
  MOV          mixbuffer, RQ27
  MOV.W        RD0, (RQ27, RD18)
  ADDS.L       RD18, 1, RD18
  ADD          R0, 1024, RD27
  BRLT.L       RD27, RD18, .L00801214

.L00801216:
// i_sound_btsh.c:1164   fprintf(stderr, "I_InitSound: sound module ready\n");
  BSR          __get_stderr, R1
  ADD          RQ10, 0, RQ8
  MOV.Q        (RQ8, 0), RQ23
  ADD          RQ23, 0, RQ10
  MOV          .L00C0312F, RQ11
  BSR          fprintf, R1

.L00C03128:
  ADD          R2, 368, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

P_SetupLevel:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R25, (R2, 48)
  MOV.Q        R21, (R2, 24)
  MOV.X        R26, (R2, 56)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  MOV.L        RD10, (R2, 124)
  ADD          RD11, 0, RD21
  MOV.L        RD12, (R2, 116)
  MOV.L        RD13, (R2, 112)
  ADD          R2, 128, RQ6
  MOV.Q        RQ6, (R2, 104)
// p_setup.c:1228   char	lumpname[9];
// p_setup.c:1231   totalkills = totalitems = totalsecret = wminfo.maxfrags = 0;
  MOV          wminfo, RQ27
  MOV.L        RD0, (RQ27, 28)
  MOV.L        RD0, totalsecret
  MOV.L        RD0, totalitems
  MOV.L        RD0, totalkills
// p_setup.c:1232   wminfo.partime = 180;
  ADD          R0, 180, RD26
  MOV.L        RD26, (RQ27, 32)
// p_setup.c:1233   for (i=0 ; i<MAXPLAYERS ; i++)
  ADD          RD0, 0, RD18

.L0080204C:
// p_setup.c:1234   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RD0, (RQ26, 212)
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RD0, (RQ26, 216)
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RD0, (RQ26, 208)
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L0080204C

.L0080204E:
// p_setup.c:1241   players[consoleplayer].viewz = 1; 
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ25, 20)
// p_setup.c:1244   S_Start ();			
  BSR          S_Start, R1
// p_setup.c:1255   Z_FreeTags (PU_LEVEL, PU_PURGELEVEL-1);
  ADD          R0, 50, RD10
  ADD          R0, 99, RD11
  BSR          Z_FreeTags, R1
// p_setup.c:1260   P_InitThinkers ();
  BSR          P_InitThinkers, R1
// p_setup.c:1263   W_Reload ();			
  BSR          W_Reload, R1
// p_setup.c:1267   if ( (gamemode == commercial) ||
  MOV.L        gamemode, RD26
  ADD          R0, 2, R5
  CMPEQ.Q      RD26, R5, RQ23
  ADD          R0, 5, R5
  CMPEQ.Q      RD26, R5, RQ9
  OR           RQ23, RQ9, RQ22
  BREQ.L       R0, RQ22, .L0080204F
  BRGE.L       10, RD21, .L00802050
// p_setup.c:1271   sprintf (lumpname,"map0%i", map);
  ADD          R2, 128, RQ10
  MOV          .L00C03136, RQ11
  ADD          RD21, 0, RD12
  BSR          sprintf, R1
  BSR          .L00802051, R0

.L00802050:
// p_setup.c:1273   sprintf (lumpname,"map%i", map);
  ADD          R2, 128, RQ10
  MOV          .L00C03137, RQ11
  ADD          RD21, 0, RD12
  BSR          sprintf, R1

.L00802051:
  BSR          .L00802052, R0

.L0080204F:
// p_setup.c:1276   {
  ADD          R2, 128, RQ27
  ADD          R0, 69, RD26
  MOV.B        RD26, (RQ27, 0)
// p_setup.c:1278   lumpname[1] = '0' + episode;
  MOV.L        (R2, 124), RD25
  ADDS.L       RD25, 48, RQ23
  MOV.B        RQ23, (RQ27, 1)
// p_setup.c:1279   lumpname[2] = 'M';
  ADD          R0, 77, RD13
  MOV.B        RD13, (RQ27, 2)
// p_setup.c:1280   lumpname[3] = '0' + map;
  ADDS.L       RD21, 48, RQ9
  MOV.B        RQ9, (RQ27, 3)
// p_setup.c:1281   lumpname[4] = 0;
  MOV.B        RD0, (RQ27, 4)

.L00802052:
// p_setup.c:1284   lumpnum = W_GetNumForName (lumpname);
  ADD          R2, 128, RQ10
  BSR          W_GetNumForName, R1
  ADDS.L       RQ10, 0, RD8
// p_setup.c:1286   if(lumpnum<0)
  BRLT.L       R0, RD8, .L00C03135
// p_setup.c:1291   leveltime = 0;
  MOV.L        RD0, leveltime
// p_setup.c:1293   p_map_hexenfmt = 0;		//BGB: Assume map not in Hexen format.
  MOV.L        RD0, p_map_hexenfmt
// p_setup.c:1295   R_FlushPolyObj();
  BSR          R_FlushPolyObj, R1
// p_setup.c:1298   P_LoadBlockMap (lumpnum+ML_BLOCKMAP);
  ADDS.L       RD8, 10, RQ22
  ADD          RQ22, 0, RD10
  BSR          P_LoadBlockMap, R1
// p_setup.c:1299   P_LoadVertexes (lumpnum+ML_VERTEXES);
  ADDS.L       RD8, 4, RQ23
  ADD          RQ23, 0, RD10
  BSR          P_LoadVertexes, R1
// p_setup.c:1300   P_LoadSectors (lumpnum+ML_SECTORS);
  ADDS.L       RD8, 8, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          P_LoadSectors, R1
// p_setup.c:1301   P_LoadSideDefs (lumpnum+ML_SIDEDEFS);
  ADDS.L       RD8, 3, RQ22
  ADD          RQ22, 0, RD10
  BSR          P_LoadSideDefs, R1
// p_setup.c:1303   P_LoadBehavior (lumpnum+ML_BEHAVIOR);	//BGB: Hints map format
  ADDS.L       RD8, 11, RQ23
  ADD          RQ23, 0, RD10
  BSR          P_LoadBehavior, R1
// p_setup.c:1305   P_LoadLineDefs (lumpnum+ML_LINEDEFS);
  ADDS.L       RD8, 2, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          P_LoadLineDefs, R1
// p_setup.c:1306   P_LoadSubsectors (lumpnum+ML_SSECTORS);
  ADDS.L       RD8, 6, RQ22
  ADD          RQ22, 0, RD10
  BSR          P_LoadSubsectors, R1
// p_setup.c:1307   P_LoadNodes (lumpnum+ML_NODES);
  ADDS.L       RD8, 7, RQ23
  ADD          RQ23, 0, RD10
  BSR          P_LoadNodes, R1
// p_setup.c:1308   P_LoadSegs (lumpnum+ML_SEGS);
  ADDS.L       RD8, 5, RQ9
  ADDS.L       RQ9, 0, RD10
  BSR          P_LoadSegs, R1
// p_setup.c:1310   P_GroupLines ();
  BSR          P_GroupLines, R1
// p_setup.c:1311   P_LoadReject (lumpnum+ML_REJECT);
  ADDS.L       RD8, 9, RQ22
  ADD          RQ22, 0, RD10
  BSR          P_LoadReject, R1
// p_setup.c:1315   bodyqueslot = 0;
  MOV.L        RD0, bodyqueslot
// p_setup.c:1316   deathmatch_p = deathmatchstarts;
  MOV          deathmatchstarts, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, deathmatch_p
// p_setup.c:1317   P_LoadThings (lumpnum+ML_THINGS);
  ADDS.L       RD8, 1, RQ23
  ADD          RQ23, 0, RD10
  BSR          P_LoadThings, R1
// p_setup.c:1320   if (deathmatch)
  MOV.L        deathmatch, RD27
  BREQ.L       R0, RD27, .L00802053
// p_setup.c:1321   {
  ADD          RD0, 0, RD18

.L00802054:
// p_setup.c:1323   {
  MOV          playeringame, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BREQ.L       R0, RQ9, .L00802057
// p_setup.c:1325   {
  MOV          players, RQ27
  ADD          R0, 320, R5
  MUL.L        RD18, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        RQ0, (RQ26, 0)
// p_setup.c:1327   G_DeathMatchSpawnPlayer (i);
  ADD          RD18, 0, RD10
  BSR          G_DeathMatchSpawnPlayer, R1

.L00802057:
  ADDS.L       RD18, 1, RD18
  BRLT.L       4, RD18, .L00802054

.L00802056:

.L00802053:
// p_setup.c:1333   iquehead = iquetail = 0;		
  MOV.L        RD0, iquetail
  MOV.L        RD0, iquehead
// p_setup.c:1336   P_SpawnSpecials ();
  BSR          P_SpawnSpecials, R1
// p_setup.c:1342   if (precache)
  MOV.L        precache, RD27
  BREQ.L       R0, RD27, .L00802058
// p_setup.c:1343   {
  BSR          R_PrecacheLevel, R1

.L00802058:

.L00C03135:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R25
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0
  .balign 4

tk_vsprintf:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -568, R2
  MOV.Q        RQ10, (R2, 152)
  MOV.Q        RQ11, (R2, 144)
  MOV.Q        RQ12, (R2, 136)
// pdpc201/btshx_supa.c:1786   
  MOV.Q        (R2, 152), RQ23
// pdpc201/btshx_supa.c:1787   
  MOV.Q        (R2, 144), RQ18
// pdpc201/btshx_supa.c:1788   
  BSR          .L00800FF4, R0

.L00800FF5:
// pdpc201/btshx_supa.c:1789   
  MOV.B        (RQ18, 0), RQ8
  BREQ.Q       37, RQ8, .L00800FF6
// pdpc201/btshx_supa.c:1791   
  MOV.B        (RQ18, 0), RQ8
  ADD          RQ18, 1, RQ18
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  MOV.B        RQ8, (RQ21, 0)
  BSR          .L00800FF4, R0

.L00800FF6:
// pdpc201/btshx_supa.c:1793   
  MOV.B        (RQ18, 1), RQ8
  BRNE.Q       37, RQ8, .L00800FF7
// pdpc201/btshx_supa.c:1794   
  ADD          RQ18, 2, RQ18
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  ADD          R0, 37, RD27
  MOV.B        RD27, (RQ21, 0)
  BSR          .L00800FF4, R0

.L00800FF7:
  ADD          RQ18, 1, RQ18
// pdpc201/btshx_supa.c:1797   
  MOV.L        RD0, (R2, 108)
// pdpc201/btshx_supa.c:1800   
  MOV.B        (RQ18, 0), RQ8
  BRNE.Q       48, RQ8, .L00800FF8
// pdpc201/btshx_supa.c:1801   
  ADD          R0, 48, RD27
  MOV.L        RD27, (R2, 132)
// pdpc201/btshx_supa.c:1803   
  ADD          RQ18, 1, RQ18
  BSR          .L00800FF9, R0

.L00800FF8:
// pdpc201/btshx_supa.c:1805   
  ADD          R0, 32, RD27
  MOV.L        RD27, (R2, 132)

.L00800FF9:
// pdpc201/btshx_supa.c:1809   
  MOV.L        RD0, (R2, 116)
// pdpc201/btshx_supa.c:1810   
  MOV.B        (RQ18, 0), RQ8
  BRLT.L       48, RQ8, .L00800FFA
  MOV.B        (RQ18, 0), RQ8
  BRGT.L       57, RQ8, .L00800FFA

.L00800FFB:
// pdpc201/btshx_supa.c:1811   
  BSR          .L00800FFC, R0

.L00800FFD:
// pdpc201/btshx_supa.c:1813   
  MOV.L        (R2, 116), RD27
  ADD          R0, 10, R5
  MULS.L       RD27, R5, RQ8
  MOV.B        (RQ18, 0), RQ9
  ADD          RQ18, 1, RQ18
  ADDS.L       RQ9, -48, RQ22
  ADDS.L       RQ8, RQ22, RD27
  MOV.L        RD27, (R2, 116)

.L00800FFC:
  MOV.B        (RQ18, 0), RQ8
  BRLT.L       48, RQ8, .L00800FFE
  MOV.B        (RQ18, 0), RQ9
  BRGT.L       57, RQ9, .L00800FFE
  BSR          .L00800FFD, R0

.L00800FFE:

.L00800FFF:

.L00800FFA:
// pdpc201/btshx_supa.c:1816   
  MOV.L        RD0, (R2, 112)
// pdpc201/btshx_supa.c:1817   
  MOV.B        (RQ18, 0), RQ22
  BRNE.Q       46, RQ22, .L00801000
// pdpc201/btshx_supa.c:1818   
  ADD          RQ18, 1, RQ18
  MOV.B        (RQ18, 0), RQ8
  BRLT.L       48, RQ8, .L00801001
  MOV.B        (RQ18, 0), RQ9
  BRGT.L       57, RQ9, .L00801001

.L00801002:
// pdpc201/btshx_supa.c:1821   
  BSR          .L00801003, R0

.L00801004:
// pdpc201/btshx_supa.c:1823   
  MOV.L        (R2, 112), RD27
  ADD          R0, 10, R5
  MULS.L       RD27, R5, RQ22
  MOV.B        (RQ18, 0), RQ8
  ADD          RQ18, 1, RQ18
  ADDS.L       RQ8, -48, RQ9
  ADDS.L       RQ22, RQ9, RD27
  MOV.L        RD27, (R2, 112)

.L00801003:
  MOV.B        (RQ18, 0), RQ22
  BRLT.L       48, RQ22, .L00801005
  MOV.B        (RQ18, 0), RQ8
  BRGT.L       57, RQ8, .L00801005
  BSR          .L00801004, R0

.L00801005:

.L00801006:

.L00801001:

.L00801000:
// pdpc201/btshx_supa.c:1827   
  MOV.B        (RQ18, 0), RQ9
  BRNE.Q       108, RQ9, .L00801007
// pdpc201/btshx_supa.c:1828   
  ADD          RQ18, 1, RQ18
  MOV.B        (RQ18, 0), RQ22
  BRNE.Q       108, RQ22, .L00801008
// pdpc201/btshx_supa.c:1831   
  ADD          RQ18, 1, RQ18

.L00801008:
// pdpc201/btshx_supa.c:1832   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 108)
  BSR          .L00801009, R0

.L00801007:
  MOV.B        (RQ18, 0), RQ8
  BRNE.Q       76, RQ8, .L0080100A
// pdpc201/btshx_supa.c:1835   
  ADD          RQ18, 1, RQ18
// pdpc201/btshx_supa.c:1837   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 108)

.L0080100A:

.L00801009:
// pdpc201/btshx_supa.c:1842   
  MOV.B        (RQ18, 0), RQ9
  ADD          RQ18, 1, RQ18
  BREQ.Q       99, RQ9, .L0080100B
  BREQ.Q       100, RQ9, .L0080100C
  BREQ.Q       105, RQ9, .L0080100D
  BREQ.Q       88, RQ9, .L0080100E
  BREQ.Q       120, RQ9, .L0080100F
  BREQ.Q       115, RQ9, .L00801010
  BREQ.Q       112, RQ9, .L00801011
  BSR          .L00801012, R0

.L0080100B:
// pdpc201/btshx_supa.c:1844   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ22
  ADDS.L       RQ22, 0, RQ27
// pdpc201/btshx_supa.c:1846   
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  SHAD.Q       RQ27, 56, RQ9
  SHAR.Q       RQ9, 56, RQ9
  MOV.Q        RQ27, (R2, 120)
  MOV.B        RQ9, (RQ21, 0)
// pdpc201/btshx_supa.c:1847   
  BSR          .L00801013, R0

.L0080100C:

.L0080100D:
// pdpc201/btshx_supa.c:1850   
  MOV.L        (R2, 108), RD27
  BREQ.L       R0, RD27, .L00801014
// pdpc201/btshx_supa.c:1852   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 120)
  BSR          .L00801015, R0

.L00801014:
// pdpc201/btshx_supa.c:1854   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_i, R1
  ADDS.L       RD10, 0, RQ8
  ADDS.L       RQ8, 0, RQ27
  MOV.Q        RQ27, (R2, 120)

.L00801015:
// pdpc201/btshx_supa.c:1855   
  MOV.L        (R2, 116), RD27
  BREQ.L       R0, RD27, .L00801016
// pdpc201/btshx_supa.c:1856   
  MOV.Q        (R2, 120), RQ27
  ADDS.L       RQ27, 0, RQ9
  ADD          RQ23, 0, RQ10
  ADDS.L       RQ9, 0, RD11
  MOV.L        (R2, 116), RD12
  BSR          tk_sprint_decimal_n, R1
  ADD          RQ10, 0, RQ23
  BSR          .L00801017, R0

.L00801016:
// pdpc201/btshx_supa.c:1858   
  MOV.Q        (R2, 120), RQ27
  ADDS.L       RQ27, 0, RQ22
  ADD          RQ23, 0, RQ10
  ADD          RQ22, 0, RD11
  BSR          tk_sprint_decimal, R1
  ADD          RQ10, 0, RQ23

.L00801017:
  BSR          .L00801013, R0

.L0080100E:

.L0080100F:
// pdpc201/btshx_supa.c:1861   
  MOV.L        (R2, 108), RD27
  BREQ.L       R0, RD27, .L00801018
// pdpc201/btshx_supa.c:1863   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 120)
  BSR          .L00801019, R0

.L00801018:
// pdpc201/btshx_supa.c:1865   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_i, R1
  ADDS.L       RD10, 0, RQ8
  ADDS.L       RQ8, 0, RQ27
  MOV.Q        RQ27, (R2, 120)

.L00801019:
// pdpc201/btshx_supa.c:1867   
  MOV.L        (R2, 116), RD27
  BRNE.L       R0, RD27, .L0080101A
  MOV.Q        (R2, 120), RQ10
  BSR          tk_print_hex_genw, R1
  MOV.L        RD10, (R2, 116)

.L0080101A:
// pdpc201/btshx_supa.c:1872   
  ADD          RQ23, 0, RQ10
  MOV.Q        (R2, 120), RQ11
  MOV.L        (R2, 116), RD12
  BSR          tk_sprint_hex_n, R1
  ADD          RQ10, 0, RQ23
// pdpc201/btshx_supa.c:1873   
  BSR          .L00801013, R0

.L00801010:
// pdpc201/btshx_supa.c:1874   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ21
  ADD          RQ21, 0, RQ20
// pdpc201/btshx_supa.c:1876   
  BRNE.Q       R0, RQ20, .L0080101B
// pdpc201/btshx_supa.c:1877   
  MOV          .L00C03008, RQ20

.L0080101B:
// pdpc201/btshx_supa.c:1878   
  BSR          .L0080101C, R0

.L0080101D:
// pdpc201/btshx_supa.c:1879   
  MOV.B        (RQ20, 0), RQ9
  ADD          RQ20, 1, RQ20
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  MOV.B        RQ9, (RQ21, 0)

.L0080101C:
  MOV.B        (RQ20, 0), RQ9
  BRNE.L       R0, RQ9, .L0080101D

.L0080101E:
  BSR          .L00801013, R0

.L00801011:
// pdpc201/btshx_supa.c:1882   
  MOV.Q        (R2, 136), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ21
  ADD          RQ21, 0, RQ20
// pdpc201/btshx_supa.c:1885   
  ADD          RQ23, 0, RQ10
  ADD          RQ20, 0, RQ11
  ADD          R0, 12, RD12
  BSR          tk_sprint_hex_n, R1
  ADD          RQ10, 0, RQ23
// pdpc201/btshx_supa.c:1886   
  BSR          .L00801013, R0

.L00801012:
// pdpc201/btshx_supa.c:1897   

.L00801013:

.L00800FF4:
  MOV.B        (RQ18, 0), RQ9
  BRNE.L       R0, RQ9, .L00800FF5

.L0080101F:
// pdpc201/btshx_supa.c:1903   
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 1, RQ23
  MOV.B        RD0, (RQ21, 0)

.L00C0313D:
  ADD          R2, 568, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

ST_loadGraphics:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  ADD          R2, 96, RQ6
  MOV.Q        RQ6, (R2, 88)
  ADD          R0, 1, RD21
// st_stuff.c:1187   char	namebuf[9];
// st_stuff.c:1189   if ( W_CheckNumForName("STTNUM0") > 0 )
  MOV          .L00C03144, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ23
  BRLE.L       R0, RQ23, .L00802C32
// st_stuff.c:1192   for (i=0;i<10;i++)
  ADD          R0, 0, RD9

.L00802C33:
// st_stuff.c:1193   {
  ADD          R2, 96, RQ10
  MOV          .L00C03145, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1196   tallnum[i] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/tallnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
// st_stuff.c:1198   sprintf(namebuf, "STYSNUM%d", i);
  ADD          R2, 96, RQ10
  MOV          .L00C03146, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1200   shortnum[i] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/shortnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
// st_stuff.c:1202   hu_shortnum[i]=shortnum[i];
  MOV.Q        (RQ20, RD9), RQ18
  MOV          hu_shortnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       10, RD9, .L00802C33

.L00802C35:
  BSR          .L00802C36, R0

.L00802C32:
  MOV          .L00C03147, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ23
  BRLE.L       R0, RQ23, .L00802C37
// st_stuff.c:1209   for (i=0;i<10;i++)
  ADD          R0, 0, RD9

.L00802C38:
// st_stuff.c:1210   {
  ADD          R2, 96, RQ10
  MOV          .L00C03148, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1213   tallnum[i] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/tallnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
// st_stuff.c:1215   sprintf(namebuf, "SMALLIN%d", i);
  ADD          R2, 96, RQ10
  MOV          .L00C03149, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1217   shortnum[i] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/shortnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
// st_stuff.c:1219   hu_shortnum[i]=shortnum[i];
  MOV.Q        (RQ20, RD9), RQ18
  MOV          hu_shortnum, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       10, RD9, .L00802C38

.L00802C3A:

.L00802C37:

.L00802C36:
// st_stuff.c:1226   tallpercent = (patch_t *) W_CachePatchName("STTPRCNT", PU_STATIC);
  MOV          .L00C0314A, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ18, TU7A00CB73/tallpercent
// st_stuff.c:1229   for (i=0;i<NUMCARDS;i++)
  ADD          R0, 0, RD9

.L00802C3B:
// st_stuff.c:1230   {
  ADD          R2, 96, RQ10
  MOV          .L00C0314B, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1233   keys[i] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/keys, RQ20
  MOV.Q        RQ18, (RQ20, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       6, RD9, .L00802C3B

.L00802C3D:
// st_stuff.c:1238   armsbg = (patch_t *) W_CachePatchName("STARMS", PU_STATIC);
  MOV          .L00C0314C, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ18, TU7A00CB73/armsbg
// st_stuff.c:1241   for (i=0;i<6;i++)
  ADD          R0, 0, RD9

.L00802C3E:
// st_stuff.c:1242   {
  ADDS.L       RD9, 2, RQ23
  ADD          R2, 96, RQ10
  MOV          .L00C0314D, RQ11
  ADD          RQ23, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1247   arms[i][0] = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV          TU7A00CB73/arms, RQ20
  SHAD.L       RD9, 4, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.Q        RQ18, (RQ27, 0)
// st_stuff.c:1250   arms[i][1] = shortnum[i+2]; 
  ADDS.L       RD9, 2, RQ23
  MOV          TU7A00CB73/shortnum, RQ26
  MOV.Q        (RQ26, RQ23), RQ18
  SHAD.L       RD9, 4, RQ27
  ADD          RQ20, RQ27, RQ27
  MOV.Q        RQ18, (RQ27, 8)
  ADDS.L       RD9, 1, RD9
  BRLT.L       6, RD9, .L00802C3E

.L00802C40:
// st_stuff.c:1254   sprintf(namebuf, "STFB%d", consoleplayer);
  ADD          R2, 96, RQ10
  MOV          .L00C0314E, RQ11
  MOV.L        consoleplayer, RD12
  BSR          sprintf, R1
// st_stuff.c:1256   faceback = (patch_t *) W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        RQ18, TU7A00CB73/faceback
// st_stuff.c:1260   statusbar = (patch_t *) W_CachePatchName("STBAR", PU_STATIC);
  MOV          .L00C0314F, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ20
  MOV.Q        RQ20, TU7A00CB73/statusbar
// st_stuff.c:1263   facenum = 0;
  ADD          RD0, 0, RD8
// st_stuff.c:1264   for (i=0;i<ST_NUMPAINFACES;i++)
  ADD          R0, 0, RD9

.L00802C41:
// st_stuff.c:1265   {
  ADD          R0, 0, RD22

.L00802C44:
// st_stuff.c:1267   {
  ADD          R2, 96, RQ10
  MOV          .L00C03150, RQ11
  ADDS.L       RD9, 0, RD12
  ADD          RD22, 0, RD13
  BSR          sprintf, R1
// st_stuff.c:1270   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
  ADDS.L       RD22, 1, RD22
  BRLT.L       3, RD22, .L00802C44

.L00802C46:
// st_stuff.c:1271   }
  ADD          R2, 96, RQ10
  MOV          .L00C03151, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1274   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
// st_stuff.c:1275   sprintf(namebuf, "STFTL%d0", i);	// turn left
  ADD          R2, 96, RQ10
  MOV          .L00C03152, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1277   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
// st_stuff.c:1278   sprintf(namebuf, "STFOUCH%d", i);	// ouch!
  ADD          R2, 96, RQ10
  MOV          .L00C03153, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1280   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
// st_stuff.c:1281   sprintf(namebuf, "STFEVL%d", i);	// evil grin ;)
  ADD          R2, 96, RQ10
  MOV          .L00C03154, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1283   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
// st_stuff.c:1284   sprintf(namebuf, "STFKILL%d", i);	// pissed off
  ADD          R2, 96, RQ10
  MOV          .L00C03155, RQ11
  ADDS.L       RD9, 0, RD12
  BSR          sprintf, R1
// st_stuff.c:1286   faces[facenum++] = W_CachePatchName(namebuf, PU_STATIC);
  ADD          R2, 96, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
  ADDS.L       RD9, 1, RD9
  BRLT.L       5, RD9, .L00802C41

.L00802C43:
// st_stuff.c:1289   faces[facenum++] = W_CachePatchName("STFGOD0", PU_STATIC);
  MOV          .L00C03156, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)
// st_stuff.c:1291   faces[facenum++] = W_CachePatchName("STFDEAD0", PU_STATIC);
  MOV          .L00C02F69, RQ10
  ADD          R0, 1, RD11
  BSR          W_CachePatchName, R1
  ADD          RQ10, 0, RQ18
  ADD          RD8, 0, RQ23
  ADDS.L       RD8, 1, RD8
  MOV          TU7A00CB73/faces, RQ20
  MOV.Q        RQ18, (RQ20, RQ23)

.L00C03143:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

M_LoadDefaults:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -592, R2
  ADD          R2, 160, RQ6
  MOV.Q        RQ6, (R2, 136)
  ADD          R2, 256, RQ6
  MOV.Q        RQ6, (R2, 128)
// m_misc.c:381   char	def[80];
// m_misc.c:382   char	strparm[100];
// m_misc.c:387   parm = 0;
  MOV.L        RD0, (R2, 124)
// m_misc.c:390   numdefaults = sizeof(defaults)/sizeof(defaults[0]);
  ADD          R0, 27, RD27
// m_misc.c:391   for (i=0 ; i<numdefaults ; i++)
  ADD          R0, 0, RD9
  MOV.L        RD27, numdefaults
  BRGE.L       RD27, RD9, .L00801722

.L00801720:
// m_misc.c:392   *defaults[i].location = defaults[i].defaultvalue;
  MOV          defaults, RQ27
  SHAD.L       RD9, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ22
  SHAD.L       RD9, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 8), RQ18
  ADDS.L       RQ22, 0, RQ23
  MOV.L        RQ23, (RQ18, 0)
  ADDS.L       RD9, 1, RD9
  MOV.L        numdefaults, RD27
  BRLT.L       RD27, RD9, .L00801720

.L00801722:
// m_misc.c:395   i = M_CheckParm ("-config");
  MOV          .L00C0315D, RQ10
  BSR          M_CheckParm, R1
  ADDS.L       RQ10, 0, RD9
// m_misc.c:396   if (i && i<myargc-1)
  BREQ.L       R0, RD9, .L00801723
  MOV.L        myargc, RD27
  ADDS.L       RD27, -1, RQ23
  BRGE.L       RQ23, RD9, .L00801723

.L00801724:
// m_misc.c:397   {
  ADDS.L       RD9, 1, RQ23
  MOV.Q        myargv, RQ27
  MOV.Q        (RQ27, RQ23), RQ26
  MOV.Q        RQ26, defaultfile
// m_misc.c:399   printf ("	default file: %s\n",defaultfile);
  MOV          .L00C0315E, RQ10
  MOV.Q        defaultfile, RQ11
  BSR          printf, R1
  BSR          .L00801726, R0

.L00801723:
// m_misc.c:402   defaultfile = basedefault;
  MOV          basedefault, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, defaultfile

.L00801726:
// m_misc.c:405   f = fopen (defaultfile, "r");
  MOV.Q        defaultfile, RQ10
  MOV          .L00C0315F, RQ11
  BSR          fopen, R1
  ADD          RQ10, 0, RQ27
// m_misc.c:406   if (f)
  MOV.Q        RQ27, (R2, 144)
  BREQ.Q       R0, RQ27, .L00801727
// m_misc.c:407   {
  BSR          .L0080172A, R0

.L00801728:
// m_misc.c:409   {
  ADD          R0, 0, RD21
// m_misc.c:411   if (fscanf (f, "%79s %[^\n]\n", def, strparm) == 2)
  MOV.Q        (R2, 144), RQ10
  MOV          .L00C03160, RQ11
  ADD          R2, 160, RQ12
  ADD          R2, 256, RQ13
  BSR          fscanf, R1
  ADD          RQ10, 0, RQ23
  BRNE.Q       2, RQ23, .L0080172B
  ADD          R2, 256, RQ27
  MOV.B        (RQ27, 0), RQ23
  BRNE.Q       34, RQ23, .L0080172C
// m_misc.c:416   isstring = true;
  ADD          R0, 1, RD21
// m_misc.c:417   len = strlen(strparm);
  ADD          R2, 256, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ22
  ADDS.L       RQ22, 0, RD27
// m_misc.c:418   newstring = (char *) malloc(len+1);
  ADDS.L       RD27, 1, RQ23
  MOV.L        RD27, (R2, 156)
  ADDS.L       RQ23, 0, RQ22
  ADD          RQ22, 0, RQ10
  BSR          malloc, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RQ20
// m_misc.c:419   strparm[len-1] = 0;
  ADDS.L       RD27, -1, RQ8
  ADD          R2, 256, RQ26
  MOV.B        RD0, (RQ26, RQ8)
// m_misc.c:420   strcpy(newstring, strparm+1);
  ADD          RQ26, 1, RQ18
  ADD          RQ20, 0, RQ10
  ADD          RQ18, 0, RQ11
  BSR          strcpy, R1
  BSR          .L0080172D, R0

.L0080172C:
  ADD          R2, 256, RQ27
  MOV.B        (RQ27, 0), RQ8
  BRNE.Q       48, RQ8, .L0080172E
  ADD          R2, 256, RQ27
  MOV.B        (RQ27, 1), RQ8
  BRNE.Q       120, RQ8, .L0080172E

.L0080172F:
// m_misc.c:423   sscanf(strparm+2, "%x", &parm);
  ADD          R2, 124, RQ18
  ADD          R2, 256, RQ27
  ADD          RQ27, 2, RQ10
  MOV          .L00C03161, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sscanf, R1
  BSR          .L00801731, R0

.L0080172E:
// m_misc.c:425   sscanf(strparm, "%i", &parm);
  ADD          R2, 124, RQ18
  ADD          R2, 256, RQ10
  MOV          .L00C03162, RQ11
  ADD          RQ18, 0, RQ12
  BSR          sscanf, R1

.L00801731:

.L0080172D:
// m_misc.c:426   for (i=0 ; i<numdefaults ; i++)
  ADD          R0, 0, RD9
  MOV.L        numdefaults, RD27
  BRGE.L       RD27, RD9, .L00801734

.L00801732:
// m_misc.c:427   if (!strcmp(def, defaults[i].name))
  MOV          defaults, RQ27
  SHAD.L       RD9, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ18
  ADD          R2, 160, RQ10
  ADD          RQ18, 0, RQ11
  BSR          strcmp, R1
  ADDS.L       RQ10, 0, RQ8
  BRNE.L       R0, RQ8, .L00801735
  BRNE.L       R0, RD21, .L00801736
// m_misc.c:430   *defaults[i].location = parm;
  MOV          defaults, RQ27
  SHAD.L       RD9, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 8), RQ18
  MOV.L        (R2, 124), RD27
  MOV.L        RD27, (RQ18, 0)
  BSR          .L00801737, R0

.L00801736:
// m_misc.c:434   *((char **)defaults[i].location) =
  MOV          defaults, RQ27
  SHAD.L       RD9, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 8), RQ18
  MOV.Q        RQ20, (RQ18, 0)

.L00801737:
// m_misc.c:436   break;
  BSR          .L00801734, R0

.L00801735:
  ADDS.L       RD9, 1, RD9
  MOV.L        numdefaults, RD27
  BRLT.L       RD27, RD9, .L00801732

.L00801734:

.L0080172B:

.L0080172A:
  MOV.Q        (R2, 144), RQ10
  BSR          feof, R1
  ADDS.L       RQ10, 0, RQ8
  BREQ.L       R0, RQ8, .L00801728

.L00801729:
// m_misc.c:441   fclose (f);
  MOV.Q        (R2, 144), RQ10
  BSR          fclose, R1

.L00801727:

.L00C0315C:
  ADD          R2, 592, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

P_LoadLineDefs:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -440, R2
  MOV.L        RD10, (R2, 252)
// p_setup.c:779   lsz = W_LumpLength (lump);
  MOV.L        (R2, 252), RD10
  BSR          W_LumpLength, R1
  MOV.L        RD10, (R2, 232)
// p_setup.c:781   if(!p_map_hexenfmt)
  MOV.L        p_map_hexenfmt, RD27
  BRNE.L       R0, RD27, .L00801FF3
  MOV.L        (R2, 232), RD27
  ADD          R0, 14, R5
  MODS.L       RD27, R5, RQ23
  BRNE.L       R0, RQ23, .L00801FF5
  MOV.L        gamemode, RD27
  BREQ.Q       5, RD27, .L00801FF5
  BSR          .L00801FF4, R0

.L00801FF5:
  MOV.L        (R2, 232), RD23
  ADD          R0, 16, RD27
  MODS.L       RQ23, RD27, RQ23
  BREQ.L       R0, RQ23, .L00801FF7
// p_setup.c:786   {
  MOV          .L00C03169, RQ10
  BSR          I_Error, R1

.L00801FF7:
// p_setup.c:790   p_map_hexenfmt=1;
  ADD          R0, 1, RD27
  MOV.L        RD27, p_map_hexenfmt

.L00801FF4:
  BSR          .L00801FF8, R0

.L00801FF3:
  MOV.L        (R2, 232), RD23
  ADD          R0, 16, RD27
  MODS.L       RQ23, RD27, RQ23
  BREQ.L       R0, RQ23, .L00801FF9
// p_setup.c:795   {
  MOV          .L00C03169, RQ10
  BSR          I_Error, R1

.L00801FF9:

.L00801FF8:
// p_setup.c:800   if(p_map_hexenfmt)
  MOV.L        p_map_hexenfmt, RD27
  BREQ.L       R0, RD27, .L00801FFA
// p_setup.c:801   {
  MOV.L        (R2, 232), RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, numlines
  ADD          R0, 16, RD26
  MOV.L        numlines, RD25
  DIVS.L       RD25, RD26, RD25
  MOV.L        RD25, numlines
  BSR          .L00801FFB, R0

.L00801FFA:
// p_setup.c:804   {
  MOV.L        (R2, 232), RD27
  ADD          R0, 14, R5
  DIVS.L       RD27, R5, RD26
  MOV.L        RD26, numlines

.L00801FFB:
// p_setup.c:808   lines = Z_Malloc ((numlines+10)*sizeof(line_t),PU_LEVEL_LINES,0);	
  MOV.L        numlines, RD27
  ADDS.L       RD27, 10, RQ23
  ADD          R0, 96, R5
  MULS.L       RQ23, R5, RQ10
  ADD          R0, 58, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, lines
// p_setup.c:809   memset (lines, 0, (numlines+10)*sizeof(line_t));
  MOV.L        numlines, RD27
  ADDS.L       RD27, 10, RQ23
  ADD          R0, 96, R5
  MULS.L       RQ23, R5, RQ27
  ADDS.L       RQ27, 0, RQ26
  MOV.Q        lines, RQ10
  ADD          R0, 0, RD11
  ADD          RQ26, 0, RQ12
  BSR          memset, R1
// p_setup.c:810   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 252), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  ADD          RQ10, 0, RQ25
// p_setup.c:812   fakelines = lines+numlines;
  MOV.Q        lines, RQ24
  MOV.L        numlines, RD19
  ADD          R0, 96, R5
  MUL.L        RD19, R5, RQ27
  ADD          RQ24, RQ27, RQ27
  MOV.Q        RQ27, fakelines
// p_setup.c:814   mld = (maplinedef_t *)data;
  MOV.Q        RQ25, (R2, 216)
// p_setup.c:815   mld2 = (maplinedef2_t *)data;
  ADD          RQ25, 0, RQ21
  MOV.Q        RQ25, (R2, 240)
// p_setup.c:816   ld = lines;
  ADD          RQ24, 0, RQ18
// p_setup.c:817   for (i=0 ; i<numlines ; i++, mld++, mld2++, ld++)
  ADD          R0, 0, RD27
  MOV.L        RD27, (R2, 236)
  BRGE.L       RD19, RD27, .L00801FFE

.L00801FFC:
// p_setup.c:818   {
  MOV.L        p_map_hexenfmt, RD27
  BREQ.L       R0, RD27, .L00801FFF
// p_setup.c:824   ld->flags		= SHORT(mld2->flags);
  MOV.W        (RQ21, 4), RQ23
  MOV.W        RQ23, (RQ18, 24)
// p_setup.c:826   ld->special		= mld2->acs_spec ? 1024:0;
  MOVU.B       (RQ21, 6), RQ8
  BREQ.L       R0, RQ8, .L00802000
  ADD          R0, 1024, RQ23
  BSR          .L00802001, R0

.L00802000:
  ADD          R0, 0, RQ23

.L00802001:
  MOV.W        RQ23, (RQ18, 26)
// p_setup.c:827   ld->tag			= 0;
  MOV.W        RD0, (RQ18, 28)
// p_setup.c:828   ld->acs_spec	= mld2->acs_spec;
  MOVU.B       (RQ21, 6), RQ23
  MOVU.B       RQ23, (RQ18, 30)
// p_setup.c:829   ld->arg1		= mld2->arg1;
  MOVU.B       (RQ21, 7), RQ8
  MOVU.B       RQ8, (RQ18, 31)
// p_setup.c:830   ld->arg2		= mld2->arg2;
  MOVU.B       (RQ21, 8), RQ23
  MOVU.B       RQ23, (RQ18, 32)
// p_setup.c:831   ld->arg3		= mld2->arg3;
  MOVU.B       (RQ21, 9), RQ8
  MOVU.B       RQ8, (RQ18, 33)
// p_setup.c:832   ld->arg4		= mld2->arg4;
  MOVU.B       (RQ21, 10), RQ23
  MOVU.B       RQ23, (RQ18, 34)
// p_setup.c:833   ld->arg5		= mld2->arg5;
  MOVU.B       (RQ21, 11), RQ8
  MOVU.B       RQ8, (RQ18, 35)
// p_setup.c:835   acpr=0;
  MOV.L        RD0, (R2, 228)
// p_setup.c:837   switch(mld2->acs_spec)
  MOVU.B       (RQ21, 6), RQ23
  AND          RQ23, 255, RQ8
  BRGE.L       70, RQ8, .L0080200C
  BREQ.L       R0, RQ23, .L00802003
  BREQ.Q       11, RQ23, .L00802004
  BREQ.Q       12, RQ23, .L00802005
  BREQ.Q       13, RQ23, .L00802006
  BSR          .L0080200B, R0

.L0080200C:
  BREQ.Q       70, RQ23, .L00802007
  BREQ.Q       71, RQ23, .L00802008
  BREQ.Q       74, RQ23, .L00802009
  BREQ.Q       80, RQ23, .L0080200A
  BSR          .L0080200B, R0

.L00802003:
// p_setup.c:839   case 0:		/* NOP */
  BSR          .L00802002, R0

.L00802004:
// p_setup.c:842   case 11: /* Door_Open */
  ADD          R0, 1, RD27
  MOV.W        RD27, (RQ18, 26)
// p_setup.c:844   break;
  BSR          .L00802002, R0

.L00802005:
// p_setup.c:845   case 12: /* Door_Raise */
  ADD          R0, 31, RD27
  MOV.W        RD27, (RQ18, 26)
// p_setup.c:847   break;
  BSR          .L00802002, R0

.L00802006:
// p_setup.c:848   case 13: /* Door_LockedRaise */
  ADD          R0, 31, RD27
  MOV.W        RD27, (RQ18, 26)
// p_setup.c:850   break;
  BSR          .L00802002, R0

.L00802007:

.L00802008:
// p_setup.c:853   case 71: /* Teleport_NoFog */
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 228)
// p_setup.c:855   ld->special = 39;
  ADD          R0, 39, RD26
  MOV.W        RD26, (RQ18, 26)
// p_setup.c:857   break;
  BSR          .L00802002, R0

.L00802009:
// p_setup.c:859   case 74: /* Teleport_NewMap */
  ADD          R0, 52, RD27
  MOV.W        RD27, (RQ18, 26)
// p_setup.c:861   break;
  BSR          .L00802002, R0

.L0080200A:
// p_setup.c:863   case 80:
  BSR          .L00802002, R0

.L0080200B:
// p_setup.c:866   default:
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 228)
// p_setup.c:868   break;

.L00802002:
  MOV.L        (R2, 228), RD27
  BREQ.L       R0, RD27, .L0080200D
// p_setup.c:872   {
  MOVU.B       (RQ18, 35), RQ8
  MOVU.B       (RQ18, 34), RQ22
  MOVU.B       (RQ18, 33), RQ20
  MOVU.B       (RQ18, 32), RQ27
  MOVU.B       (RQ18, 31), RQ12
  MOVU.B       (RQ18, 30), RQ11
  MOV          .L00C0316A, RQ10
  ADD          RQ27, 0, RD13
  ADD          RQ20, 0, RD14
  ADD          RQ22, 0, RD15
  ADD          RQ8, 0, RD16
  BSR          printf, R1

.L0080200D:
// p_setup.c:883   v1 = ld->v1		= &vertexes[SHORT(mld2->v1)];
  MOV.W        (RQ21, 0), RQ8
  MOV.Q        vertexes, RQ27
  LEA.Q        RQ27, RQ8, RQ9
  MOV.Q        RQ9, (RQ18, 0)
  MOV.Q        RQ9, (R2, 208)
// p_setup.c:884   v2 = ld->v2		= &vertexes[SHORT(mld2->v2)];
  MOV.W        (RQ21, 2), RQ8
  LEA.Q        RQ27, RQ8, RQ9
  MOV.Q        RQ9, (RQ18, 8)
  MOV.Q        RQ9, (R2, 200)
// p_setup.c:886   ld->sidenum[0] = SHORT(mld2->sidenum[0]);
  ADD          RQ21, 12, RQ9
  MOV.W        (RQ9, 0), RQ8
  ADD          RQ18, 36, RQ9
  MOV.W        RQ8, (RQ9, 0)
// p_setup.c:887   ld->sidenum[1] = SHORT(mld2->sidenum[1]);
  ADD          RQ21, 12, RQ9
  MOV.W        (RQ9, 2), RQ8
  ADD          RQ18, 36, RQ9
  MOV.W        RQ8, (RQ9, 2)
  BSR          .L0080200E, R0

.L00801FFF:
// p_setup.c:889   {
  MOV.Q        (R2, 216), RQ27
  MOV.W        (RQ27, 4), RQ8
  MOV.W        RQ8, (RQ18, 24)
// p_setup.c:891   ld->special = SHORT(mld->special);
  MOV.W        (RQ27, 6), RQ22
  MOV.W        RQ22, (RQ18, 26)
// p_setup.c:892   ld->tag = SHORT(mld->tag);
  MOV.W        (RQ27, 8), RQ20
  MOV.W        RQ20, (RQ18, 28)
// p_setup.c:893   ld->acs_spec	= 0;
  MOVU.B       RD0, (RQ18, 30)
// p_setup.c:894   ld->arg1		= 0;
  MOVU.B       RD0, (RQ18, 31)
// p_setup.c:895   ld->arg2		= 0;
  MOVU.B       RD0, (RQ18, 32)
// p_setup.c:896   ld->arg3		= 0;
  MOVU.B       RD0, (RQ18, 33)
// p_setup.c:897   ld->arg4		= 0;
  MOVU.B       RD0, (RQ18, 34)
// p_setup.c:898   ld->arg5		= 0;
  MOVU.B       RD0, (RQ18, 35)
// p_setup.c:900   v1 = ld->v1 = &vertexes[SHORT(mld->v1)];
  MOV.W        (RQ27, 0), RQ26
  MOV.Q        vertexes, RQ25
  LEA.Q        RQ25, RQ26, RQ9
  MOV.Q        RQ9, (RQ18, 0)
  MOV.Q        RQ9, (R2, 208)
// p_setup.c:901   v2 = ld->v2 = &vertexes[SHORT(mld->v2)];
  MOV.W        (RQ27, 2), RQ8
  LEA.Q        RQ25, RQ8, RQ9
  MOV.Q        RQ9, (RQ18, 8)
  MOV.Q        RQ9, (R2, 200)
// p_setup.c:902   ld->sidenum[0] = SHORT(mld->sidenum[0]);
  ADD          RQ27, 10, RQ9
  MOV.W        (RQ9, 0), RQ8
  ADD          RQ18, 36, RQ9
  MOV.W        RQ8, (RQ9, 0)
// p_setup.c:903   ld->sidenum[1] = SHORT(mld->sidenum[1]);
  ADD          RQ27, 10, RQ9
  MOV.W        (RQ9, 2), RQ8
  ADD          RQ18, 36, RQ9
  MOV.W        RQ8, (RQ9, 2)

.L0080200E:
// p_setup.c:904   }
  MOV.Q        (R2, 200), RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.Q        (R2, 208), RQ26
  MOV.L        (RQ26, 0), RQ22
  SUBS.L       RQ8, RQ22, RQ20
  MOV.L        RQ20, (RQ18, 16)
// p_setup.c:906   ld->dy = v2->y - v1->y;
  MOV.L        (RQ27, 4), RQ25
  MOV.L        (RQ26, 4), RQ24
  SUBS.L       RQ25, RQ24, RQ19
  MOV.L        RQ19, (RQ18, 20)
// p_setup.c:908   if (!ld->dx)
  MOV.L        (RQ18, 16), RQ8
  BRNE.L       R0, RQ8, .L0080200F
// p_setup.c:909   ld->slopetype = ST_VERTICAL;
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ18, 56)
  BSR          .L00802010, R0

.L0080200F:
  MOV.L        (RQ18, 20), RQ22
  BRNE.L       R0, RQ22, .L00802011
// p_setup.c:911   ld->slopetype = ST_HORIZONTAL;
  MOV.L        RD0, (RQ18, 56)
  BSR          .L00802012, R0

.L00802011:
  MOV.L        (RQ18, 16), RQ20
  MOV.L        (RQ18, 20), RQ27
  ADD          RQ27, 0, RD10
  ADD          RQ20, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ26
  BRLE.L       R0, RQ26, .L00802013
// p_setup.c:915   ld->slopetype = ST_POSITIVE;
  ADD          R0, 2, RD27
  MOV.L        RD27, (RQ18, 56)
  BSR          .L00802014, R0

.L00802013:
// p_setup.c:917   ld->slopetype = ST_NEGATIVE;
  ADD          R0, 3, RD27
  MOV.L        RD27, (RQ18, 56)

.L00802014:

.L00802012:

.L00802010:
// p_setup.c:920   if (v1->x < v2->x)
  MOV.Q        (R2, 208), RQ27
  MOV.L        (RQ27, 0), RQ26
  MOV.Q        (R2, 200), RQ25
  MOV.L        (RQ25, 0), RQ8
  BRGE.L       RQ8, RQ26, .L00802015
// p_setup.c:921   {
  MOV.Q        (R2, 208), RQ27
  MOV.L        (RQ27, 0), RQ22
  ADD          RQ18, 40, RQ9
  MOV.L        RQ22, (RQ9, 8)
// p_setup.c:923   ld->bbox[BOXRIGHT] = v2->x;
  MOV.Q        (R2, 200), RQ26
  MOV.L        (RQ26, 0), RQ8
  MOV.L        RQ8, (RQ9, 12)
  BSR          .L00802016, R0

.L00802015:
// p_setup.c:926   {
  MOV.Q        (R2, 200), RQ27
  MOV.L        (RQ27, 0), RQ22
  ADD          RQ18, 40, RQ9
  MOV.L        RQ22, (RQ9, 8)
// p_setup.c:928   ld->bbox[BOXRIGHT] = v1->x;
  MOV.Q        (R2, 208), RQ26
  MOV.L        (RQ26, 0), RQ8
  MOV.L        RQ8, (RQ9, 12)

.L00802016:
// p_setup.c:931   if (v1->y < v2->y)
  MOV.Q        (R2, 208), RQ27
  MOV.L        (RQ27, 4), RQ22
  MOV.Q        (R2, 200), RQ26
  MOV.L        (RQ26, 4), RQ20
  BRGE.L       RQ20, RQ22, .L00802017
// p_setup.c:932   {
  MOV.Q        (R2, 208), RQ27
  MOV.L        (RQ27, 4), RQ26
  ADD          RQ18, 40, RQ9
  MOV.L        RQ26, (RQ9, 4)
// p_setup.c:934   ld->bbox[BOXTOP] = v2->y;
  MOV.Q        (R2, 200), RQ25
  MOV.L        (RQ25, 4), RQ8
  MOV.L        RQ8, (RQ9, 0)
  BSR          .L00802018, R0

.L00802017:
// p_setup.c:937   {
  MOV.Q        (R2, 200), RQ27
  MOV.L        (RQ27, 4), RQ22
  ADD          RQ18, 40, RQ9
  MOV.L        RQ22, (RQ9, 4)
// p_setup.c:939   ld->bbox[BOXTOP] = v1->y;
  MOV.Q        (R2, 208), RQ26
  MOV.L        (RQ26, 4), RQ8
  MOV.L        RQ8, (RQ9, 0)

.L00802018:
// p_setup.c:945   if (ld->sidenum[0] != -1)
  MOV.W        (RQ18, 36), RQ8
  BREQ.Q       -1, RQ8, .L00802019
// p_setup.c:946   ld->frontsector = sides[ld->sidenum[0]].sector;
  ADD          RQ18, 36, RQ9
  MOV.W        (RQ9, 0), RQ8
  MOV.Q        sides, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ9
  MOV.Q        RQ9, (RQ18, 64)
  BSR          .L0080201A, R0

.L00802019:
// p_setup.c:948   ld->frontsector = 0;
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (RQ18, 64)

.L0080201A:
// p_setup.c:950   if (ld->sidenum[1] != -1)
  MOV.W        (RQ18, 38), RQ8
  BREQ.Q       -1, RQ8, .L0080201B
// p_setup.c:951   ld->backsector = sides[ld->sidenum[1]].sector;
  ADD          RQ18, 36, RQ9
  MOV.W        (RQ9, 2), RQ8
  MOV.Q        sides, RQ27
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 16), RQ9
  MOV.Q        RQ9, (RQ18, 72)
  BSR          .L0080201C, R0

.L0080201B:
// p_setup.c:953   ld->backsector = 0;
  ADD          R0, 0, RQ9
  MOV.Q        RQ9, (RQ18, 72)

.L0080201C:
  MOV.L        (R2, 236), RD27
  ADD          RD27, 0, RQ8
  ADDS.L       RD27, 1, RD27
  MOV.Q        (R2, 216), RQ26
  ADD          RQ26, 0, RQ9
  ADD          RQ26, 14, RQ26
  MOV.Q        RQ26, (R2, 216)
  ADD          RQ21, 0, RQ9
  ADD          RQ21, 16, RQ21
  ADD          RQ18, 0, RQ9
  ADD          RQ18, 96, RQ18
  MOV.L        RD27, (R2, 236)
  MOV.L        numlines, RD25
  BRLT.L       RD25, RD27, .L00801FFC

.L00801FFE:
// p_setup.c:956   Z_ChangeTag (lines, PU_LEVEL_LINES);  //BGB: Debug
  MOV.Q        lines, RQ10
  ADD          R0, 58, RD11
  BSR          Z_ChangeTag2, R1
// p_setup.c:958   Z_Free (data);
  MOV.Q        (R2, 240), RQ10
  BSR          Z_Free, R1

.L00C03168:
  ADD          R2, 440, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

M_Responder:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.Q        R25, (R2, 48)
  MOV.Q        R21, (R2, 24)
  MOV.X        R26, (R2, 56)
  MOV.X        R22, (R2, 32)
  MOV.X        R8, (R2, 0)
  ADD          R2, -384, R2
  ADD          RQ10, 0, RQ21
// m_menu.c:1421   ch = -1;
  ADD          R0, -1, RD9
// m_menu.c:1423   if (ev->type == ev_joystick && joywait < I_GetTime())
  MOV.L        (RQ21, 0), RQ18
  BRNE.Q       3, RQ18, .L0080168F
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  MOV.L        M_Responder/joywait!112, RD27
  BRGE.L       RQ18, RD27, .L0080168F

.L00801690:
  MOV.L        (RQ21, 12), RQ18
  BRNE.Q       -1, RQ18, .L00801692
// m_menu.c:1426   {
  ADD          R0, 173, RD9
// m_menu.c:1428   joywait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/joywait!112
  BSR          .L00801693, R0

.L00801692:
  MOV.L        (RQ21, 12), RQ18
  BRNE.Q       1, RQ18, .L00801694
// m_menu.c:1431   {
  ADD          R0, 175, RD9
// m_menu.c:1433   joywait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/joywait!112

.L00801694:

.L00801693:
  MOV.L        (RQ21, 8), RQ18
  BRNE.Q       -1, RQ18, .L00801695
// m_menu.c:1437   {
  ADD          R0, 172, RD9
// m_menu.c:1439   joywait = I_GetTime() + 2;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 2, RD27
  MOV.L        RD27, M_Responder/joywait!112
  BSR          .L00801696, R0

.L00801695:
  MOV.L        (RQ21, 8), RQ18
  BRNE.Q       1, RQ18, .L00801697
// m_menu.c:1442   {
  ADD          R0, 174, RD9
// m_menu.c:1444   joywait = I_GetTime() + 2;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 2, RD27
  MOV.L        RD27, M_Responder/joywait!112

.L00801697:

.L00801696:
  MOV.L        (RQ21, 4), RQ18
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ18, .L00801698
// m_menu.c:1448   {
  ADD          R0, 13, RD9
// m_menu.c:1450   joywait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/joywait!112

.L00801698:
  MOV.L        (RQ21, 4), RQ18
  ADD          R0, 2, RD27
  BTST.L       RD27, RQ18, .L00801699
// m_menu.c:1453   {
  ADD          R0, 127, RD9
// m_menu.c:1455   joywait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/joywait!112

.L00801699:
  BSR          .L0080169A, R0

.L0080168F:
  MOV.L        (RQ21, 0), RQ18
  BRNE.Q       2, RQ18, .L0080169B
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  MOV.L        M_Responder/mousewait!112, RD27
  BRGE.L       RQ18, RD27, .L0080169B

.L0080169C:
// m_menu.c:1461   {
  MOV.L        (RQ21, 12), RQ18
  MOV.L        M_Responder/mousey!112, RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        M_Responder/lasty!112, RD26
  ADDS.L       RD26, -30, RQ18
  MOV.L        RD27, M_Responder/mousey!112
  BRGE.L       RQ18, RD27, .L0080169E
// m_menu.c:1464   {
  ADD          R0, 175, RD9
// m_menu.c:1466   mousewait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/mousewait!112
// m_menu.c:1467   mousey = lasty -= 30;
  MOV.L        M_Responder/lasty!112, RD27
  ADDS.L       RD27, -30, RQ18
  ADD          RQ18, 0, RD27
  MOV.L        RD27, M_Responder/lasty!112
  MOV.L        RQ18, M_Responder/mousey!112
  BSR          .L0080169F, R0

.L0080169E:
  MOV.L        M_Responder/lasty!112, RD27
  ADDS.L       RD27, 30, RQ18
  MOV.L        M_Responder/mousey!112, RD27
  BRLE.L       RQ18, RD27, .L008016A0
// m_menu.c:1470   {
  ADD          R0, 173, RD9
// m_menu.c:1472   mousewait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/mousewait!112
// m_menu.c:1473   mousey = lasty += 30;
  MOV.L        M_Responder/lasty!112, RD27
  ADDS.L       RD27, 30, RQ18
  ADD          RQ18, 0, RD27
  MOV.L        RD27, M_Responder/lasty!112
  MOV.L        RQ18, M_Responder/mousey!112

.L008016A0:

.L0080169F:
// m_menu.c:1476   mousex += ev->data2;
  MOV.L        (RQ21, 8), RQ18
  MOV.L        M_Responder/mousex!112, RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        M_Responder/lastx!112, RD26
  ADDS.L       RD26, -30, RQ18
  MOV.L        RD27, M_Responder/mousex!112
  BRGE.L       RQ18, RD27, .L008016A1
// m_menu.c:1478   {
  ADD          R0, 172, RD9
// m_menu.c:1480   mousewait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/mousewait!112
// m_menu.c:1481   mousex = lastx -= 30;
  MOV.L        M_Responder/lastx!112, RD27
  ADDS.L       RD27, -30, RQ18
  ADD          RQ18, 0, RD27
  MOV.L        RD27, M_Responder/lastx!112
  MOV.L        RQ18, M_Responder/mousex!112
  BSR          .L008016A2, R0

.L008016A1:
  MOV.L        M_Responder/lastx!112, RD27
  ADDS.L       RD27, 30, RQ18
  MOV.L        M_Responder/mousex!112, RD27
  BRLE.L       RQ18, RD27, .L008016A3
// m_menu.c:1484   {
  ADD          R0, 174, RD9
// m_menu.c:1486   mousewait = I_GetTime() + 5;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 5, RD27
  MOV.L        RD27, M_Responder/mousewait!112
// m_menu.c:1487   mousex = lastx += 30;
  MOV.L        M_Responder/lastx!112, RD27
  ADDS.L       RD27, 30, RQ18
  ADD          RQ18, 0, RD27
  MOV.L        RD27, M_Responder/lastx!112
  MOV.L        RQ18, M_Responder/mousex!112

.L008016A3:

.L008016A2:
  MOV.L        (RQ21, 4), RQ18
  ADD          R0, 1, RD27
  BTST.L       RD27, RQ18, .L008016A4
// m_menu.c:1491   {
  ADD          R0, 13, RD9
// m_menu.c:1493   mousewait = I_GetTime() + 15;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 15, RD27
  MOV.L        RD27, M_Responder/mousewait!112

.L008016A4:
  MOV.L        (RQ21, 4), RQ18
  ADD          R0, 2, RD27
  BTST.L       RD27, RQ18, .L008016A5
// m_menu.c:1497   {
  ADD          R0, 127, RD9
// m_menu.c:1499   mousewait = I_GetTime() + 15;
  BSR          I_GetTime, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, 15, RD27
  MOV.L        RD27, M_Responder/mousewait!112

.L008016A5:
  BSR          .L008016A6, R0

.L0080169B:
  MOV.L        (RQ21, 0), RQ18
  BRNE.L       R0, RQ18, .L008016A7
// m_menu.c:1504   {
  MOV.L        (RQ21, 4), RD9

.L008016A7:

.L008016A6:

.L0080169A:
// m_menu.c:1509   if (ch == -1)
  BREQ.Q       -1, RD9, .L00C00F83
// m_menu.c:1514   if (saveStringEnter)
  MOV.L        saveStringEnter, RD27
  BREQ.L       R0, RD27, .L008016A8
// m_menu.c:1515   {
  BREQ.Q       127, RD9, .L008016AA
  BREQ.Q       27, RD9, .L008016AB
  BREQ.Q       13, RD9, .L008016AC
  BSR          .L008016AD, R0

.L008016AA:
// m_menu.c:1518   case KEY_BACKSPACE:
  MOV.L        saveCharIndex, RD27
  BRLE.L       R0, RD27, .L008016AE
// m_menu.c:1520   {
  MOV.L        saveCharIndex, RD27
  ADDS.L       RD27, -1, RD27
// m_menu.c:1522   savegamestrings[saveSlot][saveCharIndex] = 0;
  MOV          savegamestrings, RQ26
  MOV.L        saveSlot, RD25
  ADD          R0, 24, R5
  MUL.L        RD25, R5, RQ13
  ADD          RQ26, RQ13, RQ13
  MOV.B        RD0, (RQ13, RD27)
  MOV.Q        RQ13, (R2, 152)
  MOV.L        RD27, saveCharIndex

.L008016AE:
// m_menu.c:1523   }
  BSR          .L008016A9, R0

.L008016AB:
// m_menu.c:1526   case KEY_ESCAPE:
  MOV.L        RD0, saveStringEnter
// m_menu.c:1528   strcpy(&savegamestrings[saveSlot][0],saveOldString);
  MOV          savegamestrings, RQ27
  MOV.L        saveSlot, RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  ADD          RQ25, RD0, RQ27
  MOV.Q        RQ27, (R2, 144)
  MOV.Q        RQ25, (R2, 152)
  ADD          RQ27, 0, RQ10
  MOV          saveOldString, RQ11
  BSR          strcpy, R1
// m_menu.c:1529   break;
  BSR          .L008016A9, R0

.L008016AC:
// m_menu.c:1531   case KEY_ENTER:
  MOV.L        RD0, saveStringEnter
// m_menu.c:1533   if (savegamestrings[saveSlot][0])
  MOV          savegamestrings, RQ27
  MOV.L        saveSlot, RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.B        (RQ25, 0), RQ18
  MOV.Q        RQ25, (R2, 152)
  BREQ.L       R0, RQ18, .L008016AF
// m_menu.c:1534   M_DoSave(saveSlot);
  MOV.L        saveSlot, RD10
  BSR          M_DoSave, R1

.L008016AF:
// m_menu.c:1535   break;
  BSR          .L008016A9, R0

.L008016AD:
// m_menu.c:1537   default:
  ADDS.L       RD9, 0, RD10
  BSR          toupper, R1
  ADDS.L       RQ10, 0, RD9
// m_menu.c:1539   if (ch != 32)
  BREQ.Q       32, RD9, .L008016B0
  ADDS.L       RD9, -33, RQ18
  CMPLT.Q      RQ18, R0, RQ8
  ADDS.L       RD9, -33, RQ18
  ADD          R0, 63, R5
  CMPGE.Q      RQ18, R5, RQ22
  OR           RQ8, RQ22, RQ18
  BRNE.L       R0, RQ18, .L008016A9

.L008016B0:
// m_menu.c:1542   if (ch >= 32 && ch <= 127 &&
  ADD          R0, 32, R5
  CMPGE.Q      RD9, R5, RQ8
  ADD          R0, 127, R5
  CMPLE.Q      RD9, R5, RQ22
  AND          RQ8, RQ22, RQ18
  MOV.L        saveCharIndex, RD27
  ADD          R0, 23, R5
  CMPLT.Q      RD27, R5, RQ8
  BTST.L       RQ8, RQ18, .L008016B1
  MOV          savegamestrings, RQ27
  MOV.L        saveSlot, RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ10
  ADD          RQ27, RQ10, RQ10
  MOV.Q        RQ10, (R2, 152)
  BSR          M_StringWidth, R1
  ADDS.L       RQ10, 0, RQ8
  BRGE.L       176, RQ8, .L008016B1

.L008016B2:
// m_menu.c:1546   {
  MOV          savegamestrings, RQ27
  MOV.L        saveSlot, RD26
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.L        saveCharIndex, RD13
  ADDS.L       RD13, 0, RQ8
  ADDS.L       RD13, 1, RD13
  MOV.B        RD9, (RQ25, RQ8)
// m_menu.c:1548   savegamestrings[saveSlot][saveCharIndex] = 0;
  ADD          R0, 24, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.B        RD0, (RQ25, RD13)
  MOV.Q        RQ25, (R2, 152)
  MOV.L        RD13, saveCharIndex

.L008016B1:
// m_menu.c:1549   }

.L008016A9:
// m_menu.c:1551   }
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016A8:
// m_menu.c:1556   if (messageToPrint)
  MOV.L        messageToPrint, RD27
  BREQ.L       R0, RD27, .L008016B4
  MOV.L        messageNeedsInput, RD27
  BRNE.Q       1, RD27, .L008016B5
  ADD          R0, 32, R5
  CMPEQ.Q      RD9, R5, RQ8
  ADD          R0, 110, R5
  CMPEQ.Q      RD9, R5, RQ22
  OR           RQ8, RQ22, RQ18
  ADD          R0, 121, R5
  CMPEQ.Q      RD9, R5, RQ8
  OR           RQ18, RQ8, RQ22
  ADD          R0, 27, R5
  CMPEQ.Q      RD9, R5, RQ18
  OR           RQ22, RQ18, RQ8
  BRNE.L       R0, RQ8, .L008016B5
  BSR          .L00C00F83, R0

.L008016B5:
// m_menu.c:1562   menuactive = messageLastMenuActive;
  MOV.L        messageLastMenuActive, RD27
  ADD          RD27, 0, RD26
  MOV.L        RD26, menuactive
// m_menu.c:1563   messageToPrint = 0;
  MOV.L        RD0, messageToPrint
  MOV.Q        messageRoutine, RQ27
  BREQ.Q       R0, RQ27, .L008016B7
// m_menu.c:1565   messageRoutine(ch);
  ADDS.L       RD9, 0, RD10
  MOV.Q        messageRoutine, RQ27
  JSR          RQ27, 0, R1

.L008016B7:
// m_menu.c:1567   menuactive = false;
  MOV.L        RD0, menuactive
// m_menu.c:1568   S_StartSound(NULL,sfx_swtchx);
  ADD          RQ0, 0, RQ10
  ADD          R0, 24, RD11
  BSR          S_StartSound, R1
// m_menu.c:1569   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016B4:
// m_menu.c:1572   if (devparm && ch == KEY_F1)
  MOV.L        devparm, RD27
  BREQ.L       R0, RD27, .L008016B8
  BRNE.Q       187, RD9, .L008016B8

.L008016B9:
// m_menu.c:1573   {
  BSR          G_ScreenShot, R1
// m_menu.c:1575   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016B8:
// m_menu.c:1580   if (!menuactive)
  MOV.L        menuactive, RD27
  BRNE.L       R0, RD27, .L008016BB
// m_menu.c:1581   switch(ch)
  AND          RD9, -1, RQ22
  BRGE.L       191, RQ22, .L008016CB
  BREQ.Q       45, RD9, .L008016BD
  BREQ.Q       61, RD9, .L008016BE
  BREQ.Q       187, RD9, .L008016BF
  BREQ.Q       188, RD9, .L008016C0
  BREQ.Q       189, RD9, .L008016C1
  BREQ.Q       190, RD9, .L008016C2

.L008016CB:
  BREQ.Q       191, RD9, .L008016C3
  BREQ.Q       192, RD9, .L008016C4
  BREQ.Q       193, RD9, .L008016C5
  BREQ.Q       194, RD9, .L008016C6
  BREQ.Q       195, RD9, .L008016C7
  BREQ.Q       196, RD9, .L008016C8
  BREQ.Q       215, RD9, .L008016C9
  BSR          .L008016CA, R0

.L008016BD:
// m_menu.c:1583   case KEY_MINUS:		 // Screen size down
  MOV.L        automapactive, RD27
  BRNE.L       R0, RD27, .L00C00F83
  MOV.L        chat_on, RD27
  BRNE.L       R0, RD27, .L00C00F83

.L008016CC:
// m_menu.c:1586   M_SizeDisplay(0);
  ADD          R0, 0, RD10
  BSR          M_SizeDisplay, R1
// m_menu.c:1587   S_StartSound(NULL,sfx_stnmov);
  ADD          RQ0, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// m_menu.c:1588   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016BE:
// m_menu.c:1590   case KEY_EQUALS:		// Screen size up
  MOV.L        automapactive, RD27
  BRNE.L       R0, RD27, .L00C00F83
  MOV.L        chat_on, RD27
  BRNE.L       R0, RD27, .L00C00F83

.L008016CE:
// m_menu.c:1593   M_SizeDisplay(1);
  ADD          R0, 1, RD10
  BSR          M_SizeDisplay, R1
// m_menu.c:1594   S_StartSound(NULL,sfx_stnmov);
  ADD          RQ0, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// m_menu.c:1595   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016BF:
// m_menu.c:1597   case KEY_F1:			// Help key
  BSR          M_StartControlPanel, R1
// m_menu.c:1600   if ( gamemode == retail )
  MOV.L        gamemode, RD27
  BRNE.Q       3, RD27, .L008016D0
// m_menu.c:1601   currentMenu = &ReadDef2;
  MOV          ReadDef2, RQ27
  MOV.Q        RQ27, currentMenu
  MOV.Q        RQ27, (R2, 152)
  BSR          .L008016D1, R0

.L008016D0:
// m_menu.c:1603   currentMenu = &ReadDef1;
  MOV          ReadDef1, RQ27
  MOV.Q        RQ27, currentMenu
  MOV.Q        RQ27, (R2, 144)

.L008016D1:
// m_menu.c:1605   itemOn = 0;
  MOV.W        RD0, itemOn
// m_menu.c:1606   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1607   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C0:
// m_menu.c:1609   case KEY_F2:			// Save
  BSR          M_StartControlPanel, R1
// m_menu.c:1611   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1612   M_SaveGame(0);
  ADD          R0, 0, RD10
  BSR          M_SaveGame, R1
// m_menu.c:1613   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C1:
// m_menu.c:1615   case KEY_F3:			// Load
  BSR          M_StartControlPanel, R1
// m_menu.c:1617   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1618   M_LoadGame(0);
  ADD          R0, 0, RD10
  BSR          M_LoadGame, R1
// m_menu.c:1619   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C2:
// m_menu.c:1621   case KEY_F4:			// Sound Volume
  BSR          M_StartControlPanel, R1
// m_menu.c:1623   currentMenu = &SoundDef;
  MOV          SoundDef, RQ27
  MOV.Q        RQ27, currentMenu
  MOV.Q        RQ27, (R2, 152)
// m_menu.c:1624   itemOn = sfx_vol;
  MOV.W        RD0, itemOn
// m_menu.c:1625   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1626   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C3:
// m_menu.c:1628   case KEY_F5:			// Detail toggle
  ADD          R0, 0, RD10
  BSR          M_ChangeDetail, R1
// m_menu.c:1630   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1631   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C4:
// m_menu.c:1633   case KEY_F6:			// Quicksave
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1635   M_QuickSave();
  BSR          M_QuickSave, R1
// m_menu.c:1636   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C5:
// m_menu.c:1638   case KEY_F7:			// End game
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1640   M_EndGame(0);
  ADD          R0, 0, RD10
  BSR          M_EndGame, R1
// m_menu.c:1641   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C6:
// m_menu.c:1643   case KEY_F8:			// Toggle messages
  ADD          R0, 0, RD10
  BSR          M_ChangeMessages, R1
// m_menu.c:1645   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1646   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C7:
// m_menu.c:1648   case KEY_F9:			// Quickload
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1650   M_QuickLoad();
  BSR          M_QuickLoad, R1
// m_menu.c:1651   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C8:
// m_menu.c:1653   case KEY_F10:			 // Quit DOOM
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1655   M_QuitDOOM(0);
  ADD          R0, 0, RD10
  BSR          M_QuitDOOM, R1
// m_menu.c:1656   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016C9:
// m_menu.c:1658   case KEY_F11:			 // gamma toggle
  MOV.L        usegamma, RD27
  ADDS.L       RD27, 1, RD27
// m_menu.c:1660   if (usegamma > 4)
  MOV.L        RD27, usegamma
  BRLE.L       4, RD27, .L008016D2
// m_menu.c:1661   usegamma = 0;
  MOV.L        RD0, usegamma

.L008016D2:
// m_menu.c:1662   players[consoleplayer].message = gammamsg[usegamma];
  MOV          gammamsg, RQ27
  MOV.L        usegamma, RD26
  ADD          R0, 26, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV          players, RQ27
  MOV.L        consoleplayer, RD26
  MOV.Q        RQ25, (R2, 144)
  ADD          R0, 320, R5
  MUL.L        RD26, R5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        (R2, 144), RQ27
  MOV.Q        RQ27, (RQ25, 224)
// m_menu.c:1663   I_SetPalette (W_CacheLumpName ("PLAYPAL",PU_CACHE));
  MOV          .L00C02053, RQ10
  ADD          R0, 101, RD11
  BSR          W_CacheLumpName, R1
  MOV.Q        RQ10, (R2, 152)
  MOV.Q        (R2, 152), RQ10
  BSR          I_SetPalette, R1
// m_menu.c:1664   I_SetPaletteIndex (0);
  ADD          R0, 0, RD10
  BSR          I_SetPaletteIndex, R1
// m_menu.c:1665   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016CA:

.L008016BC:

.L008016BB:
// m_menu.c:1671   if (!menuactive)
  MOV.L        menuactive, RD27
  BRNE.L       R0, RD27, .L008016D3
  BRNE.Q       27, RD9, .L008016D4
// m_menu.c:1674   {
  BSR          M_StartControlPanel, R1
// m_menu.c:1676   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// m_menu.c:1677   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016D4:
// m_menu.c:1678   }
  ADD          R0, 0, RD10
  BSR          .L00C03170, R0

.L008016D3:
// m_menu.c:1684   switch (ch)
  BREQ.Q       175, RD9, .L008016D6
  BREQ.Q       173, RD9, .L008016D7
  BREQ.Q       172, RD9, .L008016D8
  BREQ.Q       174, RD9, .L008016D9
  BREQ.Q       13, RD9, .L008016DA
  BREQ.Q       27, RD9, .L008016DB
  BREQ.Q       127, RD9, .L008016DC
  BSR          .L008016DD, R0

.L008016D6:
// m_menu.c:1686   case KEY_DOWNARROW:

.L008016DE:
// m_menu.c:1688   {
  MOV.W        itemOn, RD27
  ADDS.L       RD27, 1, RQ8
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 0), RQ22
  ADDS.L       RQ22, -1, RQ18
  BRLE.L       RQ18, RQ8, .L008016E1
// m_menu.c:1690   itemOn = 0;
  MOV.W        RD0, itemOn
  BSR          .L008016E2, R0

.L008016E1:
// m_menu.c:1691   else itemOn++;
  MOV.W        itemOn, RD27
  ADDS.L       RD27, 1, RD27
  SHAD.Q       RD27, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, itemOn

.L008016E2:
// m_menu.c:1692   S_StartSound(NULL,sfx_pstop);
  ADD          RQ0, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        RQ26, (R2, 152)
  MOV.W        (RQ25, 0), RQ18
  BREQ.Q       -1, RQ18, .L008016DE
// m_menu.c:1693   } while(currentMenu->menuitems[itemOn].status==-1);
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016D7:
// m_menu.c:1696   case KEY_UPARROW:

.L008016E3:
// m_menu.c:1698   {
  MOV.W        itemOn, RD27
  BRNE.L       R0, RD27, .L008016E6
// m_menu.c:1700   itemOn = currentMenu->numitems-1;
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 0), RQ8
  ADDS.L       RQ8, -1, RQ22
  SHAD.Q       RQ22, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, itemOn
  BSR          .L008016E7, R0

.L008016E6:
// m_menu.c:1701   else itemOn--;
  MOV.W        itemOn, RD27
  ADDS.L       RD27, -1, RD27
  SHAD.Q       RD27, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, itemOn

.L008016E7:
// m_menu.c:1702   S_StartSound(NULL,sfx_pstop);
  ADD          RQ0, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        RQ26, (R2, 152)
  MOV.W        (RQ25, 0), RQ18
  BREQ.Q       -1, RQ18, .L008016E3
// m_menu.c:1703   } while(currentMenu->menuitems[itemOn].status==-1);
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016D8:
// m_menu.c:1706   case KEY_LEFTARROW:
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  BREQ.Q       R0, RQ26, .L008016E8
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        RQ26, (R2, 144)
  MOV.W        (RQ25, 0), RQ18
  BRNE.Q       2, RQ18, .L008016E8

.L008016E9:
// m_menu.c:1709   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// m_menu.c:1711   currentMenu->menuitems[itemOn].routine(0);
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  ADD          RQ25, 0, RQ27
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  ADD          R0, 0, RD10
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1

.L008016E8:
// m_menu.c:1712   }
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016D9:
// m_menu.c:1715   case KEY_RIGHTARROW:
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  BREQ.Q       R0, RQ26, .L008016EB
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        RQ26, (R2, 144)
  MOV.W        (RQ25, 0), RQ18
  BRNE.Q       2, RQ18, .L008016EB

.L008016EC:
// m_menu.c:1718   {
  ADD          RQ0, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
// m_menu.c:1720   currentMenu->menuitems[itemOn].routine(1);
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  ADD          RQ25, 0, RQ27
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  ADD          R0, 1, RD10
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1

.L008016EB:
// m_menu.c:1721   }
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016DA:
// m_menu.c:1724   case KEY_ENTER:
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  BREQ.Q       R0, RQ26, .L008016EE
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  MOV.Q        RQ26, (R2, 144)
  MOV.W        (RQ25, 0), RQ18
  BREQ.L       R0, RQ18, .L008016EE

.L008016EF:
// m_menu.c:1727   {
  MOV.W        itemOn, RD27
  MOV.Q        currentMenu, RQ26
  MOV.W        RD27, (RQ26, 36)
  MOV.Q        (RQ26, 16), RQ25
  SHAD.L       RD27, 5, RQ26
  ADD          RQ25, RQ26, RQ26
  MOV.Q        RQ25, (R2, 152)
  MOV.W        (RQ26, 0), RQ18
  BRNE.Q       2, RQ18, .L008016F1
// m_menu.c:1730   {
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  ADD          RQ25, 0, RQ27
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  ADD          R0, 1, RD10
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1
// m_menu.c:1732   S_StartSound(NULL,sfx_stnmov);
  ADD          RQ0, 0, RQ10
  ADD          R0, 22, RD11
  BSR          S_StartSound, R1
  BSR          .L008016F2, R0

.L008016F1:
// m_menu.c:1735   {
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  MOV.W        itemOn, RD27
  SHAD.L       RD27, 5, RQ25
  ADD          RQ26, RQ25, RQ25
  ADD          RQ25, 0, RQ27
  MOV.Q        (RQ25, 16), RQ26
  MOV.Q        RQ26, (R2, 152)
  MOV.W        itemOn, RD10
  ADD          RQ27, 0, RQ29
  JSR          RQ26, 0, R1
// m_menu.c:1737   S_StartSound(NULL,sfx_pistol);
  ADD          RQ0, 0, RQ10
  ADD          R0, 1, RD11
  BSR          S_StartSound, R1

.L008016F2:

.L008016EE:
// m_menu.c:1739   }
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016DB:
// m_menu.c:1742   case KEY_ESCAPE:
  MOV.W        itemOn, RD27
  MOV.Q        currentMenu, RQ26
  MOV.W        RD27, (RQ26, 36)
// m_menu.c:1744   M_ClearMenus ();
  BSR          M_ClearMenus, R1
// m_menu.c:1745   S_StartSound(NULL,sfx_swtchx);
  ADD          RQ0, 0, RQ10
  ADD          R0, 24, RD11
  BSR          S_StartSound, R1
// m_menu.c:1746   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016DC:
// m_menu.c:1748   case KEY_BACKSPACE:
  MOV.W        itemOn, RD27
  MOV.Q        currentMenu, RQ26
  MOV.W        RD27, (RQ26, 36)
// m_menu.c:1750   if (currentMenu->prevMenu)
  MOV.Q        (RQ26, 8), RQ27
  MOV.Q        RQ27, (R2, 152)
  BREQ.Q       R0, RQ27, .L008016F3
// m_menu.c:1751   {
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 8), RQ27
// m_menu.c:1753   itemOn = currentMenu->lastOn;
  MOV.W        (RQ27, 36), RD26
  MOV.Q        RQ27, currentMenu
  MOV.W        RD26, itemOn
// m_menu.c:1754   S_StartSound(NULL,sfx_swtchn);
  ADD          RQ0, 0, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1

.L008016F3:
// m_menu.c:1755   }
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016DD:
// m_menu.c:1758   default:
  MOV.W        itemOn, RD27
  ADDS.L       RD27, 1, RD23
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 0), RQ8
  BRGE.L       RQ8, RD23, .L008016F6

.L008016F4:
// m_menu.c:1760   if (currentMenu->menuitems[i].alphaKey == ch)
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  SHAD.L       RD23, 5, RQ27
  ADD          RQ26, RQ27, RQ27
  MOV.Q        RQ26, (R2, 152)
  MOV.B        (RQ27, 24), RQ18
  BRNE.Q       RD9, RQ18, .L008016F7
// m_menu.c:1761   {
  SHAD.Q       RD23, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, itemOn
// m_menu.c:1763   S_StartSound(NULL,sfx_pstop);
  ADD          RQ0, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1
// m_menu.c:1764   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016F7:
  ADDS.L       RD23, 1, RD23
  MOV.Q        currentMenu, RQ27
  MOV.W        (RQ27, 0), RQ8
  BRLT.L       RQ8, RD23, .L008016F4

.L008016F6:
// m_menu.c:1765   }
  ADD          R0, 0, RD23
  MOV.W        itemOn, RD27
  BRGT.L       RD27, RD23, .L008016FA

.L008016F8:
// m_menu.c:1767   if (currentMenu->menuitems[i].alphaKey == ch)
  MOV.Q        currentMenu, RQ27
  MOV.Q        (RQ27, 16), RQ26
  SHAD.L       RD23, 5, RQ27
  ADD          RQ26, RQ27, RQ27
  MOV.Q        RQ26, (R2, 152)
  MOV.B        (RQ27, 24), RQ18
  BRNE.Q       RD9, RQ18, .L008016FB
// m_menu.c:1768   {
  SHAD.Q       RD23, 48, RD27
  SHAR.Q       RD27, 48, RD27
  MOV.W        RD27, itemOn
// m_menu.c:1770   S_StartSound(NULL,sfx_pstop);
  ADD          RQ0, 0, RQ10
  ADD          R0, 19, RD11
  BSR          S_StartSound, R1
// m_menu.c:1771   return true;
  ADD          R0, 1, RD10
  BSR          .L00C03170, R0

.L008016FB:
  ADDS.L       RD23, 1, RD23
  MOV.W        itemOn, RD27
  BRLE.L       RD27, RD23, .L008016F8

.L008016FA:
// m_menu.c:1772   }

.L008016D5:
// m_menu.c:1777   return false;
  ADD          R0, 0, RD10
  BSR          .L00C03170, R0

.L00C00F83:
  ADD          R0, 0, RQ10

.L00C03170:
  ADD          R2, 384, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.Q        (R2, 24), R21
  MOV.X        (R2, 32), R22
  MOV.Q        (R2, 48), R25
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

addsfx:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -360, R2
  ADD          RD10, 0, RD20
  MOV.L        RD11, (R2, 152)
  MOV.L        RD12, (R2, 148)
  MOV.L        RD13, (R2, 144)
// i_sound_btsh.c:324   int		rc = -1;
  ADD          R0, -1, RD27
  MOV.L        RD27, (R2, 140)
// i_sound_btsh.c:326   int		oldest = gametic;
  MOV.L        gametic, RD26
  ADD          RD26, 0, RD25
  MOV.L        RD25, (R2, 136)
// i_sound_btsh.c:327   int		oldestnum = 0;
  MOV.L        RD0, (R2, 132)
// i_sound_btsh.c:333   volume *= 4;
  MOV.L        (R2, 152), RD26
  SHAD.L       RD26, 2, RD26
// i_sound_btsh.c:334   if(volume>63)
  MOV.L        RD26, (R2, 152)
  BRLE.L       63, RD26, .L008011B7
// i_sound_btsh.c:335   volume=63;
  ADD          R0, 63, RD27
  MOV.L        RD27, (R2, 152)

.L008011B7:
// i_sound_btsh.c:339   if ( sfxid == sfx_sawup
  ADD          R0, 10, R5
  CMPEQ.Q      RD20, R5, RQ9
  ADD          R0, 11, R5
  CMPEQ.Q      RD20, R5, RQ23
  OR           RQ9, RQ23, RQ22
  ADD          R0, 12, R5
  CMPEQ.Q      RD20, R5, RQ9
  OR           RQ22, RQ9, RQ23
  ADD          R0, 13, R5
  CMPEQ.Q      RD20, R5, RQ22
  OR           RQ23, RQ22, RQ9
  BRNE.L       R0, RQ9, .L008011B9
  BREQ.Q       22, RD20, .L008011B9

.L008011BA:
  BREQ.Q       1, RD20, .L008011B9
  BSR          .L008011B8, R0

.L008011B9:
// i_sound_btsh.c:347   for (i=0 ; i<NUM_CHANNELS ; i++)
  ADD          R0, 0, RD18

.L008011BC:
// i_sound_btsh.c:350   if ( (channels[i])
  MOV          channels, RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BREQ.Q       R0, RQ8, .L008011BF
  MOV          channelids, RQ27
  MOV.L        (RQ27, RD18), RQ9
  BRNE.Q       RD20, RQ9, .L008011BF

.L008011C0:
// i_sound_btsh.c:354   channels[i] = 0;
  ADD          R0, 0, RQ8
  MOV          channels, RQ27
  MOV.Q        RQ8, (RQ27, RD18)
// i_sound_btsh.c:357   break;
  BSR          .L008011BE, R0

.L008011BF:
  ADDS.L       RD18, 1, RD18
  BRLT.L       8, RD18, .L008011BC

.L008011BE:

.L008011B8:
// i_sound_btsh.c:363   for (i=0; (i<NUM_CHANNELS) && (channels[i]); i++)
  ADD          R0, 0, RD18
  BRGE.L       8, RD18, .L008011C4
  MOV          channels, RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BREQ.Q       R0, RQ8, .L008011C4

.L008011C5:

.L008011C2:
// i_sound_btsh.c:364   {
  MOV          channelstart, RQ27
  MOV.L        (RQ27, RD18), RQ9
  MOV.L        (R2, 136), RD27
  BRGE.L       RD27, RQ9, .L008011C7
// i_sound_btsh.c:366   {
  MOV.L        RD18, (R2, 132)
// i_sound_btsh.c:368   oldest = channelstart[i];
  MOV          channelstart, RQ27
  MOV.L        (RQ27, RD18), RD26
  MOV.L        RD26, (R2, 136)

.L008011C7:
  ADDS.L       RD18, 1, RD18
  BRGE.L       8, RD18, .L008011C8
  MOV          channels, RQ27
  MOV.Q        (RQ27, RD18), RQ8
  BREQ.Q       R0, RQ8, .L008011C8
  BSR          .L008011C2, R0

.L008011C8:

.L008011C4:
// i_sound_btsh.c:376   if (i == NUM_CHANNELS)
  BRNE.Q       8, RD18, .L008011CA
// i_sound_btsh.c:377   slot = oldestnum;
  MOV.L        (R2, 132), RD21
  BSR          .L008011CB, R0

.L008011CA:
// i_sound_btsh.c:379   slot = i;
  ADD          RD18, 0, RD21

.L008011CB:
// i_sound_btsh.c:381   if((slot<0) || (slot >= NUM_CHANNELS))
  CMPLT.Q      RD21, R0, RQ9
  ADD          R0, 8, R5
  CMPGE.Q      RD21, R5, RQ23
  OR           RQ9, RQ23, RQ22
  BREQ.L       R0, RQ22, .L008011CC
// i_sound_btsh.c:382   {
  MOV          .L00C0317C, RQ10
  ADD          RD21, 0, RD11
  BSR          printf, R1
// i_sound_btsh.c:384   return(-1);
  ADD          R0, -1, RD10
  BSR          .L00C0317B, R0

.L008011CC:
// i_sound_btsh.c:390   channels[slot] = (unsigned char *) S_sfx[sfxid].data;
  MOV          S_sfx, RQ27
  ADD          R0, 56, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 32), RQ8
  MOV          channels, RQ25
  MOV.Q        RQ8, (RQ25, RD21)
// i_sound_btsh.c:392   channelsend[slot] = channels[slot] + lengths[sfxid];
  MOV.Q        (RQ25, RD21), RQ8
  MOV          lengths, RQ25
  MOV.L        (RQ25, RD20), RQ9
  ADD          RQ8, RQ9, RQ25
  MOV          channelsend, RQ13
  MOV.Q        RQ25, (RQ13, RD21)
// i_sound_btsh.c:394   rate = S_sfx[sfxid].samprate;
  ADD          R0, 56, R5
  MUL.L        RD20, R5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 48), RD27
// i_sound_btsh.c:395   if((rate<1000) || (rate>100000))
  ADD          R0, 1000, R5
  CMPLT.Q      RD27, R5, RQ9
  ADD          R0, 0x000186A0, RD13
  CMPGT.Q      RD27, RD13, RQ23
  MOV.L        RD27, (R2, 128)
  OR           RQ9, RQ23, RQ22
  BREQ.L       R0, RQ22, .L008011CD
// i_sound_btsh.c:396   rate = 11025;
  LDIZ         11025, RD27
  MOV.L        RD27, (R2, 128)

.L008011CD:
// i_sound_btsh.c:398   step = (step * rate) / 11025;
  MOV.L        (R2, 148), RD27
  MOV.L        (R2, 128), RD26
  MULS.L       RD27, RD26, RQ9
  ADD          RQ9, 0, RD27
  MOV.L        RD27, (R2, 148)
  LDIZ         11025, RD25
  DIVS.L       RD27, RD25, RD27
  MOV.L        RD27, (R2, 148)
// i_sound_btsh.c:401   if (!handlenums)
  MOVU.W       addsfx/handlenums!18, RD13
  BRNE.L       R0, RD13, .L008011CE
// i_sound_btsh.c:402   handlenums = 100;
  ADD          R0, 100, RD27
  MOV.W        RD27, addsfx/handlenums!18

.L008011CE:
// i_sound_btsh.c:406   channelhandles[slot] = rc = handlenums++;
  MOVU.W       addsfx/handlenums!18, RD27
  ADD          RD27, 0, RQ23
  ADDS.L       RD27, 1, RD27
  ADDU.L       RD27, R0, RD27
  AND          RD27, 0x0000FFFF, RD27
  MOV.W        RD27, addsfx/handlenums!18
  MOV.L        RD23, (R2, 140)
  MOV          channelhandles, RQ27
  MOV.L        RQ23, (RQ27, RD21)
// i_sound_btsh.c:410   channelstep[slot] = step;
  MOV          channelstep, RQ27
  MOV.L        (R2, 148), RD26
  MOVU.L       RD26, (RQ27, RD21)
// i_sound_btsh.c:412   channelstepremainder[slot] = 0;
  MOV          channelstepremainder, RQ27
  MOVU.L       RD0, (RQ27, RD21)
// i_sound_btsh.c:414   channelstart[slot] = gametic;
  MOV          channelstart, RQ27
  MOV.L        gametic, RD25
  MOV.L        RD25, (RQ27, RD21)
// i_sound_btsh.c:418   seperation += 1;
  MOV.L        (R2, 144), RD27
  ADDS.L       RD27, 1, RD27
// i_sound_btsh.c:423   leftvol =
  MOV.L        (R2, 152), RD25
  MULS.L       RD25, RD27, RQ22
  MULS.L       RQ22, RD27, RQ9
  SHAR         RQ9, 16, RQ23
  SUBS.L       RD25, RQ23, RD13
  MOV.L        RD13, (R2, 116)
// i_sound_btsh.c:425   seperation = seperation - 257;
  ADDS.L       RD27, -257, RD27
// i_sound_btsh.c:426   rightvol =
  MULS.L       RD25, RD27, RQ22
  MULS.L       RQ22, RD27, RQ9
  MOV.L        RD27, (R2, 144)
  SHAR         RQ9, 16, RQ23
  SUBS.L       RD25, RQ23, RD12
// i_sound_btsh.c:430   if (rightvol < 0 || rightvol > 127)
  CMPLT.Q      RD12, R0, RQ22
  ADD          R0, 127, R5
  CMPGT.Q      RD12, R5, RQ9
  MOV.L        RD12, (R2, 124)
  OR           RQ22, RQ9, RQ23
  BREQ.L       R0, RQ23, .L008011CF
// i_sound_btsh.c:431   I_Error("rightvol out of bounds");
  MOV          .L00C0317D, RQ10
  BSR          I_Error, R1

.L008011CF:
// i_sound_btsh.c:433   if (leftvol < 0 || leftvol > 127)
  MOV.L        (R2, 116), RD27
  CMPLT.Q      RD27, R0, RQ22
  ADD          R0, 127, R5
  CMPGT.Q      RD27, R5, RQ9
  OR           RQ22, RQ9, RQ23
  BREQ.L       R0, RQ23, .L008011D0
// i_sound_btsh.c:434   I_Error("leftvol out of bounds");
  MOV          .L00C0317E, RQ10
  BSR          I_Error, R1

.L008011D0:
// i_sound_btsh.c:441   lv = (leftvol*240)>>7;
  MOV.L        (R2, 116), RD27
  ADD          R0, 240, R5
  MULS.L       RD27, R5, RQ22
  SHAR         RQ22, 7, RD26
// i_sound_btsh.c:442   rv = (rightvol*240)>>7;
  MOV.L        (R2, 124), RD25
  ADD          R0, 240, R5
  MULS.L       RD25, R5, RQ9
  SHAR         RQ9, 7, RD13
  MOV.L        RD13, (R2, 112)
// i_sound_btsh.c:444   if(lv>128)
  MOV.L        RD26, (R2, 120)
  BRLE.L       128, RD26, .L008011D1
// i_sound_btsh.c:445   {
  MOV          .L00C0317F, RQ10
  MOV.L        (R2, 116), RD11
  MOV.L        (R2, 120), RD12
  BSR          printf, R1
// i_sound_btsh.c:447   lv=0;
  MOV.L        RD0, (R2, 120)

.L008011D1:
// i_sound_btsh.c:450   if(rv>128)
  MOV.L        (R2, 112), RD27
  BRLE.L       128, RD27, .L008011D2
// i_sound_btsh.c:451   {
  MOV          .L00C03180, RQ10
  MOV.L        (R2, 124), RD11
  MOV.L        (R2, 112), RD12
  BSR          printf, R1
// i_sound_btsh.c:453   rv=0;
  MOV.L        RD0, (R2, 112)

.L008011D2:
// i_sound_btsh.c:456   channelleftvol[slot] = lv;
  MOV          channelleftvol, RQ27
  MOV.L        (R2, 120), RD26
  MOV.L        RD26, (RQ27, RD21)
// i_sound_btsh.c:457   channelrightvol[slot] = rv;
  MOV          channelrightvol, RQ27
  MOV.L        (R2, 112), RD25
  MOV.L        RD25, (RQ27, RD21)
// i_sound_btsh.c:461   channelids[slot] = sfxid;
  MOV          channelids, RQ27
  MOV.L        RD20, (RQ27, RD21)
// i_sound_btsh.c:463   if((slot<0) || (slot >= NUM_CHANNELS))
  CMPLT.Q      RD21, R0, RQ23
  ADD          R0, 8, R5
  CMPGE.Q      RD21, R5, RQ22
  OR           RQ23, RQ22, RQ9
  BREQ.L       R0, RQ9, .L008011D3
// i_sound_btsh.c:464   { __debugbreak(); }

addsfx.debugbreak_L06A3:
  BRK          1699

.L008011D3:
// i_sound_btsh.c:467   return rc;
  MOV.L        (R2, 140), RD10

.L00C0317B:
  ADD          R2, 360, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

vvprintf:
  ADD          R2, -96, R2
  MOV.Q        RQ1, (R2, 88)
  MOV.X        R8, (R2, 0)
  MOV.X        R22, (R2, 40)
  MOV.X        R26, (R2, 72)
  MOV.Q        R18, (R2, 16)
  MOV.X        R24, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -816, R2
  MOV.Q        RQ10, (R2, 280)
  MOV.Q        RQ11, (R2, 272)
  ADD          RQ12, 0, RQ20
  ADD          RQ13, 0, RQ9
  MOV.L        RD14, (R2, 252)
  ADD          R2, 288, RQ6
  MOV.Q        RQ6, (R2, 200)
// pdpc201/stdio.c:1352   
// pdpc201/stdio.c:1359   
  MOV.L        (R2, 252), RD27
  ADD          RQ9, RD27, RQ26
  MOV.Q        RQ26, (R2, 184)
// pdpc201/stdio.c:1365   
  MOV.L        RD0, (R2, 248)
// pdpc201/stdio.c:1366   
  ADD          RD0, 0, RD22
// pdpc201/stdio.c:1367   
  MOV.L        RD0, (R2, 192)
// pdpc201/stdio.c:1369   
  BSR          .L00800397, R0

.L00800398:
// pdpc201/stdio.c:1370   
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.L       R0, RQ18, .L00800399
// pdpc201/stdio.c:1372   
  ADD          R0, 1, RD27
  MOV.L        RD27, (R2, 248)
  BSR          .L0080039A, R0

.L00800399:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       37, RQ18, .L0080039B
// pdpc201/stdio.c:1376   
  MOV.Q        (R2, 280), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 280)
// pdpc201/stdio.c:1378   
  ADD          R0, 32, RD26
  MOV.L        RD26, (R2, 196)
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       100, RQ18, .L0080039C
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.Q       105, RQ18, .L0080039C
  BSR          .L0080039D, R0

.L0080039C:
  MOV.L        (R2, 192), RD27
  BREQ.L       R0, RD27, .L0080039E
// pdpc201/stdio.c:1430   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 240)
  BSR          .L0080039F, R0

.L0080039E:
// pdpc201/stdio.c:1433   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ18
  ADDS.L       RQ18, 0, RQ27
  MOV.Q        RQ27, (R2, 240)

.L0080039F:
  MOV.Q        (R2, 240), RQ27
  BRGE.Q       R0, RQ27, .L008003A0
// pdpc201/stdio.c:1438   
  MOV.Q        (R2, 240), RQ27
  SUB          R0, RQ27, RQ26
  MOV.Q        RQ26, (R2, 224)
  BSR          .L008003A1, R0

.L008003A0:
// pdpc201/stdio.c:1440   
  MOV.Q        (R2, 240), RQ26
  ADD          RQ26, 0, RQ27
  MOV.Q        RQ27, (R2, 224)

.L008003A1:
// pdpc201/stdio.c:1442   
  ADD          R2, 288, RQ23
// pdpc201/stdio.c:1457   

.L008003A2:
// pdpc201/stdio.c:1458   
  MOV.Q        (R2, 224), RQ26
  ADD          RQ26, 0, RQ27
  ADD          R0, 10, RQ25
  MODU.Q       RQ27, RQ25, RQ27
  ADDS.L       RQ27, 0, RD24
// pdpc201/stdio.c:1465   
  ADDS.L       RD24, 48, RQ18
  MOV.L        RD24, (R2, 172)
  SHAD.Q       RQ18, 56, RQ21
  SHAR.Q       RQ21, 56, RQ21
  ADD          RQ23, 0, RQ8
  ADD          RQ23, 1, RQ23
  MOV.B        RQ21, (RQ8, 0)
// pdpc201/stdio.c:1466   
  DIVU.Q       RQ26, RQ25, RQ26
  MOV.Q        RQ26, (R2, 224)
  BRNE.Q       R0, RQ26, .L008003A2
  MOV.Q        (R2, 240), RQ27
  BRGE.Q       R0, RQ27, .L008003A3
// pdpc201/stdio.c:1476   
  ADD          RQ23, 0, RQ8
  ADD          RQ23, 1, RQ23
  ADD          R0, 45, RD27
  MOV.B        RD27, (RQ8, 0)

.L008003A3:
  ADD          R2, 288, RQ27
  SUB          RQ23, RQ27, RQ26
  BRLT.Q       50, RQ26, .L008003A4
// pdpc201/stdio.c:1481   

vvprintf.debugbreak_L06AE:
  BRK          1710

.L008003A4:
// pdpc201/stdio.c:1483   

.L008003A5:
// pdpc201/stdio.c:1484   
  ADD          RQ23, -1, RQ23
// pdpc201/stdio.c:1486   
  ADDS.L       RD22, 1, RD22
// pdpc201/stdio.c:1487   
  BRNE.Q       RQ0, RQ20, .L008003A6
  MOV.Q        (R2, 184), RQ27
  BRGE.Q       RQ27, RQ9, .L008003A7
  MOV.B        (RQ23, 0), RQ21
  SHAD.Q       RQ21, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ9
  MOV.B        RQ18, (RQ8, 0)
  BSR          .L008003A8, R0

.L008003A7:

.L008003A8:
  BSR          .L008003A9, R0

.L008003A6:
  MOV.B        (RQ23, 0), RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ20, 0, RQ11
  BSR          putc, R1

.L008003A9:
  ADD          R2, 288, RQ27
  BRNE.Q       RQ27, RQ23, .L008003A5
  BSR          .L008003AA, R0

.L0080039D:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ21
  BRNE.Q       115, RQ21, .L008003AB
// pdpc201/stdio.c:1492   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ8, 0, RQ27
  MOV.Q        RQ27, (R2, 216)
  BRNE.Q       R0, RQ27, .L008003AC
// pdpc201/stdio.c:1496   
  MOV          .L00C03008, RQ27
  ADD          RQ27, 0, RQ26
  MOV.Q        RQ26, (R2, 216)

.L008003AC:
  BRNE.Q       R0, RQ20, .L008003AD
// pdpc201/stdio.c:1502   
  MOV.Q        (R2, 216), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADD          RQ9, RQ27, RQ8
  MOV.Q        RQ27, (R2, 208)
  MOV.Q        (R2, 184), RQ26
  BRGE.Q       RQ26, RQ8, .L008003AE
// pdpc201/stdio.c:1505   
  ADD          RQ9, 0, RQ10
  MOV.Q        (R2, 216), RQ11
  MOV.Q        (R2, 208), RQ12
  BSR          memcpy, R1

.L008003AE:
// pdpc201/stdio.c:1506   
  MOV.Q        (R2, 208), RQ27
  ADD          RQ9, RQ27, RQ9
// pdpc201/stdio.c:1507   
  ADDS.L       RD22, 0, RQ26
  ADD          RQ26, RQ27, RQ25
  ADDS.L       RQ25, 0, RD22
  BSR          .L008003AF, R0

.L008003AD:
// pdpc201/stdio.c:1510   
  MOV.Q        (R2, 216), RQ10
  ADD          RQ20, 0, RQ11
  BSR          fputs, R1
// pdpc201/stdio.c:1512   
  MOV.Q        (R2, 216), RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  ADDS.L       RD22, 0, RQ26
  ADD          RQ26, RQ27, RQ25
  ADDS.L       RQ25, 0, RD22

.L008003AF:
  BSR          .L008003B0, R0

.L008003AB:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       99, RQ18, .L008003B1
// pdpc201/stdio.c:1516   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_i, R1
  ADD          RD10, 0, RQ21
  ADDS.L       RQ21, 0, RQ27
  MOV.Q        RQ27, (R2, 240)
  BRNE.Q       RQ0, RQ20, .L008003B2
  MOV.Q        (R2, 184), RQ27
  BRGE.Q       RQ27, RQ9, .L008003B3
  MOV.Q        (R2, 240), RQ27
  SHAD.Q       RQ27, 56, RQ18
  SHAR.Q       RQ18, 56, RQ18
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ9
  MOV.B        RQ18, (RQ8, 0)
  BSR          .L008003B4, R0

.L008003B3:

.L008003B4:
  BSR          .L008003B5, R0

.L008003B2:
  MOV.Q        (R2, 240), RQ27
  ADDS.L       RQ27, 0, RQ18
  ADD          RQ18, 0, RD10
  ADD          RQ20, 0, RQ11
  BSR          putc, R1

.L008003B5:
// pdpc201/stdio.c:1519   
  ADDS.L       RD22, 1, RD22
  BSR          .L008003B6, R0

.L008003B1:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ21
  BRNE.Q       110, RQ21, .L008003B7
// pdpc201/stdio.c:1522   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ8
  ADD          RQ8, 0, RQ27
// pdpc201/stdio.c:1524   
  MOV.L        RD22, (RQ27, 0)
  MOV.Q        RQ27, (R2, 176)
  BSR          .L008003B8, R0

.L008003B7:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BRNE.Q       37, RQ18, .L008003B9
  BRNE.Q       RQ0, RQ20, .L008003BA
  MOV.Q        (R2, 184), RQ27
  BRGE.Q       RQ27, RQ9, .L008003BB
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ9
  ADD          R0, 37, RD27
  MOV.B        RD27, (RQ8, 0)
  BSR          .L008003BC, R0

.L008003BB:

.L008003BC:
  BSR          .L008003BD, R0

.L008003BA:
  ADD          R0, 37, RD10
  ADD          RQ20, 0, RQ11
  BSR          putc, R1

.L008003BD:
// pdpc201/stdio.c:1529   
  ADDS.L       RD22, 1, RD22
  BSR          .L008003BE, R0

.L008003B9:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  MOV          .L00C02F7C, RQ10
  ADD          RQ18, 0, RD11
  BSR          strchr, R1
  ADD          RQ10, 0, RQ8
  BREQ.Q       RQ0, RQ8, .L008003BF
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  BREQ.L       R0, RQ18, .L008003BF

.L008003C0:
// pdpc201/stdio.c:1534   
  MOV.Q        (R2, 272), RQ10
  BSR          __va64_arg_l, R1
  ADD          RQ10, 0, RQ24
  ADD          RQ24, 0, RQ25
  MOV.Q        RQ25, (R2, 232)
// pdpc201/stdio.c:1535   
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ18
  SHAD.Q       RQ18, 56, RQ21
  SHAR.Q       RQ21, 56, RQ21
  ADD          RQ25, 0, RQ10
  ADD          RQ21, 0, RD11
  ADD          R0, 0, RQ12
  ADD          R0, 6, RD13
  ADD          R2, 288, RQ14
  BSR          dblcvt, R1
// pdpc201/stdio.c:1536   
  ADD          R2, 288, RQ10
  BSR          strlen, R1
  ADD          RQ10, 0, RQ27
  MOV.Q        RQ27, (R2, 208)
  BRLTU.Q      50, RQ27, .L008003C1
// pdpc201/stdio.c:1539   

vvprintf.debugbreak_L06AF:
  BRK          1711

.L008003C1:
  BRNE.Q       RQ0, RQ20, .L008003C2
  MOV.Q        (R2, 208), RQ27
  ADD          RQ9, RQ27, RQ8
  MOV.Q        (R2, 184), RQ26
  BRGE.Q       RQ26, RQ8, .L008003C3
// pdpc201/stdio.c:1544   
  ADD          RQ9, 0, RQ10
  ADD          R2, 288, RQ11
  MOV.Q        (R2, 208), RQ12
  BSR          memcpy, R1

.L008003C3:
// pdpc201/stdio.c:1545   
  MOV.Q        (R2, 208), RQ27
  ADD          RQ9, RQ27, RQ9
  BSR          .L008003C4, R0

.L008003C2:
// pdpc201/stdio.c:1548   
  ADD          R2, 288, RQ10
  ADD          RQ20, 0, RQ11
  BSR          fputs, R1

.L008003C4:
// pdpc201/stdio.c:1550   
  ADDS.L       RD22, 0, RQ27
  MOV.Q        (R2, 208), RQ26
  ADD          RQ27, RQ26, RQ25
  ADDS.L       RQ25, 0, RD22
  BSR          .L008003C5, R0

.L008003BF:
// pdpc201/stdio.c:1557   
  MOV.Q        (R2, 272), RQ8
  ADD          R2, 280, RQ10
  ADD          RQ20, 0, RQ11
  ADD          RQ9, 0, RQ12
  ADD          RQ8, 0, RQ13
  ADD          RD22, 0, RD14
  MOV.Q        (R2, 184), RQ15
  BSR          examine, R1
  ADD          RQ10, 0, RD27
// pdpc201/stdio.c:1558   
  ADDS.L       RD22, RD27, RD22
  MOV.L        RD27, (R2, 168)
// pdpc201/stdio.c:1559   
  BREQ.Q       RQ0, RQ9, .L008003C6
// pdpc201/stdio.c:1560   
  MOV.L        (R2, 168), RD27
  ADD          RQ9, RD27, RQ9

.L008003C6:

.L008003C5:

.L008003BE:

.L008003B8:

.L008003B6:

.L008003B0:

.L008003AA:
  BSR          .L008003C7, R0

.L0080039B:
  BRNE.Q       RQ0, RQ20, .L008003C8
  MOV.Q        (R2, 184), RQ27
  BRGE.Q       RQ27, RQ9, .L008003C9
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ21
  SHAD.Q       RQ21, 56, RQ27
  SHAR.Q       RQ27, 56, RQ27
  ADD          RQ9, 0, RQ8
  ADD          RQ9, 1, RQ9
  MOV.B        RQ27, (RQ8, 0)
  BSR          .L008003CA, R0

.L008003C9:

.L008003CA:
  BSR          .L008003CB, R0

.L008003C8:
  MOV.Q        (R2, 280), RQ27
  MOV.B        (RQ27, 0), RQ10
  ADD          RQ20, 0, RQ11
  BSR          putc, R1

.L008003CB:
// pdpc201/stdio.c:1568   
  ADDS.L       RD22, 1, RD22

.L008003C7:

.L0080039A:
// pdpc201/stdio.c:1569   
  MOV.Q        (R2, 280), RQ27
  ADD          RQ27, 1, RQ27
  MOV.Q        RQ27, (R2, 280)

.L00800397:
  MOV.L        (R2, 248), RD27
  BREQ.L       R0, RD27, .L00800398

.L008003CC:
// pdpc201/stdio.c:1573   
  ADD          RD22, 0, RD10

.L00C03191:
  ADD          R2, 816, R2
  MOV.Q        (R2, 88), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R24
  MOV.X        (R2, 72), R26
  ADD          R2, 96, R2
  JSR          RQ1, 0, R0

R_InitTextures:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -488, R2
  ADD          R2, 256, RQ6
  MOV.Q        RQ6, (R2, 200)
// r_data.c:703   char		name[19];
// r_data.c:726   name[8] = 0;	
  ADD          R2, 256, RQ27
  MOV.B        RD0, (RQ27, 8)
// r_data.c:727   names = W_CacheLumpName ("PNAMES", PU_STATIC);
  MOV          .L00C03115, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ26
// r_data.c:729   if(!names)
  MOV.Q        RQ26, (R2, 192)
  BRNE.Q       R0, RQ26, .L0080244F
// r_data.c:730   {
  MOV          .L00C031A4, RQ10
  BSR          I_Error, R1

.L0080244F:
// r_data.c:734   nummappatches = LONG ( *((int *)names) );
  MOV.Q        (R2, 192), RQ27
  MOV.L        (RQ27, 0), RD26
// r_data.c:735   name_p = names+4;
  ADD          RQ27, 4, RQ25
  MOV.Q        RQ25, (R2, 184)
// r_data.c:737   patchlookup = malloc (nummappatches*sizeof(int));
  SHAD.L       RD26, 2, RQ24
  MOV.L        RD26, (R2, 168)
  ADDS.L       RQ24, 0, RQ10
  BSR          malloc, R1
  MOV.Q        RQ10, (R2, 176)
// r_data.c:739   for (i=0 ; i<nummappatches ; i++)
  ADD          R0, 0, RD9
  BRGE.L       RD26, RD9, .L00802452

.L00802450:
// r_data.c:740   {
  SHAD.L       RD9, 3, RQ18
  MOV.Q        (R2, 184), RQ27
  ADD          RQ27, RQ18, RQ22
  ADD          R2, 256, RQ10
  ADD          RQ22, 0, RQ11
  ADD          R0, 8, RQ12
  BSR          strncpy, R1
// r_data.c:742   patchlookup[i] = W_CheckNumForName (name);
  ADD          R2, 256, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ18
  MOV.Q        (R2, 176), RQ26
  MOV.L        RQ18, (RQ26, RD9)
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 168), RD25
  BRLT.L       RD25, RD9, .L00802450

.L00802452:
// r_data.c:743   }
  MOV.Q        (R2, 192), RQ10
  BSR          Z_Free, R1
// r_data.c:749   maptex = maptex1 = W_CacheLumpName ("TEXTURE1", PU_STATIC);
  MOV          .L00C031A5, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ22, (R2, 208)
  ADD          RQ22, 0, RQ27
// r_data.c:750   numtextures1 = LONG(*maptex);
  MOV.L        (RQ27, 0), RD26
  MOV.L        RD26, (R2, 152)
  MOV.Q        RQ27, (R2, 224)
// r_data.c:751   maxoff = W_LumpLength (W_GetNumForName ("TEXTURE1"));
  MOV          .L00C031A5, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD10
  BSR          W_LumpLength, R1
  MOV.L        RD10, (R2, 160)
// r_data.c:752   directory = maptex+1;
  ADD          RQ27, 4, RQ25
  MOV.Q        RQ25, (R2, 136)
// r_data.c:754   if (W_CheckNumForName ("TEXTURE2") != -1)
  MOV          .L00C031A6, RQ10
  BSR          W_CheckNumForName, R1
  ADD          RQ10, 0, RQ18
  BREQ.Q       -1, RQ18, .L00802453
// r_data.c:755   {
  MOV          .L00C031A6, RQ10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpName, R1
  ADD          RQ10, 0, RQ27
// r_data.c:757   numtextures2 = LONG(*maptex2);
  MOV.L        (RQ27, 0), RD26
  MOV.L        RD26, (R2, 148)
  MOV.Q        RQ27, (R2, 216)
// r_data.c:758   maxoff2 = W_LumpLength (W_GetNumForName ("TEXTURE2"));
  MOV          .L00C031A6, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADD          RQ18, 0, RD10
  BSR          W_LumpLength, R1
  MOV.L        RD10, (R2, 156)
  BSR          .L00802454, R0

.L00802453:
// r_data.c:761   {
  MOV.Q        RQ0, (R2, 216)
// r_data.c:763   numtextures2 = 0;
  MOV.L        RD0, (R2, 148)
// r_data.c:764   maxoff2 = 0;
  MOV.L        RD0, (R2, 156)

.L00802454:
// r_data.c:765   }
  MOV.L        (R2, 152), RD26
  MOV.L        (R2, 148), RD25
  ADDS.L       RD26, RD25, RD27
// r_data.c:768   textures = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  SHAD.L       RD27, 3, RQ18
  MOV.L        RD27, numtextures
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, textures
// r_data.c:769   texturecolumnlump = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturecolumnlump
// r_data.c:770   texturecolumnofs = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturecolumnofs
// r_data.c:771   texturecomposite = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturecomposite
// r_data.c:772   texturecompositesize = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturecompositesize
// r_data.c:773   texturewidthmask = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturewidthmask
// r_data.c:774   textureheight = Z_Malloc (numtextures*sizeof(void*), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  SHAD.L       RD27, 3, RQ18
  ADD          RQ18, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, textureheight
// r_data.c:784   totalwidth = 0;
  MOV.L        RD0, (R2, 172)
// r_data.c:786   printf("\n");
  MOV          .L00C01210, RQ10
  BSR          printf, R1
// r_data.c:789   temp1 = W_GetNumForName ("S_START");	// P_???????
  MOV          .L00C02460, RQ10
  BSR          W_GetNumForName, R1
  MOV.L        RD10, (R2, 132)
// r_data.c:790   temp2 = W_GetNumForName ("S_END") - 1;
  MOV          .L00C02461, RQ10
  BSR          W_GetNumForName, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ18, -1, RD27
// r_data.c:792   temp3 = ((temp2-temp1+63)>>6) + ((numtextures+63)>>6);
  MOV.L        (R2, 132), RD24
  SUBS.L       RD27, RD24, RQ18
  MOV.L        RD27, (R2, 128)
  ADDS.L       RQ18, 63, RQ8
  SHAR         RQ8, 6, RQ18
  MOV.L        numtextures, RD19
  ADDS.L       RD19, 63, RQ8
  SHAR         RQ8, 6, RQ21
  ADDS.L       RQ18, RQ21, RD19
  MOV.L        RD19, (R2, 124)
// r_data.c:793   printf("[");
  MOV          .L00C031A7, RQ10
  BSR          printf, R1
// r_data.c:794   for (i = 0; i < temp3; i++)
  ADD          R0, 0, RD9
  BRGE.L       RD19, RD9, .L00802457

.L00802455:
// r_data.c:795   printf(" ");
  MOV          .L00C03063, RQ10
  BSR          printf, R1
  ADDS.L       RD9, 1, RD9
  MOV.L        (R2, 124), RD27
  BRLT.L       RD27, RD9, .L00802455

.L00802457:
// r_data.c:797   printf("]");
  MOV          .L00C031A8, RQ10
  BSR          printf, R1
// r_data.c:802   printf("\r[");
  MOV          .L00C031A9, RQ10
  BSR          printf, R1
// r_data.c:805   for(i=0; i < 64; i++)
  ADD          R0, 0, RD9

.L00802458:
// r_data.c:806   texturehash[i] = -1;
  MOV          texturehash, RQ27
  ADD          R0, -1, RD26
  MOV.W        RD26, (RQ27, RD9)
  ADDS.L       RD9, 1, RD9
  BRLT.L       64, RD9, .L00802458

.L0080245A:
// r_data.c:808   for (i=0 ; i<numtextures ; i++, directory++)
  ADD          R0, 0, RD9
  MOV.L        numtextures, RD27
  BRGE.L       RD27, RD9, .L0080245D

.L0080245B:
// r_data.c:809   {
  ADD          R0, 63, RD27
  BTSTN.L      RD27, RD9, .L0080245E
// r_data.c:811   {
  MOV          .L00C00FE6, RQ10
  BSR          printf, R1
// r_data.c:813   fflush(stdout);
  BSR          __get_stdout, R1
  ADD          RQ10, 0, RQ22
  MOV.Q        (RQ22, 0), RQ27
  ADD          RQ27, 0, RQ10
  BSR          fflush, R1

.L0080245E:
// r_data.c:816   if (i == numtextures1)
  MOV.L        (R2, 152), RD27
  BRNE.Q       RD27, RD9, .L0080245F
// r_data.c:819   maptex = maptex2;
  MOV.Q        (R2, 216), RQ27
// r_data.c:820   maxoff = maxoff2;
  MOV.L        (R2, 156), RD26
  ADD          RD26, 0, RD25
  MOV.L        RD25, (R2, 160)
// r_data.c:821   directory = maptex+1;
  ADD          RQ27, 4, RQ24
  MOV.Q        RQ24, (R2, 136)
  MOV.Q        RQ27, (R2, 224)

.L0080245F:
// r_data.c:824   offset = LONG(*directory);
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 0), RD26
// r_data.c:826   if (offset > maxoff)
  MOV.L        RD26, (R2, 164)
  MOV.L        (R2, 160), RD25
  BRLE.L       RD25, RD26, .L00802460
// r_data.c:827   I_Error ("R_InitTextures: bad texture directory");
  MOV          .L00C031AA, RQ10
  BSR          I_Error, R1

.L00802460:
// r_data.c:829   mtexture = (maptexture_t *) ( (byte *)maptex + offset);
  MOV.Q        (R2, 224), RQ27
  MOV.L        (R2, 164), RD26
  ADD          RQ27, RD26, RQ22
  ADD          RQ22, 0, RQ25
// r_data.c:831   texture = textures[i] =
  MOV.W        (RQ25, 20), RQ8
  MOV.Q        RQ25, (R2, 248)
  ADDS.L       RQ8, -1, RQ21
  ADD          R0, 12, R5
  MULS.L       RQ21, R5, RQ18
  ADDS.L       RQ18, 36, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ24
  MOV.Q        textures, RQ19
  MOV.Q        RQ24, (RQ19, RD9)
  ADD          RQ24, 0, RQ20
// r_data.c:836   texture->width = SHORT(mtexture->width);
  MOV.W        (RQ25, 12), RQ18
  MOV.W        RQ18, (RQ20, 16)
// r_data.c:837   texture->height = SHORT(mtexture->height);
  MOV.W        (RQ25, 14), RQ8
  MOV.W        RQ8, (RQ20, 18)
// r_data.c:838   texture->patchcount = SHORT(mtexture->patchcount);
  MOV.W        (RQ25, 20), RQ21
  MOV.W        RQ21, (RQ20, 22)
// r_data.c:839   texture->magic1 = 0x123456;
  ADD          R0, 0x00123456, RD19
  MOV.L        RD19, (RQ20, 12)
// r_data.c:843   w_strupr_n(texture->name, mtexture->name, sizeof(texture->name));
  ADD          RQ25, 0, RQ24
  ADD          RQ20, 0, RQ22
  ADD          RQ22, 0, RQ10
  ADD          RQ24, 0, RQ11
  ADD          R0, 8, RD12
  BSR          w_strupr_n, R1
// r_data.c:845   if(texture->name[0]!=mtexture->name[0])
  MOV.B        (RQ20, 0), RQ18
  MOV.B        (RQ25, 0), RQ8
  BREQ.Q       RQ8, RQ18, .L00802461
// r_data.c:846   {

R_InitTextures.debugbreak_L06BA:
  BRK          1722
// r_data.c:848   printf("R_InitTextures: %s -> %s\n",
  ADD          RQ20, 0, RQ27
  MOV.Q        (R2, 248), RQ26
  ADD          RQ26, 0, RQ22
  MOV          .L00C031AC, RQ10
  ADD          RQ22, 0, RQ11
  ADD          RQ27, 0, RQ12
  BSR          printf, R1

.L00802461:
// r_data.c:856   mpatch = &mtexture->patches[0];
  MOV.Q        (R2, 248), RQ27
  ADD          RQ27, 22, RQ26
  ADD          RQ26, 0, RQ25
  MOV.Q        RQ25, (R2, 240)
// r_data.c:857   patch = &texture->patches[0];
  ADD          RQ20, 24, RQ22
  ADD          RQ22, 0, RQ24
  MOV.Q        RQ24, (R2, 232)
// r_data.c:859   for (j=0 ; j<texture->patchcount ; j++, mpatch++, patch++)
  ADD          R0, 0, RD23
  MOV.W        (RQ20, 22), RQ8
  BRGE.L       RQ8, RD23, .L00802464

.L00802462:
// r_data.c:860   {
  MOV.Q        (R2, 240), RQ27
  MOV.W        (RQ27, 0), RQ21
  MOV.Q        (R2, 232), RQ26
  MOV.L        RQ21, (RQ26, 0)
// r_data.c:862   patch->originy = SHORT(mpatch->originy);
  MOV.W        (RQ27, 2), RQ18
  MOV.L        RQ18, (RQ26, 4)
// r_data.c:863   patch->patch = patchlookup[SHORT(mpatch->patch)];
  MOV.W        (RQ27, 4), RQ8
  MOV.Q        (R2, 176), RQ25
  MOV.L        (RQ25, RQ8), RQ21
  MOV.L        RQ21, (RQ26, 8)
// r_data.c:864   if (patch->patch == -1)
  MOV.L        (RQ26, 8), RQ18
  BRNE.Q       -1, RQ18, .L00802465
// r_data.c:865   {
  ADD          RQ20, 0, RQ22
  MOV          .L00C031AD, RQ10
  ADD          RQ22, 0, RQ11
  BSR          I_Error, R1

.L00802465:
  ADD          RD23, 0, RQ8
  ADDS.L       RD23, 1, RD23
  MOV.Q        (R2, 240), RQ27
  MOV.Q        RQ27, (R2, 64)
  ADD          RQ27, 10, RQ27
  MOV.Q        RQ27, (R2, 240)
  MOV.Q        (R2, 232), RQ26
  ADD          RQ26, 0, RQ22
  ADD          RQ26, 12, RQ26
  MOV.Q        RQ26, (R2, 232)
  MOV.W        (RQ20, 22), RQ8
  BRLT.L       RQ8, RD23, .L00802462

.L00802464:
// r_data.c:883   texturecolumnlump[i] = NULL;
  MOV.Q        texturecolumnlump, RQ27
  MOV.Q        RQ0, (RQ27, RD9)
// r_data.c:884   texturecolumnofs[i] = NULL;
  MOV.Q        texturecolumnofs, RQ27
  MOV.Q        RQ0, (RQ27, RD9)
// r_data.c:893   j = 1;
  ADD          R0, 1, RD23
// r_data.c:894   while (j*2 <= texture->width)
  BSR          .L00802468, R0

.L00802466:
// r_data.c:895   j<<=1;
  SHAD.L       RD23, 1, RD23

.L00802468:
  SHAD.L       RD23, 1, RQ21
  MOV.W        (RQ20, 16), RQ18
  BRLE.L       RQ18, RQ21, .L00802466

.L00802467:
// r_data.c:897   texturewidthmask[i] = j-1;
  ADDS.L       RD23, -1, RQ8
  MOV.Q        texturewidthmask, RQ27
  MOV.L        RQ8, (RQ27, RD9)
// r_data.c:898   textureheight[i] = texture->height<<FRACBITS;
  MOV.W        (RQ20, 18), RQ21
  SHAD.L       RQ21, 16, RQ18
  MOV.Q        textureheight, RQ27
  MOV.L        RQ18, (RQ27, RD9)
// r_data.c:904   totalwidth += texture->width;
  MOV.W        (RQ20, 16), RQ8
  MOV.L        (R2, 172), RD27
  ADDS.L       RD27, RQ8, RD27
  MOV.L        RD27, (R2, 172)
// r_data.c:906   if(texture->magic1 != 0x123456)
  MOV.L        (RQ20, 12), RQ21
  ADD          R0, 0x00123456, RD26
  BREQ.Q       RD26, RQ21, .L00802469
// r_data.c:907   { __debugbreak(); }

R_InitTextures.debugbreak_L06BB:
  BRK          1723

.L00802469:
// r_data.c:909   j = W_HashIndexForName(texture->name);
  ADD          RQ20, 0, RQ27
  ADD          RQ27, 0, RQ10
  BSR          W_HashIndexForName, R1
  ADD          RQ10, 0, RD23
// r_data.c:910   texture->next = texturehash[j];
  MOV          texturehash, RQ26
  MOV.W        (RQ26, RD23), RQ18
  MOV.W        RQ18, (RQ20, 20)
// r_data.c:911   texturehash[j] = i;
  MOV.W        RD9, (RQ26, RD23)
  ADDS.L       RD9, 0, RQ8
  ADDS.L       RD9, 1, RD9
  MOV.Q        (R2, 136), RQ26
  ADD          RQ26, 0, RQ27
  ADD          RQ26, 4, RQ26
  MOV.Q        RQ26, (R2, 136)
  MOV.L        numtextures, RD25
  BRLT.L       RD25, RD9, .L0080245B

.L0080245D:
// r_data.c:914   Z_Free (maptex1);
  MOV.Q        (R2, 208), RQ10
  BSR          Z_Free, R1
// r_data.c:915   if (maptex2)
  MOV.Q        (R2, 216), RQ27
  BREQ.Q       R0, RQ27, .L0080246A
// r_data.c:916   Z_Free (maptex2);
  MOV.Q        (R2, 216), RQ10
  BSR          Z_Free, R1

.L0080246A:
// r_data.c:931   texturetranslation = Z_Malloc ((numtextures+1)*sizeof(int), PU_STATIC, 0);
  MOV.L        numtextures, RD27
  ADDS.L       RD27, 1, RQ18
  SHAD.L       RQ18, 2, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          R0, 1, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  MOV.Q        RQ10, texturetranslation
// r_data.c:933   for (i=0 ; i<numtextures ; i++)
  ADD          R0, 0, RD9
  MOV.L        numtextures, RD27
  BRGE.L       RD27, RD9, .L0080246D

.L0080246B:
// r_data.c:934   texturetranslation[i] = i;
  MOV.Q        texturetranslation, RQ27
  MOV.L        RD9, (RQ27, RD9)
  ADDS.L       RD9, 1, RD9
  MOV.L        numtextures, RD27
  BRLT.L       RD27, RD9, .L0080246B

.L0080246D:

.L00C031A3:
  ADD          R2, 488, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0
  .balign 4

R_ProjectSprite:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ23
// r_things.c:679   tr_x = thing->x - viewx;
  MOV.L        (RQ23, 24), RQ18
  MOV.L        viewx, RD26
  SUBS.L       RQ18, RD26, RD27
  MOV.L        RD27, (R2, 180)
// r_things.c:680   tr_y = thing->y - viewy;
  MOV.L        (RQ23, 28), RQ18
  MOV.L        viewy, RD25
  SUBS.L       RQ18, RD25, RD26
  MOV.L        RD26, (R2, 176)
// r_things.c:682   gxt = FixedMul(tr_x,viewcos); 
  ADD          RD27, 0, RD10
  MOV.L        viewcos, RD11
  BSR          FixedMul, R1
  MOV.L        RD10, (R2, 172)
// r_things.c:683   gyt = -FixedMul(tr_y,viewsin);
  ADD          RD26, 0, RD10
  MOV.L        viewsin, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RD25
// r_things.c:685   tz = gxt-gyt; 
  MOV.L        (R2, 172), RD19
  SUBS.L       RD19, RD25, RD24
  MOV.L        RD25, (R2, 168)
// r_things.c:688   if (tz < MINZ)
  MOV.L        RD24, (R2, 160)
  LUI          64, RD27
  BRLT.L       RD27, RD24, .L00C031B4
// r_things.c:692   xscale = FixedDivSoft(projection, tz);
  MOV.L        projection, RD10
  MOV.L        (R2, 160), RD11
  BSR          FixedDivSoft, R1
  MOV.L        RD10, (R2, 156)
// r_things.c:694   gxt = -FixedMul(tr_x,viewsin); 
  MOV.L        (R2, 180), RD10
  MOV.L        viewsin, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       R0, RQ18, RD27
  MOV.L        RD27, (R2, 172)
// r_things.c:695   gyt = FixedMul(tr_y,viewcos); 
  MOV.L        (R2, 176), RD10
  MOV.L        viewcos, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD26
// r_things.c:696   tx = -(gyt+gxt); 
  ADDS.L       RD26, RD27, RQ18
  MOV.L        RD26, (R2, 168)
  SUBS.L       R0, RQ18, RD25
  MOV.L        RD25, (R2, 164)
// r_things.c:699   if (abs(tx)>(tz<<2))
  SHAR.Q       RD25, 63, RQ6
  SUB          R0, RD25, RQ18
  SHAR.Q       RQ18, 63, RQ7
  AND          RQ18, RQ6, RQ6
  AND          RD25, RQ7, RQ7
  OR           RQ6, RQ7, RQ18
  MOV.L        (R2, 160), RD24
  SHAD.L       RD24, 2, RQ9
  BRGT.L       RQ9, RQ18, .L00C031B4
// r_things.c:706   if ((unsigned)thing->sprite >= numsprites)
  MOV.L        (RQ23, 60), RQ18
  ADDU.L       RQ18, R0, RQ9
  MOV.L        numsprites, RD27
  BRLTU.L      RD27, RQ9, .L008027E5
// r_things.c:709   printf ("R_ProjectSprite: invalid sprite number %i\n",
  MOV.L        (RQ23, 60), RQ18
  MOV          .L00C031B5, RQ10
  ADD          RQ18, 0, RD11
  BSR          printf, R1
// r_things.c:711   return;
  BSR          .L00C031B4, R0

.L008027E5:
// r_things.c:714   sprdef = &sprites[thing->sprite];
  MOV.L        (RQ23, 60), RQ9
  MOV.Q        sprites, RQ27
  SHAD.L       RQ9, 4, RQ26
  ADD          RQ27, RQ26, RQ26
// r_things.c:716   if(sprdef->numframes<=0)
  MOV.L        (RQ26, 0), RQ18
  MOV.Q        RQ26, (R2, 136)
  BRLE.L       R0, RQ18, .L00C031B4
// r_things.c:722   if ( (thing->frame&FF_FRAMEMASK) >= sprdef->numframes )
  MOV.L        (RQ23, 64), RQ9
  AND          RQ9, 32767, RQ18
  MOV.Q        (R2, 136), RQ27
  MOV.L        (RQ27, 0), RQ9
  BRLT.L       RQ9, RQ18, .L008027E6
// r_things.c:725   printf ("R_ProjectSprite: invalid sprite frame %i : %i\n",
  MOV.L        (RQ23, 64), RQ18
  MOV.L        (RQ23, 60), RQ9
  MOV          .L00C031B6, RQ10
  ADDS.L       RQ9, 0, RD11
  ADD          RQ18, 0, RD12
  BSR          printf, R1
// r_things.c:727   return;
  BSR          .L00C031B4, R0

.L008027E6:
// r_things.c:730   sprframe = &sprdef->spriteframes[ thing->frame & FF_FRAMEMASK];
  MOV.Q        (R2, 136), RQ27
  MOV.Q        (RQ27, 8), RQ20
  MOV.L        (RQ23, 64), RQ18
  AND          RQ18, 32767, RQ9
  ADD          R0, 28, R5
  MUL.L        RQ9, R5, RQ26
  ADD          RQ20, RQ26, RQ26
// r_things.c:732   if (sprframe->rotate)
  MOV.L        (RQ26, 0), RQ18
  MOV.Q        RQ26, (R2, 128)
  BREQ.L       R0, RQ18, .L008027E7
// r_things.c:735   ang = R_PointToAngle (thing->x, thing->y);
  MOV.L        (RQ23, 28), RQ9
  MOV.L        (RQ23, 24), RQ18
  ADD          RQ18, 0, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          R_PointToAngle, R1
  ADD          RQ10, 0, RD27
// r_things.c:736   rot = (ang-thing->angle+(unsigned)(ANG45/2)*9)>>29;
  MOVU.L       (RQ23, 56), RQ9
  SUBU.L       RD27, RQ9, RQ18
  MOV.L        RD27, (R2, 108)
  ADD          R0, 0x0000000090000000, RD26
  ADDU.L       RQ18, RD26, RQ9
  SHLR         RQ9, 29, RD25
// r_things.c:737   lump = sprframe->lump[rot];
  MOV.Q        (R2, 128), RQ24
  ADD          RQ24, 4, RQ20
  MOV.W        (RQ20, RD25), RD19
  MOV.L        RD19, (R2, 124)
// r_things.c:738   flip = (boolean)sprframe->flip[rot];
  ADD          RQ24, 20, RQ20
  MOVU.B       (RQ20, RD25), RQ18
  MOV.L        RD25, (R2, 120)
  MOV.L        RD18, (R2, 116)
  BSR          .L008027E8, R0

.L008027E7:
// r_things.c:743   lump = sprframe->lump[0];
  MOV.Q        (R2, 128), RQ27
  ADD          RQ27, 4, RQ20
  MOV.W        (RQ20, 0), RD26
  MOV.L        RD26, (R2, 124)
// r_things.c:744   flip = (boolean)sprframe->flip[0];
  MOVU.B       (RQ27, 20), RQ18
  MOV.L        RD18, (R2, 116)

.L008027E8:
// r_things.c:747   R_CheckSpriteLump(lump);
  MOV.L        (R2, 124), RD10
  BSR          R_CheckSpriteLump, R1
// r_things.c:750   tx -= spriteoffset[lump];	
  MOV.Q        spriteoffset, RQ27
  MOV.L        (R2, 124), RD26
  MOV.L        (RQ27, RD26), RQ9
  MOV.L        (R2, 164), RD27
  SUBS.L       RD27, RQ9, RD27
  MOV.L        RD27, (R2, 164)
// r_things.c:751   x1 = (centerxfrac + FixedMul (tx,xscale) ) >>FRACBITS;
  ADD          RD27, 0, RD10
  MOV.L        (R2, 156), RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        centerxfrac, RD25
  ADDS.L       RD25, RQ18, RQ9
  SHAR         RQ9, 16, RD25
// r_things.c:754   if (x1 > viewwidth)
  MOV.L        RD25, (R2, 152)
  MOV.L        viewwidth, RD24
  BRGT.L       RD24, RD25, .L00C031B4
// r_things.c:759   tx +=  spritewidth[lump];
  MOV.Q        spritewidth, RQ27
  MOV.L        (R2, 124), RD26
  MOV.L        (RQ27, RD26), RQ18
  MOV.L        (R2, 164), RD27
  ADDS.L       RD27, RQ18, RD27
  MOV.L        RD27, (R2, 164)
// r_things.c:760   x2 = ((centerxfrac + FixedMul (tx,xscale) ) >>FRACBITS) - 1;
  ADD          RD27, 0, RD10
  MOV.L        (R2, 156), RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        centerxfrac, RD25
  ADDS.L       RD25, RQ9, RQ18
  SHAR         RQ18, 16, RQ9
  ADDS.L       RQ9, -1, RD25
// r_things.c:763   if (x2 < 0)
  MOV.L        RD25, (R2, 148)
  BRLT.L       R0, RD25, .L00C031B4
// r_things.c:769   vis = R_NewVisSprite ();
  BSR          R_NewVisSprite, R1
  ADD          RQ10, 0, RQ8
// r_things.c:770   vis->mobjflags = thing->flags;
  MOV.L        (RQ23, 160), RQ18
  MOV.L        RQ18, (RQ8, 72)
// r_things.c:771   vis->scale = xscale<<detailshift;
  MOV.L        (R2, 156), RD27
  MOV.L        detailshift, RD26
  SHAD.L       RD27, RD26, RQ9
  MOV.L        RQ9, (RQ8, 48)
// r_things.c:772   vis->gx = thing->x;
  MOV.L        (RQ23, 24), RQ18
  MOV.L        RQ18, (RQ8, 28)
// r_things.c:773   vis->gy = thing->y;
  MOV.L        (RQ23, 28), RQ9
  MOV.L        RQ9, (RQ8, 32)
// r_things.c:774   vis->gz = thing->z;
  MOV.L        (RQ23, 32), RQ18
  MOV.L        RQ18, (RQ8, 36)
// r_things.c:775   vis->gzt = thing->z + spritetopoffset[lump];
  MOV.Q        spritetopoffset, RQ26
  MOV.L        (R2, 124), RD25
  MOV.L        (RQ26, RD25), RQ9
  ADDS.L       RQ18, RQ9, RQ22
  MOV.L        RQ22, (RQ8, 40)
// r_things.c:776   vis->texturemid = vis->gzt - viewz;
  MOV.L        (RQ8, 40), RQ18
  MOV.L        viewz, RD26
  SUBS.L       RQ18, RD26, RQ9
  MOV.L        RQ9, (RQ8, 56)
// r_things.c:777   vis->x1 = x1 < 0 ? 0 : x1;
  MOV.L        (R2, 152), RD26
  BRGE.L       R0, RD26, .L008027E9
  ADD          R0, 0, RQ22
  BSR          .L008027EA, R0

.L008027E9:
  MOV.L        (R2, 152), RD22

.L008027EA:
  MOV.L        RQ22, (RQ8, 16)
// r_things.c:778   vis->x2 = x2 >= viewwidth ? viewwidth-1 : x2;
  MOV.L        (R2, 148), RD27
  MOV.L        viewwidth, RD26
  BRLT.L       RD26, RD27, .L008027EB
  MOV.L        viewwidth, RD27
  ADDS.L       RD27, -1, RQ9
  ADD          RQ9, 0, RQ18
  BSR          .L008027EC, R0

.L008027EB:
  MOV.L        (R2, 148), RD18

.L008027EC:
  MOV.L        RQ18, (RQ8, 20)
// r_things.c:779   vis->tz = tz;
  MOV.L        (R2, 160), RD27
  MOV.L        RD27, (RQ8, 24)
// r_things.c:781   iscale = FixedDivSoft (FRACUNIT, xscale);
  LUI          16, RD10
  MOV.L        (R2, 156), RD11
  BSR          FixedDivSoft, R1
  MOV.L        RD10, (R2, 104)
// r_things.c:783   if (flip)
  MOV.L        (R2, 116), RD26
  BREQ.L       R0, RD26, .L008027ED
// r_things.c:784   {
  MOV.Q        spritewidth, RQ27
  MOV.L        (R2, 124), RD26
  MOV.L        (RQ27, RD26), RQ22
  ADDS.L       RQ22, -1, RQ18
  MOV.L        RQ18, (RQ8, 44)
// r_things.c:786   vis->xiscale = -iscale;
  MOV.L        (R2, 104), RD27
  SUBS.L       R0, RD27, RQ9
  MOV.L        RQ9, (RQ8, 52)
  BSR          .L008027EE, R0

.L008027ED:
// r_things.c:789   {
  MOV.L        RD0, (RQ8, 44)
// r_things.c:791   vis->xiscale = iscale;
  MOV.L        (R2, 104), RD27
  MOV.L        RD27, (RQ8, 52)

.L008027EE:
// r_things.c:794   if (vis->x1 > x1)
  MOV.L        (RQ8, 16), RQ22
  MOV.L        (R2, 152), RD27
  BRLE.L       RD27, RQ22, .L008027EF
// r_things.c:795   vis->startfrac += vis->xiscale*(vis->x1-x1);
  MOV.L        (RQ8, 44), RQ18
  MOV.L        (RQ8, 52), RQ9
  MOV.L        (RQ8, 16), RQ22
  MOV.L        (R2, 152), RD26
  SUBS.L       RQ22, RD26, RQ27
  MULS.L       RQ9, RQ27, RQ22
  ADDS.L       RQ18, RQ22, RQ27
  MOV.L        RQ27, (RQ8, 44)

.L008027EF:
// r_things.c:796   vis->patch = lump;
  MOV.L        (R2, 124), RD27
  MOV.L        RD27, (RQ8, 60)
// r_things.c:799   if (thing->flags & MF_SHADOW)
  MOV.L        (RQ23, 160), RQ18
  LUI          64, RD26
  BTST.L       RD26, RQ18, .L008027F0
// r_things.c:802   vis->colormap = NULL;
  MOV.Q        RQ0, (RQ8, 64)
  BSR          .L008027F1, R0

.L008027F0:
  MOV.Q        fixedcolormap, RQ27
  BREQ.Q       R0, RQ27, .L008027F2
// r_things.c:805   {
  MOV.L        (R2, 124), RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L008027F3
// r_things.c:808   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L008027F4, R0

.L008027F3:
// r_things.c:813   vis->colormap = fixedcolormap;
  MOV.Q        fixedcolormap, RQ27
  MOV.Q        RQ27, (RQ8, 64)

.L008027F4:
  BSR          .L008027F5, R0

.L008027F2:
  MOV.L        (RQ23, 64), RQ9
  LUI          8, RD27
  BTST.L       RD27, RQ9, .L008027F6
// r_things.c:817   {
  MOV.L        (R2, 124), RD10
  ADD          R0, 0, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L008027F7
// r_things.c:820   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L008027F8, R0

.L008027F7:
// r_things.c:825   vis->colormap = colormaps;
  MOV.Q        colormaps, RQ27
  MOV.Q        RQ27, (RQ8, 64)

.L008027F8:
  BSR          .L008027F9, R0

.L008027F6:
// r_things.c:830   {
  MOV.L        (R2, 124), RD10
  MOV.L        lightlevel, RD11
  BSR          R_ColormapForLump, R1
  ADD          RQ10, 0, RQ21
  BREQ.Q       R0, RQ21, .L008027FA
// r_things.c:834   {
  MOV.Q        RQ21, (RQ8, 64)
  BSR          .L008027FB, R0

.L008027FA:
// r_things.c:839   index = xscale>>(LIGHTSCALESHIFT-detailshift);
  MOV.L        detailshift, RD27
  ADD          R0, 12, R5
  SUBS.L       R5, RD27, RQ22
  MOV.L        (R2, 156), RD26
  SHAR         RD26, RQ22, RD27
  MOV.L        RD27, (R2, 112)
  BRLT.L       48, RD27, .L008027FC
// r_things.c:842   index = MAXLIGHTSCALE-1;
  ADD          R0, 47, RD27
  MOV.L        RD27, (R2, 112)

.L008027FC:
// r_things.c:844   vis->colormap = spritelights[index];
  MOV.Q        spritelights, RQ27
  MOV.L        (R2, 112), RD26
  MOV.Q        (RQ27, RD26), RQ20
  MOV.Q        RQ20, (RQ8, 64)

.L008027FB:

.L008027F9:

.L008027F5:

.L008027F1:

.L00C031B4:
  ADD          R2, 376, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

EV_VerticalDoor:
  ADD          R2, -72, R2
  MOV.Q        RQ1, (R2, 64)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R20, (R2, 24)
  MOV.Q        R27, (R2, 56)
  ADD          R2, -376, R2
  ADD          RQ10, 0, RQ22
  MOV.Q        RQ11, (R2, 144)
// p_doors.c:365   side = 0;	// only front sides can be used
  MOV.L        RD0, (R2, 136)
// p_doors.c:368   if(thing)
  MOV.Q        (R2, 144), RQ27
  BREQ.Q       R0, RQ27, .L00801A8D
// p_doors.c:369   player = thing->player;
  MOV.Q        (R2, 144), RQ27
  MOV.Q        (RQ27, 192), RQ8
  BSR          .L00801A8E, R0

.L00801A8D:
// p_doors.c:371   player = NULL;
  ADD          R0, 0, RQ8

.L00801A8E:
// p_doors.c:373   switch(line->special)
  MOV.W        (RQ22, 26), RQ18
  BREQ.Q       26, RQ18, .L00801A90
  BREQ.Q       32, RQ18, .L00801A91
  BREQ.Q       27, RQ18, .L00801A92
  BREQ.Q       34, RQ18, .L00801A93
  BREQ.Q       28, RQ18, .L00801A94
  BREQ.Q       33, RQ18, .L00801A95
  BSR          .L00801A8F, R0

.L00801A90:

.L00801A91:
// p_doors.c:376   case 32:
  BREQ.Q       R0, RQ8, .L00C031BC
// p_doors.c:380   if (!player->cards[it_bluecard] && !player->cards[it_blueskull])
  MOV.L        (RQ8, 72), RQ18
  BRNE.L       R0, RQ18, .L00801A96
  MOV.L        (RQ8, 84), RQ18
  BRNE.L       R0, RQ18, .L00801A96

.L00801A97:
// p_doors.c:381   {
  MOV          .L00C031BD, RQ27
  MOV.Q        RQ27, (RQ8, 224)
// p_doors.c:383   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:384   return;
  BSR          .L00C031BC, R0

.L00801A96:
// p_doors.c:385   }
  BSR          .L00801A8F, R0

.L00801A92:

.L00801A93:
// p_doors.c:389   case 34:
  BREQ.Q       R0, RQ8, .L00C031BC
// p_doors.c:393   if (!player->cards[it_yellowcard] &&
  MOV.L        (RQ8, 76), RQ18
  BRNE.L       R0, RQ18, .L00801A99
  MOV.L        (RQ8, 88), RQ18
  BRNE.L       R0, RQ18, .L00801A99

.L00801A9A:
// p_doors.c:395   {
  MOV          .L00C031BE, RQ27
  MOV.Q        RQ27, (RQ8, 224)
// p_doors.c:397   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:398   return;
  BSR          .L00C031BC, R0

.L00801A99:
// p_doors.c:399   }
  BSR          .L00801A8F, R0

.L00801A94:

.L00801A95:
// p_doors.c:403   case 33:
  BREQ.Q       R0, RQ8, .L00C031BC
// p_doors.c:407   if (!player->cards[it_redcard] && !player->cards[it_redskull])
  MOV.L        (RQ8, 80), RQ18
  BRNE.L       R0, RQ18, .L00801A9C
  MOV.L        (RQ8, 92), RQ18
  BRNE.L       R0, RQ18, .L00801A9C

.L00801A9D:
// p_doors.c:408   {
  MOV          .L00C031BF, RQ27
  MOV.Q        RQ27, (RQ8, 224)
// p_doors.c:410   S_StartSound(NULL,sfx_oof);
  ADD          RQ0, 0, RQ10
  ADD          R0, 34, RD11
  BSR          S_StartSound, R1
// p_doors.c:411   return;
  BSR          .L00C031BC, R0

.L00801A9C:
// p_doors.c:412   }

.L00801A8F:
// p_doors.c:417   sidenum = line->sidenum[side^1];
  ADD          RQ22, 36, RQ27
  MOV.L        (R2, 136), RD13
  XOR          RD13, 1, RQ18
  MOV.W        (RQ27, RQ18), RD20
  MOV.Q        RQ27, (R2, 120)
// p_doors.c:421   if(sidenum>0)
  BRLE.L       R0, RD20, .L00801A9F
// p_doors.c:422   {
  MOV.Q        sides, RQ27
  ADD          R0, 24, R5
  MUL.L        RD20, R5, RQ13
  ADD          RQ27, RQ13, RQ13
  MOV.Q        (RQ13, 16), RQ23
// p_doors.c:424   secnum = sec-sectors;
  MOV.Q        sectors, RQ27
  SUB          RQ23, RQ27, RQ12
  SHAR.Q       RQ12, 7, RQ12
  ADDS.L       RQ12, 0, RD27
  MOV.L        RD27, (R2, 140)
  BSR          .L00801AA0, R0

.L00801A9F:
// p_doors.c:426   {
  ADD          R0, 0, RQ23
// p_doors.c:428   secnum = 0;
  MOV.L        RD0, (R2, 140)
// p_doors.c:429   return;
  BSR          .L00C031BC, R0

.L00801AA0:
// p_doors.c:432   if (sec && sec->specialdata)
  BREQ.Q       R0, RQ23, .L00801AA1
  MOV.Q        (RQ23, 104), RQ27
  MOV.Q        RQ27, (R2, 120)
  BREQ.Q       R0, RQ27, .L00801AA1

.L00801AA2:
// p_doors.c:433   {
  MOV.Q        (RQ23, 104), RQ9
// p_doors.c:435   switch(line->special)
  MOV.W        (RQ22, 26), RQ18
  BREQ.Q       1, RQ18, .L00801AA5
  BREQ.Q       26, RQ18, .L00801AA6
  BREQ.Q       27, RQ18, .L00801AA7
  BREQ.Q       28, RQ18, .L00801AA8
  BREQ.Q       117, RQ18, .L00801AA9
  BSR          .L00801AA4, R0

.L00801AA5:

.L00801AA6:

.L00801AA7:

.L00801AA8:

.L00801AA9:
// p_doors.c:441   case	117:
  MOV.L        (RQ9, 48), RQ18
  BRNE.Q       -1, RQ18, .L00801AAA
// p_doors.c:443   door->direction = 1;	// go back up
  ADD          R0, 1, RD27
  MOV.L        RD27, (RQ9, 48)
  BSR          .L00801AAB, R0

.L00801AAA:
  BREQ.Q       R0, RQ8, .L00C031BC
// p_doors.c:450   door->direction = -1;	// start going down immediately
  ADD          R0, -1, RD27
  MOV.L        RD27, (RQ9, 48)

.L00801AAB:
// p_doors.c:451   }
  BSR          .L00C031BC, R0

.L00801AA4:

.L00801AA1:
// p_doors.c:457   switch(line->special)
  MOV.W        (RQ22, 26), RQ18
  BREQ.Q       117, RQ18, .L00801AAD
  BREQ.Q       118, RQ18, .L00801AAE
  BREQ.Q       1, RQ18, .L00801AAF
  BREQ.Q       31, RQ18, .L00801AB0
  BSR          .L00801AB1, R0

.L00801AAD:

.L00801AAE:
// p_doors.c:460   case 118:	// BLAZING DOOR OPEN
  ADD          RQ23, 48, RQ10
  MOV.Q        RQ10, (R2, 120)
  ADD          R0, 88, RD11
  BSR          S_StartSound, R1
// p_doors.c:462   break;
  BSR          .L00801AAC, R0

.L00801AAF:

.L00801AB0:
// p_doors.c:465   case 31:
  ADD          RQ23, 48, RQ10
  MOV.Q        RQ10, (R2, 120)
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1
// p_doors.c:467   break;
  BSR          .L00801AAC, R0

.L00801AB1:
// p_doors.c:469   default:	// LOCKED DOOR SOUND
  ADD          RQ23, 48, RQ10
  MOV.Q        RQ10, (R2, 120)
  ADD          R0, 20, RD11
  BSR          S_StartSound, R1
// p_doors.c:471   break;

.L00801AAC:
// p_doors.c:475   door = Z_Malloc (sizeof(*door), PU_LEVSPEC, 0);
  ADD          R0, 64, RD10
  ADD          R0, 51, RD11
  ADD          RQ0, 0, RQ12
  BSR          Z_Malloc, R1
  ADD          RQ10, 0, RQ9
// p_doors.c:476   P_AddThinker (&door->thinker);
  ADD          RQ9, 0, RQ10
  MOV.Q        RQ10, (R2, 120)
  BSR          P_AddThinker, R1
// p_doors.c:477   sec->specialdata = door;
  MOV.Q        RQ9, (RQ23, 104)
// p_doors.c:478   door->thinker.function.acp1 = (actionf_p1) T_VerticalDoor;
  MOV          T_VerticalDoor, RQ27
  ADD          RQ9, 0, RQ13
  ADD          RQ13, 16, RQ12
  MOV.Q        RQ27, (RQ12, 0)
  MOV.Q        RQ27, (R2, 120)
// p_doors.c:479   door->sector = sec;
  MOV.Q        RQ23, (RQ9, 32)
// p_doors.c:480   door->direction = 1;
  ADD          R0, 1, RD11
  MOV.L        RD11, (RQ9, 48)
// p_doors.c:481   door->speed = VDOORSPEED;
  LUI          32, RD10
  MOV.L        RD10, (RQ9, 44)
// p_doors.c:482   door->topwait = VDOORWAIT;
  ADD          R0, 150, RD17
  MOV.L        RD17, (RQ9, 52)
// p_doors.c:484   switch(line->special)
  MOV.W        (RQ22, 26), RQ18
  AND          RQ18, 0x0000FFFF, RQ21
  BRGE.L       32, RQ21, .L00801ABE
  BREQ.Q       1, RQ18, .L00801AB3
  BREQ.Q       26, RQ18, .L00801AB4
  BREQ.Q       27, RQ18, .L00801AB5
  BREQ.Q       28, RQ18, .L00801AB6
  BREQ.Q       31, RQ18, .L00801AB7

.L00801ABE:
  BREQ.Q       32, RQ18, .L00801AB8
  BREQ.Q       33, RQ18, .L00801AB9
  BREQ.Q       34, RQ18, .L00801ABA
  BREQ.Q       117, RQ18, .L00801ABB
  BREQ.Q       118, RQ18, .L00801ABC
  BSR          .L00801ABD, R0

.L00801AB3:

.L00801AB4:

.L00801AB5:

.L00801AB6:
// p_doors.c:489   case 28:
  MOV.L        RD0, (RQ9, 24)
// p_doors.c:491   break;
  BSR          .L00801AB2, R0

.L00801AB7:

.L00801AB8:

.L00801AB9:

.L00801ABA:
// p_doors.c:496   case 34:
  ADD          R0, 3, RD27
  MOV.L        RD27, (RQ9, 24)
// p_doors.c:498   line->special = 0;
  MOV.W        RD0, (RQ22, 26)
// p_doors.c:499   break;
  BSR          .L00801AB2, R0

.L00801ABB:
// p_doors.c:501   case 117:	// blazing door raise
  ADD          R0, 5, RD27
  MOV.L        RD27, (RQ9, 24)
// p_doors.c:503   door->speed = VDOORSPEED*4;
  LUI          128, RD13
  MOV.L        RD13, (RQ9, 44)
// p_doors.c:504   break;
  BSR          .L00801AB2, R0

.L00801ABC:
// p_doors.c:505   case 118:	// blazing door open
  ADD          R0, 6, RD27
  MOV.L        RD27, (RQ9, 24)
// p_doors.c:507   line->special = 0;
  MOV.W        RD0, (RQ22, 26)
// p_doors.c:508   door->speed = VDOORSPEED*4;
  LUI          128, RD13
  MOV.L        RD13, (RQ9, 44)
// p_doors.c:509   break;
  BSR          .L00801AB2, R0

.L00801ABD:

.L00801AB2:
// p_doors.c:513   if(sec>0)
  ADD          R0, 0, RQ27
  MOV.Q        RQ27, (R2, 120)
  BRLE.Q       RQ27, RQ23, .L00801ABF
// p_doors.c:514   {
  ADD          RQ23, 0, RQ10
  BSR          P_FindLowestCeilingSurrounding, R1
  ADD          RQ10, 0, RQ21
  MOV.L        RQ21, (RQ9, 40)
// p_doors.c:516   door->topheight -= 4*FRACUNIT;
  MOV.L        (RQ9, 40), RQ21
  ADDS.L       RQ21, 0xFFFFFFFFFFFC0000, RQ27
  MOV.L        RQ27, (RQ9, 40)

.L00801ABF:

.L00C031BC:
  ADD          R2, 376, R2
  MOV.Q        (R2, 64), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R27
  ADD          R2, 72, R2
  JSR          RQ1, 0, R0
  .balign 4

P_LoadThings:
  ADD          R2, -80, R2
  MOV.Q        RQ1, (R2, 72)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.Q        R18, (R2, 16)
  MOV.X        R26, (R2, 56)
  MOV.X        R20, (R2, 24)
  ADD          R2, -352, R2
  MOV.L        RD10, (R2, 108)
  ADD          R2, 112, RQ6
  MOV.Q        RQ6, (R2, 96)
// p_setup.c:637   {
// p_setup.c:647   data = W_CacheLumpNum (lump,PU_STATIC);
  MOV.L        (R2, 108), RD10
  ADD          R0, 1, RD11
  BSR          W_CacheLumpNum, R1
  MOV.Q        RQ10, (R2, 88)
// p_setup.c:649   if(p_map_hexenfmt)
  MOV.L        p_map_hexenfmt, RD27
  BREQ.L       R0, RD27, .L00801FDC
// p_setup.c:650   {
  MOV.L        (R2, 108), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RD18, (R2, 84)
  ADD          R0, 20, RD27
  MOV.L        (R2, 84), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 84)
  BSR          .L00801FDD, R0

.L00801FDC:
// p_setup.c:653   {
  MOV.L        (R2, 108), RD10
  BSR          W_LumpLength, R1
  ADD          RQ10, 0, RQ18
  MOV.L        RD18, (R2, 84)
  ADD          R0, 10, RD27
  MOV.L        (R2, 84), RD26
  DIVS.L       RD26, RD27, RD26
  MOV.L        RD26, (R2, 84)

.L00801FDD:
// p_setup.c:657   mt = (mapthing_t *)data;
  MOV.Q        (R2, 88), RQ27
  ADD          RQ27, 0, RQ23
// p_setup.c:658   mt2 = (mapthing2_t *)data;
  ADD          RQ27, 0, RQ8
// p_setup.c:659   for (i=0 ; i<numthings ; i++, mt++, mt2++)
  ADD          R0, 0, RD22
  MOV.L        (R2, 84), RD26
  BRGE.L       RD26, RD22, .L00801FE0

.L00801FDE:
// p_setup.c:660   {
  ADD          R0, 1, RD20
// p_setup.c:663   if(p_map_hexenfmt)
  MOV.L        p_map_hexenfmt, RD27
  BREQ.L       R0, RD27, .L00801FE1
// p_setup.c:664   {
  MOV.W        (RQ8, 10), RD9
  BSR          .L00801FE2, R0

.L00801FE1:
// p_setup.c:672   {
  MOV.W        (RQ23, 6), RD9

.L00801FE2:
// p_setup.c:676   ttype = P_SetupRemapThingType(ttype);
  ADDS.L       RD9, 0, RD10
  BSR          P_SetupRemapThingType, R1
  ADDS.L       RQ10, 0, RD9
// p_setup.c:679   if ( gamemode != commercial)
  MOV.L        gamemode, RD27
  BREQ.Q       2, RD27, .L00801FE3
// p_setup.c:680   {
  AND          RD9, -1, RQ18
  BRGE.L       69, RQ18, .L00801FF0
  BREQ.Q       64, RD9, .L00801FE6
  BREQ.Q       65, RD9, .L00801FEC
  BREQ.Q       66, RD9, .L00801FED
  BREQ.Q       67, RD9, .L00801FEA
  BREQ.Q       68, RD9, .L00801FE5

.L00801FF0:
  BREQ.Q       69, RD9, .L00801FE9
  BREQ.Q       71, RD9, .L00801FEB
  BREQ.Q       84, RD9, .L00801FEE
  BREQ.Q       88, RD9, .L00801FE7
  BREQ.Q       89, RD9, .L00801FE8
  BSR          .L00801FEF, R0

.L00801FE5:

.L00801FE6:

.L00801FE7:

.L00801FE8:

.L00801FE9:

.L00801FEA:

.L00801FEB:

.L00801FEC:

.L00801FED:

.L00801FEE:
// p_setup.c:692   case 84:	// Wolf SS
  ADD          R0, 0, RD20
// p_setup.c:694   break;
  BSR          .L00801FE4, R0

.L00801FEF:

.L00801FE4:

.L00801FE3:
// p_setup.c:696   }
  BREQ.L       R0, RD20, .L00801FDF
// p_setup.c:721   if(p_map_hexenfmt)
  MOV.L        p_map_hexenfmt, RD27
  BREQ.L       R0, RD27, .L00801FF1
// p_setup.c:722   {
  MOV.W        (RQ8, 0), RQ18
  ADD          R2, 112, RQ27
  MOV.W        RQ18, (RQ27, 0)
// p_setup.c:724   mtt.x		= SHORT(mt2->x);
  MOV.W        (RQ8, 2), RQ18
  MOV.W        RQ18, (RQ27, 2)
// p_setup.c:725   mtt.y		= SHORT(mt2->y);
  MOV.W        (RQ8, 4), RQ18
  MOV.W        RQ18, (RQ27, 4)
// p_setup.c:726   mtt.z		= SHORT(mt2->y);
  MOV.W        (RQ8, 4), RQ18
  MOV.W        RQ18, (RQ27, 6)
// p_setup.c:727   mtt.angle	= SHORT(mt2->angle);
  MOV.W        (RQ8, 8), RQ18
  MOV.W        RQ18, (RQ27, 8)
// p_setup.c:728   mtt.options	= SHORT(mt2->options);
  MOV.W        (RQ8, 12), RQ18
  MOV.W        RQ18, (RQ27, 12)
// p_setup.c:730   mtt.ac_spec	= mt2->ac_spec;
  MOVU.B       (RQ8, 14), RQ18
  MOVU.B       RQ18, (RQ27, 14)
// p_setup.c:731   mtt.arg1	= mt2->arg1;
  MOVU.B       (RQ8, 15), RQ18
  MOVU.B       RQ18, (RQ27, 15)
// p_setup.c:732   mtt.arg2	= mt2->arg2;
  MOVU.B       (RQ8, 16), RQ18
  MOVU.B       RQ18, (RQ27, 16)
// p_setup.c:733   mtt.arg3	= mt2->arg3;
  MOVU.B       (RQ8, 17), RQ18
  MOVU.B       RQ18, (RQ27, 17)
// p_setup.c:734   mtt.arg4	= mt2->arg4;
  MOVU.B       (RQ8, 18), RQ18
  MOVU.B       RQ18, (RQ27, 18)
// p_setup.c:735   mtt.arg5	= mt2->arg5;
  MOVU.B       (RQ8, 19), RQ18
  MOVU.B       RQ18, (RQ27, 19)
  BSR          .L00801FF2, R0

.L00801FF1:
// p_setup.c:737   {
  ADD          R2, 112, RQ27
  MOV.W        RD0, (RQ27, 0)
// p_setup.c:739   mtt.x		= SHORT(mt->x);
  MOV.W        (RQ23, 0), RQ18
  MOV.W        RQ18, (RQ27, 2)
// p_setup.c:740   mtt.y		= SHORT(mt->y);
  MOV.W        (RQ23, 2), RQ18
  MOV.W        RQ18, (RQ27, 4)
// p_setup.c:741   mtt.z		= 0;
  MOV.W        RD0, (RQ27, 6)
// p_setup.c:742   mtt.angle	= SHORT(mt->angle);
  MOV.W        (RQ23, 4), RQ18
  MOV.W        RQ18, (RQ27, 8)
// p_setup.c:743   mtt.options	= SHORT(mt->options);
  MOV.W        (RQ23, 8), RQ18
  MOV.W        RQ18, (RQ27, 12)
// p_setup.c:745   mtt.ac_spec	= 0;
  MOVU.B       RD0, (RQ27, 14)
// p_setup.c:746   mtt.arg1	= 0;
  MOVU.B       RD0, (RQ27, 15)
// p_setup.c:747   mtt.arg2	= 0;
  MOVU.B       RD0, (RQ27, 16)
// p_setup.c:748   mtt.arg3	= 0;
  MOVU.B       RD0, (RQ27, 17)
// p_setup.c:749   mtt.arg4	= 0;
  MOVU.B       RD0, (RQ27, 18)
// p_setup.c:750   mtt.arg5	= 0;
  MOVU.B       RD0, (RQ27, 19)

.L00801FF2:
// p_setup.c:753   mtt.type = ttype;
  ADD          R2, 112, RQ27
  MOV.W        RD9, (RQ27, 10)
// p_setup.c:755   P_SpawnMapThing (&mtt);
  ADD          RQ27, 0, RQ21
  ADD          RQ21, 0, RQ10
  BSR          P_SpawnMapThing, R1

.L00801FDF:
  ADD          RD22, 0, RQ18
  ADDS.L       RD22, 1, RD22
  ADD          RQ23, 0, RQ21
  ADD          RQ23, 10, RQ23
  ADD          RQ8, 0, RQ21
  ADD          RQ8, 20, RQ8
  MOV.L        (R2, 84), RD27
  BRLT.L       RD27, RD22, .L00801FDE

.L00801FE0:
// p_setup.c:761   Z_Free (data);
  MOV.Q        (R2, 88), RQ10
  BSR          Z_Free, R1

.L00C031C5:
  ADD          R2, 352, R2
  MOV.Q        (R2, 72), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.X        (R2, 56), R26
  ADD          R2, 80, R2
  JSR          RQ1, 0, R0

PTR_ShootTraverse:
  ADD          R2, -104, R2
  MOV.Q        RQ1, (R2, 96)
  MOV.X        R24, (R2, 64)
  MOV.X        R20, (R2, 32)
  MOV.X        R8, (R2, 0)
  MOV.X        R18, (R2, 16)
  MOV.X        R26, (R2, 80)
  MOV.X        R22, (R2, 48)
  ADD          R2, -360, R2
  MOV.Q        RQ10, (R2, 152)
// p_map.c:950   if (in->isaline)
  MOV.Q        (R2, 152), RQ27
  MOV.L        (RQ27, 4), RQ9
  BREQ.L       R0, RQ9, .L00801D86
// p_map.c:951   {
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.Q        (RQ26, 0), RQ22
  MOV.W        (RQ22, 26), RQ9
  BREQ.L       R0, RQ9, .L00801D87
// p_map.c:955   P_ShootSpecialLine (shootthing, li);
  MOV.Q        shootthing, RQ10
  ADD          RQ22, 0, RQ11
  BSR          P_ShootSpecialLine, R1

.L00801D87:
  MOV.W        (RQ22, 24), RQ9
  ADD          R0, 4, RD27
  BTSTN.L      RD27, RQ9, .L00801D88
// p_map.c:958   goto hitline;
  BSR          .L00801D89, R0

.L00801D88:
// p_map.c:961   P_LineOpening (li);
  ADD          RQ22, 0, RQ10
  BSR          P_LineOpening, R1
// p_map.c:963   dist = FixedMul (attackrange, in->frac);
  MOV.Q        (R2, 152), RQ27
  MOV.L        (RQ27, 0), RQ9
  MOV.L        attackrange, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD21
  MOV.Q        (RQ22, 64), RQ23
  MOV.L        (RQ23, 0), RQ9
  MOV.Q        (RQ22, 72), RQ23
  MOV.L        (RQ23, 0), RQ18
  BREQ.Q       RQ18, RQ9, .L00801D8A
// p_map.c:966   {
  MOV.L        openbottom, RD27
  MOV.L        shootz, RD26
  SUBS.L       RD27, RD26, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD27
  MOV.L        RD27, (R2, 124)
  MOV.L        aimslope, RD26
  BRLE.L       RD26, RD27, .L00801D8B
// p_map.c:969   goto hitline;
  BSR          .L00801D89, R0

.L00801D8B:

.L00801D8A:
  MOV.Q        (RQ22, 64), RQ23
  MOV.L        (RQ23, 4), RQ18
  MOV.Q        (RQ22, 72), RQ23
  MOV.L        (RQ23, 4), RQ9
  BREQ.Q       RQ9, RQ18, .L00801D8C
// p_map.c:973   {
  MOV.L        opentop, RD27
  MOV.L        shootz, RD26
  SUBS.L       RD27, RD26, RQ18
  ADD          RQ18, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD27
  MOV.L        RD27, (R2, 124)
  MOV.L        aimslope, RD26
  BRGE.L       RD26, RD27, .L00801D8D
// p_map.c:976   goto hitline;
  BSR          .L00801D89, R0

.L00801D8D:

.L00801D8C:
// p_map.c:980   return true;
  ADD          R0, 1, RD10
  BSR          .L00C031CB, R0
// p_map.c:984   hitline:

.L00801D89:
// p_map.c:986   frac = in->frac - FixedDiv (4*FRACUNIT,attackrange);
  MOV.Q        (R2, 152), RQ27
  MOV.L        (RQ27, 0), RQ9
  LUI          64, RD10
  MOV.L        attackrange, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ9, RQ18, RD20
// p_map.c:987   x = trace.x + FixedMul (trace.dx, frac);
  MOV          trace, RQ26
  MOV.L        (RQ26, 0), RQ9
  MOV.L        (RQ26, 8), RQ18
  ADD          RQ18, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ9, RQ8, RD26
  MOV.L        RD26, (R2, 148)
// p_map.c:988   y = trace.y + FixedMul (trace.dy, frac);
  MOV          trace, RQ25
  MOV.L        (RQ25, 4), RQ9
  MOV.L        (RQ25, 12), RQ18
  ADD          RQ18, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  ADDS.L       RQ9, RQ8, RD25
  MOV.L        RD25, (R2, 144)
// p_map.c:989   z = shootz + FixedMul (aimslope, FixedMul(frac, attackrange));
  ADD          RD20, 0, RD10
  MOV.L        attackrange, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        aimslope, RD10
  ADDS.L       RQ9, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  MOV.L        shootz, RD19
  ADDS.L       RD19, RQ18, RD24
  MOV.L        RD24, (R2, 140)
  MOV.Q        (RQ22, 64), RQ23
  MOV.W        (RQ23, 10), RQ18
  MOV.L        skyflatnum, RD19
  BRNE.Q       RD19, RQ18, .L00801D8E
  MOV.Q        (RQ22, 64), RQ23
  MOV.L        (RQ23, 4), RQ18
  MOV.L        (R2, 140), RD27
  BRGT.L       RQ18, RD27, .L00C00FA3
  MOV.Q        (RQ22, 72), RQ23
  BREQ.Q       R0, RQ23, .L00801D8F
  MOV.Q        (RQ22, 72), RQ23
  MOV.W        (RQ23, 10), RQ18
  MOV.L        skyflatnum, RD27
  BRNE.Q       RD27, RQ18, .L00801D8F
  BSR          .L00C00FA3, R0

.L00801D8F:

.L00801D8E:
// p_map.c:1003   P_SpawnPuff (x,y,z);
  MOV.L        (R2, 148), RD10
  MOV.L        (R2, 144), RD11
  MOV.L        (R2, 140), RD12
  BSR          P_SpawnPuff, R1
// p_map.c:1006   return false;	
  ADD          R0, 0, RD10
  BSR          .L00C031CB, R0

.L00801D86:
// p_map.c:1010   th = in->d.thing;
  MOV.Q        (R2, 152), RQ27
  ADD          RQ27, 8, RQ26
  MOV.Q        (RQ26, 0), RQ25
// p_map.c:1011   if (th == shootthing)
  MOV.Q        RQ25, (R2, 128)
  MOV.Q        shootthing, RQ24
  BRNE.Q       RQ24, RQ25, .L00801D91
// p_map.c:1012   return true;		// can't shoot self
  ADD          R0, 1, RD10
  BSR          .L00C031CB, R0

.L00801D91:
// p_map.c:1014   if (!(th->flags&MF_SHOOTABLE))
  MOV.Q        (R2, 128), RQ27
  MOV.L        (RQ27, 160), RQ18
  ADD          R0, 4, RD26
  BTSTN.L      RD26, RQ18, .L00801D92
// p_map.c:1015   return true;		// corpse or something
  ADD          R0, 1, RD10
  BSR          .L00C031CB, R0

.L00801D92:
// p_map.c:1018   dist = FixedMul (attackrange, in->frac);
  MOV.Q        (R2, 152), RQ27
  MOV.L        (RQ27, 0), RQ8
  MOV.L        attackrange, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RD21
// p_map.c:1019   thingtopslope = FixedDiv (th->z+th->height - shootz , dist);
  MOV.Q        (R2, 128), RQ26
  MOV.L        (RQ26, 32), RQ9
  MOV.L        (RQ26, 108), RQ18
  ADDS.L       RQ9, RQ18, RQ8
  MOV.L        shootz, RD25
  SUBS.L       RQ8, RD25, RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD25
// p_map.c:1021   if (thingtopslope < aimslope)
  MOV.L        RD25, (R2, 120)
  MOV.L        aimslope, RD24
  BRGE.L       RD24, RD25, .L00801D93
// p_map.c:1022   return true;		// shot over the thing
  ADD          R0, 1, RD10
  BSR          .L00C031CB, R0

.L00801D93:
// p_map.c:1024   thingbottomslope = FixedDiv (th->z - shootz, dist);
  MOV.Q        (R2, 128), RQ27
  MOV.L        (RQ27, 32), RQ18
  MOV.L        shootz, RD26
  SUBS.L       RQ18, RD26, RQ8
  ADDS.L       RQ8, 0, RD10
  ADD          RD21, 0, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RD26
// p_map.c:1026   if (thingbottomslope > aimslope)
  MOV.L        RD26, (R2, 116)
  MOV.L        aimslope, RD25
  BRLE.L       RD25, RD26, .L00801D94
// p_map.c:1027   return true;		// shot under the thing
  ADD          R0, 1, RD10
  BSR          .L00C031CB, R0

.L00801D94:
// p_map.c:1032   frac = in->frac - FixedDiv (10*FRACUNIT,attackrange);
  MOV.Q        (R2, 152), RQ27
  MOV.L        (RQ27, 0), RQ9
  LUI          160, RD10
  MOV.L        attackrange, RD11
  BSR          FixedDiv, R1
  ADD          RQ10, 0, RQ18
  SUBS.L       RQ9, RQ18, RD20
// p_map.c:1034   x = trace.x + FixedMul (trace.dx, frac);
  MOV          trace, RQ26
  MOV.L        (RQ26, 0), RQ8
  MOV.L        (RQ26, 8), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ8, RQ18, RD26
  MOV.L        RD26, (R2, 148)
// p_map.c:1035   y = trace.y + FixedMul (trace.dy, frac);
  MOV          trace, RQ25
  MOV.L        (RQ25, 4), RQ8
  MOV.L        (RQ25, 12), RQ9
  ADDS.L       RQ9, 0, RD10
  ADD          RD20, 0, RD11
  BSR          FixedMul, R1
  ADD          RQ10, 0, RQ18
  ADDS.L       RQ8, RQ18, RD25
  MOV.L        RD25, (R2, 144)
// p_map.c:1036   z = shootz + FixedMul (aimslope, FixedMul(frac, attackrange));
  ADD          RD20, 0, RD10
  MOV.L        attackrange, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ8
  MOV.L        aimslope, RD10
  ADDS.L       RQ8, 0, RD11
  BSR          FixedMul, R1
  ADDS.L       RQ10, 0, RQ9
  MOV.L        shootz, RD19
  ADDS.L       RD19, RQ9, RD24
  MOV.L        RD24, (R2, 140)
// p_map.c:1040   if (in->d.thing->flags & MF_NOBLOOD)
  ADD          RQ27, 8, RQ19
  MOV.Q        (RQ19, 0), RQ23
  MOV.L        (RQ23, 160), RQ18
  LUI          128, RD27
  BTST.L       RD27, RQ18, .L00801D95
// p_map.c:1041   P_SpawnPuff (x,y,z);
  MOV.L        (R2, 148), RD10
  MOV.L        (R2, 144), RD11
  MOV.L        (R2, 140), RD12
  BSR          P_SpawnPuff, R1
  BSR          .L00801D96, R0

.L00801D95:
// p_map.c:1043   P_SpawnBlood (x,y,z, la_damage);
  MOV.L        (R2, 148), RD10
  MOV.L        (R2, 144), RD11
  MOV.L        (R2, 140), RD12
  MOV.L        la_damage, RD13
  BSR          P_SpawnBlood, R1

.L00801D96:
// p_map.c:1045   if (la_damage)
  MOV.L        la_damage, RD27
  BREQ.L       R0, RD27, .L00801D97
// p_map.c:1046   P_DamageMobj (th, shootthing, shootthing, la_damage);
  MOV.Q        (R2, 128), RQ10
  MOV.Q        shootthing, RQ11
  MOV.Q        shootthing, RQ12
  MOV.L        la_damage, RD13
  BSR          P_DamageMobj, R1

.L00801D97:
// p_map.c:1049   return false;
  ADD          R0, 0, RD10
  BSR          .L00C031CB, R0

.L00C00FA3:
  ADD          R0, 0, RQ10

.L00C031CB:
  ADD          R2, 360, R2
  MOV.Q        (R2, 96), RQ1
  MOV.X        (R2, 0), R8
  MOV.X        (R2, 16), R18
  MOV.X        (R2, 32), R20
  MOV.X        (R2, 48), R22
  MOV.X        (R2, 64), R24
  MOV.X        (R2, 80), R26
  ADD          R2, 104, R2
  JSR          RQ1, 0, R0

P_UpdateSpecials:
  ADD          R2, -88, R2
  MOV.Q        RQ1, (R2, 80)
  MOV.X        R20, (R2, 24)
  MOV.Q        R25, (R2, 56)
  MOV.Q        R18, (R2, 16)
  MOV.X        R22, (R2, 40)
  MOV.X        R8, (R2, 0)
  MOV.X        R26, (R2, 64)
  ADD          R2, -344, R2
// p_spec.c:1159   if (levelTimer == true)
  MOV.L        levelTimer, RD27
  BRNE.Q       1, RD27, .L0080213A
// p_spec.c:1160   {
  MOV.L        levelTimeCount, RD27
  ADDS.L       RD27, -1, RD27
  MOV.L        RD27, levelTimeCount
  BRNE.L       R0, RD27, .L0080213B
// p_spec.c:1163   G_ExitLevel();
  BSR          G_ExitLevel, R1

.L0080213B:

.L0080213A:
// p_spec.c:1167   for (anim = anims ; anim < lastanim ; anim++)
  MOV          anims, RQ23
  MOV.Q        lastanim, RQ27
  BRGE.Q       RQ27, RQ23, .L0080213E

.L0080213C:
// p_spec.c:1168   {
  MOV.L        (RQ23, 8), RD18
  MOV.L        (RQ23, 12), RQ9
  ADDS.L       RD18, RQ9, RQ8
  BRGE.L       RQ8, RD18, .L00802141

.L0080213F:
// p_spec.c:1170   {
  MOV.L        (RQ23, 8), RQ9
  MOV.L        (RQ23, 16), RQ8
  MOV.L        leveltime, RD27
  DIVS.L       RD27, RQ8, RQ22
  ADDS.L       RQ22, RD18, RQ8
  MOV.L        (RQ23, 12), RQ22
  MODS.L       RQ8, RQ22, RQ21
  ADDS.L       RQ9, RQ21, RD20
// p_spec.c:1172   if (anim->istexture)
  MOV.L        (RQ23, 0), RQ9
  BREQ.L       R0, RQ9, .L00802142
// p_spec.c:1173   texturetranslation[i] = pic;
  MOV.Q        texturetranslation, RQ27
  MOV.L        RD20, (RQ27, RD18)
  BSR          .L00802143, R0

.L00802142:
// p_spec.c:1175   flattranslation[i] = pic;
  MOV.Q        flattranslation, RQ27
  MOV.L        RD20, (RQ27, RD18)

.L00802143:
  ADDS.L       RD18, 1, RD18
  MOV.L        (RQ23, 8), RQ8
  MOV.L        (RQ23, 12), RQ22
  ADDS.L       RQ8, RQ22, RQ21
  BRLT.L       RQ21, RD18, .L0080213F

.L00802141:
  ADD          RQ23, 20, RQ23
  MOV.Q        lastanim, RQ27
  BRLT.Q       RQ27, RQ23, .L0080213C

.L0080213E:
// p_spec.c:1181   for (i = 0; i < numlinespecials; i++)
  ADD          R0, 0, RD18
  MOV.W        numlinespecials, RD27
  BRGE.L       RD27, RD18, .L00802146

.L00802144:
// p_spec.c:1182   {
  MOV          linespeciallist, RQ27
  MOV.Q        (RQ27, RD18), RQ26
// p_spec.c:1184   switch(line->special)
  MOV.W        (RQ26, 26), RQ9
  MOV.Q        RQ26, (R2, 136)
  BREQ.Q       48, RQ9, .L00802148
  BSR          .L00802147, R0

.L00802148:
// p_spec.c:1188   sides[line->sidenum[0]].textureoffset += FRACUNIT;
  MOV.Q        (R2, 136), RQ27
  ADD          RQ27, 36, RQ26
  MOV.W        (RQ26, 0), RQ9
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ9, R5, RQ13
  ADD          RQ25, RQ13, RQ13
  MOV.L        (RQ13, 0), RQ9
  ADDS.L       RQ9, 0x00010000, RQ8
  MOV.W        (RQ26, 0), RQ22
  MOV.Q        RQ26, (R2, 96)
  ADD          R0, 24, R5
  MUL.L        RQ22, R5, RQ13
  ADD          RQ25, RQ13, RQ13
  MOV.L        RQ8, (RQ13, 0)
// p_spec.c:1189   break;

.L00802147:
  ADDS.L       RD18, 1, RD18
  MOV.W        numlinespecials, RD27
  BRLT.L       RD27, RD18, .L00802144

.L00802146:
// p_spec.c:1195   for (i = 0; i < MAXBUTTONS; i++)
  ADD          R0, 0, RD18

.L00802149:
// p_spec.c:1196   if (buttonlist[i].btimer)
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 16), RQ9
  BREQ.L       R0, RQ9, .L0080214C
// p_spec.c:1197   {
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 16), RQ9
  ADDS.L       RQ9, -1, RQ8
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        RQ8, (RQ26, 16)
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 16), RQ9
  BRNE.L       R0, RQ9, .L0080214D
// p_spec.c:1200   {
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 8), RQ9
  BREQ.L       R0, RQ9, .L0080214F
  BREQ.Q       1, RQ9, .L00802150
  BREQ.Q       2, RQ9, .L00802151
  BSR          .L0080214E, R0

.L0080214F:
// p_spec.c:1203   case top:
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 12), RQ9
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ27
  MOV.W        (RQ27, 36), RQ8
  MOV.Q        RQ27, (R2, 96)
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ13
  ADD          RQ25, RQ13, RQ13
  MOV.W        RQ9, (RQ13, 8)
// p_spec.c:1206   break;
  BSR          .L0080214E, R0

.L00802150:
// p_spec.c:1208   case middle:
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 12), RQ9
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ27
  MOV.W        (RQ27, 36), RQ8
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ13
  ADD          RQ25, RQ13, RQ13
  MOV.W        RQ9, (RQ13, 12)
// p_spec.c:1211   break;
  BSR          .L0080214E, R0

.L00802151:
// p_spec.c:1213   case bottom:
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.L        (RQ26, 12), RQ9
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  MOV.Q        (RQ26, 0), RQ27
  MOV.W        (RQ27, 36), RQ8
  MOV.Q        sides, RQ25
  ADD          R0, 24, R5
  MUL.L        RQ8, R5, RQ13
  ADD          RQ25, RQ13, RQ13
  MOV.W        RQ9, (RQ13, 10)
// p_spec.c:1216   break;

.L0080214E:
// p_spec.c:1217   }
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ26
  ADD          RQ27, RQ26, RQ26
  ADD          RQ26, 24, RQ10
  ADD          R0, 23, RD11
  BSR          S_StartSound, R1
// p_spec.c:1219   memset(&buttonlist[i],0,sizeof(button_t));
  MOV          buttonlist, RQ27
  SHAD.L       RD18, 5, RQ25
  ADD          RQ27, RQ25, RQ25
  MOV.Q        RQ25, (R2, 96)
  MOV.Q        RQ0, (RQ25, 0)
  MOV.Q        RQ0, (RQ25, 8)
  MOV.Q        RQ0, (RQ25, 16)
  MOV.Q        RQ0, (RQ25, 24)

.L0080214D:

.L0080214C:
  ADDS.L       RD18, 1, RD18
  BRLT.L       16, RD18, .L00802149

.L0080214B:

.L00C031D1:
  ADD          R2, 344, R2
  MOV.Q        (R2, 80), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R20
  MOV.X        (R2, 40), R22
  MOV.Q        (R2, 56), R25
  MOV.X        (R2, 64), R26
  ADD          R2, 88, R2
  JSR          RQ1, 0, R0

checkMode:
  ADD          R2, -48, R2
  MOV.Q        RQ1, (R2, 40)
  MOV.X        R22, (R2, 24)
  MOV.Q        R18, (R2, 16)
  MOV.X        R8, (R2, 0)
  ADD          R2, -336, R2
// pdpc201/stdio.c:484   
  MOV.Q        TU61F874B9/myfile, RQ13
  ADD          RQ13, 0, RQ23
// pdpc201/stdio.c:486   
  BRNE.Q       R0, RQ13, .L008002FA
// pdpc201/stdio.c:487   

checkMode.debugbreak_L06C6:
  BRK          1734

.L008002FA:
// pdpc201/stdio.c:491   
  LUI          4096, RQ13
  BRLT.Q       RQ13, RQ23, .L008002FB
  SHAR.Q       RQ23, 48, RQ22
  BRNE.Q       R0, RQ22, .L008002FB
  BSR          .L008002FC, R0

.L008002FB:
// pdpc201/stdio.c:492   

checkMode.debugbreak_L06C7:
  BRK          1735

.L008002FC:
// pdpc201/stdio.c:496   
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C0247A, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008002FD
// pdpc201/stdio.c:497   
  ADD          R0, 10, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L008002FE, R0

.L008002FD:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E4, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L008002FF
// pdpc201/stdio.c:501   
  ADD          R0, 10, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800300, R0

.L008002FF:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E5, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800301
// pdpc201/stdio.c:505   
  ADD          R0, 11, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800302, R0

.L00800301:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E6, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800303
// pdpc201/stdio.c:509   
  ADD          R0, 11, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800304, R0

.L00800303:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E7, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800305
// pdpc201/stdio.c:513   
  ADD          R0, 12, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800306, R0

.L00800305:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E8, RQ11
  ADD          R0, 3, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800307
// pdpc201/stdio.c:517   
  ADD          R0, 12, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800308, R0

.L00800307:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031E9, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800309
// pdpc201/stdio.c:521   
  ADD          R0, 7, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L0080030A, R0

.L00800309:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031EA, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L0080030B
// pdpc201/stdio.c:525   
  ADD          R0, 8, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L0080030C, R0

.L0080030B:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031EB, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L0080030D
// pdpc201/stdio.c:529   
  ADD          R0, 9, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L0080030E, R0

.L0080030D:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C01607, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L0080030F
// pdpc201/stdio.c:533   
  ADD          R0, 4, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800310, R0

.L0080030F:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C01CB2, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800311
// pdpc201/stdio.c:537   
  ADD          R0, 5, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800312, R0

.L00800311:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031EC, RQ11
  ADD          R0, 2, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800313
// pdpc201/stdio.c:541   
  ADD          R0, 6, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800314, R0

.L00800313:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C0315F, RQ11
  ADD          R0, 1, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800315
// pdpc201/stdio.c:545   
  ADD          R0, 1, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800316, R0

.L00800315:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C02274, RQ11
  ADD          R0, 1, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800317
// pdpc201/stdio.c:549   
  ADD          R0, 2, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L00800318, R0

.L00800317:
  MOV.Q        TU61F874B9/modus, RQ10
  MOV          .L00C031ED, RQ11
  ADD          R0, 1, RQ12
  BSR          strncmp, R1
  ADD          RQ10, 0, RQ18
  BRNE.L       R0, RQ18, .L00800319
// pdpc201/stdio.c:553   
  ADD          R0, 3, RD13
  MOV.L        RD13, TU61F874B9/modeType
  BSR          .L0080031A, R0

.L00800319:
// pdpc201/stdio.c:557   
  ADD          R0, 1, RD13
  MOV.L        RD13, TU61F874B9/err
// pdpc201/stdio.c:559   
  BSR          .L00C031E1, R0

.L0080031A:

.L00800318:

.L00800316:

.L00800314:

.L00800312:

.L00800310:

.L0080030E:

.L0080030C:

.L0080030A:

.L00800308:

.L00800306:

.L00800304:

.L00800302:

.L00800300:

.L008002FE:
// pdpc201/stdio.c:560   
  MOV.L        TU61F874B9/modeType, RD13
  ADD          R0, 4, R5
  CMPEQ.Q      RD13, R5, RQ18
  ADD          R0, 5, R5
  CMPEQ.Q      RD13, R5, RQ9
  OR           RQ18, RQ9, RQ8
  ADD          R0, 6, R5
  CMPEQ.Q      RD13, R5, RQ18
  OR           RQ8, RQ18, RQ9
  ADD          R0, 10, R5
  CMPEQ.Q      RD13, R5, RQ8
  OR           RQ9, RQ8, RQ18
  BRNE.L       R0, RQ18, .L0080031B
  MOV.L        TU61F874B9/modeType, RD13
  BREQ.Q       11, RD13, .L0080031B

.L0080031C:
  MOV.L        TU61F874B9/modeType, RD13
  BREQ.Q       12, RD13, .L0080031B
  BSR          .L0080031D, R0

.L0080031B:
// pdpc201/stdio.c:567   
  MOV.Q        TU61F874B9/myfile, RQ13
  MOV.B        RD0, (RQ13, 10)
  BSR          .L0080031E, R0

.L0080031D:
// pdpc201/stdio.c:573   
  MOV.Q        TU61F874B9/myfile, RQ13
  MOV.B        RD0, (RQ13, 10)

.L0080031E:
// pdpc201/stdio.c:576   
  MOV.Q        TU61F874B9/myfile, RQ13
  MOV.B        RD0, (RQ13, 10)
// pdpc201/stdio.c:578   

.L00C031E1:
  ADD          R2, 336, R2
  MOV.Q        (R2, 40), RQ1
  MOV.X        (R2, 0), R8
  MOV.Q        (R2, 16), R18
  MOV.X        (R2, 24), R22
  ADD          R2, 48, R2
  JSR          RQ1, 0, R0
  .balign 8

__start_init:
  ADD          R2, -8, R2
  ADD          R1, 0, R1
  MOV.Q        R1, (R2, 0)
  MOV.Q        (R2, 0), R1
  ADD          R2, 8, R2
  JSR          R1, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0
  ADD          R0, 0, R0

__text_end:
  .balign 16
.section .strtab

.L00C00FD9:
  .asciz "0123456789ABCDEF"

.L00C00FDA:
  .ascii "YOU HAVE ENTERED DEEPLY INTO THE INFESTED\nSTARPORT. BUT "
  .ascii "SOMETHING IS WRONG. THE\nMONSTERS HAVE BROUGHT THEIR OWN "
  .ascii "REALITY\nWITH THEM, AND THE STARPORT'S TECHNOLOGY\nIS BEIN"
  .ascii "G SUBVERTED BY THEIR PRESENCE.\n\nAHEAD, YOU SEE AN OUTPOS"
  .ascii "T OF HELL, A\nFORTIFIED ZONE. IF YOU CAN GET PAST IT,\nYOU"
  .ascii " CAN PENETRATE INTO THE HAUNTED HEART\nOF THE STARBASE AN"
  .ascii "D FIND THE CONTROLLING\nSWITCH WHICH HOLDS EARTH'S POPULA"
  .asciz "TION\nHOSTAGE."

.L00C00FDB:
  .ascii "Once you beat the big badasses and\nclean out the moon ba"
  .ascii "se you're supposed\nto win, aren't you? Aren't you? Where"
  .ascii "'s\nyour fat reward and ticket home? What\nthe hell is thi"
  .ascii "s? It's not supposed to\nend this way!\n\nIt stinks like ro"
  .ascii "tten meat, but looks\nlike the lost Deimos base.  Looks l"
  .ascii "ike\nyou're stuck on The Shores of Hell.\nThe only way out"
  .ascii " is through.\n\nTo continue the DOOM experience, play\nThe "
  .asciz "Shores of Hell and its amazing\nsequel, Inferno!\n"

.L00C00FDC:
  .ascii "THE HORRENDOUS VISAGE OF THE BIGGEST\nDEMON YOU'VE EVER S"
  .ascii "EEN CRUMBLES BEFORE\nYOU, AFTER YOU PUMP YOUR ROCKETS INT"
  .ascii "O\nHIS EXPOSED BRAIN. THE MONSTER SHRIVELS\nUP AND DIES, I"
  .ascii "TS THRASHING LIMBS\nDEVASTATING UNTOLD MILES OF HELL'S\nSU"
  .ascii "RFACE.\n\nYOU'VE DONE IT. THE INVASION IS OVER.\nEARTH IS S"
  .ascii "AVED. HELL IS A WRECK. YOU\nWONDER WHERE BAD FOLKS WILL G"
  .ascii "O WHEN THEY\nDIE, NOW. WIPING THE SWEAT FROM YOUR\nFOREHEA"
  .ascii "D YOU BEGIN THE LONG TREK BACK\nHOME. REBUILDING EARTH OU"
  .asciz "GHT TO BE A\nLOT MORE FUN THAN RUINING IT WAS.\n"

.L00C00FDD:
  .ascii "CONGRATULATIONS, YOU'VE FOUND THE\nSUPER SECRET LEVEL!  Y"
  .asciz "OU'D BETTER\nBLAZE THROUGH THIS ONE!\n"

.L00C00FDE:
  .asciz "GRNROCK"

.L00C00FDF:
  .ascii "CONGRATULATIONS, YOU'VE FOUND THE SECRET\nLEVEL! LOOKS LI"
  .ascii "KE IT'S BEEN BUILT BY\nHUMANS, RATHER THAN DEMONS. YOU WO"
  .asciz "NDER\nWHO THE INMATES OF THIS CORNER OF HELL\nWILL BE."

.L00C00FE0:
  .ascii "You've done it! The hideous cyber-\ndemon lord that ruled"
  .ascii " the lost Deimos\nmoon base has been slain and you\nare tr"
  .ascii "iumphant! But ... where are\nyou? You clamber to the edge"
  .ascii " of the\nmoon and look down to see the awful\ntruth.\n\nDeim"
  .ascii "os floats above Hell itself!\nYou've never heard of anyon"
  .ascii "e escaping\nfrom Hell, but you'll make the bastards\nsorry"
  .ascii " they ever heard of you! Quickly,\nyou rappel down to  th"
  .ascii "e surface of\nHell.\n\nNow, it's on to the final chapter of"
  .asciz "\nDOOM! -- Inferno."

.L00C00FE1:
  .ascii "YOU HAVE WON! YOUR VICTORY HAS ENABLED\nHUMANKIND TO EVAC"
  .ascii "UATE EARTH AND ESCAPE\nTHE NIGHTMARE.  NOW YOU ARE THE ON"
  .ascii "LY\nHUMAN LEFT ON THE FACE OF THE PLANET.\nCANNIBAL MUTATI"
  .ascii "ONS, CARNIVOROUS ALIENS,\nAND EVIL SPIRITS ARE YOUR ONLY "
  .ascii "NEIGHBORS.\nYOU SIT BACK AND WAIT FOR DEATH, CONTENT\nTHAT"
  .ascii " YOU HAVE SAVED YOUR SPECIES.\n\nBUT THEN, EARTH CONTROL B"
  .ascii "EAMS DOWN A\nMESSAGE FROM SPACE: \"SENSORS HAVE LOCATED\nTH"
  .ascii "E SOURCE OF THE ALIEN INVASION. IF YOU\nGO THERE, YOU MAY"
  .ascii " BE ABLE TO BLOCK THEIR\nENTRY.  THE ALIEN BASE IS IN THE"
  .ascii " HEART OF\nYOUR OWN HOME CITY, NOT FAR FROM THE\nSTARPORT."
  .ascii "\" SLOWLY AND PAINFULLY YOU GET\nUP AND RETURN TO THE FRAY"
  .asciz "."

.L00C00FE2:
  .ascii "The loathsome spiderdemon that\nmasterminded the invasion"
  .ascii " of the moon\nbases and caused so much death has had\nits "
  .ascii "ass kicked for all time.\n\nA hidden doorway opens and you"
  .ascii " enter.\nYou've proven too tough for Hell to\ncontain, and"
  .ascii " now Hell at last plays\nfair -- for you emerge from the "
  .ascii "door\nto see the green fields of Earth!\nHome at last.\n\nYo"
  .ascii "u wonder what's been happening on\nEarth while you were b"
  .ascii "attling evil\nunleashed. It's good that no Hell-\nspawn co"
  .asciz "uld have come through that\ndoor with you ..."

.L00C00FE3:
  .ascii "YOU ARE AT THE CORRUPT HEART OF THE CITY,\nSURROUNDED BY "
  .ascii "THE CORPSES OF YOUR ENEMIES.\nYOU SEE NO WAY TO DESTROY T"
  .ascii "HE CREATURES'\nENTRYWAY ON THIS SIDE, SO YOU CLENCH YOUR\n"
  .ascii "TEETH AND PLUNGE THROUGH IT.\n\nTHERE MUST BE A WAY TO CLO"
  .ascii "SE IT ON THE\nOTHER SIDE. WHAT DO YOU CARE IF YOU'VE\nGOT "
  .asciz "TO GO THROUGH HELL TO GET TO IT?"

.L00C00FE4:
  .asciz "FLOOR7_2"

.L00C00FE5:
  .ascii "the spider mastermind must have sent forth\nits legions o"
  .ascii "f hellspawn before your\nfinal confrontation with that te"
  .ascii "rrible\nbeast from hell.  but you stepped forward\nand bro"
  .ascii "ught forth eternal damnation and\nsuffering upon the hord"
  .ascii "e as a true hero\nwould in the face of something so evil."
  .ascii "\n\nbesides, someone was gonna pay for what\nhappened to da"
  .ascii "isy, your pet rabbit.\n\nbut now, you see spread before yo"
  .ascii "u more\npotential pain and gibbitude as a nation\nof demon"
  .asciz "s run amok among our cities.\n\nnext stop, hell on earth!"

.L00C00FE6:
  .asciz "."

.L00C00FE7:
  .asciz ""

.L00C00FE8:
  .asciz "syscall"

.L00C00FE9:
  .asciz "none"

.L00C00FEA:
  .asciz "pistol"

.L00C00FEB:
  .asciz "shotgn"

.L00C00FEC:
  .asciz "sgcock"

.L00C00FED:
  .asciz "dshtgn"

.L00C00FEE:
  .asciz "dbopn"

.L00C00FEF:
  .asciz "dbcls"

.L00C00FF0:
  .asciz "dbload"

.L00C00FF1:
  .asciz "plasma"

.L00C00FF2:
  .asciz "bfg"

.L00C00FF3:
  .asciz "sawup"

.L00C00FF4:
  .asciz "sawidl"

.L00C00FF5:
  .asciz "sawful"

.L00C00FF6:
  .asciz "sawhit"

.L00C00FF7:
  .asciz "rlaunc"

.L00C00FF8:
  .asciz "rxplod"

.L00C00FF9:
  .asciz "firsht"

.L00C00FFA:
  .asciz "firxpl"

.L00C00FFB:
  .asciz "pstart"

.L00C00FFC:
  .asciz "pstop"

.L00C00FFD:
  .asciz "doropn"

.L00C00FFE:
  .asciz "dorcls"

.L00C00FFF:
  .asciz "stnmov"

.L00C01000:
  .asciz "swtchn"

.L00C01001:
  .asciz "swtchx"

.L00C01002:
  .asciz "plpain"

.L00C01003:
  .asciz "dmpain"

.L00C01004:
  .asciz "popain"

.L00C01005:
  .asciz "vipain"

.L00C01006:
  .asciz "mnpain"

.L00C01007:
  .asciz "pepain"

.L00C01008:
  .asciz "slop"

.L00C01009:
  .asciz "itemup"

.L00C0100A:
  .asciz "wpnup"

.L00C0100B:
  .asciz "oof"

.L00C0100C:
  .asciz "telept"

.L00C0100D:
  .asciz "posit1"

.L00C0100E:
  .asciz "posit2"

.L00C0100F:
  .asciz "posit3"

.L00C01010:
  .asciz "bgsit1"

.L00C01011:
  .asciz "bgsit2"

.L00C01012:
  .asciz "sgtsit"

.L00C01013:
  .asciz "cacsit"

.L00C01014:
  .asciz "brssit"

.L00C01015:
  .asciz "cybsit"

.L00C01016:
  .asciz "spisit"

.L00C01017:
  .asciz "bspsit"

.L00C01018:
  .asciz "kntsit"

.L00C01019:
  .asciz "vilsit"

.L00C0101A:
  .asciz "mansit"

.L00C0101B:
  .asciz "pesit"

.L00C0101C:
  .asciz "sklatk"

.L00C0101D:
  .asciz "sgtatk"

.L00C0101E:
  .asciz "skepch"

.L00C0101F:
  .asciz "vilatk"

.L00C01020:
  .asciz "claw"

.L00C01021:
  .asciz "skeswg"

.L00C01022:
  .asciz "pldeth"

.L00C01023:
  .asciz "pdiehi"

.L00C01024:
  .asciz "podth1"

.L00C01025:
  .asciz "podth2"

.L00C01026:
  .asciz "podth3"

.L00C01027:
  .asciz "bgdth1"

.L00C01028:
  .asciz "bgdth2"

.L00C01029:
  .asciz "sgtdth"

.L00C0102A:
  .asciz "cacdth"

.L00C0102B:
  .asciz "skldth"

.L00C0102C:
  .asciz "brsdth"

.L00C0102D:
  .asciz "cybdth"

.L00C0102E:
  .asciz "spidth"

.L00C0102F:
  .asciz "bspdth"

.L00C01030:
  .asciz "vildth"

.L00C01031:
  .asciz "kntdth"

.L00C01032:
  .asciz "pedth"

.L00C01033:
  .asciz "skedth"

.L00C01034:
  .asciz "posact"

.L00C01035:
  .asciz "bgact"

.L00C01036:
  .asciz "dmact"

.L00C01037:
  .asciz "bspact"

.L00C01038:
  .asciz "bspwlk"

.L00C01039:
  .asciz "vilact"

.L00C0103A:
  .asciz "noway"

.L00C0103B:
  .asciz "barexp"

.L00C0103C:
  .asciz "punch"

.L00C0103D:
  .asciz "hoof"

.L00C0103E:
  .asciz "metal"

.L00C0103F:
  .asciz "chgun"

.L00C01040:
  .asciz "tink"

.L00C01041:
  .asciz "bdopn"

.L00C01042:
  .asciz "bdcls"

.L00C01043:
  .asciz "itmbk"

.L00C01044:
  .asciz "flame"

.L00C01045:
  .asciz "flamst"

.L00C01046:
  .asciz "getpow"

.L00C01047:
  .asciz "bospit"

.L00C01048:
  .asciz "boscub"

.L00C01049:
  .asciz "bossit"

.L00C0104A:
  .asciz "bospn"

.L00C0104B:
  .asciz "bosdth"

.L00C0104C:
  .asciz "manatk"

.L00C0104D:
  .asciz "mandth"

.L00C0104E:
  .asciz "sssit"

.L00C0104F:
  .asciz "ssdth"

.L00C01050:
  .asciz "keenpn"

.L00C01051:
  .asciz "keendt"

.L00C01052:
  .asciz "skeact"

.L00C01053:
  .asciz "skesit"

.L00C01054:
  .asciz "skeatk"

.L00C01055:
  .asciz "radio"

.L00C01056:
  .asciz "e1m1"

.L00C01057:
  .asciz "e1m2"

.L00C01058:
  .asciz "e1m3"

.L00C01059:
  .asciz "e1m4"

.L00C0105A:
  .asciz "e1m5"

.L00C0105B:
  .asciz "e1m6"

.L00C0105C:
  .asciz "e1m7"

.L00C0105D:
  .asciz "e1m8"

.L00C0105E:
  .asciz "e1m9"

.L00C0105F:
  .asciz "e2m1"

.L00C01060:
  .asciz "e2m2"

.L00C01061:
  .asciz "e2m3"

.L00C01062:
  .asciz "e2m4"

.L00C01063:
  .asciz "e2m5"

.L00C01064:
  .asciz "e2m6"

.L00C01065:
  .asciz "e2m7"

.L00C01066:
  .asciz "e2m8"

.L00C01067:
  .asciz "e2m9"

.L00C01068:
  .asciz "e3m1"

.L00C01069:
  .asciz "e3m2"

.L00C0106A:
  .asciz "e3m3"

.L00C0106B:
  .asciz "e3m4"

.L00C0106C:
  .asciz "e3m5"

.L00C0106D:
  .asciz "e3m6"

.L00C0106E:
  .asciz "e3m7"

.L00C0106F:
  .asciz "e3m8"

.L00C01070:
  .asciz "e3m9"

.L00C01071:
  .asciz "inter"

.L00C01072:
  .asciz "intro"

.L00C01073:
  .asciz "bunny"

.L00C01074:
  .asciz "victor"

.L00C01075:
  .asciz "introa"

.L00C01076:
  .asciz "runnin"

.L00C01077:
  .asciz "stalks"

.L00C01078:
  .asciz "countd"

.L00C01079:
  .asciz "betwee"

.L00C0107A:
  .asciz "doom"

.L00C0107B:
  .asciz "the_da"

.L00C0107C:
  .asciz "shawn"

.L00C0107D:
  .asciz "ddtblu"

.L00C0107E:
  .asciz "in_cit"

.L00C0107F:
  .asciz "dead"

.L00C01080:
  .asciz "stlks2"

.L00C01081:
  .asciz "theda2"

.L00C01082:
  .asciz "doom2"

.L00C01083:
  .asciz "ddtbl2"

.L00C01084:
  .asciz "runni2"

.L00C01085:
  .asciz "dead2"

.L00C01086:
  .asciz "stlks3"

.L00C01087:
  .asciz "romero"

.L00C01088:
  .asciz "shawn2"

.L00C01089:
  .asciz "messag"

.L00C0108A:
  .asciz "count2"

.L00C0108B:
  .asciz "ddtbl3"

.L00C0108C:
  .asciz "ampie"

.L00C0108D:
  .asciz "theda3"

.L00C0108E:
  .asciz "adrian"

.L00C0108F:
  .asciz "messg2"

.L00C01090:
  .asciz "romer2"

.L00C01091:
  .asciz "tense"

.L00C01092:
  .asciz "shawn3"

.L00C01093:
  .asciz "openin"

.L00C01094:
  .asciz "evil"

.L00C01095:
  .asciz "ultima"

.L00C01096:
  .asciz "read_m"

.L00C01097:
  .asciz "dm2ttl"

.L00C01098:
  .asciz "dm2int"

.L00C01099:
  .asciz "are you sure you want to\nquit this great game?"

.L00C0109A:
  .asciz "please don't leave, there's more\ndemons to toast!"

.L00C0109B:
  .asciz "let's beat it -- this is turning\ninto a bloodbath!"

.L00C0109C:
  .asciz "i wouldn't leave if i were you.\ndos is much worse."

.L00C0109D:
  .asciz "you're trying to say you like dos\nbetter than me, right?"

.L00C0109E:
  .asciz "don't leave yet -- there's a\ndemon around that corner!"

.L00C0109F:
  .asciz "ya know, next time you come in here\ni'm gonna toast ya."

.L00C010A0:
  .ascii "go ahead and leave. see if i care.you want to quit?\nthen"
  .asciz ", thou hast lost an eighth!"

.L00C010A1:
  .ascii "don't go now, there's a \ndimensional shambler waiting\nat"
  .asciz " the dos prompt!"

.L00C010A2:
  .asciz "get outta here and go back\nto your boring programs."

.L00C010A3:
  .asciz "if i were your boss, i'd \n deathmatch ya in a minute!"

.L00C010A4:
  .ascii "look, bud. you leave now\nand you forfeit your body count"
  .asciz "!"

.L00C010A5:
  .ascii "just leave. when you come\nback, i'll be waiting with a b"
  .asciz "at."

.L00C010A6:
  .ascii "you're lucky i don't smack\nyou for thinking about leavin"
  .asciz "g.fuck you, pussy!\nget the fuck out!"

.L00C010A7:
  .asciz "you quit and i'll jizz\nin your cystholes!"

.L00C010A8:
  .asciz "if you leave, i'll make\nthe lord drink my jizz."

.L00C010A9:
  .asciz "hey, ron! can we say\n'fuck' in the game?"

.L00C010AA:
  .ascii "i'd leave: this is just\nmore monsters and levels.\nwhat a"
  .asciz " load."

.L00C010AB:
  .asciz "suck it down, asshole!\nyou're a fucking wimp!"

.L00C010AC:
  .asciz "don't quit now! we're \nstill spending your money!"

.L00C010AD:
  .asciz "THIS IS NO MESSAGE!\nPage intentionally left blank."

.L00C010AE:
  .asciz "ZOMBIEMAN"

.L00C010AF:
  .asciz "SHOTGUN GUY"

.L00C010B0:
  .asciz "HEAVY WEAPON DUDE"

.L00C010B1:
  .asciz "IMP"

.L00C010B2:
  .asciz "DEMON"

.L00C010B3:
  .asciz "LOST SOUL"

.L00C010B4:
  .asciz "CACODEMON"

.L00C010B5:
  .asciz "HELL KNIGHT"

.L00C010B6:
  .asciz "BARON OF HELL"

.L00C010B7:
  .asciz "ARACHNOTRON"

.L00C010B8:
  .asciz "PAIN ELEMENTAL"

.L00C010B9:
  .asciz "REVENANT"

.L00C010BA:
  .asciz "MANCUBUS"

.L00C010BB:
  .asciz "ARCH-VILE"

.L00C010BC:
  .asciz "THE SPIDER MASTERMIND"

.L00C010BD:
  .asciz "THE CYBERDEMON"

.L00C010BE:
  .asciz "OUR HERO"

.L00C010BF:
  .asciz "E1M1: Hangar"

.L00C010C0:
  .asciz "E1M2: Nuclear Plant"

.L00C010C1:
  .asciz "E1M3: Toxin Refinery"

.L00C010C2:
  .asciz "E1M4: Command Control"

.L00C010C3:
  .asciz "E1M5: Phobos Lab"

.L00C010C4:
  .asciz "E1M6: Central Processing"

.L00C010C5:
  .asciz "E1M7: Computer Station"

.L00C010C6:
  .asciz "E1M8: Phobos Anomaly"

.L00C010C7:
  .asciz "E1M9: Military Base"

.L00C010C8:
  .asciz "E2M1: Deimos Anomaly"

.L00C010C9:
  .asciz "E2M2: Containment Area"

.L00C010CA:
  .asciz "E2M3: Refinery"

.L00C010CB:
  .asciz "E2M4: Deimos Lab"

.L00C010CC:
  .asciz "E2M5: Command Center"

.L00C010CD:
  .asciz "E2M6: Halls of the Damned"

.L00C010CE:
  .asciz "E2M7: Spawning Vats"

.L00C010CF:
  .asciz "E2M8: Tower of Babel"

.L00C010D0:
  .asciz "E2M9: Fortress of Mystery"

.L00C010D1:
  .asciz "E3M1: Hell Keep"

.L00C010D2:
  .asciz "E3M2: Slough of Despair"

.L00C010D3:
  .asciz "E3M3: Pandemonium"

.L00C010D4:
  .asciz "E3M4: House of Pain"

.L00C010D5:
  .asciz "E3M5: Unholy Cathedral"

.L00C010D6:
  .asciz "E3M6: Mt. Erebus"

.L00C010D7:
  .asciz "E3M7: Limbo"

.L00C010D8:
  .asciz "E3M8: Dis"

.L00C010D9:
  .asciz "E3M9: Warrens"

.L00C010DA:
  .asciz "E4M1: Hell Beneath"

.L00C010DB:
  .asciz "E4M2: Perfect Hatred"

.L00C010DC:
  .asciz "E4M3: Sever The Wicked"

.L00C010DD:
  .asciz "E4M4: Unruly Evil"

.L00C010DE:
  .asciz "E4M5: They Will Repent"

.L00C010DF:
  .asciz "E4M6: Against Thee Wickedly"

.L00C010E0:
  .asciz "E4M7: And Hell Followed"

.L00C010E1:
  .asciz "E4M8: Unto The Cruel"

.L00C010E2:
  .asciz "E4M9: Fear"

.L00C010E3:
  .asciz "NEWLEVEL"

.L00C010E4:
  .asciz "C"

.L00C010E5:
  .asciz "POSIX"

.L00C010E6:
  .asciz "ISO-8859-1"

.L00C010E7:
  .asciz ".UTF8"

.L00C010E8:
  .asciz "EN_US.UTF8"

.L00C010E9:
  .asciz "multidir"

.L00C010EA:
  .asciz "level 1: entryway"

.L00C010EB:
  .asciz "level 2: underhalls"

.L00C010EC:
  .asciz "level 3: the gantlet"

.L00C010ED:
  .asciz "level 4: the focus"

.L00C010EE:
  .asciz "level 5: the waste tunnels"

.L00C010EF:
  .asciz "level 6: the crusher"

.L00C010F0:
  .asciz "level 7: dead simple"

.L00C010F1:
  .asciz "level 8: tricks and traps"

.L00C010F2:
  .asciz "level 9: the pit"

.L00C010F3:
  .asciz "level 10: refueling base"

.L00C010F4:
  .asciz "level 11: 'o' of destruction!"

.L00C010F5:
  .asciz "level 12: the factory"

.L00C010F6:
  .asciz "level 13: downtown"

.L00C010F7:
  .asciz "level 14: the inmost dens"

.L00C010F8:
  .asciz "level 15: industrial zone"

.L00C010F9:
  .asciz "level 16: suburbs"

.L00C010FA:
  .asciz "level 17: tenements"

.L00C010FB:
  .asciz "level 18: the courtyard"

.L00C010FC:
  .asciz "level 19: the citadel"

.L00C010FD:
  .asciz "level 20: gotcha!"

.L00C010FE:
  .asciz "level 21: nirvana"

.L00C010FF:
  .asciz "level 22: the catacombs"

.L00C01100:
  .asciz "level 23: barrels o' fun"

.L00C01101:
  .asciz "level 24: the chasm"

.L00C01102:
  .asciz "level 25: bloodfalls"

.L00C01103:
  .asciz "level 26: the abandoned mines"

.L00C01104:
  .asciz "level 27: monster condo"

.L00C01105:
  .asciz "level 28: the spirit world"

.L00C01106:
  .asciz "level 29: the living end"

.L00C01107:
  .asciz "level 30: icon of sin"

.L00C01108:
  .asciz "level 31: wolfenstein"

.L00C01109:
  .asciz "level 32: grosse"

.L00C0110A:
  .asciz "stdio_vt"

.L00C0110B:
  .asciz "Green: "

.L00C0110C:
  .asciz "Indigo: "

.L00C0110D:
  .asciz "Brown: "

.L00C0110E:
  .asciz "Red: "

.L00C0110F:
  .asciz "TROO"

.L00C01110:
  .asciz "SHTG"

.L00C01111:
  .asciz "PUNG"

.L00C01112:
  .asciz "PISG"

.L00C01113:
  .asciz "PISF"

.L00C01114:
  .asciz "SHTF"

.L00C01115:
  .asciz "SHT2"

.L00C01116:
  .asciz "CHGG"

.L00C01117:
  .asciz "CHGF"

.L00C01118:
  .asciz "MISG"

.L00C01119:
  .asciz "MISF"

.L00C0111A:
  .asciz "SAWG"

.L00C0111B:
  .asciz "PLSG"

.L00C0111C:
  .asciz "PLSF"

.L00C0111D:
  .asciz "BFGG"

.L00C0111E:
  .asciz "BFGF"

.L00C0111F:
  .asciz "BLUD"

.L00C01120:
  .asciz "PUFF"

.L00C01121:
  .asciz "BAL1"

.L00C01122:
  .asciz "BAL2"

.L00C01123:
  .asciz "PLSS"

.L00C01124:
  .asciz "PLSE"

.L00C01125:
  .asciz "MISL"

.L00C01126:
  .asciz "BFS1"

.L00C01127:
  .asciz "BFE1"

.L00C01128:
  .asciz "BFE2"

.L00C01129:
  .asciz "TFOG"

.L00C0112A:
  .asciz "IFOG"

.L00C0112B:
  .asciz "PLAY"

.L00C0112C:
  .asciz "POSS"

.L00C0112D:
  .asciz "SPOS"

.L00C0112E:
  .asciz "VILE"

.L00C0112F:
  .asciz "FIRE"

.L00C01130:
  .asciz "FATB"

.L00C01131:
  .asciz "FBXP"

.L00C01132:
  .asciz "SKEL"

.L00C01133:
  .asciz "MANF"

.L00C01134:
  .asciz "FATT"

.L00C01135:
  .asciz "CPOS"

.L00C01136:
  .asciz "SARG"

.L00C01137:
  .asciz "HEAD"

.L00C01138:
  .asciz "BAL7"

.L00C01139:
  .asciz "BOSS"

.L00C0113A:
  .asciz "BOS2"

.L00C0113B:
  .asciz "SKUL"

.L00C0113C:
  .asciz "SPID"

.L00C0113D:
  .asciz "BSPI"

.L00C0113E:
  .asciz "APLS"

.L00C0113F:
  .asciz "APBX"

.L00C01140:
  .asciz "CYBR"

.L00C01141:
  .asciz "PAIN"

.L00C01142:
  .asciz "SSWV"

.L00C01143:
  .asciz "KEEN"

.L00C01144:
  .asciz "BBRN"

.L00C01145:
  .asciz "BOSF"

.L00C01146:
  .asciz "ARM1"

.L00C01147:
  .asciz "ARM2"

.L00C01148:
  .asciz "BAR1"

.L00C01149:
  .asciz "BEXP"

.L00C0114A:
  .asciz "FCAN"

.L00C0114B:
  .asciz "BON1"

.L00C0114C:
  .asciz "BON2"

.L00C0114D:
  .asciz "BKEY"

.L00C0114E:
  .asciz "RKEY"

.L00C0114F:
  .asciz "YKEY"

.L00C01150:
  .asciz "BSKU"

.L00C01151:
  .asciz "RSKU"

.L00C01152:
  .asciz "YSKU"

.L00C01153:
  .asciz "STIM"

.L00C01154:
  .asciz "MEDI"

.L00C01155:
  .asciz "SOUL"

.L00C01156:
  .asciz "PINV"

.L00C01157:
  .asciz "PSTR"

.L00C01158:
  .asciz "PINS"

.L00C01159:
  .asciz "MEGA"

.L00C0115A:
  .asciz "SUIT"

.L00C0115B:
  .asciz "PMAP"

.L00C0115C:
  .asciz "PVIS"

.L00C0115D:
  .asciz "CLIP"

.L00C0115E:
  .asciz "AMMO"

.L00C0115F:
  .asciz "ROCK"

.L00C01160:
  .asciz "BROK"

.L00C01161:
  .asciz "CELL"

.L00C01162:
  .asciz "CELP"

.L00C01163:
  .asciz "SHEL"

.L00C01164:
  .asciz "SBOX"

.L00C01165:
  .asciz "BPAK"

.L00C01166:
  .asciz "BFUG"

.L00C01167:
  .asciz "MGUN"

.L00C01168:
  .asciz "CSAW"

.L00C01169:
  .asciz "LAUN"

.L00C0116A:
  .asciz "PLAS"

.L00C0116B:
  .asciz "SHOT"

.L00C0116C:
  .asciz "SGN2"

.L00C0116D:
  .asciz "COLU"

.L00C0116E:
  .asciz "SMT2"

.L00C0116F:
  .asciz "GOR1"

.L00C01170:
  .asciz "POL2"

.L00C01171:
  .asciz "POL5"

.L00C01172:
  .asciz "POL4"

.L00C01173:
  .asciz "POL3"

.L00C01174:
  .asciz "POL1"

.L00C01175:
  .asciz "POL6"

.L00C01176:
  .asciz "GOR2"

.L00C01177:
  .asciz "GOR3"

.L00C01178:
  .asciz "GOR4"

.L00C01179:
  .asciz "GOR5"

.L00C0117A:
  .asciz "SMIT"

.L00C0117B:
  .asciz "COL1"

.L00C0117C:
  .asciz "COL2"

.L00C0117D:
  .asciz "COL3"

.L00C0117E:
  .asciz "COL4"

.L00C0117F:
  .asciz "CAND"

.L00C01180:
  .asciz "CBRA"

.L00C01181:
  .asciz "COL6"

.L00C01182:
  .asciz "TRE1"

.L00C01183:
  .asciz "TRE2"

.L00C01184:
  .asciz "ELEC"

.L00C01185:
  .asciz "CEYE"

.L00C01186:
  .asciz "FSKU"

.L00C01187:
  .asciz "COL5"

.L00C01188:
  .asciz "TBLU"

.L00C01189:
  .asciz "TGRN"

.L00C0118A:
  .asciz "TRED"

.L00C0118B:
  .asciz "SMBT"

.L00C0118C:
  .asciz "SMGT"

.L00C0118D:
  .asciz "SMRT"

.L00C0118E:
  .asciz "HDB1"

.L00C0118F:
  .asciz "HDB2"

.L00C01190:
  .asciz "HDB3"

.L00C01191:
  .asciz "HDB4"

.L00C01192:
  .asciz "HDB5"

.L00C01193:
  .asciz "HDB6"

.L00C01194:
  .asciz "POB1"

.L00C01195:
  .asciz "POB2"

.L00C01196:
  .asciz "BRS1"

.L00C01197:
  .asciz "TLMP"

.L00C01198:
  .asciz "TLP2"

.L00C01199:
  .asciz "No"

.L00C0119A:
  .asciz "I'm ready to kick butt!"

.L00C0119B:
  .asciz "I'm OK."

.L00C0119C:
  .asciz "I'm not looking too good!"

.L00C0119D:
  .asciz "Help!"

.L00C0119E:
  .asciz "You suck!"

.L00C0119F:
  .asciz "Next time, scumbag..."

.L00C011A0:
  .asciz "Come here!"

.L00C011A1:
  .asciz "I'll take care of it."

.L00C011A2:
  .asciz "Yes"

.L00C011A3:
  .asciz "mouse_sensitivity"

.L00C011A4:
  .asciz "sfx_volume"

.L00C011A5:
  .asciz "music_volume"

.L00C011A6:
  .asciz "show_messages"

.L00C011A7:
  .asciz "key_right"

.L00C011A8:
  .asciz "key_left"

.L00C011A9:
  .asciz "key_up"

.L00C011AA:
  .asciz "key_down"

.L00C011AB:
  .asciz "key_strafeleft"

.L00C011AC:
  .asciz "key_straferight"

.L00C011AD:
  .asciz "key_fire"

.L00C011AE:
  .asciz "key_use"

.L00C011AF:
  .asciz "key_strafe"

.L00C011B0:
  .asciz "key_speed"

.L00C011B1:
  .asciz "use_mouse"

.L00C011B2:
  .asciz "mouseb_fire"

.L00C011B3:
  .asciz "mouseb_strafe"

.L00C011B4:
  .asciz "mouseb_forward"

.L00C011B5:
  .asciz "use_joystick"

.L00C011B6:
  .asciz "joyb_fire"

.L00C011B7:
  .asciz "joyb_strafe"

.L00C011B8:
  .asciz "joyb_use"

.L00C011B9:
  .asciz "joyb_speed"

.L00C011BA:
  .asciz "screenblocks"

.L00C011BB:
  .asciz "detaillevel"

.L00C011BC:
  .asciz "snd_channels"

.L00C011BD:
  .asciz "usegamma"

.L00C01200:
  .asciz "Z_Malloc: failed on allocation of %i bytes"

.L00C01202:
  .asciz "Z_Malloc: an owner is required for purgable blocks"

.L00C0120F:
  .asciz "Error: "

.L00C01210:
  .asciz "\n"

.L00C012BB:
  .asciz "W_CacheLumpNum: %i >= numlumps"

.L00C012E5:
  .asciz "Z_ChangeTag: freed a pointer without ZONEID"

.L00C012E8:
  .asciz "Z_ChangeTag: an owner is required for purgable blocks"

.L00C012F0:
  .asciz "R_TextureNumForName: %s not found\n"

.L00C01327:
  .asciz "bad packet length %i\n"

.L00C01328:
  .asciz "bad packet checksum\n"

.L00C01329:
  .asciz "setup packet\n"

.L00C0132A:
  .asciz "get %i = (%i + %i, R %i)[%i] "

.L00C0132B:
  .asciz "%i "

.L00C01357:
  .asciz "W_GetNumForName: %s not found!\n"

.L00C01364:
  .asciz "W_LumpLength: %i >= numlumps"

.L00C01395:
  .asciz "F_SKY"

.L00C013FF:
  .asciz "$STDIN"

.L00C01400:
  .asciz "$STDOUT"

.L00C01401:
  .asciz "$STDERR"

.L00C01402:
  .asciz "fopen: malloc fail\n"

.L00C01442:
  .asciz "Z_Free: freed a pointer without ZONEID"

.L00C01449:
  .asciz "Sector with more than 20 adjoining sectors\n"

.L00C0145C:
  .asciz "ExpandTics: strange value %i at maketic %i"

.L00C0148F:
  .asciz "R_InstallSpriteLump: Bad frame characters in lump %i"

.L00C01490:
  .asciz "R_InitSprites: Sprite %s frame %c has multip rot=0 lump"

.L00C01491:
  .ascii "R_InitSprites: Sprite %s frame %c has rotations and a ro"
  .asciz "t=0 lump"

.L00C01492:
  .ascii "R_InitSprites: Sprite %s : %c : %c has two lumps mapped "
  .asciz "to it"

.L00C014E3:
  .asciz "W_CheckNumForNameBase: Search Hash-Chain Error\n"

.L00C0150D:
  .asciz "R_CheckTextureNumForName: No Textures\n"

.L00C0152E:
  .asciz "P_AcsRun_ThingCount: a1=%d a2=%d\n"

.L00C01535:
  .asciz "Tried to transmit to another node"

.L00C01536:
  .asciz "send (%i + %i, R %i) [%i] "

.L00C0156D:
  .asciz "NetUpdate: netbuffer->numtics > BACKUPTICS"

.L00C01580:
  .asciz "I_FinishUpdate: No Screen\n"

.L00C01607:
  .asciz "rb"

.L00C016CE:
  .asciz "P_AcsRun_ScriptWait: a1=%d\n"

.L00C016E7:
  .asciz "F_SKY1"

.L00C016E8:
  .asciz "SKY3"

.L00C016E9:
  .asciz "SKY1"

.L00C016EA:
  .asciz "SKY2"

.L00C01727:
  .asciz "-cdrom"

.L00C01728:
  .asciz "c:\\doomdata\\doomsav%d.dsg"

.L00C01729:
  .asciz "doomsav%d.dsg"

.L00C01730:
  .asciz "D_DoAdvanceDemo: A seq=%d\n"

.L00C01731:
  .asciz "D_DoAdvanceDemo: B seq=%d\n"

.L00C01732:
  .asciz "TITLEPIC"

.L00C01733:
  .asciz "TITLE"

.L00C01734:
  .asciz "demo1"

.L00C01735:
  .asciz "CREDIT"

.L00C01736:
  .asciz "demo2"

.L00C01737:
  .asciz "HELP2"

.L00C01738:
  .asciz "demo3"

.L00C01739:
  .asciz "demo4"

.L00C01746:
  .asciz "M_LSLEFT"

.L00C01747:
  .asciz "M_LSCNTR"

.L00C01748:
  .asciz "M_LSRGHT"

.L00C01755:
  .asciz "P_AddActivePlat: no more plats!"

.L00C0175E:
  .asciz "updateMultIcon: y - ST_Y < 0"

.L00C01765:
  .asciz "P_AcsRun_ChangeCeiling: a1=%d a2=%d\n"

.L00C01785:
  .asciz "P_StartButton: no button slots left!"

.L00C017E1:
  .asciz "Bad music number %d"

.L00C017E2:
  .asciz "mus_%s"

.L00C017E3:
  .asciz "d_%s"

.L00C017EA:
  .asciz "P_AcsRun_PolyWait: a1=%d\n"

.L00C01804:
  .asciz "P_AcsRun_TagWait: a1=%d\n"

.L00C0182C:
  .asciz "R_MapPlane: %i, %i at %i"

.L00C018A9:
  .asciz "timed %i gametics in %i realtics"

.L00C018AA:
  .asciz "Demo %s recorded"

.L00C018E2:
  .asciz "[Message unsent]"

.L00C0190F:
  .asciz "Network game synchronization aborted."

.L00C01916:
  .asciz "Could not place patch on level %d"

.L00C0194F:
  .asciz "P_GiveAmmo: bad type %i"

.L00C01983:
  .asciz "P_AcsRun_ChangeFloor: a1=%d a2=%d\n"

.L00C019C8:
  .asciz "zone size: %i  location: %p\n"

.L00C019C9:
  .asciz "tag range: %i to %i\n"

.L00C019CA:
  .asciz "ERROR: block bad ZONEID\n"

.L00C019CC:
  .asciz "block:%p\tsize:%7i\tuser:%p\ttag:%3i\n"

.L00C019CD:
  .asciz "ERROR: block size does not touch the next block\n"

.L00C019CE:
  .asciz "ERROR: next block doesn't have proper back link\n"

.L00C019CF:
  .asciz "ERROR: two consecutive free blocks\n"

.L00C01A13:
  .asciz "R_FindPlane: no more visplanes"

.L00C01A1B:
  .asciz "M_THERML"

.L00C01A1C:
  .asciz "M_THERMM"

.L00C01A1D:
  .asciz "M_THERMR"

.L00C01A1E:
  .asciz "M_THERMO"

.L00C01A2B:
  .asciz "Patch at %d,%d exceeds LFB\n"

.L00C01A2C:
  .asciz "V_DrawPatch: bad patch (ignored)\n"

.L00C01A9A:
  .asciz "High detail"

.L00C01A9B:
  .asciz "Low detail"

.L00C01ABC:
  .asciz "R_DrawFuzzColumn: %i to %i at %i"

.L00C01B02:
  .asciz "%s is turbo!"

.L00C01B03:
  .asciz "consistency failure (%i should be %i)"

.L00C01B04:
  .asciz "NET GAME"

.L00C01B3C:
  .asciz "ds%s"

.L00C01B4F:
  .asciz "TKPE_UnpackL4: End Of Image\n"

.L00C01B62:
  .asciz "F_START"

.L00C01B63:
  .asciz "F_END"

.L00C01B6A:
  .asciz "Bad V_CopyRect"

.L00C01B77:
  .asciz "P_AcsRun_AmbientSound: a1=%d a2=%d\n"

.L00C01B8F:
  .asciz "TKMM_MallocURo: failed A %d\n"

.L00C01B90:
  .asciz "TKMM_MallocURo: failed C %d\n"

.L00C01BEA:
  .asciz "tk_vfile_init\n"

.L00C01BEB:
  .asciz "tk_vfile_init: OK\n"

.L00C01BF2:
  .asciz "R_ProjectSprite: invalid sprite number %i "

.L00C01BF3:
  .asciz "R_ProjectSprite: invalid sprite frame %i : %i "

.L00C01C31:
  .asciz "Bad V_DrawBlock"

.L00C01C69:
  .asciz "STCFN033"

.L00C01C6A:
  .asciz "STCFN%.3d"

.L00C01C6B:
  .asciz "FONTA01"

.L00C01C6C:
  .asciz "FONTA%.2d"

.L00C01C79:
  .asciz "I_PlaySong: ofs=%d sz=%d\n"

.L00C01CB2:
  .asciz "wb"

.L00C01CB9:
  .asciz "%c"

.L00C01CC0:
  .asciz "%s\n\n(press y to quit)"

.L00C01CF9:
  .asciz "Unknown tclass %i in savegame"

.L00C01D06:
  .asciz "%d"

.L00C01D0D:
  .asciz "tk_mount_sysc\n"

.L00C01D9C:
  .asciz "BOSSBACK"

.L00C01DD6:
  .asciz "=======real: %i  avail: %i  game: %i\n"

.L00C01DD7:
  .asciz "TryRunTics: lowtic < gametic"

.L00C01DD8:
  .asciz "gametic>lowtic"

.L00C01E1B:
  .asciz "-nodraw"

.L00C01E1C:
  .asciz "-noblit"

.L00C01E2B:
  .ascii "are you sure? this skill level\nisn't even remotely fair."
  .asciz "\n\npress y or n."

.L00C01E3F:
  .asciz "lvol=%d rvol=%d\n"

.L00C01EA0:
  .asciz "TKMM_MMList_AllocObjCat: BRK Failed %d\n"

.L00C01F4F:
  .asciz "P_AcsRun_ThingSound: a1=%d a2=%d a3=%d\n"

.L00C01F50:
  .asciz "P_AcsRun_ThingSound: No Thing %d\n"

.L00C01F75:
  .asciz "You need a blue key to activate this object"

.L00C01F76:
  .asciz "You need a red key to activate this object"

.L00C01F77:
  .asciz "You need a yellow key to activate this object"

.L00C01F97:
  .asciz "P_InitPicAnims: bad cycle from %s to %s"

.L00C01F9E:
  .asciz "Attempt to set music volume at %d"

.L00C01FB9:
  .asciz "updateBinIcon: y - ST_Y < 0"

.L00C01FCC:
  .asciz "M_EPISOD"

.L00C01FD9:
  .asciz "P_AcsRun_SoundSequence: a1=%d\n"

.L00C02053:
  .asciz "PLAYPAL"

.L00C02054:
  .asciz "M_PAUSE"

.L00C02108:
  .asciz "M_SVOL"

.L00C02128:
  .asciz "FLOOR4_8"

.L00C02129:
  .asciz "SFLR6_1"

.L00C0212A:
  .asciz "MFLR8_4"

.L00C0212B:
  .asciz "MFLR8_3"

.L00C0212C:
  .asciz "SLIME16"

.L00C0212D:
  .asciz "RROCK14"

.L00C0212E:
  .asciz "RROCK07"

.L00C0212F:
  .asciz "RROCK17"

.L00C02130:
  .asciz "RROCK13"

.L00C02131:
  .asciz "RROCK19"

.L00C02138:
  .asciz "P_PadRejectArray: Do Reject Pad, Len=%d\n"

.L00C02139:
  .asciz "P_PadRejectArray: Insufficient Pad, Rem=%d\n"

.L00C02140:
  .asciz "HELP"

.L00C02141:
  .asciz "HELP1"

.L00C02168:
  .asciz "!%X! "

.L00C02169:
  .asciz ": "

.L00C02171:
  .asciz "(NULL)"

.L00C02172:
  .asciz "%s"

.L00C021D5:
  .asciz "W_Reload: couldn't open %s"

.L00C021F5:
  .asciz "SMus: Unknown Op %d\n"

.L00C02208:
  .asciz "osfopen: bad mode %d\n"

.L00C0222E:
  .asciz "P_AcsShootSpecialLine: %d\n"

.L00C0223D:
  .asciz "quicksave over your game named\n\n'%s'?\n\npress y or n."

.L00C02269:
  .asciz "Doom"

.L00C02270:
  .asciz "D_DoomLoop: A0\n"

.L00C02271:
  .asciz "-debugfile"

.L00C02272:
  .asciz "debug%i.txt"

.L00C02273:
  .asciz "debug output to: %s\n"

.L00C02274:
  .asciz "w"

.L00C02275:
  .asciz "D_DoomLoop: A1\n"

.L00C02276:
  .asciz "D_DoomLoop: A2, d_snd_acctime=%f\n"

.L00C02289:
  .asciz "P_AcsUseSpecialLine: %d\n"

.L00C022A3:
  .asciz "P_AcsRun_ActivatorSound: a1=%d a2=%d\n"

.L00C022C2:
  .asciz ".lmp"

.L00C022C3:
  .asciz "-maxdemo"

.L00C022FF:
  .asciz "D_UpdateSound: d_snd_acctime=%f dt=%d\n"

.L00C02319:
  .asciz "tk_sysc_opendir: %s -> %s\n"

.L00C02326:
  .asciz "tkgCreateDisplay: A\n"

.L00C0234C:
  .asciz "Only %i deathmatch spots, 4 required"

.L00C02353:
  .asciz "tk_unlink: Fail %s\n"

.L00C02379:
  .asciz "%s: %s\n"

.L00C0237A:
  .asciz "%s\n"

.L00C02383:
  .asciz "CWD"

.L00C02396:
  .asciz "tkgBlitSubImage: Old Path\n"

.L00C0239D:
  .asciz "TK_DlSymA: DlSym name=%s ptr=%p flags=%d\n"

.L00C023AA:
  .asciz "Doomcom buffer invalid!"

.L00C023AB:
  .ascii "startskill %i  deathmatch: %i  startmap: %i  startepisod"
  .asciz "e: %i\n"

.L00C023AC:
  .asciz "player %i of %i (%i nodes)\n"

.L00C0241E:
  .asciz "DSPISTOL"

.L00C0241F:
  .asciz "STFPOW"

.L00C02420:
  .asciz "TICTOC"

.L00C02441:
  .asciz "P_CrossSubsector: ss %i with numss = %i"

.L00C02460:
  .asciz "S_START"

.L00C02461:
  .asciz "S_END"

.L00C0247A:
  .asciz "r+b"

.L00C0247B:
  .asciz "__open: %s, no free handles\n"

.L00C02488:
  .asciz "R_Subsector: ss %i with numss = %i"

.L00C024DF:
  .asciz "you can't save if you aren't playing!\n\npress a key."

.L00C024F2:
  .asciz "Filename base of %s >8 chars"

.L00C02532:
  .asciz "TKMM_MMList_FreeLnkObj: Check Value Fail\n"

.L00C02535:
  .asciz "TKMM_MMList_FreeLnkObj: List Index Fail\n"

.L00C02544:
  .asciz "AMMNUM%d"

.L00C02552:
  .asciz "brdr_t"

.L00C02553:
  .asciz "brdr_b"

.L00C02554:
  .asciz "brdr_l"

.L00C02555:
  .asciz "brdr_r"

.L00C02556:
  .asciz "brdr_tl"

.L00C02557:
  .asciz "brdr_tr"

.L00C02558:
  .asciz "brdr_bl"

.L00C02559:
  .asciz "brdr_br"

.L00C0256D:
  .asciz "findSpareSpot: find spot fail\n"

.L00C02598:
  .ascii "this is the shareware version of doom.\n\nyou need to orde"
  .asciz "r the entire trilogy.\n\npress a key."

.L00C02599:
  .asciz "M_Episode: 4th episode requires UltimateDOOM\n"

.L00C025B3:
  .asciz "S_Init: default sfx volume %d\n"

.L00C025B4:
  .asciz "S_Init: A0\n"

.L00C025B5:
  .asciz "S_Init: A1\n"

.L00C025B6:
  .asciz "S_Init: OK\n"

.L00C025DC:
  .asciz "tk_fopen: Fail %s\n"

.L00C025E3:
  .asciz "empty slot"

.L00C0260E:
  .asciz "R_DrawColumn: %i to %i at %i"

.L00C0261B:
  .asciz "P_AcsRun_SetLineTexture: a1=%d a2=%d a3=%d a4=%d\n"

.L00C02628:
  .asciz "M_DOOM"

.L00C02671:
  .asciz "?"

.L00C026BD:
  .asciz "Weird actor->movedir!"

.L00C026F1:
  .asciz "Z_CheckHeap: block size does not touch the next block\n"

.L00C026F2:
  .asciz "Z_CheckHeap: next block doesn't have proper back link\n"

.L00C026F3:
  .asciz "Z_CheckHeap: two consecutive free blocks\n"

.L00C02720:
  .asciz "drawNum: n->y - ST_Y < 0"

.L00C0277D:
  .asciz "you can't do load while in a net game!\n\npress a key."

.L00C027A7:
  .asciz "TKMM_Malloc: failed A %d\n"

.L00C027A8:
  .asciz "TKMM_Malloc: failed C %d\n"

.L00C027DD:
  .asciz "P_AcsRun_SectorSound: a1=%d a2=%d\n"

.L00C02812:
  .asciz "Attempt to set sfx volume at %d"

.L00C0281F:
  .ascii "TKGDI_CopyBitmapInfo: Src BITMAPINFOHEADER too small, %d"
  .asciz " bytes\n"

.L00C02820:
  .ascii "TKGDI_CopyBitmapInfo: Reject, Src BITMAPINFOHEADER too b"
  .asciz "ig, %d bytes\n"

.L00C02835:
  .asciz "No error has occurred\n"

.L00C02836:
  .asciz "An error has occurred\n"

.L00C0284F:
  .asciz "SKY4"

.L00C02856:
  .ascii "you can't start a new game\nwhile in a network game.\n\npre"
  .asciz "ss a key."

.L00C02869:
  .asciz "PTR_SlideTraverse: not a line?"

.L00C02891:
  .asciz "VICTORY2"

.L00C02892:
  .asciz "ENDPIC"

.L00C028CF:
  .asciz "version %i"

.L00C028D0:
  .asciz "Savegame buffer overrun"

.L00C028D1:
  .asciz "game saved."

.L00C02903:
  .asciz "Couldn't read file %s"

.L00C02928:
  .asciz "Messages OFF"

.L00C02929:
  .asciz "Messages ON"

.L00C02969:
  .asciz "Bad savegame"

.L00C02970:
  .ascii "P_AcsRun_SetLineSpecial: a1=%d a2=%d a3=%d a4=%d a5=%d a"
  .asciz "6=%d a7=%d\n"

.L00C0299C:
  .asciz "tk_sysc_fopen: %s -> %s\n"

.L00C029A3:
  .asciz "PFUB2"

.L00C029A4:
  .asciz "PFUB1"

.L00C029A5:
  .asciz "END0"

.L00C029A6:
  .asciz "END%i"

.L00C029AD:
  .asciz "M_NEWG"

.L00C029AE:
  .asciz "M_SKILL"

.L00C02A1C:
  .asciz "map31"

.L00C02A23:
  .asciz "P_AcsCrossSpecialLine: %d\n"

.L00C02A3C:
  .asciz "P_RemoveActivePlat: can't find plat!"

.L00C02A4A:
  .asciz "you can't end a netgame!\n\npress a key."

.L00C02A4B:
  .asciz "are you sure you want to end the game?\n\npress y or n."

.L00C02A7E:
  .asciz "Print: %s\n"

.L00C02AB7:
  .asciz "R_DrawSpan: %i to %i at %i"

.L00C02ACA:
  .asciz "P_AcsRun_SetLineBlocking: a1=%d a2=%d\n"

.L00C02ADD:
  .asciz "Patch origin %d,%d exceeds LFB\n"

.L00C02ADE:
  .asciz "Bad V_DrawPatch in V_DrawPatchFlipped"

.L00C02AF2:
  .asciz "P_AcsRun_SetLineMonsterBlocking: a1=%d a2=%d\n"

.L00C02B0C:
  .asciz "STTMINUS"

.L00C02B19:
  .asciz ".."

.L00C02B6E:
  .asciz "P_AcsRun_LocalAmbientSound: a1=%d a2=%d\n"

.L00C02BA0:
  .asciz "GENMIDI"

.L00C02BD1:
  .asciz "W_ReadLump: %i < 0"

.L00C02BD2:
  .asciz "W_ReadLump: %i >= numlumps (%i)"

.L00C02BD3:
  .asciz "W_ReadLump: couldn't open %s"

.L00C02BD4:
  .asciz "W_ReadLump: only read %i of %i on lump %i"

.L00C02BF3:
  .asciz "PrintBold: %s\n"

.L00C02C1E:
  .asciz "M_LOADG"

.L00C02C2C:
  .asciz "you can't quickload during a netgame!\n\npress a key."

.L00C02C2D:
  .asciz "you haven't picked a quicksave slot yet!\n\npress a key."

.L00C02C2E:
  .ascii "do you want to quickload the game named\n\n'%s'?\n\npress y "
  .asciz "or n."

.L00C02C47:
  .asciz "/"

.L00C02C4E:
  .asciz "M_OPTTTL"

.L00C02C74:
  .asciz "Demo is from a different game version!\n"

.L00C02D1B:
  .asciz "M_SAVEG"

.L00C02D1C:
  .asciz "_"

.L00C02D43:
  .asciz "P_GroupLines: miscounted"

.L00C02D4A:
  .asciz "-nomonsters"

.L00C02D4B:
  .asciz "-respawn"

.L00C02D4C:
  .asciz "-fast"

.L00C02D4D:
  .asciz "-devparm"

.L00C02D4E:
  .asciz "-altdeath"

.L00C02D4F:
  .asciz "-deathmatch"

.L00C02D50:
  .asciz "\t\t\t\t\t\t The Ultimate DOOM Startup v%i.%i\t\t\t\t\t\t   "

.L00C02D51:
  .asciz "\t\t\t\t\t\t\tDOOM Shareware Startup v%i.%i\t\t\t\t\t\t   "

.L00C02D52:
  .asciz "\t\t\t\t\t\t\tDOOM Registered Startup v%i.%i\t\t\t\t\t\t   "

.L00C02D53:
  .asciz "\t\t\t\t\t\t DOOM 2: Hell on Earth v%i.%i\t\t\t\t\t\t   "

.L00C02D54:
  .asciz "\t\t\t\t\t Public DOOM - v%i.%i\t\t\t\t\t\t   "

.L00C02D55:
  .asciz "Development mode ON.\n"

.L00C02D56:
  .asciz "CD-ROM Version: default.cfg from c:\\doomdata\n"

.L00C02D57:
  .asciz "c:/doomdata/default.cfg"

.L00C02D58:
  .asciz "-turbo"

.L00C02D59:
  .asciz "turbo scale: %i%%\n"

.L00C02D5A:
  .asciz "-wart"

.L00C02D5B:
  .asciz "~devmapsE%cM%c.wad"

.L00C02D5C:
  .asciz "Warping to Episode %s, Map %s.\n"

.L00C02D5D:
  .asciz "~devmapscdata/map0%i.wad"

.L00C02D5E:
  .asciz "~devmapscdata/map%i.wad"

.L00C02D5F:
  .asciz "-file"

.L00C02D60:
  .asciz "-playdemo"

.L00C02D61:
  .asciz "-timedemo"

.L00C02D62:
  .asciz "%s.lmp"

.L00C02D63:
  .asciz "Playing demo %s.lmp.\n"

.L00C02D64:
  .asciz "-skill"

.L00C02D65:
  .asciz "-episode"

.L00C02D66:
  .asciz "-timer"

.L00C02D67:
  .asciz "Levels will end after %d minute"

.L00C02D68:
  .asciz "s"

.L00C02D69:
  .asciz ".\n"

.L00C02D6A:
  .asciz "-avg"

.L00C02D6B:
  .asciz "Austin Virtual Gaming: Levels will end after 20 minutes\n"

.L00C02D6C:
  .asciz "-warp"

.L00C02D6D:
  .asciz "V_Init: allocate screens.\n"

.L00C02D6E:
  .asciz "M_LoadDefaults: Load system defaults.\n"

.L00C02D6F:
  .asciz "Z_Init: Init zone memory allocation daemon. \n"

.L00C02D70:
  .asciz "W_Init: Init WADfiles.\n"

.L00C02D71:
  .ascii "========================================================"
  .ascii "===================\n\t\t\t\t\t\t\t\tShareware!\n================="
  .ascii "========================================================"
  .asciz "==\n"

.L00C02D72:
  .ascii "========================================================"
  .ascii "===================\n\t\t\t\t Commercial product - do not dis"
  .ascii "tribute!\n\t\t Please report software piracy to the SPA: 1-"
  .ascii "800-388-PIR8\n==========================================="
  .asciz "================================\n"

.L00C02D73:
  .asciz "M_Init: Init miscellaneous info.\n"

.L00C02D74:
  .asciz "R_Init: Init DOOM refresh daemon - "

.L00C02D75:
  .asciz "\nP_Init: Init Playloop state.\n"

.L00C02D76:
  .asciz "I_Init: Setting up machine state.\n"

.L00C02D77:
  .asciz "D_CheckNetGame: Checking network game status.\n"

.L00C02D78:
  .asciz "S_Init: Setting up sound.\n"

.L00C02D79:
  .asciz "HU_Init: Setting up heads up display.\n"

.L00C02D7A:
  .asciz "ST_Init: Init status bar.\n"

.L00C02D7B:
  .asciz "d_main: Debug Mark A0.\n"

.L00C02D7C:
  .asciz "-record"

.L00C02D7D:
  .asciz "-loadgame"

.L00C02D7E:
  .asciz "c:\\doomdata\\doomsav%c.dsg"

.L00C02D7F:
  .asciz "doomsav%c.dsg"

.L00C02D80:
  .asciz "d_main: Debug Mark A1.\n"

.L00C02D81:
  .asciz "d_main: Debug Mark A2.\n"

.L00C02D88:
  .asciz "COLORMAP"

.L00C02DA7:
  .asciz "listening for network start info...\n"

.L00C02DA8:
  .asciz "Different DOOM versions cannot play a net game!"

.L00C02DA9:
  .asciz "sending network start info...\n"

.L00C02E21:
  .asciz "TKMM_MMList_AllocBrkCat Fail\n"

.L00C02E22:
  .ascii "TKMM_MMList_AllocBrkCat: Non-Zero init %d %016llX %016ll"
  .asciz "X %016llX\n"

.L00C02E24:
  .asciz "TKMM_MMList_AllocBrk C, cat=%d\n"

.L00C02E25:
  .asciz "TKMM_MMList_AllocBrk C: Fail\n"

.L00C02E50:
  .asciz "Picked up the armor."

.L00C02E51:
  .asciz "Picked up the MegaArmor!"

.L00C02E52:
  .asciz "Picked up a health bonus."

.L00C02E53:
  .asciz "Picked up an armor bonus."

.L00C02E54:
  .asciz "Supercharge!"

.L00C02E55:
  .asciz "MegaSphere!"

.L00C02E56:
  .asciz "Picked up a blue keycard."

.L00C02E57:
  .asciz "Picked up a yellow keycard."

.L00C02E58:
  .asciz "Picked up a red keycard."

.L00C02E59:
  .asciz "Picked up a blue skull key."

.L00C02E5A:
  .asciz "Picked up a yellow skull key."

.L00C02E5B:
  .asciz "Picked up a red skull key."

.L00C02E5C:
  .asciz "Picked up a stimpack."

.L00C02E5D:
  .asciz "Picked up a medikit that you REALLY need!"

.L00C02E5E:
  .asciz "Picked up a medikit."

.L00C02E5F:
  .asciz "Invulnerability!"

.L00C02E60:
  .asciz "Berserk!"

.L00C02E61:
  .asciz "Partial Invisibility"

.L00C02E62:
  .asciz "Radiation Shielding Suit"

.L00C02E63:
  .asciz "Computer Area Map"

.L00C02E64:
  .asciz "Light Amplification Visor"

.L00C02E65:
  .asciz "Picked up a clip."

.L00C02E66:
  .asciz "Picked up a box of bullets."

.L00C02E67:
  .asciz "Picked up a rocket."

.L00C02E68:
  .asciz "Picked up a box of rockets."

.L00C02E69:
  .asciz "Picked up an energy cell."

.L00C02E6A:
  .asciz "Picked up an energy cell pack."

.L00C02E6B:
  .asciz "Picked up 4 shotgun shells."

.L00C02E6C:
  .asciz "Picked up a box of shotgun shells."

.L00C02E6D:
  .asciz "Picked up a backpack full of ammo!"

.L00C02E6E:
  .asciz "You got the BFG9000!  Oh, yes."

.L00C02E6F:
  .asciz "You got the chaingun!"

.L00C02E70:
  .asciz "A chainsaw!  Find some meat!"

.L00C02E71:
  .asciz "You got the rocket launcher!"

.L00C02E72:
  .asciz "You got the plasma gun!"

.L00C02E73:
  .asciz "You got the shotgun!"

.L00C02E74:
  .asciz "You got the super shotgun!"

.L00C02E75:
  .asciz "P_SpecialThing: Unknown gettable thing"

.L00C02E8D:
  .asciz "R_InitSpriteDefs: numsprites=%d\n"

.L00C02E8F:
  .asciz "R_InitSprites: No patches found for %s frame %c"

.L00C02E90:
  .asciz "R_InitSprites: Sprite %s frame %c is missing rotations"

.L00C02E9D:
  .asciz "You mumble to yourself"

.L00C02E9E:
  .asciz "Who's there?"

.L00C02E9F:
  .asciz "You scare yourself"

.L00C02EA0:
  .asciz "You start to rave"

.L00C02EA1:
  .asciz "You've lost it..."

.L00C02EA8:
  .asciz "Bad sfx #: %d"

.L00C02EA9:
  .asciz "S_StartSoundAtVolume: 16bit and not pre-cached - wtf?\n"

.L00C02F0B:
  .asciz " couldn't open %s\n"

.L00C02F0D:
  .asciz " adding %s\n"

.L00C02F0E:
  .asciz "wad"

.L00C02F0F:
  .asciz "IWAD"

.L00C02F10:
  .asciz "PWAD"

.L00C02F12:
  .asciz "    IW1 wlumps=%d\n"

.L00C02F19:
  .asciz "    IW wlumps=%d numlumps=%d\n"

.L00C02F1C:
  .asciz "WAD2"

.L00C02F1F:
  .asciz "    W2 wlumps=%d numlumps=%d\n"

.L00C02F20:
  .asciz "Wad file %s doesn't have IWAD, PWAD, or WAD2 id\n"

.L00C02F22:
  .asciz "Couldn't realloc lumpinfo"

.L00C02F23:
  .asciz "sizeof(*lump_p)=%d\n"

.L00C02F28:
  .asciz "    numlumps=%d\n"

.L00C02F41:
  .asciz "R_GenerateLookup: column without a patch (%s)\n"

.L00C02F42:
  .asciz "R_GenerateLookup: texture %i is >64k"

.L00C02F49:
  .asciz "INTERPIC"

.L00C02F4A:
  .asciz "WIMAP%d"

.L00C02F4B:
  .asciz "WI_loadData: A\n"

.L00C02F4C:
  .asciz "CWILV%2.2d"

.L00C02F4D:
  .asciz "WILV%d%d"

.L00C02F4E:
  .asciz "WI_loadData: A-1\n"

.L00C02F4F:
  .asciz "WIURH0"

.L00C02F50:
  .asciz "WIURH1"

.L00C02F51:
  .asciz "WISPLAT"

.L00C02F52:
  .asciz "WI_loadData: A-2\n"

.L00C02F53:
  .asciz "WIA%d%.2d%.2d"

.L00C02F54:
  .asciz "WI_loadData: B\n"

.L00C02F55:
  .asciz "WIMINUS"

.L00C02F56:
  .asciz "WINUM%d"

.L00C02F57:
  .asciz "WIPCNT"

.L00C02F58:
  .asciz "WIF"

.L00C02F59:
  .asciz "WIENTER"

.L00C02F5A:
  .asciz "WIOSTK"

.L00C02F5B:
  .asciz "WIOSTS"

.L00C02F5C:
  .asciz "WISCRT2"

.L00C02F5D:
  .asciz "WI_loadData: C\n"

.L00C02F5E:
  .asciz "WIOBJ"

.L00C02F5F:
  .asciz "WIOSTI"

.L00C02F60:
  .asciz "WIFRGS"

.L00C02F61:
  .asciz "WICOLON"

.L00C02F62:
  .asciz "WITIME"

.L00C02F63:
  .asciz "WISUCKS"

.L00C02F64:
  .asciz "WIPAR"

.L00C02F65:
  .asciz "WIKILRS"

.L00C02F66:
  .asciz "WIVCTMS"

.L00C02F67:
  .asciz "WIMSTT"

.L00C02F68:
  .asciz "STFST01"

.L00C02F69:
  .asciz "STFDEAD0"

.L00C02F6A:
  .asciz "WI_loadData: D\n"

.L00C02F6B:
  .asciz "STPB%d"

.L00C02F6C:
  .asciz "WIBP%d"

.L00C02F6D:
  .asciz "WI_loadData: E\n"

.L00C02F74:
  .asciz "fuck %d \r"

.L00C02F7B:
  .asciz "dxXuiop"

.L00C02F7C:
  .asciz "eEgGfF"

.L00C02F83:
  .asciz "\nNo such response file!"

.L00C02F84:
  .asciz "Found response file %s!\n"

.L00C02F85:
  .asciz "%d command-line args:\n"

.L00C02F8C:
  .asciz "Player 1 left the game"

.L00C02F8D:
  .asciz "Killed by network driver"

.L00C02F8E:
  .asciz "retransmit from %i\n"

.L00C02F8F:
  .asciz "out of order packet (%i + %i)\n"

.L00C02F90:
  .asciz "missed tics from %i (%i - %i)\n"

.L00C02F9D:
  .asciz "tk_rename: skip %s, newname mismatch\n"

.L00C02F9E:
  .asciz "tk_rename: skip %s, oldname mismatch\n"

.L00C02F9F:
  .asciz "tk_rename: skip %s, oldname no slash\n"

.L00C02FA0:
  .asciz "tk_rename: skip %s, newname no slash\n"

.L00C02FA1:
  .asciz "tk_rename: Fail old=%s new=%s mode=%s\n"

.L00C02FA8:
  .asciz "fopen3: intBuffer malloc fail\n"

.L00C02FAF:
  .asciz "P_NewChaseDir: called with no target"

.L00C02FB6:
  .asciz "Degreelessness Mode On"

.L00C02FB7:
  .asciz "Degreelessness Mode Off"

.L00C02FB8:
  .asciz "Ammo (no keys) Added"

.L00C02FB9:
  .asciz "Very Happy Ammo Added"

.L00C02FBA:
  .asciz "Music Change"

.L00C02FBB:
  .asciz "IMPOSSIBLE SELECTION"

.L00C02FBC:
  .asciz "No Clipping Mode ON"

.L00C02FBD:
  .asciz "No Clipping Mode OFF"

.L00C02FBE:
  .asciz "Power-up Toggled"

.L00C02FBF:
  .asciz "inVuln, Str, Inviso, Rad, Allmap, or Lite-amp"

.L00C02FC0:
  .asciz "... doesn't suck - GM"

.L00C02FC1:
  .asciz "ang=0x%8x;x,y=(0x%8x,0x%8x)"

.L00C02FC2:
  .asciz "Changing Level..."

.L00C02FC9:
  .asciz "Follow Mode ON"

.L00C02FCA:
  .asciz "Follow Mode OFF"

.L00C02FCB:
  .asciz "Grid ON"

.L00C02FCC:
  .asciz "Grid OFF"

.L00C02FCD:
  .asciz "%s %d"

.L00C02FCE:
  .asciz "Marked Spot"

.L00C02FCF:
  .asciz "All Marks Cleared"

.L00C02FDC:
  .asciz "_TagArray"

.L00C02FDD:
  .asciz "_Variant"

.L00C02FDE:
  .asciz "_String"

.L00C02FDF:
  .asciz "_WString"

.L00C02FE0:
  .asciz "_UString"

.L00C02FE1:
  .asciz "_ClassObj"

.L00C02FE2:
  .asciz "_Pointer"

.L00C02FE3:
  .asciz "_Byte"

.L00C02FE4:
  .asciz "_SByte"

.L00C02FE5:
  .asciz "_Short"

.L00C02FE6:
  .asciz "_UShort"

.L00C02FE7:
  .asciz "_Int"

.L00C02FE8:
  .asciz "_UInt"

.L00C02FE9:
  .asciz "_Long"

.L00C02FEA:
  .asciz "_ULong"

.L00C02FEB:
  .asciz "_Float"

.L00C02FEC:
  .asciz "_Double"

.L00C02FED:
  .asciz "_Int128"

.L00C02FEE:
  .asciz "_Float128"

.L00C02FEF:
  .asciz "_Fixnum"

.L00C02FF0:
  .asciz "_Flonum"

.L00C02FF1:
  .asciz "_TagObj"

.L00C02FF2:
  .asciz "_Cons"

.L00C02FF3:
  .asciz "_BigInt"

.L00C02FF4:
  .asciz "UTagArray;"

.L00C02FFB:
  .asciz "texture2"

.L00C03008:
  .asciz "(null)"

.L00C0301B:
  .asciz "tk_opendir: Fail %s\n"

.L00C03032:
  .asciz "R_DrawPlanes: drawsegs overflow (%i)"

.L00C03034:
  .asciz "R_DrawPlanes: visplane overflow (%i)"

.L00C03036:
  .asciz "R_DrawPlanes: opening overflow (%i)"

.L00C03055:
  .asciz "P_UnarchiveSpecials:Unknown tclass %i in savegame"

.L00C03062:
  .asciz "0"

.L00C03063:
  .asciz " "

.L00C03093:
  .asciz "R_StoreWallRange: MAXDRAWSEGS\n"

.L00C03095:
  .asciz "Bad R_RenderWallRange: %i to %i"

.L00C030A2:
  .ascii "P_AcsDoSpecialCmd: Unhandled sp=%d a1=%d a2=%d a3=%d a4="
  .asciz "%d a5=%d\n"

.L00C030A9:
  .asciz "%s/doom2lz.wad"

.L00C030AA:
  .asciz "%s/doom2.wad"

.L00C030AB:
  .asciz "%s/doomulz.wad"

.L00C030AC:
  .asciz "%s/doomu.wad"

.L00C030AD:
  .asciz "%s/doomlz.wad"

.L00C030AE:
  .asciz "%s/doom.wad"

.L00C030AF:
  .asciz "%s/doom1lz.wad"

.L00C030B0:
  .asciz "%s/doom1.wad"

.L00C030B1:
  .asciz "%s/plutonia.wad"

.L00C030B2:
  .asciz "%s/tnt.wad"

.L00C030B3:
  .asciz "%s/doom2f.wad"

.L00C030B4:
  .asciz "%s/heretic1.wad"

.L00C030B5:
  .asciz "%s/hexen.wad"

.L00C030B6:
  .asciz "./default.cfg"

.L00C030B7:
  .asciz "-shdev"

.L00C030B8:
  .asciz "devdatadoom1.wad"

.L00C030B9:
  .asciz "devmapsdata_se/texture1.lmp"

.L00C030BA:
  .asciz "devmapsdata_se/pnames.lmp"

.L00C030BB:
  .asciz "devdatadefault.cfg"

.L00C030BC:
  .asciz "-regdev"

.L00C030BD:
  .asciz "devdatadoom.wad"

.L00C030BE:
  .asciz "devmapsdata_se/texture2.lmp"

.L00C030BF:
  .asciz "-comdev"

.L00C030C0:
  .asciz "devdatadoom2.wad"

.L00C030C1:
  .asciz "devmapscdata/texture1.lmp"

.L00C030C2:
  .asciz "devmapscdata/pnames.lmp"

.L00C030C3:
  .asciz "French version\n"

.L00C030C4:
  .asciz "Game mode indeterminate.\n"

.L00C0310C:
  .asciz "W_InitMultipleFiles: A-1\n"

.L00C0310E:
  .asciz "W_InitMultipleFiles: A-2\n"

.L00C0310F:
  .asciz "W_InitFiles: no files found"

.L00C03112:
  .asciz "W_InitFiles: numlumps=%d\n"

.L00C03115:
  .asciz "PNAMES"

.L00C03117:
  .asciz "Couldn't allocate lumpcache"

.L00C03129:
  .asciz "I_InitSound: Skip\n"

.L00C0312A:
  .asciz "I_InitSound: "

.L00C0312B:
  .asciz " configured audio device\n"

.L00C0312E:
  .asciz " pre-cached all sound data\n"

.L00C0312F:
  .asciz "I_InitSound: sound module ready\n"

.L00C03136:
  .asciz "map0%i"

.L00C03137:
  .asciz "map%i"

.L00C03144:
  .asciz "STTNUM0"

.L00C03145:
  .asciz "STTNUM%d"

.L00C03146:
  .asciz "STYSNUM%d"

.L00C03147:
  .asciz "IN0"

.L00C03148:
  .asciz "IN%d"

.L00C03149:
  .asciz "SMALLIN%d"

.L00C0314A:
  .asciz "STTPRCNT"

.L00C0314B:
  .asciz "STKEYS%d"

.L00C0314C:
  .asciz "STARMS"

.L00C0314D:
  .asciz "STGNUM%d"

.L00C0314E:
  .asciz "STFB%d"

.L00C0314F:
  .asciz "STBAR"

.L00C03150:
  .asciz "STFST%d%d"

.L00C03151:
  .asciz "STFTR%d0"

.L00C03152:
  .asciz "STFTL%d0"

.L00C03153:
  .asciz "STFOUCH%d"

.L00C03154:
  .asciz "STFEVL%d"

.L00C03155:
  .asciz "STFKILL%d"

.L00C03156:
  .asciz "STFGOD0"

.L00C0315D:
  .asciz "-config"

.L00C0315E:
  .asciz "\tdefault file: %s\n"

.L00C0315F:
  .asciz "r"

.L00C03160:
  .asciz "%79s %[^\n]\n"

.L00C03161:
  .asciz "%x"

.L00C03162:
  .asciz "%i"

.L00C03169:
  .asciz "Bad Lindedef Size\n"

.L00C0316A:
  .asciz "sp=%d a1=%d a2=%d a3=%d a4=%d a5=%d\n"

.L00C0317C:
  .asciz "addsfx: Bad Slot %d\n"

.L00C0317D:
  .asciz "rightvol out of bounds"

.L00C0317E:
  .asciz "leftvol out of bounds"

.L00C0317F:
  .asciz "lvol=%d,%d\n"

.L00C03180:
  .asciz "rvol=%d,%d\n"

.L00C031A4:
  .asciz "R_InitTextures: Failed to load PNAMES"

.L00C031A5:
  .asciz "TEXTURE1"

.L00C031A6:
  .asciz "TEXTURE2"

.L00C031A7:
  .asciz "["

.L00C031A8:
  .asciz "]"

.L00C031A9:
  .asciz "\r["

.L00C031AA:
  .asciz "R_InitTextures: bad texture directory"

.L00C031AC:
  .asciz "R_InitTextures: %s -> %s\n"

.L00C031AD:
  .asciz "R_InitTextures: Missing patch in texture %s"

.L00C031B5:
  .asciz "R_ProjectSprite: invalid sprite number %i\n"

.L00C031B6:
  .asciz "R_ProjectSprite: invalid sprite frame %i : %i\n"

.L00C031BD:
  .asciz "You need a blue key to open this door"

.L00C031BE:
  .asciz "You need a yellow key to open this door"

.L00C031BF:
  .asciz "You need a red key to open this door"

.L00C031E4:
  .asciz "rb+"

.L00C031E5:
  .asciz "w+b"

.L00C031E6:
  .asciz "wb+"

.L00C031E7:
  .asciz "a+b"

.L00C031E8:
  .asciz "ab+"

.L00C031E9:
  .asciz "r+"

.L00C031EA:
  .asciz "w+"

.L00C031EB:
  .asciz "a+"

.L00C031EC:
  .asciz "ab"

.L00C031ED:
  .asciz "a"
.section .rodata

sprnames:
  .qword .L00C0110F
  .qword .L00C01110
  .qword .L00C01111
  .qword .L00C01112
  .qword .L00C01113
  .qword .L00C01114
  .qword .L00C01115
  .qword .L00C01116
  .qword .L00C01117
  .qword .L00C01118
  .qword .L00C01119
  .qword .L00C0111A
  .qword .L00C0111B
  .qword .L00C0111C
  .qword .L00C0111D
  .qword .L00C0111E
  .qword .L00C0111F
  .qword .L00C01120
  .qword .L00C01121
  .qword .L00C01122
  .qword .L00C01123
  .qword .L00C01124
  .qword .L00C01125
  .qword .L00C01126
  .qword .L00C01127
  .qword .L00C01128
  .qword .L00C01129
  .qword .L00C0112A
  .qword .L00C0112B
  .qword .L00C0112C
  .qword .L00C0112D
  .qword .L00C0112E
  .qword .L00C0112F
  .qword .L00C01130
  .qword .L00C01131
  .qword .L00C01132
  .qword .L00C01133
  .qword .L00C01134
  .qword .L00C01135
  .qword .L00C01136
  .qword .L00C01137
  .qword .L00C01138
  .qword .L00C01139
  .qword .L00C0113A
  .qword .L00C0113B
  .qword .L00C0113C
  .qword .L00C0113D
  .qword .L00C0113E
  .qword .L00C0113F
  .qword .L00C01140
  .qword .L00C01141
  .qword .L00C01142
  .qword .L00C01143
  .qword .L00C01144
  .qword .L00C01145
  .qword .L00C01146
  .qword .L00C01147
  .qword .L00C01148
  .qword .L00C01149
  .qword .L00C0114A
  .qword .L00C0114B
  .qword .L00C0114C
  .qword .L00C0114D
  .qword .L00C0114E
  .qword .L00C0114F
  .qword .L00C01150
  .qword .L00C01151
  .qword .L00C01152
  .qword .L00C01153
  .qword .L00C01154
  .qword .L00C01155
  .qword .L00C01156
  .qword .L00C01157
  .qword .L00C01158
  .qword .L00C01159
  .qword .L00C0115A
  .qword .L00C0115B
  .qword .L00C0115C
  .qword .L00C0115D
  .qword .L00C0115E
  .qword .L00C0115F
  .qword .L00C01160
  .qword .L00C01161
  .qword .L00C01162
  .qword .L00C01163
  .qword .L00C01164
  .qword .L00C01165
  .qword .L00C01166
  .qword .L00C01167
  .qword .L00C01168
  .qword .L00C01169
  .qword .L00C0116A
  .qword .L00C0116B
  .qword .L00C0116C
  .qword .L00C0116D
  .qword .L00C0116E
  .qword .L00C0116F
  .qword .L00C01170
  .qword .L00C01171
  .qword .L00C01172
  .qword .L00C01173
  .qword .L00C01174
  .qword .L00C01175
  .qword .L00C01176
  .qword .L00C01177
  .qword .L00C01178
  .qword .L00C01179
  .qword .L00C0117A
  .qword .L00C0117B
  .qword .L00C0117C
  .qword .L00C0117D
  .qword .L00C0117E
  .qword .L00C0117F
  .qword .L00C01180
  .qword .L00C01181
  .qword .L00C01182
  .qword .L00C01183
  .qword .L00C01184
  .qword .L00C01185
  .qword .L00C01186
  .qword .L00C01187
  .qword .L00C01188
  .qword .L00C01189
  .qword .L00C0118A
  .qword .L00C0118B
  .qword .L00C0118C
  .qword .L00C0118D
  .qword .L00C0118E
  .qword .L00C0118F
  .qword .L00C01190
  .qword .L00C01191
  .qword .L00C01192
  .qword .L00C01193
  .qword .L00C01194
  .qword .L00C01195
  .qword .L00C01196
  .qword .L00C01197
  .qword .L00C01198
  .qword 0x0000000000000000

french_shiftxform:
  .byte 0x00
  .byte 0x01
  .byte 0x02
  .byte 0x03
  .byte 0x04
  .byte 0x05
  .byte 0x06
  .byte 0x07
  .byte 0x08
  .byte 0x09
  .byte 0x0A
  .byte 0x0B
  .byte 0x0C
  .byte 0x0D
  .byte 0x0E
  .byte 0x0F
  .byte 0x10
  .byte 0x11
  .byte 0x12
  .byte 0x13
  .byte 0x14
  .byte 0x15
  .byte 0x16
  .byte 0x17
  .byte 0x18
  .byte 0x19
  .byte 0x1A
  .byte 0x1B
  .byte 0x1C
  .byte 0x1D
  .byte 0x1E
  .byte 0x1F
  .byte 0x20
  .byte 0x21
  .byte 0x22
  .byte 0x23
  .byte 0x24
  .byte 0x25
  .byte 0x26
  .byte 0x22
  .byte 0x28
  .byte 0x29
  .byte 0x2A
  .byte 0x2B
  .byte 0x3F
  .byte 0x5F
  .byte 0x3E
  .byte 0x3F
  .byte 0x30
  .byte 0x31
  .byte 0x32
  .byte 0x33
  .byte 0x34
  .byte 0x35
  .byte 0x36
  .byte 0x37
  .byte 0x38
  .byte 0x39
  .byte 0x2F
  .byte 0x2E
  .byte 0x3C
  .byte 0x2B
  .byte 0x3E
  .byte 0x3F
  .byte 0x40
  .byte 0x41
  .byte 0x42
  .byte 0x43
  .byte 0x44
  .byte 0x45
  .byte 0x46
  .byte 0x47
  .byte 0x48
  .byte 0x49
  .byte 0x4A
  .byte 0x4B
  .byte 0x4C
  .byte 0x4D
  .byte 0x4E
  .byte 0x4F
  .byte 0x50
  .byte 0x51
  .byte 0x52
  .byte 0x53
  .byte 0x54
  .byte 0x55
  .byte 0x56
  .byte 0x57
  .byte 0x58
  .byte 0x59
  .byte 0x5A
  .byte 0x5B
  .byte 0x21
  .byte 0x5D
  .byte 0x22
  .byte 0x5F
  .byte 0x27
  .byte 0x41
  .byte 0x42
  .byte 0x43
  .byte 0x44
  .byte 0x45
  .byte 0x46
  .byte 0x47
  .byte 0x48
  .byte 0x49
  .byte 0x4A
  .byte 0x4B
  .byte 0x4C
  .byte 0x4D
  .byte 0x4E
  .byte 0x4F
  .byte 0x50
  .byte 0x51
  .byte 0x52
  .byte 0x53
  .byte 0x54
  .byte 0x55
  .byte 0x56
  .byte 0x57
  .byte 0x58
  .byte 0x59
  .byte 0x5A
  .byte 0x7B
  .byte 0x7C
  .byte 0x7D
  .byte 0x7E
  .byte 0x7F
.section .utext

__utext_start:

__utext_end:
.section .udata

__udata_start:

__udata_end:
.section .data

__data_start:

__global_ptr:
  .qword __global_ptr

save_p:
  .resb 8

netbuffer:
  .resb 8

TU7A00C41B/f_w:
  .resb 4
  .balign 8

playeringame:
  .resb 16

TU7A00C41B/f_h:
  .resb 4
  .balign 8

sectors:
  .resb 8

colormaps:
  .resb 8

TU7A00C589/y:
  .resb 8

TU7A00CB85/wbs:
  .resb 8

lumpinfo:
  .resb 8

TU7A00CB73/plyr:
  .resb 8

dc_x:
  .resb 4

rw_x:
  .resb 4

corpsehit:
  .resb 8

sides:
  .resb 8

myargv:
  .resb 8

gamemode:
  .dword 0x00000006

dc_yl:
  .resb 4

doomcom:
  .resb 8

dc_yh:
  .resb 4

gametic:
  .resb 4

lines:
  .resb 8

TU7A00CB85/plrs:
  .resb 8

TU7A00C41B/m_x:
  .resb 4

TU7A00C41B/m_y:
  .resb 4

TU7A00C41B/scale_mtof:
  .dword 0x00003333

gameaction:
  .resb 4

consoleplayer:
  .resb 4

viewwidth:
  .resb 4

myargc:
  .resb 4

itemOn:
  .resb 2
  .balign 8

TU7A00C41B/fb:
  .resb 8

textureheight:
  .resb 8

demo_p:
  .resb 8

currentMenu:
  .resb 8

dc_source:
  .resb 8

numsectors:
  .resb 4

deathmatch:
  .resb 4

vertexes:
  .resb 8

spritememory:
  .resb 4

viewheight:
  .resb 4

dc_colormap:
  .resb 8

messageString:
  .resb 8

ds_p:
  .resb 8

lastanim:
  .resb 8

numlines:
  .resb 4

firstspritelump:
  .resb 4

dc_texturemid:
  .resb 4

eventtail:
  .resb 4

sprites:
  .resb 8

maxframe:
  .resb 4

gamemap:
  .resb 4

debugfile:
  .resb 8

finecosine:
  .resb 8

TU61F874B9/myfile:
  .resb 8

maketic:
  .resb 4

numlumps:
  .resb 4

dc_iscale:
  .resb 4

TU7A00CB85/bcnt:
  .resb 4

fuzzpos:
  .resb 4

AM_drawFline/fuck!56:
  .resb 4

TU7A00CA3E/s_channels:
  .resb 8

TU7A00C41B/lightlev:
  .resb 4

dc_scale:
  .resb 4

numspechit:
  .resb 4

viewwindowy:
  .resb 4

viewwindowx:
  .resb 4

ticdup:
  .resb 4

frontsector:
  .resb 8

leveltime:
  .resb 4

TU7A00C41B/f_x:
  .resb 4

spryscale:
  .resb 4

n_colormaps_alt:
  .resb 4

TU7A00C589/wipe_scr:
  .resb 8

linetarget:
  .resb 8

tmthing:
  .resb 8

TU7A00C41B/f_y:
  .resb 4

numChannels:
  .resb 4

netgame:
  .resb 4

TU61F874B9/modeType:
  .resb 4

AM_drawWalls/l!71:
  .resb 16

textures:
  .resb 8

tk_puts_gbltemp:
  .resb 8

R_GenerateLookup/patchcount!22:
  .resb 8

numtextures:
  .resb 4

skytexture:
  .resb 4

validcount:
  .dword 0x00000001

TU7A00C41B/m_x2:
  .resb 4

translationtables:
  .resb 8

TU7A00CB85/cnt_kills:
  .resb 16

TU7A00CB85/cnt_items:
  .resb 16

TU7A00CB85/dm_totals:
  .resb 16

snd_SfxVolume:
  .dword 0x0000000F
  .balign 8

TU7A00CB85/cnt_secret:
  .resb 16

texturememory:
  .resb 4
  .balign 8

mainzone:
  .resb 8

detailshift:
  .resb 4

displayplayer:
  .resb 4

intercept_p:
  .resb 8

vid_flashblend:
  .resb 4

gameepisode:
  .resb 4

TU7A00CB85/lnames:
  .resb 8

TU7A00CA82/plr:
  .resb 8

strace:
  .resb 16

backsector:
  .resb 8

rw_scale:
  .resb 4

gamestate:
  .resb 4

TU7A00CB85/dofrags:
  .resb 4

trace:
  .resb 16

numdefaults:
  .resb 4

nomonsters:
  .resb 4

scaledviewwidth:
  .resb 4

fixedcolormap:
  .resb 8

HU_Responder/num_nobrainers!42:
  .resb 4

respawnparm:
  .resb 4

TU7A00CB85/NUMANIMS:
  .dword 0x0000000A
  .dword 0x00000009
  .dword 0x00000006
  .dword 0x00000000

viewangle:
  .resb 4

bmaporgx:
  .resb 4

texturetranslation:
  .resb 8

p_acsvm_imgdat:
  .resb 8

colfunc:
  .resb 8

startmap:
  .resb 4

bmaporgy:
  .resb 4

TU7A00CB85/cnt_frags:
  .resb 16

startskill:
  .resb 4

TU7A00CB85/acceleratestage:
  .resb 4

startepisode:
  .resb 4

M_Drawer/y!120:
  .resb 2
  .balign 8

d_snd_acctime:
  .resb 8

flattranslation:
  .resb 8

ds_source:
  .resb 8

tmbbox:
  .resb 16

TU7A00CB85/me:
  .resb 4

p_map_hexenfmt:
  .resb 4

lastvisplane:
  .resb 8

TU7A00C41B/cheating:
  .resb 4

TU7A00C41B/m_w:
  .resb 4

lumpcache:
  .resb 8

curline:
  .resb 8

TU7A00C589/wipe_scr_start:
  .resb 8

centery:
  .resb 4

TU7A00C41B/m_h:
  .resb 4

advancedemo:
  .resb 4

topslope:
  .resb 4

TU7A00C41B/plr:
  .resb 8

TU7A00CB73/st_statusbaron:
  .resb 4

totallines:
  .resb 4

viewz:
  .resb 4

bottomslope:
  .resb 4

maskedtexturecol:
  .resb 8

TU7A00C589/wipe_scr_end:
  .resb 8

lastopening:
  .resb 8

TU7A00CB85/star:
  .resb 8

TU7A00CB73/st_fragscount:
  .resb 4

paused:
  .resb 4

TU7A00C41B/m_y2:
  .resb 4

bmapwidth:
  .resb 4

skyflatnum:
  .resb 4

TU7A00C41B/scale_ftom:
  .resb 4

automapactive:
  .resb 4

TU7A00CB85/ng_state:
  .resb 4

caststate:
  .resb 8

castnum:
  .resb 4

d_main_curtime:
  .resb 4

numsprites:
  .resb 4

gameskill:
  .resb 4

numsubsectors:
  .resb 4

numlinespecials:
  .resb 2
  .balign 8

blockmaplump:
  .resb 8

wallcolfunc:
  .resb 8

spritename:
  .resb 8

texturecompositesize:
  .resb 8

ceilingline:
  .resb 8

TU7A00CB85/sp_state:
  .resb 4

TU7A00CB73/st_faceindex:
  .resb 4

snd_MusicVolume:
  .dword 0x0000000F
  .balign 8

TU7A00CB73/keyboxes:
  .resb 16

rw_z:
  .resb 4
  .balign 8

forwardmove:
  .dword 0x00000019
  .dword 0x00000032

demoplayback:
  .resb 4

topfrac:
  .resb 4

bestslidefrac:
  .resb 4

imus_accdt:
  .resb 4

numbraintargets:
  .resb 4

rw_scalestep:
  .resb 4

TU7A00CB85/state:
  .resb 4
  .balign 8

tk_sprint_hex_n/chrs!2604:
  .qword .L00C00FD9

walllights:
  .resb 8

numflats:
  .resb 4

clipangle:
  .resb 4

ds_colormap:
  .resb 8

pixhigh:
  .resb 4

pixlow:
  .resb 4

tk_vf_freelist:
  .resb 8

ceilingplane:
  .resb 8

TU7A00C41B/m_paninc:
  .resb 8

bottomfrac:
  .resb 4

markfloor:
  .resb 4

markceiling:
  .resb 4

M_Drawer/x!120:
  .resb 2
  .balign 8

floorplane:
  .resb 8

TU61F874B9/modus:
  .resb 8

tk_print_hex_n/chrs!1792:
  .qword .L00C00FD9

p_acsvm_nrun:
  .resb 4

eventhead:
  .resb 4

vissprite_p:
  .resb 8

numsides:
  .resb 4

bmapheight:
  .resb 4

chat_on:
  .resb 4

menuactive:
  .resb 4

TU7A00CA82/chat_dest:
  .resb 8

demorecording:
  .resb 4
  .balign 8

i_dibinfo:
  .resb 8

TU7A00CB85/cnt_pause:
  .resb 4

p_acsvm_scr_num:
  .resb 4

TU61F874B9/tk_open_reclim:
  .resb 4

numnodes:
  .resb 4

tkdfs_utf_combchn:
  .resb 8

mfloorclip:
  .resb 8

bottomtexture:
  .resb 4

toptexture:
  .resb 4

TU7A00CB85/colon:
  .resb 8

centerxfrac:
  .resb 4

TU7A00CB85/NUMCMAPS:
  .resb 4

TU7A00C41B/max_y:
  .resb 4

TU7A00C41B/followplayer:
  .dword 0x00000001

mceilingclip:
  .resb 8

rw_zstep:
  .resb 4

TU7A00C41B/max_x:
  .resb 4

finaletext:
  .resb 8

mousebuttons:
  .resb 8

rw_stopx:
  .resb 4

numvertexes:
  .resb 4

sightzstart:
  .resb 4

screenblocks:
  .resb 4

spritewidth:
  .resb 8

TU7A00CA3E/mus_playing:
  .resb 8

TU7A00C41B/min_y:
  .resb 4

TU61F874B9/err:
  .resb 4

demosequence:
  .resb 4

i_hDc:
  .resb 4

i_smus_tt:
  .resb 4

mouseSensitivity:
  .resb 4

segs:
  .resb 8

TU7A00C41B/min_x:
  .resb 4

totalsecret:
  .resb 4

midtexture:
  .resb 4

detailLevel:
  .resb 4

TU1EAB6C11/tkgdi_smallbuf_ifmt:
  .resb 8

worldtop:
  .resb 4

planeheight:
  .resb 4

finaleflat:
  .resb 8

tmfloorz:
  .resb 4

attackrange:
  .resb 4

rw_offset:
  .resb 4

hSndDev:
  .resb 4

colormaps_blend:
  .resb 8

texturecolumnofs:
  .resb 8

TU7A00CB73/st_facecount:
  .resb 4

ST_updateFaceWidget/priority!54:
  .resb 4

shootz:
  .resb 4

TU7A00CA82/message_counter:
  .resb 4

i_snd_info:
  .resb 8

W_ReadLump/tcbuf!126:
  .resb 8

joybuttons:
  .resb 8

screens_zbuf:
  .resb 8

spriteoffset:
  .resb 8

bulletslope:
  .resb 4

maskedtexture:
  .resb 4

texturecolumnlump:
  .resb 8

W_ReadLump/tdbuf!126:
  .resb 8

nodes:
  .resb 8

viewx:
  .resb 4

btshx_tk_nhandles:
  .dword 0x00000003

dc_zdist:
  .resb 4

locale_id:
  .resb 2

st_diddraweven:
  .resb 1
  .balign 4

flatmemory:
  .resb 4

TU7A00CA82/message_on:
  .resb 4

spritetopoffset:
  .resb 8

sprtopscreen:
  .resb 4

viewy:
  .resb 4

tkdfs_utf_splitchn:
  .resb 8

saveCharIndex:
  .resb 4
  .balign 8

sidemove:
  .dword 0x00000018
  .dword 0x00000028

usegamma:
  .resb 4
  .balign 8

TU7A00CB85/splat:
  .resb 8

showMessages:
  .resb 4

d_main_lasttime:
  .resb 4

saveSlot:
  .resb 4

finalecount:
  .resb 4

newend:
  .resb 8

subsectors:
  .resb 8

sidedef:
  .resb 8

numspritelumps:
  .resb 4

quickSaveSlot:
  .resb 4

centeryfrac:
  .resb 4

firstflat:
  .resb 4

TU7A00CB85/cnt:
  .resb 4

TU7A00CB85/dm_state:
  .resb 4

numswitches:
  .resb 4

extralight:
  .resb 4

patchcache:
  .resb 8

rw_midtexturemid:
  .resb 4

savegameslot:
  .resb 4

numsegs:
  .resb 4

worldlow:
  .resb 4

demobuffer:
  .resb 8

rndindex:
  .resb 4

openrange:
  .resb 4

r_ispolyobj:
  .resb 1

dc_isspr:
  .resb 1
  .balign 4

openbottom:
  .resb 4

TKMM_PageAlloc_f:
  .resb 8

R_DrawFuzzColumn/fuzzseed!25:
  .resb 8

aimslope:
  .resb 4

tmymove:
  .resb 4

TU7A00CA82/message_nottobefuckedwith:
  .resb 4

iquetail:
  .resb 4

tk_print_hex/chrs!1788:
  .qword .L00C00FD9

tmceilingz:
  .resb 4

fastparm:
  .resb 4

M_Responder/lastx!112:
  .resb 4

w_m_openfiles:
  .resb 4

slidemo:
  .resb 8

screen_fbuf:
  .resb 8

rw_bottomtexturemid:
  .resb 4

i_mus_song_mask:
  .resb 4

pagename:
  .resb 8

TU61F874B9/tk_opendir_reclim:
  .resb 4

opentop:
  .resb 4

M_Responder/mousewait!112:
  .resb 4

reloadlump:
  .resb 4

tk_lva_strbuf_buf:
  .resb 8

singledemo:
  .resb 4

rw_toptexturemid:
  .resb 4

basecolfunc:
  .resb 8

worldhigh:
  .resb 4

tmxmove:
  .resb 4

pspriteiscale:
  .resb 4

locale_flags:
  .resb 4

M_Responder/mousex!112:
  .resb 4

rw_distance:
  .resb 4

TU7A00CB85/items:
  .resb 8

usething:
  .resb 8

joyxmove:
  .resb 4

casttics:
  .resb 4

key_left:
  .resb 4

tkmm_lva_ntag:
  .resb 4

ds_xstep:
  .resb 4

t2x:
  .resb 4

ds_ystep:
  .resb 4

p_acsvm_strs_num:
  .resb 4

castframes:
  .resb 4

t2y:
  .resb 4

_ctype_toup:
  .resb 8

spritelights:
  .resb 8

dc_color:
  .resb 8

rejectmatrix:
  .resb 8

viewactive:
  .resb 4

M_Responder/joywait!112:
  .resb 4

_ctype_tolow:
  .resb 8

genmidi:
  .resb 8

lightlevel:
  .resb 4

lastspritelump:
  .resb 4

netdemo:
  .resb 4

pagetic:
  .resb 4

screenSize:
  .resb 4

key_right:
  .resb 4

screen:
  .resb 8

ST_updateFaceWidget/lastattackdown!54:
  .dword 0xFFFFFFFF

colormaps_blend_len:
  .resb 4

texturewidthmask:
  .resb 8

reloadname:
  .resb 8

TU7A00CB85/cnt_time:
  .resb 4

worldbottom:
  .resb 4

finalestage:
  .resb 4

mousebforward:
  .resb 4

TU7A00CB85/bstar:
  .resb 8

shiftxform:
  .resb 8

TU7A00CB85/yah:
  .resb 16

TU7A00CB85/cnt_par:
  .resb 4

TU7A00CA3E/mus_paused:
  .resb 4

tk_vf_mount:
  .resb 8

segtextured:
  .resb 4

TU7A00C41B/f_oldloc:
  .resb 8

wipegamestate:
  .dword 0x00000003

M_Responder/mousey!112:
  .resb 4

TU7A00CB73/st_armson:
  .resb 4

iquehead:
  .resb 4

secretexit:
  .resb 4

TU7A00CB73/st_firsttime:
  .resb 4

ds_x1:
  .resb 4

shootthing:
  .resb 8

singletics:
  .resb 4

M_Responder/lasty!112:
  .resb 4

devparm:
  .resb 4

mousebstrafe:
  .resb 4

autostart:
  .resb 4

centerx:
  .resb 4

joybstrafe:
  .resb 4

usergame:
  .resb 4

nodeforplayer:
  .resb 16

joybuse:
  .resb 4

pixlowstep:
  .resb 4

key_strafeleft:
  .resb 4

key_down:
  .resb 4

rw_normalangle:
  .resb 4

addsfx/handlenums!18:
  .resb 2
  .balign 8

TU7A00CB85/kills:
  .resb 8

linedef:
  .resb 8

texturecomposite:
  .resb 8

bottomstep:
  .resb 4

key_fire:
  .resb 4

key_up:
  .resb 4

key_strafe:
  .resb 4

skytexturemid:
  .resb 4
  .balign 8

HU_Responder/destination_keys!42:
  .byte 0x67
  .byte 0x69
  .byte 0x62
  .byte 0x72
  .balign 8

TU7A00CB85/entering:
  .resb 8

tk_ralloc_bufs:
  .resb 8

rw_centerangle:
  .resb 4

joybspeed:
  .resb 4

viewplayer:
  .resb 8

key_straferight:
  .resb 4

key_use:
  .resb 4

bodyqueslot:
  .resb 4

topstep:
  .resb 4

key_speed:
  .resb 4

message_dontfuckwithme:
  .resb 4

mousebfire:
  .resb 4

dc_baseluma:
  .resb 2
  .balign 8

TU1EAB6C11/tkgdi_smallbuf_ofmt:
  .resb 8

planezlight:
  .resb 8

tk_ralloc_bufr:
  .resb 8

dclicks:
  .resb 4

joybfire:
  .resb 4

TU7A00C41B/markpointnum:
  .resb 4

skiptics:
  .resb 4

savebuffer:
  .resb 8

R_DrawFuzzColumnLow/fuzzseed!27:
  .resb 8

deathmatch_p:
  .resb 8

pixhighstep:
  .resb 4

ds_x2:
  .resb 4

dc_translation:
  .resb 8

blocklinks:
  .resb 8

ds_y:
  .resb 4
  .balign 8

frameskip:
  .resb 16

D_Display/borderdrawcount!18:
  .resb 4

TU7A00C41B/ftom_zoommul:
  .resb 4

TU7A00C41B/min_scale_mtof:
  .resb 4

TU7A00CA82/head:
  .resb 4

AM_drawPlayers/their_colors!79:
  .dword 0x00000070
  .dword 0x00000060
  .dword 0x00000040
  .dword 0x000000B0

skullAnimCounter:
  .resb 2
  .balign 8

TU7A00CB85/sucks:
  .resb 8

i_smus_cs:
  .resb 8

inhelpscreens:
  .resb 4

levelTimeCount:
  .resb 4

_ctype_isbuf:
  .resb 8

castattacking:
  .resb 4

TU7A00CA82/always_off:
  .resb 4

dclicktime2:
  .resb 4

TU7A00C41B/mtof_zoommul:
  .resb 4

tkmm_lva_clsinfo:
  .resb 8

spanfunc:
  .resb 8

castonmelee:
  .resb 4
  .balign 8

maxammo:
  .dword 0x000000C8
  .dword 0x00000032
  .dword 0x0000012C
  .dword 0x00000032

ds_baseluma:
  .resb 2
  .balign 8

tk_lva_strbuf_pos:
  .resb 8

fuzzcolfunc:
  .resb 8

TU7A00CB85/secret:
  .resb 8

TU7A00CB85/total:
  .resb 8

bombspot:
  .resb 8

TU7A00CB85/frags:
  .resb 8

dclicktime:
  .resb 4

TU7A00C41B/max_scale_mtof:
  .resb 4

I_SubmitSound2/mixbuf2!42:
  .resb 8

gfxdrv_kill:
  .resb 4

saveStringEnter:
  .resb 4

TU7A00CB85/wiminus:
  .resb 8

TU7A00CB85/percent:
  .resb 8

onground:
  .resb 4

tkmm_mmlist_n_vrm:
  .resb 4

dclicks2:
  .resb 4

dc_col:
  .resb 4

usejoystick:
  .resb 4

TU7A00CA82/tail:
  .resb 4

usemouse:
  .resb 4

tmdropoffz:
  .resb 4

TU7A00CB85/finished:
  .resb 8

messageToPrint:
  .resb 4

mousex:
  .resb 4

transcolfunc:
  .resb 8

TU7A00CB73/st_oldhealth:
  .dword 0xFFFFFFFF

castdeath:
  .resb 4

viletryx:
  .resb 4

braintargeton:
  .resb 4

TU7A00C589/go:
  .resb 4

st_oddframe:
  .resb 1
  .balign 8

TU7A00CB85/killers:
  .resb 8

TU7A00CB85/par:
  .resb 8

setsizeneeded:
  .resb 4

TU7A00CB73/st_stopped:
  .dword 0x00000001

tkmm_lvatyi_long:
  .resb 4

la_damage:
  .resb 4

turnheld:
  .resb 4

sendpause:
  .resb 4

totalkills:
  .resb 4

rw_angle1:
  .resb 4

TU7A00CB85/sp_secret:
  .resb 8

tmflags:
  .resb 4

TU7A00C41B/grid:
  .resb 4

_malloc_fptr:
  .resb 8

defaultfile:
  .resb 8

TU7A00CB85/victims:
  .resb 8

AM_Responder/bigstate!33:
  .resb 4

gametime:
  .resb 4

utxcache:
  .resb 8

tmx:
  .resb 4

viewcos:
  .resb 4

W_ReadLump/tcsize!126:
  .resb 4

HU_Responder/shiftdown!42:
  .resb 4

totalitems:
  .resb 4

viletryy:
  .resb 4

tk_clib_iface_list:
  .resb 8

sprcolfunc:
  .resb 8

dclickstate:
  .resb 4

whichSkull:
  .resb 2

r_usezbuff:
  .resb 1
  .balign 8

tmpnam/buf!387:
  .byte 0x00
  .balign 4

pspritescale:
  .resb 4

lowfloor:
  .resb 4

d_snd_curtime:
  .resb 4

setblocks:
  .resb 4

levelTimer:
  .resb 4

prndindex:
  .resb 4

AM_Start/lastlevel!24:
  .dword 0xFFFFFFFF

sendsave:
  .resb 4

r_subseccnt:
  .resb 4

joyymove:
  .resb 4

TU7A00CB73/lu_palette:
  .resb 4

dclickstate2:
  .resb 4
  .balign 8

TU7A00CB85/wi_time:
  .resb 8

viewsin:
  .resb 4
  .balign 8

sightcounts:
  .resb 8

st_didsbar:
  .resb 1

rw_wall_isclip:
  .resb 1
  .balign 4

tmy:
  .resb 4

mousey:
  .resb 4

tkmm_lvatyi_ulong:
  .resb 4

angleturn:
  .dword 0x00000280
  .dword 0x00000500
  .dword 0x00000140
  .balign 8

TU7A00CB85/bg:
  .resb 8

TU61F874B9/tkmm_is_init:
  .resb 4

framecount:
  .resb 4

messageRoutine:
  .resb 8

D_Display/fullscreen!18:
  .resb 4

tkmm_lvatyi_sbyte:
  .resb 4

imus_curms:
  .resb 4

frameon:
  .resb 4

lumpcache_head:
  .resb 8

bestslideline:
  .resb 8

__stdout:
  .resb 8

__stderr:
  .resb 8

TU7A00CB73/st_clock:
  .resb 4

TU7A00C41B/amclock:
  .resb 4

TK_GetTimeMs/usecbase!2589:
  .resb 8

nodrawers:
  .resb 4

i_sound_init:
  .resb 4

D_Display/inhelpscreensstate!18:
  .resb 4

starttime:
  .resb 4

A_BrainSpit/easy!143:
  .resb 4

floatok:
  .resb 4

TU7A00CB85/snl_pointeron:
  .resb 4

TU7A00C41B/stopped:
  .dword 0x00000001

i_mus_curhandle:
  .resb 4

epi:
  .resb 4

I_SMus_ParseEvent/ld1!20:
  .resb 4

TU7A00CA82/headsupactive:
  .resb 4

TU7A00C41B/old_m_y:
  .resb 4

maxsend:
  .resb 4

bombdamage:
  .resb 4

F_BunnyScroll/laststage!43:
  .resb 4

screens_base:
  .resb 8

ds_yfrac:
  .resb 4

tkmm_lvatyi_double:
  .resb 4

nofit:
  .resb 4

tkmm_lvatyi_variant:
  .resb 4

tk_lva_strbuf_end:
  .resb 8

messageLastMenuActive:
  .resb 4

TU7A00C41B/old_m_x:
  .resb 4

AM_Start/lastepisode!24:
  .dword 0xFFFFFFFF

sscount:
  .resb 4

TU7A00CB73/tallpercent:
  .resb 8

TU7A00CB73/st_palette:
  .resb 4

tkmm_lvatyi_byte:
  .resb 4

TU7A00CB73/st_msgcounter:
  .resb 4

basexscale:
  .resb 4

colormaps_blend_flash:
  .resb 4

precache:
  .dword 0x00000001

ST_calcPainOffset/lastcalc!27:
  .resb 4

TU61F874B9/spareSpot:
  .resb 4

respawnmonsters:
  .resb 4

tkmm_lvatyi_ushort:
  .resb 4

defdemoname:
  .resb 8

TU7A00CB73/st_gamestate:
  .resb 4

D_Display/viewactivestate!18:
  .resb 4

TKMM_PageFree_f:
  .resb 8

ds_xfrac:
  .resb 4

reboundpacket:
  .resb 4

colormaps_blend_base:
  .resb 8

tkmm_lvatyi_float:
  .resb 4

TU7A00CB73/st_fragson:
  .resb 4

TU7A00C41B/old_m_h:
  .resb 4
  .balign 8

dirtybox:
  .resb 16

D_Display/oldgamestate!18:
  .dword 0xFFFFFFFF

tkmm_lvatyi_uint:
  .resb 4

TU7A00C41B/old_m_w:
  .resb 4
  .balign 8

__stdin:
  .resb 8

TU7A00C73C/iss_curms:
  .resb 4

TU7A00CB73/st_randomnumber:
  .resb 4

tkmm_lvatyi_pointer:
  .resb 4

projection:
  .resb 4

tkmm_lvatyi_int:
  .resb 4

tkmm_lvatyi_short:
  .resb 4

_msize_fptr:
  .resb 8

tkmm_mmlist_brkpos_init:
  .resb 4

D_Display/menuactivestate!18:
  .resb 4

cheat_mus:
  .qword cheat_mus_seq
  .qword 0x0000000000000000

statcopy:
  .resb 8

noblit:
  .resb 4

TU7A00C41B/max_h:
  .resb 4

d_episode:
  .resb 4

W_ReadLump/tdsize!126:
  .resb 4

imus_lastms:
  .resb 4

i_mus_curpos:
  .resb 4

viewangleoffset:
  .resb 4

ST_calcPainOffset/oldhealth!27:
  .dword 0xFFFFFFFF

i_smus_cse:
  .resb 8

bombsource:
  .resb 8

tk_ralloc_bufe:
  .resb 8

TU7A00C41B/max_w:
  .resb 4

TU61F874B9/inreopen:
  .resb 4

TU61F874B9/myseed:
  .qword 0x0000000000000001

TU61F874B9/fnm:
  .resb 8

timingdemo:
  .resb 4

tkmm_lvatyi_float128:
  .resb 4

_msettag_fptr:
  .resb 8

tkmm_lvatyi_fixnum:
  .resb 4

d_skill:
  .resb 4

vid_lastscreen:
  .resb 8

tkmm_lvatyi_tagobj:
  .resb 4

modifiedgame:
  .resb 4

tk_fsty_root:
  .resb 8

tkmm_lvatyi_bigint:
  .resb 4

tkmm_lvatyi_wstring:
  .resb 4

TU7A00CA3E/s_init_wasinit:
  .dword 0x0000013A

d_map:
  .resb 4

TU7A00C419/firsttime:
  .dword 0x00000001

st_firsttime_last:
  .resb 1
  .balign 8

fakelines:
  .resb 8

screen_tmp:
  .resb 8

c1text:
  .qword .L00C00FDA

_realloc_fptr:
  .resb 8

TKMM_MmapF:
  .resb 8

TU7A00CB73/st_oldchat:
  .resb 4

setdetail:
  .resb 4

cheat_clev:
  .qword cheat_clev_seq
  .qword 0x0000000000000000

_mfreezone_fptr:
  .resb 8

d_snd_lasttime:
  .resb 4

TryRunTics/oldentertics!58:
  .resb 4

mousearray:
  .resb 16

tkmm_lva_clsvt:
  .resb 8

earlyout:
  .resb 4

lastflat:
  .resb 4

tk_mnt_freelist:
  .resb 8

blockmap:
  .resb 8

TU61F874B9/tk_vf_init:
  .resb 4

TU7A00C7AE/i_lastframems:
  .resb 4

tkmm_lvatyi_string:
  .resb 4

tkmm_lvatyi_int128:
  .resb 4

sttminus:
  .resb 8

TU7A00CB73/st_notdeathmatch:
  .resb 4

i_mus_pause:
  .resb 4

tkmm_lvatyi_classobj:
  .resb 4

tkmm_lvatyi_flonum:
  .resb 4

clipammo:
  .dword 0x0000000A
  .dword 0x00000004
  .dword 0x00000014
  .dword 0x00000001

_mgetzone_fptr:
  .resb 8

soundtarget:
  .resb 8

TU7A00CB73/armsbg:
  .resb 8

tkmm_lvatyi_cons:
  .resb 4

AM_drawMline/fl!57:
  .resb 16

oldnettics:
  .resb 4

baseyscale:
  .resb 4

TRACEANGLE:
  .dword 0x0C000000

tkmm_lvatyi_ustring:
  .resb 4

tkmm_lvatyi_tagarray:
  .resb 4

language:
  .resb 4

r_activepolyobj:
  .resb 1
  .balign 8

tkmm_lva_freebigint:
  .resb 8

TU7A00CB73/statusbar:
  .resb 8

i_smus_css:
  .resb 8

_msetzone_fptr:
  .resb 8

crushchange:
  .resb 4

TU7A00C73C/iss_lastms:
  .resb 4

tkmm_lva_tagbinop:
  .resb 8

_mgetbase_fptr:
  .resb 8

trigline:
  .resb 8

HU_Responder/altdown!42:
  .resb 4

TU7A00C408/m_softdiv_init:
  .resb 4

_mgettag_fptr:
  .resb 8

r_nseenpolyobj:
  .resb 4

messageNeedsInput:
  .resb 4

TU7A00CB73/faceback:
  .resb 8

demoend:
  .resb 8

HUlib_eraseTextLine/lastautomapactive!19:
  .dword 0x00000001

TU7A00CB73/st_chat:
  .resb 4

cheat_god:
  .qword cheat_god_seq
  .qword 0x0000000000000000

e1text:
  .qword .L00C00FDB

ds_color:
  .resb 8

TU7A00C41B/min_h:
  .resb 4

vid_scr_vlf:
  .resb 4

cheat_choppers:
  .qword cheat_choppers_seq
  .qword 0x0000000000000000

colormaps_blend_ix:
  .resb 4

AM_Stop/st_notify!22:
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x616D7800
  .dword 0x00000000

TU7A00C41B/min_w:
  .resb 4

cheat_ammo:
  .qword cheat_ammo_seq
  .qword 0x0000000000000000

vid_scr_vbot:
  .resb 8

ST_updateWidgets/largeammo!57:
  .dword 0x000007CA

i_soundframe_ms:
  .resb 4

c4text:
  .qword .L00C00FDC

cheat_mypos:
  .qword cheat_mypos_seq
  .qword 0x0000000000000000

TU1EAB6C11/tkgdi_current_context:
  .resb 8

vid_scr_vtop:
  .resb 8

cheat_commercial_noclip:
  .qword cheat_commercial_noclip_seq
  .qword 0x0000000000000000

TU7A00C41B/cheat_amap:
  .qword TU7A00C41B/cheat_amap_seq
  .qword 0x0000000000000000

TKMM_MunmapF:
  .resb 8

c6text:
  .qword .L00C00FDD

TU7A00CB73/st_cursoron:
  .resb 4

AM_initVariables/st_notify!15:
  .dword 0x00000001
  .dword 0x616D6500
  .dword 0x00000000
  .dword 0x00000000

p_acsvm_imgsz:
  .resb 4

R_FillBackScreen/name2!80:
  .qword .L00C00FDE

c5text:
  .qword .L00C00FDF

e2text:
  .qword .L00C00FE0

TKMM_MSyncF:
  .resb 8

TU7A00CB85/firstrefresh:
  .resb 4

TU7A00CA3E/nextcleanup:
  .resb 4

cheat_noclip:
  .qword cheat_noclip_seq
  .qword 0x0000000000000000

cheat_ammonokey:
  .qword cheat_ammonokey_seq
  .qword 0x0000000000000000

mb_used:
  .dword 0x00000014

vid_scr_vrt:
  .resb 4

secondslideline:
  .resb 8

_free_fptr:
  .resb 8

c2text:
  .qword .L00C00FE1

e3text:
  .qword .L00C00FE2

c3text:
  .qword .L00C00FE3

TU7A00CB73/st_chatstate:
  .resb 4

__errno:
  .resb 4

R_FillBackScreen/name1!80:
  .qword .L00C00FE4

TKMM_MProtectF:
  .resb 8

levelstarttic:
  .resb 4

I_SMus_ParseEvent/ld0!20:
  .resb 4

emptycmd:
  .resb 8

vileobj:
  .resb 8

e4text:
  .qword .L00C00FE5

AM_Responder/cheatstate!33:
  .resb 4

TU7A00CB73/veryfirsttime:
  .dword 0x00000001

TU7A00C41B/finit_height:
  .dword 0x000000A8

TU7A00C41B/leveljuststarted:
  .dword 0x00000001

TU7A00C41B/finit_width:
  .dword 0x00000140

ds_z:
  .resb 4

secondslidefrac:
  .resb 4

p_acsvm_newmap:
  .resb 4

cheat_powerup_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0x6E
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0xEA
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0xB2
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0x6A
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0xA2
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0x36
  .byte 0xFF
  .byte 0xB2
  .byte 0x26
  .byte 0x62
  .byte 0xA6
  .byte 0x32
  .byte 0xF6
  .byte 0x36
  .byte 0x26
  .byte 0xFF
  .byte 0x00
  .balign 8

skullName:
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x4B
  .byte 0x55
  .byte 0x4C
  .byte 0x4C
  .byte 0x31
  .byte 0x00
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x4B
  .byte 0x55
  .byte 0x4C
  .byte 0x4C
  .byte 0x32
  .byte 0x00
  .balign 8

msgNames:
  .byte 0x4D
  .byte 0x5F
  .byte 0x4D
  .byte 0x53
  .byte 0x47
  .byte 0x4F
  .byte 0x46
  .byte 0x46
  .byte 0x00
  .byte 0x4D
  .byte 0x5F
  .byte 0x4D
  .byte 0x53
  .byte 0x47
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .balign 8

detailNames:
  .byte 0x4D
  .byte 0x5F
  .byte 0x47
  .byte 0x44
  .byte 0x48
  .byte 0x49
  .byte 0x47
  .byte 0x48
  .byte 0x00
  .byte 0x4D
  .byte 0x5F
  .byte 0x47
  .byte 0x44
  .byte 0x4C
  .byte 0x4F
  .byte 0x57
  .byte 0x00
  .byte 0x00
  .balign 8

TU7A00CB85/wi_anims:
  .qword TU7A00CB85/epsd0animinfo
  .qword TU7A00CB85/epsd1animinfo
  .qword TU7A00CB85/epsd2animinfo
  .qword 0x0000000000000000

LoadDef:
  .word 0x0006
  .balign 8
  .qword MainDef
  .qword LoadMenu
  .qword M_DrawLoad
  .word 0x0050
  .word 0x0036
  .word 0x0000
  .balign 8

MainDef:
  .word 0x0006
  .balign 8
  .qword 0x0000000000000000
  .qword MainMenu
  .qword M_DrawMainMenu
  .word 0x0061
  .word 0x0040
  .word 0x0000
  .balign 8

OptionsDef:
  .word 0x0008
  .balign 8
  .qword MainDef
  .qword OptionsMenu
  .qword M_DrawOptions
  .word 0x003C
  .word 0x0025
  .word 0x0000
  .balign 8

ReadDef1:
  .word 0x0001
  .balign 8
  .qword MainDef
  .qword ReadMenu1
  .qword M_DrawReadThis1
  .word 0x0118
  .word 0x00B9
  .word 0x0000
  .balign 8

weaponinfo:
  .dword 0x00000005
  .dword 0x00000004
  .dword 0x00000003
  .dword 0x00000002
  .dword 0x00000005
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000C
  .dword 0x0000000B
  .dword 0x0000000A
  .dword 0x0000000D
  .dword 0x00000011
  .dword 0x00000001
  .dword 0x00000014
  .dword 0x00000013
  .dword 0x00000012
  .dword 0x00000015
  .dword 0x0000001E
  .dword 0x00000000
  .dword 0x00000033
  .dword 0x00000032
  .dword 0x00000031
  .dword 0x00000034
  .dword 0x00000037
  .dword 0x00000003
  .dword 0x0000003B
  .dword 0x0000003A
  .dword 0x00000039
  .dword 0x0000003C
  .dword 0x0000003F
  .dword 0x00000002
  .dword 0x0000004C
  .dword 0x0000004B
  .dword 0x0000004A
  .dword 0x0000004D
  .dword 0x0000004F
  .dword 0x00000002
  .dword 0x00000053
  .dword 0x00000052
  .dword 0x00000051
  .dword 0x00000054
  .dword 0x00000058
  .dword 0x00000005
  .dword 0x00000046
  .dword 0x00000045
  .dword 0x00000043
  .dword 0x00000047
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000022
  .dword 0x00000021
  .dword 0x00000020
  .dword 0x00000023
  .dword 0x0000002F

SoundDef:
  .word 0x0004
  .balign 8
  .qword OptionsDef
  .qword SoundMenu
  .qword M_DrawSound
  .word 0x0050
  .word 0x0040
  .word 0x0000
  .balign 8

NewDef:
  .word 0x0005
  .balign 8
  .qword EpiDef
  .qword NewGameMenu
  .qword M_DrawNewGame
  .word 0x0030
  .word 0x003F
  .word 0x0002
  .balign 8

EpiDef:
  .word 0x0004
  .balign 8
  .qword MainDef
  .qword EpisodeMenu
  .qword M_DrawEpisode
  .word 0x0030
  .word 0x003F
  .word 0x0000
  .balign 8

ReadDef2:
  .word 0x0001
  .balign 8
  .qword ReadDef1
  .qword ReadMenu2
  .qword M_DrawReadThis2
  .word 0x014A
  .word 0x00AF
  .word 0x0000
  .balign 8

xspeed:
  .dword 0x00010000
  .dword 0x0000B798
  .dword 0x00000000
  .dword 0xFFFF4868
  .dword 0xFFFF0000
  .dword 0xFFFF4868
  .dword 0x00000000
  .dword 0x0000B798

quitsounds2:
  .dword 0x00000050
  .dword 0x0000005D
  .dword 0x0000005F
  .dword 0x0000001F
  .dword 0x00000038
  .dword 0x00000048
  .dword 0x0000004E
  .dword 0x00000034

quitsounds:
  .dword 0x00000039
  .dword 0x0000001A
  .dword 0x0000001B
  .dword 0x0000001F
  .dword 0x00000023
  .dword 0x00000024
  .dword 0x00000026
  .dword 0x00000034

SaveDef:
  .word 0x0006
  .balign 8
  .qword MainDef
  .qword SaveMenu
  .qword M_DrawSave
  .word 0x0050
  .word 0x0036
  .word 0x0000
  .balign 8

yspeed:
  .dword 0x00000000
  .dword 0x0000B798
  .dword 0x00010000
  .dword 0x0000B798
  .dword 0x00000000
  .dword 0xFFFF4868
  .dword 0xFFFF0000
  .dword 0xFFFF4868

cheat_powerup:
  .qword cheat_powerup_seq
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+10
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+20
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+30
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+40
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+50
  .qword 0x0000000000000000
  .qword cheat_powerup_seq+60
  .qword 0x0000000000000000

TU61F874B9/thislocale:
  .qword .L00C00FE6
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .qword .L00C00FE7
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF
  .byte 0xFF

checkcoord:
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000

TU7A00CB85/lnodes:
  .dword 0x000000B9
  .dword 0x000000A4
  .dword 0x00000094
  .dword 0x0000008F
  .dword 0x00000045
  .dword 0x0000007A
  .dword 0x000000D1
  .dword 0x00000066
  .dword 0x00000074
  .dword 0x00000059
  .dword 0x000000A6
  .dword 0x00000037
  .dword 0x00000047
  .dword 0x00000038
  .dword 0x00000087
  .dword 0x0000001D
  .dword 0x00000047
  .dword 0x00000018
  .dword 0x000000FE
  .dword 0x00000019
  .dword 0x00000061
  .dword 0x00000032
  .dword 0x000000BC
  .dword 0x00000040
  .dword 0x00000080
  .dword 0x0000004E
  .dword 0x000000D6
  .dword 0x0000005C
  .dword 0x00000085
  .dword 0x00000082
  .dword 0x000000D0
  .dword 0x00000088
  .dword 0x00000094
  .dword 0x0000008C
  .dword 0x000000EB
  .dword 0x0000009E
  .dword 0x0000009C
  .dword 0x000000A8
  .dword 0x00000030
  .dword 0x0000009A
  .dword 0x000000AE
  .dword 0x0000005F
  .dword 0x00000109
  .dword 0x0000004B
  .dword 0x00000082
  .dword 0x00000030
  .dword 0x00000117
  .dword 0x00000017
  .dword 0x000000C6
  .dword 0x00000030
  .dword 0x0000008C
  .dword 0x00000019
  .dword 0x00000119
  .dword 0x00000088
  .resb 8
  .resb 8
  .resb 8
  .resb 8
  .resb 8
  .resb 8
  .resb 8
  .resb 8
  .resb 8

tk_vfile_sysc_vt:
  .qword .L00C00FE8
  .qword 0x0000000000000000
  .qword tk_sysc_mount
  .qword tk_sysc_fopen
  .qword tk_sysc_opendir
  .qword 0x0000000000000000
  .qword tk_sysc_rename
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword tk_sysc_fread
  .qword tk_sysc_fwrite
  .qword tk_sysc_fseek
  .qword tk_sysc_ftell
  .qword tk_sysc_fclose
  .qword tk_sysc_fgetc
  .qword tk_sysc_fputc
  .qword tk_sysc_fioctl
  .qword tk_sysc_readdir
  .qword tk_sysc_closedir
  .qword tk_sysc_fsend
  .qword tk_sysc_frecv

opposite:
  .dword 0x00000004
  .dword 0x00000005
  .dword 0x00000006
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000003
  .dword 0x00000008
  .balign 8

S_sfx:
  .qword .L00C00FE9
  .dword 0x00000000
  .dword 0x00000000
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FEA
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FEB
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FEC
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FED
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FEE
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FEF
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF0
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF1
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF2
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF3
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF4
  .dword 0x00000000
  .dword 0x00000076
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF5
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF6
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF7
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF8
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FF9
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFA
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFB
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFC
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFD
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFE
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C00FFF
  .dword 0x00000000
  .dword 0x00000077
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01000
  .dword 0x00000000
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01001
  .dword 0x00000000
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01002
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01003
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01004
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01005
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01006
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01007
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01008
  .dword 0x00000000
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01009
  .dword 0x00000001
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100A
  .dword 0x00000001
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100B
  .dword 0x00000000
  .dword 0x00000060
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100C
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100D
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100E
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0100F
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01010
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01011
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01012
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01013
  .dword 0x00000001
  .dword 0x00000062
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01014
  .dword 0x00000001
  .dword 0x0000005E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01015
  .dword 0x00000001
  .dword 0x0000005C
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01016
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01017
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01018
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01019
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101A
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101B
  .dword 0x00000001
  .dword 0x0000005A
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101C
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101D
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101E
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0101F
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01020
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01021
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01022
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01023
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01024
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01025
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01026
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01027
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01028
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01029
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102A
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102B
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102C
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102D
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102E
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0102F
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01030
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01031
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01032
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01033
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01034
  .dword 0x00000001
  .dword 0x00000078
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01035
  .dword 0x00000001
  .dword 0x00000078
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01036
  .dword 0x00000001
  .dword 0x00000078
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01037
  .dword 0x00000001
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01038
  .dword 0x00000001
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01039
  .dword 0x00000001
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103A
  .dword 0x00000000
  .dword 0x0000004E
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103B
  .dword 0x00000000
  .dword 0x0000003C
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103C
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103D
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103E
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0103F
  .dword 0x00000000
  .dword 0x00000040
  .qword 0x0000000000000000
  .dword 0x00000096
  .dword 0x00000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01040
  .dword 0x00000000
  .dword 0x0000003C
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01041
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01042
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01043
  .dword 0x00000000
  .dword 0x00000064
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01044
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01045
  .dword 0x00000000
  .dword 0x00000020
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01046
  .dword 0x00000000
  .dword 0x0000003C
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01047
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01048
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01049
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104A
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104B
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104C
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104D
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104E
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0104F
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01050
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01051
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01052
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01053
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01054
  .dword 0x00000000
  .dword 0x00000046
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01055
  .dword 0x00000000
  .dword 0x0000003C
  .qword 0x0000000000000000
  .dword 0xFFFFFFFF
  .dword 0xFFFFFFFF
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8

cheat_choppers_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xE2
  .byte 0x32
  .byte 0xF6
  .byte 0x2A
  .byte 0x2A
  .byte 0xA6
  .byte 0x6A
  .byte 0xEA
  .byte 0xFF
  .balign 8

cheat_noclip_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xEA
  .byte 0x2A
  .byte 0xB2
  .byte 0xEA
  .byte 0x2A
  .byte 0xF6
  .byte 0x2A
  .byte 0x26
  .byte 0xFF
  .balign 8

cheat_ammo_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xF2
  .byte 0x66
  .byte 0xA2
  .byte 0xFF
  .balign 8

LoadMenu:
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x31
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x32
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x33
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x34
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x35
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadSelect
  .byte 0x36
  .balign 8

frenchKeyMap:
  .byte 0x00
  .byte 0x01
  .byte 0x02
  .byte 0x03
  .byte 0x04
  .byte 0x05
  .byte 0x06
  .byte 0x07
  .byte 0x08
  .byte 0x09
  .byte 0x0A
  .byte 0x0B
  .byte 0x0C
  .byte 0x0D
  .byte 0x0E
  .byte 0x0F
  .byte 0x10
  .byte 0x11
  .byte 0x12
  .byte 0x13
  .byte 0x14
  .byte 0x15
  .byte 0x16
  .byte 0x17
  .byte 0x18
  .byte 0x19
  .byte 0x1A
  .byte 0x1B
  .byte 0x1C
  .byte 0x1D
  .byte 0x1E
  .byte 0x1F
  .byte 0x20
  .byte 0x21
  .byte 0x22
  .byte 0x23
  .byte 0x24
  .byte 0x25
  .byte 0x26
  .byte 0x25
  .byte 0x28
  .byte 0x29
  .byte 0x2A
  .byte 0x2B
  .byte 0x3B
  .byte 0x2D
  .byte 0x3A
  .byte 0x21
  .byte 0x30
  .byte 0x31
  .byte 0x32
  .byte 0x33
  .byte 0x34
  .byte 0x35
  .byte 0x36
  .byte 0x37
  .byte 0x38
  .byte 0x39
  .byte 0x3A
  .byte 0x4D
  .byte 0x3C
  .byte 0x3D
  .byte 0x3E
  .byte 0x3F
  .byte 0x40
  .byte 0x51
  .byte 0x42
  .byte 0x43
  .byte 0x44
  .byte 0x45
  .byte 0x46
  .byte 0x47
  .byte 0x48
  .byte 0x49
  .byte 0x4A
  .byte 0x4B
  .byte 0x4C
  .byte 0x2C
  .byte 0x4E
  .byte 0x4F
  .byte 0x50
  .byte 0x41
  .byte 0x52
  .byte 0x53
  .byte 0x54
  .byte 0x55
  .byte 0x56
  .byte 0x5A
  .byte 0x58
  .byte 0x59
  .byte 0x57
  .byte 0x5E
  .byte 0x5C
  .byte 0x24
  .byte 0x5E
  .byte 0x5F
  .byte 0x40
  .byte 0x51
  .byte 0x42
  .byte 0x43
  .byte 0x44
  .byte 0x45
  .byte 0x46
  .byte 0x47
  .byte 0x48
  .byte 0x49
  .byte 0x4A
  .byte 0x4B
  .byte 0x4C
  .byte 0x2C
  .byte 0x4E
  .byte 0x4F
  .byte 0x50
  .byte 0x41
  .byte 0x52
  .byte 0x53
  .byte 0x54
  .byte 0x55
  .byte 0x56
  .byte 0x5A
  .byte 0x58
  .byte 0x59
  .byte 0x57
  .byte 0x5E
  .byte 0x5C
  .byte 0x24
  .byte 0x5E
  .byte 0x7F

diags:
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000005
  .dword 0x00000007

rndtable:
  .byte 0x00
  .byte 0x08
  .byte 0x6D
  .byte 0xDC
  .byte 0xDE
  .byte 0xF1
  .byte 0x95
  .byte 0x6B
  .byte 0x4B
  .byte 0xF8
  .byte 0xFE
  .byte 0x8C
  .byte 0x10
  .byte 0x42
  .byte 0x4A
  .byte 0x15
  .byte 0xD3
  .byte 0x2F
  .byte 0x50
  .byte 0xF2
  .byte 0x9A
  .byte 0x1B
  .byte 0xCD
  .byte 0x80
  .byte 0xA1
  .byte 0x59
  .byte 0x4D
  .byte 0x24
  .byte 0x5F
  .byte 0x6E
  .byte 0x55
  .byte 0x30
  .byte 0xD4
  .byte 0x8C
  .byte 0xD3
  .byte 0xF9
  .byte 0x16
  .byte 0x4F
  .byte 0xC8
  .byte 0x32
  .byte 0x1C
  .byte 0xBC
  .byte 0x34
  .byte 0x8C
  .byte 0xCA
  .byte 0x78
  .byte 0x44
  .byte 0x91
  .byte 0x3E
  .byte 0x46
  .byte 0xB8
  .byte 0xBE
  .byte 0x5B
  .byte 0xC5
  .byte 0x98
  .byte 0xE0
  .byte 0x95
  .byte 0x68
  .byte 0x19
  .byte 0xB2
  .byte 0xFC
  .byte 0xB6
  .byte 0xCA
  .byte 0xB6
  .byte 0x8D
  .byte 0xC5
  .byte 0x04
  .byte 0x51
  .byte 0xB5
  .byte 0xF2
  .byte 0x91
  .byte 0x2A
  .byte 0x27
  .byte 0xE3
  .byte 0x9C
  .byte 0xC6
  .byte 0xE1
  .byte 0xC1
  .byte 0xDB
  .byte 0x5D
  .byte 0x7A
  .byte 0xAF
  .byte 0xF9
  .byte 0x00
  .byte 0xAF
  .byte 0x8F
  .byte 0x46
  .byte 0xEF
  .byte 0x2E
  .byte 0xF6
  .byte 0xA3
  .byte 0x35
  .byte 0xA3
  .byte 0x6D
  .byte 0xA8
  .byte 0x87
  .byte 0x02
  .byte 0xEB
  .byte 0x19
  .byte 0x5C
  .byte 0x14
  .byte 0x91
  .byte 0x8A
  .byte 0x4D
  .byte 0x45
  .byte 0xA6
  .byte 0x4E
  .byte 0xB0
  .byte 0xAD
  .byte 0xD4
  .byte 0xA6
  .byte 0x71
  .byte 0x5E
  .byte 0xA1
  .byte 0x29
  .byte 0x32
  .byte 0xEF
  .byte 0x31
  .byte 0x6F
  .byte 0xA4
  .byte 0x46
  .byte 0x3C
  .byte 0x02
  .byte 0x25
  .byte 0xAB
  .byte 0x4B
  .byte 0x88
  .byte 0x9C
  .byte 0x0B
  .byte 0x38
  .byte 0x2A
  .byte 0x92
  .byte 0x8A
  .byte 0xE5
  .byte 0x49
  .byte 0x92
  .byte 0x4D
  .byte 0x3D
  .byte 0x62
  .byte 0xC4
  .byte 0x87
  .byte 0x6A
  .byte 0x3F
  .byte 0xC5
  .byte 0xC3
  .byte 0x56
  .byte 0x60
  .byte 0xCB
  .byte 0x71
  .byte 0x65
  .byte 0xAA
  .byte 0xF7
  .byte 0xB5
  .byte 0x71
  .byte 0x50
  .byte 0xFA
  .byte 0x6C
  .byte 0x07
  .byte 0xFF
  .byte 0xED
  .byte 0x81
  .byte 0xE2
  .byte 0x4F
  .byte 0x6B
  .byte 0x70
  .byte 0xA6
  .byte 0x67
  .byte 0xF1
  .byte 0x18
  .byte 0xDF
  .byte 0xEF
  .byte 0x78
  .byte 0xC6
  .byte 0x3A
  .byte 0x3C
  .byte 0x52
  .byte 0x80
  .byte 0x03
  .byte 0xB8
  .byte 0x42
  .byte 0x8F
  .byte 0xE0
  .byte 0x91
  .byte 0xE0
  .byte 0x51
  .byte 0xCE
  .byte 0xA3
  .byte 0x2D
  .byte 0x3F
  .byte 0x5A
  .byte 0xA8
  .byte 0x72
  .byte 0x3B
  .byte 0x21
  .byte 0x9F
  .byte 0x5F
  .byte 0x1C
  .byte 0x8B
  .byte 0x7B
  .byte 0x62
  .byte 0x7D
  .byte 0xC4
  .byte 0x0F
  .byte 0x46
  .byte 0xC2
  .byte 0xFD
  .byte 0x36
  .byte 0x0E
  .byte 0x6D
  .byte 0xE2
  .byte 0x47
  .byte 0x11
  .byte 0xA1
  .byte 0x5D
  .byte 0xBA
  .byte 0x57
  .byte 0xF4
  .byte 0x8A
  .byte 0x14
  .byte 0x34
  .byte 0x7B
  .byte 0xFB
  .byte 0x1A
  .byte 0x24
  .byte 0x11
  .byte 0x2E
  .byte 0x34
  .byte 0xE7
  .byte 0xE8
  .byte 0x4C
  .byte 0x1F
  .byte 0xDD
  .byte 0x54
  .byte 0x25
  .byte 0xD8
  .byte 0xA5
  .byte 0xD4
  .byte 0x6A
  .byte 0xC5
  .byte 0xF2
  .byte 0x62
  .byte 0x2B
  .byte 0x27
  .byte 0xAF
  .byte 0xFE
  .byte 0x91
  .byte 0xBE
  .byte 0x54
  .byte 0x76
  .byte 0xDE
  .byte 0xBB
  .byte 0x88
  .byte 0x78
  .byte 0xA3
  .byte 0xEC
  .byte 0xF9

tkdfs_utf_combarr:
  .word 0x0041
  .word 0x0300
  .word 0x00C0
  .word 0x0000
  .word 0x0045
  .word 0x0300
  .word 0x00C8
  .word 0x0000
  .word 0x0049
  .word 0x0300
  .word 0x00CC
  .word 0x0000
  .word 0x004F
  .word 0x0300
  .word 0x00D3
  .word 0x0000
  .word 0x0055
  .word 0x0300
  .word 0x00D9
  .word 0x0000
  .word 0x0061
  .word 0x0300
  .word 0x00E0
  .word 0x0000
  .word 0x0065
  .word 0x0300
  .word 0x00E8
  .word 0x0000
  .word 0x0069
  .word 0x0300
  .word 0x00EC
  .word 0x0000
  .word 0x006F
  .word 0x0300
  .word 0x00F3
  .word 0x0000
  .word 0x0075
  .word 0x0300
  .word 0x00F9
  .word 0x0000
  .word 0x0041
  .word 0x0301
  .word 0x00C1
  .word 0x0000
  .word 0x0045
  .word 0x0301
  .word 0x00C9
  .word 0x0000
  .word 0x0049
  .word 0x0301
  .word 0x00CD
  .word 0x0000
  .word 0x004F
  .word 0x0301
  .word 0x00D4
  .word 0x0000
  .word 0x0055
  .word 0x0301
  .word 0x00DA
  .word 0x0000
  .word 0x0059
  .word 0x0301
  .word 0x00DC
  .word 0x0000
  .word 0x0061
  .word 0x0301
  .word 0x00E1
  .word 0x0000
  .word 0x0065
  .word 0x0301
  .word 0x00E9
  .word 0x0000
  .word 0x0069
  .word 0x0301
  .word 0x00ED
  .word 0x0000
  .word 0x006F
  .word 0x0301
  .word 0x00F4
  .word 0x0000
  .word 0x0075
  .word 0x0301
  .word 0x00FA
  .word 0x0000
  .word 0x0079
  .word 0x0301
  .word 0x00FC
  .word 0x0000
  .word 0x0043
  .word 0x0301
  .word 0x0106
  .word 0x0000
  .word 0x0063
  .word 0x0301
  .word 0x0107
  .word 0x0000
  .word 0x004C
  .word 0x0301
  .word 0x0139
  .word 0x0000
  .word 0x006C
  .word 0x0301
  .word 0x013A
  .word 0x0000
  .word 0x004E
  .word 0x0301
  .word 0x0143
  .word 0x0000
  .word 0x006E
  .word 0x0301
  .word 0x0144
  .word 0x0000
  .word 0x0052
  .word 0x0301
  .word 0x0154
  .word 0x0000
  .word 0x0072
  .word 0x0301
  .word 0x0155
  .word 0x0000
  .word 0x0053
  .word 0x0301
  .word 0x015A
  .word 0x0000
  .word 0x0073
  .word 0x0301
  .word 0x015B
  .word 0x0000
  .word 0x005A
  .word 0x0301
  .word 0x0179
  .word 0x0000
  .word 0x007A
  .word 0x0301
  .word 0x017A
  .word 0x0000
  .word 0x0041
  .word 0x0302
  .word 0x00C2
  .word 0x0000
  .word 0x0045
  .word 0x0302
  .word 0x00CA
  .word 0x0000
  .word 0x0049
  .word 0x0302
  .word 0x00CE
  .word 0x0000
  .word 0x004F
  .word 0x0302
  .word 0x00D4
  .word 0x0000
  .word 0x0055
  .word 0x0302
  .word 0x00DB
  .word 0x0000
  .word 0x0061
  .word 0x0302
  .word 0x00E2
  .word 0x0000
  .word 0x0065
  .word 0x0302
  .word 0x00EA
  .word 0x0000
  .word 0x0069
  .word 0x0302
  .word 0x00EE
  .word 0x0000
  .word 0x006F
  .word 0x0302
  .word 0x00F4
  .word 0x0000
  .word 0x0075
  .word 0x0302
  .word 0x00FB
  .word 0x0000
  .word 0x0043
  .word 0x0302
  .word 0x0108
  .word 0x0000
  .word 0x0063
  .word 0x0302
  .word 0x0109
  .word 0x0000
  .word 0x0047
  .word 0x0302
  .word 0x011C
  .word 0x0000
  .word 0x0067
  .word 0x0302
  .word 0x011D
  .word 0x0000
  .word 0x0048
  .word 0x0302
  .word 0x0124
  .word 0x0000
  .word 0x0068
  .word 0x0302
  .word 0x0125
  .word 0x0000
  .word 0x004A
  .word 0x0302
  .word 0x0134
  .word 0x0000
  .word 0x006A
  .word 0x0302
  .word 0x0135
  .word 0x0000
  .word 0x0053
  .word 0x0302
  .word 0x015C
  .word 0x0000
  .word 0x0073
  .word 0x0302
  .word 0x015D
  .word 0x0000
  .word 0x0057
  .word 0x0302
  .word 0x0174
  .word 0x0000
  .word 0x0077
  .word 0x0302
  .word 0x0175
  .word 0x0000
  .word 0x0059
  .word 0x0302
  .word 0x0176
  .word 0x0000
  .word 0x0079
  .word 0x0302
  .word 0x0177
  .word 0x0000
  .word 0x0041
  .word 0x0303
  .word 0x00C3
  .word 0x0000
  .word 0x004E
  .word 0x0303
  .word 0x00D1
  .word 0x0000
  .word 0x004F
  .word 0x0303
  .word 0x00D5
  .word 0x0000
  .word 0x0061
  .word 0x0303
  .word 0x00E3
  .word 0x0000
  .word 0x006E
  .word 0x0303
  .word 0x00F1
  .word 0x0000
  .word 0x006F
  .word 0x0303
  .word 0x00F5
  .word 0x0000
  .word 0x0049
  .word 0x0303
  .word 0x0128
  .word 0x0000
  .word 0x0069
  .word 0x0303
  .word 0x0129
  .word 0x0000
  .word 0x0055
  .word 0x0303
  .word 0x0168
  .word 0x0000
  .word 0x0075
  .word 0x0303
  .word 0x0169
  .word 0x0000
  .word 0x0041
  .word 0x0304
  .word 0x0100
  .word 0x0000
  .word 0x0061
  .word 0x0304
  .word 0x0101
  .word 0x0000
  .word 0x0045
  .word 0x0304
  .word 0x0112
  .word 0x0000
  .word 0x0065
  .word 0x0304
  .word 0x0113
  .word 0x0000
  .word 0x0049
  .word 0x0304
  .word 0x012A
  .word 0x0000
  .word 0x0069
  .word 0x0304
  .word 0x012B
  .word 0x0000
  .word 0x004F
  .word 0x0304
  .word 0x014C
  .word 0x0000
  .word 0x006F
  .word 0x0304
  .word 0x014D
  .word 0x0000
  .word 0x0055
  .word 0x0304
  .word 0x016A
  .word 0x0000
  .word 0x0075
  .word 0x0304
  .word 0x016B
  .word 0x0000
  .word 0x0041
  .word 0x0306
  .word 0x0102
  .word 0x0000
  .word 0x0061
  .word 0x0306
  .word 0x0103
  .word 0x0000
  .word 0x0045
  .word 0x0306
  .word 0x0114
  .word 0x0000
  .word 0x0065
  .word 0x0306
  .word 0x0115
  .word 0x0000
  .word 0x0047
  .word 0x0306
  .word 0x011E
  .word 0x0000
  .word 0x0067
  .word 0x0306
  .word 0x011F
  .word 0x0000
  .word 0x0049
  .word 0x0306
  .word 0x012C
  .word 0x0000
  .word 0x0069
  .word 0x0306
  .word 0x012D
  .word 0x0000
  .word 0x004F
  .word 0x0306
  .word 0x014E
  .word 0x0000
  .word 0x006F
  .word 0x0306
  .word 0x014F
  .word 0x0000
  .word 0x0055
  .word 0x0306
  .word 0x016C
  .word 0x0000
  .word 0x0075
  .word 0x0306
  .word 0x016D
  .word 0x0000
  .word 0x0043
  .word 0x0307
  .word 0x010A
  .word 0x0000
  .word 0x0063
  .word 0x0307
  .word 0x010B
  .word 0x0000
  .word 0x0045
  .word 0x0307
  .word 0x0116
  .word 0x0000
  .word 0x0065
  .word 0x0307
  .word 0x0117
  .word 0x0000
  .word 0x0047
  .word 0x0307
  .word 0x0120
  .word 0x0000
  .word 0x0067
  .word 0x0307
  .word 0x0121
  .word 0x0000
  .word 0x0049
  .word 0x0307
  .word 0x0130
  .word 0x0000
  .word 0x005A
  .word 0x0307
  .word 0x017B
  .word 0x0000
  .word 0x007A
  .word 0x0307
  .word 0x017C
  .word 0x0000
  .word 0x0041
  .word 0x0308
  .word 0x00C5
  .word 0x0000
  .word 0x0045
  .word 0x0308
  .word 0x00CC
  .word 0x0000
  .word 0x0049
  .word 0x0308
  .word 0x00CF
  .word 0x0000
  .word 0x004F
  .word 0x0308
  .word 0x00D6
  .word 0x0000
  .word 0x0055
  .word 0x0308
  .word 0x00DC
  .word 0x0000
  .word 0x0059
  .word 0x0308
  .word 0x009F
  .word 0x0001
  .word 0x0061
  .word 0x0308
  .word 0x00E5
  .word 0x0000
  .word 0x0065
  .word 0x0308
  .word 0x00EC
  .word 0x0000
  .word 0x0069
  .word 0x0308
  .word 0x00EF
  .word 0x0000
  .word 0x006F
  .word 0x0308
  .word 0x00F6
  .word 0x0000
  .word 0x0075
  .word 0x0308
  .word 0x00FC
  .word 0x0000
  .word 0x0079
  .word 0x0308
  .word 0x00FF
  .word 0x0000
  .word 0x0059
  .word 0x0308
  .word 0x0178
  .word 0x0000
  .word 0x0055
  .word 0x030A
  .word 0x016E
  .word 0x0000
  .word 0x0075
  .word 0x030A
  .word 0x016F
  .word 0x0000
  .word 0x004F
  .word 0x030B
  .word 0x0150
  .word 0x0000
  .word 0x006F
  .word 0x030B
  .word 0x0151
  .word 0x0000
  .word 0x0055
  .word 0x030B
  .word 0x0170
  .word 0x0000
  .word 0x0075
  .word 0x030B
  .word 0x0171
  .word 0x0000
  .word 0x0053
  .word 0x030C
  .word 0x008A
  .word 0x0001
  .word 0x005A
  .word 0x030C
  .word 0x008E
  .word 0x0001
  .word 0x0073
  .word 0x030C
  .word 0x009A
  .word 0x0001
  .word 0x007A
  .word 0x030C
  .word 0x009E
  .word 0x0001
  .word 0x0043
  .word 0x030C
  .word 0x010C
  .word 0x0000
  .word 0x0063
  .word 0x030C
  .word 0x010D
  .word 0x0000
  .word 0x0044
  .word 0x030C
  .word 0x010E
  .word 0x0000
  .word 0x0064
  .word 0x030C
  .word 0x010F
  .word 0x0000
  .word 0x0045
  .word 0x030C
  .word 0x011A
  .word 0x0000
  .word 0x0065
  .word 0x030C
  .word 0x011B
  .word 0x0000
  .word 0x0053
  .word 0x030C
  .word 0x0160
  .word 0x0000
  .word 0x005A
  .word 0x030C
  .word 0x017D
  .word 0x0000
  .word 0x0073
  .word 0x030C
  .word 0x0161
  .word 0x0000
  .word 0x007A
  .word 0x030C
  .word 0x017E
  .word 0x0000
  .word 0x0047
  .word 0x0327
  .word 0x0122
  .word 0x0000
  .word 0x0067
  .word 0x0327
  .word 0x0123
  .word 0x0000
  .word 0x004B
  .word 0x0327
  .word 0x0136
  .word 0x0000
  .word 0x006B
  .word 0x0327
  .word 0x0137
  .word 0x0000
  .word 0x004C
  .word 0x0327
  .word 0x013B
  .word 0x0000
  .word 0x006C
  .word 0x0327
  .word 0x013C
  .word 0x0000
  .word 0x004E
  .word 0x0327
  .word 0x0145
  .word 0x0000
  .word 0x006E
  .word 0x0327
  .word 0x0146
  .word 0x0000
  .word 0x0052
  .word 0x0327
  .word 0x0156
  .word 0x0000
  .word 0x0072
  .word 0x0327
  .word 0x0157
  .word 0x0000
  .word 0x0053
  .word 0x0327
  .word 0x015E
  .word 0x0000
  .word 0x0073
  .word 0x0327
  .word 0x015F
  .word 0x0000
  .word 0x0054
  .word 0x0327
  .word 0x0162
  .word 0x0000
  .word 0x0074
  .word 0x0327
  .word 0x0163
  .word 0x0000
  .word 0x0041
  .word 0x0328
  .word 0x0104
  .word 0x0000
  .word 0x0061
  .word 0x0328
  .word 0x0105
  .word 0x0000
  .word 0x0045
  .word 0x0328
  .word 0x0118
  .word 0x0000
  .word 0x0065
  .word 0x0328
  .word 0x0119
  .word 0x0000
  .word 0x0049
  .word 0x0328
  .word 0x012E
  .word 0x0000
  .word 0x0069
  .word 0x0328
  .word 0x012F
  .word 0x0000
  .word 0x0055
  .word 0x0328
  .word 0x0172
  .word 0x0000
  .word 0x0075
  .word 0x0328
  .word 0x0173
  .word 0x0000
  .word 0x0044
  .word 0x0335
  .word 0x0110
  .word 0x0000
  .word 0x0064
  .word 0x0335
  .word 0x0111
  .word 0x0000
  .word 0x0048
  .word 0x0335
  .word 0x0126
  .word 0x0000
  .word 0x0068
  .word 0x0335
  .word 0x0127
  .word 0x0000
  .word 0x004C
  .word 0x0335
  .word 0x0141
  .word 0x0000
  .word 0x006C
  .word 0x0335
  .word 0x0142
  .word 0x0000
  .word 0x0054
  .word 0x0335
  .word 0x0166
  .word 0x0000
  .word 0x0074
  .word 0x0335
  .word 0x0167
  .word 0x0000
  .word 0x0042
  .word 0x0335
  .word 0x0180
  .word 0x0000
  .word 0x0062
  .word 0x0335
  .word 0x0181
  .word 0x0000
  .word 0x005A
  .word 0x0335
  .word 0x01B5
  .word 0x0000
  .word 0x007A
  .word 0x0335
  .word 0x01B6
  .word 0x0000
  .word 0x0047
  .word 0x0335
  .word 0x01E4
  .word 0x0000
  .word 0x0067
  .word 0x0335
  .word 0x01E5
  .word 0x0000
  .word 0x004A
  .word 0x0335
  .word 0x0248
  .word 0x0000
  .word 0x006A
  .word 0x0335
  .word 0x0249
  .word 0x0000
  .word 0x0052
  .word 0x0335
  .word 0x024C
  .word 0x0000
  .word 0x0052
  .word 0x0335
  .word 0x024D
  .word 0x0000
  .word 0x0079
  .word 0x0335
  .word 0x024E
  .word 0x0000
  .word 0x0079
  .word 0x0335
  .word 0x024F
  .word 0x0000
  .word 0x0043
  .word 0x0337
  .word 0x023B
  .word 0x0000
  .word 0x0063
  .word 0x0337
  .word 0x023C
  .word 0x0000
  .word 0x0049
  .word 0x0337
  .word 0x0197
  .word 0x0000
  .word 0x0041
  .word 0x0337
  .word 0x023A
  .word 0x0000
  .word 0x0049
  .word 0x004A
  .word 0x0132
  .word 0x0003
  .word 0x0069
  .word 0x006A
  .word 0x0133
  .word 0x0003
  .word 0x0027
  .word 0x006E
  .word 0x0149
  .word 0x0001
  .word 0x004C
  .word 0x004A
  .word 0x01C7
  .word 0x0003
  .word 0x004C
  .word 0x006A
  .word 0x01C8
  .word 0x0003
  .word 0x006C
  .word 0x006A
  .word 0x01C9
  .word 0x0003
  .word 0x004E
  .word 0x004A
  .word 0x01CA
  .word 0x0003
  .word 0x004E
  .word 0x006A
  .word 0x01CB
  .word 0x0003
  .word 0x006E
  .word 0x006A
  .word 0x01CC
  .word 0x0003
  .word 0x0044
  .word 0x005A
  .word 0x01F1
  .word 0x0003
  .word 0x0044
  .word 0x007A
  .word 0x01F2
  .word 0x0003
  .word 0x0064
  .word 0x007A
  .word 0x01F3
  .word 0x0003
  .word 0x0049
  .word 0x0000
  .word 0x2160
  .word 0x0003
  .word 0x0069
  .word 0x0000
  .word 0x2170
  .word 0x0003
  .word 0x0056
  .word 0x0000
  .word 0x2164
  .word 0x0003
  .word 0x0076
  .word 0x0000
  .word 0x2174
  .word 0x0003
  .word 0x0058
  .word 0x0000
  .word 0x2169
  .word 0x0003
  .word 0x0078
  .word 0x0000
  .word 0x2179
  .word 0x0003
  .word 0x004C
  .word 0x0000
  .word 0x216C
  .word 0x0003
  .word 0x006C
  .word 0x0000
  .word 0x217C
  .word 0x0003
  .word 0x0043
  .word 0x0000
  .word 0x216D
  .word 0x0003
  .word 0x0063
  .word 0x0000
  .word 0x217D
  .word 0x0003
  .word 0x0044
  .word 0x0000
  .word 0x216E
  .word 0x0003
  .word 0x0064
  .word 0x0000
  .word 0x217E
  .word 0x0003
  .word 0x004D
  .word 0x0000
  .word 0x216F
  .word 0x0003
  .word 0x006D
  .word 0x0000
  .word 0x217F
  .word 0x0003
  .word 0x2160
  .word 0x2160
  .word 0x2161
  .word 0x0000
  .word 0x2170
  .word 0x2170
  .word 0x2171
  .word 0x0000
  .word 0x2161
  .word 0x2160
  .word 0x2162
  .word 0x0000
  .word 0x2171
  .word 0x2170
  .word 0x2172
  .word 0x0000
  .word 0x2160
  .word 0x2164
  .word 0x2163
  .word 0x0000
  .word 0x2170
  .word 0x2174
  .word 0x2173
  .word 0x0000
  .word 0x2164
  .word 0x2160
  .word 0x2165
  .word 0x0000
  .word 0x2174
  .word 0x2170
  .word 0x2175
  .word 0x0000
  .word 0x2165
  .word 0x2160
  .word 0x2166
  .word 0x0000
  .word 0x2175
  .word 0x2170
  .word 0x2176
  .word 0x0000
  .word 0x2166
  .word 0x2160
  .word 0x2167
  .word 0x0000
  .word 0x2176
  .word 0x2170
  .word 0x2177
  .word 0x0000
  .word 0x2160
  .word 0x2169
  .word 0x2168
  .word 0x0000
  .word 0x2170
  .word 0x2179
  .word 0x2178
  .word 0x0000
  .word 0x2169
  .word 0x2160
  .word 0x216A
  .word 0x0000
  .word 0x2179
  .word 0x2170
  .word 0x217A
  .word 0x0000
  .word 0x216A
  .word 0x2160
  .word 0x216B
  .word 0x0000
  .word 0x217A
  .word 0x2170
  .word 0x217B
  .word 0x0000
  .word 0x216D
  .word 0x216E
  .word 0x2180
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000

S_music:
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01056
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01057
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01058
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01059
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105A
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105B
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105C
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105D
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105E
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0105F
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01060
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01061
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01062
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01063
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01064
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01065
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01066
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01067
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01068
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01069
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106A
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106B
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106C
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106D
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106E
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0106F
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01070
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01071
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01072
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01073
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01074
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01075
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01076
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01077
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01078
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01079
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107A
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107B
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107C
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107D
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107E
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0107F
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01080
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01081
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01082
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01083
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01084
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01085
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01086
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01087
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01088
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01089
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108A
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108B
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108C
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108D
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108E
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C0108F
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01090
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01091
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01092
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01093
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01094
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01095
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01096
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01097
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8
  .qword .L00C01098
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8

endmsg:
  .qword .L00C01099
  .qword .L00C0109A
  .qword .L00C0109B
  .qword .L00C0109C
  .qword .L00C0109D
  .qword .L00C0109E
  .qword .L00C0109F
  .qword .L00C010A0
  .qword .L00C010A1
  .qword .L00C010A2
  .qword .L00C010A3
  .qword .L00C010A4
  .qword .L00C010A5
  .qword .L00C010A6
  .qword .L00C010A7
  .qword .L00C010A8
  .qword .L00C010A9
  .qword .L00C010AA
  .qword .L00C010AB
  .qword .L00C010AC
  .qword .L00C010AD
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .resb 16

states:
  .dword 0x00000000
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000004
  .dword 0x00000000
  .balign 8
  .qword A_Light0
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000004
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_Punch
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000003
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000009
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000002
  .dword 0x00000001
  .dword 0x00000005
  .balign 8
  .qword A_ReFire
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x0000000A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x0000000B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x0000000C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword A_FirePistol
  .dword 0x0000000F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000003
  .dword 0x00000001
  .dword 0x00000005
  .balign 8
  .qword A_ReFire
  .dword 0x0000000A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000004
  .dword 0x00008000
  .dword 0x00000007
  .balign 8
  .qword A_Light1
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000012
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000013
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000014
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000016
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000007
  .balign 8
  .qword A_FireShotgun
  .dword 0x00000017
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000001
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000018
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000019
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000002
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000001B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000001
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000001C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000001D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000007
  .balign 8
  .qword A_ReFire
  .dword 0x00000012
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000005
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword A_Light1
  .dword 0x0000001F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000005
  .dword 0x00008001
  .dword 0x00000003
  .balign 8
  .qword A_Light2
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000020
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000021
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000022
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000024
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000007
  .balign 8
  .qword A_FireShotgun2
  .dword 0x00000025
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000001
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000026
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000002
  .dword 0x00000007
  .balign 8
  .qword A_CheckReload
  .dword 0x00000027
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000003
  .dword 0x00000007
  .balign 8
  .qword A_OpenShotgun2
  .dword 0x00000028
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000004
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000029
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000005
  .dword 0x00000007
  .balign 8
  .qword A_LoadShotgun2
  .dword 0x0000002A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000002B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000007
  .dword 0x00000006
  .balign 8
  .qword A_CloseShotgun2
  .dword 0x0000002C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000005
  .balign 8
  .qword A_ReFire
  .dword 0x00000020
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000001
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000002E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000021
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00008008
  .dword 0x00000005
  .balign 8
  .qword A_Light1
  .dword 0x00000030
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000006
  .dword 0x00008009
  .dword 0x00000004
  .balign 8
  .qword A_Light2
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000031
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000032
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_FireCGun
  .dword 0x00000035
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_FireCGun
  .dword 0x00000036
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000007
  .dword 0x00000001
  .dword 0x00000000
  .balign 8
  .qword A_ReFire
  .dword 0x00000031
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000008
  .dword 0x00008000
  .dword 0x00000005
  .balign 8
  .qword A_Light1
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000008
  .dword 0x00008001
  .dword 0x00000005
  .balign 8
  .qword A_Light2
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000039
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x0000003A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x0000003B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000001
  .dword 0x00000008
  .balign 8
  .qword A_GunFlash
  .dword 0x0000003D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000001
  .dword 0x0000000C
  .balign 8
  .qword A_FireMissile
  .dword 0x0000003E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000009
  .dword 0x00000001
  .dword 0x00000000
  .balign 8
  .qword A_ReFire
  .dword 0x00000039
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000A
  .dword 0x00008000
  .dword 0x00000003
  .balign 8
  .qword A_Light1
  .dword 0x00000040
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000A
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000041
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000A
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword A_Light2
  .dword 0x00000042
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000A
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword A_Light2
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000044
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000043
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000002
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000045
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000002
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000046
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_Saw
  .dword 0x00000048
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_Saw
  .dword 0x00000049
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000000
  .balign 8
  .qword A_ReFire
  .dword 0x00000043
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000C
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x0000004A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000C
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x0000004B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000C
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x0000004C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000C
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_FirePlasma
  .dword 0x0000004E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000C
  .dword 0x00000001
  .dword 0x00000014
  .balign 8
  .qword A_ReFire
  .dword 0x0000004A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000D
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword A_Light1
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000D
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword A_Light1
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_WeaponReady
  .dword 0x00000051
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Lower
  .dword 0x00000052
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x00000001
  .balign 8
  .qword A_Raise
  .dword 0x00000053
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x00000014
  .balign 8
  .qword A_BFGsound
  .dword 0x00000055
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_GunFlash
  .dword 0x00000056
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_FireBFG
  .dword 0x00000057
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000E
  .dword 0x00000001
  .dword 0x00000014
  .balign 8
  .qword A_ReFire
  .dword 0x00000051
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000F
  .dword 0x00008000
  .dword 0x0000000B
  .balign 8
  .qword A_Light1
  .dword 0x00000059
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000000F
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword A_Light2
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000010
  .dword 0x00000002
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000005B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000010
  .dword 0x00000001
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000005C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000005E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000005F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000060
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000012
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000062
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000012
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000061
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000012
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000012
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000065
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000012
  .dword 0x00008004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000013
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000067
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000013
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000066
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000013
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000069
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000013
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000006A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000013
  .dword 0x00008004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000014
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000006C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000014
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000006B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000015
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000006E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000015
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000006F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000015
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000070
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000015
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000071
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000015
  .dword 0x00008004
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008000
  .dword 0x00000001
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000072
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000017
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000074
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000017
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000073
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008000
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000076
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008001
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000077
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008002
  .dword 0x00000008
  .balign 8
  .qword A_BFGSpray
  .dword 0x00000078
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008003
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000079
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008004
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000007A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000018
  .dword 0x00008005
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000019
  .dword 0x00008000
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000007C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000019
  .dword 0x00008001
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000007D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000019
  .dword 0x00008002
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000007E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000019
  .dword 0x00008003
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008001
  .dword 0x00000008
  .balign 8
  .qword A_Explode
  .dword 0x00000080
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000081
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000083
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000084
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000085
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000086
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000087
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000088
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000089
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008005
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000008A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008006
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000008B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008007
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000008C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008008
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000008D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001A
  .dword 0x00008009
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000008F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000090
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000091
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000092
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000093
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000094
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001B
  .dword 0x00008004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000097
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000098
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000099
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000096
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000004
  .dword 0x0000000C
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000095
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00008005
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000009A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000006
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000009D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000006
  .dword 0x00000004
  .balign 8
  .qword A_Pain
  .dword 0x00000095
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000007
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000009F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000008
  .dword 0x0000000A
  .balign 8
  .qword A_PlayerScream
  .dword 0x000000A0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000009
  .dword 0x0000000A
  .balign 8
  .qword A_Fall
  .dword 0x000000A1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000A
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000A2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000B
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000A3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000C
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000A4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000D
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000A6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000000A7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000000A8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000A9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000AA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000013
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000AB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000014
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000AC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000015
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000AD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000016
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000AF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000AE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x000000B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000004
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x000000B9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000005
  .dword 0x00000008
  .balign 8
  .qword A_PosAttack
  .dword 0x000000BA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000004
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x000000B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_Scream
  .dword 0x000000BF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000000C0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000B
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000000C4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000000C5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000C9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000013
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000CA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000014
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000CC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000CD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000CE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001D
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000D0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000CF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000000D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000004
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x000000DA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00008005
  .dword 0x0000000A
  .balign 8
  .qword A_SPosAttack
  .dword 0x000000DB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000004
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x000000D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000DF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_Scream
  .dword 0x000000E0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000000E1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000E2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000B
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000E4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000000E5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000000E6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000E7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000E8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000E9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000EA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000013
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000EB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000014
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000ED
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000EE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000EF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000F0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001E
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000F2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000000F1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000FA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000FB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000004
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000FC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000004
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000FD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000005
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000FE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000005
  .dword 0x00000002
  .balign 8
  .qword A_VileChase
  .dword 0x000000F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00008006
  .dword 0x00000000
  .balign 8
  .qword A_VileStart
  .dword 0x00000100
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00008006
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000101
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00008007
  .dword 0x00000008
  .balign 8
  .qword A_VileTarget
  .dword 0x00000102
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00008008
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000103
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00008009
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000104
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800A
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000105
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800B
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000106
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800C
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000107
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800D
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000108
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800E
  .dword 0x00000008
  .balign 8
  .qword A_VileAttack
  .dword 0x00000109
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000800F
  .dword 0x00000014
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000801A
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000010B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000801B
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000010C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x0000801C
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000000F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000010E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword A_Pain
  .dword 0x000000F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000010
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000110
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000011
  .dword 0x00000007
  .balign 8
  .qword A_Scream
  .dword 0x00000111
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000012
  .dword 0x00000007
  .balign 8
  .qword A_Fall
  .dword 0x00000112
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000013
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000113
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000014
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000114
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000015
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000115
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000016
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000116
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000017
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000117
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000018
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000118
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001F
  .dword 0x00000019
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008000
  .dword 0x00000002
  .balign 8
  .qword A_StartFire
  .dword 0x0000011A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008001
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000011B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008000
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000011C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008001
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000011D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000002
  .balign 8
  .qword A_FireCrackle
  .dword 0x0000011E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008001
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000011F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000120
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008001
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000121
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000122
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000123
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000124
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000125
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000126
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000127
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000128
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000129
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000012A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000012B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000002
  .balign 8
  .qword A_FireCrackle
  .dword 0x0000012C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008005
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000012D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000012E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008005
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x0000012F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000130
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008005
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000131
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008006
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000132
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008007
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000133
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008006
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000134
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008007
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000135
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008006
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000136
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008007
  .dword 0x00000002
  .balign 8
  .qword A_Fire
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000138
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000139
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000013A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000013B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000011
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000021
  .dword 0x00008000
  .dword 0x00000002
  .balign 8
  .qword A_Tracer
  .dword 0x0000013D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000021
  .dword 0x00008001
  .dword 0x00000002
  .balign 8
  .qword A_Tracer
  .dword 0x0000013C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000022
  .dword 0x00008000
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000013F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000022
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000140
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000022
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000142
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000141
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000144
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000145
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000146
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000147
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000148
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000149
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x0000014A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x0000014B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000004
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x0000014C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000004
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x0000014D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000005
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x0000014E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000005
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x00000143
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000006
  .dword 0x00000000
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000150
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword A_SkelWhoosh
  .dword 0x00000151
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000007
  .dword 0x00000006
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000152
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000008
  .dword 0x00000006
  .balign 8
  .qword A_SkelFist
  .dword 0x00000143
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00008009
  .dword 0x00000000
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000154
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00008009
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000155
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000A
  .dword 0x0000000A
  .balign 8
  .qword A_SkelMissile
  .dword 0x00000156
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000A
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000143
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000158
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword A_Pain
  .dword 0x00000143
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000B
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000015A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000C
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000015B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000D
  .dword 0x00000007
  .balign 8
  .qword A_Scream
  .dword 0x0000015C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000E
  .dword 0x00000007
  .balign 8
  .qword A_Fall
  .dword 0x0000015D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000F
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000015E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000010
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000160
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000161
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000162
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000163
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000164
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000023
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000143
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000024
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000166
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000024
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000165
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008001
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000168
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000169
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000000
  .dword 0x0000000F
  .balign 8
  .qword A_Look
  .dword 0x0000016B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000001
  .dword 0x0000000F
  .balign 8
  .qword A_Look
  .dword 0x0000016A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x0000016D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000000
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x0000016E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x0000016F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000001
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000170
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000171
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000002
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000172
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000173
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000003
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000174
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000004
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000175
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000004
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000176
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000005
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x00000177
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000005
  .dword 0x00000004
  .balign 8
  .qword A_Chase
  .dword 0x0000016C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000006
  .dword 0x00000014
  .balign 8
  .qword A_FatRaise
  .dword 0x00000179
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00008007
  .dword 0x0000000A
  .balign 8
  .qword A_FatAttack1
  .dword 0x0000017A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000017B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000006
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000017C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00008007
  .dword 0x0000000A
  .balign 8
  .qword A_FatAttack2
  .dword 0x0000017D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000017E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000006
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000017F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00008007
  .dword 0x0000000A
  .balign 8
  .qword A_FatAttack3
  .dword 0x00000180
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000181
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000006
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000016C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000009
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000183
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000009
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x0000016C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000A
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000185
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000B
  .dword 0x00000006
  .balign 8
  .qword A_Scream
  .dword 0x00000186
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000C
  .dword 0x00000006
  .balign 8
  .qword A_Fall
  .dword 0x00000187
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000D
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000188
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000E
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000189
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000F
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000018A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000010
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000018B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000011
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000018C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000012
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000018D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000013
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BossDeath
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000018F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000190
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000191
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000192
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000193
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000194
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000195
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000025
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000016C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000197
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000196
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000199
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000019F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000198
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000004
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001A1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00008005
  .dword 0x00000004
  .balign 8
  .qword A_CPosAttack
  .dword 0x000001A2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00008004
  .dword 0x00000004
  .balign 8
  .qword A_CPosAttack
  .dword 0x000001A3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000005
  .dword 0x00000001
  .balign 8
  .qword A_CPosRefire
  .dword 0x000001A1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001A5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000006
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x00000198
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001A7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword A_Scream
  .dword 0x000001A8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000001A9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001AA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001AB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001AC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000D
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001AE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000001AF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000001B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000013
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001B9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000026
  .dword 0x00000007
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000198
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000001BB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000001BA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001BD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001BF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001C0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001C1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001C2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001C3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000004
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001C5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000005
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001C6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword A_TroopAttack
  .dword 0x000001BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001C8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword A_Pain
  .dword 0x000001BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001CA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x000001CB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000A
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001CC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000006
  .balign 8
  .qword A_Fall
  .dword 0x000001CD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000C
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001CF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000001D0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000001D2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000013
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000014
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x0000000A
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001D9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000009
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001DA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000001DC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000001DB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001DE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000000
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001DF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001E0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000001
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001E1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001E2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000002
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001E3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001E4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000003
  .dword 0x00000002
  .balign 8
  .qword A_Chase
  .dword 0x000001DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000004
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001E6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000005
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001E7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000006
  .dword 0x00000008
  .balign 8
  .qword A_SargAttack
  .dword 0x000001DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001E9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword A_Pain
  .dword 0x000001DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001EB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x000001EC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000A
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001ED
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000B
  .dword 0x00000004
  .balign 8
  .qword A_Fall
  .dword 0x000001EE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000C
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001EF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000D
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000027
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000001F6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000001F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000001
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001F9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000002
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x000001FA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00008003
  .dword 0x00000005
  .balign 8
  .qword A_HeadAttack
  .dword 0x000001F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001FC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x000001FD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000005
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000006
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001FF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000007
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x00000200
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000201
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000202
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword A_Fall
  .dword 0x00000203
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x0000000B
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000205
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000206
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000207
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000208
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000007
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000209
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000028
  .dword 0x00000006
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000001F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000029
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000020B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000029
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000020A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000029
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000020D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000029
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000020E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000029
  .dword 0x00008004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x0000020F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000212
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000213
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000214
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000215
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000216
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000217
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000218
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000211
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000004
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000021A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000005
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000021B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000006
  .dword 0x00000008
  .balign 8
  .qword A_BruisAttack
  .dword 0x00000211
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000021D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword A_Pain
  .dword 0x00000211
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000021F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x00000220
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000221
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword A_Fall
  .dword 0x00000222
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000223
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000D
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000224
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000E
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BossDeath
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000E
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000226
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000D
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000227
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000228
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000229
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000022A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000022B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002A
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000211
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x0000022D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x0000022C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000022F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000230
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000231
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000232
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000233
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000234
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000235
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000022E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000004
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000237
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000005
  .dword 0x00000008
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000238
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000006
  .dword 0x00000008
  .balign 8
  .qword A_BruisAttack
  .dword 0x0000022E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000023A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000007
  .dword 0x00000002
  .balign 8
  .qword A_Pain
  .dword 0x0000022E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000023C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x0000023D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000023E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword A_Fall
  .dword 0x0000023F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000240
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000D
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000241
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000E
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000E
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000243
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000D
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000244
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000245
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000246
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000247
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000248
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002B
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000022E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x0000024A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000249
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword A_Chase
  .dword 0x0000024C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword A_Chase
  .dword 0x0000024B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008002
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x0000024E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword A_SkullAttack
  .dword 0x0000024F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000250
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000024F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008004
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000252
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008004
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x0000024B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008005
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000254
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008006
  .dword 0x00000006
  .balign 8
  .qword A_Scream
  .dword 0x00000255
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008007
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000256
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00008008
  .dword 0x00000006
  .balign 8
  .qword A_Fall
  .dword 0x00000257
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x00000009
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000258
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002C
  .dword 0x0000000A
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x0000025A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000259
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Metal
  .dword 0x0000025C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000025D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000025E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000025F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Metal
  .dword 0x00000260
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000261
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000262
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000263
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword A_Metal
  .dword 0x00000264
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000265
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000005
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000266
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000005
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000025B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00008000
  .dword 0x00000014
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000268
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00008006
  .dword 0x00000004
  .balign 8
  .qword A_SPosAttack
  .dword 0x00000269
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00008007
  .dword 0x00000004
  .balign 8
  .qword A_SPosAttack
  .dword 0x0000026A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00008007
  .dword 0x00000001
  .balign 8
  .qword A_SpidRefire
  .dword 0x00000268
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000008
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000026C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000008
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x0000025B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000009
  .dword 0x00000014
  .balign 8
  .qword A_Scream
  .dword 0x0000026E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000A
  .dword 0x0000000A
  .balign 8
  .qword A_Fall
  .dword 0x0000026F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000B
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000270
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000C
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000271
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000D
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000272
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000E
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000273
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x0000000F
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000274
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000010
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000275
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000011
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000276
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000012
  .dword 0x0000001E
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000277
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002D
  .dword 0x00000012
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BossDeath
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000279
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000278
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000000
  .dword 0x00000014
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000027B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_BabyMetal
  .dword 0x0000027C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000027D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000027E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000027F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000280
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000281
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_BabyMetal
  .dword 0x00000282
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000283
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000284
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000004
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000285
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000005
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x00000286
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000005
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x0000027B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00008000
  .dword 0x00000014
  .balign 8
  .qword A_FaceTarget
  .dword 0x00000288
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00008006
  .dword 0x00000004
  .balign 8
  .qword A_BspiAttack
  .dword 0x00000289
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00008007
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000028A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00008007
  .dword 0x00000001
  .balign 8
  .qword A_SpidRefire
  .dword 0x00000288
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000008
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000028C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000008
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x0000027B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000009
  .dword 0x00000014
  .balign 8
  .qword A_Scream
  .dword 0x0000028E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000A
  .dword 0x00000007
  .balign 8
  .qword A_Fall
  .dword 0x0000028F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000B
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000290
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000C
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000291
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000D
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000292
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000E
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000293
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000F
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BossDeath
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000295
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000296
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000297
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000298
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000299
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000029A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002E
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000027B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002F
  .dword 0x00008000
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000029C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000002F
  .dword 0x00008001
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000029B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000030
  .dword 0x00008000
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000029E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000030
  .dword 0x00008001
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000029F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000030
  .dword 0x00008002
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002A0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000030
  .dword 0x00008003
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002A1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000030
  .dword 0x00008004
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000002A3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000002A2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Hoof
  .dword 0x000002A5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002A6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002A7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002A8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002A9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002AA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Metal
  .dword 0x000002AB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002A4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000004
  .dword 0x00000006
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002AD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000005
  .dword 0x0000000C
  .balign 8
  .qword A_CyberAttack
  .dword 0x000002AE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000004
  .dword 0x0000000C
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002AF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000005
  .dword 0x0000000C
  .balign 8
  .qword A_CyberAttack
  .dword 0x000002B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000004
  .dword 0x0000000C
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002B1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000005
  .dword 0x0000000C
  .balign 8
  .qword A_CyberAttack
  .dword 0x000002A4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000006
  .dword 0x0000000A
  .balign 8
  .qword A_Pain
  .dword 0x000002A4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000007
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002B4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000008
  .dword 0x0000000A
  .balign 8
  .qword A_Scream
  .dword 0x000002B5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x00000009
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002B6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000A
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002B7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000B
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002B8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000C
  .dword 0x0000000A
  .balign 8
  .qword A_Fall
  .dword 0x000002B9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000D
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002BA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000E
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002BB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000F
  .dword 0x0000001E
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002BC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000031
  .dword 0x0000000F
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BossDeath
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000002BD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002BF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002C0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002C1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002C2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002C3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000003
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002C5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000004
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002C6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00008005
  .dword 0x00000005
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002C7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00008005
  .dword 0x00000000
  .balign 8
  .qword A_PainAttack
  .dword 0x000002BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002C9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword A_Pain
  .dword 0x000002BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00008007
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002CB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00008008
  .dword 0x00000008
  .balign 8
  .qword A_Scream
  .dword 0x000002CC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00008009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002CD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000800A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002CE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000800B
  .dword 0x00000008
  .balign 8
  .qword A_PainDie
  .dword 0x000002CF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000800C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000000B
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x0000000A
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000009
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000008
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000032
  .dword 0x00000007
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002BE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000002D7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000001
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x000002D6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002D9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000001
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000002
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002DF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000003
  .dword 0x00000003
  .balign 8
  .qword A_Chase
  .dword 0x000002D8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000004
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002E1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000005
  .dword 0x0000000A
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002E2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00008006
  .dword 0x00000004
  .balign 8
  .qword A_CPosAttack
  .dword 0x000002E3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000005
  .dword 0x00000006
  .balign 8
  .qword A_FaceTarget
  .dword 0x000002E4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00008006
  .dword 0x00000004
  .balign 8
  .qword A_CPosAttack
  .dword 0x000002E5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000005
  .dword 0x00000001
  .balign 8
  .qword A_CPosRefire
  .dword 0x000002E1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000007
  .dword 0x00000003
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002E7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000007
  .dword 0x00000003
  .balign 8
  .qword A_Pain
  .dword 0x000002D8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002E9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword A_Scream
  .dword 0x000002EA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000002EB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002EC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000C
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000D
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002EE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000E
  .dword 0x00000005
  .balign 8
  .qword A_XScream
  .dword 0x000002EF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000F
  .dword 0x00000005
  .balign 8
  .qword A_Fall
  .dword 0x000002F0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000010
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000011
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000012
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000013
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000014
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000015
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000C
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000B
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x0000000A
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002F9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000009
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002FA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000008
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002D8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002FB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002FD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000002FE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000002
  .dword 0x00000006
  .balign 8
  .qword A_Scream
  .dword 0x000002FF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000004
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000301
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000005
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000006
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000303
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000007
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000304
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000008
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000305
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x00000009
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000306
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x0000000A
  .dword 0x00000006
  .balign 8
  .qword A_KeenDie
  .dword 0x00000307
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x0000000B
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x0000000C
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000309
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000034
  .dword 0x0000000C
  .dword 0x00000008
  .balign 8
  .qword A_Pain
  .dword 0x000002FB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000001
  .dword 0x00000024
  .balign 8
  .qword A_BrainPain
  .dword 0x0000030A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000000
  .dword 0x00000064
  .balign 8
  .qword A_BrainScream
  .dword 0x0000030D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000030E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000030F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000035
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword A_BrainDie
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword A_Look
  .dword 0x00000310
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x000000B5
  .balign 8
  .qword A_BrainAwake
  .dword 0x00000312
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000033
  .dword 0x00000000
  .dword 0x00000096
  .balign 8
  .qword A_BrainSpit
  .dword 0x00000312
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000036
  .dword 0x00008000
  .dword 0x00000003
  .balign 8
  .qword A_SpawnSound
  .dword 0x00000314
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000036
  .dword 0x00008001
  .dword 0x00000003
  .balign 8
  .qword A_SpawnFly
  .dword 0x00000315
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000036
  .dword 0x00008002
  .dword 0x00000003
  .balign 8
  .qword A_SpawnFly
  .dword 0x00000316
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000036
  .dword 0x00008003
  .dword 0x00000003
  .balign 8
  .qword A_SpawnFly
  .dword 0x00000313
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x00000318
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x00000319
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x0000031A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x0000031B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008004
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x0000031C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008005
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x0000031D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008006
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x0000031E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000020
  .dword 0x00008007
  .dword 0x00000004
  .balign 8
  .qword A_Fire
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000320
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008002
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000321
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000016
  .dword 0x00008003
  .dword 0x0000000A
  .balign 8
  .qword A_BrainExplode
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000037
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000323
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000037
  .dword 0x00008001
  .dword 0x00000007
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000322
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000038
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000325
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000038
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000324
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000039
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000327
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000039
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000326
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003A
  .dword 0x00008000
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000329
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003A
  .dword 0x00008001
  .dword 0x00000005
  .balign 8
  .qword A_Scream
  .dword 0x0000032A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003A
  .dword 0x00008002
  .dword 0x00000005
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000032B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003A
  .dword 0x00008003
  .dword 0x0000000A
  .balign 8
  .qword A_Explode
  .dword 0x0000032C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003A
  .dword 0x00008004
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003B
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000032E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003B
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000032F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003B
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000032D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000331
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000332
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000333
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000334
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000335
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003C
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000330
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000337
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000338
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000339
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003D
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000336
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003E
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003E
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003F
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000003F
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000033E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000040
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000341
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000040
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000340
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000041
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000343
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000041
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000342
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000042
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000345
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000042
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000344
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000043
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000347
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000043
  .dword 0x00008001
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000346
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000044
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000045
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000046
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000034A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000047
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000351
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000047
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000352
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000047
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000353
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000047
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000350
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000048
  .dword 0x00008000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000049
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000356
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000049
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000357
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000049
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000358
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000049
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000355
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004A
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000035A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004A
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000035B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004A
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000035C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004A
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000359
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004B
  .dword 0x00008000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000035F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000360
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000361
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008003
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000362
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000363
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004C
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000035E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004D
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000365
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004D
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000364
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004E
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000004F
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000050
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000051
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000052
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000053
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000054
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000055
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000056
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000057
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000058
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000059
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005A
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005B
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005C
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005D
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005E
  .dword 0x00008000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000005F
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000060
  .dword 0x00000000
  .dword 0x0000000A
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000379
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000060
  .dword 0x00000001
  .dword 0x0000000F
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000037A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000060
  .dword 0x00000002
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000037B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000060
  .dword 0x00000001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000378
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x0000000D
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000001C
  .dword 0x00000012
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000061
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000062
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000063
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000064
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000382
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000064
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000381
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000065
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000066
  .dword 0x00000000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000385
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000066
  .dword 0x00000001
  .dword 0x00000008
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000384
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000067
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000068
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000069
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006A
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006B
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006C
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006D
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006E
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000006F
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000070
  .dword 0x00008000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000071
  .dword 0x00008000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000072
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000073
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000074
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000075
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000076
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000396
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000076
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000397
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000076
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000398
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000076
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000395
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000077
  .dword 0x00008000
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039A
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000077
  .dword 0x00008001
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039B
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000077
  .dword 0x00008002
  .dword 0x00000006
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000399
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000078
  .dword 0x00000000
  .dword 0x0000000E
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039D
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000078
  .dword 0x00000001
  .dword 0x0000000E
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039C
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000079
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039F
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000079
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000079
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000079
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x0000039E
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007A
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007A
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007A
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007A
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007B
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A7
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007B
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007B
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A9
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007B
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003A6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007C
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AB
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007C
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AC
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007C
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AD
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007C
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AA
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007D
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007D
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007D
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007D
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003AE
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007E
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B3
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007E
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007E
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007E
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003B2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x0000007F
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000080
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000081
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000082
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000083
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000084
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000085
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000086
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000087
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000088
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000088
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C1
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000088
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C2
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000088
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003BF
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000089
  .dword 0x00008000
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C4
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000089
  .dword 0x00008001
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C5
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000089
  .dword 0x00008002
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C6
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .dword 0x00000089
  .dword 0x00008003
  .dword 0x00000004
  .balign 8
  .qword 0x0000000000000000
  .dword 0x000003C3
  .dword 0x00000000
  .dword 0x00000000
  .balign 16
  .resb 16

mobjinfo:
  .dword 0xFFFFFFFF
  .dword 0x00000095
  .dword 0x00000064
  .dword 0x00000096
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000009C
  .dword 0x000000FF
  .dword 0x00000019
  .dword 0x00000000
  .dword 0x0000009A
  .dword 0x0000009E
  .dword 0x000000A5
  .dword 0x00000039
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000C06
  .dword 0x00000000
  .dword 0x00000BBC
  .dword 0x000000AE
  .dword 0x00000014
  .dword 0x000000B0
  .dword 0x00000024
  .dword 0x00000008
  .dword 0x00000001
  .dword 0x000000BB
  .dword 0x000000C8
  .dword 0x0000001B
  .dword 0x00000000
  .dword 0x000000B8
  .dword 0x000000BD
  .dword 0x000000C2
  .dword 0x0000003B
  .dword 0x00000008
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x00400006
  .dword 0x000000CB
  .dword 0x00000009
  .dword 0x000000CF
  .dword 0x0000001E
  .dword 0x000000D1
  .dword 0x00000025
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000000DC
  .dword 0x000000AA
  .dword 0x0000001B
  .dword 0x00000000
  .dword 0x000000D9
  .dword 0x000000DE
  .dword 0x000000E3
  .dword 0x0000003C
  .dword 0x00000008
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x00400006
  .dword 0x000000EC
  .dword 0x00000040
  .dword 0x000000F1
  .dword 0x000002BC
  .dword 0x000000F3
  .dword 0x00000030
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x0000010D
  .dword 0x0000000A
  .dword 0x0000001C
  .dword 0x00000000
  .dword 0x000000FF
  .dword 0x0000010F
  .dword 0x00000000
  .dword 0x00000047
  .dword 0x0000000F
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x000001F4
  .dword 0x00000000
  .dword 0x00000050
  .dword 0x00400006
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000119
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x00000042
  .dword 0x00000141
  .dword 0x0000012C
  .dword 0x00000143
  .dword 0x0000006A
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000157
  .dword 0x00000064
  .dword 0x0000001B
  .dword 0x0000014F
  .dword 0x00000153
  .dword 0x00000159
  .dword 0x00000000
  .dword 0x0000004A
  .dword 0x0000000A
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x000001F4
  .dword 0x00000000
  .dword 0x00000069
  .dword 0x00400006
  .dword 0x0000015F
  .dword 0xFFFFFFFF
  .dword 0x0000013C
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000006B
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000013E
  .dword 0x00000000
  .dword 0x00000052
  .dword 0x000A0000
  .dword 0x000B0000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x0000000A
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000137
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x00000043
  .dword 0x0000016A
  .dword 0x00000258
  .dword 0x0000016C
  .dword 0x00000031
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000182
  .dword 0x00000050
  .dword 0x0000001D
  .dword 0x00000000
  .dword 0x00000178
  .dword 0x00000184
  .dword 0x00000000
  .dword 0x00000064
  .dword 0x00000008
  .dword 0x00300000
  .dword 0x00400000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x00400006
  .dword 0x0000018E
  .dword 0xFFFFFFFF
  .dword 0x00000165
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000167
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x00140000
  .dword 0x00060000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0x00000041
  .dword 0x00000196
  .dword 0x00000046
  .dword 0x00000198
  .dword 0x00000025
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000001A4
  .dword 0x000000AA
  .dword 0x0000001B
  .dword 0x00000000
  .dword 0x000001A0
  .dword 0x000001A6
  .dword 0x000001AD
  .dword 0x0000003C
  .dword 0x00000008
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x00400006
  .dword 0x000001B3
  .dword 0x00000BB9
  .dword 0x000001BA
  .dword 0x0000003C
  .dword 0x000001BC
  .dword 0x00000027
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000001C7
  .dword 0x000000C8
  .dword 0x0000001B
  .dword 0x000001C4
  .dword 0x000001C4
  .dword 0x000001C9
  .dword 0x000001CE
  .dword 0x0000003E
  .dword 0x00000008
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x0000004C
  .dword 0x00400006
  .dword 0x000001D6
  .dword 0x00000BBA
  .dword 0x000001DB
  .dword 0x00000096
  .dword 0x000001DD
  .dword 0x00000029
  .dword 0x00000008
  .dword 0x00000034
  .dword 0x000001E8
  .dword 0x000000B4
  .dword 0x0000001A
  .dword 0x000001E5
  .dword 0x00000000
  .dword 0x000001EA
  .dword 0x00000000
  .dword 0x00000040
  .dword 0x0000000A
  .dword 0x001E0000
  .dword 0x00380000
  .dword 0x00000190
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00400006
  .dword 0x000001F0
  .dword 0x0000003A
  .dword 0x000001DB
  .dword 0x00000096
  .dword 0x000001DD
  .dword 0x00000029
  .dword 0x00000008
  .dword 0x00000034
  .dword 0x000001E8
  .dword 0x000000B4
  .dword 0x0000001A
  .dword 0x000001E5
  .dword 0x00000000
  .dword 0x000001EA
  .dword 0x00000000
  .dword 0x00000040
  .dword 0x0000000A
  .dword 0x001E0000
  .dword 0x00380000
  .dword 0x00000190
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00440006
  .dword 0x000001F0
  .dword 0x00000BBD
  .dword 0x000001F6
  .dword 0x00000190
  .dword 0x000001F7
  .dword 0x0000002A
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000001FB
  .dword 0x00000080
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x000001F8
  .dword 0x000001FE
  .dword 0x00000000
  .dword 0x00000041
  .dword 0x00000008
  .dword 0x001F0000
  .dword 0x00380000
  .dword 0x00000190
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00404206
  .dword 0x00000204
  .dword 0x00000BBB
  .dword 0x0000020F
  .dword 0x000003E8
  .dword 0x00000211
  .dword 0x0000002B
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x0000021C
  .dword 0x00000032
  .dword 0x0000001A
  .dword 0x00000219
  .dword 0x00000219
  .dword 0x0000021E
  .dword 0x00000000
  .dword 0x00000043
  .dword 0x00000008
  .dword 0x00180000
  .dword 0x00400000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00400006
  .dword 0x00000225
  .dword 0xFFFFFFFF
  .dword 0x0000020A
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000020C
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x000F0000
  .dword 0x00060000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0x00000045
  .dword 0x0000022C
  .dword 0x000001F4
  .dword 0x0000022E
  .dword 0x0000002F
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000239
  .dword 0x00000032
  .dword 0x0000001A
  .dword 0x00000236
  .dword 0x00000236
  .dword 0x0000023B
  .dword 0x00000000
  .dword 0x00000048
  .dword 0x00000008
  .dword 0x00180000
  .dword 0x00400000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00400006
  .dword 0x00000242
  .dword 0x00000BBE
  .dword 0x00000249
  .dword 0x00000064
  .dword 0x0000024B
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000033
  .dword 0x00000251
  .dword 0x00000100
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x0000024D
  .dword 0x00000253
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x00000008
  .dword 0x00100000
  .dword 0x00380000
  .dword 0x00000032
  .dword 0x00000003
  .dword 0x0000004D
  .dword 0x00004206
  .dword 0x00000000
  .dword 0x00000007
  .dword 0x00000259
  .dword 0x00000BB8
  .dword 0x0000025B
  .dword 0x0000002D
  .dword 0x00000008
  .dword 0x00000002
  .dword 0x0000026B
  .dword 0x00000028
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x00000267
  .dword 0x0000026D
  .dword 0x00000000
  .dword 0x00000045
  .dword 0x0000000C
  .dword 0x00800000
  .dword 0x00640000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00400006
  .dword 0x00000000
  .dword 0x00000044
  .dword 0x00000278
  .dword 0x000001F4
  .dword 0x0000027A
  .dword 0x0000002E
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x0000028B
  .dword 0x00000080
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x00000287
  .dword 0x0000028D
  .dword 0x00000000
  .dword 0x00000046
  .dword 0x0000000C
  .dword 0x00400000
  .dword 0x00400000
  .dword 0x00000258
  .dword 0x00000000
  .dword 0x0000004E
  .dword 0x00400006
  .dword 0x00000294
  .dword 0x00000010
  .dword 0x000002A2
  .dword 0x00000FA0
  .dword 0x000002A4
  .dword 0x0000002C
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000002B2
  .dword 0x00000014
  .dword 0x0000001A
  .dword 0x00000000
  .dword 0x000002AC
  .dword 0x000002B3
  .dword 0x00000000
  .dword 0x00000044
  .dword 0x00000010
  .dword 0x00280000
  .dword 0x006E0000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00400006
  .dword 0x00000000
  .dword 0x00000047
  .dword 0x000002BD
  .dword 0x00000190
  .dword 0x000002BE
  .dword 0x00000032
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000002C8
  .dword 0x00000080
  .dword 0x0000001E
  .dword 0x00000000
  .dword 0x000002C4
  .dword 0x000002CA
  .dword 0x00000000
  .dword 0x00000049
  .dword 0x00000008
  .dword 0x001F0000
  .dword 0x00380000
  .dword 0x00000190
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x00404206
  .dword 0x000002D0
  .dword 0x00000054
  .dword 0x000002D6
  .dword 0x00000032
  .dword 0x000002D8
  .dword 0x00000065
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x000002E6
  .dword 0x000000AA
  .dword 0x0000001B
  .dword 0x00000000
  .dword 0x000002E0
  .dword 0x000002E8
  .dword 0x000002ED
  .dword 0x00000066
  .dword 0x00000008
  .dword 0x00140000
  .dword 0x00380000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x00400006
  .dword 0x000002F6
  .dword 0x00000048
  .dword 0x000002FB
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000308
  .dword 0x00000100
  .dword 0x00000067
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x000002FC
  .dword 0x00000000
  .dword 0x00000068
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00480000
  .dword 0x00989680
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00400306
  .dword 0x00000000
  .dword 0x00000058
  .dword 0x0000030A
  .dword 0x000000FA
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x0000030B
  .dword 0x000000FF
  .dword 0x00000061
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000030C
  .dword 0x00000000
  .dword 0x00000062
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00989680
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000006
  .dword 0x00000000
  .dword 0x00000059
  .dword 0x00000310
  .dword 0x000003E8
  .dword 0x00000311
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00200000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000018
  .dword 0x00000000
  .dword 0x00000057
  .dword 0x00000000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00200000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000018
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000313
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000005E
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x000A0000
  .dword 0x00060000
  .dword 0x00200000
  .dword 0x00000064
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00011610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000317
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x000007F3
  .dword 0x00000326
  .dword 0x00000014
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000328
  .dword 0x00000000
  .dword 0x00000052
  .dword 0x00000000
  .dword 0x000A0000
  .dword 0x002A0000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00080006
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000061
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000063
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x000A0000
  .dword 0x00060000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000003
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000066
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000068
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x000A0000
  .dword 0x00060000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000005
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000072
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x0000000E
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000007F
  .dword 0x00000000
  .dword 0x00000052
  .dword 0x00140000
  .dword 0x000B0000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000014
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000006B
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000006D
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x00190000
  .dword 0x000D0000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000005
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000073
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000075
  .dword 0x00000000
  .dword 0x0000000F
  .dword 0x00190000
  .dword 0x000D0000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000029B
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000029D
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x00190000
  .dword 0x000D0000
  .dword 0x00080000
  .dword 0x00000064
  .dword 0x00000005
  .dword 0x00000000
  .dword 0x00010610
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000005D
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000005A
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x00000082
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000008E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x0000000E
  .dword 0x00000000
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000018
  .dword 0x00000000
  .dword 0xFFFFFFFF
  .dword 0x0000007B
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000210
  .dword 0x00000000
  .dword 0x000007E2
  .dword 0x00000322
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007E3
  .dword 0x00000324
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007DE
  .dword 0x00000330
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007DF
  .dword 0x00000336
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x00000005
  .dword 0x0000033C
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x0000000D
  .dword 0x0000033E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x00000006
  .dword 0x00000340
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x00000027
  .dword 0x00000346
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x00000026
  .dword 0x00000344
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x00000028
  .dword 0x00000342
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x02000001
  .dword 0x00000000
  .dword 0x000007DB
  .dword 0x00000348
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007DC
  .dword 0x00000349
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007DD
  .dword 0x0000034A
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007E6
  .dword 0x00000350
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007E7
  .dword 0x00000354
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007E8
  .dword 0x00000355
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007E9
  .dword 0x0000035D
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007EA
  .dword 0x0000035E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007FD
  .dword 0x00000364
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x00000053
  .dword 0x00000359
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00800001
  .dword 0x00000000
  .dword 0x000007D7
  .dword 0x00000366
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000800
  .dword 0x00000367
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007DA
  .dword 0x00000368
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007FE
  .dword 0x00000369
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007FF
  .dword 0x0000036A
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000011
  .dword 0x0000036B
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D8
  .dword 0x0000036C
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000801
  .dword 0x0000036D
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x0000036E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D6
  .dword 0x0000036F
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D2
  .dword 0x00000370
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D5
  .dword 0x00000371
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D3
  .dword 0x00000372
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D4
  .dword 0x00000373
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x000007D1
  .dword 0x00000374
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000052
  .dword 0x00000375
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000001
  .dword 0x00000000
  .dword 0x00000055
  .dword 0x000003BF
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000056
  .dword 0x000003C3
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x000007EC
  .dword 0x00000376
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000001E
  .dword 0x0000038B
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000001F
  .dword 0x0000038C
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000020
  .dword 0x0000038D
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000021
  .dword 0x0000038E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000025
  .dword 0x00000391
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000024
  .dword 0x0000039C
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000029
  .dword 0x00000395
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002A
  .dword 0x00000399
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002B
  .dword 0x00000392
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002C
  .dword 0x0000039E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002D
  .dword 0x000003A2
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002E
  .dword 0x000003A6
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000037
  .dword 0x000003AA
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000038
  .dword 0x000003AE
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000039
  .dword 0x000003B2
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000002F
  .dword 0x0000038A
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000030
  .dword 0x00000394
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000022
  .dword 0x0000038F
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000023
  .dword 0x00000390
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000031
  .dword 0x00000378
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00440000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x00000032
  .dword 0x00000386
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00540000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x00000033
  .dword 0x00000387
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00540000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x00000034
  .dword 0x00000388
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00440000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x00000035
  .dword 0x00000389
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00340000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000003B
  .dword 0x00000386
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00540000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x0000003C
  .dword 0x00000388
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00440000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x0000003D
  .dword 0x00000387
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00340000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x0000003E
  .dword 0x00000389
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00340000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x0000003F
  .dword 0x00000378
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00440000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000300
  .dword 0x00000000
  .dword 0x00000016
  .dword 0x00000203
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000F
  .dword 0x000000A4
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000012
  .dword 0x000000C1
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000015
  .dword 0x000001EF
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000017
  .dword 0x00000258
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000014
  .dword 0x000001CD
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000013
  .dword 0x000000E2
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000A
  .dword 0x000000AD
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000C
  .dword 0x000000AD
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000001C
  .dword 0x0000037E
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000018
  .dword 0x0000037F
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000001B
  .dword 0x00000380
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000001D
  .dword 0x00000381
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000019
  .dword 0x00000383
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x0000001A
  .dword 0x00000384
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000036
  .dword 0x00000393
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00200000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000046
  .dword 0x0000032D
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x00000000
  .dword 0x00000049
  .dword 0x000003B6
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00580000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004A
  .dword 0x000003B7
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00580000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004B
  .dword 0x000003B8
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00400000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004C
  .dword 0x000003B9
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00400000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004D
  .dword 0x000003BA
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00400000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004E
  .dword 0x000003BB
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00100000
  .dword 0x00400000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000302
  .dword 0x00000000
  .dword 0x0000004F
  .dword 0x000003BC
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000050
  .dword 0x000003BD
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000051
  .dword 0x000003BE
  .dword 0x000003E8
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00002454
  .dword 0x000003BD
  .dword 0x000186A0
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00140000
  .dword 0x00100000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00002455
  .dword 0x000003BD
  .dword 0x000186A0
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00780000
  .dword 0x00780000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00080006
  .dword 0x00000000
  .dword 0x00002456
  .dword 0x000003BD
  .dword 0x000186A0
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00780000
  .dword 0x00780000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00080006
  .dword 0x00000000
  .dword 0x00002457
  .dword 0x000003BD
  .dword 0x000186A0
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00780000
  .dword 0x00780000
  .dword 0x00000064
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00080006
  .dword 0x00000000
  .balign 8

cheat_commercial_noclip_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xE2
  .byte 0x36
  .byte 0xB2
  .byte 0x2A
  .byte 0xFF
  .balign 8

TU7A00CB85/epsd0animinfo:
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x000000E0
  .dword 0x00000068
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x000000B8
  .dword 0x000000A0
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000070
  .dword 0x00000088
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000048
  .dword 0x00000070
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000058
  .dword 0x00000060
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000040
  .dword 0x00000030
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x000000C0
  .dword 0x00000028
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000088
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000050
  .dword 0x00000010
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000040
  .dword 0x00000018
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 16
  .resb 16

finetangent:
  .dword 0xF5D01DA0
  .dword 0xFC9AC588
  .dword 0xFDF678A8
  .dword 0xFE8B7B7C
  .dword 0xFEDE43FC
  .dword 0xFF12F211
  .dword 0xFF376A91
  .dword 0xFF522955
  .dword 0xFF669D19
  .dword 0xFF76C29B
  .dword 0xFF83D4C9
  .dword 0xFF8EA108
  .dword 0xFF97B301
  .dword 0xFF9F6CFE
  .dword 0xFFA61629
  .dword 0xFFABE350
  .dword 0xFFB0FC75
  .dword 0xFFB58072
  .dword 0xFFB98779
  .dword 0xFFBD24C2
  .dword 0xFFC067C7
  .dword 0xFFC35D21
  .dword 0xFFC60F2A
  .dword 0xFFC8867A
  .dword 0xFFCACA43
  .dword 0xFFCCE093
  .dword 0xFFCECE92
  .dword 0xFFD098A5
  .dword 0xFFD24293
  .dword 0xFFD3CFA2
  .dword 0xFFD542A9
  .dword 0xFFD69E22
  .dword 0xFFD7E43B
  .dword 0xFFD916DC
  .dword 0xFFDA37B8
  .dword 0xFFDB484E
  .dword 0xFFDC49F6
  .dword 0xFFDD3DE1
  .dword 0xFFDE2521
  .dword 0xFFDF00AC
  .dword 0xFFDFD161
  .dword 0xFFE09807
  .dword 0xFFE15555
  .dword 0xFFE209F0
  .dword 0xFFE2B66E
  .dword 0xFFE35B57
  .dword 0xFFE3F92A
  .dword 0xFFE49051
  .dword 0xFFE52144
  .dword 0xFFE5AC5C
  .dword 0xFFE631F3
  .dword 0xFFE6B25A
  .dword 0xFFE72DDE
  .dword 0xFFE7A4C4
  .dword 0xFFE8174E
  .dword 0xFFE885B8
  .dword 0xFFE8F039
  .dword 0xFFE95707
  .dword 0xFFE9BA52
  .dword 0xFFEA1A47
  .dword 0xFFEA7710
  .dword 0xFFEAD0D6
  .dword 0xFFEB27BC
  .dword 0xFFEB7BE7
  .dword 0xFFEBCD76
  .dword 0xFFEC1C88
  .dword 0xFFEC6939
  .dword 0xFFECB3A6
  .dword 0xFFECFBE6
  .dword 0xFFED4213
  .dword 0xFFED8643
  .dword 0xFFEDC88A
  .dword 0xFFEE08FF
  .dword 0xFFEE47B2
  .dword 0xFFEE84B7
  .dword 0xFFEEC01F
  .dword 0xFFEEF9FA
  .dword 0xFFEF3257
  .dword 0xFFEF6944
  .dword 0xFFEF9ED1
  .dword 0xFFEFD309
  .dword 0xFFF005FA
  .dword 0xFFF037AE
  .dword 0xFFF06833
  .dword 0xFFF09792
  .dword 0xFFF0C5D5
  .dword 0xFFF0F307
  .dword 0xFFF11F32
  .dword 0xFFF14A5D
  .dword 0xFFF17491
  .dword 0xFFF19DD7
  .dword 0xFFF1C636
  .dword 0xFFF1EDB6
  .dword 0xFFF2145F
  .dword 0xFFF23A36
  .dword 0xFFF25F43
  .dword 0xFFF2838B
  .dword 0xFFF2A716
  .dword 0xFFF2C9E7
  .dword 0xFFF2EC07
  .dword 0xFFF30D78
  .dword 0xFFF32E41
  .dword 0xFFF34E66
  .dword 0xFFF36DED
  .dword 0xFFF38CDA
  .dword 0xFFF3AB31
  .dword 0xFFF3C8F7
  .dword 0xFFF3E62F
  .dword 0xFFF402DD
  .dword 0xFFF41F06
  .dword 0xFFF43AAD
  .dword 0xFFF455D4
  .dword 0xFFF47081
  .dword 0xFFF48AB6
  .dword 0xFFF4A475
  .dword 0xFFF4BDC3
  .dword 0xFFF4D6A2
  .dword 0xFFF4EF15
  .dword 0xFFF5071E
  .dword 0xFFF51EC1
  .dword 0xFFF53600
  .dword 0xFFF54CDD
  .dword 0xFFF5635A
  .dword 0xFFF5797B
  .dword 0xFFF58F41
  .dword 0xFFF5A4AF
  .dword 0xFFF5B9C6
  .dword 0xFFF5CE88
  .dword 0xFFF5E2F8
  .dword 0xFFF5F718
  .dword 0xFFF60AE8
  .dword 0xFFF61E6C
  .dword 0xFFF631A5
  .dword 0xFFF64495
  .dword 0xFFF6573C
  .dword 0xFFF6699D
  .dword 0xFFF67BBA
  .dword 0xFFF68D93
  .dword 0xFFF69F2B
  .dword 0xFFF6B082
  .dword 0xFFF6C19A
  .dword 0xFFF6D275
  .dword 0xFFF6E313
  .dword 0xFFF6F377
  .dword 0xFFF703A0
  .dword 0xFFF71391
  .dword 0xFFF7234B
  .dword 0xFFF732CE
  .dword 0xFFF7421B
  .dword 0xFFF75135
  .dword 0xFFF7601B
  .dword 0xFFF76ED0
  .dword 0xFFF77D53
  .dword 0xFFF78BA6
  .dword 0xFFF799C9
  .dword 0xFFF7A7BF
  .dword 0xFFF7B586
  .dword 0xFFF7C322
  .dword 0xFFF7D091
  .dword 0xFFF7DDD6
  .dword 0xFFF7EAF0
  .dword 0xFFF7F7E2
  .dword 0xFFF804AA
  .dword 0xFFF8114B
  .dword 0xFFF81DC5
  .dword 0xFFF82A18
  .dword 0xFFF83646
  .dword 0xFFF8424F
  .dword 0xFFF84E33
  .dword 0xFFF859F3
  .dword 0xFFF86591
  .dword 0xFFF8710C
  .dword 0xFFF87C65
  .dword 0xFFF8879D
  .dword 0xFFF892B4
  .dword 0xFFF89DAB
  .dword 0xFFF8A882
  .dword 0xFFF8B33A
  .dword 0xFFF8BDD4
  .dword 0xFFF8C84F
  .dword 0xFFF8D2AD
  .dword 0xFFF8DCEE
  .dword 0xFFF8E713
  .dword 0xFFF8F11B
  .dword 0xFFF8FB08
  .dword 0xFFF904D9
  .dword 0xFFF90E90
  .dword 0xFFF9182C
  .dword 0xFFF921AF
  .dword 0xFFF92B18
  .dword 0xFFF93467
  .dword 0xFFF93D9E
  .dword 0xFFF946BD
  .dword 0xFFF94FC4
  .dword 0xFFF958B3
  .dword 0xFFF9618B
  .dword 0xFFF96A4C
  .dword 0xFFF972F7
  .dword 0xFFF97B8B
  .dword 0xFFF98409
  .dword 0xFFF98C72
  .dword 0xFFF994C6
  .dword 0xFFF99D05
  .dword 0xFFF9A52F
  .dword 0xFFF9AD45
  .dword 0xFFF9B548
  .dword 0xFFF9BD36
  .dword 0xFFF9C511
  .dword 0xFFF9CCD9
  .dword 0xFFF9D48E
  .dword 0xFFF9DC30
  .dword 0xFFF9E3C0
  .dword 0xFFF9EB3E
  .dword 0xFFF9F2AA
  .dword 0xFFF9FA05
  .dword 0xFFFA014E
  .dword 0xFFFA0886
  .dword 0xFFFA0FAE
  .dword 0xFFFA16C5
  .dword 0xFFFA1DCB
  .dword 0xFFFA24C1
  .dword 0xFFFA2BA8
  .dword 0xFFFA327E
  .dword 0xFFFA3945
  .dword 0xFFFA3FFD
  .dword 0xFFFA46A6
  .dword 0xFFFA4D40
  .dword 0xFFFA53CB
  .dword 0xFFFA5A47
  .dword 0xFFFA60B5
  .dword 0xFFFA6716
  .dword 0xFFFA6D68
  .dword 0xFFFA73AC
  .dword 0xFFFA79E3
  .dword 0xFFFA800C
  .dword 0xFFFA8628
  .dword 0xFFFA8C37
  .dword 0xFFFA9239
  .dword 0xFFFA982F
  .dword 0xFFFA9E18
  .dword 0xFFFAA3F4
  .dword 0xFFFAA9C4
  .dword 0xFFFAAF88
  .dword 0xFFFAB540
  .dword 0xFFFABAEC
  .dword 0xFFFAC08C
  .dword 0xFFFAC621
  .dword 0xFFFACBAA
  .dword 0xFFFAD129
  .dword 0xFFFAD69C
  .dword 0xFFFADC04
  .dword 0xFFFAE161
  .dword 0xFFFAE6B3
  .dword 0xFFFAEBFB
  .dword 0xFFFAF138
  .dword 0xFFFAF66B
  .dword 0xFFFAFB94
  .dword 0xFFFB00B2
  .dword 0xFFFB05C7
  .dword 0xFFFB0AD2
  .dword 0xFFFB0FD3
  .dword 0xFFFB14CA
  .dword 0xFFFB19B7
  .dword 0xFFFB1E9C
  .dword 0xFFFB2377
  .dword 0xFFFB2848
  .dword 0xFFFB2D11
  .dword 0xFFFB31D0
  .dword 0xFFFB3687
  .dword 0xFFFB3B34
  .dword 0xFFFB3FD9
  .dword 0xFFFB4476
  .dword 0xFFFB4909
  .dword 0xFFFB4D95
  .dword 0xFFFB5218
  .dword 0xFFFB5693
  .dword 0xFFFB5B05
  .dword 0xFFFB5F70
  .dword 0xFFFB63D2
  .dword 0xFFFB682D
  .dword 0xFFFB6C80
  .dword 0xFFFB70CB
  .dword 0xFFFB750E
  .dword 0xFFFB794A
  .dword 0xFFFB7D7E
  .dword 0xFFFB81AB
  .dword 0xFFFB85D1
  .dword 0xFFFB89EF
  .dword 0xFFFB8E06
  .dword 0xFFFB9216
  .dword 0xFFFB961F
  .dword 0xFFFB9A21
  .dword 0xFFFB9E1C
  .dword 0xFFFBA210
  .dword 0xFFFBA5FE
  .dword 0xFFFBA9E4
  .dword 0xFFFBADC5
  .dword 0xFFFBB19E
  .dword 0xFFFBB571
  .dword 0xFFFBB93E
  .dword 0xFFFBBD04
  .dword 0xFFFBC0C4
  .dword 0xFFFBC47E
  .dword 0xFFFBC832
  .dword 0xFFFBCBDF
  .dword 0xFFFBCF87
  .dword 0xFFFBD328
  .dword 0xFFFBD6C4
  .dword 0xFFFBDA5A
  .dword 0xFFFBDDE9
  .dword 0xFFFBE173
  .dword 0xFFFBE4F8
  .dword 0xFFFBE877
  .dword 0xFFFBEBF0
  .dword 0xFFFBEF63
  .dword 0xFFFBF2D1
  .dword 0xFFFBF63A
  .dword 0xFFFBF99D
  .dword 0xFFFBFCFB
  .dword 0xFFFC0054
  .dword 0xFFFC03A7
  .dword 0xFFFC06F5
  .dword 0xFFFC0A3E
  .dword 0xFFFC0D82
  .dword 0xFFFC10C1
  .dword 0xFFFC13FB
  .dword 0xFFFC1730
  .dword 0xFFFC1A60
  .dword 0xFFFC1D8B
  .dword 0xFFFC20B2
  .dword 0xFFFC23D3
  .dword 0xFFFC26F0
  .dword 0xFFFC2A08
  .dword 0xFFFC2D1C
  .dword 0xFFFC302B
  .dword 0xFFFC3335
  .dword 0xFFFC363B
  .dword 0xFFFC393C
  .dword 0xFFFC3C39
  .dword 0xFFFC3F32
  .dword 0xFFFC4226
  .dword 0xFFFC4516
  .dword 0xFFFC4801
  .dword 0xFFFC4AE9
  .dword 0xFFFC4DCC
  .dword 0xFFFC50AB
  .dword 0xFFFC5385
  .dword 0xFFFC565C
  .dword 0xFFFC592E
  .dword 0xFFFC5BFD
  .dword 0xFFFC5EC7
  .dword 0xFFFC618E
  .dword 0xFFFC6451
  .dword 0xFFFC670F
  .dword 0xFFFC69CA
  .dword 0xFFFC6C81
  .dword 0xFFFC6F34
  .dword 0xFFFC71E4
  .dword 0xFFFC7490
  .dword 0xFFFC7738
  .dword 0xFFFC79DC
  .dword 0xFFFC7C7D
  .dword 0xFFFC7F1A
  .dword 0xFFFC81B3
  .dword 0xFFFC8449
  .dword 0xFFFC86DB
  .dword 0xFFFC896A
  .dword 0xFFFC8BF6
  .dword 0xFFFC8E7E
  .dword 0xFFFC9102
  .dword 0xFFFC9383
  .dword 0xFFFC9601
  .dword 0xFFFC987C
  .dword 0xFFFC9AF3
  .dword 0xFFFC9D67
  .dword 0xFFFC9FD7
  .dword 0xFFFCA245
  .dword 0xFFFCA4AF
  .dword 0xFFFCA716
  .dword 0xFFFCA97A
  .dword 0xFFFCABDB
  .dword 0xFFFCAE38
  .dword 0xFFFCB093
  .dword 0xFFFCB2EB
  .dword 0xFFFCB53F
  .dword 0xFFFCB791
  .dword 0xFFFCB9DF
  .dword 0xFFFCBC2B
  .dword 0xFFFCBE73
  .dword 0xFFFCC0B9
  .dword 0xFFFCC2FC
  .dword 0xFFFCC53C
  .dword 0xFFFCC779
  .dword 0xFFFCC9B3
  .dword 0xFFFCCBEB
  .dword 0xFFFCCE20
  .dword 0xFFFCD051
  .dword 0xFFFCD281
  .dword 0xFFFCD4AD
  .dword 0xFFFCD6D7
  .dword 0xFFFCD8FE
  .dword 0xFFFCDB23
  .dword 0xFFFCDD44
  .dword 0xFFFCDF64
  .dword 0xFFFCE180
  .dword 0xFFFCE39A
  .dword 0xFFFCE5B2
  .dword 0xFFFCE7C7
  .dword 0xFFFCE9D9
  .dword 0xFFFCEBE9
  .dword 0xFFFCEDF6
  .dword 0xFFFCF001
  .dword 0xFFFCF20A
  .dword 0xFFFCF410
  .dword 0xFFFCF613
  .dword 0xFFFCF814
  .dword 0xFFFCFA13
  .dword 0xFFFCFC10
  .dword 0xFFFCFE0A
  .dword 0xFFFD0002
  .dword 0xFFFD01F7
  .dword 0xFFFD03EA
  .dword 0xFFFD05DB
  .dword 0xFFFD07CA
  .dword 0xFFFD09B6
  .dword 0xFFFD0BA1
  .dword 0xFFFD0D89
  .dword 0xFFFD0F6E
  .dword 0xFFFD1152
  .dword 0xFFFD1333
  .dword 0xFFFD1513
  .dword 0xFFFD16F0
  .dword 0xFFFD18CB
  .dword 0xFFFD1AA3
  .dword 0xFFFD1C7A
  .dword 0xFFFD1E4F
  .dword 0xFFFD2022
  .dword 0xFFFD21F2
  .dword 0xFFFD23C1
  .dword 0xFFFD258D
  .dword 0xFFFD2758
  .dword 0xFFFD2920
  .dword 0xFFFD2AE7
  .dword 0xFFFD2CAB
  .dword 0xFFFD2E6E
  .dword 0xFFFD302E
  .dword 0xFFFD31ED
  .dword 0xFFFD33AA
  .dword 0xFFFD3565
  .dword 0xFFFD371E
  .dword 0xFFFD38D5
  .dword 0xFFFD3A8A
  .dword 0xFFFD3C3E
  .dword 0xFFFD3DEF
  .dword 0xFFFD3F9F
  .dword 0xFFFD414D
  .dword 0xFFFD42F9
  .dword 0xFFFD44A3
  .dword 0xFFFD464C
  .dword 0xFFFD47F2
  .dword 0xFFFD4997
  .dword 0xFFFD4B3B
  .dword 0xFFFD4CDC
  .dword 0xFFFD4E7C
  .dword 0xFFFD501A
  .dword 0xFFFD51B6
  .dword 0xFFFD5351
  .dword 0xFFFD54EA
  .dword 0xFFFD5681
  .dword 0xFFFD5817
  .dword 0xFFFD59AB
  .dword 0xFFFD5B3D
  .dword 0xFFFD5CCE
  .dword 0xFFFD5E5D
  .dword 0xFFFD5FEB
  .dword 0xFFFD6177
  .dword 0xFFFD6301
  .dword 0xFFFD648A
  .dword 0xFFFD6611
  .dword 0xFFFD6797
  .dword 0xFFFD691B
  .dword 0xFFFD6A9D
  .dword 0xFFFD6C1E
  .dword 0xFFFD6D9E
  .dword 0xFFFD6F1C
  .dword 0xFFFD7098
  .dword 0xFFFD7213
  .dword 0xFFFD738D
  .dword 0xFFFD7505
  .dword 0xFFFD767B
  .dword 0xFFFD77F0
  .dword 0xFFFD7964
  .dword 0xFFFD7AD6
  .dword 0xFFFD7C47
  .dword 0xFFFD7DB6
  .dword 0xFFFD7F24
  .dword 0xFFFD8091
  .dword 0xFFFD81FC
  .dword 0xFFFD8366
  .dword 0xFFFD84CE
  .dword 0xFFFD8635
  .dword 0xFFFD879B
  .dword 0xFFFD88FF
  .dword 0xFFFD8A62
  .dword 0xFFFD8BC4
  .dword 0xFFFD8D24
  .dword 0xFFFD8E83
  .dword 0xFFFD8FE1
  .dword 0xFFFD913D
  .dword 0xFFFD9299
  .dword 0xFFFD93F2
  .dword 0xFFFD954B
  .dword 0xFFFD96A2
  .dword 0xFFFD97F8
  .dword 0xFFFD994D
  .dword 0xFFFD9AA0
  .dword 0xFFFD9BF2
  .dword 0xFFFD9D43
  .dword 0xFFFD9E93
  .dword 0xFFFD9FE2
  .dword 0xFFFDA12F
  .dword 0xFFFDA27B
  .dword 0xFFFDA3C6
  .dword 0xFFFDA510
  .dword 0xFFFDA658
  .dword 0xFFFDA79F
  .dword 0xFFFDA8E6
  .dword 0xFFFDAA2B
  .dword 0xFFFDAB6E
  .dword 0xFFFDACB1
  .dword 0xFFFDADF3
  .dword 0xFFFDAF33
  .dword 0xFFFDB072
  .dword 0xFFFDB1B0
  .dword 0xFFFDB2ED
  .dword 0xFFFDB429
  .dword 0xFFFDB564
  .dword 0xFFFDB69D
  .dword 0xFFFDB7D6
  .dword 0xFFFDB90D
  .dword 0xFFFDBA44
  .dword 0xFFFDBB79
  .dword 0xFFFDBCAD
  .dword 0xFFFDBDE0
  .dword 0xFFFDBF13
  .dword 0xFFFDC044
  .dword 0xFFFDC174
  .dword 0xFFFDC2A2
  .dword 0xFFFDC3D0
  .dword 0xFFFDC4FD
  .dword 0xFFFDC629
  .dword 0xFFFDC754
  .dword 0xFFFDC87E
  .dword 0xFFFDC9A6
  .dword 0xFFFDCACE
  .dword 0xFFFDCBF5
  .dword 0xFFFDCD1B
  .dword 0xFFFDCE40
  .dword 0xFFFDCF63
  .dword 0xFFFDD086
  .dword 0xFFFDD1A8
  .dword 0xFFFDD2C9
  .dword 0xFFFDD3E9
  .dword 0xFFFDD508
  .dword 0xFFFDD626
  .dword 0xFFFDD743
  .dword 0xFFFDD85F
  .dword 0xFFFDD97A
  .dword 0xFFFDDA95
  .dword 0xFFFDDBAE
  .dword 0xFFFDDCC6
  .dword 0xFFFDDDDE
  .dword 0xFFFDDEF4
  .dword 0xFFFDE00A
  .dword 0xFFFDE11F
  .dword 0xFFFDE233
  .dword 0xFFFDE346
  .dword 0xFFFDE458
  .dword 0xFFFDE569
  .dword 0xFFFDE679
  .dword 0xFFFDE789
  .dword 0xFFFDE897
  .dword 0xFFFDE9A5
  .dword 0xFFFDEAB2
  .dword 0xFFFDEBBE
  .dword 0xFFFDECC9
  .dword 0xFFFDEDD3
  .dword 0xFFFDEEDD
  .dword 0xFFFDEFE5
  .dword 0xFFFDF0ED
  .dword 0xFFFDF1F4
  .dword 0xFFFDF2FA
  .dword 0xFFFDF3FF
  .dword 0xFFFDF504
  .dword 0xFFFDF607
  .dword 0xFFFDF70A
  .dword 0xFFFDF80C
  .dword 0xFFFDF90D
  .dword 0xFFFDFA0E
  .dword 0xFFFDFB0D
  .dword 0xFFFDFC0C
  .dword 0xFFFDFD0A
  .dword 0xFFFDFE08
  .dword 0xFFFDFF04
  .dword 0xFFFE0000
  .dword 0xFFFE00FB
  .dword 0xFFFE01F5
  .dword 0xFFFE02EE
  .dword 0xFFFE03E7
  .dword 0xFFFE04DF
  .dword 0xFFFE05D6
  .dword 0xFFFE06CC
  .dword 0xFFFE07C2
  .dword 0xFFFE08B7
  .dword 0xFFFE09AB
  .dword 0xFFFE0A9F
  .dword 0xFFFE0B91
  .dword 0xFFFE0C83
  .dword 0xFFFE0D75
  .dword 0xFFFE0E65
  .dword 0xFFFE0F55
  .dword 0xFFFE1044
  .dword 0xFFFE1133
  .dword 0xFFFE1220
  .dword 0xFFFE130D
  .dword 0xFFFE13F9
  .dword 0xFFFE14E5
  .dword 0xFFFE15D0
  .dword 0xFFFE16BA
  .dword 0xFFFE17A4
  .dword 0xFFFE188D
  .dword 0xFFFE1975
  .dword 0xFFFE1A5C
  .dword 0xFFFE1B43
  .dword 0xFFFE1C29
  .dword 0xFFFE1D0F
  .dword 0xFFFE1DF4
  .dword 0xFFFE1ED8
  .dword 0xFFFE1FBB
  .dword 0xFFFE209E
  .dword 0xFFFE2180
  .dword 0xFFFE2262
  .dword 0xFFFE2343
  .dword 0xFFFE2423
  .dword 0xFFFE2503
  .dword 0xFFFE25E2
  .dword 0xFFFE26C0
  .dword 0xFFFE279E
  .dword 0xFFFE287B
  .dword 0xFFFE2957
  .dword 0xFFFE2A33
  .dword 0xFFFE2B0E
  .dword 0xFFFE2BE9
  .dword 0xFFFE2CC3
  .dword 0xFFFE2D9C
  .dword 0xFFFE2E75
  .dword 0xFFFE2F4D
  .dword 0xFFFE3025
  .dword 0xFFFE30FC
  .dword 0xFFFE31D2
  .dword 0xFFFE32A8
  .dword 0xFFFE337D
  .dword 0xFFFE3452
  .dword 0xFFFE3526
  .dword 0xFFFE35FA
  .dword 0xFFFE36CC
  .dword 0xFFFE379F
  .dword 0xFFFE3871
  .dword 0xFFFE3942
  .dword 0xFFFE3A12
  .dword 0xFFFE3AE2
  .dword 0xFFFE3BB2
  .dword 0xFFFE3C81
  .dword 0xFFFE3D4F
  .dword 0xFFFE3E1D
  .dword 0xFFFE3EEA
  .dword 0xFFFE3FB7
  .dword 0xFFFE4083
  .dword 0xFFFE414E
  .dword 0xFFFE4219
  .dword 0xFFFE42E4
  .dword 0xFFFE43AE
  .dword 0xFFFE4477
  .dword 0xFFFE4540
  .dword 0xFFFE4609
  .dword 0xFFFE46D0
  .dword 0xFFFE4798
  .dword 0xFFFE485E
  .dword 0xFFFE4925
  .dword 0xFFFE49EA
  .dword 0xFFFE4AB0
  .dword 0xFFFE4B74
  .dword 0xFFFE4C38
  .dword 0xFFFE4CFC
  .dword 0xFFFE4DBF
  .dword 0xFFFE4E82
  .dword 0xFFFE4F44
  .dword 0xFFFE5006
  .dword 0xFFFE50C7
  .dword 0xFFFE5188
  .dword 0xFFFE5248
  .dword 0xFFFE5307
  .dword 0xFFFE53C6
  .dword 0xFFFE5485
  .dword 0xFFFE5543
  .dword 0xFFFE5601
  .dword 0xFFFE56BE
  .dword 0xFFFE577B
  .dword 0xFFFE5837
  .dword 0xFFFE58F3
  .dword 0xFFFE59AE
  .dword 0xFFFE5A69
  .dword 0xFFFE5B23
  .dword 0xFFFE5BDD
  .dword 0xFFFE5C97
  .dword 0xFFFE5D50
  .dword 0xFFFE5E08
  .dword 0xFFFE5EC0
  .dword 0xFFFE5F78
  .dword 0xFFFE602F
  .dword 0xFFFE60E6
  .dword 0xFFFE619C
  .dword 0xFFFE6252
  .dword 0xFFFE6307
  .dword 0xFFFE63BC
  .dword 0xFFFE6470
  .dword 0xFFFE6524
  .dword 0xFFFE65D8
  .dword 0xFFFE668B
  .dword 0xFFFE673D
  .dword 0xFFFE67EF
  .dword 0xFFFE68A1
  .dword 0xFFFE6953
  .dword 0xFFFE6A03
  .dword 0xFFFE6AB4
  .dword 0xFFFE6B64
  .dword 0xFFFE6C14
  .dword 0xFFFE6CC3
  .dword 0xFFFE6D72
  .dword 0xFFFE6E20
  .dword 0xFFFE6ECE
  .dword 0xFFFE6F7B
  .dword 0xFFFE7028
  .dword 0xFFFE70D5
  .dword 0xFFFE7181
  .dword 0xFFFE722D
  .dword 0xFFFE72D9
  .dword 0xFFFE7384
  .dword 0xFFFE742E
  .dword 0xFFFE74D9
  .dword 0xFFFE7582
  .dword 0xFFFE762C
  .dword 0xFFFE76D5
  .dword 0xFFFE777E
  .dword 0xFFFE7826
  .dword 0xFFFE78CE
  .dword 0xFFFE7975
  .dword 0xFFFE7A1C
  .dword 0xFFFE7AC3
  .dword 0xFFFE7B69
  .dword 0xFFFE7C0F
  .dword 0xFFFE7CB4
  .dword 0xFFFE7D5A
  .dword 0xFFFE7DFE
  .dword 0xFFFE7EA3
  .dword 0xFFFE7F47
  .dword 0xFFFE7FEA
  .dword 0xFFFE808D
  .dword 0xFFFE8130
  .dword 0xFFFE81D3
  .dword 0xFFFE8275
  .dword 0xFFFE8317
  .dword 0xFFFE83B8
  .dword 0xFFFE8459
  .dword 0xFFFE84FA
  .dword 0xFFFE859A
  .dword 0xFFFE863A
  .dword 0xFFFE86D9
  .dword 0xFFFE8779
  .dword 0xFFFE8817
  .dword 0xFFFE88B6
  .dword 0xFFFE8954
  .dword 0xFFFE89F2
  .dword 0xFFFE8A8F
  .dword 0xFFFE8B2C
  .dword 0xFFFE8BC9
  .dword 0xFFFE8C65
  .dword 0xFFFE8D01
  .dword 0xFFFE8D9D
  .dword 0xFFFE8E38
  .dword 0xFFFE8ED3
  .dword 0xFFFE8F6E
  .dword 0xFFFE9008
  .dword 0xFFFE90A2
  .dword 0xFFFE913C
  .dword 0xFFFE91D5
  .dword 0xFFFE926E
  .dword 0xFFFE9306
  .dword 0xFFFE939F
  .dword 0xFFFE9437
  .dword 0xFFFE94CE
  .dword 0xFFFE9566
  .dword 0xFFFE95FD
  .dword 0xFFFE9693
  .dword 0xFFFE9729
  .dword 0xFFFE97BF
  .dword 0xFFFE9855
  .dword 0xFFFE98EA
  .dword 0xFFFE997F
  .dword 0xFFFE9A14
  .dword 0xFFFE9AA8
  .dword 0xFFFE9B3C
  .dword 0xFFFE9BD0
  .dword 0xFFFE9C64
  .dword 0xFFFE9CF7
  .dword 0xFFFE9D8A
  .dword 0xFFFE9E1C
  .dword 0xFFFE9EAE
  .dword 0xFFFE9F40
  .dword 0xFFFE9FD2
  .dword 0xFFFEA063
  .dword 0xFFFEA0F4
  .dword 0xFFFEA184
  .dword 0xFFFEA215
  .dword 0xFFFEA2A5
  .dword 0xFFFEA334
  .dword 0xFFFEA3C4
  .dword 0xFFFEA453
  .dword 0xFFFEA4E2
  .dword 0xFFFEA570
  .dword 0xFFFEA5FF
  .dword 0xFFFEA68D
  .dword 0xFFFEA71A
  .dword 0xFFFEA7A8
  .dword 0xFFFEA835
  .dword 0xFFFEA8C1
  .dword 0xFFFEA94E
  .dword 0xFFFEA9DA
  .dword 0xFFFEAA66
  .dword 0xFFFEAAF2
  .dword 0xFFFEAB7D
  .dword 0xFFFEAC08
  .dword 0xFFFEAC93
  .dword 0xFFFEAD1D
  .dword 0xFFFEADA8
  .dword 0xFFFEAE31
  .dword 0xFFFEAEBB
  .dword 0xFFFEAF44
  .dword 0xFFFEAFCE
  .dword 0xFFFEB056
  .dword 0xFFFEB0DF
  .dword 0xFFFEB167
  .dword 0xFFFEB1EF
  .dword 0xFFFEB277
  .dword 0xFFFEB2FE
  .dword 0xFFFEB386
  .dword 0xFFFEB40C
  .dword 0xFFFEB493
  .dword 0xFFFEB51A
  .dword 0xFFFEB5A0
  .dword 0xFFFEB625
  .dword 0xFFFEB6AB
  .dword 0xFFFEB730
  .dword 0xFFFEB7B5
  .dword 0xFFFEB83A
  .dword 0xFFFEB8BF
  .dword 0xFFFEB943
  .dword 0xFFFEB9C7
  .dword 0xFFFEBA4B
  .dword 0xFFFEBACE
  .dword 0xFFFEBB52
  .dword 0xFFFEBBD5
  .dword 0xFFFEBC57
  .dword 0xFFFEBCDA
  .dword 0xFFFEBD5C
  .dword 0xFFFEBDDE
  .dword 0xFFFEBE60
  .dword 0xFFFEBEE1
  .dword 0xFFFEBF62
  .dword 0xFFFEBFE3
  .dword 0xFFFEC064
  .dword 0xFFFEC0E5
  .dword 0xFFFEC165
  .dword 0xFFFEC1E5
  .dword 0xFFFEC265
  .dword 0xFFFEC2E4
  .dword 0xFFFEC363
  .dword 0xFFFEC3E3
  .dword 0xFFFEC461
  .dword 0xFFFEC4E0
  .dword 0xFFFEC55E
  .dword 0xFFFEC5DC
  .dword 0xFFFEC65A
  .dword 0xFFFEC6D8
  .dword 0xFFFEC755
  .dword 0xFFFEC7D2
  .dword 0xFFFEC84F
  .dword 0xFFFEC8CC
  .dword 0xFFFEC948
  .dword 0xFFFEC9C4
  .dword 0xFFFECA40
  .dword 0xFFFECABC
  .dword 0xFFFECB38
  .dword 0xFFFECBB3
  .dword 0xFFFECC2E
  .dword 0xFFFECCA9
  .dword 0xFFFECD23
  .dword 0xFFFECD9E
  .dword 0xFFFECE18
  .dword 0xFFFECE92
  .dword 0xFFFECF0C
  .dword 0xFFFECF85
  .dword 0xFFFECFFE
  .dword 0xFFFED077
  .dword 0xFFFED0F0
  .dword 0xFFFED169
  .dword 0xFFFED1E1
  .dword 0xFFFED259
  .dword 0xFFFED2D1
  .dword 0xFFFED349
  .dword 0xFFFED3C0
  .dword 0xFFFED438
  .dword 0xFFFED4AF
  .dword 0xFFFED526
  .dword 0xFFFED59C
  .dword 0xFFFED613
  .dword 0xFFFED689
  .dword 0xFFFED6FF
  .dword 0xFFFED775
  .dword 0xFFFED7EB
  .dword 0xFFFED860
  .dword 0xFFFED8D5
  .dword 0xFFFED94A
  .dword 0xFFFED9BF
  .dword 0xFFFEDA33
  .dword 0xFFFEDAA8
  .dword 0xFFFEDB1C
  .dword 0xFFFEDB90
  .dword 0xFFFEDC04
  .dword 0xFFFEDC77
  .dword 0xFFFEDCEB
  .dword 0xFFFEDD5E
  .dword 0xFFFEDDD1
  .dword 0xFFFEDE44
  .dword 0xFFFEDEB6
  .dword 0xFFFEDF28
  .dword 0xFFFEDF9B
  .dword 0xFFFEE00D
  .dword 0xFFFEE07E
  .dword 0xFFFEE0F0
  .dword 0xFFFEE161
  .dword 0xFFFEE1D2
  .dword 0xFFFEE243
  .dword 0xFFFEE2B4
  .dword 0xFFFEE325
  .dword 0xFFFEE395
  .dword 0xFFFEE405
  .dword 0xFFFEE475
  .dword 0xFFFEE4E5
  .dword 0xFFFEE555
  .dword 0xFFFEE5C4
  .dword 0xFFFEE634
  .dword 0xFFFEE6A3
  .dword 0xFFFEE712
  .dword 0xFFFEE780
  .dword 0xFFFEE7EF
  .dword 0xFFFEE85D
  .dword 0xFFFEE8CB
  .dword 0xFFFEE939
  .dword 0xFFFEE9A7
  .dword 0xFFFEEA15
  .dword 0xFFFEEA82
  .dword 0xFFFEEAEF
  .dword 0xFFFEEB5C
  .dword 0xFFFEEBC9
  .dword 0xFFFEEC36
  .dword 0xFFFEECA2
  .dword 0xFFFEED0F
  .dword 0xFFFEED7B
  .dword 0xFFFEEDE7
  .dword 0xFFFEEE53
  .dword 0xFFFEEEBE
  .dword 0xFFFEEF2A
  .dword 0xFFFEEF95
  .dword 0xFFFEF000
  .dword 0xFFFEF06B
  .dword 0xFFFEF0D6
  .dword 0xFFFEF140
  .dword 0xFFFEF1AB
  .dword 0xFFFEF215
  .dword 0xFFFEF27F
  .dword 0xFFFEF2E9
  .dword 0xFFFEF353
  .dword 0xFFFEF3BC
  .dword 0xFFFEF426
  .dword 0xFFFEF48F
  .dword 0xFFFEF4F8
  .dword 0xFFFEF561
  .dword 0xFFFEF5C9
  .dword 0xFFFEF632
  .dword 0xFFFEF69A
  .dword 0xFFFEF703
  .dword 0xFFFEF76B
  .dword 0xFFFEF7D3
  .dword 0xFFFEF83A
  .dword 0xFFFEF8A2
  .dword 0xFFFEF909
  .dword 0xFFFEF970
  .dword 0xFFFEF9D7
  .dword 0xFFFEFA3E
  .dword 0xFFFEFAA5
  .dword 0xFFFEFB0C
  .dword 0xFFFEFB72
  .dword 0xFFFEFBD8
  .dword 0xFFFEFC3E
  .dword 0xFFFEFCA4
  .dword 0xFFFEFD0A
  .dword 0xFFFEFD70
  .dword 0xFFFEFDD5
  .dword 0xFFFEFE3B
  .dword 0xFFFEFEA0
  .dword 0xFFFEFF05
  .dword 0xFFFEFF6A
  .dword 0xFFFEFFCE
  .dword 0xFFFF0033
  .dword 0xFFFF0097
  .dword 0xFFFF00FB
  .dword 0xFFFF015F
  .dword 0xFFFF01C3
  .dword 0xFFFF0227
  .dword 0xFFFF028B
  .dword 0xFFFF02EE
  .dword 0xFFFF0351
  .dword 0xFFFF03B5
  .dword 0xFFFF0418
  .dword 0xFFFF047B
  .dword 0xFFFF04DD
  .dword 0xFFFF0540
  .dword 0xFFFF05A2
  .dword 0xFFFF0604
  .dword 0xFFFF0667
  .dword 0xFFFF06C9
  .dword 0xFFFF072A
  .dword 0xFFFF078C
  .dword 0xFFFF07EE
  .dword 0xFFFF084F
  .dword 0xFFFF08B0
  .dword 0xFFFF0911
  .dword 0xFFFF0972
  .dword 0xFFFF09D3
  .dword 0xFFFF0A34
  .dword 0xFFFF0A94
  .dword 0xFFFF0AF5
  .dword 0xFFFF0B55
  .dword 0xFFFF0BB5
  .dword 0xFFFF0C15
  .dword 0xFFFF0C75
  .dword 0xFFFF0CD5
  .dword 0xFFFF0D34
  .dword 0xFFFF0D94
  .dword 0xFFFF0DF3
  .dword 0xFFFF0E52
  .dword 0xFFFF0EB1
  .dword 0xFFFF0F10
  .dword 0xFFFF0F6F
  .dword 0xFFFF0FCD
  .dword 0xFFFF102C
  .dword 0xFFFF108A
  .dword 0xFFFF10E8
  .dword 0xFFFF1146
  .dword 0xFFFF11A4
  .dword 0xFFFF1202
  .dword 0xFFFF125F
  .dword 0xFFFF12BD
  .dword 0xFFFF131A
  .dword 0xFFFF1378
  .dword 0xFFFF13D5
  .dword 0xFFFF1432
  .dword 0xFFFF148F
  .dword 0xFFFF14EB
  .dword 0xFFFF1548
  .dword 0xFFFF15A4
  .dword 0xFFFF1601
  .dword 0xFFFF165D
  .dword 0xFFFF16B9
  .dword 0xFFFF1715
  .dword 0xFFFF1771
  .dword 0xFFFF17CC
  .dword 0xFFFF1828
  .dword 0xFFFF1883
  .dword 0xFFFF18DF
  .dword 0xFFFF193A
  .dword 0xFFFF1995
  .dword 0xFFFF19F0
  .dword 0xFFFF1A4B
  .dword 0xFFFF1AA5
  .dword 0xFFFF1B00
  .dword 0xFFFF1B5A
  .dword 0xFFFF1BB5
  .dword 0xFFFF1C0F
  .dword 0xFFFF1C69
  .dword 0xFFFF1CC3
  .dword 0xFFFF1D1D
  .dword 0xFFFF1D76
  .dword 0xFFFF1DD0
  .dword 0xFFFF1E29
  .dword 0xFFFF1E83
  .dword 0xFFFF1EDC
  .dword 0xFFFF1F35
  .dword 0xFFFF1F8E
  .dword 0xFFFF1FE7
  .dword 0xFFFF203F
  .dword 0xFFFF2098
  .dword 0xFFFF20F0
  .dword 0xFFFF2149
  .dword 0xFFFF21A1
  .dword 0xFFFF21F9
  .dword 0xFFFF2251
  .dword 0xFFFF22A9
  .dword 0xFFFF2301
  .dword 0xFFFF2359
  .dword 0xFFFF23B0
  .dword 0xFFFF2408
  .dword 0xFFFF245F
  .dword 0xFFFF24B6
  .dword 0xFFFF250D
  .dword 0xFFFF2564
  .dword 0xFFFF25BB
  .dword 0xFFFF2612
  .dword 0xFFFF2668
  .dword 0xFFFF26BF
  .dword 0xFFFF2715
  .dword 0xFFFF276C
  .dword 0xFFFF27C2
  .dword 0xFFFF2818
  .dword 0xFFFF286E
  .dword 0xFFFF28C4
  .dword 0xFFFF2919
  .dword 0xFFFF296F
  .dword 0xFFFF29C5
  .dword 0xFFFF2A1A
  .dword 0xFFFF2A6F
  .dword 0xFFFF2AC5
  .dword 0xFFFF2B1A
  .dword 0xFFFF2B6F
  .dword 0xFFFF2BC3
  .dword 0xFFFF2C18
  .dword 0xFFFF2C6D
  .dword 0xFFFF2CC1
  .dword 0xFFFF2D16
  .dword 0xFFFF2D6A
  .dword 0xFFFF2DBE
  .dword 0xFFFF2E13
  .dword 0xFFFF2E67
  .dword 0xFFFF2EBA
  .dword 0xFFFF2F0E
  .dword 0xFFFF2F62
  .dword 0xFFFF2FB6
  .dword 0xFFFF3009
  .dword 0xFFFF305C
  .dword 0xFFFF30B0
  .dword 0xFFFF3103
  .dword 0xFFFF3156
  .dword 0xFFFF31A9
  .dword 0xFFFF31FC
  .dword 0xFFFF324F
  .dword 0xFFFF32A1
  .dword 0xFFFF32F4
  .dword 0xFFFF3346
  .dword 0xFFFF3399
  .dword 0xFFFF33EB
  .dword 0xFFFF343D
  .dword 0xFFFF348F
  .dword 0xFFFF34E1
  .dword 0xFFFF3533
  .dword 0xFFFF3585
  .dword 0xFFFF35D6
  .dword 0xFFFF3628
  .dword 0xFFFF3679
  .dword 0xFFFF36CB
  .dword 0xFFFF371C
  .dword 0xFFFF376D
  .dword 0xFFFF37BE
  .dword 0xFFFF380F
  .dword 0xFFFF3860
  .dword 0xFFFF38B1
  .dword 0xFFFF3902
  .dword 0xFFFF3952
  .dword 0xFFFF39A3
  .dword 0xFFFF39F3
  .dword 0xFFFF3A43
  .dword 0xFFFF3A94
  .dword 0xFFFF3AE4
  .dword 0xFFFF3B34
  .dword 0xFFFF3B84
  .dword 0xFFFF3BD3
  .dword 0xFFFF3C23
  .dword 0xFFFF3C73
  .dword 0xFFFF3CC2
  .dword 0xFFFF3D12
  .dword 0xFFFF3D61
  .dword 0xFFFF3DB0
  .dword 0xFFFF3E00
  .dword 0xFFFF3E4F
  .dword 0xFFFF3E9E
  .dword 0xFFFF3EED
  .dword 0xFFFF3F3B
  .dword 0xFFFF3F8A
  .dword 0xFFFF3FD9
  .dword 0xFFFF4027
  .dword 0xFFFF4076
  .dword 0xFFFF40C4
  .dword 0xFFFF4112
  .dword 0xFFFF4161
  .dword 0xFFFF41AF
  .dword 0xFFFF41FD
  .dword 0xFFFF424B
  .dword 0xFFFF4298
  .dword 0xFFFF42E6
  .dword 0xFFFF4334
  .dword 0xFFFF4381
  .dword 0xFFFF43CF
  .dword 0xFFFF441C
  .dword 0xFFFF446A
  .dword 0xFFFF44B7
  .dword 0xFFFF4504
  .dword 0xFFFF4551
  .dword 0xFFFF459E
  .dword 0xFFFF45EB
  .dword 0xFFFF4638
  .dword 0xFFFF4684
  .dword 0xFFFF46D1
  .dword 0xFFFF471D
  .dword 0xFFFF476A
  .dword 0xFFFF47B6
  .dword 0xFFFF4802
  .dword 0xFFFF484F
  .dword 0xFFFF489B
  .dword 0xFFFF48E7
  .dword 0xFFFF4933
  .dword 0xFFFF497F
  .dword 0xFFFF49CA
  .dword 0xFFFF4A16
  .dword 0xFFFF4A62
  .dword 0xFFFF4AAD
  .dword 0xFFFF4AF9
  .dword 0xFFFF4B44
  .dword 0xFFFF4B8F
  .dword 0xFFFF4BDA
  .dword 0xFFFF4C26
  .dword 0xFFFF4C71
  .dword 0xFFFF4CBC
  .dword 0xFFFF4D06
  .dword 0xFFFF4D51
  .dword 0xFFFF4D9C
  .dword 0xFFFF4DE7
  .dword 0xFFFF4E31
  .dword 0xFFFF4E7C
  .dword 0xFFFF4EC6
  .dword 0xFFFF4F10
  .dword 0xFFFF4F5B
  .dword 0xFFFF4FA5
  .dword 0xFFFF4FEF
  .dword 0xFFFF5039
  .dword 0xFFFF5083
  .dword 0xFFFF50CD
  .dword 0xFFFF5116
  .dword 0xFFFF5160
  .dword 0xFFFF51AA
  .dword 0xFFFF51F3
  .dword 0xFFFF523D
  .dword 0xFFFF5286
  .dword 0xFFFF52CF
  .dword 0xFFFF5319
  .dword 0xFFFF5362
  .dword 0xFFFF53AB
  .dword 0xFFFF53F4
  .dword 0xFFFF543D
  .dword 0xFFFF5486
  .dword 0xFFFF54CE
  .dword 0xFFFF5517
  .dword 0xFFFF5560
  .dword 0xFFFF55A8
  .dword 0xFFFF55F1
  .dword 0xFFFF5639
  .dword 0xFFFF5682
  .dword 0xFFFF56CA
  .dword 0xFFFF5712
  .dword 0xFFFF575A
  .dword 0xFFFF57A2
  .dword 0xFFFF57EA
  .dword 0xFFFF5832
  .dword 0xFFFF587A
  .dword 0xFFFF58C2
  .dword 0xFFFF5909
  .dword 0xFFFF5951
  .dword 0xFFFF5998
  .dword 0xFFFF59E0
  .dword 0xFFFF5A27
  .dword 0xFFFF5A6F
  .dword 0xFFFF5AB6
  .dword 0xFFFF5AFD
  .dword 0xFFFF5B44
  .dword 0xFFFF5B8B
  .dword 0xFFFF5BD2
  .dword 0xFFFF5C19
  .dword 0xFFFF5C60
  .dword 0xFFFF5CA7
  .dword 0xFFFF5CED
  .dword 0xFFFF5D34
  .dword 0xFFFF5D7B
  .dword 0xFFFF5DC1
  .dword 0xFFFF5E07
  .dword 0xFFFF5E4E
  .dword 0xFFFF5E94
  .dword 0xFFFF5EDA
  .dword 0xFFFF5F20
  .dword 0xFFFF5F67
  .dword 0xFFFF5FAD
  .dword 0xFFFF5FF3
  .dword 0xFFFF6038
  .dword 0xFFFF607E
  .dword 0xFFFF60C4
  .dword 0xFFFF610A
  .dword 0xFFFF614F
  .dword 0xFFFF6195
  .dword 0xFFFF61DA
  .dword 0xFFFF6220
  .dword 0xFFFF6265
  .dword 0xFFFF62AA
  .dword 0xFFFF62F0
  .dword 0xFFFF6335
  .dword 0xFFFF637A
  .dword 0xFFFF63BF
  .dword 0xFFFF6404
  .dword 0xFFFF6449
  .dword 0xFFFF648E
  .dword 0xFFFF64D2
  .dword 0xFFFF6517
  .dword 0xFFFF655C
  .dword 0xFFFF65A0
  .dword 0xFFFF65E5
  .dword 0xFFFF6629
  .dword 0xFFFF666E
  .dword 0xFFFF66B2
  .dword 0xFFFF66F6
  .dword 0xFFFF673A
  .dword 0xFFFF677E
  .dword 0xFFFF67C3
  .dword 0xFFFF6807
  .dword 0xFFFF684B
  .dword 0xFFFF688E
  .dword 0xFFFF68D2
  .dword 0xFFFF6916
  .dword 0xFFFF695A
  .dword 0xFFFF699D
  .dword 0xFFFF69E1
  .dword 0xFFFF6A24
  .dword 0xFFFF6A68
  .dword 0xFFFF6AAB
  .dword 0xFFFF6AEF
  .dword 0xFFFF6B32
  .dword 0xFFFF6B75
  .dword 0xFFFF6BB8
  .dword 0xFFFF6BFB
  .dword 0xFFFF6C3E
  .dword 0xFFFF6C81
  .dword 0xFFFF6CC4
  .dword 0xFFFF6D07
  .dword 0xFFFF6D4A
  .dword 0xFFFF6D8D
  .dword 0xFFFF6DCF
  .dword 0xFFFF6E12
  .dword 0xFFFF6E55
  .dword 0xFFFF6E97
  .dword 0xFFFF6EDA
  .dword 0xFFFF6F1C
  .dword 0xFFFF6F5E
  .dword 0xFFFF6FA1
  .dword 0xFFFF6FE3
  .dword 0xFFFF7025
  .dword 0xFFFF7067
  .dword 0xFFFF70A9
  .dword 0xFFFF70EB
  .dword 0xFFFF712D
  .dword 0xFFFF716F
  .dword 0xFFFF71B1
  .dword 0xFFFF71F3
  .dword 0xFFFF7234
  .dword 0xFFFF7276
  .dword 0xFFFF72B8
  .dword 0xFFFF72F9
  .dword 0xFFFF733B
  .dword 0xFFFF737C
  .dword 0xFFFF73BD
  .dword 0xFFFF73FF
  .dword 0xFFFF7440
  .dword 0xFFFF7481
  .dword 0xFFFF74C2
  .dword 0xFFFF7504
  .dword 0xFFFF7545
  .dword 0xFFFF7586
  .dword 0xFFFF75C7
  .dword 0xFFFF7607
  .dword 0xFFFF7648
  .dword 0xFFFF7689
  .dword 0xFFFF76CA
  .dword 0xFFFF770A
  .dword 0xFFFF774B
  .dword 0xFFFF778C
  .dword 0xFFFF77CC
  .dword 0xFFFF780D
  .dword 0xFFFF784D
  .dword 0xFFFF788D
  .dword 0xFFFF78CE
  .dword 0xFFFF790E
  .dword 0xFFFF794E
  .dword 0xFFFF798E
  .dword 0xFFFF79CE
  .dword 0xFFFF7A0F
  .dword 0xFFFF7A4F
  .dword 0xFFFF7A8E
  .dword 0xFFFF7ACE
  .dword 0xFFFF7B0E
  .dword 0xFFFF7B4E
  .dword 0xFFFF7B8E
  .dword 0xFFFF7BCD
  .dword 0xFFFF7C0D
  .dword 0xFFFF7C4D
  .dword 0xFFFF7C8C
  .dword 0xFFFF7CCC
  .dword 0xFFFF7D0B
  .dword 0xFFFF7D4B
  .dword 0xFFFF7D8A
  .dword 0xFFFF7DC9
  .dword 0xFFFF7E08
  .dword 0xFFFF7E48
  .dword 0xFFFF7E87
  .dword 0xFFFF7EC6
  .dword 0xFFFF7F05
  .dword 0xFFFF7F44
  .dword 0xFFFF7F83
  .dword 0xFFFF7FC2
  .dword 0xFFFF8001
  .dword 0xFFFF803F
  .dword 0xFFFF807E
  .dword 0xFFFF80BD
  .dword 0xFFFF80FC
  .dword 0xFFFF813A
  .dword 0xFFFF8179
  .dword 0xFFFF81B7
  .dword 0xFFFF81F6
  .dword 0xFFFF8234
  .dword 0xFFFF8273
  .dword 0xFFFF82B1
  .dword 0xFFFF82EF
  .dword 0xFFFF832D
  .dword 0xFFFF836C
  .dword 0xFFFF83AA
  .dword 0xFFFF83E8
  .dword 0xFFFF8426
  .dword 0xFFFF8464
  .dword 0xFFFF84A2
  .dword 0xFFFF84E0
  .dword 0xFFFF851E
  .dword 0xFFFF855C
  .dword 0xFFFF8599
  .dword 0xFFFF85D7
  .dword 0xFFFF8615
  .dword 0xFFFF8652
  .dword 0xFFFF8690
  .dword 0xFFFF86CE
  .dword 0xFFFF870B
  .dword 0xFFFF8748
  .dword 0xFFFF8786
  .dword 0xFFFF87C3
  .dword 0xFFFF8801
  .dword 0xFFFF883E
  .dword 0xFFFF887B
  .dword 0xFFFF88B8
  .dword 0xFFFF88F6
  .dword 0xFFFF8933
  .dword 0xFFFF8970
  .dword 0xFFFF89AD
  .dword 0xFFFF89EA
  .dword 0xFFFF8A27
  .dword 0xFFFF8A64
  .dword 0xFFFF8AA0
  .dword 0xFFFF8ADD
  .dword 0xFFFF8B1A
  .dword 0xFFFF8B57
  .dword 0xFFFF8B93
  .dword 0xFFFF8BD0
  .dword 0xFFFF8C0D
  .dword 0xFFFF8C49
  .dword 0xFFFF8C86
  .dword 0xFFFF8CC2
  .dword 0xFFFF8CFF
  .dword 0xFFFF8D3B
  .dword 0xFFFF8D77
  .dword 0xFFFF8DB4
  .dword 0xFFFF8DF0
  .dword 0xFFFF8E2C
  .dword 0xFFFF8E68
  .dword 0xFFFF8EA4
  .dword 0xFFFF8EE1
  .dword 0xFFFF8F1D
  .dword 0xFFFF8F59
  .dword 0xFFFF8F95
  .dword 0xFFFF8FD1
  .dword 0xFFFF900C
  .dword 0xFFFF9048
  .dword 0xFFFF9084
  .dword 0xFFFF90C0
  .dword 0xFFFF90FC
  .dword 0xFFFF9137
  .dword 0xFFFF9173
  .dword 0xFFFF91AF
  .dword 0xFFFF91EA
  .dword 0xFFFF9226
  .dword 0xFFFF9261
  .dword 0xFFFF929D
  .dword 0xFFFF92D8
  .dword 0xFFFF9314
  .dword 0xFFFF934F
  .dword 0xFFFF938A
  .dword 0xFFFF93C5
  .dword 0xFFFF9401
  .dword 0xFFFF943C
  .dword 0xFFFF9477
  .dword 0xFFFF94B2
  .dword 0xFFFF94ED
  .dword 0xFFFF9528
  .dword 0xFFFF9563
  .dword 0xFFFF959E
  .dword 0xFFFF95D9
  .dword 0xFFFF9614
  .dword 0xFFFF964F
  .dword 0xFFFF968A
  .dword 0xFFFF96C4
  .dword 0xFFFF96FF
  .dword 0xFFFF973A
  .dword 0xFFFF9775
  .dword 0xFFFF97AF
  .dword 0xFFFF97EA
  .dword 0xFFFF9824
  .dword 0xFFFF985F
  .dword 0xFFFF9899
  .dword 0xFFFF98D4
  .dword 0xFFFF990E
  .dword 0xFFFF9949
  .dword 0xFFFF9983
  .dword 0xFFFF99BD
  .dword 0xFFFF99F8
  .dword 0xFFFF9A32
  .dword 0xFFFF9A6C
  .dword 0xFFFF9AA6
  .dword 0xFFFF9AE0
  .dword 0xFFFF9B1A
  .dword 0xFFFF9B54
  .dword 0xFFFF9B8E
  .dword 0xFFFF9BC8
  .dword 0xFFFF9C02
  .dword 0xFFFF9C3C
  .dword 0xFFFF9C76
  .dword 0xFFFF9CB0
  .dword 0xFFFF9CEA
  .dword 0xFFFF9D24
  .dword 0xFFFF9D5D
  .dword 0xFFFF9D97
  .dword 0xFFFF9DD1
  .dword 0xFFFF9E0A
  .dword 0xFFFF9E44
  .dword 0xFFFF9E7E
  .dword 0xFFFF9EB7
  .dword 0xFFFF9EF1
  .dword 0xFFFF9F2A
  .dword 0xFFFF9F64
  .dword 0xFFFF9F9D
  .dword 0xFFFF9FD6
  .dword 0xFFFFA010
  .dword 0xFFFFA049
  .dword 0xFFFFA082
  .dword 0xFFFFA0BB
  .dword 0xFFFFA0F5
  .dword 0xFFFFA12E
  .dword 0xFFFFA167
  .dword 0xFFFFA1A0
  .dword 0xFFFFA1D9
  .dword 0xFFFFA212
  .dword 0xFFFFA24B
  .dword 0xFFFFA284
  .dword 0xFFFFA2BD
  .dword 0xFFFFA2F6
  .dword 0xFFFFA32F
  .dword 0xFFFFA368
  .dword 0xFFFFA3A1
  .dword 0xFFFFA3D9
  .dword 0xFFFFA412
  .dword 0xFFFFA44B
  .dword 0xFFFFA484
  .dword 0xFFFFA4BC
  .dword 0xFFFFA4F5
  .dword 0xFFFFA52E
  .dword 0xFFFFA566
  .dword 0xFFFFA59F
  .dword 0xFFFFA5D7
  .dword 0xFFFFA610
  .dword 0xFFFFA648
  .dword 0xFFFFA681
  .dword 0xFFFFA6B9
  .dword 0xFFFFA6F1
  .dword 0xFFFFA72A
  .dword 0xFFFFA762
  .dword 0xFFFFA79A
  .dword 0xFFFFA7D3
  .dword 0xFFFFA80B
  .dword 0xFFFFA843
  .dword 0xFFFFA87B
  .dword 0xFFFFA8B3
  .dword 0xFFFFA8EB
  .dword 0xFFFFA923
  .dword 0xFFFFA95B
  .dword 0xFFFFA993
  .dword 0xFFFFA9CB
  .dword 0xFFFFAA03
  .dword 0xFFFFAA3B
  .dword 0xFFFFAA73
  .dword 0xFFFFAAAB
  .dword 0xFFFFAAE3
  .dword 0xFFFFAB1B
  .dword 0xFFFFAB52
  .dword 0xFFFFAB8A
  .dword 0xFFFFABC2
  .dword 0xFFFFABFA
  .dword 0xFFFFAC31
  .dword 0xFFFFAC69
  .dword 0xFFFFACA1
  .dword 0xFFFFACD8
  .dword 0xFFFFAD10
  .dword 0xFFFFAD47
  .dword 0xFFFFAD7F
  .dword 0xFFFFADB6
  .dword 0xFFFFADEE
  .dword 0xFFFFAE25
  .dword 0xFFFFAE5C
  .dword 0xFFFFAE94
  .dword 0xFFFFAECB
  .dword 0xFFFFAF02
  .dword 0xFFFFAF3A
  .dword 0xFFFFAF71
  .dword 0xFFFFAFA8
  .dword 0xFFFFAFDF
  .dword 0xFFFFB017
  .dword 0xFFFFB04E
  .dword 0xFFFFB085
  .dword 0xFFFFB0BC
  .dword 0xFFFFB0F3
  .dword 0xFFFFB12A
  .dword 0xFFFFB161
  .dword 0xFFFFB198
  .dword 0xFFFFB1CF
  .dword 0xFFFFB206
  .dword 0xFFFFB23D
  .dword 0xFFFFB274
  .dword 0xFFFFB2AB
  .dword 0xFFFFB2E2
  .dword 0xFFFFB318
  .dword 0xFFFFB34F
  .dword 0xFFFFB386
  .dword 0xFFFFB3BD
  .dword 0xFFFFB3F3
  .dword 0xFFFFB42A
  .dword 0xFFFFB461
  .dword 0xFFFFB497
  .dword 0xFFFFB4CE
  .dword 0xFFFFB505
  .dword 0xFFFFB53B
  .dword 0xFFFFB572
  .dword 0xFFFFB5A8
  .dword 0xFFFFB5DF
  .dword 0xFFFFB615
  .dword 0xFFFFB64C
  .dword 0xFFFFB682
  .dword 0xFFFFB6B8
  .dword 0xFFFFB6EF
  .dword 0xFFFFB725
  .dword 0xFFFFB75B
  .dword 0xFFFFB792
  .dword 0xFFFFB7C8
  .dword 0xFFFFB7FE
  .dword 0xFFFFB834
  .dword 0xFFFFB86B
  .dword 0xFFFFB8A1
  .dword 0xFFFFB8D7
  .dword 0xFFFFB90D
  .dword 0xFFFFB943
  .dword 0xFFFFB979
  .dword 0xFFFFB9AF
  .dword 0xFFFFB9E6
  .dword 0xFFFFBA1C
  .dword 0xFFFFBA52
  .dword 0xFFFFBA88
  .dword 0xFFFFBABD
  .dword 0xFFFFBAF3
  .dword 0xFFFFBB29
  .dword 0xFFFFBB5F
  .dword 0xFFFFBB95
  .dword 0xFFFFBBCB
  .dword 0xFFFFBC01
  .dword 0xFFFFBC37
  .dword 0xFFFFBC6C
  .dword 0xFFFFBCA2
  .dword 0xFFFFBCD8
  .dword 0xFFFFBD0E
  .dword 0xFFFFBD43
  .dword 0xFFFFBD79
  .dword 0xFFFFBDAF
  .dword 0xFFFFBDE4
  .dword 0xFFFFBE1A
  .dword 0xFFFFBE4F
  .dword 0xFFFFBE85
  .dword 0xFFFFBEBA
  .dword 0xFFFFBEF0
  .dword 0xFFFFBF25
  .dword 0xFFFFBF5B
  .dword 0xFFFFBF90
  .dword 0xFFFFBFC6
  .dword 0xFFFFBFFB
  .dword 0xFFFFC031
  .dword 0xFFFFC066
  .dword 0xFFFFC09B
  .dword 0xFFFFC0D1
  .dword 0xFFFFC106
  .dword 0xFFFFC13B
  .dword 0xFFFFC171
  .dword 0xFFFFC1A6
  .dword 0xFFFFC1DB
  .dword 0xFFFFC210
  .dword 0xFFFFC246
  .dword 0xFFFFC27B
  .dword 0xFFFFC2B0
  .dword 0xFFFFC2E5
  .dword 0xFFFFC31A
  .dword 0xFFFFC34F
  .dword 0xFFFFC384
  .dword 0xFFFFC3B9
  .dword 0xFFFFC3EE
  .dword 0xFFFFC423
  .dword 0xFFFFC458
  .dword 0xFFFFC48D
  .dword 0xFFFFC4C2
  .dword 0xFFFFC4F7
  .dword 0xFFFFC52C
  .dword 0xFFFFC561
  .dword 0xFFFFC596
  .dword 0xFFFFC5CB
  .dword 0xFFFFC600
  .dword 0xFFFFC635
  .dword 0xFFFFC669
  .dword 0xFFFFC69E
  .dword 0xFFFFC6D3
  .dword 0xFFFFC708
  .dword 0xFFFFC73D
  .dword 0xFFFFC771
  .dword 0xFFFFC7A6
  .dword 0xFFFFC7DB
  .dword 0xFFFFC80F
  .dword 0xFFFFC844
  .dword 0xFFFFC879
  .dword 0xFFFFC8AD
  .dword 0xFFFFC8E2
  .dword 0xFFFFC917
  .dword 0xFFFFC94B
  .dword 0xFFFFC980
  .dword 0xFFFFC9B4
  .dword 0xFFFFC9E9
  .dword 0xFFFFCA1D
  .dword 0xFFFFCA52
  .dword 0xFFFFCA86
  .dword 0xFFFFCABB
  .dword 0xFFFFCAEF
  .dword 0xFFFFCB23
  .dword 0xFFFFCB58
  .dword 0xFFFFCB8C
  .dword 0xFFFFCBC1
  .dword 0xFFFFCBF5
  .dword 0xFFFFCC29
  .dword 0xFFFFCC5E
  .dword 0xFFFFCC92
  .dword 0xFFFFCCC6
  .dword 0xFFFFCCFA
  .dword 0xFFFFCD2F
  .dword 0xFFFFCD63
  .dword 0xFFFFCD97
  .dword 0xFFFFCDCB
  .dword 0xFFFFCE00
  .dword 0xFFFFCE34
  .dword 0xFFFFCE68
  .dword 0xFFFFCE9C
  .dword 0xFFFFCED0
  .dword 0xFFFFCF04
  .dword 0xFFFFCF38
  .dword 0xFFFFCF6C
  .dword 0xFFFFCFA1
  .dword 0xFFFFCFD5
  .dword 0xFFFFD009
  .dword 0xFFFFD03D
  .dword 0xFFFFD071
  .dword 0xFFFFD0A5
  .dword 0xFFFFD0D9
  .dword 0xFFFFD10D
  .dword 0xFFFFD141
  .dword 0xFFFFD174
  .dword 0xFFFFD1A8
  .dword 0xFFFFD1DC
  .dword 0xFFFFD210
  .dword 0xFFFFD244
  .dword 0xFFFFD278
  .dword 0xFFFFD2AC
  .dword 0xFFFFD2E0
  .dword 0xFFFFD313
  .dword 0xFFFFD347
  .dword 0xFFFFD37B
  .dword 0xFFFFD3AF
  .dword 0xFFFFD3E3
  .dword 0xFFFFD416
  .dword 0xFFFFD44A
  .dword 0xFFFFD47E
  .dword 0xFFFFD4B2
  .dword 0xFFFFD4E5
  .dword 0xFFFFD519
  .dword 0xFFFFD54D
  .dword 0xFFFFD580
  .dword 0xFFFFD5B4
  .dword 0xFFFFD5E7
  .dword 0xFFFFD61B
  .dword 0xFFFFD64F
  .dword 0xFFFFD682
  .dword 0xFFFFD6B6
  .dword 0xFFFFD6E9
  .dword 0xFFFFD71D
  .dword 0xFFFFD751
  .dword 0xFFFFD784
  .dword 0xFFFFD7B8
  .dword 0xFFFFD7EB
  .dword 0xFFFFD81F
  .dword 0xFFFFD852
  .dword 0xFFFFD886
  .dword 0xFFFFD8B9
  .dword 0xFFFFD8EC
  .dword 0xFFFFD920
  .dword 0xFFFFD953
  .dword 0xFFFFD987
  .dword 0xFFFFD9BA
  .dword 0xFFFFD9ED
  .dword 0xFFFFDA21
  .dword 0xFFFFDA54
  .dword 0xFFFFDA88
  .dword 0xFFFFDABB
  .dword 0xFFFFDAEE
  .dword 0xFFFFDB22
  .dword 0xFFFFDB55
  .dword 0xFFFFDB88
  .dword 0xFFFFDBBB
  .dword 0xFFFFDBEF
  .dword 0xFFFFDC22
  .dword 0xFFFFDC55
  .dword 0xFFFFDC88
  .dword 0xFFFFDCBC
  .dword 0xFFFFDCEF
  .dword 0xFFFFDD22
  .dword 0xFFFFDD55
  .dword 0xFFFFDD88
  .dword 0xFFFFDDBC
  .dword 0xFFFFDDEF
  .dword 0xFFFFDE22
  .dword 0xFFFFDE55
  .dword 0xFFFFDE88
  .dword 0xFFFFDEBB
  .dword 0xFFFFDEEE
  .dword 0xFFFFDF22
  .dword 0xFFFFDF55
  .dword 0xFFFFDF88
  .dword 0xFFFFDFBB
  .dword 0xFFFFDFEE
  .dword 0xFFFFE021
  .dword 0xFFFFE054
  .dword 0xFFFFE087
  .dword 0xFFFFE0BA
  .dword 0xFFFFE0ED
  .dword 0xFFFFE120
  .dword 0xFFFFE153
  .dword 0xFFFFE186
  .dword 0xFFFFE1B9
  .dword 0xFFFFE1EC
  .dword 0xFFFFE21F
  .dword 0xFFFFE252
  .dword 0xFFFFE285
  .dword 0xFFFFE2B8
  .dword 0xFFFFE2EB
  .dword 0xFFFFE31D
  .dword 0xFFFFE350
  .dword 0xFFFFE383
  .dword 0xFFFFE3B6
  .dword 0xFFFFE3E9
  .dword 0xFFFFE41C
  .dword 0xFFFFE44F
  .dword 0xFFFFE482
  .dword 0xFFFFE4B4
  .dword 0xFFFFE4E7
  .dword 0xFFFFE51A
  .dword 0xFFFFE54D
  .dword 0xFFFFE580
  .dword 0xFFFFE5B3
  .dword 0xFFFFE5E5
  .dword 0xFFFFE618
  .dword 0xFFFFE64B
  .dword 0xFFFFE67E
  .dword 0xFFFFE6B0
  .dword 0xFFFFE6E3
  .dword 0xFFFFE716
  .dword 0xFFFFE749
  .dword 0xFFFFE77B
  .dword 0xFFFFE7AE
  .dword 0xFFFFE7E1
  .dword 0xFFFFE814
  .dword 0xFFFFE846
  .dword 0xFFFFE879
  .dword 0xFFFFE8AC
  .dword 0xFFFFE8DE
  .dword 0xFFFFE911
  .dword 0xFFFFE944
  .dword 0xFFFFE976
  .dword 0xFFFFE9A9
  .dword 0xFFFFE9DC
  .dword 0xFFFFEA0E
  .dword 0xFFFFEA41
  .dword 0xFFFFEA73
  .dword 0xFFFFEAA6
  .dword 0xFFFFEAD9
  .dword 0xFFFFEB0B
  .dword 0xFFFFEB3E
  .dword 0xFFFFEB70
  .dword 0xFFFFEBA3
  .dword 0xFFFFEBD6
  .dword 0xFFFFEC08
  .dword 0xFFFFEC3B
  .dword 0xFFFFEC6D
  .dword 0xFFFFECA0
  .dword 0xFFFFECD2
  .dword 0xFFFFED05
  .dword 0xFFFFED38
  .dword 0xFFFFED6A
  .dword 0xFFFFED9D
  .dword 0xFFFFEDCF
  .dword 0xFFFFEE02
  .dword 0xFFFFEE34
  .dword 0xFFFFEE67
  .dword 0xFFFFEE99
  .dword 0xFFFFEECC
  .dword 0xFFFFEEFE
  .dword 0xFFFFEF31
  .dword 0xFFFFEF63
  .dword 0xFFFFEF96
  .dword 0xFFFFEFC8
  .dword 0xFFFFEFFB
  .dword 0xFFFFF02D
  .dword 0xFFFFF05F
  .dword 0xFFFFF092
  .dword 0xFFFFF0C4
  .dword 0xFFFFF0F7
  .dword 0xFFFFF129
  .dword 0xFFFFF15C
  .dword 0xFFFFF18E
  .dword 0xFFFFF1C0
  .dword 0xFFFFF1F3
  .dword 0xFFFFF225
  .dword 0xFFFFF258
  .dword 0xFFFFF28A
  .dword 0xFFFFF2BD
  .dword 0xFFFFF2EF
  .dword 0xFFFFF321
  .dword 0xFFFFF354
  .dword 0xFFFFF386
  .dword 0xFFFFF3B8
  .dword 0xFFFFF3EB
  .dword 0xFFFFF41D
  .dword 0xFFFFF450
  .dword 0xFFFFF482
  .dword 0xFFFFF4B4
  .dword 0xFFFFF4E7
  .dword 0xFFFFF519
  .dword 0xFFFFF54B
  .dword 0xFFFFF57E
  .dword 0xFFFFF5B0
  .dword 0xFFFFF5E2
  .dword 0xFFFFF615
  .dword 0xFFFFF647
  .dword 0xFFFFF679
  .dword 0xFFFFF6AC
  .dword 0xFFFFF6DE
  .dword 0xFFFFF710
  .dword 0xFFFFF743
  .dword 0xFFFFF775
  .dword 0xFFFFF7A7
  .dword 0xFFFFF7DA
  .dword 0xFFFFF80C
  .dword 0xFFFFF83E
  .dword 0xFFFFF871
  .dword 0xFFFFF8A3
  .dword 0xFFFFF8D5
  .dword 0xFFFFF908
  .dword 0xFFFFF93A
  .dword 0xFFFFF96C
  .dword 0xFFFFF99F
  .dword 0xFFFFF9D1
  .dword 0xFFFFFA03
  .dword 0xFFFFFA35
  .dword 0xFFFFFA68
  .dword 0xFFFFFA9A
  .dword 0xFFFFFACC
  .dword 0xFFFFFAFF
  .dword 0xFFFFFB31
  .dword 0xFFFFFB63
  .dword 0xFFFFFB95
  .dword 0xFFFFFBC8
  .dword 0xFFFFFBFA
  .dword 0xFFFFFC2C
  .dword 0xFFFFFC5F
  .dword 0xFFFFFC91
  .dword 0xFFFFFCC3
  .dword 0xFFFFFCF5
  .dword 0xFFFFFD28
  .dword 0xFFFFFD5A
  .dword 0xFFFFFD8C
  .dword 0xFFFFFDBE
  .dword 0xFFFFFDF1
  .dword 0xFFFFFE23
  .dword 0xFFFFFE55
  .dword 0xFFFFFE88
  .dword 0xFFFFFEBA
  .dword 0xFFFFFEEC
  .dword 0xFFFFFF1E
  .dword 0xFFFFFF51
  .dword 0xFFFFFF83
  .dword 0xFFFFFFB5
  .dword 0xFFFFFFE7
  .dword 0x00000019
  .dword 0x0000004B
  .dword 0x0000007D
  .dword 0x000000AF
  .dword 0x000000E2
  .dword 0x00000114
  .dword 0x00000146
  .dword 0x00000178
  .dword 0x000001AB
  .dword 0x000001DD
  .dword 0x0000020F
  .dword 0x00000242
  .dword 0x00000274
  .dword 0x000002A6
  .dword 0x000002D8
  .dword 0x0000030B
  .dword 0x0000033D
  .dword 0x0000036F
  .dword 0x000003A1
  .dword 0x000003D4
  .dword 0x00000406
  .dword 0x00000438
  .dword 0x0000046B
  .dword 0x0000049D
  .dword 0x000004CF
  .dword 0x00000501
  .dword 0x00000534
  .dword 0x00000566
  .dword 0x00000598
  .dword 0x000005CB
  .dword 0x000005FD
  .dword 0x0000062F
  .dword 0x00000661
  .dword 0x00000694
  .dword 0x000006C6
  .dword 0x000006F8
  .dword 0x0000072B
  .dword 0x0000075D
  .dword 0x0000078F
  .dword 0x000007C2
  .dword 0x000007F4
  .dword 0x00000826
  .dword 0x00000859
  .dword 0x0000088B
  .dword 0x000008BD
  .dword 0x000008F0
  .dword 0x00000922
  .dword 0x00000954
  .dword 0x00000987
  .dword 0x000009B9
  .dword 0x000009EB
  .dword 0x00000A1E
  .dword 0x00000A50
  .dword 0x00000A82
  .dword 0x00000AB5
  .dword 0x00000AE7
  .dword 0x00000B19
  .dword 0x00000B4C
  .dword 0x00000B7E
  .dword 0x00000BB0
  .dword 0x00000BE3
  .dword 0x00000C15
  .dword 0x00000C48
  .dword 0x00000C7A
  .dword 0x00000CAC
  .dword 0x00000CDF
  .dword 0x00000D11
  .dword 0x00000D43
  .dword 0x00000D76
  .dword 0x00000DA8
  .dword 0x00000DDB
  .dword 0x00000E0D
  .dword 0x00000E40
  .dword 0x00000E72
  .dword 0x00000EA4
  .dword 0x00000ED7
  .dword 0x00000F09
  .dword 0x00000F3C
  .dword 0x00000F6E
  .dword 0x00000FA1
  .dword 0x00000FD3
  .dword 0x00001005
  .dword 0x00001038
  .dword 0x0000106A
  .dword 0x0000109D
  .dword 0x000010CF
  .dword 0x00001102
  .dword 0x00001134
  .dword 0x00001167
  .dword 0x00001199
  .dword 0x000011CC
  .dword 0x000011FE
  .dword 0x00001231
  .dword 0x00001263
  .dword 0x00001296
  .dword 0x000012C8
  .dword 0x000012FB
  .dword 0x0000132E
  .dword 0x00001360
  .dword 0x00001393
  .dword 0x000013C5
  .dword 0x000013F8
  .dword 0x0000142A
  .dword 0x0000145D
  .dword 0x00001490
  .dword 0x000014C2
  .dword 0x000014F5
  .dword 0x00001527
  .dword 0x0000155A
  .dword 0x0000158D
  .dword 0x000015BF
  .dword 0x000015F2
  .dword 0x00001624
  .dword 0x00001657
  .dword 0x0000168A
  .dword 0x000016BC
  .dword 0x000016EF
  .dword 0x00001722
  .dword 0x00001754
  .dword 0x00001787
  .dword 0x000017BA
  .dword 0x000017EC
  .dword 0x0000181F
  .dword 0x00001852
  .dword 0x00001885
  .dword 0x000018B7
  .dword 0x000018EA
  .dword 0x0000191D
  .dword 0x00001950
  .dword 0x00001982
  .dword 0x000019B5
  .dword 0x000019E8
  .dword 0x00001A1B
  .dword 0x00001A4D
  .dword 0x00001A80
  .dword 0x00001AB3
  .dword 0x00001AE6
  .dword 0x00001B19
  .dword 0x00001B4C
  .dword 0x00001B7E
  .dword 0x00001BB1
  .dword 0x00001BE4
  .dword 0x00001C17
  .dword 0x00001C4A
  .dword 0x00001C7D
  .dword 0x00001CB0
  .dword 0x00001CE3
  .dword 0x00001D15
  .dword 0x00001D48
  .dword 0x00001D7B
  .dword 0x00001DAE
  .dword 0x00001DE1
  .dword 0x00001E14
  .dword 0x00001E47
  .dword 0x00001E7A
  .dword 0x00001EAD
  .dword 0x00001EE0
  .dword 0x00001F13
  .dword 0x00001F46
  .dword 0x00001F79
  .dword 0x00001FAC
  .dword 0x00001FDF
  .dword 0x00002012
  .dword 0x00002045
  .dword 0x00002078
  .dword 0x000020AB
  .dword 0x000020DE
  .dword 0x00002112
  .dword 0x00002145
  .dword 0x00002178
  .dword 0x000021AB
  .dword 0x000021DE
  .dword 0x00002211
  .dword 0x00002244
  .dword 0x00002278
  .dword 0x000022AB
  .dword 0x000022DE
  .dword 0x00002311
  .dword 0x00002344
  .dword 0x00002378
  .dword 0x000023AB
  .dword 0x000023DE
  .dword 0x00002411
  .dword 0x00002445
  .dword 0x00002478
  .dword 0x000024AB
  .dword 0x000024DE
  .dword 0x00002512
  .dword 0x00002545
  .dword 0x00002578
  .dword 0x000025AC
  .dword 0x000025DF
  .dword 0x00002613
  .dword 0x00002646
  .dword 0x00002679
  .dword 0x000026AD
  .dword 0x000026E0
  .dword 0x00002714
  .dword 0x00002747
  .dword 0x0000277A
  .dword 0x000027AE
  .dword 0x000027E1
  .dword 0x00002815
  .dword 0x00002848
  .dword 0x0000287C
  .dword 0x000028AF
  .dword 0x000028E3
  .dword 0x00002917
  .dword 0x0000294A
  .dword 0x0000297E
  .dword 0x000029B1
  .dword 0x000029E5
  .dword 0x00002A19
  .dword 0x00002A4C
  .dword 0x00002A80
  .dword 0x00002AB3
  .dword 0x00002AE7
  .dword 0x00002B1B
  .dword 0x00002B4E
  .dword 0x00002B82
  .dword 0x00002BB6
  .dword 0x00002BEA
  .dword 0x00002C1D
  .dword 0x00002C51
  .dword 0x00002C85
  .dword 0x00002CB9
  .dword 0x00002CED
  .dword 0x00002D20
  .dword 0x00002D54
  .dword 0x00002D88
  .dword 0x00002DBC
  .dword 0x00002DF0
  .dword 0x00002E24
  .dword 0x00002E58
  .dword 0x00002E8C
  .dword 0x00002EBF
  .dword 0x00002EF3
  .dword 0x00002F27
  .dword 0x00002F5B
  .dword 0x00002F8F
  .dword 0x00002FC3
  .dword 0x00002FF7
  .dword 0x0000302B
  .dword 0x0000305F
  .dword 0x00003094
  .dword 0x000030C8
  .dword 0x000030FC
  .dword 0x00003130
  .dword 0x00003164
  .dword 0x00003198
  .dword 0x000031CC
  .dword 0x00003200
  .dword 0x00003235
  .dword 0x00003269
  .dword 0x0000329D
  .dword 0x000032D1
  .dword 0x00003306
  .dword 0x0000333A
  .dword 0x0000336E
  .dword 0x000033A2
  .dword 0x000033D7
  .dword 0x0000340B
  .dword 0x0000343F
  .dword 0x00003474
  .dword 0x000034A8
  .dword 0x000034DD
  .dword 0x00003511
  .dword 0x00003545
  .dword 0x0000357A
  .dword 0x000035AE
  .dword 0x000035E3
  .dword 0x00003617
  .dword 0x0000364C
  .dword 0x00003680
  .dword 0x000036B5
  .dword 0x000036E9
  .dword 0x0000371E
  .dword 0x00003753
  .dword 0x00003787
  .dword 0x000037BC
  .dword 0x000037F1
  .dword 0x00003825
  .dword 0x0000385A
  .dword 0x0000388F
  .dword 0x000038C3
  .dword 0x000038F8
  .dword 0x0000392D
  .dword 0x00003962
  .dword 0x00003997
  .dword 0x000039CB
  .dword 0x00003A00
  .dword 0x00003A35
  .dword 0x00003A6A
  .dword 0x00003A9F
  .dword 0x00003AD4
  .dword 0x00003B09
  .dword 0x00003B3E
  .dword 0x00003B73
  .dword 0x00003BA8
  .dword 0x00003BDD
  .dword 0x00003C12
  .dword 0x00003C47
  .dword 0x00003C7C
  .dword 0x00003CB1
  .dword 0x00003CE6
  .dword 0x00003D1B
  .dword 0x00003D50
  .dword 0x00003D85
  .dword 0x00003DBA
  .dword 0x00003DF0
  .dword 0x00003E25
  .dword 0x00003E5A
  .dword 0x00003E8F
  .dword 0x00003EC5
  .dword 0x00003EFA
  .dword 0x00003F2F
  .dword 0x00003F65
  .dword 0x00003F9A
  .dword 0x00003FCF
  .dword 0x00004005
  .dword 0x0000403A
  .dword 0x00004070
  .dword 0x000040A5
  .dword 0x000040DB
  .dword 0x00004110
  .dword 0x00004146
  .dword 0x0000417B
  .dword 0x000041B1
  .dword 0x000041E6
  .dword 0x0000421C
  .dword 0x00004251
  .dword 0x00004287
  .dword 0x000042BD
  .dword 0x000042F2
  .dword 0x00004328
  .dword 0x0000435E
  .dword 0x00004394
  .dword 0x000043C9
  .dword 0x000043FF
  .dword 0x00004435
  .dword 0x0000446B
  .dword 0x000044A1
  .dword 0x000044D7
  .dword 0x0000450D
  .dword 0x00004543
  .dword 0x00004578
  .dword 0x000045AE
  .dword 0x000045E4
  .dword 0x0000461A
  .dword 0x00004651
  .dword 0x00004687
  .dword 0x000046BD
  .dword 0x000046F3
  .dword 0x00004729
  .dword 0x0000475F
  .dword 0x00004795
  .dword 0x000047CC
  .dword 0x00004802
  .dword 0x00004838
  .dword 0x0000486E
  .dword 0x000048A5
  .dword 0x000048DB
  .dword 0x00004911
  .dword 0x00004948
  .dword 0x0000497E
  .dword 0x000049B4
  .dword 0x000049EB
  .dword 0x00004A21
  .dword 0x00004A58
  .dword 0x00004A8E
  .dword 0x00004AC5
  .dword 0x00004AFB
  .dword 0x00004B32
  .dword 0x00004B69
  .dword 0x00004B9F
  .dword 0x00004BD6
  .dword 0x00004C0D
  .dword 0x00004C43
  .dword 0x00004C7A
  .dword 0x00004CB1
  .dword 0x00004CE8
  .dword 0x00004D1E
  .dword 0x00004D55
  .dword 0x00004D8C
  .dword 0x00004DC3
  .dword 0x00004DFA
  .dword 0x00004E31
  .dword 0x00004E68
  .dword 0x00004E9F
  .dword 0x00004ED6
  .dword 0x00004F0D
  .dword 0x00004F44
  .dword 0x00004F7B
  .dword 0x00004FB2
  .dword 0x00004FE9
  .dword 0x00005021
  .dword 0x00005058
  .dword 0x0000508F
  .dword 0x000050C6
  .dword 0x000050FE
  .dword 0x00005135
  .dword 0x0000516C
  .dword 0x000051A4
  .dword 0x000051DB
  .dword 0x00005212
  .dword 0x0000524A
  .dword 0x00005281
  .dword 0x000052B9
  .dword 0x000052F0
  .dword 0x00005328
  .dword 0x0000535F
  .dword 0x00005397
  .dword 0x000053CF
  .dword 0x00005406
  .dword 0x0000543E
  .dword 0x00005476
  .dword 0x000054AE
  .dword 0x000054E5
  .dword 0x0000551D
  .dword 0x00005555
  .dword 0x0000558D
  .dword 0x000055C5
  .dword 0x000055FD
  .dword 0x00005635
  .dword 0x0000566D
  .dword 0x000056A5
  .dword 0x000056DD
  .dword 0x00005715
  .dword 0x0000574D
  .dword 0x00005785
  .dword 0x000057BD
  .dword 0x000057F5
  .dword 0x0000582D
  .dword 0x00005866
  .dword 0x0000589E
  .dword 0x000058D6
  .dword 0x0000590F
  .dword 0x00005947
  .dword 0x0000597F
  .dword 0x000059B8
  .dword 0x000059F0
  .dword 0x00005A29
  .dword 0x00005A61
  .dword 0x00005A9A
  .dword 0x00005AD2
  .dword 0x00005B0B
  .dword 0x00005B44
  .dword 0x00005B7C
  .dword 0x00005BB5
  .dword 0x00005BEE
  .dword 0x00005C27
  .dword 0x00005C5F
  .dword 0x00005C98
  .dword 0x00005CD1
  .dword 0x00005D0A
  .dword 0x00005D43
  .dword 0x00005D7C
  .dword 0x00005DB5
  .dword 0x00005DEE
  .dword 0x00005E27
  .dword 0x00005E60
  .dword 0x00005E99
  .dword 0x00005ED2
  .dword 0x00005F0B
  .dword 0x00005F45
  .dword 0x00005F7E
  .dword 0x00005FB7
  .dword 0x00005FF0
  .dword 0x0000602A
  .dword 0x00006063
  .dword 0x0000609C
  .dword 0x000060D6
  .dword 0x0000610F
  .dword 0x00006149
  .dword 0x00006182
  .dword 0x000061BC
  .dword 0x000061F6
  .dword 0x0000622F
  .dword 0x00006269
  .dword 0x000062A3
  .dword 0x000062DC
  .dword 0x00006316
  .dword 0x00006350
  .dword 0x0000638A
  .dword 0x000063C4
  .dword 0x000063FE
  .dword 0x00006438
  .dword 0x00006472
  .dword 0x000064AC
  .dword 0x000064E6
  .dword 0x00006520
  .dword 0x0000655A
  .dword 0x00006594
  .dword 0x000065CE
  .dword 0x00006608
  .dword 0x00006643
  .dword 0x0000667D
  .dword 0x000066B7
  .dword 0x000066F2
  .dword 0x0000672C
  .dword 0x00006767
  .dword 0x000067A1
  .dword 0x000067DC
  .dword 0x00006816
  .dword 0x00006851
  .dword 0x0000688B
  .dword 0x000068C6
  .dword 0x00006901
  .dword 0x0000693C
  .dword 0x00006976
  .dword 0x000069B1
  .dword 0x000069EC
  .dword 0x00006A27
  .dword 0x00006A62
  .dword 0x00006A9D
  .dword 0x00006AD8
  .dword 0x00006B13
  .dword 0x00006B4E
  .dword 0x00006B89
  .dword 0x00006BC4
  .dword 0x00006BFF
  .dword 0x00006C3B
  .dword 0x00006C76
  .dword 0x00006CB1
  .dword 0x00006CEC
  .dword 0x00006D28
  .dword 0x00006D63
  .dword 0x00006D9F
  .dword 0x00006DDA
  .dword 0x00006E16
  .dword 0x00006E51
  .dword 0x00006E8D
  .dword 0x00006EC9
  .dword 0x00006F04
  .dword 0x00006F40
  .dword 0x00006F7C
  .dword 0x00006FB8
  .dword 0x00006FF4
  .dword 0x0000702F
  .dword 0x0000706B
  .dword 0x000070A7
  .dword 0x000070E3
  .dword 0x0000711F
  .dword 0x0000715C
  .dword 0x00007198
  .dword 0x000071D4
  .dword 0x00007210
  .dword 0x0000724C
  .dword 0x00007289
  .dword 0x000072C5
  .dword 0x00007301
  .dword 0x0000733E
  .dword 0x0000737A
  .dword 0x000073B7
  .dword 0x000073F3
  .dword 0x00007430
  .dword 0x0000746D
  .dword 0x000074A9
  .dword 0x000074E6
  .dword 0x00007523
  .dword 0x00007560
  .dword 0x0000759C
  .dword 0x000075D9
  .dword 0x00007616
  .dword 0x00007653
  .dword 0x00007690
  .dword 0x000076CD
  .dword 0x0000770A
  .dword 0x00007748
  .dword 0x00007785
  .dword 0x000077C2
  .dword 0x000077FF
  .dword 0x0000783D
  .dword 0x0000787A
  .dword 0x000078B8
  .dword 0x000078F5
  .dword 0x00007932
  .dword 0x00007970
  .dword 0x000079AE
  .dword 0x000079EB
  .dword 0x00007A29
  .dword 0x00007A67
  .dword 0x00007AA4
  .dword 0x00007AE2
  .dword 0x00007B20
  .dword 0x00007B5E
  .dword 0x00007B9C
  .dword 0x00007BDA
  .dword 0x00007C18
  .dword 0x00007C56
  .dword 0x00007C94
  .dword 0x00007CD3
  .dword 0x00007D11
  .dword 0x00007D4F
  .dword 0x00007D8D
  .dword 0x00007DCC
  .dword 0x00007E0A
  .dword 0x00007E49
  .dword 0x00007E87
  .dword 0x00007EC6
  .dword 0x00007F04
  .dword 0x00007F43
  .dword 0x00007F82
  .dword 0x00007FC1
  .dword 0x00007FFF
  .dword 0x0000803E
  .dword 0x0000807D
  .dword 0x000080BC
  .dword 0x000080FB
  .dword 0x0000813A
  .dword 0x00008179
  .dword 0x000081B8
  .dword 0x000081F8
  .dword 0x00008237
  .dword 0x00008276
  .dword 0x000082B5
  .dword 0x000082F5
  .dword 0x00008334
  .dword 0x00008374
  .dword 0x000083B3
  .dword 0x000083F3
  .dword 0x00008433
  .dword 0x00008472
  .dword 0x000084B2
  .dword 0x000084F2
  .dword 0x00008532
  .dword 0x00008572
  .dword 0x000085B1
  .dword 0x000085F1
  .dword 0x00008632
  .dword 0x00008672
  .dword 0x000086B2
  .dword 0x000086F2
  .dword 0x00008732
  .dword 0x00008773
  .dword 0x000087B3
  .dword 0x000087F3
  .dword 0x00008834
  .dword 0x00008874
  .dword 0x000088B5
  .dword 0x000088F6
  .dword 0x00008936
  .dword 0x00008977
  .dword 0x000089B8
  .dword 0x000089F9
  .dword 0x00008A39
  .dword 0x00008A7A
  .dword 0x00008ABB
  .dword 0x00008AFC
  .dword 0x00008B3E
  .dword 0x00008B7F
  .dword 0x00008BC0
  .dword 0x00008C01
  .dword 0x00008C43
  .dword 0x00008C84
  .dword 0x00008CC5
  .dword 0x00008D07
  .dword 0x00008D48
  .dword 0x00008D8A
  .dword 0x00008DCC
  .dword 0x00008E0D
  .dword 0x00008E4F
  .dword 0x00008E91
  .dword 0x00008ED3
  .dword 0x00008F15
  .dword 0x00008F57
  .dword 0x00008F99
  .dword 0x00008FDB
  .dword 0x0000901D
  .dword 0x0000905F
  .dword 0x000090A2
  .dword 0x000090E4
  .dword 0x00009126
  .dword 0x00009169
  .dword 0x000091AB
  .dword 0x000091EE
  .dword 0x00009231
  .dword 0x00009273
  .dword 0x000092B6
  .dword 0x000092F9
  .dword 0x0000933C
  .dword 0x0000937F
  .dword 0x000093C2
  .dword 0x00009405
  .dword 0x00009448
  .dword 0x0000948B
  .dword 0x000094CE
  .dword 0x00009511
  .dword 0x00009555
  .dword 0x00009598
  .dword 0x000095DC
  .dword 0x0000961F
  .dword 0x00009663
  .dword 0x000096A6
  .dword 0x000096EA
  .dword 0x0000972E
  .dword 0x00009772
  .dword 0x000097B5
  .dword 0x000097F9
  .dword 0x0000983D
  .dword 0x00009882
  .dword 0x000098C6
  .dword 0x0000990A
  .dword 0x0000994E
  .dword 0x00009992
  .dword 0x000099D7
  .dword 0x00009A1B
  .dword 0x00009A60
  .dword 0x00009AA4
  .dword 0x00009AE9
  .dword 0x00009B2E
  .dword 0x00009B72
  .dword 0x00009BB7
  .dword 0x00009BFC
  .dword 0x00009C41
  .dword 0x00009C86
  .dword 0x00009CCB
  .dword 0x00009D10
  .dword 0x00009D56
  .dword 0x00009D9B
  .dword 0x00009DE0
  .dword 0x00009E26
  .dword 0x00009E6B
  .dword 0x00009EB1
  .dword 0x00009EF6
  .dword 0x00009F3C
  .dword 0x00009F82
  .dword 0x00009FC8
  .dword 0x0000A00D
  .dword 0x0000A053
  .dword 0x0000A099
  .dword 0x0000A0E0
  .dword 0x0000A126
  .dword 0x0000A16C
  .dword 0x0000A1B2
  .dword 0x0000A1F9
  .dword 0x0000A23F
  .dword 0x0000A285
  .dword 0x0000A2CC
  .dword 0x0000A313
  .dword 0x0000A359
  .dword 0x0000A3A0
  .dword 0x0000A3E7
  .dword 0x0000A42E
  .dword 0x0000A475
  .dword 0x0000A4BC
  .dword 0x0000A503
  .dword 0x0000A54A
  .dword 0x0000A591
  .dword 0x0000A5D9
  .dword 0x0000A620
  .dword 0x0000A668
  .dword 0x0000A6AF
  .dword 0x0000A6F7
  .dword 0x0000A73E
  .dword 0x0000A786
  .dword 0x0000A7CE
  .dword 0x0000A816
  .dword 0x0000A85E
  .dword 0x0000A8A6
  .dword 0x0000A8EE
  .dword 0x0000A936
  .dword 0x0000A97E
  .dword 0x0000A9C7
  .dword 0x0000AA0F
  .dword 0x0000AA58
  .dword 0x0000AAA0
  .dword 0x0000AAE9
  .dword 0x0000AB32
  .dword 0x0000AB7A
  .dword 0x0000ABC3
  .dword 0x0000AC0C
  .dword 0x0000AC55
  .dword 0x0000AC9E
  .dword 0x0000ACE7
  .dword 0x0000AD31
  .dword 0x0000AD7A
  .dword 0x0000ADC3
  .dword 0x0000AE0D
  .dword 0x0000AE56
  .dword 0x0000AEA0
  .dword 0x0000AEEA
  .dword 0x0000AF33
  .dword 0x0000AF7D
  .dword 0x0000AFC7
  .dword 0x0000B011
  .dword 0x0000B05B
  .dword 0x0000B0A5
  .dword 0x0000B0F0
  .dword 0x0000B13A
  .dword 0x0000B184
  .dword 0x0000B1CF
  .dword 0x0000B219
  .dword 0x0000B264
  .dword 0x0000B2AF
  .dword 0x0000B2FA
  .dword 0x0000B344
  .dword 0x0000B38F
  .dword 0x0000B3DA
  .dword 0x0000B426
  .dword 0x0000B471
  .dword 0x0000B4BC
  .dword 0x0000B507
  .dword 0x0000B553
  .dword 0x0000B59E
  .dword 0x0000B5EA
  .dword 0x0000B636
  .dword 0x0000B681
  .dword 0x0000B6CD
  .dword 0x0000B719
  .dword 0x0000B765
  .dword 0x0000B7B1
  .dword 0x0000B7FE
  .dword 0x0000B84A
  .dword 0x0000B896
  .dword 0x0000B8E3
  .dword 0x0000B92F
  .dword 0x0000B97C
  .dword 0x0000B9C8
  .dword 0x0000BA15
  .dword 0x0000BA62
  .dword 0x0000BAAF
  .dword 0x0000BAFC
  .dword 0x0000BB49
  .dword 0x0000BB96
  .dword 0x0000BBE4
  .dword 0x0000BC31
  .dword 0x0000BC7F
  .dword 0x0000BCCC
  .dword 0x0000BD1A
  .dword 0x0000BD68
  .dword 0x0000BDB5
  .dword 0x0000BE03
  .dword 0x0000BE51
  .dword 0x0000BE9F
  .dword 0x0000BEEE
  .dword 0x0000BF3C
  .dword 0x0000BF8A
  .dword 0x0000BFD9
  .dword 0x0000C027
  .dword 0x0000C076
  .dword 0x0000C0C5
  .dword 0x0000C113
  .dword 0x0000C162
  .dword 0x0000C1B1
  .dword 0x0000C200
  .dword 0x0000C250
  .dword 0x0000C29F
  .dword 0x0000C2EE
  .dword 0x0000C33E
  .dword 0x0000C38D
  .dword 0x0000C3DD
  .dword 0x0000C42D
  .dword 0x0000C47C
  .dword 0x0000C4CC
  .dword 0x0000C51C
  .dword 0x0000C56C
  .dword 0x0000C5BD
  .dword 0x0000C60D
  .dword 0x0000C65D
  .dword 0x0000C6AE
  .dword 0x0000C6FE
  .dword 0x0000C74F
  .dword 0x0000C7A0
  .dword 0x0000C7F1
  .dword 0x0000C842
  .dword 0x0000C893
  .dword 0x0000C8E4
  .dword 0x0000C935
  .dword 0x0000C987
  .dword 0x0000C9D8
  .dword 0x0000CA2A
  .dword 0x0000CA7B
  .dword 0x0000CACD
  .dword 0x0000CB1F
  .dword 0x0000CB71
  .dword 0x0000CBC3
  .dword 0x0000CC15
  .dword 0x0000CC67
  .dword 0x0000CCBA
  .dword 0x0000CD0C
  .dword 0x0000CD5F
  .dword 0x0000CDB1
  .dword 0x0000CE04
  .dword 0x0000CE57
  .dword 0x0000CEAA
  .dword 0x0000CEFD
  .dword 0x0000CF50
  .dword 0x0000CFA4
  .dword 0x0000CFF7
  .dword 0x0000D04A
  .dword 0x0000D09E
  .dword 0x0000D0F2
  .dword 0x0000D146
  .dword 0x0000D199
  .dword 0x0000D1ED
  .dword 0x0000D242
  .dword 0x0000D296
  .dword 0x0000D2EA
  .dword 0x0000D33F
  .dword 0x0000D393
  .dword 0x0000D3E8
  .dword 0x0000D43D
  .dword 0x0000D491
  .dword 0x0000D4E6
  .dword 0x0000D53B
  .dword 0x0000D591
  .dword 0x0000D5E6
  .dword 0x0000D63B
  .dword 0x0000D691
  .dword 0x0000D6E7
  .dword 0x0000D73C
  .dword 0x0000D792
  .dword 0x0000D7E8
  .dword 0x0000D83E
  .dword 0x0000D894
  .dword 0x0000D8EB
  .dword 0x0000D941
  .dword 0x0000D998
  .dword 0x0000D9EE
  .dword 0x0000DA45
  .dword 0x0000DA9C
  .dword 0x0000DAF3
  .dword 0x0000DB4A
  .dword 0x0000DBA1
  .dword 0x0000DBF8
  .dword 0x0000DC50
  .dword 0x0000DCA7
  .dword 0x0000DCFF
  .dword 0x0000DD57
  .dword 0x0000DDAF
  .dword 0x0000DE07
  .dword 0x0000DE5F
  .dword 0x0000DEB7
  .dword 0x0000DF10
  .dword 0x0000DF68
  .dword 0x0000DFC1
  .dword 0x0000E019
  .dword 0x0000E072
  .dword 0x0000E0CB
  .dword 0x0000E124
  .dword 0x0000E17D
  .dword 0x0000E1D7
  .dword 0x0000E230
  .dword 0x0000E28A
  .dword 0x0000E2E3
  .dword 0x0000E33D
  .dword 0x0000E397
  .dword 0x0000E3F1
  .dword 0x0000E44B
  .dword 0x0000E4A6
  .dword 0x0000E500
  .dword 0x0000E55B
  .dword 0x0000E5B5
  .dword 0x0000E610
  .dword 0x0000E66B
  .dword 0x0000E6C6
  .dword 0x0000E721
  .dword 0x0000E77D
  .dword 0x0000E7D8
  .dword 0x0000E834
  .dword 0x0000E88F
  .dword 0x0000E8EB
  .dword 0x0000E947
  .dword 0x0000E9A3
  .dword 0x0000E9FF
  .dword 0x0000EA5C
  .dword 0x0000EAB8
  .dword 0x0000EB15
  .dword 0x0000EB71
  .dword 0x0000EBCE
  .dword 0x0000EC2B
  .dword 0x0000EC88
  .dword 0x0000ECE6
  .dword 0x0000ED43
  .dword 0x0000EDA1
  .dword 0x0000EDFE
  .dword 0x0000EE5C
  .dword 0x0000EEBA
  .dword 0x0000EF18
  .dword 0x0000EF76
  .dword 0x0000EFD4
  .dword 0x0000F033
  .dword 0x0000F091
  .dword 0x0000F0F0
  .dword 0x0000F14F
  .dword 0x0000F1AE
  .dword 0x0000F20D
  .dword 0x0000F26C
  .dword 0x0000F2CC
  .dword 0x0000F32B
  .dword 0x0000F38B
  .dword 0x0000F3EB
  .dword 0x0000F44B
  .dword 0x0000F4AB
  .dword 0x0000F50B
  .dword 0x0000F56C
  .dword 0x0000F5CC
  .dword 0x0000F62D
  .dword 0x0000F68E
  .dword 0x0000F6EF
  .dword 0x0000F750
  .dword 0x0000F7B1
  .dword 0x0000F812
  .dword 0x0000F874
  .dword 0x0000F8D6
  .dword 0x0000F937
  .dword 0x0000F999
  .dword 0x0000F9FC
  .dword 0x0000FA5E
  .dword 0x0000FAC0
  .dword 0x0000FB23
  .dword 0x0000FB85
  .dword 0x0000FBE8
  .dword 0x0000FC4B
  .dword 0x0000FCAF
  .dword 0x0000FD12
  .dword 0x0000FD75
  .dword 0x0000FDD9
  .dword 0x0000FE3D
  .dword 0x0000FEA1
  .dword 0x0000FF05
  .dword 0x0000FF69
  .dword 0x0000FFCD
  .dword 0x00010032
  .dword 0x00010096
  .dword 0x000100FB
  .dword 0x00010160
  .dword 0x000101C5
  .dword 0x0001022B
  .dword 0x00010290
  .dword 0x000102F6
  .dword 0x0001035C
  .dword 0x000103C2
  .dword 0x00010428
  .dword 0x0001048E
  .dword 0x000104F4
  .dword 0x0001055B
  .dword 0x000105C2
  .dword 0x00010629
  .dword 0x00010690
  .dword 0x000106F7
  .dword 0x0001075E
  .dword 0x000107C6
  .dword 0x0001082D
  .dword 0x00010895
  .dword 0x000108FD
  .dword 0x00010966
  .dword 0x000109CE
  .dword 0x00010A37
  .dword 0x00010A9F
  .dword 0x00010B08
  .dword 0x00010B71
  .dword 0x00010BDA
  .dword 0x00010C44
  .dword 0x00010CAD
  .dword 0x00010D17
  .dword 0x00010D81
  .dword 0x00010DEB
  .dword 0x00010E55
  .dword 0x00010EC0
  .dword 0x00010F2A
  .dword 0x00010F95
  .dword 0x00011000
  .dword 0x0001106B
  .dword 0x000110D6
  .dword 0x00011142
  .dword 0x000111AD
  .dword 0x00011219
  .dword 0x00011285
  .dword 0x000112F1
  .dword 0x0001135E
  .dword 0x000113CA
  .dword 0x00011437
  .dword 0x000114A4
  .dword 0x00011511
  .dword 0x0001157E
  .dword 0x000115EB
  .dword 0x00011659
  .dword 0x000116C7
  .dword 0x00011735
  .dword 0x000117A3
  .dword 0x00011811
  .dword 0x00011880
  .dword 0x000118EE
  .dword 0x0001195D
  .dword 0x000119CC
  .dword 0x00011A3C
  .dword 0x00011AAB
  .dword 0x00011B1B
  .dword 0x00011B8B
  .dword 0x00011BFB
  .dword 0x00011C6B
  .dword 0x00011CDB
  .dword 0x00011D4C
  .dword 0x00011DBD
  .dword 0x00011E2E
  .dword 0x00011E9F
  .dword 0x00011F10
  .dword 0x00011F82
  .dword 0x00011FF3
  .dword 0x00012065
  .dword 0x000120D8
  .dword 0x0001214A
  .dword 0x000121BC
  .dword 0x0001222F
  .dword 0x000122A2
  .dword 0x00012315
  .dword 0x00012389
  .dword 0x000123FC
  .dword 0x00012470
  .dword 0x000124E4
  .dword 0x00012558
  .dword 0x000125CD
  .dword 0x00012641
  .dword 0x000126B6
  .dword 0x0001272B
  .dword 0x000127A0
  .dword 0x00012815
  .dword 0x0001288B
  .dword 0x00012901
  .dword 0x00012977
  .dword 0x000129ED
  .dword 0x00012A64
  .dword 0x00012ADA
  .dword 0x00012B51
  .dword 0x00012BC8
  .dword 0x00012C40
  .dword 0x00012CB7
  .dword 0x00012D2F
  .dword 0x00012DA7
  .dword 0x00012E1F
  .dword 0x00012E97
  .dword 0x00012F10
  .dword 0x00012F89
  .dword 0x00013002
  .dword 0x0001307B
  .dword 0x000130F4
  .dword 0x0001316E
  .dword 0x000131E8
  .dword 0x00013262
  .dword 0x000132DD
  .dword 0x00013357
  .dword 0x000133D2
  .dword 0x0001344D
  .dword 0x000134C8
  .dword 0x00013544
  .dword 0x000135C0
  .dword 0x0001363C
  .dword 0x000136B8
  .dword 0x00013734
  .dword 0x000137B1
  .dword 0x0001382E
  .dword 0x000138AB
  .dword 0x00013928
  .dword 0x000139A6
  .dword 0x00013A24
  .dword 0x00013AA2
  .dword 0x00013B20
  .dword 0x00013B9F
  .dword 0x00013C1D
  .dword 0x00013C9D
  .dword 0x00013D1C
  .dword 0x00013D9B
  .dword 0x00013E1B
  .dword 0x00013E9B
  .dword 0x00013F1B
  .dword 0x00013F9C
  .dword 0x0001401D
  .dword 0x0001409E
  .dword 0x0001411F
  .dword 0x000141A0
  .dword 0x00014222
  .dword 0x000142A4
  .dword 0x00014326
  .dword 0x000143A9
  .dword 0x0001442B
  .dword 0x000144AE
  .dword 0x00014532
  .dword 0x000145B5
  .dword 0x00014639
  .dword 0x000146BD
  .dword 0x00014741
  .dword 0x000147C6
  .dword 0x0001484B
  .dword 0x000148D0
  .dword 0x00014955
  .dword 0x000149DB
  .dword 0x00014A60
  .dword 0x00014AE6
  .dword 0x00014B6D
  .dword 0x00014BF4
  .dword 0x00014C7A
  .dword 0x00014D02
  .dword 0x00014D89
  .dword 0x00014E11
  .dword 0x00014E99
  .dword 0x00014F21
  .dword 0x00014FAA
  .dword 0x00015032
  .dword 0x000150BC
  .dword 0x00015145
  .dword 0x000151CF
  .dword 0x00015258
  .dword 0x000152E3
  .dword 0x0001536D
  .dword 0x000153F8
  .dword 0x00015483
  .dword 0x0001550E
  .dword 0x0001559A
  .dword 0x00015626
  .dword 0x000156B2
  .dword 0x0001573F
  .dword 0x000157CB
  .dword 0x00015858
  .dword 0x000158E6
  .dword 0x00015973
  .dword 0x00015A01
  .dword 0x00015A90
  .dword 0x00015B1E
  .dword 0x00015BAD
  .dword 0x00015C3C
  .dword 0x00015CCC
  .dword 0x00015D5B
  .dword 0x00015DEB
  .dword 0x00015E7C
  .dword 0x00015F0C
  .dword 0x00015F9D
  .dword 0x0001602E
  .dword 0x000160C0
  .dword 0x00016152
  .dword 0x000161E4
  .dword 0x00016276
  .dword 0x00016309
  .dword 0x0001639C
  .dword 0x00016430
  .dword 0x000164C4
  .dword 0x00016558
  .dword 0x000165EC
  .dword 0x00016681
  .dword 0x00016716
  .dword 0x000167AB
  .dword 0x00016841
  .dword 0x000168D7
  .dword 0x0001696D
  .dword 0x00016A03
  .dword 0x00016A9A
  .dword 0x00016B32
  .dword 0x00016BC9
  .dword 0x00016C61
  .dword 0x00016CFA
  .dword 0x00016D92
  .dword 0x00016E2B
  .dword 0x00016EC4
  .dword 0x00016F5E
  .dword 0x00016FF8
  .dword 0x00017092
  .dword 0x0001712D
  .dword 0x000171C8
  .dword 0x00017263
  .dword 0x000172FF
  .dword 0x0001739B
  .dword 0x00017437
  .dword 0x000174D4
  .dword 0x00017571
  .dword 0x0001760E
  .dword 0x000176AC
  .dword 0x0001774A
  .dword 0x000177E9
  .dword 0x00017887
  .dword 0x00017927
  .dword 0x000179C6
  .dword 0x00017A66
  .dword 0x00017B06
  .dword 0x00017BA7
  .dword 0x00017C48
  .dword 0x00017CE9
  .dword 0x00017D8B
  .dword 0x00017E2D
  .dword 0x00017ED0
  .dword 0x00017F73
  .dword 0x00018016
  .dword 0x000180B9
  .dword 0x0001815D
  .dword 0x00018202
  .dword 0x000182A6
  .dword 0x0001834C
  .dword 0x000183F1
  .dword 0x00018497
  .dword 0x0001853D
  .dword 0x000185E4
  .dword 0x0001868B
  .dword 0x00018732
  .dword 0x000187DA
  .dword 0x00018882
  .dword 0x0001892B
  .dword 0x000189D4
  .dword 0x00018A7E
  .dword 0x00018B27
  .dword 0x00018BD2
  .dword 0x00018C7C
  .dword 0x00018D27
  .dword 0x00018DD3
  .dword 0x00018E7F
  .dword 0x00018F2B
  .dword 0x00018FD8
  .dword 0x00019085
  .dword 0x00019132
  .dword 0x000191E0
  .dword 0x0001928E
  .dword 0x0001933D
  .dword 0x000193EC
  .dword 0x0001949C
  .dword 0x0001954C
  .dword 0x000195FD
  .dword 0x000196AD
  .dword 0x0001975F
  .dword 0x00019811
  .dword 0x000198C3
  .dword 0x00019975
  .dword 0x00019A28
  .dword 0x00019ADC
  .dword 0x00019B90
  .dword 0x00019C44
  .dword 0x00019CF9
  .dword 0x00019DAE
  .dword 0x00019E64
  .dword 0x00019F1A
  .dword 0x00019FD1
  .dword 0x0001A088
  .dword 0x0001A140
  .dword 0x0001A1F8
  .dword 0x0001A2B0
  .dword 0x0001A369
  .dword 0x0001A423
  .dword 0x0001A4DD
  .dword 0x0001A597
  .dword 0x0001A652
  .dword 0x0001A70D
  .dword 0x0001A7C9
  .dword 0x0001A885
  .dword 0x0001A942
  .dword 0x0001A9FF
  .dword 0x0001AABD
  .dword 0x0001AB7B
  .dword 0x0001AC3A
  .dword 0x0001ACF9
  .dword 0x0001ADB8
  .dword 0x0001AE78
  .dword 0x0001AF39
  .dword 0x0001AFFA
  .dword 0x0001B0BC
  .dword 0x0001B17E
  .dword 0x0001B241
  .dword 0x0001B304
  .dword 0x0001B3C8
  .dword 0x0001B48C
  .dword 0x0001B550
  .dword 0x0001B616
  .dword 0x0001B6DB
  .dword 0x0001B7A2
  .dword 0x0001B868
  .dword 0x0001B930
  .dword 0x0001B9F7
  .dword 0x0001BAC0
  .dword 0x0001BB89
  .dword 0x0001BC52
  .dword 0x0001BD1C
  .dword 0x0001BDE7
  .dword 0x0001BEB2
  .dword 0x0001BF7D
  .dword 0x0001C049
  .dword 0x0001C116
  .dword 0x0001C1E3
  .dword 0x0001C2B1
  .dword 0x0001C37F
  .dword 0x0001C44E
  .dword 0x0001C51E
  .dword 0x0001C5EE
  .dword 0x0001C6BE
  .dword 0x0001C78F
  .dword 0x0001C861
  .dword 0x0001C934
  .dword 0x0001CA06
  .dword 0x0001CADA
  .dword 0x0001CBAE
  .dword 0x0001CC83
  .dword 0x0001CD58
  .dword 0x0001CE2E
  .dword 0x0001CF04
  .dword 0x0001CFDB
  .dword 0x0001D0B3
  .dword 0x0001D18B
  .dword 0x0001D264
  .dword 0x0001D33D
  .dword 0x0001D417
  .dword 0x0001D4F2
  .dword 0x0001D5CD
  .dword 0x0001D6A9
  .dword 0x0001D785
  .dword 0x0001D862
  .dword 0x0001D940
  .dword 0x0001DA1E
  .dword 0x0001DAFD
  .dword 0x0001DBDD
  .dword 0x0001DCBD
  .dword 0x0001DD9E
  .dword 0x0001DE80
  .dword 0x0001DF62
  .dword 0x0001E045
  .dword 0x0001E128
  .dword 0x0001E20C
  .dword 0x0001E2F1
  .dword 0x0001E3D7
  .dword 0x0001E4BD
  .dword 0x0001E5A4
  .dword 0x0001E68B
  .dword 0x0001E773
  .dword 0x0001E85C
  .dword 0x0001E946
  .dword 0x0001EA30
  .dword 0x0001EB1B
  .dword 0x0001EC07
  .dword 0x0001ECF3
  .dword 0x0001EDE0
  .dword 0x0001EECD
  .dword 0x0001EFBC
  .dword 0x0001F0AB
  .dword 0x0001F19B
  .dword 0x0001F28B
  .dword 0x0001F37D
  .dword 0x0001F46F
  .dword 0x0001F561
  .dword 0x0001F655
  .dword 0x0001F749
  .dword 0x0001F83E
  .dword 0x0001F934
  .dword 0x0001FA2A
  .dword 0x0001FB21
  .dword 0x0001FC19
  .dword 0x0001FD12
  .dword 0x0001FE0B
  .dword 0x0001FF05
  .dword 0x00020000
  .dword 0x000200FC
  .dword 0x000201F8
  .dword 0x000202F6
  .dword 0x000203F4
  .dword 0x000204F3
  .dword 0x000205F2
  .dword 0x000206F3
  .dword 0x000207F4
  .dword 0x000208F6
  .dword 0x000209F9
  .dword 0x00020AFC
  .dword 0x00020C01
  .dword 0x00020D06
  .dword 0x00020E0C
  .dword 0x00020F13
  .dword 0x0002101B
  .dword 0x00021123
  .dword 0x0002122D
  .dword 0x00021337
  .dword 0x00021442
  .dword 0x0002154E
  .dword 0x0002165B
  .dword 0x00021769
  .dword 0x00021877
  .dword 0x00021987
  .dword 0x00021A97
  .dword 0x00021BA8
  .dword 0x00021CBA
  .dword 0x00021DCD
  .dword 0x00021EE1
  .dword 0x00021FF6
  .dword 0x0002210C
  .dword 0x00022222
  .dword 0x0002233A
  .dword 0x00022452
  .dword 0x0002256B
  .dword 0x00022686
  .dword 0x000227A1
  .dword 0x000228BD
  .dword 0x000229DA
  .dword 0x00022AF8
  .dword 0x00022C17
  .dword 0x00022D37
  .dword 0x00022E58
  .dword 0x00022F7A
  .dword 0x0002309D
  .dword 0x000231C0
  .dword 0x000232E5
  .dword 0x0002340B
  .dword 0x00023532
  .dword 0x0002365A
  .dword 0x00023782
  .dword 0x000238AC
  .dword 0x000239D7
  .dword 0x00023B03
  .dword 0x00023C30
  .dword 0x00023D5E
  .dword 0x00023E8C
  .dword 0x00023FBC
  .dword 0x000240ED
  .dword 0x00024220
  .dword 0x00024353
  .dword 0x00024487
  .dword 0x000245BC
  .dword 0x000246F3
  .dword 0x0002482A
  .dword 0x00024963
  .dword 0x00024A9C
  .dword 0x00024BD7
  .dword 0x00024D13
  .dword 0x00024E50
  .dword 0x00024F8E
  .dword 0x000250CD
  .dword 0x0002520D
  .dword 0x0002534F
  .dword 0x00025492
  .dword 0x000255D5
  .dword 0x0002571A
  .dword 0x00025861
  .dword 0x000259A8
  .dword 0x00025AF0
  .dword 0x00025C3A
  .dword 0x00025D85
  .dword 0x00025ED1
  .dword 0x0002601E
  .dword 0x0002616D
  .dword 0x000262BD
  .dword 0x0002640E
  .dword 0x00026560
  .dword 0x000266B3
  .dword 0x00026808
  .dword 0x0002695E
  .dword 0x00026AB5
  .dword 0x00026C0E
  .dword 0x00026D67
  .dword 0x00026EC3
  .dword 0x0002701F
  .dword 0x0002717D
  .dword 0x000272DC
  .dword 0x0002743C
  .dword 0x0002759E
  .dword 0x00027701
  .dword 0x00027865
  .dword 0x000279CB
  .dword 0x00027B32
  .dword 0x00027C9A
  .dword 0x00027E04
  .dword 0x00027F6F
  .dword 0x000280DC
  .dword 0x0002824A
  .dword 0x000283B9
  .dword 0x0002852A
  .dword 0x0002869C
  .dword 0x00028810
  .dword 0x00028985
  .dword 0x00028AFB
  .dword 0x00028C73
  .dword 0x00028DED
  .dword 0x00028F68
  .dword 0x000290E4
  .dword 0x00029262
  .dword 0x000293E2
  .dword 0x00029563
  .dword 0x000296E5
  .dword 0x00029869
  .dword 0x000299EF
  .dword 0x00029B76
  .dword 0x00029CFF
  .dword 0x00029E89
  .dword 0x0002A015
  .dword 0x0002A1A3
  .dword 0x0002A332
  .dword 0x0002A4C3
  .dword 0x0002A655
  .dword 0x0002A7E9
  .dword 0x0002A97F
  .dword 0x0002AB16
  .dword 0x0002ACAF
  .dword 0x0002AE4A
  .dword 0x0002AFE6
  .dword 0x0002B184
  .dword 0x0002B324
  .dword 0x0002B4C5
  .dword 0x0002B669
  .dword 0x0002B80E
  .dword 0x0002B9B4
  .dword 0x0002BB5D
  .dword 0x0002BD07
  .dword 0x0002BEB3
  .dword 0x0002C061
  .dword 0x0002C211
  .dword 0x0002C3C2
  .dword 0x0002C576
  .dword 0x0002C72B
  .dword 0x0002C8E2
  .dword 0x0002CA9B
  .dword 0x0002CC56
  .dword 0x0002CE13
  .dword 0x0002CFD2
  .dword 0x0002D192
  .dword 0x0002D355
  .dword 0x0002D519
  .dword 0x0002D6E0
  .dword 0x0002D8A8
  .dword 0x0002DA73
  .dword 0x0002DC3F
  .dword 0x0002DE0E
  .dword 0x0002DFDE
  .dword 0x0002E1B1
  .dword 0x0002E386
  .dword 0x0002E55D
  .dword 0x0002E735
  .dword 0x0002E910
  .dword 0x0002EAED
  .dword 0x0002ECCD
  .dword 0x0002EEAE
  .dword 0x0002F092
  .dword 0x0002F277
  .dword 0x0002F45F
  .dword 0x0002F64A
  .dword 0x0002F836
  .dword 0x0002FA25
  .dword 0x0002FC16
  .dword 0x0002FE09
  .dword 0x0002FFFE
  .dword 0x000301F6
  .dword 0x000303F0
  .dword 0x000305ED
  .dword 0x000307EC
  .dword 0x000309ED
  .dword 0x00030BF0
  .dword 0x00030DF6
  .dword 0x00030FFF
  .dword 0x0003120A
  .dword 0x00031417
  .dword 0x00031627
  .dword 0x00031839
  .dword 0x00031A4E
  .dword 0x00031C66
  .dword 0x00031E80
  .dword 0x0003209C
  .dword 0x000322BC
  .dword 0x000324DD
  .dword 0x00032702
  .dword 0x00032929
  .dword 0x00032B53
  .dword 0x00032D7F
  .dword 0x00032FAF
  .dword 0x000331E0
  .dword 0x00033415
  .dword 0x0003364D
  .dword 0x00033887
  .dword 0x00033AC4
  .dword 0x00033D04
  .dword 0x00033F47
  .dword 0x0003418D
  .dword 0x000343D5
  .dword 0x00034621
  .dword 0x0003486F
  .dword 0x00034AC1
  .dword 0x00034D15
  .dword 0x00034F6D
  .dword 0x000351C8
  .dword 0x00035425
  .dword 0x00035686
  .dword 0x000358EA
  .dword 0x00035B51
  .dword 0x00035DBB
  .dword 0x00036029
  .dword 0x00036299
  .dword 0x0003650D
  .dword 0x00036784
  .dword 0x000369FF
  .dword 0x00036C7D
  .dword 0x00036EFE
  .dword 0x00037182
  .dword 0x0003740A
  .dword 0x00037696
  .dword 0x00037925
  .dword 0x00037BB7
  .dword 0x00037E4D
  .dword 0x000380E6
  .dword 0x00038383
  .dword 0x00038624
  .dword 0x000388C8
  .dword 0x00038B70
  .dword 0x00038E1C
  .dword 0x000390CC
  .dword 0x0003937F
  .dword 0x00039636
  .dword 0x000398F1
  .dword 0x00039BAF
  .dword 0x00039E72
  .dword 0x0003A139
  .dword 0x0003A403
  .dword 0x0003A6D2
  .dword 0x0003A9A4
  .dword 0x0003AC7B
  .dword 0x0003AF55
  .dword 0x0003B234
  .dword 0x0003B517
  .dword 0x0003B7FF
  .dword 0x0003BAEA
  .dword 0x0003BDDA
  .dword 0x0003C0CE
  .dword 0x0003C3C7
  .dword 0x0003C6C4
  .dword 0x0003C9C5
  .dword 0x0003CCCB
  .dword 0x0003CFD5
  .dword 0x0003D2E4
  .dword 0x0003D5F8
  .dword 0x0003D910
  .dword 0x0003DC2D
  .dword 0x0003DF4E
  .dword 0x0003E275
  .dword 0x0003E5A0
  .dword 0x0003E8D0
  .dword 0x0003EC05
  .dword 0x0003EF3F
  .dword 0x0003F27E
  .dword 0x0003F5C2
  .dword 0x0003F90B
  .dword 0x0003FC59
  .dword 0x0003FFAC
  .dword 0x00040305
  .dword 0x00040663
  .dword 0x000409C6
  .dword 0x00040D2F
  .dword 0x0004109D
  .dword 0x00041410
  .dword 0x00041789
  .dword 0x00041B08
  .dword 0x00041E8D
  .dword 0x00042217
  .dword 0x000425A6
  .dword 0x0004293C
  .dword 0x00042CD8
  .dword 0x00043079
  .dword 0x00043421
  .dword 0x000437CE
  .dword 0x00043B82
  .dword 0x00043F3C
  .dword 0x000442FC
  .dword 0x000446C2
  .dword 0x00044A8F
  .dword 0x00044E62
  .dword 0x0004523B
  .dword 0x0004561C
  .dword 0x00045A02
  .dword 0x00045DF0
  .dword 0x000461E4
  .dword 0x000465DF
  .dword 0x000469E1
  .dword 0x00046DEA
  .dword 0x000471FA
  .dword 0x00047611
  .dword 0x00047A2F
  .dword 0x00047E55
  .dword 0x00048282
  .dword 0x000486B6
  .dword 0x00048AF2
  .dword 0x00048F35
  .dword 0x00049380
  .dword 0x000497D3
  .dword 0x00049C2E
  .dword 0x0004A090
  .dword 0x0004A4FB
  .dword 0x0004A96D
  .dword 0x0004ADE8
  .dword 0x0004B26B
  .dword 0x0004B6F7
  .dword 0x0004BB8A
  .dword 0x0004C027
  .dword 0x0004C4CC
  .dword 0x0004C979
  .dword 0x0004CE30
  .dword 0x0004D2EF
  .dword 0x0004D7B8
  .dword 0x0004DC89
  .dword 0x0004E164
  .dword 0x0004E649
  .dword 0x0004EB36
  .dword 0x0004F02D
  .dword 0x0004F52E
  .dword 0x0004FA39
  .dword 0x0004FF4E
  .dword 0x0005046C
  .dword 0x00050995
  .dword 0x00050EC8
  .dword 0x00051405
  .dword 0x0005194D
  .dword 0x00051E9F
  .dword 0x000523FC
  .dword 0x00052964
  .dword 0x00052ED7
  .dword 0x00053456
  .dword 0x000539DF
  .dword 0x00053F74
  .dword 0x00054514
  .dword 0x00054AC0
  .dword 0x00055078
  .dword 0x0005563C
  .dword 0x00055C0C
  .dword 0x000561E8
  .dword 0x000567D1
  .dword 0x00056DC7
  .dword 0x000573C9
  .dword 0x000579D8
  .dword 0x00057FF4
  .dword 0x0005861D
  .dword 0x00058C54
  .dword 0x00059298
  .dword 0x000598EA
  .dword 0x00059F4B
  .dword 0x0005A5B9
  .dword 0x0005AC35
  .dword 0x0005B2C0
  .dword 0x0005B95A
  .dword 0x0005C003
  .dword 0x0005C6BB
  .dword 0x0005CD82
  .dword 0x0005D458
  .dword 0x0005DB3F
  .dword 0x0005E235
  .dword 0x0005E93B
  .dword 0x0005F052
  .dword 0x0005F77A
  .dword 0x0005FEB2
  .dword 0x000605FB
  .dword 0x00060D56
  .dword 0x000614C2
  .dword 0x00061C40
  .dword 0x000623D0
  .dword 0x00062B72
  .dword 0x00063327
  .dword 0x00063AEF
  .dword 0x000642CA
  .dword 0x00064AB8
  .dword 0x000652BB
  .dword 0x00065AD1
  .dword 0x000662FB
  .dword 0x00066B3A
  .dword 0x0006738E
  .dword 0x00067BF7
  .dword 0x00068475
  .dword 0x00068D09
  .dword 0x000695B4
  .dword 0x00069E75
  .dword 0x0006A74D
  .dword 0x0006B03C
  .dword 0x0006B943
  .dword 0x0006C262
  .dword 0x0006CB99
  .dword 0x0006D4E8
  .dword 0x0006DE51
  .dword 0x0006E7D4
  .dword 0x0006F170
  .dword 0x0006FB27
  .dword 0x000704F8
  .dword 0x00070EE5
  .dword 0x000718ED
  .dword 0x00072312
  .dword 0x00072D53
  .dword 0x000737B1
  .dword 0x0007422C
  .dword 0x00074CC6
  .dword 0x0007577E
  .dword 0x00076255
  .dword 0x00076D4C
  .dword 0x00077863
  .dword 0x0007839B
  .dword 0x00078EF4
  .dword 0x00079A6F
  .dword 0x0007A60D
  .dword 0x0007B1CD
  .dword 0x0007BDB1
  .dword 0x0007C9BA
  .dword 0x0007D5E8
  .dword 0x0007E23B
  .dword 0x0007EEB5
  .dword 0x0007FB56
  .dword 0x0008081E
  .dword 0x00081510
  .dword 0x0008222A
  .dword 0x00082F6F
  .dword 0x00083CDE
  .dword 0x00084A7A
  .dword 0x00085841
  .dword 0x00086637
  .dword 0x0008745A
  .dword 0x000882AD
  .dword 0x00089130
  .dword 0x00089FE5
  .dword 0x0008AECB
  .dword 0x0008BDE5
  .dword 0x0008CD32
  .dword 0x0008DCB5
  .dword 0x0008EC6F
  .dword 0x0008FC60
  .dword 0x00090C89
  .dword 0x00091CED
  .dword 0x00092D8B
  .dword 0x00093E66
  .dword 0x00094F7E
  .dword 0x000960D5
  .dword 0x0009726D
  .dword 0x00098446
  .dword 0x00099663
  .dword 0x0009A8C4
  .dword 0x0009BB6B
  .dword 0x0009CE5B
  .dword 0x0009E194
  .dword 0x0009F518
  .dword 0x000A08E8
  .dword 0x000A1D08
  .dword 0x000A3178
  .dword 0x000A463A
  .dword 0x000A5B51
  .dword 0x000A70BF
  .dword 0x000A8685
  .dword 0x000A9CA6
  .dword 0x000AB323
  .dword 0x000ACA00
  .dword 0x000AE13F
  .dword 0x000AF8E2
  .dword 0x000B10EB
  .dword 0x000B295E
  .dword 0x000B423D
  .dword 0x000B5B8B
  .dword 0x000B754A
  .dword 0x000B8F7F
  .dword 0x000BAA2C
  .dword 0x000BC553
  .dword 0x000BE0FA
  .dword 0x000BFD23
  .dword 0x000C19D1
  .dword 0x000C3709
  .dword 0x000C54CF
  .dword 0x000C7326
  .dword 0x000C9213
  .dword 0x000CB19A
  .dword 0x000CD1BF
  .dword 0x000CF288
  .dword 0x000D13F9
  .dword 0x000D3619
  .dword 0x000D58EA
  .dword 0x000D7C75
  .dword 0x000DA0BD
  .dword 0x000DC5CA
  .dword 0x000DEBA1
  .dword 0x000E124A
  .dword 0x000E39CA
  .dword 0x000E6229
  .dword 0x000E8B6F
  .dword 0x000EB5A3
  .dword 0x000EE0CE
  .dword 0x000F0CF9
  .dword 0x000F3A2B
  .dword 0x000F686E
  .dword 0x000F97CD
  .dword 0x000FC852
  .dword 0x000FFA06
  .dword 0x00102CF7
  .dword 0x0010612F
  .dword 0x001096BC
  .dword 0x0010CDA9
  .dword 0x00110606
  .dword 0x00113FE1
  .dword 0x00117B49
  .dword 0x0011B84E
  .dword 0x0011F701
  .dword 0x00123776
  .dword 0x001279BD
  .dword 0x0012BDED
  .dword 0x0013041A
  .dword 0x00134C5A
  .dword 0x001396C7
  .dword 0x0013E378
  .dword 0x0014328A
  .dword 0x00148419
  .dword 0x0014D844
  .dword 0x00152F2A
  .dword 0x001588F0
  .dword 0x0015E5B9
  .dword 0x001645AE
  .dword 0x0016A8F9
  .dword 0x00170FC7
  .dword 0x00177A48
  .dword 0x0017E8B2
  .dword 0x00185B3C
  .dword 0x0018D222
  .dword 0x00194DA6
  .dword 0x0019CE0D
  .dword 0x001A53A4
  .dword 0x001ADEBC
  .dword 0x001B6FAF
  .dword 0x001C06D6
  .dword 0x001CA4A9
  .dword 0x001D4992
  .dword 0x001DF610
  .dword 0x001EAAAB
  .dword 0x001F67F9
  .dword 0x00202E9F
  .dword 0x0020FF54
  .dword 0x0021DADF
  .dword 0x0022C21F
  .dword 0x0023B60A
  .dword 0x0024B7B2
  .dword 0x0025C848
  .dword 0x0026E924
  .dword 0x00281BC5
  .dword 0x002961DE
  .dword 0x002ABD57
  .dword 0x002C305E
  .dword 0x002DBD6D
  .dword 0x002F675B
  .dword 0x0031316E
  .dword 0x00331F6D
  .dword 0x003535BD
  .dword 0x00377986
  .dword 0x0039F0D6
  .dword 0x003CA2DF
  .dword 0x003F9839
  .dword 0x0042DB3E
  .dword 0x00467887
  .dword 0x004A7F8E
  .dword 0x004F038B
  .dword 0x00541CB0
  .dword 0x0059E9D7
  .dword 0x00609302
  .dword 0x00684CFF
  .dword 0x00715EF8
  .dword 0x007C2B37
  .dword 0x00893D65
  .dword 0x009962E7
  .dword 0x00ADD6AB
  .dword 0x00C8956F
  .dword 0x00ED0DEF
  .dword 0x0121BC04
  .dword 0x01748484
  .dword 0x02098758
  .dword 0x03653A78
  .dword 0x0A2FE260
  .resb 16

finesine:
  .dword 0x00000019
  .dword 0x0000004B
  .dword 0x0000007D
  .dword 0x000000AF
  .dword 0x000000E2
  .dword 0x00000114
  .dword 0x00000146
  .dword 0x00000178
  .dword 0x000001AB
  .dword 0x000001DD
  .dword 0x0000020F
  .dword 0x00000242
  .dword 0x00000274
  .dword 0x000002A6
  .dword 0x000002D8
  .dword 0x0000030B
  .dword 0x0000033D
  .dword 0x0000036F
  .dword 0x000003A1
  .dword 0x000003D4
  .dword 0x00000406
  .dword 0x00000438
  .dword 0x0000046A
  .dword 0x0000049D
  .dword 0x000004CF
  .dword 0x00000501
  .dword 0x00000533
  .dword 0x00000566
  .dword 0x00000598
  .dword 0x000005CA
  .dword 0x000005FC
  .dword 0x0000062F
  .dword 0x00000661
  .dword 0x00000693
  .dword 0x000006C5
  .dword 0x000006F8
  .dword 0x0000072A
  .dword 0x0000075C
  .dword 0x0000078E
  .dword 0x000007C1
  .dword 0x000007F3
  .dword 0x00000825
  .dword 0x00000857
  .dword 0x0000088A
  .dword 0x000008BC
  .dword 0x000008EE
  .dword 0x00000920
  .dword 0x00000953
  .dword 0x00000985
  .dword 0x000009B7
  .dword 0x000009E9
  .dword 0x00000A1B
  .dword 0x00000A4E
  .dword 0x00000A80
  .dword 0x00000AB2
  .dword 0x00000AE4
  .dword 0x00000B17
  .dword 0x00000B49
  .dword 0x00000B7B
  .dword 0x00000BAD
  .dword 0x00000BDF
  .dword 0x00000C12
  .dword 0x00000C44
  .dword 0x00000C76
  .dword 0x00000CA8
  .dword 0x00000CDB
  .dword 0x00000D0D
  .dword 0x00000D3F
  .dword 0x00000D71
  .dword 0x00000DA3
  .dword 0x00000DD5
  .dword 0x00000E08
  .dword 0x00000E3A
  .dword 0x00000E6C
  .dword 0x00000E9E
  .dword 0x00000ED0
  .dword 0x00000F03
  .dword 0x00000F35
  .dword 0x00000F67
  .dword 0x00000F99
  .dword 0x00000FCB
  .dword 0x00000FFD
  .dword 0x00001030
  .dword 0x00001062
  .dword 0x00001094
  .dword 0x000010C6
  .dword 0x000010F8
  .dword 0x0000112A
  .dword 0x0000115D
  .dword 0x0000118F
  .dword 0x000011C1
  .dword 0x000011F3
  .dword 0x00001225
  .dword 0x00001257
  .dword 0x00001289
  .dword 0x000012BC
  .dword 0x000012EE
  .dword 0x00001320
  .dword 0x00001352
  .dword 0x00001384
  .dword 0x000013B6
  .dword 0x000013E8
  .dword 0x0000141A
  .dword 0x0000144D
  .dword 0x0000147F
  .dword 0x000014B1
  .dword 0x000014E3
  .dword 0x00001515
  .dword 0x00001547
  .dword 0x00001579
  .dword 0x000015AB
  .dword 0x000015DD
  .dword 0x0000160F
  .dword 0x00001641
  .dword 0x00001674
  .dword 0x000016A6
  .dword 0x000016D8
  .dword 0x0000170A
  .dword 0x0000173C
  .dword 0x0000176E
  .dword 0x000017A0
  .dword 0x000017D2
  .dword 0x00001804
  .dword 0x00001836
  .dword 0x00001868
  .dword 0x0000189A
  .dword 0x000018CC
  .dword 0x000018FE
  .dword 0x00001930
  .dword 0x00001962
  .dword 0x00001994
  .dword 0x000019C6
  .dword 0x000019F8
  .dword 0x00001A2A
  .dword 0x00001A5C
  .dword 0x00001A8E
  .dword 0x00001AC0
  .dword 0x00001AF2
  .dword 0x00001B24
  .dword 0x00001B56
  .dword 0x00001B88
  .dword 0x00001BBA
  .dword 0x00001BEC
  .dword 0x00001C1E
  .dword 0x00001C50
  .dword 0x00001C82
  .dword 0x00001CB4
  .dword 0x00001CE6
  .dword 0x00001D18
  .dword 0x00001D4A
  .dword 0x00001D7C
  .dword 0x00001DAE
  .dword 0x00001DE0
  .dword 0x00001E11
  .dword 0x00001E43
  .dword 0x00001E75
  .dword 0x00001EA7
  .dword 0x00001ED9
  .dword 0x00001F0B
  .dword 0x00001F3D
  .dword 0x00001F6F
  .dword 0x00001FA1
  .dword 0x00001FD3
  .dword 0x00002004
  .dword 0x00002036
  .dword 0x00002068
  .dword 0x0000209A
  .dword 0x000020CC
  .dword 0x000020FE
  .dword 0x00002130
  .dword 0x00002161
  .dword 0x00002193
  .dword 0x000021C5
  .dword 0x000021F7
  .dword 0x00002229
  .dword 0x0000225A
  .dword 0x0000228C
  .dword 0x000022BE
  .dword 0x000022F0
  .dword 0x00002322
  .dword 0x00002353
  .dword 0x00002385
  .dword 0x000023B7
  .dword 0x000023E9
  .dword 0x0000241B
  .dword 0x0000244C
  .dword 0x0000247E
  .dword 0x000024B0
  .dword 0x000024E2
  .dword 0x00002513
  .dword 0x00002545
  .dword 0x00002577
  .dword 0x000025A8
  .dword 0x000025DA
  .dword 0x0000260C
  .dword 0x0000263E
  .dword 0x0000266F
  .dword 0x000026A1
  .dword 0x000026D3
  .dword 0x00002704
  .dword 0x00002736
  .dword 0x00002768
  .dword 0x00002799
  .dword 0x000027CB
  .dword 0x000027FD
  .dword 0x0000282E
  .dword 0x00002860
  .dword 0x00002892
  .dword 0x000028C3
  .dword 0x000028F5
  .dword 0x00002926
  .dword 0x00002958
  .dword 0x0000298A
  .dword 0x000029BB
  .dword 0x000029ED
  .dword 0x00002A1E
  .dword 0x00002A50
  .dword 0x00002A82
  .dword 0x00002AB3
  .dword 0x00002AE5
  .dword 0x00002B16
  .dword 0x00002B48
  .dword 0x00002B79
  .dword 0x00002BAB
  .dword 0x00002BDC
  .dword 0x00002C0E
  .dword 0x00002C3F
  .dword 0x00002C71
  .dword 0x00002CA2
  .dword 0x00002CD4
  .dword 0x00002D05
  .dword 0x00002D37
  .dword 0x00002D68
  .dword 0x00002D9A
  .dword 0x00002DCB
  .dword 0x00002DFD
  .dword 0x00002E2E
  .dword 0x00002E60
  .dword 0x00002E91
  .dword 0x00002EC2
  .dword 0x00002EF4
  .dword 0x00002F25
  .dword 0x00002F57
  .dword 0x00002F88
  .dword 0x00002FBA
  .dword 0x00002FEB
  .dword 0x0000301C
  .dword 0x0000304E
  .dword 0x0000307F
  .dword 0x000030B0
  .dword 0x000030E2
  .dword 0x00003113
  .dword 0x00003144
  .dword 0x00003176
  .dword 0x000031A7
  .dword 0x000031D8
  .dword 0x0000320A
  .dword 0x0000323B
  .dword 0x0000326C
  .dword 0x0000329D
  .dword 0x000032CF
  .dword 0x00003300
  .dword 0x00003331
  .dword 0x00003362
  .dword 0x00003394
  .dword 0x000033C5
  .dword 0x000033F6
  .dword 0x00003427
  .dword 0x00003459
  .dword 0x0000348A
  .dword 0x000034BB
  .dword 0x000034EC
  .dword 0x0000351D
  .dword 0x0000354F
  .dword 0x00003580
  .dword 0x000035B1
  .dword 0x000035E2
  .dword 0x00003613
  .dword 0x00003644
  .dword 0x00003675
  .dword 0x000036A6
  .dword 0x000036D8
  .dword 0x00003709
  .dword 0x0000373A
  .dword 0x0000376B
  .dword 0x0000379C
  .dword 0x000037CD
  .dword 0x000037FE
  .dword 0x0000382F
  .dword 0x00003860
  .dword 0x00003891
  .dword 0x000038C2
  .dword 0x000038F3
  .dword 0x00003924
  .dword 0x00003955
  .dword 0x00003986
  .dword 0x000039B7
  .dword 0x000039E8
  .dword 0x00003A19
  .dword 0x00003A4A
  .dword 0x00003A7B
  .dword 0x00003AAC
  .dword 0x00003ADD
  .dword 0x00003B0E
  .dword 0x00003B3F
  .dword 0x00003B6F
  .dword 0x00003BA0
  .dword 0x00003BD1
  .dword 0x00003C02
  .dword 0x00003C33
  .dword 0x00003C64
  .dword 0x00003C95
  .dword 0x00003CC5
  .dword 0x00003CF6
  .dword 0x00003D27
  .dword 0x00003D58
  .dword 0x00003D89
  .dword 0x00003DBA
  .dword 0x00003DEA
  .dword 0x00003E1B
  .dword 0x00003E4C
  .dword 0x00003E7D
  .dword 0x00003EAD
  .dword 0x00003EDE
  .dword 0x00003F0F
  .dword 0x00003F3F
  .dword 0x00003F70
  .dword 0x00003FA1
  .dword 0x00003FD2
  .dword 0x00004002
  .dword 0x00004033
  .dword 0x00004064
  .dword 0x00004094
  .dword 0x000040C5
  .dword 0x000040F5
  .dword 0x00004126
  .dword 0x00004157
  .dword 0x00004187
  .dword 0x000041B8
  .dword 0x000041E8
  .dword 0x00004219
  .dword 0x0000424A
  .dword 0x0000427A
  .dword 0x000042AB
  .dword 0x000042DB
  .dword 0x0000430C
  .dword 0x0000433C
  .dword 0x0000436D
  .dword 0x0000439D
  .dword 0x000043CE
  .dword 0x000043FE
  .dword 0x0000442F
  .dword 0x0000445F
  .dword 0x0000448F
  .dword 0x000044C0
  .dword 0x000044F0
  .dword 0x00004521
  .dword 0x00004551
  .dword 0x00004581
  .dword 0x000045B2
  .dword 0x000045E2
  .dword 0x00004613
  .dword 0x00004643
  .dword 0x00004673
  .dword 0x000046A4
  .dword 0x000046D4
  .dword 0x00004704
  .dword 0x00004734
  .dword 0x00004765
  .dword 0x00004795
  .dword 0x000047C5
  .dword 0x000047F5
  .dword 0x00004826
  .dword 0x00004856
  .dword 0x00004886
  .dword 0x000048B6
  .dword 0x000048E7
  .dword 0x00004917
  .dword 0x00004947
  .dword 0x00004977
  .dword 0x000049A7
  .dword 0x000049D7
  .dword 0x00004A07
  .dword 0x00004A38
  .dword 0x00004A68
  .dword 0x00004A98
  .dword 0x00004AC8
  .dword 0x00004AF8
  .dword 0x00004B28
  .dword 0x00004B58
  .dword 0x00004B88
  .dword 0x00004BB8
  .dword 0x00004BE8
  .dword 0x00004C18
  .dword 0x00004C48
  .dword 0x00004C78
  .dword 0x00004CA8
  .dword 0x00004CD8
  .dword 0x00004D08
  .dword 0x00004D38
  .dword 0x00004D68
  .dword 0x00004D98
  .dword 0x00004DC8
  .dword 0x00004DF7
  .dword 0x00004E27
  .dword 0x00004E57
  .dword 0x00004E87
  .dword 0x00004EB7
  .dword 0x00004EE7
  .dword 0x00004F16
  .dword 0x00004F46
  .dword 0x00004F76
  .dword 0x00004FA6
  .dword 0x00004FD6
  .dword 0x00005005
  .dword 0x00005035
  .dword 0x00005065
  .dword 0x00005095
  .dword 0x000050C4
  .dword 0x000050F4
  .dword 0x00005124
  .dword 0x00005153
  .dword 0x00005183
  .dword 0x000051B3
  .dword 0x000051E2
  .dword 0x00005212
  .dword 0x00005241
  .dword 0x00005271
  .dword 0x000052A1
  .dword 0x000052D0
  .dword 0x00005300
  .dword 0x0000532F
  .dword 0x0000535F
  .dword 0x0000538E
  .dword 0x000053BE
  .dword 0x000053ED
  .dword 0x0000541D
  .dword 0x0000544C
  .dword 0x0000547C
  .dword 0x000054AB
  .dword 0x000054DB
  .dword 0x0000550A
  .dword 0x00005539
  .dword 0x00005569
  .dword 0x00005598
  .dword 0x000055C8
  .dword 0x000055F7
  .dword 0x00005626
  .dword 0x00005656
  .dword 0x00005685
  .dword 0x000056B4
  .dword 0x000056E3
  .dword 0x00005713
  .dword 0x00005742
  .dword 0x00005771
  .dword 0x000057A1
  .dword 0x000057D0
  .dword 0x000057FF
  .dword 0x0000582E
  .dword 0x0000585D
  .dword 0x0000588C
  .dword 0x000058BC
  .dword 0x000058EB
  .dword 0x0000591A
  .dword 0x00005949
  .dword 0x00005978
  .dword 0x000059A7
  .dword 0x000059D6
  .dword 0x00005A05
  .dword 0x00005A34
  .dword 0x00005A63
  .dword 0x00005A92
  .dword 0x00005AC1
  .dword 0x00005AF0
  .dword 0x00005B1F
  .dword 0x00005B4E
  .dword 0x00005B7D
  .dword 0x00005BAC
  .dword 0x00005BDB
  .dword 0x00005C0A
  .dword 0x00005C39
  .dword 0x00005C68
  .dword 0x00005C97
  .dword 0x00005CC6
  .dword 0x00005CF4
  .dword 0x00005D23
  .dword 0x00005D52
  .dword 0x00005D81
  .dword 0x00005DB0
  .dword 0x00005DDE
  .dword 0x00005E0D
  .dword 0x00005E3C
  .dword 0x00005E6B
  .dword 0x00005E99
  .dword 0x00005EC8
  .dword 0x00005EF7
  .dword 0x00005F25
  .dword 0x00005F54
  .dword 0x00005F83
  .dword 0x00005FB1
  .dword 0x00005FE0
  .dword 0x0000600F
  .dword 0x0000603D
  .dword 0x0000606C
  .dword 0x0000609A
  .dword 0x000060C9
  .dword 0x000060F7
  .dword 0x00006126
  .dword 0x00006154
  .dword 0x00006183
  .dword 0x000061B1
  .dword 0x000061E0
  .dword 0x0000620E
  .dword 0x0000623D
  .dword 0x0000626B
  .dword 0x00006299
  .dword 0x000062C8
  .dword 0x000062F6
  .dword 0x00006325
  .dword 0x00006353
  .dword 0x00006381
  .dword 0x000063B0
  .dword 0x000063DE
  .dword 0x0000640C
  .dword 0x0000643A
  .dword 0x00006469
  .dword 0x00006497
  .dword 0x000064C5
  .dword 0x000064F3
  .dword 0x00006521
  .dword 0x00006550
  .dword 0x0000657E
  .dword 0x000065AC
  .dword 0x000065DA
  .dword 0x00006608
  .dword 0x00006636
  .dword 0x00006664
  .dword 0x00006692
  .dword 0x000066C0
  .dword 0x000066EE
  .dword 0x0000671C
  .dword 0x0000674A
  .dword 0x00006778
  .dword 0x000067A6
  .dword 0x000067D4
  .dword 0x00006802
  .dword 0x00006830
  .dword 0x0000685E
  .dword 0x0000688C
  .dword 0x000068BA
  .dword 0x000068E8
  .dword 0x00006916
  .dword 0x00006943
  .dword 0x00006971
  .dword 0x0000699F
  .dword 0x000069CD
  .dword 0x000069FB
  .dword 0x00006A28
  .dword 0x00006A56
  .dword 0x00006A84
  .dword 0x00006AB1
  .dword 0x00006ADF
  .dword 0x00006B0D
  .dword 0x00006B3A
  .dword 0x00006B68
  .dword 0x00006B96
  .dword 0x00006BC3
  .dword 0x00006BF1
  .dword 0x00006C1E
  .dword 0x00006C4C
  .dword 0x00006C7A
  .dword 0x00006CA7
  .dword 0x00006CD5
  .dword 0x00006D02
  .dword 0x00006D30
  .dword 0x00006D5D
  .dword 0x00006D8A
  .dword 0x00006DB8
  .dword 0x00006DE5
  .dword 0x00006E13
  .dword 0x00006E40
  .dword 0x00006E6D
  .dword 0x00006E9B
  .dword 0x00006EC8
  .dword 0x00006EF5
  .dword 0x00006F23
  .dword 0x00006F50
  .dword 0x00006F7D
  .dword 0x00006FAA
  .dword 0x00006FD8
  .dword 0x00007005
  .dword 0x00007032
  .dword 0x0000705F
  .dword 0x0000708C
  .dword 0x000070BA
  .dword 0x000070E7
  .dword 0x00007114
  .dword 0x00007141
  .dword 0x0000716E
  .dword 0x0000719B
  .dword 0x000071C8
  .dword 0x000071F5
  .dword 0x00007222
  .dword 0x0000724F
  .dword 0x0000727C
  .dword 0x000072A9
  .dword 0x000072D6
  .dword 0x00007303
  .dword 0x00007330
  .dword 0x0000735D
  .dword 0x00007389
  .dword 0x000073B6
  .dword 0x000073E3
  .dword 0x00007410
  .dword 0x0000743D
  .dword 0x00007469
  .dword 0x00007496
  .dword 0x000074C3
  .dword 0x000074F0
  .dword 0x0000751C
  .dword 0x00007549
  .dword 0x00007576
  .dword 0x000075A2
  .dword 0x000075CF
  .dword 0x000075FC
  .dword 0x00007628
  .dword 0x00007655
  .dword 0x00007681
  .dword 0x000076AE
  .dword 0x000076DA
  .dword 0x00007707
  .dword 0x00007733
  .dword 0x00007760
  .dword 0x0000778C
  .dword 0x000077B9
  .dword 0x000077E5
  .dword 0x00007812
  .dword 0x0000783E
  .dword 0x0000786A
  .dword 0x00007897
  .dword 0x000078C3
  .dword 0x000078EF
  .dword 0x0000791C
  .dword 0x00007948
  .dword 0x00007974
  .dword 0x000079A0
  .dword 0x000079CD
  .dword 0x000079F9
  .dword 0x00007A25
  .dword 0x00007A51
  .dword 0x00007A7D
  .dword 0x00007AAA
  .dword 0x00007AD6
  .dword 0x00007B02
  .dword 0x00007B2E
  .dword 0x00007B5A
  .dword 0x00007B86
  .dword 0x00007BB2
  .dword 0x00007BDE
  .dword 0x00007C0A
  .dword 0x00007C36
  .dword 0x00007C62
  .dword 0x00007C8E
  .dword 0x00007CBA
  .dword 0x00007CE6
  .dword 0x00007D11
  .dword 0x00007D3D
  .dword 0x00007D69
  .dword 0x00007D95
  .dword 0x00007DC1
  .dword 0x00007DEC
  .dword 0x00007E18
  .dword 0x00007E44
  .dword 0x00007E70
  .dword 0x00007E9B
  .dword 0x00007EC7
  .dword 0x00007EF3
  .dword 0x00007F1E
  .dword 0x00007F4A
  .dword 0x00007F76
  .dword 0x00007FA1
  .dword 0x00007FCD
  .dword 0x00007FF8
  .dword 0x00008024
  .dword 0x0000804F
  .dword 0x0000807B
  .dword 0x000080A6
  .dword 0x000080D2
  .dword 0x000080FD
  .dword 0x00008129
  .dword 0x00008154
  .dword 0x0000817F
  .dword 0x000081AB
  .dword 0x000081D6
  .dword 0x00008201
  .dword 0x0000822D
  .dword 0x00008258
  .dword 0x00008283
  .dword 0x000082AE
  .dword 0x000082DA
  .dword 0x00008305
  .dword 0x00008330
  .dword 0x0000835B
  .dword 0x00008386
  .dword 0x000083B1
  .dword 0x000083DC
  .dword 0x00008407
  .dword 0x00008433
  .dword 0x0000845E
  .dword 0x00008489
  .dword 0x000084B4
  .dword 0x000084DF
  .dword 0x00008509
  .dword 0x00008534
  .dword 0x0000855F
  .dword 0x0000858A
  .dword 0x000085B5
  .dword 0x000085E0
  .dword 0x0000860B
  .dword 0x00008636
  .dword 0x00008660
  .dword 0x0000868B
  .dword 0x000086B6
  .dword 0x000086E1
  .dword 0x0000870B
  .dword 0x00008736
  .dword 0x00008761
  .dword 0x0000878B
  .dword 0x000087B6
  .dword 0x000087E1
  .dword 0x0000880B
  .dword 0x00008836
  .dword 0x00008860
  .dword 0x0000888B
  .dword 0x000088B5
  .dword 0x000088E0
  .dword 0x0000890A
  .dword 0x00008935
  .dword 0x0000895F
  .dword 0x0000898A
  .dword 0x000089B4
  .dword 0x000089DE
  .dword 0x00008A09
  .dword 0x00008A33
  .dword 0x00008A5D
  .dword 0x00008A88
  .dword 0x00008AB2
  .dword 0x00008ADC
  .dword 0x00008B06
  .dword 0x00008B31
  .dword 0x00008B5B
  .dword 0x00008B85
  .dword 0x00008BAF
  .dword 0x00008BD9
  .dword 0x00008C03
  .dword 0x00008C2D
  .dword 0x00008C57
  .dword 0x00008C81
  .dword 0x00008CAB
  .dword 0x00008CD5
  .dword 0x00008CFF
  .dword 0x00008D29
  .dword 0x00008D53
  .dword 0x00008D7D
  .dword 0x00008DA7
  .dword 0x00008DD1
  .dword 0x00008DFB
  .dword 0x00008E24
  .dword 0x00008E4E
  .dword 0x00008E78
  .dword 0x00008EA2
  .dword 0x00008ECB
  .dword 0x00008EF5
  .dword 0x00008F1F
  .dword 0x00008F49
  .dword 0x00008F72
  .dword 0x00008F9C
  .dword 0x00008FC5
  .dword 0x00008FEF
  .dword 0x00009019
  .dword 0x00009042
  .dword 0x0000906C
  .dword 0x00009095
  .dword 0x000090BF
  .dword 0x000090E8
  .dword 0x00009111
  .dword 0x0000913B
  .dword 0x00009164
  .dword 0x0000918E
  .dword 0x000091B7
  .dword 0x000091E0
  .dword 0x0000920A
  .dword 0x00009233
  .dword 0x0000925C
  .dword 0x00009285
  .dword 0x000092AF
  .dword 0x000092D8
  .dword 0x00009301
  .dword 0x0000932A
  .dword 0x00009353
  .dword 0x0000937C
  .dword 0x000093A5
  .dword 0x000093CE
  .dword 0x000093F7
  .dword 0x00009420
  .dword 0x00009449
  .dword 0x00009472
  .dword 0x0000949B
  .dword 0x000094C4
  .dword 0x000094ED
  .dword 0x00009516
  .dword 0x0000953F
  .dword 0x00009568
  .dword 0x00009590
  .dword 0x000095B9
  .dword 0x000095E2
  .dword 0x0000960B
  .dword 0x00009633
  .dword 0x0000965C
  .dword 0x00009685
  .dword 0x000096AD
  .dword 0x000096D6
  .dword 0x000096FF
  .dword 0x00009727
  .dword 0x00009750
  .dword 0x00009778
  .dword 0x000097A1
  .dword 0x000097C9
  .dword 0x000097F2
  .dword 0x0000981A
  .dword 0x00009843
  .dword 0x0000986B
  .dword 0x00009893
  .dword 0x000098BC
  .dword 0x000098E4
  .dword 0x0000990C
  .dword 0x00009935
  .dword 0x0000995D
  .dword 0x00009985
  .dword 0x000099AD
  .dword 0x000099D6
  .dword 0x000099FE
  .dword 0x00009A26
  .dword 0x00009A4E
  .dword 0x00009A76
  .dword 0x00009A9E
  .dword 0x00009AC6
  .dword 0x00009AEE
  .dword 0x00009B16
  .dword 0x00009B3E
  .dword 0x00009B66
  .dword 0x00009B8E
  .dword 0x00009BB6
  .dword 0x00009BDE
  .dword 0x00009C06
  .dword 0x00009C2E
  .dword 0x00009C55
  .dword 0x00009C7D
  .dword 0x00009CA5
  .dword 0x00009CCD
  .dword 0x00009CF4
  .dword 0x00009D1C
  .dword 0x00009D44
  .dword 0x00009D6C
  .dword 0x00009D93
  .dword 0x00009DBB
  .dword 0x00009DE2
  .dword 0x00009E0A
  .dword 0x00009E31
  .dword 0x00009E59
  .dword 0x00009E80
  .dword 0x00009EA8
  .dword 0x00009ECF
  .dword 0x00009EF7
  .dword 0x00009F1E
  .dword 0x00009F45
  .dword 0x00009F6D
  .dword 0x00009F94
  .dword 0x00009FBB
  .dword 0x00009FE3
  .dword 0x0000A00A
  .dword 0x0000A031
  .dword 0x0000A058
  .dword 0x0000A07F
  .dword 0x0000A0A7
  .dword 0x0000A0CE
  .dword 0x0000A0F5
  .dword 0x0000A11C
  .dword 0x0000A143
  .dword 0x0000A16A
  .dword 0x0000A191
  .dword 0x0000A1B8
  .dword 0x0000A1DF
  .dword 0x0000A206
  .dword 0x0000A22D
  .dword 0x0000A254
  .dword 0x0000A27B
  .dword 0x0000A2A1
  .dword 0x0000A2C8
  .dword 0x0000A2EF
  .dword 0x0000A316
  .dword 0x0000A33C
  .dword 0x0000A363
  .dword 0x0000A38A
  .dword 0x0000A3B0
  .dword 0x0000A3D7
  .dword 0x0000A3FE
  .dword 0x0000A424
  .dword 0x0000A44B
  .dword 0x0000A471
  .dword 0x0000A498
  .dword 0x0000A4BE
  .dword 0x0000A4E5
  .dword 0x0000A50B
  .dword 0x0000A532
  .dword 0x0000A558
  .dword 0x0000A57E
  .dword 0x0000A5A5
  .dword 0x0000A5CB
  .dword 0x0000A5F1
  .dword 0x0000A618
  .dword 0x0000A63E
  .dword 0x0000A664
  .dword 0x0000A68A
  .dword 0x0000A6B0
  .dword 0x0000A6D7
  .dword 0x0000A6FD
  .dword 0x0000A723
  .dword 0x0000A749
  .dword 0x0000A76F
  .dword 0x0000A795
  .dword 0x0000A7BB
  .dword 0x0000A7E1
  .dword 0x0000A807
  .dword 0x0000A82D
  .dword 0x0000A853
  .dword 0x0000A878
  .dword 0x0000A89E
  .dword 0x0000A8C4
  .dword 0x0000A8EA
  .dword 0x0000A910
  .dword 0x0000A935
  .dword 0x0000A95B
  .dword 0x0000A981
  .dword 0x0000A9A6
  .dword 0x0000A9CC
  .dword 0x0000A9F2
  .dword 0x0000AA17
  .dword 0x0000AA3D
  .dword 0x0000AA62
  .dword 0x0000AA88
  .dword 0x0000AAAD
  .dword 0x0000AAD3
  .dword 0x0000AAF8
  .dword 0x0000AB1E
  .dword 0x0000AB43
  .dword 0x0000AB68
  .dword 0x0000AB8E
  .dword 0x0000ABB3
  .dword 0x0000ABD8
  .dword 0x0000ABFD
  .dword 0x0000AC23
  .dword 0x0000AC48
  .dword 0x0000AC6D
  .dword 0x0000AC92
  .dword 0x0000ACB7
  .dword 0x0000ACDC
  .dword 0x0000AD01
  .dword 0x0000AD26
  .dword 0x0000AD4B
  .dword 0x0000AD70
  .dword 0x0000AD95
  .dword 0x0000ADBA
  .dword 0x0000ADDF
  .dword 0x0000AE04
  .dword 0x0000AE29
  .dword 0x0000AE4E
  .dword 0x0000AE73
  .dword 0x0000AE97
  .dword 0x0000AEBC
  .dword 0x0000AEE1
  .dword 0x0000AF06
  .dword 0x0000AF2A
  .dword 0x0000AF4F
  .dword 0x0000AF73
  .dword 0x0000AF98
  .dword 0x0000AFBD
  .dword 0x0000AFE1
  .dword 0x0000B006
  .dword 0x0000B02A
  .dword 0x0000B04F
  .dword 0x0000B073
  .dword 0x0000B097
  .dword 0x0000B0BC
  .dword 0x0000B0E0
  .dword 0x0000B104
  .dword 0x0000B129
  .dword 0x0000B14D
  .dword 0x0000B171
  .dword 0x0000B196
  .dword 0x0000B1BA
  .dword 0x0000B1DE
  .dword 0x0000B202
  .dword 0x0000B226
  .dword 0x0000B24A
  .dword 0x0000B26E
  .dword 0x0000B292
  .dword 0x0000B2B6
  .dword 0x0000B2DA
  .dword 0x0000B2FE
  .dword 0x0000B322
  .dword 0x0000B346
  .dword 0x0000B36A
  .dword 0x0000B38E
  .dword 0x0000B3B2
  .dword 0x0000B3D5
  .dword 0x0000B3F9
  .dword 0x0000B41D
  .dword 0x0000B441
  .dword 0x0000B464
  .dword 0x0000B488
  .dword 0x0000B4AC
  .dword 0x0000B4CF
  .dword 0x0000B4F3
  .dword 0x0000B516
  .dword 0x0000B53A
  .dword 0x0000B55D
  .dword 0x0000B581
  .dword 0x0000B5A4
  .dword 0x0000B5C8
  .dword 0x0000B5EB
  .dword 0x0000B60E
  .dword 0x0000B632
  .dword 0x0000B655
  .dword 0x0000B678
  .dword 0x0000B69B
  .dword 0x0000B6BF
  .dword 0x0000B6E2
  .dword 0x0000B705
  .dword 0x0000B728
  .dword 0x0000B74B
  .dword 0x0000B76E
  .dword 0x0000B791
  .dword 0x0000B7B4
  .dword 0x0000B7D7
  .dword 0x0000B7FA
  .dword 0x0000B81D
  .dword 0x0000B840
  .dword 0x0000B863
  .dword 0x0000B886
  .dword 0x0000B8A9
  .dword 0x0000B8CC
  .dword 0x0000B8EE
  .dword 0x0000B911
  .dword 0x0000B934
  .dword 0x0000B956
  .dword 0x0000B979
  .dword 0x0000B99C
  .dword 0x0000B9BE
  .dword 0x0000B9E1
  .dword 0x0000BA03
  .dword 0x0000BA26
  .dword 0x0000BA48
  .dword 0x0000BA6B
  .dword 0x0000BA8D
  .dword 0x0000BAB0
  .dword 0x0000BAD2
  .dword 0x0000BAF4
  .dword 0x0000BB17
  .dword 0x0000BB39
  .dword 0x0000BB5B
  .dword 0x0000BB7E
  .dword 0x0000BBA0
  .dword 0x0000BBC2
  .dword 0x0000BBE4
  .dword 0x0000BC06
  .dword 0x0000BC28
  .dword 0x0000BC4A
  .dword 0x0000BC6D
  .dword 0x0000BC8F
  .dword 0x0000BCB1
  .dword 0x0000BCD2
  .dword 0x0000BCF4
  .dword 0x0000BD16
  .dword 0x0000BD38
  .dword 0x0000BD5A
  .dword 0x0000BD7C
  .dword 0x0000BD9E
  .dword 0x0000BDBF
  .dword 0x0000BDE1
  .dword 0x0000BE03
  .dword 0x0000BE24
  .dword 0x0000BE46
  .dword 0x0000BE68
  .dword 0x0000BE89
  .dword 0x0000BEAB
  .dword 0x0000BECC
  .dword 0x0000BEEE
  .dword 0x0000BF0F
  .dword 0x0000BF31
  .dword 0x0000BF52
  .dword 0x0000BF74
  .dword 0x0000BF95
  .dword 0x0000BFB6
  .dword 0x0000BFD8
  .dword 0x0000BFF9
  .dword 0x0000C01A
  .dword 0x0000C03B
  .dword 0x0000C05C
  .dword 0x0000C07E
  .dword 0x0000C09F
  .dword 0x0000C0C0
  .dword 0x0000C0E1
  .dword 0x0000C102
  .dword 0x0000C123
  .dword 0x0000C144
  .dword 0x0000C165
  .dword 0x0000C186
  .dword 0x0000C1A7
  .dword 0x0000C1C8
  .dword 0x0000C1E8
  .dword 0x0000C209
  .dword 0x0000C22A
  .dword 0x0000C24B
  .dword 0x0000C26B
  .dword 0x0000C28C
  .dword 0x0000C2AD
  .dword 0x0000C2CD
  .dword 0x0000C2EE
  .dword 0x0000C30F
  .dword 0x0000C32F
  .dword 0x0000C350
  .dword 0x0000C370
  .dword 0x0000C391
  .dword 0x0000C3B1
  .dword 0x0000C3D1
  .dword 0x0000C3F2
  .dword 0x0000C412
  .dword 0x0000C432
  .dword 0x0000C453
  .dword 0x0000C473
  .dword 0x0000C493
  .dword 0x0000C4B3
  .dword 0x0000C4D3
  .dword 0x0000C4F4
  .dword 0x0000C514
  .dword 0x0000C534
  .dword 0x0000C554
  .dword 0x0000C574
  .dword 0x0000C594
  .dword 0x0000C5B4
  .dword 0x0000C5D4
  .dword 0x0000C5F3
  .dword 0x0000C613
  .dword 0x0000C633
  .dword 0x0000C653
  .dword 0x0000C673
  .dword 0x0000C692
  .dword 0x0000C6B2
  .dword 0x0000C6D2
  .dword 0x0000C6F1
  .dword 0x0000C711
  .dword 0x0000C731
  .dword 0x0000C750
  .dword 0x0000C770
  .dword 0x0000C78F
  .dword 0x0000C7AF
  .dword 0x0000C7CE
  .dword 0x0000C7EE
  .dword 0x0000C80D
  .dword 0x0000C82C
  .dword 0x0000C84C
  .dword 0x0000C86B
  .dword 0x0000C88A
  .dword 0x0000C8A9
  .dword 0x0000C8C9
  .dword 0x0000C8E8
  .dword 0x0000C907
  .dword 0x0000C926
  .dword 0x0000C945
  .dword 0x0000C964
  .dword 0x0000C983
  .dword 0x0000C9A2
  .dword 0x0000C9C1
  .dword 0x0000C9E0
  .dword 0x0000C9FF
  .dword 0x0000CA1E
  .dword 0x0000CA3D
  .dword 0x0000CA5B
  .dword 0x0000CA7A
  .dword 0x0000CA99
  .dword 0x0000CAB8
  .dword 0x0000CAD6
  .dword 0x0000CAF5
  .dword 0x0000CB14
  .dword 0x0000CB32
  .dword 0x0000CB51
  .dword 0x0000CB6F
  .dword 0x0000CB8E
  .dword 0x0000CBAC
  .dword 0x0000CBCB
  .dword 0x0000CBE9
  .dword 0x0000CC07
  .dword 0x0000CC26
  .dword 0x0000CC44
  .dword 0x0000CC62
  .dword 0x0000CC81
  .dword 0x0000CC9F
  .dword 0x0000CCBD
  .dword 0x0000CCDB
  .dword 0x0000CCF9
  .dword 0x0000CD17
  .dword 0x0000CD36
  .dword 0x0000CD54
  .dword 0x0000CD72
  .dword 0x0000CD90
  .dword 0x0000CDAD
  .dword 0x0000CDCB
  .dword 0x0000CDE9
  .dword 0x0000CE07
  .dword 0x0000CE25
  .dword 0x0000CE43
  .dword 0x0000CE60
  .dword 0x0000CE7E
  .dword 0x0000CE9C
  .dword 0x0000CEBA
  .dword 0x0000CED7
  .dword 0x0000CEF5
  .dword 0x0000CF12
  .dword 0x0000CF30
  .dword 0x0000CF4D
  .dword 0x0000CF6B
  .dword 0x0000CF88
  .dword 0x0000CFA6
  .dword 0x0000CFC3
  .dword 0x0000CFE0
  .dword 0x0000CFFE
  .dword 0x0000D01B
  .dword 0x0000D038
  .dword 0x0000D056
  .dword 0x0000D073
  .dword 0x0000D090
  .dword 0x0000D0AD
  .dword 0x0000D0CA
  .dword 0x0000D0E7
  .dword 0x0000D104
  .dword 0x0000D121
  .dword 0x0000D13E
  .dword 0x0000D15B
  .dword 0x0000D178
  .dword 0x0000D195
  .dword 0x0000D1B2
  .dword 0x0000D1CF
  .dword 0x0000D1EB
  .dword 0x0000D208
  .dword 0x0000D225
  .dword 0x0000D242
  .dword 0x0000D25E
  .dword 0x0000D27B
  .dword 0x0000D297
  .dword 0x0000D2B4
  .dword 0x0000D2D1
  .dword 0x0000D2ED
  .dword 0x0000D30A
  .dword 0x0000D326
  .dword 0x0000D342
  .dword 0x0000D35F
  .dword 0x0000D37B
  .dword 0x0000D397
  .dword 0x0000D3B4
  .dword 0x0000D3D0
  .dword 0x0000D3EC
  .dword 0x0000D408
  .dword 0x0000D424
  .dword 0x0000D441
  .dword 0x0000D45D
  .dword 0x0000D479
  .dword 0x0000D495
  .dword 0x0000D4B1
  .dword 0x0000D4CD
  .dword 0x0000D4E9
  .dword 0x0000D505
  .dword 0x0000D520
  .dword 0x0000D53C
  .dword 0x0000D558
  .dword 0x0000D574
  .dword 0x0000D590
  .dword 0x0000D5AB
  .dword 0x0000D5C7
  .dword 0x0000D5E3
  .dword 0x0000D5FE
  .dword 0x0000D61A
  .dword 0x0000D635
  .dword 0x0000D651
  .dword 0x0000D66C
  .dword 0x0000D688
  .dword 0x0000D6A3
  .dword 0x0000D6BE
  .dword 0x0000D6DA
  .dword 0x0000D6F5
  .dword 0x0000D710
  .dword 0x0000D72C
  .dword 0x0000D747
  .dword 0x0000D762
  .dword 0x0000D77D
  .dword 0x0000D798
  .dword 0x0000D7B3
  .dword 0x0000D7CE
  .dword 0x0000D7EA
  .dword 0x0000D804
  .dword 0x0000D81F
  .dword 0x0000D83A
  .dword 0x0000D855
  .dword 0x0000D870
  .dword 0x0000D88B
  .dword 0x0000D8A6
  .dword 0x0000D8C1
  .dword 0x0000D8DB
  .dword 0x0000D8F6
  .dword 0x0000D911
  .dword 0x0000D92B
  .dword 0x0000D946
  .dword 0x0000D960
  .dword 0x0000D97B
  .dword 0x0000D995
  .dword 0x0000D9B0
  .dword 0x0000D9CA
  .dword 0x0000D9E5
  .dword 0x0000D9FF
  .dword 0x0000DA19
  .dword 0x0000DA34
  .dword 0x0000DA4E
  .dword 0x0000DA68
  .dword 0x0000DA82
  .dword 0x0000DA9D
  .dword 0x0000DAB7
  .dword 0x0000DAD1
  .dword 0x0000DAEB
  .dword 0x0000DB05
  .dword 0x0000DB1F
  .dword 0x0000DB39
  .dword 0x0000DB53
  .dword 0x0000DB6D
  .dword 0x0000DB87
  .dword 0x0000DBA1
  .dword 0x0000DBBA
  .dword 0x0000DBD4
  .dword 0x0000DBEE
  .dword 0x0000DC08
  .dword 0x0000DC21
  .dword 0x0000DC3B
  .dword 0x0000DC54
  .dword 0x0000DC6E
  .dword 0x0000DC88
  .dword 0x0000DCA1
  .dword 0x0000DCBB
  .dword 0x0000DCD4
  .dword 0x0000DCED
  .dword 0x0000DD07
  .dword 0x0000DD20
  .dword 0x0000DD39
  .dword 0x0000DD53
  .dword 0x0000DD6C
  .dword 0x0000DD85
  .dword 0x0000DD9E
  .dword 0x0000DDB8
  .dword 0x0000DDD1
  .dword 0x0000DDEA
  .dword 0x0000DE03
  .dword 0x0000DE1C
  .dword 0x0000DE35
  .dword 0x0000DE4E
  .dword 0x0000DE67
  .dword 0x0000DE7F
  .dword 0x0000DE98
  .dword 0x0000DEB1
  .dword 0x0000DECA
  .dword 0x0000DEE3
  .dword 0x0000DEFB
  .dword 0x0000DF14
  .dword 0x0000DF2D
  .dword 0x0000DF45
  .dword 0x0000DF5E
  .dword 0x0000DF76
  .dword 0x0000DF8F
  .dword 0x0000DFA7
  .dword 0x0000DFC0
  .dword 0x0000DFD8
  .dword 0x0000DFF1
  .dword 0x0000E009
  .dword 0x0000E021
  .dword 0x0000E03A
  .dword 0x0000E052
  .dword 0x0000E06A
  .dword 0x0000E082
  .dword 0x0000E09A
  .dword 0x0000E0B2
  .dword 0x0000E0CA
  .dword 0x0000E0E2
  .dword 0x0000E0FA
  .dword 0x0000E112
  .dword 0x0000E12A
  .dword 0x0000E142
  .dword 0x0000E15A
  .dword 0x0000E172
  .dword 0x0000E18A
  .dword 0x0000E1A2
  .dword 0x0000E1B9
  .dword 0x0000E1D1
  .dword 0x0000E1E9
  .dword 0x0000E200
  .dword 0x0000E218
  .dword 0x0000E22F
  .dword 0x0000E247
  .dword 0x0000E25E
  .dword 0x0000E276
  .dword 0x0000E28D
  .dword 0x0000E2A5
  .dword 0x0000E2BC
  .dword 0x0000E2D3
  .dword 0x0000E2EB
  .dword 0x0000E302
  .dword 0x0000E319
  .dword 0x0000E330
  .dword 0x0000E347
  .dword 0x0000E35F
  .dword 0x0000E376
  .dword 0x0000E38D
  .dword 0x0000E3A4
  .dword 0x0000E3BB
  .dword 0x0000E3D2
  .dword 0x0000E3E9
  .dword 0x0000E3FF
  .dword 0x0000E416
  .dword 0x0000E42D
  .dword 0x0000E444
  .dword 0x0000E45B
  .dword 0x0000E471
  .dword 0x0000E488
  .dword 0x0000E49F
  .dword 0x0000E4B5
  .dword 0x0000E4CC
  .dword 0x0000E4E2
  .dword 0x0000E4F9
  .dword 0x0000E50F
  .dword 0x0000E526
  .dword 0x0000E53C
  .dword 0x0000E552
  .dword 0x0000E569
  .dword 0x0000E57F
  .dword 0x0000E595
  .dword 0x0000E5AB
  .dword 0x0000E5C2
  .dword 0x0000E5D8
  .dword 0x0000E5EE
  .dword 0x0000E604
  .dword 0x0000E61A
  .dword 0x0000E630
  .dword 0x0000E646
  .dword 0x0000E65C
  .dword 0x0000E672
  .dword 0x0000E688
  .dword 0x0000E69E
  .dword 0x0000E6B3
  .dword 0x0000E6C9
  .dword 0x0000E6DF
  .dword 0x0000E6F5
  .dword 0x0000E70A
  .dword 0x0000E720
  .dword 0x0000E736
  .dword 0x0000E74B
  .dword 0x0000E761
  .dword 0x0000E776
  .dword 0x0000E78C
  .dword 0x0000E7A1
  .dword 0x0000E7B6
  .dword 0x0000E7CC
  .dword 0x0000E7E1
  .dword 0x0000E7F6
  .dword 0x0000E80C
  .dword 0x0000E821
  .dword 0x0000E836
  .dword 0x0000E84B
  .dword 0x0000E860
  .dword 0x0000E875
  .dword 0x0000E88A
  .dword 0x0000E89F
  .dword 0x0000E8B4
  .dword 0x0000E8C9
  .dword 0x0000E8DE
  .dword 0x0000E8F3
  .dword 0x0000E908
  .dword 0x0000E91D
  .dword 0x0000E931
  .dword 0x0000E946
  .dword 0x0000E95B
  .dword 0x0000E96F
  .dword 0x0000E984
  .dword 0x0000E999
  .dword 0x0000E9AD
  .dword 0x0000E9C2
  .dword 0x0000E9D6
  .dword 0x0000E9EB
  .dword 0x0000E9FF
  .dword 0x0000EA13
  .dword 0x0000EA28
  .dword 0x0000EA3C
  .dword 0x0000EA50
  .dword 0x0000EA64
  .dword 0x0000EA79
  .dword 0x0000EA8D
  .dword 0x0000EAA1
  .dword 0x0000EAB5
  .dword 0x0000EAC9
  .dword 0x0000EADD
  .dword 0x0000EAF1
  .dword 0x0000EB05
  .dword 0x0000EB19
  .dword 0x0000EB2D
  .dword 0x0000EB41
  .dword 0x0000EB54
  .dword 0x0000EB68
  .dword 0x0000EB7C
  .dword 0x0000EB90
  .dword 0x0000EBA3
  .dword 0x0000EBB7
  .dword 0x0000EBCB
  .dword 0x0000EBDE
  .dword 0x0000EBF2
  .dword 0x0000EC05
  .dword 0x0000EC19
  .dword 0x0000EC2C
  .dword 0x0000EC3F
  .dword 0x0000EC53
  .dword 0x0000EC66
  .dword 0x0000EC79
  .dword 0x0000EC8C
  .dword 0x0000ECA0
  .dword 0x0000ECB3
  .dword 0x0000ECC6
  .dword 0x0000ECD9
  .dword 0x0000ECEC
  .dword 0x0000ECFF
  .dword 0x0000ED12
  .dword 0x0000ED25
  .dword 0x0000ED38
  .dword 0x0000ED4B
  .dword 0x0000ED5E
  .dword 0x0000ED71
  .dword 0x0000ED83
  .dword 0x0000ED96
  .dword 0x0000EDA9
  .dword 0x0000EDBB
  .dword 0x0000EDCE
  .dword 0x0000EDE1
  .dword 0x0000EDF3
  .dword 0x0000EE06
  .dword 0x0000EE18
  .dword 0x0000EE2B
  .dword 0x0000EE3D
  .dword 0x0000EE4F
  .dword 0x0000EE62
  .dword 0x0000EE74
  .dword 0x0000EE86
  .dword 0x0000EE99
  .dword 0x0000EEAB
  .dword 0x0000EEBD
  .dword 0x0000EECF
  .dword 0x0000EEE1
  .dword 0x0000EEF3
  .dword 0x0000EF05
  .dword 0x0000EF17
  .dword 0x0000EF29
  .dword 0x0000EF3B
  .dword 0x0000EF4D
  .dword 0x0000EF5F
  .dword 0x0000EF71
  .dword 0x0000EF82
  .dword 0x0000EF94
  .dword 0x0000EFA6
  .dword 0x0000EFB7
  .dword 0x0000EFC9
  .dword 0x0000EFDB
  .dword 0x0000EFEC
  .dword 0x0000EFFE
  .dword 0x0000F00F
  .dword 0x0000F021
  .dword 0x0000F032
  .dword 0x0000F043
  .dword 0x0000F055
  .dword 0x0000F066
  .dword 0x0000F077
  .dword 0x0000F089
  .dword 0x0000F09A
  .dword 0x0000F0AB
  .dword 0x0000F0BC
  .dword 0x0000F0CD
  .dword 0x0000F0DE
  .dword 0x0000F0EF
  .dword 0x0000F100
  .dword 0x0000F111
  .dword 0x0000F122
  .dword 0x0000F133
  .dword 0x0000F144
  .dword 0x0000F154
  .dword 0x0000F165
  .dword 0x0000F176
  .dword 0x0000F187
  .dword 0x0000F197
  .dword 0x0000F1A8
  .dword 0x0000F1B8
  .dword 0x0000F1C9
  .dword 0x0000F1D9
  .dword 0x0000F1EA
  .dword 0x0000F1FA
  .dword 0x0000F20B
  .dword 0x0000F21B
  .dword 0x0000F22B
  .dword 0x0000F23C
  .dword 0x0000F24C
  .dword 0x0000F25C
  .dword 0x0000F26C
  .dword 0x0000F27C
  .dword 0x0000F28C
  .dword 0x0000F29C
  .dword 0x0000F2AD
  .dword 0x0000F2BD
  .dword 0x0000F2CC
  .dword 0x0000F2DC
  .dword 0x0000F2EC
  .dword 0x0000F2FC
  .dword 0x0000F30C
  .dword 0x0000F31C
  .dword 0x0000F32B
  .dword 0x0000F33B
  .dword 0x0000F34B
  .dword 0x0000F35A
  .dword 0x0000F36A
  .dword 0x0000F379
  .dword 0x0000F389
  .dword 0x0000F398
  .dword 0x0000F3A8
  .dword 0x0000F3B7
  .dword 0x0000F3C7
  .dword 0x0000F3D6
  .dword 0x0000F3E5
  .dword 0x0000F3F5
  .dword 0x0000F404
  .dword 0x0000F413
  .dword 0x0000F422
  .dword 0x0000F431
  .dword 0x0000F440
  .dword 0x0000F44F
  .dword 0x0000F45E
  .dword 0x0000F46D
  .dword 0x0000F47C
  .dword 0x0000F48B
  .dword 0x0000F49A
  .dword 0x0000F4A9
  .dword 0x0000F4B8
  .dword 0x0000F4C6
  .dword 0x0000F4D5
  .dword 0x0000F4E4
  .dword 0x0000F4F2
  .dword 0x0000F501
  .dword 0x0000F50F
  .dword 0x0000F51E
  .dword 0x0000F52C
  .dword 0x0000F53B
  .dword 0x0000F549
  .dword 0x0000F558
  .dword 0x0000F566
  .dword 0x0000F574
  .dword 0x0000F582
  .dword 0x0000F591
  .dword 0x0000F59F
  .dword 0x0000F5AD
  .dword 0x0000F5BB
  .dword 0x0000F5C9
  .dword 0x0000F5D7
  .dword 0x0000F5E5
  .dword 0x0000F5F3
  .dword 0x0000F601
  .dword 0x0000F60F
  .dword 0x0000F61D
  .dword 0x0000F62B
  .dword 0x0000F638
  .dword 0x0000F646
  .dword 0x0000F654
  .dword 0x0000F662
  .dword 0x0000F66F
  .dword 0x0000F67D
  .dword 0x0000F68A
  .dword 0x0000F698
  .dword 0x0000F6A5
  .dword 0x0000F6B3
  .dword 0x0000F6C0
  .dword 0x0000F6CE
  .dword 0x0000F6DB
  .dword 0x0000F6E8
  .dword 0x0000F6F5
  .dword 0x0000F703
  .dword 0x0000F710
  .dword 0x0000F71D
  .dword 0x0000F72A
  .dword 0x0000F737
  .dword 0x0000F744
  .dword 0x0000F751
  .dword 0x0000F75E
  .dword 0x0000F76B
  .dword 0x0000F778
  .dword 0x0000F785
  .dword 0x0000F792
  .dword 0x0000F79E
  .dword 0x0000F7AB
  .dword 0x0000F7B8
  .dword 0x0000F7C5
  .dword 0x0000F7D1
  .dword 0x0000F7DE
  .dword 0x0000F7EA
  .dword 0x0000F7F7
  .dword 0x0000F803
  .dword 0x0000F810
  .dword 0x0000F81C
  .dword 0x0000F828
  .dword 0x0000F835
  .dword 0x0000F841
  .dword 0x0000F84D
  .dword 0x0000F85A
  .dword 0x0000F866
  .dword 0x0000F872
  .dword 0x0000F87E
  .dword 0x0000F88A
  .dword 0x0000F896
  .dword 0x0000F8A2
  .dword 0x0000F8AE
  .dword 0x0000F8BA
  .dword 0x0000F8C6
  .dword 0x0000F8D2
  .dword 0x0000F8DD
  .dword 0x0000F8E9
  .dword 0x0000F8F5
  .dword 0x0000F901
  .dword 0x0000F90C
  .dword 0x0000F918
  .dword 0x0000F923
  .dword 0x0000F92F
  .dword 0x0000F93B
  .dword 0x0000F946
  .dword 0x0000F951
  .dword 0x0000F95D
  .dword 0x0000F968
  .dword 0x0000F973
  .dword 0x0000F97F
  .dword 0x0000F98A
  .dword 0x0000F995
  .dword 0x0000F9A0
  .dword 0x0000F9AB
  .dword 0x0000F9B7
  .dword 0x0000F9C2
  .dword 0x0000F9CD
  .dword 0x0000F9D8
  .dword 0x0000F9E3
  .dword 0x0000F9ED
  .dword 0x0000F9F8
  .dword 0x0000FA03
  .dword 0x0000FA0E
  .dword 0x0000FA19
  .dword 0x0000FA23
  .dword 0x0000FA2E
  .dword 0x0000FA39
  .dword 0x0000FA43
  .dword 0x0000FA4E
  .dword 0x0000FA58
  .dword 0x0000FA63
  .dword 0x0000FA6D
  .dword 0x0000FA78
  .dword 0x0000FA82
  .dword 0x0000FA8C
  .dword 0x0000FA97
  .dword 0x0000FAA1
  .dword 0x0000FAAB
  .dword 0x0000FAB5
  .dword 0x0000FAC0
  .dword 0x0000FACA
  .dword 0x0000FAD4
  .dword 0x0000FADE
  .dword 0x0000FAE8
  .dword 0x0000FAF2
  .dword 0x0000FAFC
  .dword 0x0000FB05
  .dword 0x0000FB0F
  .dword 0x0000FB19
  .dword 0x0000FB23
  .dword 0x0000FB2D
  .dword 0x0000FB36
  .dword 0x0000FB40
  .dword 0x0000FB4A
  .dword 0x0000FB53
  .dword 0x0000FB5D
  .dword 0x0000FB66
  .dword 0x0000FB70
  .dword 0x0000FB79
  .dword 0x0000FB83
  .dword 0x0000FB8C
  .dword 0x0000FB95
  .dword 0x0000FB9E
  .dword 0x0000FBA8
  .dword 0x0000FBB1
  .dword 0x0000FBBA
  .dword 0x0000FBC3
  .dword 0x0000FBCC
  .dword 0x0000FBD5
  .dword 0x0000FBDE
  .dword 0x0000FBE7
  .dword 0x0000FBF0
  .dword 0x0000FBF9
  .dword 0x0000FC02
  .dword 0x0000FC0B
  .dword 0x0000FC14
  .dword 0x0000FC1C
  .dword 0x0000FC25
  .dword 0x0000FC2E
  .dword 0x0000FC36
  .dword 0x0000FC3F
  .dword 0x0000FC48
  .dword 0x0000FC50
  .dword 0x0000FC59
  .dword 0x0000FC61
  .dword 0x0000FC69
  .dword 0x0000FC72
  .dword 0x0000FC7A
  .dword 0x0000FC82
  .dword 0x0000FC8B
  .dword 0x0000FC93
  .dword 0x0000FC9B
  .dword 0x0000FCA3
  .dword 0x0000FCAB
  .dword 0x0000FCB3
  .dword 0x0000FCBB
  .dword 0x0000FCC3
  .dword 0x0000FCCB
  .dword 0x0000FCD3
  .dword 0x0000FCDB
  .dword 0x0000FCE3
  .dword 0x0000FCEB
  .dword 0x0000FCF2
  .dword 0x0000FCFA
  .dword 0x0000FD02
  .dword 0x0000FD09
  .dword 0x0000FD11
  .dword 0x0000FD19
  .dword 0x0000FD20
  .dword 0x0000FD28
  .dword 0x0000FD2F
  .dword 0x0000FD36
  .dword 0x0000FD3E
  .dword 0x0000FD45
  .dword 0x0000FD4C
  .dword 0x0000FD54
  .dword 0x0000FD5B
  .dword 0x0000FD62
  .dword 0x0000FD69
  .dword 0x0000FD70
  .dword 0x0000FD77
  .dword 0x0000FD7F
  .dword 0x0000FD86
  .dword 0x0000FD8C
  .dword 0x0000FD93
  .dword 0x0000FD9A
  .dword 0x0000FDA1
  .dword 0x0000FDA8
  .dword 0x0000FDAF
  .dword 0x0000FDB5
  .dword 0x0000FDBC
  .dword 0x0000FDC3
  .dword 0x0000FDC9
  .dword 0x0000FDD0
  .dword 0x0000FDD6
  .dword 0x0000FDDD
  .dword 0x0000FDE3
  .dword 0x0000FDEA
  .dword 0x0000FDF0
  .dword 0x0000FDF7
  .dword 0x0000FDFD
  .dword 0x0000FE03
  .dword 0x0000FE09
  .dword 0x0000FE10
  .dword 0x0000FE16
  .dword 0x0000FE1C
  .dword 0x0000FE22
  .dword 0x0000FE28
  .dword 0x0000FE2E
  .dword 0x0000FE34
  .dword 0x0000FE3A
  .dword 0x0000FE40
  .dword 0x0000FE46
  .dword 0x0000FE4B
  .dword 0x0000FE51
  .dword 0x0000FE57
  .dword 0x0000FE5D
  .dword 0x0000FE62
  .dword 0x0000FE68
  .dword 0x0000FE6D
  .dword 0x0000FE73
  .dword 0x0000FE78
  .dword 0x0000FE7E
  .dword 0x0000FE83
  .dword 0x0000FE89
  .dword 0x0000FE8E
  .dword 0x0000FE93
  .dword 0x0000FE99
  .dword 0x0000FE9E
  .dword 0x0000FEA3
  .dword 0x0000FEA8
  .dword 0x0000FEAD
  .dword 0x0000FEB2
  .dword 0x0000FEB7
  .dword 0x0000FEBC
  .dword 0x0000FEC1
  .dword 0x0000FEC6
  .dword 0x0000FECB
  .dword 0x0000FED0
  .dword 0x0000FED5
  .dword 0x0000FEDA
  .dword 0x0000FEDE
  .dword 0x0000FEE3
  .dword 0x0000FEE8
  .dword 0x0000FEEC
  .dword 0x0000FEF1
  .dword 0x0000FEF6
  .dword 0x0000FEFA
  .dword 0x0000FEFF
  .dword 0x0000FF03
  .dword 0x0000FF07
  .dword 0x0000FF0C
  .dword 0x0000FF10
  .dword 0x0000FF14
  .dword 0x0000FF19
  .dword 0x0000FF1D
  .dword 0x0000FF21
  .dword 0x0000FF25
  .dword 0x0000FF29
  .dword 0x0000FF2D
  .dword 0x0000FF31
  .dword 0x0000FF35
  .dword 0x0000FF39
  .dword 0x0000FF3D
  .dword 0x0000FF41
  .dword 0x0000FF45
  .dword 0x0000FF48
  .dword 0x0000FF4C
  .dword 0x0000FF50
  .dword 0x0000FF53
  .dword 0x0000FF57
  .dword 0x0000FF5B
  .dword 0x0000FF5E
  .dword 0x0000FF62
  .dword 0x0000FF65
  .dword 0x0000FF69
  .dword 0x0000FF6C
  .dword 0x0000FF6F
  .dword 0x0000FF73
  .dword 0x0000FF76
  .dword 0x0000FF79
  .dword 0x0000FF7C
  .dword 0x0000FF80
  .dword 0x0000FF83
  .dword 0x0000FF86
  .dword 0x0000FF89
  .dword 0x0000FF8C
  .dword 0x0000FF8F
  .dword 0x0000FF92
  .dword 0x0000FF95
  .dword 0x0000FF97
  .dword 0x0000FF9A
  .dword 0x0000FF9D
  .dword 0x0000FFA0
  .dword 0x0000FFA2
  .dword 0x0000FFA5
  .dword 0x0000FFA8
  .dword 0x0000FFAA
  .dword 0x0000FFAD
  .dword 0x0000FFAF
  .dword 0x0000FFB2
  .dword 0x0000FFB4
  .dword 0x0000FFB7
  .dword 0x0000FFB9
  .dword 0x0000FFBB
  .dword 0x0000FFBE
  .dword 0x0000FFC0
  .dword 0x0000FFC2
  .dword 0x0000FFC4
  .dword 0x0000FFC6
  .dword 0x0000FFC8
  .dword 0x0000FFCA
  .dword 0x0000FFCC
  .dword 0x0000FFCE
  .dword 0x0000FFD0
  .dword 0x0000FFD2
  .dword 0x0000FFD4
  .dword 0x0000FFD6
  .dword 0x0000FFD8
  .dword 0x0000FFD9
  .dword 0x0000FFDB
  .dword 0x0000FFDD
  .dword 0x0000FFDE
  .dword 0x0000FFE0
  .dword 0x0000FFE1
  .dword 0x0000FFE3
  .dword 0x0000FFE4
  .dword 0x0000FFE6
  .dword 0x0000FFE7
  .dword 0x0000FFE9
  .dword 0x0000FFEA
  .dword 0x0000FFEB
  .dword 0x0000FFEC
  .dword 0x0000FFEE
  .dword 0x0000FFEF
  .dword 0x0000FFF0
  .dword 0x0000FFF1
  .dword 0x0000FFF2
  .dword 0x0000FFF3
  .dword 0x0000FFF4
  .dword 0x0000FFF5
  .dword 0x0000FFF6
  .dword 0x0000FFF7
  .dword 0x0000FFF7
  .dword 0x0000FFF8
  .dword 0x0000FFF9
  .dword 0x0000FFFA
  .dword 0x0000FFFA
  .dword 0x0000FFFB
  .dword 0x0000FFFB
  .dword 0x0000FFFC
  .dword 0x0000FFFC
  .dword 0x0000FFFD
  .dword 0x0000FFFD
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFD
  .dword 0x0000FFFD
  .dword 0x0000FFFC
  .dword 0x0000FFFC
  .dword 0x0000FFFB
  .dword 0x0000FFFB
  .dword 0x0000FFFA
  .dword 0x0000FFFA
  .dword 0x0000FFF9
  .dword 0x0000FFF8
  .dword 0x0000FFF7
  .dword 0x0000FFF7
  .dword 0x0000FFF6
  .dword 0x0000FFF5
  .dword 0x0000FFF4
  .dword 0x0000FFF3
  .dword 0x0000FFF2
  .dword 0x0000FFF1
  .dword 0x0000FFF0
  .dword 0x0000FFEF
  .dword 0x0000FFEE
  .dword 0x0000FFEC
  .dword 0x0000FFEB
  .dword 0x0000FFEA
  .dword 0x0000FFE9
  .dword 0x0000FFE7
  .dword 0x0000FFE6
  .dword 0x0000FFE4
  .dword 0x0000FFE3
  .dword 0x0000FFE1
  .dword 0x0000FFE0
  .dword 0x0000FFDE
  .dword 0x0000FFDD
  .dword 0x0000FFDB
  .dword 0x0000FFD9
  .dword 0x0000FFD8
  .dword 0x0000FFD6
  .dword 0x0000FFD4
  .dword 0x0000FFD2
  .dword 0x0000FFD0
  .dword 0x0000FFCE
  .dword 0x0000FFCC
  .dword 0x0000FFCA
  .dword 0x0000FFC8
  .dword 0x0000FFC6
  .dword 0x0000FFC4
  .dword 0x0000FFC2
  .dword 0x0000FFC0
  .dword 0x0000FFBE
  .dword 0x0000FFBB
  .dword 0x0000FFB9
  .dword 0x0000FFB7
  .dword 0x0000FFB4
  .dword 0x0000FFB2
  .dword 0x0000FFAF
  .dword 0x0000FFAD
  .dword 0x0000FFAA
  .dword 0x0000FFA8
  .dword 0x0000FFA5
  .dword 0x0000FFA2
  .dword 0x0000FFA0
  .dword 0x0000FF9D
  .dword 0x0000FF9A
  .dword 0x0000FF97
  .dword 0x0000FF95
  .dword 0x0000FF92
  .dword 0x0000FF8F
  .dword 0x0000FF8C
  .dword 0x0000FF89
  .dword 0x0000FF86
  .dword 0x0000FF83
  .dword 0x0000FF80
  .dword 0x0000FF7C
  .dword 0x0000FF79
  .dword 0x0000FF76
  .dword 0x0000FF73
  .dword 0x0000FF6F
  .dword 0x0000FF6C
  .dword 0x0000FF69
  .dword 0x0000FF65
  .dword 0x0000FF62
  .dword 0x0000FF5E
  .dword 0x0000FF5B
  .dword 0x0000FF57
  .dword 0x0000FF53
  .dword 0x0000FF50
  .dword 0x0000FF4C
  .dword 0x0000FF48
  .dword 0x0000FF45
  .dword 0x0000FF41
  .dword 0x0000FF3D
  .dword 0x0000FF39
  .dword 0x0000FF35
  .dword 0x0000FF31
  .dword 0x0000FF2D
  .dword 0x0000FF29
  .dword 0x0000FF25
  .dword 0x0000FF21
  .dword 0x0000FF1D
  .dword 0x0000FF19
  .dword 0x0000FF14
  .dword 0x0000FF10
  .dword 0x0000FF0C
  .dword 0x0000FF07
  .dword 0x0000FF03
  .dword 0x0000FEFF
  .dword 0x0000FEFA
  .dword 0x0000FEF6
  .dword 0x0000FEF1
  .dword 0x0000FEEC
  .dword 0x0000FEE8
  .dword 0x0000FEE3
  .dword 0x0000FEDE
  .dword 0x0000FEDA
  .dword 0x0000FED5
  .dword 0x0000FED0
  .dword 0x0000FECB
  .dword 0x0000FEC6
  .dword 0x0000FEC1
  .dword 0x0000FEBC
  .dword 0x0000FEB7
  .dword 0x0000FEB2
  .dword 0x0000FEAD
  .dword 0x0000FEA8
  .dword 0x0000FEA3
  .dword 0x0000FE9E
  .dword 0x0000FE99
  .dword 0x0000FE93
  .dword 0x0000FE8E
  .dword 0x0000FE89
  .dword 0x0000FE83
  .dword 0x0000FE7E
  .dword 0x0000FE78
  .dword 0x0000FE73
  .dword 0x0000FE6D
  .dword 0x0000FE68
  .dword 0x0000FE62
  .dword 0x0000FE5D
  .dword 0x0000FE57
  .dword 0x0000FE51
  .dword 0x0000FE4B
  .dword 0x0000FE46
  .dword 0x0000FE40
  .dword 0x0000FE3A
  .dword 0x0000FE34
  .dword 0x0000FE2E
  .dword 0x0000FE28
  .dword 0x0000FE22
  .dword 0x0000FE1C
  .dword 0x0000FE16
  .dword 0x0000FE10
  .dword 0x0000FE09
  .dword 0x0000FE03
  .dword 0x0000FDFD
  .dword 0x0000FDF7
  .dword 0x0000FDF0
  .dword 0x0000FDEA
  .dword 0x0000FDE3
  .dword 0x0000FDDD
  .dword 0x0000FDD6
  .dword 0x0000FDD0
  .dword 0x0000FDC9
  .dword 0x0000FDC3
  .dword 0x0000FDBC
  .dword 0x0000FDB5
  .dword 0x0000FDAF
  .dword 0x0000FDA8
  .dword 0x0000FDA1
  .dword 0x0000FD9A
  .dword 0x0000FD93
  .dword 0x0000FD8C
  .dword 0x0000FD86
  .dword 0x0000FD7F
  .dword 0x0000FD77
  .dword 0x0000FD70
  .dword 0x0000FD69
  .dword 0x0000FD62
  .dword 0x0000FD5B
  .dword 0x0000FD54
  .dword 0x0000FD4C
  .dword 0x0000FD45
  .dword 0x0000FD3E
  .dword 0x0000FD36
  .dword 0x0000FD2F
  .dword 0x0000FD28
  .dword 0x0000FD20
  .dword 0x0000FD19
  .dword 0x0000FD11
  .dword 0x0000FD09
  .dword 0x0000FD02
  .dword 0x0000FCFA
  .dword 0x0000FCF2
  .dword 0x0000FCEB
  .dword 0x0000FCE3
  .dword 0x0000FCDB
  .dword 0x0000FCD3
  .dword 0x0000FCCB
  .dword 0x0000FCC3
  .dword 0x0000FCBB
  .dword 0x0000FCB3
  .dword 0x0000FCAB
  .dword 0x0000FCA3
  .dword 0x0000FC9B
  .dword 0x0000FC93
  .dword 0x0000FC8B
  .dword 0x0000FC82
  .dword 0x0000FC7A
  .dword 0x0000FC72
  .dword 0x0000FC69
  .dword 0x0000FC61
  .dword 0x0000FC58
  .dword 0x0000FC50
  .dword 0x0000FC48
  .dword 0x0000FC3F
  .dword 0x0000FC36
  .dword 0x0000FC2E
  .dword 0x0000FC25
  .dword 0x0000FC1C
  .dword 0x0000FC14
  .dword 0x0000FC0B
  .dword 0x0000FC02
  .dword 0x0000FBF9
  .dword 0x0000FBF0
  .dword 0x0000FBE7
  .dword 0x0000FBDE
  .dword 0x0000FBD5
  .dword 0x0000FBCC
  .dword 0x0000FBC3
  .dword 0x0000FBBA
  .dword 0x0000FBB1
  .dword 0x0000FBA8
  .dword 0x0000FB9E
  .dword 0x0000FB95
  .dword 0x0000FB8C
  .dword 0x0000FB83
  .dword 0x0000FB79
  .dword 0x0000FB70
  .dword 0x0000FB66
  .dword 0x0000FB5D
  .dword 0x0000FB53
  .dword 0x0000FB4A
  .dword 0x0000FB40
  .dword 0x0000FB36
  .dword 0x0000FB2D
  .dword 0x0000FB23
  .dword 0x0000FB19
  .dword 0x0000FB0F
  .dword 0x0000FB05
  .dword 0x0000FAFC
  .dword 0x0000FAF2
  .dword 0x0000FAE8
  .dword 0x0000FADE
  .dword 0x0000FAD4
  .dword 0x0000FACA
  .dword 0x0000FAC0
  .dword 0x0000FAB5
  .dword 0x0000FAAB
  .dword 0x0000FAA1
  .dword 0x0000FA97
  .dword 0x0000FA8C
  .dword 0x0000FA82
  .dword 0x0000FA78
  .dword 0x0000FA6D
  .dword 0x0000FA63
  .dword 0x0000FA58
  .dword 0x0000FA4E
  .dword 0x0000FA43
  .dword 0x0000FA39
  .dword 0x0000FA2E
  .dword 0x0000FA23
  .dword 0x0000FA19
  .dword 0x0000FA0E
  .dword 0x0000FA03
  .dword 0x0000F9F8
  .dword 0x0000F9ED
  .dword 0x0000F9E3
  .dword 0x0000F9D8
  .dword 0x0000F9CD
  .dword 0x0000F9C2
  .dword 0x0000F9B7
  .dword 0x0000F9AB
  .dword 0x0000F9A0
  .dword 0x0000F995
  .dword 0x0000F98A
  .dword 0x0000F97F
  .dword 0x0000F973
  .dword 0x0000F968
  .dword 0x0000F95D
  .dword 0x0000F951
  .dword 0x0000F946
  .dword 0x0000F93B
  .dword 0x0000F92F
  .dword 0x0000F923
  .dword 0x0000F918
  .dword 0x0000F90C
  .dword 0x0000F901
  .dword 0x0000F8F5
  .dword 0x0000F8E9
  .dword 0x0000F8DD
  .dword 0x0000F8D2
  .dword 0x0000F8C6
  .dword 0x0000F8BA
  .dword 0x0000F8AE
  .dword 0x0000F8A2
  .dword 0x0000F896
  .dword 0x0000F88A
  .dword 0x0000F87E
  .dword 0x0000F872
  .dword 0x0000F866
  .dword 0x0000F85A
  .dword 0x0000F84D
  .dword 0x0000F841
  .dword 0x0000F835
  .dword 0x0000F828
  .dword 0x0000F81C
  .dword 0x0000F810
  .dword 0x0000F803
  .dword 0x0000F7F7
  .dword 0x0000F7EA
  .dword 0x0000F7DE
  .dword 0x0000F7D1
  .dword 0x0000F7C5
  .dword 0x0000F7B8
  .dword 0x0000F7AB
  .dword 0x0000F79E
  .dword 0x0000F792
  .dword 0x0000F785
  .dword 0x0000F778
  .dword 0x0000F76B
  .dword 0x0000F75E
  .dword 0x0000F751
  .dword 0x0000F744
  .dword 0x0000F737
  .dword 0x0000F72A
  .dword 0x0000F71D
  .dword 0x0000F710
  .dword 0x0000F703
  .dword 0x0000F6F5
  .dword 0x0000F6E8
  .dword 0x0000F6DB
  .dword 0x0000F6CE
  .dword 0x0000F6C0
  .dword 0x0000F6B3
  .dword 0x0000F6A5
  .dword 0x0000F698
  .dword 0x0000F68A
  .dword 0x0000F67D
  .dword 0x0000F66F
  .dword 0x0000F662
  .dword 0x0000F654
  .dword 0x0000F646
  .dword 0x0000F638
  .dword 0x0000F62B
  .dword 0x0000F61D
  .dword 0x0000F60F
  .dword 0x0000F601
  .dword 0x0000F5F3
  .dword 0x0000F5E5
  .dword 0x0000F5D7
  .dword 0x0000F5C9
  .dword 0x0000F5BB
  .dword 0x0000F5AD
  .dword 0x0000F59F
  .dword 0x0000F591
  .dword 0x0000F582
  .dword 0x0000F574
  .dword 0x0000F566
  .dword 0x0000F558
  .dword 0x0000F549
  .dword 0x0000F53B
  .dword 0x0000F52C
  .dword 0x0000F51E
  .dword 0x0000F50F
  .dword 0x0000F501
  .dword 0x0000F4F2
  .dword 0x0000F4E4
  .dword 0x0000F4D5
  .dword 0x0000F4C6
  .dword 0x0000F4B8
  .dword 0x0000F4A9
  .dword 0x0000F49A
  .dword 0x0000F48B
  .dword 0x0000F47C
  .dword 0x0000F46D
  .dword 0x0000F45E
  .dword 0x0000F44F
  .dword 0x0000F440
  .dword 0x0000F431
  .dword 0x0000F422
  .dword 0x0000F413
  .dword 0x0000F404
  .dword 0x0000F3F5
  .dword 0x0000F3E5
  .dword 0x0000F3D6
  .dword 0x0000F3C7
  .dword 0x0000F3B7
  .dword 0x0000F3A8
  .dword 0x0000F398
  .dword 0x0000F389
  .dword 0x0000F379
  .dword 0x0000F36A
  .dword 0x0000F35A
  .dword 0x0000F34B
  .dword 0x0000F33B
  .dword 0x0000F32B
  .dword 0x0000F31C
  .dword 0x0000F30C
  .dword 0x0000F2FC
  .dword 0x0000F2EC
  .dword 0x0000F2DC
  .dword 0x0000F2CC
  .dword 0x0000F2BD
  .dword 0x0000F2AD
  .dword 0x0000F29C
  .dword 0x0000F28C
  .dword 0x0000F27C
  .dword 0x0000F26C
  .dword 0x0000F25C
  .dword 0x0000F24C
  .dword 0x0000F23C
  .dword 0x0000F22B
  .dword 0x0000F21B
  .dword 0x0000F20B
  .dword 0x0000F1FA
  .dword 0x0000F1EA
  .dword 0x0000F1D9
  .dword 0x0000F1C9
  .dword 0x0000F1B8
  .dword 0x0000F1A8
  .dword 0x0000F197
  .dword 0x0000F187
  .dword 0x0000F176
  .dword 0x0000F165
  .dword 0x0000F154
  .dword 0x0000F144
  .dword 0x0000F133
  .dword 0x0000F122
  .dword 0x0000F111
  .dword 0x0000F100
  .dword 0x0000F0EF
  .dword 0x0000F0DE
  .dword 0x0000F0CD
  .dword 0x0000F0BC
  .dword 0x0000F0AB
  .dword 0x0000F09A
  .dword 0x0000F089
  .dword 0x0000F077
  .dword 0x0000F066
  .dword 0x0000F055
  .dword 0x0000F043
  .dword 0x0000F032
  .dword 0x0000F021
  .dword 0x0000F00F
  .dword 0x0000EFFE
  .dword 0x0000EFEC
  .dword 0x0000EFDB
  .dword 0x0000EFC9
  .dword 0x0000EFB7
  .dword 0x0000EFA6
  .dword 0x0000EF94
  .dword 0x0000EF82
  .dword 0x0000EF71
  .dword 0x0000EF5F
  .dword 0x0000EF4D
  .dword 0x0000EF3B
  .dword 0x0000EF29
  .dword 0x0000EF17
  .dword 0x0000EF05
  .dword 0x0000EEF3
  .dword 0x0000EEE1
  .dword 0x0000EECF
  .dword 0x0000EEBD
  .dword 0x0000EEAB
  .dword 0x0000EE99
  .dword 0x0000EE86
  .dword 0x0000EE74
  .dword 0x0000EE62
  .dword 0x0000EE4F
  .dword 0x0000EE3D
  .dword 0x0000EE2B
  .dword 0x0000EE18
  .dword 0x0000EE06
  .dword 0x0000EDF3
  .dword 0x0000EDE1
  .dword 0x0000EDCE
  .dword 0x0000EDBB
  .dword 0x0000EDA9
  .dword 0x0000ED96
  .dword 0x0000ED83
  .dword 0x0000ED71
  .dword 0x0000ED5E
  .dword 0x0000ED4B
  .dword 0x0000ED38
  .dword 0x0000ED25
  .dword 0x0000ED12
  .dword 0x0000ECFF
  .dword 0x0000ECEC
  .dword 0x0000ECD9
  .dword 0x0000ECC6
  .dword 0x0000ECB3
  .dword 0x0000ECA0
  .dword 0x0000EC8C
  .dword 0x0000EC79
  .dword 0x0000EC66
  .dword 0x0000EC53
  .dword 0x0000EC3F
  .dword 0x0000EC2C
  .dword 0x0000EC19
  .dword 0x0000EC05
  .dword 0x0000EBF2
  .dword 0x0000EBDE
  .dword 0x0000EBCB
  .dword 0x0000EBB7
  .dword 0x0000EBA3
  .dword 0x0000EB90
  .dword 0x0000EB7C
  .dword 0x0000EB68
  .dword 0x0000EB54
  .dword 0x0000EB41
  .dword 0x0000EB2D
  .dword 0x0000EB19
  .dword 0x0000EB05
  .dword 0x0000EAF1
  .dword 0x0000EADD
  .dword 0x0000EAC9
  .dword 0x0000EAB5
  .dword 0x0000EAA1
  .dword 0x0000EA8D
  .dword 0x0000EA79
  .dword 0x0000EA64
  .dword 0x0000EA50
  .dword 0x0000EA3C
  .dword 0x0000EA28
  .dword 0x0000EA13
  .dword 0x0000E9FF
  .dword 0x0000E9EB
  .dword 0x0000E9D6
  .dword 0x0000E9C2
  .dword 0x0000E9AD
  .dword 0x0000E999
  .dword 0x0000E984
  .dword 0x0000E96F
  .dword 0x0000E95B
  .dword 0x0000E946
  .dword 0x0000E931
  .dword 0x0000E91D
  .dword 0x0000E908
  .dword 0x0000E8F3
  .dword 0x0000E8DE
  .dword 0x0000E8C9
  .dword 0x0000E8B4
  .dword 0x0000E89F
  .dword 0x0000E88A
  .dword 0x0000E875
  .dword 0x0000E860
  .dword 0x0000E84B
  .dword 0x0000E836
  .dword 0x0000E821
  .dword 0x0000E80C
  .dword 0x0000E7F6
  .dword 0x0000E7E1
  .dword 0x0000E7CC
  .dword 0x0000E7B6
  .dword 0x0000E7A1
  .dword 0x0000E78C
  .dword 0x0000E776
  .dword 0x0000E761
  .dword 0x0000E74B
  .dword 0x0000E736
  .dword 0x0000E720
  .dword 0x0000E70A
  .dword 0x0000E6F5
  .dword 0x0000E6DF
  .dword 0x0000E6C9
  .dword 0x0000E6B3
  .dword 0x0000E69E
  .dword 0x0000E688
  .dword 0x0000E672
  .dword 0x0000E65C
  .dword 0x0000E646
  .dword 0x0000E630
  .dword 0x0000E61A
  .dword 0x0000E604
  .dword 0x0000E5EE
  .dword 0x0000E5D8
  .dword 0x0000E5C2
  .dword 0x0000E5AB
  .dword 0x0000E595
  .dword 0x0000E57F
  .dword 0x0000E569
  .dword 0x0000E552
  .dword 0x0000E53C
  .dword 0x0000E526
  .dword 0x0000E50F
  .dword 0x0000E4F9
  .dword 0x0000E4E2
  .dword 0x0000E4CC
  .dword 0x0000E4B5
  .dword 0x0000E49F
  .dword 0x0000E488
  .dword 0x0000E471
  .dword 0x0000E45B
  .dword 0x0000E444
  .dword 0x0000E42D
  .dword 0x0000E416
  .dword 0x0000E3FF
  .dword 0x0000E3E9
  .dword 0x0000E3D2
  .dword 0x0000E3BB
  .dword 0x0000E3A4
  .dword 0x0000E38D
  .dword 0x0000E376
  .dword 0x0000E35F
  .dword 0x0000E347
  .dword 0x0000E330
  .dword 0x0000E319
  .dword 0x0000E302
  .dword 0x0000E2EB
  .dword 0x0000E2D3
  .dword 0x0000E2BC
  .dword 0x0000E2A5
  .dword 0x0000E28D
  .dword 0x0000E276
  .dword 0x0000E25E
  .dword 0x0000E247
  .dword 0x0000E22F
  .dword 0x0000E218
  .dword 0x0000E200
  .dword 0x0000E1E9
  .dword 0x0000E1D1
  .dword 0x0000E1B9
  .dword 0x0000E1A2
  .dword 0x0000E18A
  .dword 0x0000E172
  .dword 0x0000E15A
  .dword 0x0000E142
  .dword 0x0000E12A
  .dword 0x0000E112
  .dword 0x0000E0FA
  .dword 0x0000E0E2
  .dword 0x0000E0CA
  .dword 0x0000E0B2
  .dword 0x0000E09A
  .dword 0x0000E082
  .dword 0x0000E06A
  .dword 0x0000E052
  .dword 0x0000E03A
  .dword 0x0000E021
  .dword 0x0000E009
  .dword 0x0000DFF1
  .dword 0x0000DFD8
  .dword 0x0000DFC0
  .dword 0x0000DFA7
  .dword 0x0000DF8F
  .dword 0x0000DF76
  .dword 0x0000DF5E
  .dword 0x0000DF45
  .dword 0x0000DF2D
  .dword 0x0000DF14
  .dword 0x0000DEFB
  .dword 0x0000DEE3
  .dword 0x0000DECA
  .dword 0x0000DEB1
  .dword 0x0000DE98
  .dword 0x0000DE7F
  .dword 0x0000DE67
  .dword 0x0000DE4E
  .dword 0x0000DE35
  .dword 0x0000DE1C
  .dword 0x0000DE03
  .dword 0x0000DDEA
  .dword 0x0000DDD1
  .dword 0x0000DDB8
  .dword 0x0000DD9E
  .dword 0x0000DD85
  .dword 0x0000DD6C
  .dword 0x0000DD53
  .dword 0x0000DD39
  .dword 0x0000DD20
  .dword 0x0000DD07
  .dword 0x0000DCED
  .dword 0x0000DCD4
  .dword 0x0000DCBB
  .dword 0x0000DCA1
  .dword 0x0000DC88
  .dword 0x0000DC6E
  .dword 0x0000DC54
  .dword 0x0000DC3B
  .dword 0x0000DC21
  .dword 0x0000DC08
  .dword 0x0000DBEE
  .dword 0x0000DBD4
  .dword 0x0000DBBA
  .dword 0x0000DBA1
  .dword 0x0000DB87
  .dword 0x0000DB6D
  .dword 0x0000DB53
  .dword 0x0000DB39
  .dword 0x0000DB1F
  .dword 0x0000DB05
  .dword 0x0000DAEB
  .dword 0x0000DAD1
  .dword 0x0000DAB7
  .dword 0x0000DA9D
  .dword 0x0000DA82
  .dword 0x0000DA68
  .dword 0x0000DA4E
  .dword 0x0000DA34
  .dword 0x0000DA19
  .dword 0x0000D9FF
  .dword 0x0000D9E5
  .dword 0x0000D9CA
  .dword 0x0000D9B0
  .dword 0x0000D995
  .dword 0x0000D97B
  .dword 0x0000D960
  .dword 0x0000D946
  .dword 0x0000D92B
  .dword 0x0000D911
  .dword 0x0000D8F6
  .dword 0x0000D8DB
  .dword 0x0000D8C1
  .dword 0x0000D8A6
  .dword 0x0000D88B
  .dword 0x0000D870
  .dword 0x0000D855
  .dword 0x0000D83A
  .dword 0x0000D81F
  .dword 0x0000D804
  .dword 0x0000D7EA
  .dword 0x0000D7CE
  .dword 0x0000D7B3
  .dword 0x0000D798
  .dword 0x0000D77D
  .dword 0x0000D762
  .dword 0x0000D747
  .dword 0x0000D72C
  .dword 0x0000D710
  .dword 0x0000D6F5
  .dword 0x0000D6DA
  .dword 0x0000D6BE
  .dword 0x0000D6A3
  .dword 0x0000D688
  .dword 0x0000D66C
  .dword 0x0000D651
  .dword 0x0000D635
  .dword 0x0000D61A
  .dword 0x0000D5FE
  .dword 0x0000D5E3
  .dword 0x0000D5C7
  .dword 0x0000D5AB
  .dword 0x0000D590
  .dword 0x0000D574
  .dword 0x0000D558
  .dword 0x0000D53C
  .dword 0x0000D520
  .dword 0x0000D505
  .dword 0x0000D4E9
  .dword 0x0000D4CD
  .dword 0x0000D4B1
  .dword 0x0000D495
  .dword 0x0000D479
  .dword 0x0000D45D
  .dword 0x0000D441
  .dword 0x0000D424
  .dword 0x0000D408
  .dword 0x0000D3EC
  .dword 0x0000D3D0
  .dword 0x0000D3B4
  .dword 0x0000D397
  .dword 0x0000D37B
  .dword 0x0000D35F
  .dword 0x0000D342
  .dword 0x0000D326
  .dword 0x0000D30A
  .dword 0x0000D2ED
  .dword 0x0000D2D1
  .dword 0x0000D2B4
  .dword 0x0000D297
  .dword 0x0000D27B
  .dword 0x0000D25E
  .dword 0x0000D242
  .dword 0x0000D225
  .dword 0x0000D208
  .dword 0x0000D1EB
  .dword 0x0000D1CF
  .dword 0x0000D1B2
  .dword 0x0000D195
  .dword 0x0000D178
  .dword 0x0000D15B
  .dword 0x0000D13E
  .dword 0x0000D121
  .dword 0x0000D104
  .dword 0x0000D0E7
  .dword 0x0000D0CA
  .dword 0x0000D0AD
  .dword 0x0000D090
  .dword 0x0000D073
  .dword 0x0000D056
  .dword 0x0000D038
  .dword 0x0000D01B
  .dword 0x0000CFFE
  .dword 0x0000CFE0
  .dword 0x0000CFC3
  .dword 0x0000CFA6
  .dword 0x0000CF88
  .dword 0x0000CF6B
  .dword 0x0000CF4D
  .dword 0x0000CF30
  .dword 0x0000CF12
  .dword 0x0000CEF5
  .dword 0x0000CED7
  .dword 0x0000CEBA
  .dword 0x0000CE9C
  .dword 0x0000CE7E
  .dword 0x0000CE60
  .dword 0x0000CE43
  .dword 0x0000CE25
  .dword 0x0000CE07
  .dword 0x0000CDE9
  .dword 0x0000CDCB
  .dword 0x0000CDAD
  .dword 0x0000CD90
  .dword 0x0000CD72
  .dword 0x0000CD54
  .dword 0x0000CD36
  .dword 0x0000CD17
  .dword 0x0000CCF9
  .dword 0x0000CCDB
  .dword 0x0000CCBD
  .dword 0x0000CC9F
  .dword 0x0000CC81
  .dword 0x0000CC62
  .dword 0x0000CC44
  .dword 0x0000CC26
  .dword 0x0000CC07
  .dword 0x0000CBE9
  .dword 0x0000CBCB
  .dword 0x0000CBAC
  .dword 0x0000CB8E
  .dword 0x0000CB6F
  .dword 0x0000CB51
  .dword 0x0000CB32
  .dword 0x0000CB14
  .dword 0x0000CAF5
  .dword 0x0000CAD6
  .dword 0x0000CAB8
  .dword 0x0000CA99
  .dword 0x0000CA7A
  .dword 0x0000CA5B
  .dword 0x0000CA3D
  .dword 0x0000CA1E
  .dword 0x0000C9FF
  .dword 0x0000C9E0
  .dword 0x0000C9C1
  .dword 0x0000C9A2
  .dword 0x0000C983
  .dword 0x0000C964
  .dword 0x0000C945
  .dword 0x0000C926
  .dword 0x0000C907
  .dword 0x0000C8E8
  .dword 0x0000C8C9
  .dword 0x0000C8A9
  .dword 0x0000C88A
  .dword 0x0000C86B
  .dword 0x0000C84C
  .dword 0x0000C82C
  .dword 0x0000C80D
  .dword 0x0000C7EE
  .dword 0x0000C7CE
  .dword 0x0000C7AF
  .dword 0x0000C78F
  .dword 0x0000C770
  .dword 0x0000C750
  .dword 0x0000C731
  .dword 0x0000C711
  .dword 0x0000C6F1
  .dword 0x0000C6D2
  .dword 0x0000C6B2
  .dword 0x0000C692
  .dword 0x0000C673
  .dword 0x0000C653
  .dword 0x0000C633
  .dword 0x0000C613
  .dword 0x0000C5F3
  .dword 0x0000C5D4
  .dword 0x0000C5B4
  .dword 0x0000C594
  .dword 0x0000C574
  .dword 0x0000C554
  .dword 0x0000C534
  .dword 0x0000C514
  .dword 0x0000C4F4
  .dword 0x0000C4D3
  .dword 0x0000C4B3
  .dword 0x0000C493
  .dword 0x0000C473
  .dword 0x0000C453
  .dword 0x0000C432
  .dword 0x0000C412
  .dword 0x0000C3F2
  .dword 0x0000C3D1
  .dword 0x0000C3B1
  .dword 0x0000C391
  .dword 0x0000C370
  .dword 0x0000C350
  .dword 0x0000C32F
  .dword 0x0000C30F
  .dword 0x0000C2EE
  .dword 0x0000C2CD
  .dword 0x0000C2AD
  .dword 0x0000C28C
  .dword 0x0000C26B
  .dword 0x0000C24B
  .dword 0x0000C22A
  .dword 0x0000C209
  .dword 0x0000C1E8
  .dword 0x0000C1C8
  .dword 0x0000C1A7
  .dword 0x0000C186
  .dword 0x0000C165
  .dword 0x0000C144
  .dword 0x0000C123
  .dword 0x0000C102
  .dword 0x0000C0E1
  .dword 0x0000C0C0
  .dword 0x0000C09F
  .dword 0x0000C07E
  .dword 0x0000C05C
  .dword 0x0000C03B
  .dword 0x0000C01A
  .dword 0x0000BFF9
  .dword 0x0000BFD8
  .dword 0x0000BFB6
  .dword 0x0000BF95
  .dword 0x0000BF74
  .dword 0x0000BF52
  .dword 0x0000BF31
  .dword 0x0000BF0F
  .dword 0x0000BEEE
  .dword 0x0000BECC
  .dword 0x0000BEAB
  .dword 0x0000BE89
  .dword 0x0000BE68
  .dword 0x0000BE46
  .dword 0x0000BE24
  .dword 0x0000BE03
  .dword 0x0000BDE1
  .dword 0x0000BDBF
  .dword 0x0000BD9E
  .dword 0x0000BD7C
  .dword 0x0000BD5A
  .dword 0x0000BD38
  .dword 0x0000BD16
  .dword 0x0000BCF4
  .dword 0x0000BCD2
  .dword 0x0000BCB0
  .dword 0x0000BC8F
  .dword 0x0000BC6D
  .dword 0x0000BC4A
  .dword 0x0000BC28
  .dword 0x0000BC06
  .dword 0x0000BBE4
  .dword 0x0000BBC2
  .dword 0x0000BBA0
  .dword 0x0000BB7E
  .dword 0x0000BB5B
  .dword 0x0000BB39
  .dword 0x0000BB17
  .dword 0x0000BAF4
  .dword 0x0000BAD2
  .dword 0x0000BAB0
  .dword 0x0000BA8D
  .dword 0x0000BA6B
  .dword 0x0000BA48
  .dword 0x0000BA26
  .dword 0x0000BA03
  .dword 0x0000B9E1
  .dword 0x0000B9BE
  .dword 0x0000B99C
  .dword 0x0000B979
  .dword 0x0000B956
  .dword 0x0000B934
  .dword 0x0000B911
  .dword 0x0000B8EE
  .dword 0x0000B8CC
  .dword 0x0000B8A9
  .dword 0x0000B886
  .dword 0x0000B863
  .dword 0x0000B840
  .dword 0x0000B81D
  .dword 0x0000B7FA
  .dword 0x0000B7D7
  .dword 0x0000B7B4
  .dword 0x0000B791
  .dword 0x0000B76E
  .dword 0x0000B74B
  .dword 0x0000B728
  .dword 0x0000B705
  .dword 0x0000B6E2
  .dword 0x0000B6BF
  .dword 0x0000B69B
  .dword 0x0000B678
  .dword 0x0000B655
  .dword 0x0000B632
  .dword 0x0000B60E
  .dword 0x0000B5EB
  .dword 0x0000B5C8
  .dword 0x0000B5A4
  .dword 0x0000B581
  .dword 0x0000B55D
  .dword 0x0000B53A
  .dword 0x0000B516
  .dword 0x0000B4F3
  .dword 0x0000B4CF
  .dword 0x0000B4AC
  .dword 0x0000B488
  .dword 0x0000B464
  .dword 0x0000B441
  .dword 0x0000B41D
  .dword 0x0000B3F9
  .dword 0x0000B3D5
  .dword 0x0000B3B2
  .dword 0x0000B38E
  .dword 0x0000B36A
  .dword 0x0000B346
  .dword 0x0000B322
  .dword 0x0000B2FE
  .dword 0x0000B2DA
  .dword 0x0000B2B6
  .dword 0x0000B292
  .dword 0x0000B26E
  .dword 0x0000B24A
  .dword 0x0000B226
  .dword 0x0000B202
  .dword 0x0000B1DE
  .dword 0x0000B1BA
  .dword 0x0000B196
  .dword 0x0000B171
  .dword 0x0000B14D
  .dword 0x0000B129
  .dword 0x0000B104
  .dword 0x0000B0E0
  .dword 0x0000B0BC
  .dword 0x0000B097
  .dword 0x0000B073
  .dword 0x0000B04F
  .dword 0x0000B02A
  .dword 0x0000B006
  .dword 0x0000AFE1
  .dword 0x0000AFBD
  .dword 0x0000AF98
  .dword 0x0000AF73
  .dword 0x0000AF4F
  .dword 0x0000AF2A
  .dword 0x0000AF06
  .dword 0x0000AEE1
  .dword 0x0000AEBC
  .dword 0x0000AE97
  .dword 0x0000AE73
  .dword 0x0000AE4E
  .dword 0x0000AE29
  .dword 0x0000AE04
  .dword 0x0000ADDF
  .dword 0x0000ADBA
  .dword 0x0000AD95
  .dword 0x0000AD70
  .dword 0x0000AD4B
  .dword 0x0000AD26
  .dword 0x0000AD01
  .dword 0x0000ACDC
  .dword 0x0000ACB7
  .dword 0x0000AC92
  .dword 0x0000AC6D
  .dword 0x0000AC48
  .dword 0x0000AC23
  .dword 0x0000ABFD
  .dword 0x0000ABD8
  .dword 0x0000ABB3
  .dword 0x0000AB8E
  .dword 0x0000AB68
  .dword 0x0000AB43
  .dword 0x0000AB1E
  .dword 0x0000AAF8
  .dword 0x0000AAD3
  .dword 0x0000AAAD
  .dword 0x0000AA88
  .dword 0x0000AA62
  .dword 0x0000AA3D
  .dword 0x0000AA17
  .dword 0x0000A9F2
  .dword 0x0000A9CC
  .dword 0x0000A9A6
  .dword 0x0000A981
  .dword 0x0000A95B
  .dword 0x0000A935
  .dword 0x0000A910
  .dword 0x0000A8EA
  .dword 0x0000A8C4
  .dword 0x0000A89E
  .dword 0x0000A878
  .dword 0x0000A853
  .dword 0x0000A82D
  .dword 0x0000A807
  .dword 0x0000A7E1
  .dword 0x0000A7BB
  .dword 0x0000A795
  .dword 0x0000A76F
  .dword 0x0000A749
  .dword 0x0000A723
  .dword 0x0000A6FD
  .dword 0x0000A6D7
  .dword 0x0000A6B0
  .dword 0x0000A68A
  .dword 0x0000A664
  .dword 0x0000A63E
  .dword 0x0000A618
  .dword 0x0000A5F1
  .dword 0x0000A5CB
  .dword 0x0000A5A5
  .dword 0x0000A57E
  .dword 0x0000A558
  .dword 0x0000A532
  .dword 0x0000A50B
  .dword 0x0000A4E5
  .dword 0x0000A4BE
  .dword 0x0000A498
  .dword 0x0000A471
  .dword 0x0000A44B
  .dword 0x0000A424
  .dword 0x0000A3FE
  .dword 0x0000A3D7
  .dword 0x0000A3B0
  .dword 0x0000A38A
  .dword 0x0000A363
  .dword 0x0000A33C
  .dword 0x0000A316
  .dword 0x0000A2EF
  .dword 0x0000A2C8
  .dword 0x0000A2A1
  .dword 0x0000A27B
  .dword 0x0000A254
  .dword 0x0000A22D
  .dword 0x0000A206
  .dword 0x0000A1DF
  .dword 0x0000A1B8
  .dword 0x0000A191
  .dword 0x0000A16A
  .dword 0x0000A143
  .dword 0x0000A11C
  .dword 0x0000A0F5
  .dword 0x0000A0CE
  .dword 0x0000A0A7
  .dword 0x0000A080
  .dword 0x0000A058
  .dword 0x0000A031
  .dword 0x0000A00A
  .dword 0x00009FE3
  .dword 0x00009FBB
  .dword 0x00009F94
  .dword 0x00009F6D
  .dword 0x00009F45
  .dword 0x00009F1E
  .dword 0x00009EF7
  .dword 0x00009ECF
  .dword 0x00009EA8
  .dword 0x00009E80
  .dword 0x00009E59
  .dword 0x00009E31
  .dword 0x00009E0A
  .dword 0x00009DE2
  .dword 0x00009DBB
  .dword 0x00009D93
  .dword 0x00009D6C
  .dword 0x00009D44
  .dword 0x00009D1C
  .dword 0x00009CF4
  .dword 0x00009CCD
  .dword 0x00009CA5
  .dword 0x00009C7D
  .dword 0x00009C55
  .dword 0x00009C2E
  .dword 0x00009C06
  .dword 0x00009BDE
  .dword 0x00009BB6
  .dword 0x00009B8E
  .dword 0x00009B66
  .dword 0x00009B3E
  .dword 0x00009B16
  .dword 0x00009AEE
  .dword 0x00009AC6
  .dword 0x00009A9E
  .dword 0x00009A76
  .dword 0x00009A4E
  .dword 0x00009A26
  .dword 0x000099FE
  .dword 0x000099D6
  .dword 0x000099AD
  .dword 0x00009985
  .dword 0x0000995D
  .dword 0x00009935
  .dword 0x0000990C
  .dword 0x000098E4
  .dword 0x000098BC
  .dword 0x00009893
  .dword 0x0000986B
  .dword 0x00009843
  .dword 0x0000981A
  .dword 0x000097F2
  .dword 0x000097C9
  .dword 0x000097A1
  .dword 0x00009778
  .dword 0x00009750
  .dword 0x00009727
  .dword 0x000096FF
  .dword 0x000096D6
  .dword 0x000096AD
  .dword 0x00009685
  .dword 0x0000965C
  .dword 0x00009633
  .dword 0x0000960B
  .dword 0x000095E2
  .dword 0x000095B9
  .dword 0x00009590
  .dword 0x00009568
  .dword 0x0000953F
  .dword 0x00009516
  .dword 0x000094ED
  .dword 0x000094C4
  .dword 0x0000949B
  .dword 0x00009472
  .dword 0x00009449
  .dword 0x00009420
  .dword 0x000093F7
  .dword 0x000093CE
  .dword 0x000093A5
  .dword 0x0000937C
  .dword 0x00009353
  .dword 0x0000932A
  .dword 0x00009301
  .dword 0x000092D8
  .dword 0x000092AF
  .dword 0x00009285
  .dword 0x0000925C
  .dword 0x00009233
  .dword 0x0000920A
  .dword 0x000091E0
  .dword 0x000091B7
  .dword 0x0000918E
  .dword 0x00009164
  .dword 0x0000913B
  .dword 0x00009111
  .dword 0x000090E8
  .dword 0x000090BF
  .dword 0x00009095
  .dword 0x0000906C
  .dword 0x00009042
  .dword 0x00009019
  .dword 0x00008FEF
  .dword 0x00008FC5
  .dword 0x00008F9C
  .dword 0x00008F72
  .dword 0x00008F49
  .dword 0x00008F1F
  .dword 0x00008EF5
  .dword 0x00008ECC
  .dword 0x00008EA2
  .dword 0x00008E78
  .dword 0x00008E4E
  .dword 0x00008E24
  .dword 0x00008DFB
  .dword 0x00008DD1
  .dword 0x00008DA7
  .dword 0x00008D7D
  .dword 0x00008D53
  .dword 0x00008D29
  .dword 0x00008CFF
  .dword 0x00008CD5
  .dword 0x00008CAB
  .dword 0x00008C81
  .dword 0x00008C57
  .dword 0x00008C2D
  .dword 0x00008C03
  .dword 0x00008BD9
  .dword 0x00008BAF
  .dword 0x00008B85
  .dword 0x00008B5B
  .dword 0x00008B31
  .dword 0x00008B06
  .dword 0x00008ADC
  .dword 0x00008AB2
  .dword 0x00008A88
  .dword 0x00008A5D
  .dword 0x00008A33
  .dword 0x00008A09
  .dword 0x000089DE
  .dword 0x000089B4
  .dword 0x0000898A
  .dword 0x0000895F
  .dword 0x00008935
  .dword 0x0000890A
  .dword 0x000088E0
  .dword 0x000088B5
  .dword 0x0000888B
  .dword 0x00008860
  .dword 0x00008836
  .dword 0x0000880B
  .dword 0x000087E1
  .dword 0x000087B6
  .dword 0x0000878B
  .dword 0x00008761
  .dword 0x00008736
  .dword 0x0000870B
  .dword 0x000086E1
  .dword 0x000086B6
  .dword 0x0000868B
  .dword 0x00008660
  .dword 0x00008636
  .dword 0x0000860B
  .dword 0x000085E0
  .dword 0x000085B5
  .dword 0x0000858A
  .dword 0x0000855F
  .dword 0x00008534
  .dword 0x00008509
  .dword 0x000084DF
  .dword 0x000084B4
  .dword 0x00008489
  .dword 0x0000845E
  .dword 0x00008433
  .dword 0x00008407
  .dword 0x000083DC
  .dword 0x000083B1
  .dword 0x00008386
  .dword 0x0000835B
  .dword 0x00008330
  .dword 0x00008305
  .dword 0x000082DA
  .dword 0x000082AE
  .dword 0x00008283
  .dword 0x00008258
  .dword 0x0000822D
  .dword 0x00008201
  .dword 0x000081D6
  .dword 0x000081AB
  .dword 0x0000817F
  .dword 0x00008154
  .dword 0x00008129
  .dword 0x000080FD
  .dword 0x000080D2
  .dword 0x000080A6
  .dword 0x0000807B
  .dword 0x0000804F
  .dword 0x00008024
  .dword 0x00007FF8
  .dword 0x00007FCD
  .dword 0x00007FA1
  .dword 0x00007F76
  .dword 0x00007F4A
  .dword 0x00007F1E
  .dword 0x00007EF3
  .dword 0x00007EC7
  .dword 0x00007E9B
  .dword 0x00007E70
  .dword 0x00007E44
  .dword 0x00007E18
  .dword 0x00007DEC
  .dword 0x00007DC1
  .dword 0x00007D95
  .dword 0x00007D69
  .dword 0x00007D3D
  .dword 0x00007D11
  .dword 0x00007CE6
  .dword 0x00007CBA
  .dword 0x00007C8E
  .dword 0x00007C62
  .dword 0x00007C36
  .dword 0x00007C0A
  .dword 0x00007BDE
  .dword 0x00007BB2
  .dword 0x00007B86
  .dword 0x00007B5A
  .dword 0x00007B2E
  .dword 0x00007B02
  .dword 0x00007AD6
  .dword 0x00007AAA
  .dword 0x00007A7D
  .dword 0x00007A51
  .dword 0x00007A25
  .dword 0x000079F9
  .dword 0x000079CD
  .dword 0x000079A0
  .dword 0x00007974
  .dword 0x00007948
  .dword 0x0000791C
  .dword 0x000078EF
  .dword 0x000078C3
  .dword 0x00007897
  .dword 0x0000786A
  .dword 0x0000783E
  .dword 0x00007812
  .dword 0x000077E5
  .dword 0x000077B9
  .dword 0x0000778C
  .dword 0x00007760
  .dword 0x00007733
  .dword 0x00007707
  .dword 0x000076DA
  .dword 0x000076AE
  .dword 0x00007681
  .dword 0x00007655
  .dword 0x00007628
  .dword 0x000075FC
  .dword 0x000075CF
  .dword 0x000075A2
  .dword 0x00007576
  .dword 0x00007549
  .dword 0x0000751C
  .dword 0x000074F0
  .dword 0x000074C3
  .dword 0x00007496
  .dword 0x00007469
  .dword 0x0000743D
  .dword 0x00007410
  .dword 0x000073E3
  .dword 0x000073B6
  .dword 0x00007389
  .dword 0x0000735D
  .dword 0x00007330
  .dword 0x00007303
  .dword 0x000072D6
  .dword 0x000072A9
  .dword 0x0000727C
  .dword 0x0000724F
  .dword 0x00007222
  .dword 0x000071F5
  .dword 0x000071C8
  .dword 0x0000719B
  .dword 0x0000716E
  .dword 0x00007141
  .dword 0x00007114
  .dword 0x000070E7
  .dword 0x000070BA
  .dword 0x0000708C
  .dword 0x0000705F
  .dword 0x00007032
  .dword 0x00007005
  .dword 0x00006FD8
  .dword 0x00006FAA
  .dword 0x00006F7D
  .dword 0x00006F50
  .dword 0x00006F23
  .dword 0x00006EF5
  .dword 0x00006EC8
  .dword 0x00006E9B
  .dword 0x00006E6D
  .dword 0x00006E40
  .dword 0x00006E13
  .dword 0x00006DE5
  .dword 0x00006DB8
  .dword 0x00006D8A
  .dword 0x00006D5D
  .dword 0x00006D30
  .dword 0x00006D02
  .dword 0x00006CD5
  .dword 0x00006CA7
  .dword 0x00006C7A
  .dword 0x00006C4C
  .dword 0x00006C1E
  .dword 0x00006BF1
  .dword 0x00006BC3
  .dword 0x00006B96
  .dword 0x00006B68
  .dword 0x00006B3A
  .dword 0x00006B0D
  .dword 0x00006ADF
  .dword 0x00006AB1
  .dword 0x00006A84
  .dword 0x00006A56
  .dword 0x00006A28
  .dword 0x000069FB
  .dword 0x000069CD
  .dword 0x0000699F
  .dword 0x00006971
  .dword 0x00006943
  .dword 0x00006916
  .dword 0x000068E8
  .dword 0x000068BA
  .dword 0x0000688C
  .dword 0x0000685E
  .dword 0x00006830
  .dword 0x00006802
  .dword 0x000067D4
  .dword 0x000067A6
  .dword 0x00006778
  .dword 0x0000674A
  .dword 0x0000671C
  .dword 0x000066EE
  .dword 0x000066C0
  .dword 0x00006692
  .dword 0x00006664
  .dword 0x00006636
  .dword 0x00006608
  .dword 0x000065DA
  .dword 0x000065AC
  .dword 0x0000657E
  .dword 0x00006550
  .dword 0x00006521
  .dword 0x000064F3
  .dword 0x000064C5
  .dword 0x00006497
  .dword 0x00006469
  .dword 0x0000643A
  .dword 0x0000640C
  .dword 0x000063DE
  .dword 0x000063B0
  .dword 0x00006381
  .dword 0x00006353
  .dword 0x00006325
  .dword 0x000062F6
  .dword 0x000062C8
  .dword 0x00006299
  .dword 0x0000626B
  .dword 0x0000623D
  .dword 0x0000620E
  .dword 0x000061E0
  .dword 0x000061B1
  .dword 0x00006183
  .dword 0x00006154
  .dword 0x00006126
  .dword 0x000060F7
  .dword 0x000060C9
  .dword 0x0000609A
  .dword 0x0000606C
  .dword 0x0000603D
  .dword 0x0000600F
  .dword 0x00005FE0
  .dword 0x00005FB1
  .dword 0x00005F83
  .dword 0x00005F54
  .dword 0x00005F25
  .dword 0x00005EF7
  .dword 0x00005EC8
  .dword 0x00005E99
  .dword 0x00005E6B
  .dword 0x00005E3C
  .dword 0x00005E0D
  .dword 0x00005DDE
  .dword 0x00005DB0
  .dword 0x00005D81
  .dword 0x00005D52
  .dword 0x00005D23
  .dword 0x00005CF4
  .dword 0x00005CC6
  .dword 0x00005C97
  .dword 0x00005C68
  .dword 0x00005C39
  .dword 0x00005C0A
  .dword 0x00005BDB
  .dword 0x00005BAC
  .dword 0x00005B7D
  .dword 0x00005B4E
  .dword 0x00005B1F
  .dword 0x00005AF0
  .dword 0x00005AC1
  .dword 0x00005A92
  .dword 0x00005A63
  .dword 0x00005A34
  .dword 0x00005A05
  .dword 0x000059D6
  .dword 0x000059A7
  .dword 0x00005978
  .dword 0x00005949
  .dword 0x0000591A
  .dword 0x000058EB
  .dword 0x000058BC
  .dword 0x0000588C
  .dword 0x0000585D
  .dword 0x0000582E
  .dword 0x000057FF
  .dword 0x000057D0
  .dword 0x000057A1
  .dword 0x00005771
  .dword 0x00005742
  .dword 0x00005713
  .dword 0x000056E3
  .dword 0x000056B4
  .dword 0x00005685
  .dword 0x00005656
  .dword 0x00005626
  .dword 0x000055F7
  .dword 0x000055C8
  .dword 0x00005598
  .dword 0x00005569
  .dword 0x00005539
  .dword 0x0000550A
  .dword 0x000054DB
  .dword 0x000054AB
  .dword 0x0000547C
  .dword 0x0000544C
  .dword 0x0000541D
  .dword 0x000053ED
  .dword 0x000053BE
  .dword 0x0000538E
  .dword 0x0000535F
  .dword 0x0000532F
  .dword 0x00005300
  .dword 0x000052D0
  .dword 0x000052A1
  .dword 0x00005271
  .dword 0x00005241
  .dword 0x00005212
  .dword 0x000051E2
  .dword 0x000051B3
  .dword 0x00005183
  .dword 0x00005153
  .dword 0x00005124
  .dword 0x000050F4
  .dword 0x000050C4
  .dword 0x00005095
  .dword 0x00005065
  .dword 0x00005035
  .dword 0x00005005
  .dword 0x00004FD6
  .dword 0x00004FA6
  .dword 0x00004F76
  .dword 0x00004F46
  .dword 0x00004F16
  .dword 0x00004EE7
  .dword 0x00004EB7
  .dword 0x00004E87
  .dword 0x00004E57
  .dword 0x00004E27
  .dword 0x00004DF7
  .dword 0x00004DC8
  .dword 0x00004D98
  .dword 0x00004D68
  .dword 0x00004D38
  .dword 0x00004D08
  .dword 0x00004CD8
  .dword 0x00004CA8
  .dword 0x00004C78
  .dword 0x00004C48
  .dword 0x00004C18
  .dword 0x00004BE8
  .dword 0x00004BB8
  .dword 0x00004B88
  .dword 0x00004B58
  .dword 0x00004B28
  .dword 0x00004AF8
  .dword 0x00004AC8
  .dword 0x00004A98
  .dword 0x00004A68
  .dword 0x00004A38
  .dword 0x00004A07
  .dword 0x000049D7
  .dword 0x000049A7
  .dword 0x00004977
  .dword 0x00004947
  .dword 0x00004917
  .dword 0x000048E7
  .dword 0x000048B6
  .dword 0x00004886
  .dword 0x00004856
  .dword 0x00004826
  .dword 0x000047F5
  .dword 0x000047C5
  .dword 0x00004795
  .dword 0x00004765
  .dword 0x00004734
  .dword 0x00004704
  .dword 0x000046D4
  .dword 0x000046A4
  .dword 0x00004673
  .dword 0x00004643
  .dword 0x00004613
  .dword 0x000045E2
  .dword 0x000045B2
  .dword 0x00004581
  .dword 0x00004551
  .dword 0x00004521
  .dword 0x000044F0
  .dword 0x000044C0
  .dword 0x0000448F
  .dword 0x0000445F
  .dword 0x0000442F
  .dword 0x000043FE
  .dword 0x000043CE
  .dword 0x0000439D
  .dword 0x0000436D
  .dword 0x0000433C
  .dword 0x0000430C
  .dword 0x000042DB
  .dword 0x000042AB
  .dword 0x0000427A
  .dword 0x0000424A
  .dword 0x00004219
  .dword 0x000041E8
  .dword 0x000041B8
  .dword 0x00004187
  .dword 0x00004157
  .dword 0x00004126
  .dword 0x000040F5
  .dword 0x000040C5
  .dword 0x00004094
  .dword 0x00004064
  .dword 0x00004033
  .dword 0x00004002
  .dword 0x00003FD2
  .dword 0x00003FA1
  .dword 0x00003F70
  .dword 0x00003F3F
  .dword 0x00003F0F
  .dword 0x00003EDE
  .dword 0x00003EAD
  .dword 0x00003E7D
  .dword 0x00003E4C
  .dword 0x00003E1B
  .dword 0x00003DEA
  .dword 0x00003DBA
  .dword 0x00003D89
  .dword 0x00003D58
  .dword 0x00003D27
  .dword 0x00003CF6
  .dword 0x00003CC5
  .dword 0x00003C95
  .dword 0x00003C64
  .dword 0x00003C33
  .dword 0x00003C02
  .dword 0x00003BD1
  .dword 0x00003BA0
  .dword 0x00003B6F
  .dword 0x00003B3F
  .dword 0x00003B0E
  .dword 0x00003ADD
  .dword 0x00003AAC
  .dword 0x00003A7B
  .dword 0x00003A4A
  .dword 0x00003A19
  .dword 0x000039E8
  .dword 0x000039B7
  .dword 0x00003986
  .dword 0x00003955
  .dword 0x00003924
  .dword 0x000038F3
  .dword 0x000038C2
  .dword 0x00003891
  .dword 0x00003860
  .dword 0x0000382F
  .dword 0x000037FE
  .dword 0x000037CD
  .dword 0x0000379C
  .dword 0x0000376B
  .dword 0x0000373A
  .dword 0x00003709
  .dword 0x000036D8
  .dword 0x000036A6
  .dword 0x00003675
  .dword 0x00003644
  .dword 0x00003613
  .dword 0x000035E2
  .dword 0x000035B1
  .dword 0x00003580
  .dword 0x0000354E
  .dword 0x0000351D
  .dword 0x000034EC
  .dword 0x000034BB
  .dword 0x0000348A
  .dword 0x00003459
  .dword 0x00003427
  .dword 0x000033F6
  .dword 0x000033C5
  .dword 0x00003394
  .dword 0x00003362
  .dword 0x00003331
  .dword 0x00003300
  .dword 0x000032CF
  .dword 0x0000329D
  .dword 0x0000326C
  .dword 0x0000323B
  .dword 0x0000320A
  .dword 0x000031D8
  .dword 0x000031A7
  .dword 0x00003176
  .dword 0x00003144
  .dword 0x00003113
  .dword 0x000030E2
  .dword 0x000030B0
  .dword 0x0000307F
  .dword 0x0000304E
  .dword 0x0000301C
  .dword 0x00002FEB
  .dword 0x00002FBA
  .dword 0x00002F88
  .dword 0x00002F57
  .dword 0x00002F25
  .dword 0x00002EF4
  .dword 0x00002EC2
  .dword 0x00002E91
  .dword 0x00002E60
  .dword 0x00002E2E
  .dword 0x00002DFD
  .dword 0x00002DCB
  .dword 0x00002D9A
  .dword 0x00002D68
  .dword 0x00002D37
  .dword 0x00002D05
  .dword 0x00002CD4
  .dword 0x00002CA2
  .dword 0x00002C71
  .dword 0x00002C3F
  .dword 0x00002C0E
  .dword 0x00002BDC
  .dword 0x00002BAB
  .dword 0x00002B79
  .dword 0x00002B48
  .dword 0x00002B16
  .dword 0x00002AE5
  .dword 0x00002AB3
  .dword 0x00002A82
  .dword 0x00002A50
  .dword 0x00002A1E
  .dword 0x000029ED
  .dword 0x000029BB
  .dword 0x0000298A
  .dword 0x00002958
  .dword 0x00002926
  .dword 0x000028F5
  .dword 0x000028C3
  .dword 0x00002892
  .dword 0x00002860
  .dword 0x0000282E
  .dword 0x000027FD
  .dword 0x000027CB
  .dword 0x00002799
  .dword 0x00002768
  .dword 0x00002736
  .dword 0x00002704
  .dword 0x000026D3
  .dword 0x000026A1
  .dword 0x0000266F
  .dword 0x0000263E
  .dword 0x0000260C
  .dword 0x000025DA
  .dword 0x000025A8
  .dword 0x00002577
  .dword 0x00002545
  .dword 0x00002513
  .dword 0x000024E2
  .dword 0x000024B0
  .dword 0x0000247E
  .dword 0x0000244C
  .dword 0x0000241B
  .dword 0x000023E9
  .dword 0x000023B7
  .dword 0x00002385
  .dword 0x00002353
  .dword 0x00002322
  .dword 0x000022F0
  .dword 0x000022BE
  .dword 0x0000228C
  .dword 0x0000225A
  .dword 0x00002229
  .dword 0x000021F7
  .dword 0x000021C5
  .dword 0x00002193
  .dword 0x00002161
  .dword 0x00002130
  .dword 0x000020FE
  .dword 0x000020CC
  .dword 0x0000209A
  .dword 0x00002068
  .dword 0x00002036
  .dword 0x00002004
  .dword 0x00001FD3
  .dword 0x00001FA1
  .dword 0x00001F6F
  .dword 0x00001F3D
  .dword 0x00001F0B
  .dword 0x00001ED9
  .dword 0x00001EA7
  .dword 0x00001E75
  .dword 0x00001E43
  .dword 0x00001E11
  .dword 0x00001DE0
  .dword 0x00001DAE
  .dword 0x00001D7C
  .dword 0x00001D4A
  .dword 0x00001D18
  .dword 0x00001CE6
  .dword 0x00001CB4
  .dword 0x00001C82
  .dword 0x00001C50
  .dword 0x00001C1E
  .dword 0x00001BEC
  .dword 0x00001BBA
  .dword 0x00001B88
  .dword 0x00001B56
  .dword 0x00001B24
  .dword 0x00001AF2
  .dword 0x00001AC0
  .dword 0x00001A8E
  .dword 0x00001A5C
  .dword 0x00001A2A
  .dword 0x000019F8
  .dword 0x000019C6
  .dword 0x00001994
  .dword 0x00001962
  .dword 0x00001930
  .dword 0x000018FE
  .dword 0x000018CC
  .dword 0x0000189A
  .dword 0x00001868
  .dword 0x00001836
  .dword 0x00001804
  .dword 0x000017D2
  .dword 0x000017A0
  .dword 0x0000176E
  .dword 0x0000173C
  .dword 0x0000170A
  .dword 0x000016D8
  .dword 0x000016A6
  .dword 0x00001674
  .dword 0x00001641
  .dword 0x0000160F
  .dword 0x000015DD
  .dword 0x000015AB
  .dword 0x00001579
  .dword 0x00001547
  .dword 0x00001515
  .dword 0x000014E3
  .dword 0x000014B1
  .dword 0x0000147F
  .dword 0x0000144D
  .dword 0x0000141A
  .dword 0x000013E8
  .dword 0x000013B6
  .dword 0x00001384
  .dword 0x00001352
  .dword 0x00001320
  .dword 0x000012EE
  .dword 0x000012BC
  .dword 0x00001289
  .dword 0x00001257
  .dword 0x00001225
  .dword 0x000011F3
  .dword 0x000011C1
  .dword 0x0000118F
  .dword 0x0000115D
  .dword 0x0000112A
  .dword 0x000010F8
  .dword 0x000010C6
  .dword 0x00001094
  .dword 0x00001062
  .dword 0x00001030
  .dword 0x00000FFD
  .dword 0x00000FCB
  .dword 0x00000F99
  .dword 0x00000F67
  .dword 0x00000F35
  .dword 0x00000F03
  .dword 0x00000ED0
  .dword 0x00000E9E
  .dword 0x00000E6C
  .dword 0x00000E3A
  .dword 0x00000E08
  .dword 0x00000DD5
  .dword 0x00000DA3
  .dword 0x00000D71
  .dword 0x00000D3F
  .dword 0x00000D0D
  .dword 0x00000CDB
  .dword 0x00000CA8
  .dword 0x00000C76
  .dword 0x00000C44
  .dword 0x00000C12
  .dword 0x00000BDF
  .dword 0x00000BAD
  .dword 0x00000B7B
  .dword 0x00000B49
  .dword 0x00000B17
  .dword 0x00000AE4
  .dword 0x00000AB2
  .dword 0x00000A80
  .dword 0x00000A4E
  .dword 0x00000A1B
  .dword 0x000009E9
  .dword 0x000009B7
  .dword 0x00000985
  .dword 0x00000953
  .dword 0x00000920
  .dword 0x000008EE
  .dword 0x000008BC
  .dword 0x0000088A
  .dword 0x00000857
  .dword 0x00000825
  .dword 0x000007F3
  .dword 0x000007C1
  .dword 0x0000078E
  .dword 0x0000075C
  .dword 0x0000072A
  .dword 0x000006F8
  .dword 0x000006C5
  .dword 0x00000693
  .dword 0x00000661
  .dword 0x0000062F
  .dword 0x000005FC
  .dword 0x000005CA
  .dword 0x00000598
  .dword 0x00000566
  .dword 0x00000533
  .dword 0x00000501
  .dword 0x000004CF
  .dword 0x0000049D
  .dword 0x0000046A
  .dword 0x00000438
  .dword 0x00000406
  .dword 0x000003D4
  .dword 0x000003A1
  .dword 0x0000036F
  .dword 0x0000033D
  .dword 0x0000030B
  .dword 0x000002D8
  .dword 0x000002A6
  .dword 0x00000274
  .dword 0x00000242
  .dword 0x0000020F
  .dword 0x000001DD
  .dword 0x000001AB
  .dword 0x00000178
  .dword 0x00000146
  .dword 0x00000114
  .dword 0x000000E2
  .dword 0x000000AF
  .dword 0x0000007D
  .dword 0x0000004B
  .dword 0x00000019
  .dword 0xFFFFFFE7
  .dword 0xFFFFFFB5
  .dword 0xFFFFFF83
  .dword 0xFFFFFF51
  .dword 0xFFFFFF1E
  .dword 0xFFFFFEEC
  .dword 0xFFFFFEBA
  .dword 0xFFFFFE88
  .dword 0xFFFFFE55
  .dword 0xFFFFFE23
  .dword 0xFFFFFDF1
  .dword 0xFFFFFDBE
  .dword 0xFFFFFD8C
  .dword 0xFFFFFD5A
  .dword 0xFFFFFD28
  .dword 0xFFFFFCF5
  .dword 0xFFFFFCC3
  .dword 0xFFFFFC91
  .dword 0xFFFFFC5F
  .dword 0xFFFFFC2C
  .dword 0xFFFFFBFA
  .dword 0xFFFFFBC8
  .dword 0xFFFFFB96
  .dword 0xFFFFFB63
  .dword 0xFFFFFB31
  .dword 0xFFFFFAFF
  .dword 0xFFFFFACD
  .dword 0xFFFFFA9A
  .dword 0xFFFFFA68
  .dword 0xFFFFFA36
  .dword 0xFFFFFA04
  .dword 0xFFFFF9D1
  .dword 0xFFFFF99F
  .dword 0xFFFFF96D
  .dword 0xFFFFF93B
  .dword 0xFFFFF908
  .dword 0xFFFFF8D6
  .dword 0xFFFFF8A4
  .dword 0xFFFFF872
  .dword 0xFFFFF83F
  .dword 0xFFFFF80D
  .dword 0xFFFFF7DB
  .dword 0xFFFFF7A9
  .dword 0xFFFFF776
  .dword 0xFFFFF744
  .dword 0xFFFFF712
  .dword 0xFFFFF6E0
  .dword 0xFFFFF6AD
  .dword 0xFFFFF67B
  .dword 0xFFFFF649
  .dword 0xFFFFF617
  .dword 0xFFFFF5E4
  .dword 0xFFFFF5B2
  .dword 0xFFFFF580
  .dword 0xFFFFF54E
  .dword 0xFFFFF51C
  .dword 0xFFFFF4E9
  .dword 0xFFFFF4B7
  .dword 0xFFFFF485
  .dword 0xFFFFF453
  .dword 0xFFFFF421
  .dword 0xFFFFF3EE
  .dword 0xFFFFF3BC
  .dword 0xFFFFF38A
  .dword 0xFFFFF358
  .dword 0xFFFFF325
  .dword 0xFFFFF2F3
  .dword 0xFFFFF2C1
  .dword 0xFFFFF28F
  .dword 0xFFFFF25D
  .dword 0xFFFFF22B
  .dword 0xFFFFF1F8
  .dword 0xFFFFF1C6
  .dword 0xFFFFF194
  .dword 0xFFFFF162
  .dword 0xFFFFF130
  .dword 0xFFFFF0FD
  .dword 0xFFFFF0CB
  .dword 0xFFFFF099
  .dword 0xFFFFF067
  .dword 0xFFFFF035
  .dword 0xFFFFF003
  .dword 0xFFFFEFD0
  .dword 0xFFFFEF9E
  .dword 0xFFFFEF6C
  .dword 0xFFFFEF3A
  .dword 0xFFFFEF08
  .dword 0xFFFFEED6
  .dword 0xFFFFEEA3
  .dword 0xFFFFEE71
  .dword 0xFFFFEE3F
  .dword 0xFFFFEE0D
  .dword 0xFFFFEDDB
  .dword 0xFFFFEDA9
  .dword 0xFFFFED77
  .dword 0xFFFFED44
  .dword 0xFFFFED12
  .dword 0xFFFFECE0
  .dword 0xFFFFECAE
  .dword 0xFFFFEC7C
  .dword 0xFFFFEC4A
  .dword 0xFFFFEC18
  .dword 0xFFFFEBE6
  .dword 0xFFFFEBB3
  .dword 0xFFFFEB81
  .dword 0xFFFFEB4F
  .dword 0xFFFFEB1D
  .dword 0xFFFFEAEB
  .dword 0xFFFFEAB9
  .dword 0xFFFFEA87
  .dword 0xFFFFEA55
  .dword 0xFFFFEA23
  .dword 0xFFFFE9F1
  .dword 0xFFFFE9BF
  .dword 0xFFFFE98C
  .dword 0xFFFFE95A
  .dword 0xFFFFE928
  .dword 0xFFFFE8F6
  .dword 0xFFFFE8C4
  .dword 0xFFFFE892
  .dword 0xFFFFE860
  .dword 0xFFFFE82E
  .dword 0xFFFFE7FC
  .dword 0xFFFFE7CA
  .dword 0xFFFFE798
  .dword 0xFFFFE766
  .dword 0xFFFFE734
  .dword 0xFFFFE702
  .dword 0xFFFFE6D0
  .dword 0xFFFFE69E
  .dword 0xFFFFE66C
  .dword 0xFFFFE63A
  .dword 0xFFFFE608
  .dword 0xFFFFE5D6
  .dword 0xFFFFE5A4
  .dword 0xFFFFE572
  .dword 0xFFFFE540
  .dword 0xFFFFE50E
  .dword 0xFFFFE4DC
  .dword 0xFFFFE4AA
  .dword 0xFFFFE478
  .dword 0xFFFFE446
  .dword 0xFFFFE414
  .dword 0xFFFFE3E2
  .dword 0xFFFFE3B0
  .dword 0xFFFFE37E
  .dword 0xFFFFE34C
  .dword 0xFFFFE31A
  .dword 0xFFFFE2E8
  .dword 0xFFFFE2B6
  .dword 0xFFFFE284
  .dword 0xFFFFE252
  .dword 0xFFFFE220
  .dword 0xFFFFE1EF
  .dword 0xFFFFE1BD
  .dword 0xFFFFE18B
  .dword 0xFFFFE159
  .dword 0xFFFFE127
  .dword 0xFFFFE0F5
  .dword 0xFFFFE0C3
  .dword 0xFFFFE091
  .dword 0xFFFFE05F
  .dword 0xFFFFE02D
  .dword 0xFFFFDFFC
  .dword 0xFFFFDFCA
  .dword 0xFFFFDF98
  .dword 0xFFFFDF66
  .dword 0xFFFFDF34
  .dword 0xFFFFDF02
  .dword 0xFFFFDED0
  .dword 0xFFFFDE9F
  .dword 0xFFFFDE6D
  .dword 0xFFFFDE3B
  .dword 0xFFFFDE09
  .dword 0xFFFFDDD7
  .dword 0xFFFFDDA6
  .dword 0xFFFFDD74
  .dword 0xFFFFDD42
  .dword 0xFFFFDD10
  .dword 0xFFFFDCDE
  .dword 0xFFFFDCAD
  .dword 0xFFFFDC7B
  .dword 0xFFFFDC49
  .dword 0xFFFFDC17
  .dword 0xFFFFDBE5
  .dword 0xFFFFDBB4
  .dword 0xFFFFDB82
  .dword 0xFFFFDB50
  .dword 0xFFFFDB1E
  .dword 0xFFFFDAED
  .dword 0xFFFFDABB
  .dword 0xFFFFDA89
  .dword 0xFFFFDA58
  .dword 0xFFFFDA26
  .dword 0xFFFFD9F4
  .dword 0xFFFFD9C2
  .dword 0xFFFFD991
  .dword 0xFFFFD95F
  .dword 0xFFFFD92D
  .dword 0xFFFFD8FC
  .dword 0xFFFFD8CA
  .dword 0xFFFFD898
  .dword 0xFFFFD867
  .dword 0xFFFFD835
  .dword 0xFFFFD803
  .dword 0xFFFFD7D2
  .dword 0xFFFFD7A0
  .dword 0xFFFFD76E
  .dword 0xFFFFD73D
  .dword 0xFFFFD70B
  .dword 0xFFFFD6DA
  .dword 0xFFFFD6A8
  .dword 0xFFFFD676
  .dword 0xFFFFD645
  .dword 0xFFFFD613
  .dword 0xFFFFD5E2
  .dword 0xFFFFD5B0
  .dword 0xFFFFD57E
  .dword 0xFFFFD54D
  .dword 0xFFFFD51B
  .dword 0xFFFFD4EA
  .dword 0xFFFFD4B8
  .dword 0xFFFFD487
  .dword 0xFFFFD455
  .dword 0xFFFFD424
  .dword 0xFFFFD3F2
  .dword 0xFFFFD3C1
  .dword 0xFFFFD38F
  .dword 0xFFFFD35E
  .dword 0xFFFFD32C
  .dword 0xFFFFD2FB
  .dword 0xFFFFD2C9
  .dword 0xFFFFD298
  .dword 0xFFFFD266
  .dword 0xFFFFD235
  .dword 0xFFFFD203
  .dword 0xFFFFD1D2
  .dword 0xFFFFD1A0
  .dword 0xFFFFD16F
  .dword 0xFFFFD13E
  .dword 0xFFFFD10C
  .dword 0xFFFFD0DB
  .dword 0xFFFFD0A9
  .dword 0xFFFFD078
  .dword 0xFFFFD046
  .dword 0xFFFFD015
  .dword 0xFFFFCFE4
  .dword 0xFFFFCFB2
  .dword 0xFFFFCF81
  .dword 0xFFFFCF50
  .dword 0xFFFFCF1E
  .dword 0xFFFFCEED
  .dword 0xFFFFCEBC
  .dword 0xFFFFCE8A
  .dword 0xFFFFCE59
  .dword 0xFFFFCE28
  .dword 0xFFFFCDF6
  .dword 0xFFFFCDC5
  .dword 0xFFFFCD94
  .dword 0xFFFFCD63
  .dword 0xFFFFCD31
  .dword 0xFFFFCD00
  .dword 0xFFFFCCCF
  .dword 0xFFFFCC9E
  .dword 0xFFFFCC6C
  .dword 0xFFFFCC3B
  .dword 0xFFFFCC0A
  .dword 0xFFFFCBD9
  .dword 0xFFFFCBA7
  .dword 0xFFFFCB76
  .dword 0xFFFFCB45
  .dword 0xFFFFCB14
  .dword 0xFFFFCAE3
  .dword 0xFFFFCAB1
  .dword 0xFFFFCA80
  .dword 0xFFFFCA4F
  .dword 0xFFFFCA1E
  .dword 0xFFFFC9ED
  .dword 0xFFFFC9BC
  .dword 0xFFFFC98B
  .dword 0xFFFFC95A
  .dword 0xFFFFC928
  .dword 0xFFFFC8F7
  .dword 0xFFFFC8C6
  .dword 0xFFFFC895
  .dword 0xFFFFC864
  .dword 0xFFFFC833
  .dword 0xFFFFC802
  .dword 0xFFFFC7D1
  .dword 0xFFFFC7A0
  .dword 0xFFFFC76F
  .dword 0xFFFFC73E
  .dword 0xFFFFC70D
  .dword 0xFFFFC6DC
  .dword 0xFFFFC6AB
  .dword 0xFFFFC67A
  .dword 0xFFFFC649
  .dword 0xFFFFC618
  .dword 0xFFFFC5E7
  .dword 0xFFFFC5B6
  .dword 0xFFFFC585
  .dword 0xFFFFC554
  .dword 0xFFFFC523
  .dword 0xFFFFC4F2
  .dword 0xFFFFC4C1
  .dword 0xFFFFC491
  .dword 0xFFFFC460
  .dword 0xFFFFC42F
  .dword 0xFFFFC3FE
  .dword 0xFFFFC3CD
  .dword 0xFFFFC39C
  .dword 0xFFFFC36B
  .dword 0xFFFFC33B
  .dword 0xFFFFC30A
  .dword 0xFFFFC2D9
  .dword 0xFFFFC2A8
  .dword 0xFFFFC277
  .dword 0xFFFFC246
  .dword 0xFFFFC216
  .dword 0xFFFFC1E5
  .dword 0xFFFFC1B4
  .dword 0xFFFFC183
  .dword 0xFFFFC153
  .dword 0xFFFFC122
  .dword 0xFFFFC0F1
  .dword 0xFFFFC0C1
  .dword 0xFFFFC090
  .dword 0xFFFFC05F
  .dword 0xFFFFC02E
  .dword 0xFFFFBFFE
  .dword 0xFFFFBFCD
  .dword 0xFFFFBF9C
  .dword 0xFFFFBF6C
  .dword 0xFFFFBF3B
  .dword 0xFFFFBF0B
  .dword 0xFFFFBEDA
  .dword 0xFFFFBEA9
  .dword 0xFFFFBE79
  .dword 0xFFFFBE48
  .dword 0xFFFFBE18
  .dword 0xFFFFBDE7
  .dword 0xFFFFBDB6
  .dword 0xFFFFBD86
  .dword 0xFFFFBD55
  .dword 0xFFFFBD25
  .dword 0xFFFFBCF4
  .dword 0xFFFFBCC4
  .dword 0xFFFFBC93
  .dword 0xFFFFBC63
  .dword 0xFFFFBC32
  .dword 0xFFFFBC02
  .dword 0xFFFFBBD1
  .dword 0xFFFFBBA1
  .dword 0xFFFFBB71
  .dword 0xFFFFBB40
  .dword 0xFFFFBB10
  .dword 0xFFFFBADF
  .dword 0xFFFFBAAF
  .dword 0xFFFFBA7F
  .dword 0xFFFFBA4E
  .dword 0xFFFFBA1E
  .dword 0xFFFFB9ED
  .dword 0xFFFFB9BD
  .dword 0xFFFFB98D
  .dword 0xFFFFB95C
  .dword 0xFFFFB92C
  .dword 0xFFFFB8FC
  .dword 0xFFFFB8CC
  .dword 0xFFFFB89B
  .dword 0xFFFFB86B
  .dword 0xFFFFB83B
  .dword 0xFFFFB80B
  .dword 0xFFFFB7DA
  .dword 0xFFFFB7AA
  .dword 0xFFFFB77A
  .dword 0xFFFFB74A
  .dword 0xFFFFB719
  .dword 0xFFFFB6E9
  .dword 0xFFFFB6B9
  .dword 0xFFFFB689
  .dword 0xFFFFB659
  .dword 0xFFFFB629
  .dword 0xFFFFB5F9
  .dword 0xFFFFB5C8
  .dword 0xFFFFB598
  .dword 0xFFFFB568
  .dword 0xFFFFB538
  .dword 0xFFFFB508
  .dword 0xFFFFB4D8
  .dword 0xFFFFB4A8
  .dword 0xFFFFB478
  .dword 0xFFFFB448
  .dword 0xFFFFB418
  .dword 0xFFFFB3E8
  .dword 0xFFFFB3B8
  .dword 0xFFFFB388
  .dword 0xFFFFB358
  .dword 0xFFFFB328
  .dword 0xFFFFB2F8
  .dword 0xFFFFB2C8
  .dword 0xFFFFB298
  .dword 0xFFFFB268
  .dword 0xFFFFB238
  .dword 0xFFFFB209
  .dword 0xFFFFB1D9
  .dword 0xFFFFB1A9
  .dword 0xFFFFB179
  .dword 0xFFFFB149
  .dword 0xFFFFB119
  .dword 0xFFFFB0EA
  .dword 0xFFFFB0BA
  .dword 0xFFFFB08A
  .dword 0xFFFFB05A
  .dword 0xFFFFB02A
  .dword 0xFFFFAFFB
  .dword 0xFFFFAFCB
  .dword 0xFFFFAF9B
  .dword 0xFFFFAF6B
  .dword 0xFFFFAF3C
  .dword 0xFFFFAF0C
  .dword 0xFFFFAEDC
  .dword 0xFFFFAEAD
  .dword 0xFFFFAE7D
  .dword 0xFFFFAE4D
  .dword 0xFFFFAE1E
  .dword 0xFFFFADEE
  .dword 0xFFFFADBF
  .dword 0xFFFFAD8F
  .dword 0xFFFFAD5F
  .dword 0xFFFFAD30
  .dword 0xFFFFAD00
  .dword 0xFFFFACD1
  .dword 0xFFFFACA1
  .dword 0xFFFFAC72
  .dword 0xFFFFAC42
  .dword 0xFFFFAC13
  .dword 0xFFFFABE3
  .dword 0xFFFFABB4
  .dword 0xFFFFAB84
  .dword 0xFFFFAB55
  .dword 0xFFFFAB25
  .dword 0xFFFFAAF6
  .dword 0xFFFFAAC7
  .dword 0xFFFFAA97
  .dword 0xFFFFAA68
  .dword 0xFFFFAA38
  .dword 0xFFFFAA09
  .dword 0xFFFFA9DA
  .dword 0xFFFFA9AA
  .dword 0xFFFFA97B
  .dword 0xFFFFA94C
  .dword 0xFFFFA91D
  .dword 0xFFFFA8ED
  .dword 0xFFFFA8BE
  .dword 0xFFFFA88F
  .dword 0xFFFFA85F
  .dword 0xFFFFA830
  .dword 0xFFFFA801
  .dword 0xFFFFA7D2
  .dword 0xFFFFA7A3
  .dword 0xFFFFA774
  .dword 0xFFFFA744
  .dword 0xFFFFA715
  .dword 0xFFFFA6E6
  .dword 0xFFFFA6B7
  .dword 0xFFFFA688
  .dword 0xFFFFA659
  .dword 0xFFFFA62A
  .dword 0xFFFFA5FB
  .dword 0xFFFFA5CC
  .dword 0xFFFFA59D
  .dword 0xFFFFA56E
  .dword 0xFFFFA53F
  .dword 0xFFFFA510
  .dword 0xFFFFA4E1
  .dword 0xFFFFA4B2
  .dword 0xFFFFA483
  .dword 0xFFFFA454
  .dword 0xFFFFA425
  .dword 0xFFFFA3F6
  .dword 0xFFFFA3C7
  .dword 0xFFFFA398
  .dword 0xFFFFA369
  .dword 0xFFFFA33A
  .dword 0xFFFFA30C
  .dword 0xFFFFA2DD
  .dword 0xFFFFA2AE
  .dword 0xFFFFA27F
  .dword 0xFFFFA250
  .dword 0xFFFFA222
  .dword 0xFFFFA1F3
  .dword 0xFFFFA1C4
  .dword 0xFFFFA195
  .dword 0xFFFFA167
  .dword 0xFFFFA138
  .dword 0xFFFFA109
  .dword 0xFFFFA0DB
  .dword 0xFFFFA0AC
  .dword 0xFFFFA07D
  .dword 0xFFFFA04F
  .dword 0xFFFFA020
  .dword 0xFFFF9FF1
  .dword 0xFFFF9FC3
  .dword 0xFFFF9F94
  .dword 0xFFFF9F66
  .dword 0xFFFF9F37
  .dword 0xFFFF9F09
  .dword 0xFFFF9EDA
  .dword 0xFFFF9EAC
  .dword 0xFFFF9E7D
  .dword 0xFFFF9E4F
  .dword 0xFFFF9E20
  .dword 0xFFFF9DF2
  .dword 0xFFFF9DC3
  .dword 0xFFFF9D95
  .dword 0xFFFF9D67
  .dword 0xFFFF9D38
  .dword 0xFFFF9D0A
  .dword 0xFFFF9CDB
  .dword 0xFFFF9CAD
  .dword 0xFFFF9C7F
  .dword 0xFFFF9C50
  .dword 0xFFFF9C22
  .dword 0xFFFF9BF4
  .dword 0xFFFF9BC6
  .dword 0xFFFF9B97
  .dword 0xFFFF9B69
  .dword 0xFFFF9B3B
  .dword 0xFFFF9B0D
  .dword 0xFFFF9ADF
  .dword 0xFFFF9AB0
  .dword 0xFFFF9A82
  .dword 0xFFFF9A54
  .dword 0xFFFF9A26
  .dword 0xFFFF99F8
  .dword 0xFFFF99CA
  .dword 0xFFFF999C
  .dword 0xFFFF996E
  .dword 0xFFFF9940
  .dword 0xFFFF9912
  .dword 0xFFFF98E4
  .dword 0xFFFF98B6
  .dword 0xFFFF9888
  .dword 0xFFFF985A
  .dword 0xFFFF982C
  .dword 0xFFFF97FE
  .dword 0xFFFF97D0
  .dword 0xFFFF97A2
  .dword 0xFFFF9774
  .dword 0xFFFF9746
  .dword 0xFFFF9718
  .dword 0xFFFF96EA
  .dword 0xFFFF96BD
  .dword 0xFFFF968F
  .dword 0xFFFF9661
  .dword 0xFFFF9633
  .dword 0xFFFF9605
  .dword 0xFFFF95D8
  .dword 0xFFFF95AA
  .dword 0xFFFF957C
  .dword 0xFFFF954F
  .dword 0xFFFF9521
  .dword 0xFFFF94F3
  .dword 0xFFFF94C6
  .dword 0xFFFF9498
  .dword 0xFFFF946A
  .dword 0xFFFF943D
  .dword 0xFFFF940F
  .dword 0xFFFF93E2
  .dword 0xFFFF93B4
  .dword 0xFFFF9386
  .dword 0xFFFF9359
  .dword 0xFFFF932B
  .dword 0xFFFF92FE
  .dword 0xFFFF92D0
  .dword 0xFFFF92A3
  .dword 0xFFFF9276
  .dword 0xFFFF9248
  .dword 0xFFFF921B
  .dword 0xFFFF91ED
  .dword 0xFFFF91C0
  .dword 0xFFFF9193
  .dword 0xFFFF9165
  .dword 0xFFFF9138
  .dword 0xFFFF910B
  .dword 0xFFFF90DD
  .dword 0xFFFF90B0
  .dword 0xFFFF9083
  .dword 0xFFFF9056
  .dword 0xFFFF9028
  .dword 0xFFFF8FFB
  .dword 0xFFFF8FCE
  .dword 0xFFFF8FA1
  .dword 0xFFFF8F74
  .dword 0xFFFF8F46
  .dword 0xFFFF8F19
  .dword 0xFFFF8EEC
  .dword 0xFFFF8EBF
  .dword 0xFFFF8E92
  .dword 0xFFFF8E65
  .dword 0xFFFF8E38
  .dword 0xFFFF8E0B
  .dword 0xFFFF8DDE
  .dword 0xFFFF8DB1
  .dword 0xFFFF8D84
  .dword 0xFFFF8D57
  .dword 0xFFFF8D2A
  .dword 0xFFFF8CFD
  .dword 0xFFFF8CD0
  .dword 0xFFFF8CA3
  .dword 0xFFFF8C77
  .dword 0xFFFF8C4A
  .dword 0xFFFF8C1D
  .dword 0xFFFF8BF0
  .dword 0xFFFF8BC3
  .dword 0xFFFF8B97
  .dword 0xFFFF8B6A
  .dword 0xFFFF8B3D
  .dword 0xFFFF8B10
  .dword 0xFFFF8AE4
  .dword 0xFFFF8AB7
  .dword 0xFFFF8A8A
  .dword 0xFFFF8A5E
  .dword 0xFFFF8A31
  .dword 0xFFFF8A04
  .dword 0xFFFF89D8
  .dword 0xFFFF89AB
  .dword 0xFFFF897F
  .dword 0xFFFF8952
  .dword 0xFFFF8926
  .dword 0xFFFF88F9
  .dword 0xFFFF88CD
  .dword 0xFFFF88A0
  .dword 0xFFFF8874
  .dword 0xFFFF8847
  .dword 0xFFFF881B
  .dword 0xFFFF87EE
  .dword 0xFFFF87C2
  .dword 0xFFFF8796
  .dword 0xFFFF8769
  .dword 0xFFFF873D
  .dword 0xFFFF8711
  .dword 0xFFFF86E4
  .dword 0xFFFF86B8
  .dword 0xFFFF868C
  .dword 0xFFFF8660
  .dword 0xFFFF8633
  .dword 0xFFFF8607
  .dword 0xFFFF85DB
  .dword 0xFFFF85AF
  .dword 0xFFFF8583
  .dword 0xFFFF8556
  .dword 0xFFFF852A
  .dword 0xFFFF84FE
  .dword 0xFFFF84D2
  .dword 0xFFFF84A6
  .dword 0xFFFF847A
  .dword 0xFFFF844E
  .dword 0xFFFF8422
  .dword 0xFFFF83F6
  .dword 0xFFFF83CA
  .dword 0xFFFF839E
  .dword 0xFFFF8372
  .dword 0xFFFF8346
  .dword 0xFFFF831A
  .dword 0xFFFF82EF
  .dword 0xFFFF82C3
  .dword 0xFFFF8297
  .dword 0xFFFF826B
  .dword 0xFFFF823F
  .dword 0xFFFF8214
  .dword 0xFFFF81E8
  .dword 0xFFFF81BC
  .dword 0xFFFF8190
  .dword 0xFFFF8165
  .dword 0xFFFF8139
  .dword 0xFFFF810D
  .dword 0xFFFF80E2
  .dword 0xFFFF80B6
  .dword 0xFFFF808A
  .dword 0xFFFF805F
  .dword 0xFFFF8033
  .dword 0xFFFF8008
  .dword 0xFFFF7FDC
  .dword 0xFFFF7FB1
  .dword 0xFFFF7F85
  .dword 0xFFFF7F5A
  .dword 0xFFFF7F2E
  .dword 0xFFFF7F03
  .dword 0xFFFF7ED7
  .dword 0xFFFF7EAC
  .dword 0xFFFF7E81
  .dword 0xFFFF7E55
  .dword 0xFFFF7E2A
  .dword 0xFFFF7DFF
  .dword 0xFFFF7DD3
  .dword 0xFFFF7DA8
  .dword 0xFFFF7D7D
  .dword 0xFFFF7D52
  .dword 0xFFFF7D26
  .dword 0xFFFF7CFB
  .dword 0xFFFF7CD0
  .dword 0xFFFF7CA5
  .dword 0xFFFF7C7A
  .dword 0xFFFF7C4F
  .dword 0xFFFF7C24
  .dword 0xFFFF7BF9
  .dword 0xFFFF7BCD
  .dword 0xFFFF7BA2
  .dword 0xFFFF7B77
  .dword 0xFFFF7B4C
  .dword 0xFFFF7B21
  .dword 0xFFFF7AF7
  .dword 0xFFFF7ACC
  .dword 0xFFFF7AA1
  .dword 0xFFFF7A76
  .dword 0xFFFF7A4B
  .dword 0xFFFF7A20
  .dword 0xFFFF79F5
  .dword 0xFFFF79CA
  .dword 0xFFFF79A0
  .dword 0xFFFF7975
  .dword 0xFFFF794A
  .dword 0xFFFF791F
  .dword 0xFFFF78F5
  .dword 0xFFFF78CA
  .dword 0xFFFF789F
  .dword 0xFFFF7875
  .dword 0xFFFF784A
  .dword 0xFFFF781F
  .dword 0xFFFF77F5
  .dword 0xFFFF77CA
  .dword 0xFFFF77A0
  .dword 0xFFFF7775
  .dword 0xFFFF774B
  .dword 0xFFFF7720
  .dword 0xFFFF76F6
  .dword 0xFFFF76CB
  .dword 0xFFFF76A1
  .dword 0xFFFF7676
  .dword 0xFFFF764C
  .dword 0xFFFF7622
  .dword 0xFFFF75F7
  .dword 0xFFFF75CD
  .dword 0xFFFF75A3
  .dword 0xFFFF7578
  .dword 0xFFFF754E
  .dword 0xFFFF7524
  .dword 0xFFFF74FA
  .dword 0xFFFF74CF
  .dword 0xFFFF74A5
  .dword 0xFFFF747B
  .dword 0xFFFF7451
  .dword 0xFFFF7427
  .dword 0xFFFF73FD
  .dword 0xFFFF73D3
  .dword 0xFFFF73A9
  .dword 0xFFFF737F
  .dword 0xFFFF7355
  .dword 0xFFFF732B
  .dword 0xFFFF7301
  .dword 0xFFFF72D7
  .dword 0xFFFF72AD
  .dword 0xFFFF7283
  .dword 0xFFFF7259
  .dword 0xFFFF722F
  .dword 0xFFFF7205
  .dword 0xFFFF71DC
  .dword 0xFFFF71B2
  .dword 0xFFFF7188
  .dword 0xFFFF715E
  .dword 0xFFFF7135
  .dword 0xFFFF710B
  .dword 0xFFFF70E1
  .dword 0xFFFF70B7
  .dword 0xFFFF708E
  .dword 0xFFFF7064
  .dword 0xFFFF703B
  .dword 0xFFFF7011
  .dword 0xFFFF6FE7
  .dword 0xFFFF6FBE
  .dword 0xFFFF6F94
  .dword 0xFFFF6F6B
  .dword 0xFFFF6F41
  .dword 0xFFFF6F18
  .dword 0xFFFF6EEF
  .dword 0xFFFF6EC5
  .dword 0xFFFF6E9C
  .dword 0xFFFF6E72
  .dword 0xFFFF6E49
  .dword 0xFFFF6E20
  .dword 0xFFFF6DF6
  .dword 0xFFFF6DCD
  .dword 0xFFFF6DA4
  .dword 0xFFFF6D7B
  .dword 0xFFFF6D51
  .dword 0xFFFF6D28
  .dword 0xFFFF6CFF
  .dword 0xFFFF6CD6
  .dword 0xFFFF6CAD
  .dword 0xFFFF6C84
  .dword 0xFFFF6C5B
  .dword 0xFFFF6C32
  .dword 0xFFFF6C09
  .dword 0xFFFF6BE0
  .dword 0xFFFF6BB7
  .dword 0xFFFF6B8E
  .dword 0xFFFF6B65
  .dword 0xFFFF6B3C
  .dword 0xFFFF6B13
  .dword 0xFFFF6AEA
  .dword 0xFFFF6AC1
  .dword 0xFFFF6A98
  .dword 0xFFFF6A70
  .dword 0xFFFF6A47
  .dword 0xFFFF6A1E
  .dword 0xFFFF69F5
  .dword 0xFFFF69CD
  .dword 0xFFFF69A4
  .dword 0xFFFF697B
  .dword 0xFFFF6953
  .dword 0xFFFF692A
  .dword 0xFFFF6901
  .dword 0xFFFF68D9
  .dword 0xFFFF68B0
  .dword 0xFFFF6888
  .dword 0xFFFF685F
  .dword 0xFFFF6837
  .dword 0xFFFF680E
  .dword 0xFFFF67E6
  .dword 0xFFFF67BD
  .dword 0xFFFF6795
  .dword 0xFFFF676D
  .dword 0xFFFF6744
  .dword 0xFFFF671C
  .dword 0xFFFF66F4
  .dword 0xFFFF66CB
  .dword 0xFFFF66A3
  .dword 0xFFFF667B
  .dword 0xFFFF6653
  .dword 0xFFFF662A
  .dword 0xFFFF6602
  .dword 0xFFFF65DA
  .dword 0xFFFF65B2
  .dword 0xFFFF658A
  .dword 0xFFFF6562
  .dword 0xFFFF653A
  .dword 0xFFFF6512
  .dword 0xFFFF64EA
  .dword 0xFFFF64C2
  .dword 0xFFFF649A
  .dword 0xFFFF6472
  .dword 0xFFFF644A
  .dword 0xFFFF6422
  .dword 0xFFFF63FA
  .dword 0xFFFF63D2
  .dword 0xFFFF63AB
  .dword 0xFFFF6383
  .dword 0xFFFF635B
  .dword 0xFFFF6333
  .dword 0xFFFF630C
  .dword 0xFFFF62E4
  .dword 0xFFFF62BC
  .dword 0xFFFF6295
  .dword 0xFFFF626D
  .dword 0xFFFF6245
  .dword 0xFFFF621E
  .dword 0xFFFF61F6
  .dword 0xFFFF61CF
  .dword 0xFFFF61A7
  .dword 0xFFFF6180
  .dword 0xFFFF6158
  .dword 0xFFFF6131
  .dword 0xFFFF6109
  .dword 0xFFFF60E2
  .dword 0xFFFF60BB
  .dword 0xFFFF6093
  .dword 0xFFFF606C
  .dword 0xFFFF6045
  .dword 0xFFFF601D
  .dword 0xFFFF5FF6
  .dword 0xFFFF5FCF
  .dword 0xFFFF5FA8
  .dword 0xFFFF5F81
  .dword 0xFFFF5F59
  .dword 0xFFFF5F32
  .dword 0xFFFF5F0B
  .dword 0xFFFF5EE4
  .dword 0xFFFF5EBD
  .dword 0xFFFF5E96
  .dword 0xFFFF5E6F
  .dword 0xFFFF5E48
  .dword 0xFFFF5E21
  .dword 0xFFFF5DFA
  .dword 0xFFFF5DD3
  .dword 0xFFFF5DAC
  .dword 0xFFFF5D85
  .dword 0xFFFF5D5F
  .dword 0xFFFF5D38
  .dword 0xFFFF5D11
  .dword 0xFFFF5CEA
  .dword 0xFFFF5CC4
  .dword 0xFFFF5C9D
  .dword 0xFFFF5C76
  .dword 0xFFFF5C50
  .dword 0xFFFF5C29
  .dword 0xFFFF5C02
  .dword 0xFFFF5BDC
  .dword 0xFFFF5BB5
  .dword 0xFFFF5B8F
  .dword 0xFFFF5B68
  .dword 0xFFFF5B42
  .dword 0xFFFF5B1B
  .dword 0xFFFF5AF5
  .dword 0xFFFF5ACE
  .dword 0xFFFF5AA8
  .dword 0xFFFF5A82
  .dword 0xFFFF5A5B
  .dword 0xFFFF5A35
  .dword 0xFFFF5A0F
  .dword 0xFFFF59E8
  .dword 0xFFFF59C2
  .dword 0xFFFF599C
  .dword 0xFFFF5976
  .dword 0xFFFF5950
  .dword 0xFFFF5929
  .dword 0xFFFF5903
  .dword 0xFFFF58DD
  .dword 0xFFFF58B7
  .dword 0xFFFF5891
  .dword 0xFFFF586B
  .dword 0xFFFF5845
  .dword 0xFFFF581F
  .dword 0xFFFF57F9
  .dword 0xFFFF57D3
  .dword 0xFFFF57AD
  .dword 0xFFFF5788
  .dword 0xFFFF5762
  .dword 0xFFFF573C
  .dword 0xFFFF5716
  .dword 0xFFFF56F0
  .dword 0xFFFF56CB
  .dword 0xFFFF56A5
  .dword 0xFFFF567F
  .dword 0xFFFF565A
  .dword 0xFFFF5634
  .dword 0xFFFF560E
  .dword 0xFFFF55E9
  .dword 0xFFFF55C3
  .dword 0xFFFF559E
  .dword 0xFFFF5578
  .dword 0xFFFF5553
  .dword 0xFFFF552D
  .dword 0xFFFF5508
  .dword 0xFFFF54E2
  .dword 0xFFFF54BD
  .dword 0xFFFF5498
  .dword 0xFFFF5472
  .dword 0xFFFF544D
  .dword 0xFFFF5428
  .dword 0xFFFF5403
  .dword 0xFFFF53DD
  .dword 0xFFFF53B8
  .dword 0xFFFF5393
  .dword 0xFFFF536E
  .dword 0xFFFF5349
  .dword 0xFFFF5324
  .dword 0xFFFF52FF
  .dword 0xFFFF52DA
  .dword 0xFFFF52B5
  .dword 0xFFFF5290
  .dword 0xFFFF526B
  .dword 0xFFFF5246
  .dword 0xFFFF5221
  .dword 0xFFFF51FC
  .dword 0xFFFF51D7
  .dword 0xFFFF51B2
  .dword 0xFFFF518D
  .dword 0xFFFF5169
  .dword 0xFFFF5144
  .dword 0xFFFF511F
  .dword 0xFFFF50FA
  .dword 0xFFFF50D6
  .dword 0xFFFF50B1
  .dword 0xFFFF508D
  .dword 0xFFFF5068
  .dword 0xFFFF5043
  .dword 0xFFFF501F
  .dword 0xFFFF4FFA
  .dword 0xFFFF4FD6
  .dword 0xFFFF4FB1
  .dword 0xFFFF4F8D
  .dword 0xFFFF4F69
  .dword 0xFFFF4F44
  .dword 0xFFFF4F20
  .dword 0xFFFF4EFC
  .dword 0xFFFF4ED7
  .dword 0xFFFF4EB3
  .dword 0xFFFF4E8F
  .dword 0xFFFF4E6A
  .dword 0xFFFF4E46
  .dword 0xFFFF4E22
  .dword 0xFFFF4DFE
  .dword 0xFFFF4DDA
  .dword 0xFFFF4DB6
  .dword 0xFFFF4D92
  .dword 0xFFFF4D6E
  .dword 0xFFFF4D4A
  .dword 0xFFFF4D26
  .dword 0xFFFF4D02
  .dword 0xFFFF4CDE
  .dword 0xFFFF4CBA
  .dword 0xFFFF4C96
  .dword 0xFFFF4C72
  .dword 0xFFFF4C4E
  .dword 0xFFFF4C2B
  .dword 0xFFFF4C07
  .dword 0xFFFF4BE3
  .dword 0xFFFF4BBF
  .dword 0xFFFF4B9C
  .dword 0xFFFF4B78
  .dword 0xFFFF4B54
  .dword 0xFFFF4B31
  .dword 0xFFFF4B0D
  .dword 0xFFFF4AEA
  .dword 0xFFFF4AC6
  .dword 0xFFFF4AA3
  .dword 0xFFFF4A7F
  .dword 0xFFFF4A5C
  .dword 0xFFFF4A38
  .dword 0xFFFF4A15
  .dword 0xFFFF49F2
  .dword 0xFFFF49CE
  .dword 0xFFFF49AB
  .dword 0xFFFF4988
  .dword 0xFFFF4965
  .dword 0xFFFF4941
  .dword 0xFFFF491E
  .dword 0xFFFF48FB
  .dword 0xFFFF48D8
  .dword 0xFFFF48B5
  .dword 0xFFFF4892
  .dword 0xFFFF486F
  .dword 0xFFFF484C
  .dword 0xFFFF4829
  .dword 0xFFFF4806
  .dword 0xFFFF47E3
  .dword 0xFFFF47C0
  .dword 0xFFFF479D
  .dword 0xFFFF477A
  .dword 0xFFFF4757
  .dword 0xFFFF4734
  .dword 0xFFFF4712
  .dword 0xFFFF46EF
  .dword 0xFFFF46CC
  .dword 0xFFFF46AA
  .dword 0xFFFF4687
  .dword 0xFFFF4664
  .dword 0xFFFF4642
  .dword 0xFFFF461F
  .dword 0xFFFF45FD
  .dword 0xFFFF45DA
  .dword 0xFFFF45B8
  .dword 0xFFFF4595
  .dword 0xFFFF4573
  .dword 0xFFFF4550
  .dword 0xFFFF452E
  .dword 0xFFFF450C
  .dword 0xFFFF44E9
  .dword 0xFFFF44C7
  .dword 0xFFFF44A5
  .dword 0xFFFF4482
  .dword 0xFFFF4460
  .dword 0xFFFF443E
  .dword 0xFFFF441C
  .dword 0xFFFF43FA
  .dword 0xFFFF43D8
  .dword 0xFFFF43B6
  .dword 0xFFFF4394
  .dword 0xFFFF4371
  .dword 0xFFFF4350
  .dword 0xFFFF432E
  .dword 0xFFFF430C
  .dword 0xFFFF42EA
  .dword 0xFFFF42C8
  .dword 0xFFFF42A6
  .dword 0xFFFF4284
  .dword 0xFFFF4262
  .dword 0xFFFF4241
  .dword 0xFFFF421F
  .dword 0xFFFF41FD
  .dword 0xFFFF41DC
  .dword 0xFFFF41BA
  .dword 0xFFFF4198
  .dword 0xFFFF4177
  .dword 0xFFFF4155
  .dword 0xFFFF4134
  .dword 0xFFFF4112
  .dword 0xFFFF40F1
  .dword 0xFFFF40CF
  .dword 0xFFFF40AE
  .dword 0xFFFF408C
  .dword 0xFFFF406B
  .dword 0xFFFF404A
  .dword 0xFFFF4028
  .dword 0xFFFF4007
  .dword 0xFFFF3FE6
  .dword 0xFFFF3FC5
  .dword 0xFFFF3FA4
  .dword 0xFFFF3F82
  .dword 0xFFFF3F61
  .dword 0xFFFF3F40
  .dword 0xFFFF3F1F
  .dword 0xFFFF3EFE
  .dword 0xFFFF3EDD
  .dword 0xFFFF3EBC
  .dword 0xFFFF3E9B
  .dword 0xFFFF3E7A
  .dword 0xFFFF3E59
  .dword 0xFFFF3E38
  .dword 0xFFFF3E18
  .dword 0xFFFF3DF7
  .dword 0xFFFF3DD6
  .dword 0xFFFF3DB5
  .dword 0xFFFF3D95
  .dword 0xFFFF3D74
  .dword 0xFFFF3D53
  .dword 0xFFFF3D33
  .dword 0xFFFF3D12
  .dword 0xFFFF3CF1
  .dword 0xFFFF3CD1
  .dword 0xFFFF3CB0
  .dword 0xFFFF3C90
  .dword 0xFFFF3C6F
  .dword 0xFFFF3C4F
  .dword 0xFFFF3C2F
  .dword 0xFFFF3C0E
  .dword 0xFFFF3BEE
  .dword 0xFFFF3BCE
  .dword 0xFFFF3BAD
  .dword 0xFFFF3B8D
  .dword 0xFFFF3B6D
  .dword 0xFFFF3B4D
  .dword 0xFFFF3B2D
  .dword 0xFFFF3B0C
  .dword 0xFFFF3AEC
  .dword 0xFFFF3ACC
  .dword 0xFFFF3AAC
  .dword 0xFFFF3A8C
  .dword 0xFFFF3A6C
  .dword 0xFFFF3A4C
  .dword 0xFFFF3A2C
  .dword 0xFFFF3A0D
  .dword 0xFFFF39ED
  .dword 0xFFFF39CD
  .dword 0xFFFF39AD
  .dword 0xFFFF398D
  .dword 0xFFFF396E
  .dword 0xFFFF394E
  .dword 0xFFFF392E
  .dword 0xFFFF390F
  .dword 0xFFFF38EF
  .dword 0xFFFF38CF
  .dword 0xFFFF38B0
  .dword 0xFFFF3890
  .dword 0xFFFF3871
  .dword 0xFFFF3851
  .dword 0xFFFF3832
  .dword 0xFFFF3812
  .dword 0xFFFF37F3
  .dword 0xFFFF37D4
  .dword 0xFFFF37B4
  .dword 0xFFFF3795
  .dword 0xFFFF3776
  .dword 0xFFFF3757
  .dword 0xFFFF3737
  .dword 0xFFFF3718
  .dword 0xFFFF36F9
  .dword 0xFFFF36DA
  .dword 0xFFFF36BB
  .dword 0xFFFF369C
  .dword 0xFFFF367D
  .dword 0xFFFF365E
  .dword 0xFFFF363F
  .dword 0xFFFF3620
  .dword 0xFFFF3601
  .dword 0xFFFF35E2
  .dword 0xFFFF35C3
  .dword 0xFFFF35A5
  .dword 0xFFFF3586
  .dword 0xFFFF3567
  .dword 0xFFFF3548
  .dword 0xFFFF352A
  .dword 0xFFFF350B
  .dword 0xFFFF34EC
  .dword 0xFFFF34CE
  .dword 0xFFFF34AF
  .dword 0xFFFF3491
  .dword 0xFFFF3472
  .dword 0xFFFF3454
  .dword 0xFFFF3435
  .dword 0xFFFF3417
  .dword 0xFFFF33F9
  .dword 0xFFFF33DA
  .dword 0xFFFF33BC
  .dword 0xFFFF339E
  .dword 0xFFFF337F
  .dword 0xFFFF3361
  .dword 0xFFFF3343
  .dword 0xFFFF3325
  .dword 0xFFFF3307
  .dword 0xFFFF32E9
  .dword 0xFFFF32CA
  .dword 0xFFFF32AC
  .dword 0xFFFF328E
  .dword 0xFFFF3270
  .dword 0xFFFF3253
  .dword 0xFFFF3235
  .dword 0xFFFF3217
  .dword 0xFFFF31F9
  .dword 0xFFFF31DB
  .dword 0xFFFF31BD
  .dword 0xFFFF31A0
  .dword 0xFFFF3182
  .dword 0xFFFF3164
  .dword 0xFFFF3146
  .dword 0xFFFF3129
  .dword 0xFFFF310B
  .dword 0xFFFF30EE
  .dword 0xFFFF30D0
  .dword 0xFFFF30B3
  .dword 0xFFFF3095
  .dword 0xFFFF3078
  .dword 0xFFFF305A
  .dword 0xFFFF303D
  .dword 0xFFFF3020
  .dword 0xFFFF3002
  .dword 0xFFFF2FE5
  .dword 0xFFFF2FC8
  .dword 0xFFFF2FAA
  .dword 0xFFFF2F8D
  .dword 0xFFFF2F70
  .dword 0xFFFF2F53
  .dword 0xFFFF2F36
  .dword 0xFFFF2F19
  .dword 0xFFFF2EFC
  .dword 0xFFFF2EDF
  .dword 0xFFFF2EC2
  .dword 0xFFFF2EA5
  .dword 0xFFFF2E88
  .dword 0xFFFF2E6B
  .dword 0xFFFF2E4E
  .dword 0xFFFF2E31
  .dword 0xFFFF2E15
  .dword 0xFFFF2DF8
  .dword 0xFFFF2DDB
  .dword 0xFFFF2DBE
  .dword 0xFFFF2DA2
  .dword 0xFFFF2D85
  .dword 0xFFFF2D69
  .dword 0xFFFF2D4C
  .dword 0xFFFF2D2F
  .dword 0xFFFF2D13
  .dword 0xFFFF2CF6
  .dword 0xFFFF2CDA
  .dword 0xFFFF2CBE
  .dword 0xFFFF2CA1
  .dword 0xFFFF2C85
  .dword 0xFFFF2C69
  .dword 0xFFFF2C4C
  .dword 0xFFFF2C30
  .dword 0xFFFF2C14
  .dword 0xFFFF2BF8
  .dword 0xFFFF2BDC
  .dword 0xFFFF2BBF
  .dword 0xFFFF2BA3
  .dword 0xFFFF2B87
  .dword 0xFFFF2B6B
  .dword 0xFFFF2B4F
  .dword 0xFFFF2B33
  .dword 0xFFFF2B17
  .dword 0xFFFF2AFB
  .dword 0xFFFF2AE0
  .dword 0xFFFF2AC4
  .dword 0xFFFF2AA8
  .dword 0xFFFF2A8C
  .dword 0xFFFF2A70
  .dword 0xFFFF2A55
  .dword 0xFFFF2A39
  .dword 0xFFFF2A1D
  .dword 0xFFFF2A02
  .dword 0xFFFF29E6
  .dword 0xFFFF29CB
  .dword 0xFFFF29AF
  .dword 0xFFFF2994
  .dword 0xFFFF2978
  .dword 0xFFFF295D
  .dword 0xFFFF2942
  .dword 0xFFFF2926
  .dword 0xFFFF290B
  .dword 0xFFFF28F0
  .dword 0xFFFF28D4
  .dword 0xFFFF28B9
  .dword 0xFFFF289E
  .dword 0xFFFF2883
  .dword 0xFFFF2868
  .dword 0xFFFF284D
  .dword 0xFFFF2832
  .dword 0xFFFF2816
  .dword 0xFFFF27FC
  .dword 0xFFFF27E1
  .dword 0xFFFF27C6
  .dword 0xFFFF27AB
  .dword 0xFFFF2790
  .dword 0xFFFF2775
  .dword 0xFFFF275A
  .dword 0xFFFF273F
  .dword 0xFFFF2725
  .dword 0xFFFF270A
  .dword 0xFFFF26EF
  .dword 0xFFFF26D5
  .dword 0xFFFF26BA
  .dword 0xFFFF26A0
  .dword 0xFFFF2685
  .dword 0xFFFF266B
  .dword 0xFFFF2650
  .dword 0xFFFF2636
  .dword 0xFFFF261B
  .dword 0xFFFF2601
  .dword 0xFFFF25E7
  .dword 0xFFFF25CC
  .dword 0xFFFF25B2
  .dword 0xFFFF2598
  .dword 0xFFFF257E
  .dword 0xFFFF2563
  .dword 0xFFFF2549
  .dword 0xFFFF252F
  .dword 0xFFFF2515
  .dword 0xFFFF24FB
  .dword 0xFFFF24E1
  .dword 0xFFFF24C7
  .dword 0xFFFF24AD
  .dword 0xFFFF2493
  .dword 0xFFFF2479
  .dword 0xFFFF245F
  .dword 0xFFFF2446
  .dword 0xFFFF242C
  .dword 0xFFFF2412
  .dword 0xFFFF23F8
  .dword 0xFFFF23DF
  .dword 0xFFFF23C5
  .dword 0xFFFF23AC
  .dword 0xFFFF2392
  .dword 0xFFFF2378
  .dword 0xFFFF235F
  .dword 0xFFFF2345
  .dword 0xFFFF232C
  .dword 0xFFFF2313
  .dword 0xFFFF22F9
  .dword 0xFFFF22E0
  .dword 0xFFFF22C7
  .dword 0xFFFF22AD
  .dword 0xFFFF2294
  .dword 0xFFFF227B
  .dword 0xFFFF2262
  .dword 0xFFFF2248
  .dword 0xFFFF222F
  .dword 0xFFFF2216
  .dword 0xFFFF21FD
  .dword 0xFFFF21E4
  .dword 0xFFFF21CB
  .dword 0xFFFF21B2
  .dword 0xFFFF2199
  .dword 0xFFFF2181
  .dword 0xFFFF2168
  .dword 0xFFFF214F
  .dword 0xFFFF2136
  .dword 0xFFFF211D
  .dword 0xFFFF2105
  .dword 0xFFFF20EC
  .dword 0xFFFF20D3
  .dword 0xFFFF20BB
  .dword 0xFFFF20A2
  .dword 0xFFFF208A
  .dword 0xFFFF2071
  .dword 0xFFFF2059
  .dword 0xFFFF2040
  .dword 0xFFFF2028
  .dword 0xFFFF200F
  .dword 0xFFFF1FF7
  .dword 0xFFFF1FDF
  .dword 0xFFFF1FC6
  .dword 0xFFFF1FAE
  .dword 0xFFFF1F96
  .dword 0xFFFF1F7E
  .dword 0xFFFF1F66
  .dword 0xFFFF1F4E
  .dword 0xFFFF1F36
  .dword 0xFFFF1F1E
  .dword 0xFFFF1F06
  .dword 0xFFFF1EEE
  .dword 0xFFFF1ED6
  .dword 0xFFFF1EBE
  .dword 0xFFFF1EA6
  .dword 0xFFFF1E8E
  .dword 0xFFFF1E76
  .dword 0xFFFF1E5E
  .dword 0xFFFF1E47
  .dword 0xFFFF1E2F
  .dword 0xFFFF1E17
  .dword 0xFFFF1E00
  .dword 0xFFFF1DE8
  .dword 0xFFFF1DD1
  .dword 0xFFFF1DB9
  .dword 0xFFFF1DA2
  .dword 0xFFFF1D8A
  .dword 0xFFFF1D73
  .dword 0xFFFF1D5B
  .dword 0xFFFF1D44
  .dword 0xFFFF1D2D
  .dword 0xFFFF1D15
  .dword 0xFFFF1CFE
  .dword 0xFFFF1CE7
  .dword 0xFFFF1CD0
  .dword 0xFFFF1CB9
  .dword 0xFFFF1CA1
  .dword 0xFFFF1C8A
  .dword 0xFFFF1C73
  .dword 0xFFFF1C5C
  .dword 0xFFFF1C45
  .dword 0xFFFF1C2E
  .dword 0xFFFF1C17
  .dword 0xFFFF1C01
  .dword 0xFFFF1BEA
  .dword 0xFFFF1BD3
  .dword 0xFFFF1BBC
  .dword 0xFFFF1BA5
  .dword 0xFFFF1B8F
  .dword 0xFFFF1B78
  .dword 0xFFFF1B61
  .dword 0xFFFF1B4B
  .dword 0xFFFF1B34
  .dword 0xFFFF1B1E
  .dword 0xFFFF1B07
  .dword 0xFFFF1AF1
  .dword 0xFFFF1ADA
  .dword 0xFFFF1AC4
  .dword 0xFFFF1AAE
  .dword 0xFFFF1A97
  .dword 0xFFFF1A81
  .dword 0xFFFF1A6B
  .dword 0xFFFF1A55
  .dword 0xFFFF1A3E
  .dword 0xFFFF1A28
  .dword 0xFFFF1A12
  .dword 0xFFFF19FC
  .dword 0xFFFF19E6
  .dword 0xFFFF19D0
  .dword 0xFFFF19BA
  .dword 0xFFFF19A4
  .dword 0xFFFF198E
  .dword 0xFFFF1978
  .dword 0xFFFF1962
  .dword 0xFFFF194D
  .dword 0xFFFF1937
  .dword 0xFFFF1921
  .dword 0xFFFF190B
  .dword 0xFFFF18F6
  .dword 0xFFFF18E0
  .dword 0xFFFF18CA
  .dword 0xFFFF18B5
  .dword 0xFFFF189F
  .dword 0xFFFF188A
  .dword 0xFFFF1874
  .dword 0xFFFF185F
  .dword 0xFFFF184A
  .dword 0xFFFF1834
  .dword 0xFFFF181F
  .dword 0xFFFF180A
  .dword 0xFFFF17F4
  .dword 0xFFFF17DF
  .dword 0xFFFF17CA
  .dword 0xFFFF17B5
  .dword 0xFFFF17A0
  .dword 0xFFFF178B
  .dword 0xFFFF1776
  .dword 0xFFFF1761
  .dword 0xFFFF174C
  .dword 0xFFFF1737
  .dword 0xFFFF1722
  .dword 0xFFFF170D
  .dword 0xFFFF16F8
  .dword 0xFFFF16E3
  .dword 0xFFFF16CF
  .dword 0xFFFF16BA
  .dword 0xFFFF16A5
  .dword 0xFFFF1691
  .dword 0xFFFF167C
  .dword 0xFFFF1667
  .dword 0xFFFF1653
  .dword 0xFFFF163E
  .dword 0xFFFF162A
  .dword 0xFFFF1615
  .dword 0xFFFF1601
  .dword 0xFFFF15ED
  .dword 0xFFFF15D8
  .dword 0xFFFF15C4
  .dword 0xFFFF15B0
  .dword 0xFFFF159C
  .dword 0xFFFF1587
  .dword 0xFFFF1573
  .dword 0xFFFF155F
  .dword 0xFFFF154B
  .dword 0xFFFF1537
  .dword 0xFFFF1523
  .dword 0xFFFF150F
  .dword 0xFFFF14FB
  .dword 0xFFFF14E7
  .dword 0xFFFF14D3
  .dword 0xFFFF14BF
  .dword 0xFFFF14AC
  .dword 0xFFFF1498
  .dword 0xFFFF1484
  .dword 0xFFFF1470
  .dword 0xFFFF145D
  .dword 0xFFFF1449
  .dword 0xFFFF1435
  .dword 0xFFFF1422
  .dword 0xFFFF140E
  .dword 0xFFFF13FB
  .dword 0xFFFF13E7
  .dword 0xFFFF13D4
  .dword 0xFFFF13C1
  .dword 0xFFFF13AD
  .dword 0xFFFF139A
  .dword 0xFFFF1387
  .dword 0xFFFF1374
  .dword 0xFFFF1360
  .dword 0xFFFF134D
  .dword 0xFFFF133A
  .dword 0xFFFF1327
  .dword 0xFFFF1314
  .dword 0xFFFF1301
  .dword 0xFFFF12EE
  .dword 0xFFFF12DB
  .dword 0xFFFF12C8
  .dword 0xFFFF12B5
  .dword 0xFFFF12A2
  .dword 0xFFFF128F
  .dword 0xFFFF127D
  .dword 0xFFFF126A
  .dword 0xFFFF1257
  .dword 0xFFFF1245
  .dword 0xFFFF1232
  .dword 0xFFFF121F
  .dword 0xFFFF120D
  .dword 0xFFFF11FA
  .dword 0xFFFF11E8
  .dword 0xFFFF11D5
  .dword 0xFFFF11C3
  .dword 0xFFFF11B1
  .dword 0xFFFF119E
  .dword 0xFFFF118C
  .dword 0xFFFF117A
  .dword 0xFFFF1167
  .dword 0xFFFF1155
  .dword 0xFFFF1143
  .dword 0xFFFF1131
  .dword 0xFFFF111F
  .dword 0xFFFF110D
  .dword 0xFFFF10FB
  .dword 0xFFFF10E9
  .dword 0xFFFF10D7
  .dword 0xFFFF10C5
  .dword 0xFFFF10B3
  .dword 0xFFFF10A1
  .dword 0xFFFF108F
  .dword 0xFFFF107E
  .dword 0xFFFF106C
  .dword 0xFFFF105A
  .dword 0xFFFF1049
  .dword 0xFFFF1037
  .dword 0xFFFF1025
  .dword 0xFFFF1014
  .dword 0xFFFF1002
  .dword 0xFFFF0FF1
  .dword 0xFFFF0FDF
  .dword 0xFFFF0FCE
  .dword 0xFFFF0FBD
  .dword 0xFFFF0FAB
  .dword 0xFFFF0F9A
  .dword 0xFFFF0F89
  .dword 0xFFFF0F77
  .dword 0xFFFF0F66
  .dword 0xFFFF0F55
  .dword 0xFFFF0F44
  .dword 0xFFFF0F33
  .dword 0xFFFF0F22
  .dword 0xFFFF0F11
  .dword 0xFFFF0F00
  .dword 0xFFFF0EEF
  .dword 0xFFFF0EDE
  .dword 0xFFFF0ECD
  .dword 0xFFFF0EBC
  .dword 0xFFFF0EAC
  .dword 0xFFFF0E9B
  .dword 0xFFFF0E8A
  .dword 0xFFFF0E79
  .dword 0xFFFF0E69
  .dword 0xFFFF0E58
  .dword 0xFFFF0E48
  .dword 0xFFFF0E37
  .dword 0xFFFF0E27
  .dword 0xFFFF0E16
  .dword 0xFFFF0E06
  .dword 0xFFFF0DF5
  .dword 0xFFFF0DE5
  .dword 0xFFFF0DD5
  .dword 0xFFFF0DC4
  .dword 0xFFFF0DB4
  .dword 0xFFFF0DA4
  .dword 0xFFFF0D94
  .dword 0xFFFF0D84
  .dword 0xFFFF0D74
  .dword 0xFFFF0D64
  .dword 0xFFFF0D53
  .dword 0xFFFF0D43
  .dword 0xFFFF0D34
  .dword 0xFFFF0D24
  .dword 0xFFFF0D14
  .dword 0xFFFF0D04
  .dword 0xFFFF0CF4
  .dword 0xFFFF0CE4
  .dword 0xFFFF0CD5
  .dword 0xFFFF0CC5
  .dword 0xFFFF0CB5
  .dword 0xFFFF0CA6
  .dword 0xFFFF0C96
  .dword 0xFFFF0C87
  .dword 0xFFFF0C77
  .dword 0xFFFF0C68
  .dword 0xFFFF0C58
  .dword 0xFFFF0C49
  .dword 0xFFFF0C39
  .dword 0xFFFF0C2A
  .dword 0xFFFF0C1B
  .dword 0xFFFF0C0B
  .dword 0xFFFF0BFC
  .dword 0xFFFF0BED
  .dword 0xFFFF0BDE
  .dword 0xFFFF0BCF
  .dword 0xFFFF0BC0
  .dword 0xFFFF0BB1
  .dword 0xFFFF0BA2
  .dword 0xFFFF0B93
  .dword 0xFFFF0B84
  .dword 0xFFFF0B75
  .dword 0xFFFF0B66
  .dword 0xFFFF0B57
  .dword 0xFFFF0B48
  .dword 0xFFFF0B3A
  .dword 0xFFFF0B2B
  .dword 0xFFFF0B1C
  .dword 0xFFFF0B0E
  .dword 0xFFFF0AFF
  .dword 0xFFFF0AF1
  .dword 0xFFFF0AE2
  .dword 0xFFFF0AD4
  .dword 0xFFFF0AC5
  .dword 0xFFFF0AB7
  .dword 0xFFFF0AA8
  .dword 0xFFFF0A9A
  .dword 0xFFFF0A8C
  .dword 0xFFFF0A7E
  .dword 0xFFFF0A6F
  .dword 0xFFFF0A61
  .dword 0xFFFF0A53
  .dword 0xFFFF0A45
  .dword 0xFFFF0A37
  .dword 0xFFFF0A29
  .dword 0xFFFF0A1B
  .dword 0xFFFF0A0D
  .dword 0xFFFF09FF
  .dword 0xFFFF09F1
  .dword 0xFFFF09E3
  .dword 0xFFFF09D5
  .dword 0xFFFF09C8
  .dword 0xFFFF09BA
  .dword 0xFFFF09AC
  .dword 0xFFFF099E
  .dword 0xFFFF0991
  .dword 0xFFFF0983
  .dword 0xFFFF0976
  .dword 0xFFFF0968
  .dword 0xFFFF095B
  .dword 0xFFFF094D
  .dword 0xFFFF0940
  .dword 0xFFFF0932
  .dword 0xFFFF0925
  .dword 0xFFFF0918
  .dword 0xFFFF090B
  .dword 0xFFFF08FD
  .dword 0xFFFF08F0
  .dword 0xFFFF08E3
  .dword 0xFFFF08D6
  .dword 0xFFFF08C9
  .dword 0xFFFF08BC
  .dword 0xFFFF08AF
  .dword 0xFFFF08A2
  .dword 0xFFFF0895
  .dword 0xFFFF0888
  .dword 0xFFFF087B
  .dword 0xFFFF086E
  .dword 0xFFFF0862
  .dword 0xFFFF0855
  .dword 0xFFFF0848
  .dword 0xFFFF083B
  .dword 0xFFFF082F
  .dword 0xFFFF0822
  .dword 0xFFFF0816
  .dword 0xFFFF0809
  .dword 0xFFFF07FD
  .dword 0xFFFF07F0
  .dword 0xFFFF07E4
  .dword 0xFFFF07D8
  .dword 0xFFFF07CB
  .dword 0xFFFF07BF
  .dword 0xFFFF07B3
  .dword 0xFFFF07A6
  .dword 0xFFFF079A
  .dword 0xFFFF078E
  .dword 0xFFFF0782
  .dword 0xFFFF0776
  .dword 0xFFFF076A
  .dword 0xFFFF075E
  .dword 0xFFFF0752
  .dword 0xFFFF0746
  .dword 0xFFFF073A
  .dword 0xFFFF072E
  .dword 0xFFFF0723
  .dword 0xFFFF0717
  .dword 0xFFFF070B
  .dword 0xFFFF06FF
  .dword 0xFFFF06F4
  .dword 0xFFFF06E8
  .dword 0xFFFF06DD
  .dword 0xFFFF06D1
  .dword 0xFFFF06C5
  .dword 0xFFFF06BA
  .dword 0xFFFF06AF
  .dword 0xFFFF06A3
  .dword 0xFFFF0698
  .dword 0xFFFF068D
  .dword 0xFFFF0681
  .dword 0xFFFF0676
  .dword 0xFFFF066B
  .dword 0xFFFF0660
  .dword 0xFFFF0655
  .dword 0xFFFF0649
  .dword 0xFFFF063E
  .dword 0xFFFF0633
  .dword 0xFFFF0628
  .dword 0xFFFF061D
  .dword 0xFFFF0613
  .dword 0xFFFF0608
  .dword 0xFFFF05FD
  .dword 0xFFFF05F2
  .dword 0xFFFF05E7
  .dword 0xFFFF05DD
  .dword 0xFFFF05D2
  .dword 0xFFFF05C7
  .dword 0xFFFF05BD
  .dword 0xFFFF05B2
  .dword 0xFFFF05A8
  .dword 0xFFFF059D
  .dword 0xFFFF0593
  .dword 0xFFFF0588
  .dword 0xFFFF057E
  .dword 0xFFFF0574
  .dword 0xFFFF0569
  .dword 0xFFFF055F
  .dword 0xFFFF0555
  .dword 0xFFFF054B
  .dword 0xFFFF0540
  .dword 0xFFFF0536
  .dword 0xFFFF052C
  .dword 0xFFFF0522
  .dword 0xFFFF0518
  .dword 0xFFFF050E
  .dword 0xFFFF0504
  .dword 0xFFFF04FB
  .dword 0xFFFF04F1
  .dword 0xFFFF04E7
  .dword 0xFFFF04DD
  .dword 0xFFFF04D3
  .dword 0xFFFF04CA
  .dword 0xFFFF04C0
  .dword 0xFFFF04B6
  .dword 0xFFFF04AD
  .dword 0xFFFF04A3
  .dword 0xFFFF049A
  .dword 0xFFFF0490
  .dword 0xFFFF0487
  .dword 0xFFFF047D
  .dword 0xFFFF0474
  .dword 0xFFFF046B
  .dword 0xFFFF0462
  .dword 0xFFFF0458
  .dword 0xFFFF044F
  .dword 0xFFFF0446
  .dword 0xFFFF043D
  .dword 0xFFFF0434
  .dword 0xFFFF042B
  .dword 0xFFFF0422
  .dword 0xFFFF0419
  .dword 0xFFFF0410
  .dword 0xFFFF0407
  .dword 0xFFFF03FE
  .dword 0xFFFF03F5
  .dword 0xFFFF03EC
  .dword 0xFFFF03E4
  .dword 0xFFFF03DB
  .dword 0xFFFF03D2
  .dword 0xFFFF03CA
  .dword 0xFFFF03C1
  .dword 0xFFFF03B8
  .dword 0xFFFF03B0
  .dword 0xFFFF03A7
  .dword 0xFFFF039F
  .dword 0xFFFF0397
  .dword 0xFFFF038E
  .dword 0xFFFF0386
  .dword 0xFFFF037E
  .dword 0xFFFF0375
  .dword 0xFFFF036D
  .dword 0xFFFF0365
  .dword 0xFFFF035D
  .dword 0xFFFF0355
  .dword 0xFFFF034D
  .dword 0xFFFF0345
  .dword 0xFFFF033D
  .dword 0xFFFF0335
  .dword 0xFFFF032D
  .dword 0xFFFF0325
  .dword 0xFFFF031D
  .dword 0xFFFF0315
  .dword 0xFFFF030E
  .dword 0xFFFF0306
  .dword 0xFFFF02FE
  .dword 0xFFFF02F7
  .dword 0xFFFF02EF
  .dword 0xFFFF02E7
  .dword 0xFFFF02E0
  .dword 0xFFFF02D8
  .dword 0xFFFF02D1
  .dword 0xFFFF02CA
  .dword 0xFFFF02C2
  .dword 0xFFFF02BB
  .dword 0xFFFF02B4
  .dword 0xFFFF02AC
  .dword 0xFFFF02A5
  .dword 0xFFFF029E
  .dword 0xFFFF0297
  .dword 0xFFFF0290
  .dword 0xFFFF0289
  .dword 0xFFFF0281
  .dword 0xFFFF027A
  .dword 0xFFFF0274
  .dword 0xFFFF026D
  .dword 0xFFFF0266
  .dword 0xFFFF025F
  .dword 0xFFFF0258
  .dword 0xFFFF0251
  .dword 0xFFFF024B
  .dword 0xFFFF0244
  .dword 0xFFFF023D
  .dword 0xFFFF0237
  .dword 0xFFFF0230
  .dword 0xFFFF022A
  .dword 0xFFFF0223
  .dword 0xFFFF021D
  .dword 0xFFFF0216
  .dword 0xFFFF0210
  .dword 0xFFFF0209
  .dword 0xFFFF0203
  .dword 0xFFFF01FD
  .dword 0xFFFF01F7
  .dword 0xFFFF01F0
  .dword 0xFFFF01EA
  .dword 0xFFFF01E4
  .dword 0xFFFF01DE
  .dword 0xFFFF01D8
  .dword 0xFFFF01D2
  .dword 0xFFFF01CC
  .dword 0xFFFF01C6
  .dword 0xFFFF01C0
  .dword 0xFFFF01BA
  .dword 0xFFFF01B5
  .dword 0xFFFF01AF
  .dword 0xFFFF01A9
  .dword 0xFFFF01A3
  .dword 0xFFFF019E
  .dword 0xFFFF0198
  .dword 0xFFFF0193
  .dword 0xFFFF018D
  .dword 0xFFFF0188
  .dword 0xFFFF0182
  .dword 0xFFFF017D
  .dword 0xFFFF0177
  .dword 0xFFFF0172
  .dword 0xFFFF016D
  .dword 0xFFFF0167
  .dword 0xFFFF0162
  .dword 0xFFFF015D
  .dword 0xFFFF0158
  .dword 0xFFFF0153
  .dword 0xFFFF014E
  .dword 0xFFFF0149
  .dword 0xFFFF0144
  .dword 0xFFFF013F
  .dword 0xFFFF013A
  .dword 0xFFFF0135
  .dword 0xFFFF0130
  .dword 0xFFFF012B
  .dword 0xFFFF0126
  .dword 0xFFFF0122
  .dword 0xFFFF011D
  .dword 0xFFFF0118
  .dword 0xFFFF0114
  .dword 0xFFFF010F
  .dword 0xFFFF010A
  .dword 0xFFFF0106
  .dword 0xFFFF0101
  .dword 0xFFFF00FD
  .dword 0xFFFF00F9
  .dword 0xFFFF00F4
  .dword 0xFFFF00F0
  .dword 0xFFFF00EC
  .dword 0xFFFF00E7
  .dword 0xFFFF00E3
  .dword 0xFFFF00DF
  .dword 0xFFFF00DB
  .dword 0xFFFF00D7
  .dword 0xFFFF00D3
  .dword 0xFFFF00CF
  .dword 0xFFFF00CB
  .dword 0xFFFF00C7
  .dword 0xFFFF00C3
  .dword 0xFFFF00BF
  .dword 0xFFFF00BB
  .dword 0xFFFF00B8
  .dword 0xFFFF00B4
  .dword 0xFFFF00B0
  .dword 0xFFFF00AD
  .dword 0xFFFF00A9
  .dword 0xFFFF00A5
  .dword 0xFFFF00A2
  .dword 0xFFFF009E
  .dword 0xFFFF009B
  .dword 0xFFFF0097
  .dword 0xFFFF0094
  .dword 0xFFFF0091
  .dword 0xFFFF008D
  .dword 0xFFFF008A
  .dword 0xFFFF0087
  .dword 0xFFFF0084
  .dword 0xFFFF0080
  .dword 0xFFFF007D
  .dword 0xFFFF007A
  .dword 0xFFFF0077
  .dword 0xFFFF0074
  .dword 0xFFFF0071
  .dword 0xFFFF006E
  .dword 0xFFFF006B
  .dword 0xFFFF0069
  .dword 0xFFFF0066
  .dword 0xFFFF0063
  .dword 0xFFFF0060
  .dword 0xFFFF005E
  .dword 0xFFFF005B
  .dword 0xFFFF0058
  .dword 0xFFFF0056
  .dword 0xFFFF0053
  .dword 0xFFFF0051
  .dword 0xFFFF004E
  .dword 0xFFFF004C
  .dword 0xFFFF0049
  .dword 0xFFFF0047
  .dword 0xFFFF0045
  .dword 0xFFFF0042
  .dword 0xFFFF0040
  .dword 0xFFFF003E
  .dword 0xFFFF003C
  .dword 0xFFFF003A
  .dword 0xFFFF0038
  .dword 0xFFFF0036
  .dword 0xFFFF0034
  .dword 0xFFFF0032
  .dword 0xFFFF0030
  .dword 0xFFFF002E
  .dword 0xFFFF002C
  .dword 0xFFFF002A
  .dword 0xFFFF0028
  .dword 0xFFFF0027
  .dword 0xFFFF0025
  .dword 0xFFFF0023
  .dword 0xFFFF0022
  .dword 0xFFFF0020
  .dword 0xFFFF001F
  .dword 0xFFFF001D
  .dword 0xFFFF001C
  .dword 0xFFFF001A
  .dword 0xFFFF0019
  .dword 0xFFFF0017
  .dword 0xFFFF0016
  .dword 0xFFFF0015
  .dword 0xFFFF0014
  .dword 0xFFFF0012
  .dword 0xFFFF0011
  .dword 0xFFFF0010
  .dword 0xFFFF000F
  .dword 0xFFFF000E
  .dword 0xFFFF000D
  .dword 0xFFFF000C
  .dword 0xFFFF000B
  .dword 0xFFFF000A
  .dword 0xFFFF0009
  .dword 0xFFFF0009
  .dword 0xFFFF0008
  .dword 0xFFFF0007
  .dword 0xFFFF0006
  .dword 0xFFFF0006
  .dword 0xFFFF0005
  .dword 0xFFFF0005
  .dword 0xFFFF0004
  .dword 0xFFFF0004
  .dword 0xFFFF0003
  .dword 0xFFFF0003
  .dword 0xFFFF0002
  .dword 0xFFFF0002
  .dword 0xFFFF0002
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0001
  .dword 0xFFFF0002
  .dword 0xFFFF0002
  .dword 0xFFFF0002
  .dword 0xFFFF0003
  .dword 0xFFFF0003
  .dword 0xFFFF0004
  .dword 0xFFFF0004
  .dword 0xFFFF0005
  .dword 0xFFFF0005
  .dword 0xFFFF0006
  .dword 0xFFFF0006
  .dword 0xFFFF0007
  .dword 0xFFFF0008
  .dword 0xFFFF0009
  .dword 0xFFFF0009
  .dword 0xFFFF000A
  .dword 0xFFFF000B
  .dword 0xFFFF000C
  .dword 0xFFFF000D
  .dword 0xFFFF000E
  .dword 0xFFFF000F
  .dword 0xFFFF0010
  .dword 0xFFFF0011
  .dword 0xFFFF0012
  .dword 0xFFFF0014
  .dword 0xFFFF0015
  .dword 0xFFFF0016
  .dword 0xFFFF0017
  .dword 0xFFFF0019
  .dword 0xFFFF001A
  .dword 0xFFFF001C
  .dword 0xFFFF001D
  .dword 0xFFFF001F
  .dword 0xFFFF0020
  .dword 0xFFFF0022
  .dword 0xFFFF0023
  .dword 0xFFFF0025
  .dword 0xFFFF0027
  .dword 0xFFFF0028
  .dword 0xFFFF002A
  .dword 0xFFFF002C
  .dword 0xFFFF002E
  .dword 0xFFFF0030
  .dword 0xFFFF0032
  .dword 0xFFFF0034
  .dword 0xFFFF0036
  .dword 0xFFFF0038
  .dword 0xFFFF003A
  .dword 0xFFFF003C
  .dword 0xFFFF003E
  .dword 0xFFFF0040
  .dword 0xFFFF0042
  .dword 0xFFFF0045
  .dword 0xFFFF0047
  .dword 0xFFFF0049
  .dword 0xFFFF004C
  .dword 0xFFFF004E
  .dword 0xFFFF0051
  .dword 0xFFFF0053
  .dword 0xFFFF0056
  .dword 0xFFFF0058
  .dword 0xFFFF005B
  .dword 0xFFFF005E
  .dword 0xFFFF0060
  .dword 0xFFFF0063
  .dword 0xFFFF0066
  .dword 0xFFFF0069
  .dword 0xFFFF006B
  .dword 0xFFFF006E
  .dword 0xFFFF0071
  .dword 0xFFFF0074
  .dword 0xFFFF0077
  .dword 0xFFFF007A
  .dword 0xFFFF007D
  .dword 0xFFFF0080
  .dword 0xFFFF0084
  .dword 0xFFFF0087
  .dword 0xFFFF008A
  .dword 0xFFFF008D
  .dword 0xFFFF0091
  .dword 0xFFFF0094
  .dword 0xFFFF0097
  .dword 0xFFFF009B
  .dword 0xFFFF009E
  .dword 0xFFFF00A2
  .dword 0xFFFF00A5
  .dword 0xFFFF00A9
  .dword 0xFFFF00AD
  .dword 0xFFFF00B0
  .dword 0xFFFF00B4
  .dword 0xFFFF00B8
  .dword 0xFFFF00BB
  .dword 0xFFFF00BF
  .dword 0xFFFF00C3
  .dword 0xFFFF00C7
  .dword 0xFFFF00CB
  .dword 0xFFFF00CF
  .dword 0xFFFF00D3
  .dword 0xFFFF00D7
  .dword 0xFFFF00DB
  .dword 0xFFFF00DF
  .dword 0xFFFF00E3
  .dword 0xFFFF00E7
  .dword 0xFFFF00EC
  .dword 0xFFFF00F0
  .dword 0xFFFF00F4
  .dword 0xFFFF00F9
  .dword 0xFFFF00FD
  .dword 0xFFFF0101
  .dword 0xFFFF0106
  .dword 0xFFFF010A
  .dword 0xFFFF010F
  .dword 0xFFFF0114
  .dword 0xFFFF0118
  .dword 0xFFFF011D
  .dword 0xFFFF0122
  .dword 0xFFFF0126
  .dword 0xFFFF012B
  .dword 0xFFFF0130
  .dword 0xFFFF0135
  .dword 0xFFFF013A
  .dword 0xFFFF013F
  .dword 0xFFFF0144
  .dword 0xFFFF0149
  .dword 0xFFFF014E
  .dword 0xFFFF0153
  .dword 0xFFFF0158
  .dword 0xFFFF015D
  .dword 0xFFFF0162
  .dword 0xFFFF0167
  .dword 0xFFFF016D
  .dword 0xFFFF0172
  .dword 0xFFFF0177
  .dword 0xFFFF017D
  .dword 0xFFFF0182
  .dword 0xFFFF0188
  .dword 0xFFFF018D
  .dword 0xFFFF0193
  .dword 0xFFFF0198
  .dword 0xFFFF019E
  .dword 0xFFFF01A3
  .dword 0xFFFF01A9
  .dword 0xFFFF01AF
  .dword 0xFFFF01B5
  .dword 0xFFFF01BA
  .dword 0xFFFF01C0
  .dword 0xFFFF01C6
  .dword 0xFFFF01CC
  .dword 0xFFFF01D2
  .dword 0xFFFF01D8
  .dword 0xFFFF01DE
  .dword 0xFFFF01E4
  .dword 0xFFFF01EA
  .dword 0xFFFF01F0
  .dword 0xFFFF01F7
  .dword 0xFFFF01FD
  .dword 0xFFFF0203
  .dword 0xFFFF0209
  .dword 0xFFFF0210
  .dword 0xFFFF0216
  .dword 0xFFFF021D
  .dword 0xFFFF0223
  .dword 0xFFFF022A
  .dword 0xFFFF0230
  .dword 0xFFFF0237
  .dword 0xFFFF023D
  .dword 0xFFFF0244
  .dword 0xFFFF024B
  .dword 0xFFFF0251
  .dword 0xFFFF0258
  .dword 0xFFFF025F
  .dword 0xFFFF0266
  .dword 0xFFFF026D
  .dword 0xFFFF0274
  .dword 0xFFFF027A
  .dword 0xFFFF0281
  .dword 0xFFFF0289
  .dword 0xFFFF0290
  .dword 0xFFFF0297
  .dword 0xFFFF029E
  .dword 0xFFFF02A5
  .dword 0xFFFF02AC
  .dword 0xFFFF02B4
  .dword 0xFFFF02BB
  .dword 0xFFFF02C2
  .dword 0xFFFF02CA
  .dword 0xFFFF02D1
  .dword 0xFFFF02D8
  .dword 0xFFFF02E0
  .dword 0xFFFF02E7
  .dword 0xFFFF02EF
  .dword 0xFFFF02F7
  .dword 0xFFFF02FE
  .dword 0xFFFF0306
  .dword 0xFFFF030E
  .dword 0xFFFF0315
  .dword 0xFFFF031D
  .dword 0xFFFF0325
  .dword 0xFFFF032D
  .dword 0xFFFF0335
  .dword 0xFFFF033D
  .dword 0xFFFF0345
  .dword 0xFFFF034D
  .dword 0xFFFF0355
  .dword 0xFFFF035D
  .dword 0xFFFF0365
  .dword 0xFFFF036D
  .dword 0xFFFF0375
  .dword 0xFFFF037E
  .dword 0xFFFF0386
  .dword 0xFFFF038E
  .dword 0xFFFF0397
  .dword 0xFFFF039F
  .dword 0xFFFF03A7
  .dword 0xFFFF03B0
  .dword 0xFFFF03B8
  .dword 0xFFFF03C1
  .dword 0xFFFF03CA
  .dword 0xFFFF03D2
  .dword 0xFFFF03DB
  .dword 0xFFFF03E4
  .dword 0xFFFF03EC
  .dword 0xFFFF03F5
  .dword 0xFFFF03FE
  .dword 0xFFFF0407
  .dword 0xFFFF0410
  .dword 0xFFFF0419
  .dword 0xFFFF0422
  .dword 0xFFFF042B
  .dword 0xFFFF0434
  .dword 0xFFFF043D
  .dword 0xFFFF0446
  .dword 0xFFFF044F
  .dword 0xFFFF0458
  .dword 0xFFFF0462
  .dword 0xFFFF046B
  .dword 0xFFFF0474
  .dword 0xFFFF047D
  .dword 0xFFFF0487
  .dword 0xFFFF0490
  .dword 0xFFFF049A
  .dword 0xFFFF04A3
  .dword 0xFFFF04AD
  .dword 0xFFFF04B6
  .dword 0xFFFF04C0
  .dword 0xFFFF04CA
  .dword 0xFFFF04D3
  .dword 0xFFFF04DD
  .dword 0xFFFF04E7
  .dword 0xFFFF04F1
  .dword 0xFFFF04FB
  .dword 0xFFFF0504
  .dword 0xFFFF050E
  .dword 0xFFFF0518
  .dword 0xFFFF0522
  .dword 0xFFFF052C
  .dword 0xFFFF0536
  .dword 0xFFFF0540
  .dword 0xFFFF054B
  .dword 0xFFFF0555
  .dword 0xFFFF055F
  .dword 0xFFFF0569
  .dword 0xFFFF0574
  .dword 0xFFFF057E
  .dword 0xFFFF0588
  .dword 0xFFFF0593
  .dword 0xFFFF059D
  .dword 0xFFFF05A8
  .dword 0xFFFF05B2
  .dword 0xFFFF05BD
  .dword 0xFFFF05C7
  .dword 0xFFFF05D2
  .dword 0xFFFF05DD
  .dword 0xFFFF05E7
  .dword 0xFFFF05F2
  .dword 0xFFFF05FD
  .dword 0xFFFF0608
  .dword 0xFFFF0613
  .dword 0xFFFF061D
  .dword 0xFFFF0628
  .dword 0xFFFF0633
  .dword 0xFFFF063E
  .dword 0xFFFF0649
  .dword 0xFFFF0655
  .dword 0xFFFF0660
  .dword 0xFFFF066B
  .dword 0xFFFF0676
  .dword 0xFFFF0681
  .dword 0xFFFF068D
  .dword 0xFFFF0698
  .dword 0xFFFF06A3
  .dword 0xFFFF06AF
  .dword 0xFFFF06BA
  .dword 0xFFFF06C5
  .dword 0xFFFF06D1
  .dword 0xFFFF06DD
  .dword 0xFFFF06E8
  .dword 0xFFFF06F4
  .dword 0xFFFF06FF
  .dword 0xFFFF070B
  .dword 0xFFFF0717
  .dword 0xFFFF0723
  .dword 0xFFFF072E
  .dword 0xFFFF073A
  .dword 0xFFFF0746
  .dword 0xFFFF0752
  .dword 0xFFFF075E
  .dword 0xFFFF076A
  .dword 0xFFFF0776
  .dword 0xFFFF0782
  .dword 0xFFFF078E
  .dword 0xFFFF079A
  .dword 0xFFFF07A6
  .dword 0xFFFF07B3
  .dword 0xFFFF07BF
  .dword 0xFFFF07CB
  .dword 0xFFFF07D8
  .dword 0xFFFF07E4
  .dword 0xFFFF07F0
  .dword 0xFFFF07FD
  .dword 0xFFFF0809
  .dword 0xFFFF0816
  .dword 0xFFFF0822
  .dword 0xFFFF082F
  .dword 0xFFFF083B
  .dword 0xFFFF0848
  .dword 0xFFFF0855
  .dword 0xFFFF0862
  .dword 0xFFFF086E
  .dword 0xFFFF087B
  .dword 0xFFFF0888
  .dword 0xFFFF0895
  .dword 0xFFFF08A2
  .dword 0xFFFF08AF
  .dword 0xFFFF08BC
  .dword 0xFFFF08C9
  .dword 0xFFFF08D6
  .dword 0xFFFF08E3
  .dword 0xFFFF08F0
  .dword 0xFFFF08FD
  .dword 0xFFFF090B
  .dword 0xFFFF0918
  .dword 0xFFFF0925
  .dword 0xFFFF0932
  .dword 0xFFFF0940
  .dword 0xFFFF094D
  .dword 0xFFFF095B
  .dword 0xFFFF0968
  .dword 0xFFFF0976
  .dword 0xFFFF0983
  .dword 0xFFFF0991
  .dword 0xFFFF099E
  .dword 0xFFFF09AC
  .dword 0xFFFF09BA
  .dword 0xFFFF09C8
  .dword 0xFFFF09D5
  .dword 0xFFFF09E3
  .dword 0xFFFF09F1
  .dword 0xFFFF09FF
  .dword 0xFFFF0A0D
  .dword 0xFFFF0A1B
  .dword 0xFFFF0A29
  .dword 0xFFFF0A37
  .dword 0xFFFF0A45
  .dword 0xFFFF0A53
  .dword 0xFFFF0A61
  .dword 0xFFFF0A6F
  .dword 0xFFFF0A7E
  .dword 0xFFFF0A8C
  .dword 0xFFFF0A9A
  .dword 0xFFFF0AA8
  .dword 0xFFFF0AB7
  .dword 0xFFFF0AC5
  .dword 0xFFFF0AD4
  .dword 0xFFFF0AE2
  .dword 0xFFFF0AF1
  .dword 0xFFFF0AFF
  .dword 0xFFFF0B0E
  .dword 0xFFFF0B1C
  .dword 0xFFFF0B2B
  .dword 0xFFFF0B3A
  .dword 0xFFFF0B48
  .dword 0xFFFF0B57
  .dword 0xFFFF0B66
  .dword 0xFFFF0B75
  .dword 0xFFFF0B84
  .dword 0xFFFF0B93
  .dword 0xFFFF0BA2
  .dword 0xFFFF0BB1
  .dword 0xFFFF0BC0
  .dword 0xFFFF0BCF
  .dword 0xFFFF0BDE
  .dword 0xFFFF0BED
  .dword 0xFFFF0BFC
  .dword 0xFFFF0C0B
  .dword 0xFFFF0C1B
  .dword 0xFFFF0C2A
  .dword 0xFFFF0C39
  .dword 0xFFFF0C49
  .dword 0xFFFF0C58
  .dword 0xFFFF0C68
  .dword 0xFFFF0C77
  .dword 0xFFFF0C87
  .dword 0xFFFF0C96
  .dword 0xFFFF0CA6
  .dword 0xFFFF0CB5
  .dword 0xFFFF0CC5
  .dword 0xFFFF0CD5
  .dword 0xFFFF0CE4
  .dword 0xFFFF0CF4
  .dword 0xFFFF0D04
  .dword 0xFFFF0D14
  .dword 0xFFFF0D24
  .dword 0xFFFF0D34
  .dword 0xFFFF0D43
  .dword 0xFFFF0D53
  .dword 0xFFFF0D64
  .dword 0xFFFF0D74
  .dword 0xFFFF0D84
  .dword 0xFFFF0D94
  .dword 0xFFFF0DA4
  .dword 0xFFFF0DB4
  .dword 0xFFFF0DC4
  .dword 0xFFFF0DD5
  .dword 0xFFFF0DE5
  .dword 0xFFFF0DF5
  .dword 0xFFFF0E06
  .dword 0xFFFF0E16
  .dword 0xFFFF0E27
  .dword 0xFFFF0E37
  .dword 0xFFFF0E48
  .dword 0xFFFF0E58
  .dword 0xFFFF0E69
  .dword 0xFFFF0E79
  .dword 0xFFFF0E8A
  .dword 0xFFFF0E9B
  .dword 0xFFFF0EAC
  .dword 0xFFFF0EBC
  .dword 0xFFFF0ECD
  .dword 0xFFFF0EDE
  .dword 0xFFFF0EEF
  .dword 0xFFFF0F00
  .dword 0xFFFF0F11
  .dword 0xFFFF0F22
  .dword 0xFFFF0F33
  .dword 0xFFFF0F44
  .dword 0xFFFF0F55
  .dword 0xFFFF0F66
  .dword 0xFFFF0F77
  .dword 0xFFFF0F89
  .dword 0xFFFF0F9A
  .dword 0xFFFF0FAB
  .dword 0xFFFF0FBD
  .dword 0xFFFF0FCE
  .dword 0xFFFF0FDF
  .dword 0xFFFF0FF1
  .dword 0xFFFF1002
  .dword 0xFFFF1014
  .dword 0xFFFF1025
  .dword 0xFFFF1037
  .dword 0xFFFF1049
  .dword 0xFFFF105A
  .dword 0xFFFF106C
  .dword 0xFFFF107E
  .dword 0xFFFF108F
  .dword 0xFFFF10A1
  .dword 0xFFFF10B3
  .dword 0xFFFF10C5
  .dword 0xFFFF10D7
  .dword 0xFFFF10E9
  .dword 0xFFFF10FB
  .dword 0xFFFF110D
  .dword 0xFFFF111F
  .dword 0xFFFF1131
  .dword 0xFFFF1143
  .dword 0xFFFF1155
  .dword 0xFFFF1167
  .dword 0xFFFF117A
  .dword 0xFFFF118C
  .dword 0xFFFF119E
  .dword 0xFFFF11B1
  .dword 0xFFFF11C3
  .dword 0xFFFF11D5
  .dword 0xFFFF11E8
  .dword 0xFFFF11FA
  .dword 0xFFFF120D
  .dword 0xFFFF121F
  .dword 0xFFFF1232
  .dword 0xFFFF1245
  .dword 0xFFFF1257
  .dword 0xFFFF126A
  .dword 0xFFFF127D
  .dword 0xFFFF128F
  .dword 0xFFFF12A2
  .dword 0xFFFF12B5
  .dword 0xFFFF12C8
  .dword 0xFFFF12DB
  .dword 0xFFFF12EE
  .dword 0xFFFF1301
  .dword 0xFFFF1314
  .dword 0xFFFF1327
  .dword 0xFFFF133A
  .dword 0xFFFF134D
  .dword 0xFFFF1360
  .dword 0xFFFF1374
  .dword 0xFFFF1387
  .dword 0xFFFF139A
  .dword 0xFFFF13AD
  .dword 0xFFFF13C1
  .dword 0xFFFF13D4
  .dword 0xFFFF13E7
  .dword 0xFFFF13FB
  .dword 0xFFFF140E
  .dword 0xFFFF1422
  .dword 0xFFFF1435
  .dword 0xFFFF1449
  .dword 0xFFFF145D
  .dword 0xFFFF1470
  .dword 0xFFFF1484
  .dword 0xFFFF1498
  .dword 0xFFFF14AC
  .dword 0xFFFF14BF
  .dword 0xFFFF14D3
  .dword 0xFFFF14E7
  .dword 0xFFFF14FB
  .dword 0xFFFF150F
  .dword 0xFFFF1523
  .dword 0xFFFF1537
  .dword 0xFFFF154B
  .dword 0xFFFF155F
  .dword 0xFFFF1573
  .dword 0xFFFF1587
  .dword 0xFFFF159C
  .dword 0xFFFF15B0
  .dword 0xFFFF15C4
  .dword 0xFFFF15D8
  .dword 0xFFFF15ED
  .dword 0xFFFF1601
  .dword 0xFFFF1615
  .dword 0xFFFF162A
  .dword 0xFFFF163E
  .dword 0xFFFF1653
  .dword 0xFFFF1667
  .dword 0xFFFF167C
  .dword 0xFFFF1691
  .dword 0xFFFF16A5
  .dword 0xFFFF16BA
  .dword 0xFFFF16CF
  .dword 0xFFFF16E3
  .dword 0xFFFF16F8
  .dword 0xFFFF170D
  .dword 0xFFFF1722
  .dword 0xFFFF1737
  .dword 0xFFFF174C
  .dword 0xFFFF1761
  .dword 0xFFFF1776
  .dword 0xFFFF178B
  .dword 0xFFFF17A0
  .dword 0xFFFF17B5
  .dword 0xFFFF17CA
  .dword 0xFFFF17DF
  .dword 0xFFFF17F4
  .dword 0xFFFF180A
  .dword 0xFFFF181F
  .dword 0xFFFF1834
  .dword 0xFFFF184A
  .dword 0xFFFF185F
  .dword 0xFFFF1874
  .dword 0xFFFF188A
  .dword 0xFFFF189F
  .dword 0xFFFF18B5
  .dword 0xFFFF18CB
  .dword 0xFFFF18E0
  .dword 0xFFFF18F6
  .dword 0xFFFF190B
  .dword 0xFFFF1921
  .dword 0xFFFF1937
  .dword 0xFFFF194D
  .dword 0xFFFF1962
  .dword 0xFFFF1978
  .dword 0xFFFF198E
  .dword 0xFFFF19A4
  .dword 0xFFFF19BA
  .dword 0xFFFF19D0
  .dword 0xFFFF19E6
  .dword 0xFFFF19FC
  .dword 0xFFFF1A12
  .dword 0xFFFF1A28
  .dword 0xFFFF1A3E
  .dword 0xFFFF1A55
  .dword 0xFFFF1A6B
  .dword 0xFFFF1A81
  .dword 0xFFFF1A97
  .dword 0xFFFF1AAE
  .dword 0xFFFF1AC4
  .dword 0xFFFF1ADA
  .dword 0xFFFF1AF1
  .dword 0xFFFF1B07
  .dword 0xFFFF1B1E
  .dword 0xFFFF1B34
  .dword 0xFFFF1B4B
  .dword 0xFFFF1B61
  .dword 0xFFFF1B78
  .dword 0xFFFF1B8F
  .dword 0xFFFF1BA5
  .dword 0xFFFF1BBC
  .dword 0xFFFF1BD3
  .dword 0xFFFF1BEA
  .dword 0xFFFF1C01
  .dword 0xFFFF1C17
  .dword 0xFFFF1C2E
  .dword 0xFFFF1C45
  .dword 0xFFFF1C5C
  .dword 0xFFFF1C73
  .dword 0xFFFF1C8A
  .dword 0xFFFF1CA1
  .dword 0xFFFF1CB9
  .dword 0xFFFF1CD0
  .dword 0xFFFF1CE7
  .dword 0xFFFF1CFE
  .dword 0xFFFF1D15
  .dword 0xFFFF1D2D
  .dword 0xFFFF1D44
  .dword 0xFFFF1D5B
  .dword 0xFFFF1D73
  .dword 0xFFFF1D8A
  .dword 0xFFFF1DA2
  .dword 0xFFFF1DB9
  .dword 0xFFFF1DD1
  .dword 0xFFFF1DE8
  .dword 0xFFFF1E00
  .dword 0xFFFF1E17
  .dword 0xFFFF1E2F
  .dword 0xFFFF1E47
  .dword 0xFFFF1E5E
  .dword 0xFFFF1E76
  .dword 0xFFFF1E8E
  .dword 0xFFFF1EA6
  .dword 0xFFFF1EBE
  .dword 0xFFFF1ED6
  .dword 0xFFFF1EEE
  .dword 0xFFFF1F06
  .dword 0xFFFF1F1E
  .dword 0xFFFF1F36
  .dword 0xFFFF1F4E
  .dword 0xFFFF1F66
  .dword 0xFFFF1F7E
  .dword 0xFFFF1F96
  .dword 0xFFFF1FAE
  .dword 0xFFFF1FC6
  .dword 0xFFFF1FDF
  .dword 0xFFFF1FF7
  .dword 0xFFFF200F
  .dword 0xFFFF2028
  .dword 0xFFFF2040
  .dword 0xFFFF2059
  .dword 0xFFFF2071
  .dword 0xFFFF208A
  .dword 0xFFFF20A2
  .dword 0xFFFF20BB
  .dword 0xFFFF20D3
  .dword 0xFFFF20EC
  .dword 0xFFFF2105
  .dword 0xFFFF211D
  .dword 0xFFFF2136
  .dword 0xFFFF214F
  .dword 0xFFFF2168
  .dword 0xFFFF2181
  .dword 0xFFFF2199
  .dword 0xFFFF21B2
  .dword 0xFFFF21CB
  .dword 0xFFFF21E4
  .dword 0xFFFF21FD
  .dword 0xFFFF2216
  .dword 0xFFFF222F
  .dword 0xFFFF2248
  .dword 0xFFFF2262
  .dword 0xFFFF227B
  .dword 0xFFFF2294
  .dword 0xFFFF22AD
  .dword 0xFFFF22C7
  .dword 0xFFFF22E0
  .dword 0xFFFF22F9
  .dword 0xFFFF2313
  .dword 0xFFFF232C
  .dword 0xFFFF2345
  .dword 0xFFFF235F
  .dword 0xFFFF2378
  .dword 0xFFFF2392
  .dword 0xFFFF23AC
  .dword 0xFFFF23C5
  .dword 0xFFFF23DF
  .dword 0xFFFF23F8
  .dword 0xFFFF2412
  .dword 0xFFFF242C
  .dword 0xFFFF2446
  .dword 0xFFFF245F
  .dword 0xFFFF2479
  .dword 0xFFFF2493
  .dword 0xFFFF24AD
  .dword 0xFFFF24C7
  .dword 0xFFFF24E1
  .dword 0xFFFF24FB
  .dword 0xFFFF2515
  .dword 0xFFFF252F
  .dword 0xFFFF2549
  .dword 0xFFFF2563
  .dword 0xFFFF257E
  .dword 0xFFFF2598
  .dword 0xFFFF25B2
  .dword 0xFFFF25CC
  .dword 0xFFFF25E7
  .dword 0xFFFF2601
  .dword 0xFFFF261B
  .dword 0xFFFF2636
  .dword 0xFFFF2650
  .dword 0xFFFF266B
  .dword 0xFFFF2685
  .dword 0xFFFF26A0
  .dword 0xFFFF26BA
  .dword 0xFFFF26D5
  .dword 0xFFFF26EF
  .dword 0xFFFF270A
  .dword 0xFFFF2725
  .dword 0xFFFF273F
  .dword 0xFFFF275A
  .dword 0xFFFF2775
  .dword 0xFFFF2790
  .dword 0xFFFF27AB
  .dword 0xFFFF27C6
  .dword 0xFFFF27E1
  .dword 0xFFFF27FC
  .dword 0xFFFF2816
  .dword 0xFFFF2832
  .dword 0xFFFF284D
  .dword 0xFFFF2868
  .dword 0xFFFF2883
  .dword 0xFFFF289E
  .dword 0xFFFF28B9
  .dword 0xFFFF28D4
  .dword 0xFFFF28F0
  .dword 0xFFFF290B
  .dword 0xFFFF2926
  .dword 0xFFFF2942
  .dword 0xFFFF295D
  .dword 0xFFFF2978
  .dword 0xFFFF2994
  .dword 0xFFFF29AF
  .dword 0xFFFF29CB
  .dword 0xFFFF29E6
  .dword 0xFFFF2A02
  .dword 0xFFFF2A1D
  .dword 0xFFFF2A39
  .dword 0xFFFF2A55
  .dword 0xFFFF2A70
  .dword 0xFFFF2A8C
  .dword 0xFFFF2AA8
  .dword 0xFFFF2AC4
  .dword 0xFFFF2AE0
  .dword 0xFFFF2AFB
  .dword 0xFFFF2B17
  .dword 0xFFFF2B33
  .dword 0xFFFF2B4F
  .dword 0xFFFF2B6B
  .dword 0xFFFF2B87
  .dword 0xFFFF2BA3
  .dword 0xFFFF2BBF
  .dword 0xFFFF2BDC
  .dword 0xFFFF2BF8
  .dword 0xFFFF2C14
  .dword 0xFFFF2C30
  .dword 0xFFFF2C4C
  .dword 0xFFFF2C69
  .dword 0xFFFF2C85
  .dword 0xFFFF2CA1
  .dword 0xFFFF2CBE
  .dword 0xFFFF2CDA
  .dword 0xFFFF2CF6
  .dword 0xFFFF2D13
  .dword 0xFFFF2D2F
  .dword 0xFFFF2D4C
  .dword 0xFFFF2D69
  .dword 0xFFFF2D85
  .dword 0xFFFF2DA2
  .dword 0xFFFF2DBE
  .dword 0xFFFF2DDB
  .dword 0xFFFF2DF8
  .dword 0xFFFF2E15
  .dword 0xFFFF2E31
  .dword 0xFFFF2E4E
  .dword 0xFFFF2E6B
  .dword 0xFFFF2E88
  .dword 0xFFFF2EA5
  .dword 0xFFFF2EC2
  .dword 0xFFFF2EDF
  .dword 0xFFFF2EFC
  .dword 0xFFFF2F19
  .dword 0xFFFF2F36
  .dword 0xFFFF2F53
  .dword 0xFFFF2F70
  .dword 0xFFFF2F8D
  .dword 0xFFFF2FAA
  .dword 0xFFFF2FC8
  .dword 0xFFFF2FE5
  .dword 0xFFFF3002
  .dword 0xFFFF3020
  .dword 0xFFFF303D
  .dword 0xFFFF305A
  .dword 0xFFFF3078
  .dword 0xFFFF3095
  .dword 0xFFFF30B3
  .dword 0xFFFF30D0
  .dword 0xFFFF30EE
  .dword 0xFFFF310B
  .dword 0xFFFF3129
  .dword 0xFFFF3146
  .dword 0xFFFF3164
  .dword 0xFFFF3182
  .dword 0xFFFF31A0
  .dword 0xFFFF31BD
  .dword 0xFFFF31DB
  .dword 0xFFFF31F9
  .dword 0xFFFF3217
  .dword 0xFFFF3235
  .dword 0xFFFF3253
  .dword 0xFFFF3270
  .dword 0xFFFF328E
  .dword 0xFFFF32AC
  .dword 0xFFFF32CA
  .dword 0xFFFF32E9
  .dword 0xFFFF3307
  .dword 0xFFFF3325
  .dword 0xFFFF3343
  .dword 0xFFFF3361
  .dword 0xFFFF337F
  .dword 0xFFFF339E
  .dword 0xFFFF33BC
  .dword 0xFFFF33DA
  .dword 0xFFFF33F9
  .dword 0xFFFF3417
  .dword 0xFFFF3435
  .dword 0xFFFF3454
  .dword 0xFFFF3472
  .dword 0xFFFF3491
  .dword 0xFFFF34AF
  .dword 0xFFFF34CE
  .dword 0xFFFF34EC
  .dword 0xFFFF350B
  .dword 0xFFFF352A
  .dword 0xFFFF3548
  .dword 0xFFFF3567
  .dword 0xFFFF3586
  .dword 0xFFFF35A5
  .dword 0xFFFF35C3
  .dword 0xFFFF35E2
  .dword 0xFFFF3601
  .dword 0xFFFF3620
  .dword 0xFFFF363F
  .dword 0xFFFF365E
  .dword 0xFFFF367D
  .dword 0xFFFF369C
  .dword 0xFFFF36BB
  .dword 0xFFFF36DA
  .dword 0xFFFF36F9
  .dword 0xFFFF3718
  .dword 0xFFFF3737
  .dword 0xFFFF3757
  .dword 0xFFFF3776
  .dword 0xFFFF3795
  .dword 0xFFFF37B4
  .dword 0xFFFF37D4
  .dword 0xFFFF37F3
  .dword 0xFFFF3812
  .dword 0xFFFF3832
  .dword 0xFFFF3851
  .dword 0xFFFF3871
  .dword 0xFFFF3890
  .dword 0xFFFF38B0
  .dword 0xFFFF38CF
  .dword 0xFFFF38EF
  .dword 0xFFFF390F
  .dword 0xFFFF392E
  .dword 0xFFFF394E
  .dword 0xFFFF396E
  .dword 0xFFFF398D
  .dword 0xFFFF39AD
  .dword 0xFFFF39CD
  .dword 0xFFFF39ED
  .dword 0xFFFF3A0D
  .dword 0xFFFF3A2C
  .dword 0xFFFF3A4C
  .dword 0xFFFF3A6C
  .dword 0xFFFF3A8C
  .dword 0xFFFF3AAC
  .dword 0xFFFF3ACC
  .dword 0xFFFF3AEC
  .dword 0xFFFF3B0C
  .dword 0xFFFF3B2D
  .dword 0xFFFF3B4D
  .dword 0xFFFF3B6D
  .dword 0xFFFF3B8D
  .dword 0xFFFF3BAD
  .dword 0xFFFF3BCE
  .dword 0xFFFF3BEE
  .dword 0xFFFF3C0E
  .dword 0xFFFF3C2F
  .dword 0xFFFF3C4F
  .dword 0xFFFF3C6F
  .dword 0xFFFF3C90
  .dword 0xFFFF3CB0
  .dword 0xFFFF3CD1
  .dword 0xFFFF3CF1
  .dword 0xFFFF3D12
  .dword 0xFFFF3D33
  .dword 0xFFFF3D53
  .dword 0xFFFF3D74
  .dword 0xFFFF3D95
  .dword 0xFFFF3DB5
  .dword 0xFFFF3DD6
  .dword 0xFFFF3DF7
  .dword 0xFFFF3E18
  .dword 0xFFFF3E38
  .dword 0xFFFF3E59
  .dword 0xFFFF3E7A
  .dword 0xFFFF3E9B
  .dword 0xFFFF3EBC
  .dword 0xFFFF3EDD
  .dword 0xFFFF3EFE
  .dword 0xFFFF3F1F
  .dword 0xFFFF3F40
  .dword 0xFFFF3F61
  .dword 0xFFFF3F82
  .dword 0xFFFF3FA4
  .dword 0xFFFF3FC5
  .dword 0xFFFF3FE6
  .dword 0xFFFF4007
  .dword 0xFFFF4028
  .dword 0xFFFF404A
  .dword 0xFFFF406B
  .dword 0xFFFF408C
  .dword 0xFFFF40AE
  .dword 0xFFFF40CF
  .dword 0xFFFF40F1
  .dword 0xFFFF4112
  .dword 0xFFFF4134
  .dword 0xFFFF4155
  .dword 0xFFFF4177
  .dword 0xFFFF4198
  .dword 0xFFFF41BA
  .dword 0xFFFF41DC
  .dword 0xFFFF41FD
  .dword 0xFFFF421F
  .dword 0xFFFF4241
  .dword 0xFFFF4262
  .dword 0xFFFF4284
  .dword 0xFFFF42A6
  .dword 0xFFFF42C8
  .dword 0xFFFF42EA
  .dword 0xFFFF430C
  .dword 0xFFFF432E
  .dword 0xFFFF434F
  .dword 0xFFFF4371
  .dword 0xFFFF4393
  .dword 0xFFFF43B6
  .dword 0xFFFF43D8
  .dword 0xFFFF43FA
  .dword 0xFFFF441C
  .dword 0xFFFF443E
  .dword 0xFFFF4460
  .dword 0xFFFF4482
  .dword 0xFFFF44A5
  .dword 0xFFFF44C7
  .dword 0xFFFF44E9
  .dword 0xFFFF450C
  .dword 0xFFFF452E
  .dword 0xFFFF4550
  .dword 0xFFFF4573
  .dword 0xFFFF4595
  .dword 0xFFFF45B8
  .dword 0xFFFF45DA
  .dword 0xFFFF45FD
  .dword 0xFFFF461F
  .dword 0xFFFF4642
  .dword 0xFFFF4664
  .dword 0xFFFF4687
  .dword 0xFFFF46AA
  .dword 0xFFFF46CC
  .dword 0xFFFF46EF
  .dword 0xFFFF4712
  .dword 0xFFFF4735
  .dword 0xFFFF4757
  .dword 0xFFFF477A
  .dword 0xFFFF479D
  .dword 0xFFFF47C0
  .dword 0xFFFF47E3
  .dword 0xFFFF4806
  .dword 0xFFFF4829
  .dword 0xFFFF484C
  .dword 0xFFFF486F
  .dword 0xFFFF4892
  .dword 0xFFFF48B5
  .dword 0xFFFF48D8
  .dword 0xFFFF48FB
  .dword 0xFFFF491E
  .dword 0xFFFF4941
  .dword 0xFFFF4965
  .dword 0xFFFF4988
  .dword 0xFFFF49AB
  .dword 0xFFFF49CE
  .dword 0xFFFF49F2
  .dword 0xFFFF4A15
  .dword 0xFFFF4A38
  .dword 0xFFFF4A5C
  .dword 0xFFFF4A7F
  .dword 0xFFFF4AA3
  .dword 0xFFFF4AC6
  .dword 0xFFFF4AEA
  .dword 0xFFFF4B0D
  .dword 0xFFFF4B31
  .dword 0xFFFF4B55
  .dword 0xFFFF4B78
  .dword 0xFFFF4B9C
  .dword 0xFFFF4BBF
  .dword 0xFFFF4BE3
  .dword 0xFFFF4C07
  .dword 0xFFFF4C2B
  .dword 0xFFFF4C4E
  .dword 0xFFFF4C72
  .dword 0xFFFF4C96
  .dword 0xFFFF4CBA
  .dword 0xFFFF4CDE
  .dword 0xFFFF4D02
  .dword 0xFFFF4D26
  .dword 0xFFFF4D4A
  .dword 0xFFFF4D6E
  .dword 0xFFFF4D92
  .dword 0xFFFF4DB6
  .dword 0xFFFF4DDA
  .dword 0xFFFF4DFE
  .dword 0xFFFF4E22
  .dword 0xFFFF4E46
  .dword 0xFFFF4E6A
  .dword 0xFFFF4E8F
  .dword 0xFFFF4EB3
  .dword 0xFFFF4ED7
  .dword 0xFFFF4EFC
  .dword 0xFFFF4F20
  .dword 0xFFFF4F44
  .dword 0xFFFF4F69
  .dword 0xFFFF4F8D
  .dword 0xFFFF4FB1
  .dword 0xFFFF4FD6
  .dword 0xFFFF4FFA
  .dword 0xFFFF501F
  .dword 0xFFFF5043
  .dword 0xFFFF5068
  .dword 0xFFFF508D
  .dword 0xFFFF50B1
  .dword 0xFFFF50D6
  .dword 0xFFFF50FA
  .dword 0xFFFF511F
  .dword 0xFFFF5144
  .dword 0xFFFF5169
  .dword 0xFFFF518D
  .dword 0xFFFF51B2
  .dword 0xFFFF51D7
  .dword 0xFFFF51FC
  .dword 0xFFFF5221
  .dword 0xFFFF5246
  .dword 0xFFFF526B
  .dword 0xFFFF5290
  .dword 0xFFFF52B5
  .dword 0xFFFF52DA
  .dword 0xFFFF52FF
  .dword 0xFFFF5324
  .dword 0xFFFF5349
  .dword 0xFFFF536E
  .dword 0xFFFF5393
  .dword 0xFFFF53B8
  .dword 0xFFFF53DD
  .dword 0xFFFF5403
  .dword 0xFFFF5428
  .dword 0xFFFF544D
  .dword 0xFFFF5472
  .dword 0xFFFF5498
  .dword 0xFFFF54BD
  .dword 0xFFFF54E2
  .dword 0xFFFF5508
  .dword 0xFFFF552D
  .dword 0xFFFF5553
  .dword 0xFFFF5578
  .dword 0xFFFF559E
  .dword 0xFFFF55C3
  .dword 0xFFFF55E9
  .dword 0xFFFF560E
  .dword 0xFFFF5634
  .dword 0xFFFF565A
  .dword 0xFFFF567F
  .dword 0xFFFF56A5
  .dword 0xFFFF56CB
  .dword 0xFFFF56F0
  .dword 0xFFFF5716
  .dword 0xFFFF573C
  .dword 0xFFFF5762
  .dword 0xFFFF5788
  .dword 0xFFFF57AD
  .dword 0xFFFF57D3
  .dword 0xFFFF57F9
  .dword 0xFFFF581F
  .dword 0xFFFF5845
  .dword 0xFFFF586B
  .dword 0xFFFF5891
  .dword 0xFFFF58B7
  .dword 0xFFFF58DD
  .dword 0xFFFF5903
  .dword 0xFFFF5929
  .dword 0xFFFF5950
  .dword 0xFFFF5976
  .dword 0xFFFF599C
  .dword 0xFFFF59C2
  .dword 0xFFFF59E8
  .dword 0xFFFF5A0F
  .dword 0xFFFF5A35
  .dword 0xFFFF5A5B
  .dword 0xFFFF5A82
  .dword 0xFFFF5AA8
  .dword 0xFFFF5ACE
  .dword 0xFFFF5AF5
  .dword 0xFFFF5B1B
  .dword 0xFFFF5B42
  .dword 0xFFFF5B68
  .dword 0xFFFF5B8F
  .dword 0xFFFF5BB5
  .dword 0xFFFF5BDC
  .dword 0xFFFF5C02
  .dword 0xFFFF5C29
  .dword 0xFFFF5C50
  .dword 0xFFFF5C76
  .dword 0xFFFF5C9D
  .dword 0xFFFF5CC4
  .dword 0xFFFF5CEA
  .dword 0xFFFF5D11
  .dword 0xFFFF5D38
  .dword 0xFFFF5D5F
  .dword 0xFFFF5D85
  .dword 0xFFFF5DAC
  .dword 0xFFFF5DD3
  .dword 0xFFFF5DFA
  .dword 0xFFFF5E21
  .dword 0xFFFF5E48
  .dword 0xFFFF5E6F
  .dword 0xFFFF5E96
  .dword 0xFFFF5EBD
  .dword 0xFFFF5EE4
  .dword 0xFFFF5F0B
  .dword 0xFFFF5F32
  .dword 0xFFFF5F59
  .dword 0xFFFF5F81
  .dword 0xFFFF5FA8
  .dword 0xFFFF5FCF
  .dword 0xFFFF5FF6
  .dword 0xFFFF601D
  .dword 0xFFFF6045
  .dword 0xFFFF606C
  .dword 0xFFFF6093
  .dword 0xFFFF60BB
  .dword 0xFFFF60E2
  .dword 0xFFFF6109
  .dword 0xFFFF6131
  .dword 0xFFFF6158
  .dword 0xFFFF6180
  .dword 0xFFFF61A7
  .dword 0xFFFF61CF
  .dword 0xFFFF61F6
  .dword 0xFFFF621E
  .dword 0xFFFF6245
  .dword 0xFFFF626D
  .dword 0xFFFF6295
  .dword 0xFFFF62BC
  .dword 0xFFFF62E4
  .dword 0xFFFF630C
  .dword 0xFFFF6333
  .dword 0xFFFF635B
  .dword 0xFFFF6383
  .dword 0xFFFF63AB
  .dword 0xFFFF63D2
  .dword 0xFFFF63FA
  .dword 0xFFFF6422
  .dword 0xFFFF644A
  .dword 0xFFFF6472
  .dword 0xFFFF649A
  .dword 0xFFFF64C2
  .dword 0xFFFF64EA
  .dword 0xFFFF6512
  .dword 0xFFFF653A
  .dword 0xFFFF6562
  .dword 0xFFFF658A
  .dword 0xFFFF65B2
  .dword 0xFFFF65DA
  .dword 0xFFFF6602
  .dword 0xFFFF662A
  .dword 0xFFFF6653
  .dword 0xFFFF667B
  .dword 0xFFFF66A3
  .dword 0xFFFF66CB
  .dword 0xFFFF66F4
  .dword 0xFFFF671C
  .dword 0xFFFF6744
  .dword 0xFFFF676D
  .dword 0xFFFF6795
  .dword 0xFFFF67BD
  .dword 0xFFFF67E6
  .dword 0xFFFF680E
  .dword 0xFFFF6837
  .dword 0xFFFF685F
  .dword 0xFFFF6888
  .dword 0xFFFF68B0
  .dword 0xFFFF68D9
  .dword 0xFFFF6901
  .dword 0xFFFF692A
  .dword 0xFFFF6953
  .dword 0xFFFF697B
  .dword 0xFFFF69A4
  .dword 0xFFFF69CD
  .dword 0xFFFF69F5
  .dword 0xFFFF6A1E
  .dword 0xFFFF6A47
  .dword 0xFFFF6A70
  .dword 0xFFFF6A98
  .dword 0xFFFF6AC1
  .dword 0xFFFF6AEA
  .dword 0xFFFF6B13
  .dword 0xFFFF6B3C
  .dword 0xFFFF6B65
  .dword 0xFFFF6B8E
  .dword 0xFFFF6BB7
  .dword 0xFFFF6BE0
  .dword 0xFFFF6C09
  .dword 0xFFFF6C32
  .dword 0xFFFF6C5B
  .dword 0xFFFF6C84
  .dword 0xFFFF6CAD
  .dword 0xFFFF6CD6
  .dword 0xFFFF6CFF
  .dword 0xFFFF6D28
  .dword 0xFFFF6D52
  .dword 0xFFFF6D7B
  .dword 0xFFFF6DA4
  .dword 0xFFFF6DCD
  .dword 0xFFFF6DF6
  .dword 0xFFFF6E20
  .dword 0xFFFF6E49
  .dword 0xFFFF6E72
  .dword 0xFFFF6E9C
  .dword 0xFFFF6EC5
  .dword 0xFFFF6EEF
  .dword 0xFFFF6F18
  .dword 0xFFFF6F41
  .dword 0xFFFF6F6B
  .dword 0xFFFF6F94
  .dword 0xFFFF6FBE
  .dword 0xFFFF6FE7
  .dword 0xFFFF7011
  .dword 0xFFFF703B
  .dword 0xFFFF7064
  .dword 0xFFFF708E
  .dword 0xFFFF70B7
  .dword 0xFFFF70E1
  .dword 0xFFFF710B
  .dword 0xFFFF7134
  .dword 0xFFFF715E
  .dword 0xFFFF7188
  .dword 0xFFFF71B2
  .dword 0xFFFF71DC
  .dword 0xFFFF7205
  .dword 0xFFFF722F
  .dword 0xFFFF7259
  .dword 0xFFFF7283
  .dword 0xFFFF72AD
  .dword 0xFFFF72D7
  .dword 0xFFFF7301
  .dword 0xFFFF732B
  .dword 0xFFFF7355
  .dword 0xFFFF737F
  .dword 0xFFFF73A9
  .dword 0xFFFF73D3
  .dword 0xFFFF73FD
  .dword 0xFFFF7427
  .dword 0xFFFF7451
  .dword 0xFFFF747B
  .dword 0xFFFF74A5
  .dword 0xFFFF74CF
  .dword 0xFFFF74FA
  .dword 0xFFFF7524
  .dword 0xFFFF754E
  .dword 0xFFFF7578
  .dword 0xFFFF75A3
  .dword 0xFFFF75CD
  .dword 0xFFFF75F7
  .dword 0xFFFF7622
  .dword 0xFFFF764C
  .dword 0xFFFF7676
  .dword 0xFFFF76A1
  .dword 0xFFFF76CB
  .dword 0xFFFF76F6
  .dword 0xFFFF7720
  .dword 0xFFFF774B
  .dword 0xFFFF7775
  .dword 0xFFFF77A0
  .dword 0xFFFF77CA
  .dword 0xFFFF77F5
  .dword 0xFFFF781F
  .dword 0xFFFF784A
  .dword 0xFFFF7875
  .dword 0xFFFF789F
  .dword 0xFFFF78CA
  .dword 0xFFFF78F5
  .dword 0xFFFF791F
  .dword 0xFFFF794A
  .dword 0xFFFF7975
  .dword 0xFFFF79A0
  .dword 0xFFFF79CA
  .dword 0xFFFF79F5
  .dword 0xFFFF7A20
  .dword 0xFFFF7A4B
  .dword 0xFFFF7A76
  .dword 0xFFFF7AA1
  .dword 0xFFFF7ACC
  .dword 0xFFFF7AF7
  .dword 0xFFFF7B21
  .dword 0xFFFF7B4C
  .dword 0xFFFF7B77
  .dword 0xFFFF7BA2
  .dword 0xFFFF7BCD
  .dword 0xFFFF7BF9
  .dword 0xFFFF7C24
  .dword 0xFFFF7C4F
  .dword 0xFFFF7C7A
  .dword 0xFFFF7CA5
  .dword 0xFFFF7CD0
  .dword 0xFFFF7CFB
  .dword 0xFFFF7D26
  .dword 0xFFFF7D52
  .dword 0xFFFF7D7D
  .dword 0xFFFF7DA8
  .dword 0xFFFF7DD3
  .dword 0xFFFF7DFF
  .dword 0xFFFF7E2A
  .dword 0xFFFF7E55
  .dword 0xFFFF7E81
  .dword 0xFFFF7EAC
  .dword 0xFFFF7ED7
  .dword 0xFFFF7F03
  .dword 0xFFFF7F2E
  .dword 0xFFFF7F5A
  .dword 0xFFFF7F85
  .dword 0xFFFF7FB1
  .dword 0xFFFF7FDC
  .dword 0xFFFF8008
  .dword 0xFFFF8033
  .dword 0xFFFF805F
  .dword 0xFFFF808A
  .dword 0xFFFF80B6
  .dword 0xFFFF80E2
  .dword 0xFFFF810D
  .dword 0xFFFF8139
  .dword 0xFFFF8165
  .dword 0xFFFF8190
  .dword 0xFFFF81BC
  .dword 0xFFFF81E8
  .dword 0xFFFF8214
  .dword 0xFFFF823F
  .dword 0xFFFF826B
  .dword 0xFFFF8297
  .dword 0xFFFF82C3
  .dword 0xFFFF82EF
  .dword 0xFFFF831A
  .dword 0xFFFF8346
  .dword 0xFFFF8372
  .dword 0xFFFF839E
  .dword 0xFFFF83CA
  .dword 0xFFFF83F6
  .dword 0xFFFF8422
  .dword 0xFFFF844E
  .dword 0xFFFF847A
  .dword 0xFFFF84A6
  .dword 0xFFFF84D2
  .dword 0xFFFF84FE
  .dword 0xFFFF852A
  .dword 0xFFFF8556
  .dword 0xFFFF8583
  .dword 0xFFFF85AF
  .dword 0xFFFF85DB
  .dword 0xFFFF8607
  .dword 0xFFFF8633
  .dword 0xFFFF8660
  .dword 0xFFFF868C
  .dword 0xFFFF86B8
  .dword 0xFFFF86E4
  .dword 0xFFFF8711
  .dword 0xFFFF873D
  .dword 0xFFFF8769
  .dword 0xFFFF8796
  .dword 0xFFFF87C2
  .dword 0xFFFF87EE
  .dword 0xFFFF881B
  .dword 0xFFFF8847
  .dword 0xFFFF8874
  .dword 0xFFFF88A0
  .dword 0xFFFF88CD
  .dword 0xFFFF88F9
  .dword 0xFFFF8926
  .dword 0xFFFF8952
  .dword 0xFFFF897F
  .dword 0xFFFF89AB
  .dword 0xFFFF89D8
  .dword 0xFFFF8A04
  .dword 0xFFFF8A31
  .dword 0xFFFF8A5E
  .dword 0xFFFF8A8A
  .dword 0xFFFF8AB7
  .dword 0xFFFF8AE4
  .dword 0xFFFF8B10
  .dword 0xFFFF8B3D
  .dword 0xFFFF8B6A
  .dword 0xFFFF8B97
  .dword 0xFFFF8BC3
  .dword 0xFFFF8BF0
  .dword 0xFFFF8C1D
  .dword 0xFFFF8C4A
  .dword 0xFFFF8C77
  .dword 0xFFFF8CA3
  .dword 0xFFFF8CD0
  .dword 0xFFFF8CFD
  .dword 0xFFFF8D2A
  .dword 0xFFFF8D57
  .dword 0xFFFF8D84
  .dword 0xFFFF8DB1
  .dword 0xFFFF8DDE
  .dword 0xFFFF8E0B
  .dword 0xFFFF8E38
  .dword 0xFFFF8E65
  .dword 0xFFFF8E92
  .dword 0xFFFF8EBF
  .dword 0xFFFF8EEC
  .dword 0xFFFF8F19
  .dword 0xFFFF8F46
  .dword 0xFFFF8F74
  .dword 0xFFFF8FA1
  .dword 0xFFFF8FCE
  .dword 0xFFFF8FFB
  .dword 0xFFFF9028
  .dword 0xFFFF9056
  .dword 0xFFFF9083
  .dword 0xFFFF90B0
  .dword 0xFFFF90DD
  .dword 0xFFFF910B
  .dword 0xFFFF9138
  .dword 0xFFFF9165
  .dword 0xFFFF9193
  .dword 0xFFFF91C0
  .dword 0xFFFF91ED
  .dword 0xFFFF921B
  .dword 0xFFFF9248
  .dword 0xFFFF9276
  .dword 0xFFFF92A3
  .dword 0xFFFF92D0
  .dword 0xFFFF92FE
  .dword 0xFFFF932B
  .dword 0xFFFF9359
  .dword 0xFFFF9386
  .dword 0xFFFF93B4
  .dword 0xFFFF93E2
  .dword 0xFFFF940F
  .dword 0xFFFF943D
  .dword 0xFFFF946A
  .dword 0xFFFF9498
  .dword 0xFFFF94C6
  .dword 0xFFFF94F3
  .dword 0xFFFF9521
  .dword 0xFFFF954F
  .dword 0xFFFF957C
  .dword 0xFFFF95AA
  .dword 0xFFFF95D8
  .dword 0xFFFF9605
  .dword 0xFFFF9633
  .dword 0xFFFF9661
  .dword 0xFFFF968F
  .dword 0xFFFF96BD
  .dword 0xFFFF96EA
  .dword 0xFFFF9718
  .dword 0xFFFF9746
  .dword 0xFFFF9774
  .dword 0xFFFF97A2
  .dword 0xFFFF97D0
  .dword 0xFFFF97FE
  .dword 0xFFFF982C
  .dword 0xFFFF985A
  .dword 0xFFFF9888
  .dword 0xFFFF98B6
  .dword 0xFFFF98E4
  .dword 0xFFFF9912
  .dword 0xFFFF9940
  .dword 0xFFFF996E
  .dword 0xFFFF999C
  .dword 0xFFFF99CA
  .dword 0xFFFF99F8
  .dword 0xFFFF9A26
  .dword 0xFFFF9A54
  .dword 0xFFFF9A82
  .dword 0xFFFF9AB0
  .dword 0xFFFF9ADF
  .dword 0xFFFF9B0D
  .dword 0xFFFF9B3B
  .dword 0xFFFF9B69
  .dword 0xFFFF9B97
  .dword 0xFFFF9BC6
  .dword 0xFFFF9BF4
  .dword 0xFFFF9C22
  .dword 0xFFFF9C50
  .dword 0xFFFF9C7F
  .dword 0xFFFF9CAD
  .dword 0xFFFF9CDB
  .dword 0xFFFF9D0A
  .dword 0xFFFF9D38
  .dword 0xFFFF9D67
  .dword 0xFFFF9D95
  .dword 0xFFFF9DC3
  .dword 0xFFFF9DF2
  .dword 0xFFFF9E20
  .dword 0xFFFF9E4F
  .dword 0xFFFF9E7D
  .dword 0xFFFF9EAC
  .dword 0xFFFF9EDA
  .dword 0xFFFF9F09
  .dword 0xFFFF9F37
  .dword 0xFFFF9F66
  .dword 0xFFFF9F94
  .dword 0xFFFF9FC3
  .dword 0xFFFF9FF1
  .dword 0xFFFFA020
  .dword 0xFFFFA04F
  .dword 0xFFFFA07D
  .dword 0xFFFFA0AC
  .dword 0xFFFFA0DB
  .dword 0xFFFFA109
  .dword 0xFFFFA138
  .dword 0xFFFFA167
  .dword 0xFFFFA195
  .dword 0xFFFFA1C4
  .dword 0xFFFFA1F3
  .dword 0xFFFFA222
  .dword 0xFFFFA250
  .dword 0xFFFFA27F
  .dword 0xFFFFA2AE
  .dword 0xFFFFA2DD
  .dword 0xFFFFA30C
  .dword 0xFFFFA33A
  .dword 0xFFFFA369
  .dword 0xFFFFA398
  .dword 0xFFFFA3C7
  .dword 0xFFFFA3F6
  .dword 0xFFFFA425
  .dword 0xFFFFA454
  .dword 0xFFFFA483
  .dword 0xFFFFA4B2
  .dword 0xFFFFA4E1
  .dword 0xFFFFA510
  .dword 0xFFFFA53F
  .dword 0xFFFFA56E
  .dword 0xFFFFA59D
  .dword 0xFFFFA5CC
  .dword 0xFFFFA5FB
  .dword 0xFFFFA62A
  .dword 0xFFFFA659
  .dword 0xFFFFA688
  .dword 0xFFFFA6B7
  .dword 0xFFFFA6E6
  .dword 0xFFFFA715
  .dword 0xFFFFA744
  .dword 0xFFFFA774
  .dword 0xFFFFA7A3
  .dword 0xFFFFA7D2
  .dword 0xFFFFA801
  .dword 0xFFFFA830
  .dword 0xFFFFA860
  .dword 0xFFFFA88F
  .dword 0xFFFFA8BE
  .dword 0xFFFFA8ED
  .dword 0xFFFFA91D
  .dword 0xFFFFA94C
  .dword 0xFFFFA97B
  .dword 0xFFFFA9AA
  .dword 0xFFFFA9DA
  .dword 0xFFFFAA09
  .dword 0xFFFFAA38
  .dword 0xFFFFAA68
  .dword 0xFFFFAA97
  .dword 0xFFFFAAC7
  .dword 0xFFFFAAF6
  .dword 0xFFFFAB25
  .dword 0xFFFFAB55
  .dword 0xFFFFAB84
  .dword 0xFFFFABB4
  .dword 0xFFFFABE3
  .dword 0xFFFFAC13
  .dword 0xFFFFAC42
  .dword 0xFFFFAC72
  .dword 0xFFFFACA1
  .dword 0xFFFFACD1
  .dword 0xFFFFAD00
  .dword 0xFFFFAD30
  .dword 0xFFFFAD5F
  .dword 0xFFFFAD8F
  .dword 0xFFFFADBF
  .dword 0xFFFFADEE
  .dword 0xFFFFAE1E
  .dword 0xFFFFAE4D
  .dword 0xFFFFAE7D
  .dword 0xFFFFAEAD
  .dword 0xFFFFAEDC
  .dword 0xFFFFAF0C
  .dword 0xFFFFAF3C
  .dword 0xFFFFAF6B
  .dword 0xFFFFAF9B
  .dword 0xFFFFAFCB
  .dword 0xFFFFAFFB
  .dword 0xFFFFB02A
  .dword 0xFFFFB05A
  .dword 0xFFFFB08A
  .dword 0xFFFFB0BA
  .dword 0xFFFFB0EA
  .dword 0xFFFFB119
  .dword 0xFFFFB149
  .dword 0xFFFFB179
  .dword 0xFFFFB1A9
  .dword 0xFFFFB1D9
  .dword 0xFFFFB209
  .dword 0xFFFFB238
  .dword 0xFFFFB268
  .dword 0xFFFFB298
  .dword 0xFFFFB2C8
  .dword 0xFFFFB2F8
  .dword 0xFFFFB328
  .dword 0xFFFFB358
  .dword 0xFFFFB388
  .dword 0xFFFFB3B8
  .dword 0xFFFFB3E8
  .dword 0xFFFFB418
  .dword 0xFFFFB448
  .dword 0xFFFFB478
  .dword 0xFFFFB4A8
  .dword 0xFFFFB4D8
  .dword 0xFFFFB508
  .dword 0xFFFFB538
  .dword 0xFFFFB568
  .dword 0xFFFFB598
  .dword 0xFFFFB5C8
  .dword 0xFFFFB5F9
  .dword 0xFFFFB629
  .dword 0xFFFFB659
  .dword 0xFFFFB689
  .dword 0xFFFFB6B9
  .dword 0xFFFFB6E9
  .dword 0xFFFFB719
  .dword 0xFFFFB74A
  .dword 0xFFFFB77A
  .dword 0xFFFFB7AA
  .dword 0xFFFFB7DA
  .dword 0xFFFFB80B
  .dword 0xFFFFB83B
  .dword 0xFFFFB86B
  .dword 0xFFFFB89B
  .dword 0xFFFFB8CC
  .dword 0xFFFFB8FC
  .dword 0xFFFFB92C
  .dword 0xFFFFB95C
  .dword 0xFFFFB98D
  .dword 0xFFFFB9BD
  .dword 0xFFFFB9ED
  .dword 0xFFFFBA1E
  .dword 0xFFFFBA4E
  .dword 0xFFFFBA7F
  .dword 0xFFFFBAAF
  .dword 0xFFFFBADF
  .dword 0xFFFFBB10
  .dword 0xFFFFBB40
  .dword 0xFFFFBB71
  .dword 0xFFFFBBA1
  .dword 0xFFFFBBD1
  .dword 0xFFFFBC02
  .dword 0xFFFFBC32
  .dword 0xFFFFBC63
  .dword 0xFFFFBC93
  .dword 0xFFFFBCC4
  .dword 0xFFFFBCF4
  .dword 0xFFFFBD25
  .dword 0xFFFFBD55
  .dword 0xFFFFBD86
  .dword 0xFFFFBDB6
  .dword 0xFFFFBDE7
  .dword 0xFFFFBE18
  .dword 0xFFFFBE48
  .dword 0xFFFFBE79
  .dword 0xFFFFBEA9
  .dword 0xFFFFBEDA
  .dword 0xFFFFBF0B
  .dword 0xFFFFBF3B
  .dword 0xFFFFBF6C
  .dword 0xFFFFBF9C
  .dword 0xFFFFBFCD
  .dword 0xFFFFBFFE
  .dword 0xFFFFC02E
  .dword 0xFFFFC05F
  .dword 0xFFFFC090
  .dword 0xFFFFC0C1
  .dword 0xFFFFC0F1
  .dword 0xFFFFC122
  .dword 0xFFFFC153
  .dword 0xFFFFC183
  .dword 0xFFFFC1B4
  .dword 0xFFFFC1E5
  .dword 0xFFFFC216
  .dword 0xFFFFC246
  .dword 0xFFFFC277
  .dword 0xFFFFC2A8
  .dword 0xFFFFC2D9
  .dword 0xFFFFC30A
  .dword 0xFFFFC33B
  .dword 0xFFFFC36B
  .dword 0xFFFFC39C
  .dword 0xFFFFC3CD
  .dword 0xFFFFC3FE
  .dword 0xFFFFC42F
  .dword 0xFFFFC460
  .dword 0xFFFFC491
  .dword 0xFFFFC4C1
  .dword 0xFFFFC4F2
  .dword 0xFFFFC523
  .dword 0xFFFFC554
  .dword 0xFFFFC585
  .dword 0xFFFFC5B6
  .dword 0xFFFFC5E7
  .dword 0xFFFFC618
  .dword 0xFFFFC649
  .dword 0xFFFFC67A
  .dword 0xFFFFC6AB
  .dword 0xFFFFC6DC
  .dword 0xFFFFC70D
  .dword 0xFFFFC73E
  .dword 0xFFFFC76F
  .dword 0xFFFFC7A0
  .dword 0xFFFFC7D1
  .dword 0xFFFFC802
  .dword 0xFFFFC833
  .dword 0xFFFFC864
  .dword 0xFFFFC895
  .dword 0xFFFFC8C6
  .dword 0xFFFFC8F7
  .dword 0xFFFFC928
  .dword 0xFFFFC95A
  .dword 0xFFFFC98B
  .dword 0xFFFFC9BC
  .dword 0xFFFFC9ED
  .dword 0xFFFFCA1E
  .dword 0xFFFFCA4F
  .dword 0xFFFFCA80
  .dword 0xFFFFCAB1
  .dword 0xFFFFCAE3
  .dword 0xFFFFCB14
  .dword 0xFFFFCB45
  .dword 0xFFFFCB76
  .dword 0xFFFFCBA7
  .dword 0xFFFFCBD9
  .dword 0xFFFFCC0A
  .dword 0xFFFFCC3B
  .dword 0xFFFFCC6C
  .dword 0xFFFFCC9E
  .dword 0xFFFFCCCF
  .dword 0xFFFFCD00
  .dword 0xFFFFCD31
  .dword 0xFFFFCD63
  .dword 0xFFFFCD94
  .dword 0xFFFFCDC5
  .dword 0xFFFFCDF6
  .dword 0xFFFFCE28
  .dword 0xFFFFCE59
  .dword 0xFFFFCE8A
  .dword 0xFFFFCEBC
  .dword 0xFFFFCEED
  .dword 0xFFFFCF1E
  .dword 0xFFFFCF50
  .dword 0xFFFFCF81
  .dword 0xFFFFCFB2
  .dword 0xFFFFCFE4
  .dword 0xFFFFD015
  .dword 0xFFFFD047
  .dword 0xFFFFD078
  .dword 0xFFFFD0A9
  .dword 0xFFFFD0DB
  .dword 0xFFFFD10C
  .dword 0xFFFFD13E
  .dword 0xFFFFD16F
  .dword 0xFFFFD1A0
  .dword 0xFFFFD1D2
  .dword 0xFFFFD203
  .dword 0xFFFFD235
  .dword 0xFFFFD266
  .dword 0xFFFFD298
  .dword 0xFFFFD2C9
  .dword 0xFFFFD2FB
  .dword 0xFFFFD32C
  .dword 0xFFFFD35E
  .dword 0xFFFFD38F
  .dword 0xFFFFD3C1
  .dword 0xFFFFD3F2
  .dword 0xFFFFD424
  .dword 0xFFFFD455
  .dword 0xFFFFD487
  .dword 0xFFFFD4B8
  .dword 0xFFFFD4EA
  .dword 0xFFFFD51B
  .dword 0xFFFFD54D
  .dword 0xFFFFD57E
  .dword 0xFFFFD5B0
  .dword 0xFFFFD5E2
  .dword 0xFFFFD613
  .dword 0xFFFFD645
  .dword 0xFFFFD676
  .dword 0xFFFFD6A8
  .dword 0xFFFFD6DA
  .dword 0xFFFFD70B
  .dword 0xFFFFD73D
  .dword 0xFFFFD76E
  .dword 0xFFFFD7A0
  .dword 0xFFFFD7D2
  .dword 0xFFFFD803
  .dword 0xFFFFD835
  .dword 0xFFFFD867
  .dword 0xFFFFD898
  .dword 0xFFFFD8CA
  .dword 0xFFFFD8FC
  .dword 0xFFFFD92D
  .dword 0xFFFFD95F
  .dword 0xFFFFD991
  .dword 0xFFFFD9C2
  .dword 0xFFFFD9F4
  .dword 0xFFFFDA26
  .dword 0xFFFFDA58
  .dword 0xFFFFDA89
  .dword 0xFFFFDABB
  .dword 0xFFFFDAED
  .dword 0xFFFFDB1E
  .dword 0xFFFFDB50
  .dword 0xFFFFDB82
  .dword 0xFFFFDBB4
  .dword 0xFFFFDBE5
  .dword 0xFFFFDC17
  .dword 0xFFFFDC49
  .dword 0xFFFFDC7B
  .dword 0xFFFFDCAD
  .dword 0xFFFFDCDE
  .dword 0xFFFFDD10
  .dword 0xFFFFDD42
  .dword 0xFFFFDD74
  .dword 0xFFFFDDA6
  .dword 0xFFFFDDD7
  .dword 0xFFFFDE09
  .dword 0xFFFFDE3B
  .dword 0xFFFFDE6D
  .dword 0xFFFFDE9F
  .dword 0xFFFFDED0
  .dword 0xFFFFDF02
  .dword 0xFFFFDF34
  .dword 0xFFFFDF66
  .dword 0xFFFFDF98
  .dword 0xFFFFDFCA
  .dword 0xFFFFDFFC
  .dword 0xFFFFE02D
  .dword 0xFFFFE05F
  .dword 0xFFFFE091
  .dword 0xFFFFE0C3
  .dword 0xFFFFE0F5
  .dword 0xFFFFE127
  .dword 0xFFFFE159
  .dword 0xFFFFE18B
  .dword 0xFFFFE1BD
  .dword 0xFFFFE1EF
  .dword 0xFFFFE220
  .dword 0xFFFFE252
  .dword 0xFFFFE284
  .dword 0xFFFFE2B6
  .dword 0xFFFFE2E8
  .dword 0xFFFFE31A
  .dword 0xFFFFE34C
  .dword 0xFFFFE37E
  .dword 0xFFFFE3B0
  .dword 0xFFFFE3E2
  .dword 0xFFFFE414
  .dword 0xFFFFE446
  .dword 0xFFFFE478
  .dword 0xFFFFE4AA
  .dword 0xFFFFE4DC
  .dword 0xFFFFE50E
  .dword 0xFFFFE540
  .dword 0xFFFFE572
  .dword 0xFFFFE5A4
  .dword 0xFFFFE5D6
  .dword 0xFFFFE608
  .dword 0xFFFFE63A
  .dword 0xFFFFE66C
  .dword 0xFFFFE69E
  .dword 0xFFFFE6D0
  .dword 0xFFFFE702
  .dword 0xFFFFE734
  .dword 0xFFFFE766
  .dword 0xFFFFE798
  .dword 0xFFFFE7CA
  .dword 0xFFFFE7FC
  .dword 0xFFFFE82E
  .dword 0xFFFFE860
  .dword 0xFFFFE892
  .dword 0xFFFFE8C4
  .dword 0xFFFFE8F6
  .dword 0xFFFFE928
  .dword 0xFFFFE95A
  .dword 0xFFFFE98D
  .dword 0xFFFFE9BF
  .dword 0xFFFFE9F1
  .dword 0xFFFFEA23
  .dword 0xFFFFEA55
  .dword 0xFFFFEA87
  .dword 0xFFFFEAB9
  .dword 0xFFFFEAEB
  .dword 0xFFFFEB1D
  .dword 0xFFFFEB4F
  .dword 0xFFFFEB81
  .dword 0xFFFFEBB3
  .dword 0xFFFFEBE6
  .dword 0xFFFFEC18
  .dword 0xFFFFEC4A
  .dword 0xFFFFEC7C
  .dword 0xFFFFECAE
  .dword 0xFFFFECE0
  .dword 0xFFFFED12
  .dword 0xFFFFED44
  .dword 0xFFFFED77
  .dword 0xFFFFEDA9
  .dword 0xFFFFEDDB
  .dword 0xFFFFEE0D
  .dword 0xFFFFEE3F
  .dword 0xFFFFEE71
  .dword 0xFFFFEEA3
  .dword 0xFFFFEED6
  .dword 0xFFFFEF08
  .dword 0xFFFFEF3A
  .dword 0xFFFFEF6C
  .dword 0xFFFFEF9E
  .dword 0xFFFFEFD0
  .dword 0xFFFFF003
  .dword 0xFFFFF035
  .dword 0xFFFFF067
  .dword 0xFFFFF099
  .dword 0xFFFFF0CB
  .dword 0xFFFFF0FD
  .dword 0xFFFFF130
  .dword 0xFFFFF162
  .dword 0xFFFFF194
  .dword 0xFFFFF1C6
  .dword 0xFFFFF1F8
  .dword 0xFFFFF22B
  .dword 0xFFFFF25D
  .dword 0xFFFFF28F
  .dword 0xFFFFF2C1
  .dword 0xFFFFF2F3
  .dword 0xFFFFF325
  .dword 0xFFFFF358
  .dword 0xFFFFF38A
  .dword 0xFFFFF3BC
  .dword 0xFFFFF3EE
  .dword 0xFFFFF421
  .dword 0xFFFFF453
  .dword 0xFFFFF485
  .dword 0xFFFFF4B7
  .dword 0xFFFFF4E9
  .dword 0xFFFFF51C
  .dword 0xFFFFF54E
  .dword 0xFFFFF580
  .dword 0xFFFFF5B2
  .dword 0xFFFFF5E4
  .dword 0xFFFFF617
  .dword 0xFFFFF649
  .dword 0xFFFFF67B
  .dword 0xFFFFF6AD
  .dword 0xFFFFF6E0
  .dword 0xFFFFF712
  .dword 0xFFFFF744
  .dword 0xFFFFF776
  .dword 0xFFFFF7A9
  .dword 0xFFFFF7DB
  .dword 0xFFFFF80D
  .dword 0xFFFFF83F
  .dword 0xFFFFF872
  .dword 0xFFFFF8A4
  .dword 0xFFFFF8D6
  .dword 0xFFFFF908
  .dword 0xFFFFF93B
  .dword 0xFFFFF96D
  .dword 0xFFFFF99F
  .dword 0xFFFFF9D1
  .dword 0xFFFFFA04
  .dword 0xFFFFFA36
  .dword 0xFFFFFA68
  .dword 0xFFFFFA9A
  .dword 0xFFFFFACD
  .dword 0xFFFFFAFF
  .dword 0xFFFFFB31
  .dword 0xFFFFFB63
  .dword 0xFFFFFB96
  .dword 0xFFFFFBC8
  .dword 0xFFFFFBFA
  .dword 0xFFFFFC2C
  .dword 0xFFFFFC5F
  .dword 0xFFFFFC91
  .dword 0xFFFFFCC3
  .dword 0xFFFFFCF5
  .dword 0xFFFFFD28
  .dword 0xFFFFFD5A
  .dword 0xFFFFFD8C
  .dword 0xFFFFFDBE
  .dword 0xFFFFFDF1
  .dword 0xFFFFFE23
  .dword 0xFFFFFE55
  .dword 0xFFFFFE88
  .dword 0xFFFFFEBA
  .dword 0xFFFFFEEC
  .dword 0xFFFFFF1E
  .dword 0xFFFFFF51
  .dword 0xFFFFFF83
  .dword 0xFFFFFFB5
  .dword 0xFFFFFFE7
  .dword 0x00000019
  .dword 0x0000004B
  .dword 0x0000007D
  .dword 0x000000AF
  .dword 0x000000E2
  .dword 0x00000114
  .dword 0x00000146
  .dword 0x00000178
  .dword 0x000001AB
  .dword 0x000001DD
  .dword 0x0000020F
  .dword 0x00000242
  .dword 0x00000274
  .dword 0x000002A6
  .dword 0x000002D8
  .dword 0x0000030B
  .dword 0x0000033D
  .dword 0x0000036F
  .dword 0x000003A1
  .dword 0x000003D4
  .dword 0x00000406
  .dword 0x00000438
  .dword 0x0000046A
  .dword 0x0000049D
  .dword 0x000004CF
  .dword 0x00000501
  .dword 0x00000533
  .dword 0x00000566
  .dword 0x00000598
  .dword 0x000005CA
  .dword 0x000005FC
  .dword 0x0000062F
  .dword 0x00000661
  .dword 0x00000693
  .dword 0x000006C5
  .dword 0x000006F8
  .dword 0x0000072A
  .dword 0x0000075C
  .dword 0x0000078E
  .dword 0x000007C1
  .dword 0x000007F3
  .dword 0x00000825
  .dword 0x00000857
  .dword 0x0000088A
  .dword 0x000008BC
  .dword 0x000008EE
  .dword 0x00000920
  .dword 0x00000953
  .dword 0x00000985
  .dword 0x000009B7
  .dword 0x000009E9
  .dword 0x00000A1B
  .dword 0x00000A4E
  .dword 0x00000A80
  .dword 0x00000AB2
  .dword 0x00000AE4
  .dword 0x00000B17
  .dword 0x00000B49
  .dword 0x00000B7B
  .dword 0x00000BAD
  .dword 0x00000BDF
  .dword 0x00000C12
  .dword 0x00000C44
  .dword 0x00000C76
  .dword 0x00000CA8
  .dword 0x00000CDB
  .dword 0x00000D0D
  .dword 0x00000D3F
  .dword 0x00000D71
  .dword 0x00000DA3
  .dword 0x00000DD6
  .dword 0x00000E08
  .dword 0x00000E3A
  .dword 0x00000E6C
  .dword 0x00000E9E
  .dword 0x00000ED0
  .dword 0x00000F03
  .dword 0x00000F35
  .dword 0x00000F67
  .dword 0x00000F99
  .dword 0x00000FCB
  .dword 0x00000FFD
  .dword 0x00001030
  .dword 0x00001062
  .dword 0x00001094
  .dword 0x000010C6
  .dword 0x000010F8
  .dword 0x0000112A
  .dword 0x0000115D
  .dword 0x0000118F
  .dword 0x000011C1
  .dword 0x000011F3
  .dword 0x00001225
  .dword 0x00001257
  .dword 0x00001289
  .dword 0x000012BC
  .dword 0x000012EE
  .dword 0x00001320
  .dword 0x00001352
  .dword 0x00001384
  .dword 0x000013B6
  .dword 0x000013E8
  .dword 0x0000141A
  .dword 0x0000144D
  .dword 0x0000147F
  .dword 0x000014B1
  .dword 0x000014E3
  .dword 0x00001515
  .dword 0x00001547
  .dword 0x00001579
  .dword 0x000015AB
  .dword 0x000015DD
  .dword 0x0000160F
  .dword 0x00001641
  .dword 0x00001673
  .dword 0x000016A6
  .dword 0x000016D8
  .dword 0x0000170A
  .dword 0x0000173C
  .dword 0x0000176E
  .dword 0x000017A0
  .dword 0x000017D2
  .dword 0x00001804
  .dword 0x00001836
  .dword 0x00001868
  .dword 0x0000189A
  .dword 0x000018CC
  .dword 0x000018FE
  .dword 0x00001930
  .dword 0x00001962
  .dword 0x00001994
  .dword 0x000019C6
  .dword 0x000019F8
  .dword 0x00001A2A
  .dword 0x00001A5C
  .dword 0x00001A8E
  .dword 0x00001AC0
  .dword 0x00001AF2
  .dword 0x00001B24
  .dword 0x00001B56
  .dword 0x00001B88
  .dword 0x00001BBA
  .dword 0x00001BEC
  .dword 0x00001C1E
  .dword 0x00001C50
  .dword 0x00001C82
  .dword 0x00001CB4
  .dword 0x00001CE6
  .dword 0x00001D18
  .dword 0x00001D4A
  .dword 0x00001D7C
  .dword 0x00001DAE
  .dword 0x00001DE0
  .dword 0x00001E11
  .dword 0x00001E43
  .dword 0x00001E75
  .dword 0x00001EA7
  .dword 0x00001ED9
  .dword 0x00001F0B
  .dword 0x00001F3D
  .dword 0x00001F6F
  .dword 0x00001FA1
  .dword 0x00001FD3
  .dword 0x00002004
  .dword 0x00002036
  .dword 0x00002068
  .dword 0x0000209A
  .dword 0x000020CC
  .dword 0x000020FE
  .dword 0x00002130
  .dword 0x00002161
  .dword 0x00002193
  .dword 0x000021C5
  .dword 0x000021F7
  .dword 0x00002229
  .dword 0x0000225A
  .dword 0x0000228C
  .dword 0x000022BE
  .dword 0x000022F0
  .dword 0x00002322
  .dword 0x00002353
  .dword 0x00002385
  .dword 0x000023B7
  .dword 0x000023E9
  .dword 0x0000241B
  .dword 0x0000244C
  .dword 0x0000247E
  .dword 0x000024B0
  .dword 0x000024E2
  .dword 0x00002513
  .dword 0x00002545
  .dword 0x00002577
  .dword 0x000025A8
  .dword 0x000025DA
  .dword 0x0000260C
  .dword 0x0000263E
  .dword 0x0000266F
  .dword 0x000026A1
  .dword 0x000026D3
  .dword 0x00002704
  .dword 0x00002736
  .dword 0x00002768
  .dword 0x00002799
  .dword 0x000027CB
  .dword 0x000027FD
  .dword 0x0000282E
  .dword 0x00002860
  .dword 0x00002892
  .dword 0x000028C3
  .dword 0x000028F5
  .dword 0x00002926
  .dword 0x00002958
  .dword 0x0000298A
  .dword 0x000029BB
  .dword 0x000029ED
  .dword 0x00002A1E
  .dword 0x00002A50
  .dword 0x00002A82
  .dword 0x00002AB3
  .dword 0x00002AE5
  .dword 0x00002B16
  .dword 0x00002B48
  .dword 0x00002B79
  .dword 0x00002BAB
  .dword 0x00002BDC
  .dword 0x00002C0E
  .dword 0x00002C3F
  .dword 0x00002C71
  .dword 0x00002CA2
  .dword 0x00002CD4
  .dword 0x00002D05
  .dword 0x00002D37
  .dword 0x00002D68
  .dword 0x00002D9A
  .dword 0x00002DCB
  .dword 0x00002DFD
  .dword 0x00002E2E
  .dword 0x00002E60
  .dword 0x00002E91
  .dword 0x00002EC2
  .dword 0x00002EF4
  .dword 0x00002F25
  .dword 0x00002F57
  .dword 0x00002F88
  .dword 0x00002FBA
  .dword 0x00002FEB
  .dword 0x0000301C
  .dword 0x0000304E
  .dword 0x0000307F
  .dword 0x000030B0
  .dword 0x000030E2
  .dword 0x00003113
  .dword 0x00003144
  .dword 0x00003176
  .dword 0x000031A7
  .dword 0x000031D8
  .dword 0x0000320A
  .dword 0x0000323B
  .dword 0x0000326C
  .dword 0x0000329D
  .dword 0x000032CF
  .dword 0x00003300
  .dword 0x00003331
  .dword 0x00003362
  .dword 0x00003394
  .dword 0x000033C5
  .dword 0x000033F6
  .dword 0x00003427
  .dword 0x00003459
  .dword 0x0000348A
  .dword 0x000034BB
  .dword 0x000034EC
  .dword 0x0000351D
  .dword 0x0000354F
  .dword 0x00003580
  .dword 0x000035B1
  .dword 0x000035E2
  .dword 0x00003613
  .dword 0x00003644
  .dword 0x00003675
  .dword 0x000036A6
  .dword 0x000036D8
  .dword 0x00003709
  .dword 0x0000373A
  .dword 0x0000376B
  .dword 0x0000379C
  .dword 0x000037CD
  .dword 0x000037FE
  .dword 0x0000382F
  .dword 0x00003860
  .dword 0x00003891
  .dword 0x000038C2
  .dword 0x000038F3
  .dword 0x00003924
  .dword 0x00003955
  .dword 0x00003986
  .dword 0x000039B7
  .dword 0x000039E8
  .dword 0x00003A19
  .dword 0x00003A4A
  .dword 0x00003A7B
  .dword 0x00003AAC
  .dword 0x00003ADD
  .dword 0x00003B0E
  .dword 0x00003B3F
  .dword 0x00003B6F
  .dword 0x00003BA0
  .dword 0x00003BD1
  .dword 0x00003C02
  .dword 0x00003C33
  .dword 0x00003C64
  .dword 0x00003C95
  .dword 0x00003CC5
  .dword 0x00003CF6
  .dword 0x00003D27
  .dword 0x00003D58
  .dword 0x00003D89
  .dword 0x00003DBA
  .dword 0x00003DEA
  .dword 0x00003E1B
  .dword 0x00003E4C
  .dword 0x00003E7D
  .dword 0x00003EAD
  .dword 0x00003EDE
  .dword 0x00003F0F
  .dword 0x00003F3F
  .dword 0x00003F70
  .dword 0x00003FA1
  .dword 0x00003FD2
  .dword 0x00004002
  .dword 0x00004033
  .dword 0x00004064
  .dword 0x00004094
  .dword 0x000040C5
  .dword 0x000040F5
  .dword 0x00004126
  .dword 0x00004157
  .dword 0x00004187
  .dword 0x000041B8
  .dword 0x000041E8
  .dword 0x00004219
  .dword 0x0000424A
  .dword 0x0000427A
  .dword 0x000042AB
  .dword 0x000042DB
  .dword 0x0000430C
  .dword 0x0000433C
  .dword 0x0000436D
  .dword 0x0000439D
  .dword 0x000043CE
  .dword 0x000043FE
  .dword 0x0000442F
  .dword 0x0000445F
  .dword 0x0000448F
  .dword 0x000044C0
  .dword 0x000044F0
  .dword 0x00004521
  .dword 0x00004551
  .dword 0x00004581
  .dword 0x000045B2
  .dword 0x000045E2
  .dword 0x00004613
  .dword 0x00004643
  .dword 0x00004673
  .dword 0x000046A4
  .dword 0x000046D4
  .dword 0x00004704
  .dword 0x00004734
  .dword 0x00004765
  .dword 0x00004795
  .dword 0x000047C5
  .dword 0x000047F5
  .dword 0x00004826
  .dword 0x00004856
  .dword 0x00004886
  .dword 0x000048B6
  .dword 0x000048E7
  .dword 0x00004917
  .dword 0x00004947
  .dword 0x00004977
  .dword 0x000049A7
  .dword 0x000049D7
  .dword 0x00004A07
  .dword 0x00004A38
  .dword 0x00004A68
  .dword 0x00004A98
  .dword 0x00004AC8
  .dword 0x00004AF8
  .dword 0x00004B28
  .dword 0x00004B58
  .dword 0x00004B88
  .dword 0x00004BB8
  .dword 0x00004BE8
  .dword 0x00004C18
  .dword 0x00004C48
  .dword 0x00004C78
  .dword 0x00004CA8
  .dword 0x00004CD8
  .dword 0x00004D08
  .dword 0x00004D38
  .dword 0x00004D68
  .dword 0x00004D98
  .dword 0x00004DC8
  .dword 0x00004DF7
  .dword 0x00004E27
  .dword 0x00004E57
  .dword 0x00004E87
  .dword 0x00004EB7
  .dword 0x00004EE7
  .dword 0x00004F16
  .dword 0x00004F46
  .dword 0x00004F76
  .dword 0x00004FA6
  .dword 0x00004FD6
  .dword 0x00005005
  .dword 0x00005035
  .dword 0x00005065
  .dword 0x00005095
  .dword 0x000050C4
  .dword 0x000050F4
  .dword 0x00005124
  .dword 0x00005153
  .dword 0x00005183
  .dword 0x000051B3
  .dword 0x000051E2
  .dword 0x00005212
  .dword 0x00005241
  .dword 0x00005271
  .dword 0x000052A1
  .dword 0x000052D0
  .dword 0x00005300
  .dword 0x0000532F
  .dword 0x0000535F
  .dword 0x0000538E
  .dword 0x000053BE
  .dword 0x000053ED
  .dword 0x0000541D
  .dword 0x0000544C
  .dword 0x0000547C
  .dword 0x000054AB
  .dword 0x000054DB
  .dword 0x0000550A
  .dword 0x00005539
  .dword 0x00005569
  .dword 0x00005598
  .dword 0x000055C8
  .dword 0x000055F7
  .dword 0x00005626
  .dword 0x00005656
  .dword 0x00005685
  .dword 0x000056B4
  .dword 0x000056E3
  .dword 0x00005713
  .dword 0x00005742
  .dword 0x00005771
  .dword 0x000057A0
  .dword 0x000057D0
  .dword 0x000057FF
  .dword 0x0000582E
  .dword 0x0000585D
  .dword 0x0000588C
  .dword 0x000058BC
  .dword 0x000058EB
  .dword 0x0000591A
  .dword 0x00005949
  .dword 0x00005978
  .dword 0x000059A7
  .dword 0x000059D6
  .dword 0x00005A05
  .dword 0x00005A34
  .dword 0x00005A63
  .dword 0x00005A92
  .dword 0x00005AC1
  .dword 0x00005AF0
  .dword 0x00005B1F
  .dword 0x00005B4E
  .dword 0x00005B7D
  .dword 0x00005BAC
  .dword 0x00005BDB
  .dword 0x00005C0A
  .dword 0x00005C39
  .dword 0x00005C68
  .dword 0x00005C97
  .dword 0x00005CC6
  .dword 0x00005CF4
  .dword 0x00005D23
  .dword 0x00005D52
  .dword 0x00005D81
  .dword 0x00005DB0
  .dword 0x00005DDE
  .dword 0x00005E0D
  .dword 0x00005E3C
  .dword 0x00005E6B
  .dword 0x00005E99
  .dword 0x00005EC8
  .dword 0x00005EF7
  .dword 0x00005F25
  .dword 0x00005F54
  .dword 0x00005F83
  .dword 0x00005FB1
  .dword 0x00005FE0
  .dword 0x0000600F
  .dword 0x0000603D
  .dword 0x0000606C
  .dword 0x0000609A
  .dword 0x000060C9
  .dword 0x000060F7
  .dword 0x00006126
  .dword 0x00006154
  .dword 0x00006183
  .dword 0x000061B1
  .dword 0x000061E0
  .dword 0x0000620E
  .dword 0x0000623D
  .dword 0x0000626B
  .dword 0x00006299
  .dword 0x000062C8
  .dword 0x000062F6
  .dword 0x00006325
  .dword 0x00006353
  .dword 0x00006381
  .dword 0x000063B0
  .dword 0x000063DE
  .dword 0x0000640C
  .dword 0x0000643A
  .dword 0x00006469
  .dword 0x00006497
  .dword 0x000064C5
  .dword 0x000064F3
  .dword 0x00006521
  .dword 0x00006550
  .dword 0x0000657E
  .dword 0x000065AC
  .dword 0x000065DA
  .dword 0x00006608
  .dword 0x00006636
  .dword 0x00006664
  .dword 0x00006692
  .dword 0x000066C0
  .dword 0x000066EE
  .dword 0x0000671C
  .dword 0x0000674A
  .dword 0x00006778
  .dword 0x000067A6
  .dword 0x000067D4
  .dword 0x00006802
  .dword 0x00006830
  .dword 0x0000685E
  .dword 0x0000688C
  .dword 0x000068BA
  .dword 0x000068E8
  .dword 0x00006916
  .dword 0x00006943
  .dword 0x00006971
  .dword 0x0000699F
  .dword 0x000069CD
  .dword 0x000069FB
  .dword 0x00006A28
  .dword 0x00006A56
  .dword 0x00006A84
  .dword 0x00006AB1
  .dword 0x00006ADF
  .dword 0x00006B0D
  .dword 0x00006B3A
  .dword 0x00006B68
  .dword 0x00006B96
  .dword 0x00006BC3
  .dword 0x00006BF1
  .dword 0x00006C1E
  .dword 0x00006C4C
  .dword 0x00006C7A
  .dword 0x00006CA7
  .dword 0x00006CD5
  .dword 0x00006D02
  .dword 0x00006D30
  .dword 0x00006D5D
  .dword 0x00006D8A
  .dword 0x00006DB8
  .dword 0x00006DE5
  .dword 0x00006E13
  .dword 0x00006E40
  .dword 0x00006E6D
  .dword 0x00006E9B
  .dword 0x00006EC8
  .dword 0x00006EF5
  .dword 0x00006F23
  .dword 0x00006F50
  .dword 0x00006F7D
  .dword 0x00006FAA
  .dword 0x00006FD8
  .dword 0x00007005
  .dword 0x00007032
  .dword 0x0000705F
  .dword 0x0000708C
  .dword 0x000070BA
  .dword 0x000070E7
  .dword 0x00007114
  .dword 0x00007141
  .dword 0x0000716E
  .dword 0x0000719B
  .dword 0x000071C8
  .dword 0x000071F5
  .dword 0x00007222
  .dword 0x0000724F
  .dword 0x0000727C
  .dword 0x000072A9
  .dword 0x000072D6
  .dword 0x00007303
  .dword 0x00007330
  .dword 0x0000735D
  .dword 0x00007389
  .dword 0x000073B6
  .dword 0x000073E3
  .dword 0x00007410
  .dword 0x0000743D
  .dword 0x00007469
  .dword 0x00007496
  .dword 0x000074C3
  .dword 0x000074F0
  .dword 0x0000751C
  .dword 0x00007549
  .dword 0x00007576
  .dword 0x000075A2
  .dword 0x000075CF
  .dword 0x000075FC
  .dword 0x00007628
  .dword 0x00007655
  .dword 0x00007681
  .dword 0x000076AE
  .dword 0x000076DB
  .dword 0x00007707
  .dword 0x00007734
  .dword 0x00007760
  .dword 0x0000778C
  .dword 0x000077B9
  .dword 0x000077E5
  .dword 0x00007812
  .dword 0x0000783E
  .dword 0x0000786A
  .dword 0x00007897
  .dword 0x000078C3
  .dword 0x000078EF
  .dword 0x0000791C
  .dword 0x00007948
  .dword 0x00007974
  .dword 0x000079A0
  .dword 0x000079CD
  .dword 0x000079F9
  .dword 0x00007A25
  .dword 0x00007A51
  .dword 0x00007A7D
  .dword 0x00007AAA
  .dword 0x00007AD6
  .dword 0x00007B02
  .dword 0x00007B2E
  .dword 0x00007B5A
  .dword 0x00007B86
  .dword 0x00007BB2
  .dword 0x00007BDE
  .dword 0x00007C0A
  .dword 0x00007C36
  .dword 0x00007C62
  .dword 0x00007C8E
  .dword 0x00007CBA
  .dword 0x00007CE6
  .dword 0x00007D11
  .dword 0x00007D3D
  .dword 0x00007D69
  .dword 0x00007D95
  .dword 0x00007DC1
  .dword 0x00007DEC
  .dword 0x00007E18
  .dword 0x00007E44
  .dword 0x00007E70
  .dword 0x00007E9B
  .dword 0x00007EC7
  .dword 0x00007EF3
  .dword 0x00007F1E
  .dword 0x00007F4A
  .dword 0x00007F76
  .dword 0x00007FA1
  .dword 0x00007FCD
  .dword 0x00007FF8
  .dword 0x00008024
  .dword 0x0000804F
  .dword 0x0000807B
  .dword 0x000080A6
  .dword 0x000080D2
  .dword 0x000080FD
  .dword 0x00008129
  .dword 0x00008154
  .dword 0x0000817F
  .dword 0x000081AB
  .dword 0x000081D6
  .dword 0x00008201
  .dword 0x0000822D
  .dword 0x00008258
  .dword 0x00008283
  .dword 0x000082AE
  .dword 0x000082DA
  .dword 0x00008305
  .dword 0x00008330
  .dword 0x0000835B
  .dword 0x00008386
  .dword 0x000083B1
  .dword 0x000083DC
  .dword 0x00008407
  .dword 0x00008433
  .dword 0x0000845E
  .dword 0x00008489
  .dword 0x000084B4
  .dword 0x000084DF
  .dword 0x00008509
  .dword 0x00008534
  .dword 0x0000855F
  .dword 0x0000858A
  .dword 0x000085B5
  .dword 0x000085E0
  .dword 0x0000860B
  .dword 0x00008636
  .dword 0x00008660
  .dword 0x0000868B
  .dword 0x000086B6
  .dword 0x000086E1
  .dword 0x0000870B
  .dword 0x00008736
  .dword 0x00008761
  .dword 0x0000878B
  .dword 0x000087B6
  .dword 0x000087E1
  .dword 0x0000880B
  .dword 0x00008836
  .dword 0x00008860
  .dword 0x0000888B
  .dword 0x000088B5
  .dword 0x000088E0
  .dword 0x0000890A
  .dword 0x00008935
  .dword 0x0000895F
  .dword 0x0000898A
  .dword 0x000089B4
  .dword 0x000089DE
  .dword 0x00008A09
  .dword 0x00008A33
  .dword 0x00008A5D
  .dword 0x00008A88
  .dword 0x00008AB2
  .dword 0x00008ADC
  .dword 0x00008B06
  .dword 0x00008B31
  .dword 0x00008B5B
  .dword 0x00008B85
  .dword 0x00008BAF
  .dword 0x00008BD9
  .dword 0x00008C03
  .dword 0x00008C2D
  .dword 0x00008C57
  .dword 0x00008C81
  .dword 0x00008CAB
  .dword 0x00008CD5
  .dword 0x00008CFF
  .dword 0x00008D29
  .dword 0x00008D53
  .dword 0x00008D7D
  .dword 0x00008DA7
  .dword 0x00008DD1
  .dword 0x00008DFB
  .dword 0x00008E24
  .dword 0x00008E4E
  .dword 0x00008E78
  .dword 0x00008EA2
  .dword 0x00008ECC
  .dword 0x00008EF5
  .dword 0x00008F1F
  .dword 0x00008F49
  .dword 0x00008F72
  .dword 0x00008F9C
  .dword 0x00008FC5
  .dword 0x00008FEF
  .dword 0x00009019
  .dword 0x00009042
  .dword 0x0000906C
  .dword 0x00009095
  .dword 0x000090BF
  .dword 0x000090E8
  .dword 0x00009111
  .dword 0x0000913B
  .dword 0x00009164
  .dword 0x0000918E
  .dword 0x000091B7
  .dword 0x000091E0
  .dword 0x0000920A
  .dword 0x00009233
  .dword 0x0000925C
  .dword 0x00009285
  .dword 0x000092AF
  .dword 0x000092D8
  .dword 0x00009301
  .dword 0x0000932A
  .dword 0x00009353
  .dword 0x0000937C
  .dword 0x000093A5
  .dword 0x000093CE
  .dword 0x000093F7
  .dword 0x00009420
  .dword 0x00009449
  .dword 0x00009472
  .dword 0x0000949B
  .dword 0x000094C4
  .dword 0x000094ED
  .dword 0x00009516
  .dword 0x0000953F
  .dword 0x00009568
  .dword 0x00009590
  .dword 0x000095B9
  .dword 0x000095E2
  .dword 0x0000960B
  .dword 0x00009633
  .dword 0x0000965C
  .dword 0x00009685
  .dword 0x000096AD
  .dword 0x000096D6
  .dword 0x000096FF
  .dword 0x00009727
  .dword 0x00009750
  .dword 0x00009778
  .dword 0x000097A1
  .dword 0x000097C9
  .dword 0x000097F2
  .dword 0x0000981A
  .dword 0x00009843
  .dword 0x0000986B
  .dword 0x00009893
  .dword 0x000098BC
  .dword 0x000098E4
  .dword 0x0000990C
  .dword 0x00009935
  .dword 0x0000995D
  .dword 0x00009985
  .dword 0x000099AD
  .dword 0x000099D6
  .dword 0x000099FE
  .dword 0x00009A26
  .dword 0x00009A4E
  .dword 0x00009A76
  .dword 0x00009A9E
  .dword 0x00009AC6
  .dword 0x00009AEE
  .dword 0x00009B16
  .dword 0x00009B3E
  .dword 0x00009B66
  .dword 0x00009B8E
  .dword 0x00009BB6
  .dword 0x00009BDE
  .dword 0x00009C06
  .dword 0x00009C2E
  .dword 0x00009C55
  .dword 0x00009C7D
  .dword 0x00009CA5
  .dword 0x00009CCD
  .dword 0x00009CF4
  .dword 0x00009D1C
  .dword 0x00009D44
  .dword 0x00009D6B
  .dword 0x00009D93
  .dword 0x00009DBB
  .dword 0x00009DE2
  .dword 0x00009E0A
  .dword 0x00009E31
  .dword 0x00009E59
  .dword 0x00009E80
  .dword 0x00009EA8
  .dword 0x00009ECF
  .dword 0x00009EF7
  .dword 0x00009F1E
  .dword 0x00009F45
  .dword 0x00009F6D
  .dword 0x00009F94
  .dword 0x00009FBB
  .dword 0x00009FE3
  .dword 0x0000A00A
  .dword 0x0000A031
  .dword 0x0000A058
  .dword 0x0000A07F
  .dword 0x0000A0A7
  .dword 0x0000A0CE
  .dword 0x0000A0F5
  .dword 0x0000A11C
  .dword 0x0000A143
  .dword 0x0000A16A
  .dword 0x0000A191
  .dword 0x0000A1B8
  .dword 0x0000A1DF
  .dword 0x0000A206
  .dword 0x0000A22D
  .dword 0x0000A254
  .dword 0x0000A27B
  .dword 0x0000A2A1
  .dword 0x0000A2C8
  .dword 0x0000A2EF
  .dword 0x0000A316
  .dword 0x0000A33C
  .dword 0x0000A363
  .dword 0x0000A38A
  .dword 0x0000A3B0
  .dword 0x0000A3D7
  .dword 0x0000A3FE
  .dword 0x0000A424
  .dword 0x0000A44B
  .dword 0x0000A471
  .dword 0x0000A498
  .dword 0x0000A4BE
  .dword 0x0000A4E5
  .dword 0x0000A50B
  .dword 0x0000A532
  .dword 0x0000A558
  .dword 0x0000A57E
  .dword 0x0000A5A5
  .dword 0x0000A5CB
  .dword 0x0000A5F1
  .dword 0x0000A618
  .dword 0x0000A63E
  .dword 0x0000A664
  .dword 0x0000A68A
  .dword 0x0000A6B0
  .dword 0x0000A6D7
  .dword 0x0000A6FD
  .dword 0x0000A723
  .dword 0x0000A749
  .dword 0x0000A76F
  .dword 0x0000A795
  .dword 0x0000A7BB
  .dword 0x0000A7E1
  .dword 0x0000A807
  .dword 0x0000A82D
  .dword 0x0000A853
  .dword 0x0000A878
  .dword 0x0000A89E
  .dword 0x0000A8C4
  .dword 0x0000A8EA
  .dword 0x0000A910
  .dword 0x0000A935
  .dword 0x0000A95B
  .dword 0x0000A981
  .dword 0x0000A9A6
  .dword 0x0000A9CC
  .dword 0x0000A9F2
  .dword 0x0000AA17
  .dword 0x0000AA3D
  .dword 0x0000AA62
  .dword 0x0000AA88
  .dword 0x0000AAAD
  .dword 0x0000AAD3
  .dword 0x0000AAF8
  .dword 0x0000AB1E
  .dword 0x0000AB43
  .dword 0x0000AB68
  .dword 0x0000AB8E
  .dword 0x0000ABB3
  .dword 0x0000ABD8
  .dword 0x0000ABFD
  .dword 0x0000AC23
  .dword 0x0000AC48
  .dword 0x0000AC6D
  .dword 0x0000AC92
  .dword 0x0000ACB7
  .dword 0x0000ACDC
  .dword 0x0000AD01
  .dword 0x0000AD26
  .dword 0x0000AD4B
  .dword 0x0000AD70
  .dword 0x0000AD95
  .dword 0x0000ADBA
  .dword 0x0000ADDF
  .dword 0x0000AE04
  .dword 0x0000AE29
  .dword 0x0000AE4E
  .dword 0x0000AE73
  .dword 0x0000AE97
  .dword 0x0000AEBC
  .dword 0x0000AEE1
  .dword 0x0000AF06
  .dword 0x0000AF2A
  .dword 0x0000AF4F
  .dword 0x0000AF73
  .dword 0x0000AF98
  .dword 0x0000AFBD
  .dword 0x0000AFE1
  .dword 0x0000B006
  .dword 0x0000B02A
  .dword 0x0000B04F
  .dword 0x0000B073
  .dword 0x0000B097
  .dword 0x0000B0BC
  .dword 0x0000B0E0
  .dword 0x0000B104
  .dword 0x0000B129
  .dword 0x0000B14D
  .dword 0x0000B171
  .dword 0x0000B196
  .dword 0x0000B1BA
  .dword 0x0000B1DE
  .dword 0x0000B202
  .dword 0x0000B226
  .dword 0x0000B24A
  .dword 0x0000B26E
  .dword 0x0000B292
  .dword 0x0000B2B6
  .dword 0x0000B2DA
  .dword 0x0000B2FE
  .dword 0x0000B322
  .dword 0x0000B346
  .dword 0x0000B36A
  .dword 0x0000B38E
  .dword 0x0000B3B2
  .dword 0x0000B3D5
  .dword 0x0000B3F9
  .dword 0x0000B41D
  .dword 0x0000B441
  .dword 0x0000B464
  .dword 0x0000B488
  .dword 0x0000B4AC
  .dword 0x0000B4CF
  .dword 0x0000B4F3
  .dword 0x0000B516
  .dword 0x0000B53A
  .dword 0x0000B55D
  .dword 0x0000B581
  .dword 0x0000B5A4
  .dword 0x0000B5C8
  .dword 0x0000B5EB
  .dword 0x0000B60E
  .dword 0x0000B632
  .dword 0x0000B655
  .dword 0x0000B678
  .dword 0x0000B69B
  .dword 0x0000B6BF
  .dword 0x0000B6E2
  .dword 0x0000B705
  .dword 0x0000B728
  .dword 0x0000B74B
  .dword 0x0000B76E
  .dword 0x0000B791
  .dword 0x0000B7B4
  .dword 0x0000B7D7
  .dword 0x0000B7FA
  .dword 0x0000B81D
  .dword 0x0000B840
  .dword 0x0000B863
  .dword 0x0000B886
  .dword 0x0000B8A9
  .dword 0x0000B8CC
  .dword 0x0000B8EE
  .dword 0x0000B911
  .dword 0x0000B934
  .dword 0x0000B956
  .dword 0x0000B979
  .dword 0x0000B99C
  .dword 0x0000B9BE
  .dword 0x0000B9E1
  .dword 0x0000BA03
  .dword 0x0000BA26
  .dword 0x0000BA48
  .dword 0x0000BA6B
  .dword 0x0000BA8D
  .dword 0x0000BAB0
  .dword 0x0000BAD2
  .dword 0x0000BAF5
  .dword 0x0000BB17
  .dword 0x0000BB39
  .dword 0x0000BB5B
  .dword 0x0000BB7E
  .dword 0x0000BBA0
  .dword 0x0000BBC2
  .dword 0x0000BBE4
  .dword 0x0000BC06
  .dword 0x0000BC28
  .dword 0x0000BC4A
  .dword 0x0000BC6D
  .dword 0x0000BC8F
  .dword 0x0000BCB1
  .dword 0x0000BCD2
  .dword 0x0000BCF4
  .dword 0x0000BD16
  .dword 0x0000BD38
  .dword 0x0000BD5A
  .dword 0x0000BD7C
  .dword 0x0000BD9E
  .dword 0x0000BDBF
  .dword 0x0000BDE1
  .dword 0x0000BE03
  .dword 0x0000BE24
  .dword 0x0000BE46
  .dword 0x0000BE68
  .dword 0x0000BE89
  .dword 0x0000BEAB
  .dword 0x0000BECC
  .dword 0x0000BEEE
  .dword 0x0000BF0F
  .dword 0x0000BF31
  .dword 0x0000BF52
  .dword 0x0000BF74
  .dword 0x0000BF95
  .dword 0x0000BFB6
  .dword 0x0000BFD8
  .dword 0x0000BFF9
  .dword 0x0000C01A
  .dword 0x0000C03B
  .dword 0x0000C05C
  .dword 0x0000C07E
  .dword 0x0000C09F
  .dword 0x0000C0C0
  .dword 0x0000C0E1
  .dword 0x0000C102
  .dword 0x0000C123
  .dword 0x0000C144
  .dword 0x0000C165
  .dword 0x0000C186
  .dword 0x0000C1A7
  .dword 0x0000C1C8
  .dword 0x0000C1E8
  .dword 0x0000C209
  .dword 0x0000C22A
  .dword 0x0000C24B
  .dword 0x0000C26B
  .dword 0x0000C28C
  .dword 0x0000C2AD
  .dword 0x0000C2CD
  .dword 0x0000C2EE
  .dword 0x0000C30F
  .dword 0x0000C32F
  .dword 0x0000C350
  .dword 0x0000C370
  .dword 0x0000C390
  .dword 0x0000C3B1
  .dword 0x0000C3D1
  .dword 0x0000C3F2
  .dword 0x0000C412
  .dword 0x0000C432
  .dword 0x0000C453
  .dword 0x0000C473
  .dword 0x0000C493
  .dword 0x0000C4B3
  .dword 0x0000C4D3
  .dword 0x0000C4F4
  .dword 0x0000C514
  .dword 0x0000C534
  .dword 0x0000C554
  .dword 0x0000C574
  .dword 0x0000C594
  .dword 0x0000C5B4
  .dword 0x0000C5D4
  .dword 0x0000C5F3
  .dword 0x0000C613
  .dword 0x0000C633
  .dword 0x0000C653
  .dword 0x0000C673
  .dword 0x0000C692
  .dword 0x0000C6B2
  .dword 0x0000C6D2
  .dword 0x0000C6F1
  .dword 0x0000C711
  .dword 0x0000C731
  .dword 0x0000C750
  .dword 0x0000C770
  .dword 0x0000C78F
  .dword 0x0000C7AF
  .dword 0x0000C7CE
  .dword 0x0000C7EE
  .dword 0x0000C80D
  .dword 0x0000C82C
  .dword 0x0000C84C
  .dword 0x0000C86B
  .dword 0x0000C88A
  .dword 0x0000C8A9
  .dword 0x0000C8C9
  .dword 0x0000C8E8
  .dword 0x0000C907
  .dword 0x0000C926
  .dword 0x0000C945
  .dword 0x0000C964
  .dword 0x0000C983
  .dword 0x0000C9A2
  .dword 0x0000C9C1
  .dword 0x0000C9E0
  .dword 0x0000C9FF
  .dword 0x0000CA1E
  .dword 0x0000CA3D
  .dword 0x0000CA5B
  .dword 0x0000CA7A
  .dword 0x0000CA99
  .dword 0x0000CAB8
  .dword 0x0000CAD6
  .dword 0x0000CAF5
  .dword 0x0000CB14
  .dword 0x0000CB32
  .dword 0x0000CB51
  .dword 0x0000CB6F
  .dword 0x0000CB8E
  .dword 0x0000CBAC
  .dword 0x0000CBCB
  .dword 0x0000CBE9
  .dword 0x0000CC07
  .dword 0x0000CC26
  .dword 0x0000CC44
  .dword 0x0000CC62
  .dword 0x0000CC81
  .dword 0x0000CC9F
  .dword 0x0000CCBD
  .dword 0x0000CCDB
  .dword 0x0000CCF9
  .dword 0x0000CD17
  .dword 0x0000CD36
  .dword 0x0000CD54
  .dword 0x0000CD72
  .dword 0x0000CD90
  .dword 0x0000CDAD
  .dword 0x0000CDCB
  .dword 0x0000CDE9
  .dword 0x0000CE07
  .dword 0x0000CE25
  .dword 0x0000CE43
  .dword 0x0000CE60
  .dword 0x0000CE7E
  .dword 0x0000CE9C
  .dword 0x0000CEBA
  .dword 0x0000CED7
  .dword 0x0000CEF5
  .dword 0x0000CF12
  .dword 0x0000CF30
  .dword 0x0000CF4D
  .dword 0x0000CF6B
  .dword 0x0000CF88
  .dword 0x0000CFA6
  .dword 0x0000CFC3
  .dword 0x0000CFE0
  .dword 0x0000CFFE
  .dword 0x0000D01B
  .dword 0x0000D038
  .dword 0x0000D056
  .dword 0x0000D073
  .dword 0x0000D090
  .dword 0x0000D0AD
  .dword 0x0000D0CA
  .dword 0x0000D0E7
  .dword 0x0000D104
  .dword 0x0000D121
  .dword 0x0000D13E
  .dword 0x0000D15B
  .dword 0x0000D178
  .dword 0x0000D195
  .dword 0x0000D1B2
  .dword 0x0000D1CF
  .dword 0x0000D1EB
  .dword 0x0000D208
  .dword 0x0000D225
  .dword 0x0000D242
  .dword 0x0000D25E
  .dword 0x0000D27B
  .dword 0x0000D298
  .dword 0x0000D2B4
  .dword 0x0000D2D1
  .dword 0x0000D2ED
  .dword 0x0000D30A
  .dword 0x0000D326
  .dword 0x0000D342
  .dword 0x0000D35F
  .dword 0x0000D37B
  .dword 0x0000D397
  .dword 0x0000D3B4
  .dword 0x0000D3D0
  .dword 0x0000D3EC
  .dword 0x0000D408
  .dword 0x0000D425
  .dword 0x0000D441
  .dword 0x0000D45D
  .dword 0x0000D479
  .dword 0x0000D495
  .dword 0x0000D4B1
  .dword 0x0000D4CD
  .dword 0x0000D4E9
  .dword 0x0000D505
  .dword 0x0000D520
  .dword 0x0000D53C
  .dword 0x0000D558
  .dword 0x0000D574
  .dword 0x0000D590
  .dword 0x0000D5AB
  .dword 0x0000D5C7
  .dword 0x0000D5E3
  .dword 0x0000D5FE
  .dword 0x0000D61A
  .dword 0x0000D635
  .dword 0x0000D651
  .dword 0x0000D66C
  .dword 0x0000D688
  .dword 0x0000D6A3
  .dword 0x0000D6BE
  .dword 0x0000D6DA
  .dword 0x0000D6F5
  .dword 0x0000D710
  .dword 0x0000D72C
  .dword 0x0000D747
  .dword 0x0000D762
  .dword 0x0000D77D
  .dword 0x0000D798
  .dword 0x0000D7B3
  .dword 0x0000D7CE
  .dword 0x0000D7EA
  .dword 0x0000D804
  .dword 0x0000D81F
  .dword 0x0000D83A
  .dword 0x0000D855
  .dword 0x0000D870
  .dword 0x0000D88B
  .dword 0x0000D8A6
  .dword 0x0000D8C1
  .dword 0x0000D8DB
  .dword 0x0000D8F6
  .dword 0x0000D911
  .dword 0x0000D92B
  .dword 0x0000D946
  .dword 0x0000D960
  .dword 0x0000D97B
  .dword 0x0000D995
  .dword 0x0000D9B0
  .dword 0x0000D9CA
  .dword 0x0000D9E5
  .dword 0x0000D9FF
  .dword 0x0000DA19
  .dword 0x0000DA34
  .dword 0x0000DA4E
  .dword 0x0000DA68
  .dword 0x0000DA82
  .dword 0x0000DA9D
  .dword 0x0000DAB7
  .dword 0x0000DAD1
  .dword 0x0000DAEB
  .dword 0x0000DB05
  .dword 0x0000DB1F
  .dword 0x0000DB39
  .dword 0x0000DB53
  .dword 0x0000DB6D
  .dword 0x0000DB87
  .dword 0x0000DBA1
  .dword 0x0000DBBA
  .dword 0x0000DBD4
  .dword 0x0000DBEE
  .dword 0x0000DC08
  .dword 0x0000DC21
  .dword 0x0000DC3B
  .dword 0x0000DC54
  .dword 0x0000DC6E
  .dword 0x0000DC88
  .dword 0x0000DCA1
  .dword 0x0000DCBB
  .dword 0x0000DCD4
  .dword 0x0000DCED
  .dword 0x0000DD07
  .dword 0x0000DD20
  .dword 0x0000DD39
  .dword 0x0000DD53
  .dword 0x0000DD6C
  .dword 0x0000DD85
  .dword 0x0000DD9E
  .dword 0x0000DDB8
  .dword 0x0000DDD1
  .dword 0x0000DDEA
  .dword 0x0000DE03
  .dword 0x0000DE1C
  .dword 0x0000DE35
  .dword 0x0000DE4E
  .dword 0x0000DE67
  .dword 0x0000DE7F
  .dword 0x0000DE98
  .dword 0x0000DEB1
  .dword 0x0000DECA
  .dword 0x0000DEE3
  .dword 0x0000DEFB
  .dword 0x0000DF14
  .dword 0x0000DF2D
  .dword 0x0000DF45
  .dword 0x0000DF5E
  .dword 0x0000DF76
  .dword 0x0000DF8F
  .dword 0x0000DFA7
  .dword 0x0000DFC0
  .dword 0x0000DFD8
  .dword 0x0000DFF1
  .dword 0x0000E009
  .dword 0x0000E021
  .dword 0x0000E03A
  .dword 0x0000E052
  .dword 0x0000E06A
  .dword 0x0000E082
  .dword 0x0000E09A
  .dword 0x0000E0B2
  .dword 0x0000E0CA
  .dword 0x0000E0E2
  .dword 0x0000E0FA
  .dword 0x0000E112
  .dword 0x0000E12A
  .dword 0x0000E142
  .dword 0x0000E15A
  .dword 0x0000E172
  .dword 0x0000E18A
  .dword 0x0000E1A2
  .dword 0x0000E1B9
  .dword 0x0000E1D1
  .dword 0x0000E1E9
  .dword 0x0000E200
  .dword 0x0000E218
  .dword 0x0000E22F
  .dword 0x0000E247
  .dword 0x0000E25E
  .dword 0x0000E276
  .dword 0x0000E28D
  .dword 0x0000E2A5
  .dword 0x0000E2BC
  .dword 0x0000E2D3
  .dword 0x0000E2EB
  .dword 0x0000E302
  .dword 0x0000E319
  .dword 0x0000E330
  .dword 0x0000E347
  .dword 0x0000E35F
  .dword 0x0000E376
  .dword 0x0000E38D
  .dword 0x0000E3A4
  .dword 0x0000E3BB
  .dword 0x0000E3D2
  .dword 0x0000E3E9
  .dword 0x0000E3FF
  .dword 0x0000E416
  .dword 0x0000E42D
  .dword 0x0000E444
  .dword 0x0000E45B
  .dword 0x0000E471
  .dword 0x0000E488
  .dword 0x0000E49F
  .dword 0x0000E4B5
  .dword 0x0000E4CC
  .dword 0x0000E4E2
  .dword 0x0000E4F9
  .dword 0x0000E50F
  .dword 0x0000E526
  .dword 0x0000E53C
  .dword 0x0000E552
  .dword 0x0000E569
  .dword 0x0000E57F
  .dword 0x0000E595
  .dword 0x0000E5AB
  .dword 0x0000E5C2
  .dword 0x0000E5D8
  .dword 0x0000E5EE
  .dword 0x0000E604
  .dword 0x0000E61A
  .dword 0x0000E630
  .dword 0x0000E646
  .dword 0x0000E65C
  .dword 0x0000E672
  .dword 0x0000E688
  .dword 0x0000E69E
  .dword 0x0000E6B3
  .dword 0x0000E6C9
  .dword 0x0000E6DF
  .dword 0x0000E6F5
  .dword 0x0000E70A
  .dword 0x0000E720
  .dword 0x0000E736
  .dword 0x0000E74B
  .dword 0x0000E761
  .dword 0x0000E776
  .dword 0x0000E78C
  .dword 0x0000E7A1
  .dword 0x0000E7B6
  .dword 0x0000E7CC
  .dword 0x0000E7E1
  .dword 0x0000E7F6
  .dword 0x0000E80C
  .dword 0x0000E821
  .dword 0x0000E836
  .dword 0x0000E84B
  .dword 0x0000E860
  .dword 0x0000E875
  .dword 0x0000E88A
  .dword 0x0000E89F
  .dword 0x0000E8B4
  .dword 0x0000E8C9
  .dword 0x0000E8DE
  .dword 0x0000E8F3
  .dword 0x0000E908
  .dword 0x0000E91D
  .dword 0x0000E931
  .dword 0x0000E946
  .dword 0x0000E95B
  .dword 0x0000E96F
  .dword 0x0000E984
  .dword 0x0000E999
  .dword 0x0000E9AD
  .dword 0x0000E9C2
  .dword 0x0000E9D6
  .dword 0x0000E9EB
  .dword 0x0000E9FF
  .dword 0x0000EA13
  .dword 0x0000EA28
  .dword 0x0000EA3C
  .dword 0x0000EA50
  .dword 0x0000EA64
  .dword 0x0000EA79
  .dword 0x0000EA8D
  .dword 0x0000EAA1
  .dword 0x0000EAB5
  .dword 0x0000EAC9
  .dword 0x0000EADD
  .dword 0x0000EAF1
  .dword 0x0000EB05
  .dword 0x0000EB19
  .dword 0x0000EB2D
  .dword 0x0000EB41
  .dword 0x0000EB54
  .dword 0x0000EB68
  .dword 0x0000EB7C
  .dword 0x0000EB90
  .dword 0x0000EBA3
  .dword 0x0000EBB7
  .dword 0x0000EBCB
  .dword 0x0000EBDE
  .dword 0x0000EBF2
  .dword 0x0000EC05
  .dword 0x0000EC19
  .dword 0x0000EC2C
  .dword 0x0000EC3F
  .dword 0x0000EC53
  .dword 0x0000EC66
  .dword 0x0000EC79
  .dword 0x0000EC8C
  .dword 0x0000ECA0
  .dword 0x0000ECB3
  .dword 0x0000ECC6
  .dword 0x0000ECD9
  .dword 0x0000ECEC
  .dword 0x0000ECFF
  .dword 0x0000ED12
  .dword 0x0000ED25
  .dword 0x0000ED38
  .dword 0x0000ED4B
  .dword 0x0000ED5E
  .dword 0x0000ED71
  .dword 0x0000ED83
  .dword 0x0000ED96
  .dword 0x0000EDA9
  .dword 0x0000EDBB
  .dword 0x0000EDCE
  .dword 0x0000EDE1
  .dword 0x0000EDF3
  .dword 0x0000EE06
  .dword 0x0000EE18
  .dword 0x0000EE2B
  .dword 0x0000EE3D
  .dword 0x0000EE4F
  .dword 0x0000EE62
  .dword 0x0000EE74
  .dword 0x0000EE86
  .dword 0x0000EE99
  .dword 0x0000EEAB
  .dword 0x0000EEBD
  .dword 0x0000EECF
  .dword 0x0000EEE1
  .dword 0x0000EEF3
  .dword 0x0000EF05
  .dword 0x0000EF17
  .dword 0x0000EF29
  .dword 0x0000EF3B
  .dword 0x0000EF4D
  .dword 0x0000EF5F
  .dword 0x0000EF71
  .dword 0x0000EF82
  .dword 0x0000EF94
  .dword 0x0000EFA6
  .dword 0x0000EFB7
  .dword 0x0000EFC9
  .dword 0x0000EFDB
  .dword 0x0000EFEC
  .dword 0x0000EFFE
  .dword 0x0000F00F
  .dword 0x0000F021
  .dword 0x0000F032
  .dword 0x0000F043
  .dword 0x0000F055
  .dword 0x0000F066
  .dword 0x0000F077
  .dword 0x0000F089
  .dword 0x0000F09A
  .dword 0x0000F0AB
  .dword 0x0000F0BC
  .dword 0x0000F0CD
  .dword 0x0000F0DE
  .dword 0x0000F0EF
  .dword 0x0000F100
  .dword 0x0000F111
  .dword 0x0000F122
  .dword 0x0000F133
  .dword 0x0000F144
  .dword 0x0000F154
  .dword 0x0000F165
  .dword 0x0000F176
  .dword 0x0000F187
  .dword 0x0000F197
  .dword 0x0000F1A8
  .dword 0x0000F1B8
  .dword 0x0000F1C9
  .dword 0x0000F1D9
  .dword 0x0000F1EA
  .dword 0x0000F1FA
  .dword 0x0000F20B
  .dword 0x0000F21B
  .dword 0x0000F22B
  .dword 0x0000F23C
  .dword 0x0000F24C
  .dword 0x0000F25C
  .dword 0x0000F26C
  .dword 0x0000F27C
  .dword 0x0000F28C
  .dword 0x0000F29C
  .dword 0x0000F2AD
  .dword 0x0000F2BD
  .dword 0x0000F2CC
  .dword 0x0000F2DC
  .dword 0x0000F2EC
  .dword 0x0000F2FC
  .dword 0x0000F30C
  .dword 0x0000F31C
  .dword 0x0000F32B
  .dword 0x0000F33B
  .dword 0x0000F34B
  .dword 0x0000F35A
  .dword 0x0000F36A
  .dword 0x0000F379
  .dword 0x0000F389
  .dword 0x0000F398
  .dword 0x0000F3A8
  .dword 0x0000F3B7
  .dword 0x0000F3C7
  .dword 0x0000F3D6
  .dword 0x0000F3E5
  .dword 0x0000F3F5
  .dword 0x0000F404
  .dword 0x0000F413
  .dword 0x0000F422
  .dword 0x0000F431
  .dword 0x0000F440
  .dword 0x0000F44F
  .dword 0x0000F45E
  .dword 0x0000F46D
  .dword 0x0000F47C
  .dword 0x0000F48B
  .dword 0x0000F49A
  .dword 0x0000F4A9
  .dword 0x0000F4B8
  .dword 0x0000F4C6
  .dword 0x0000F4D5
  .dword 0x0000F4E4
  .dword 0x0000F4F2
  .dword 0x0000F501
  .dword 0x0000F50F
  .dword 0x0000F51E
  .dword 0x0000F52C
  .dword 0x0000F53B
  .dword 0x0000F549
  .dword 0x0000F558
  .dword 0x0000F566
  .dword 0x0000F574
  .dword 0x0000F582
  .dword 0x0000F591
  .dword 0x0000F59F
  .dword 0x0000F5AD
  .dword 0x0000F5BB
  .dword 0x0000F5C9
  .dword 0x0000F5D7
  .dword 0x0000F5E5
  .dword 0x0000F5F3
  .dword 0x0000F601
  .dword 0x0000F60F
  .dword 0x0000F61D
  .dword 0x0000F62B
  .dword 0x0000F638
  .dword 0x0000F646
  .dword 0x0000F654
  .dword 0x0000F662
  .dword 0x0000F66F
  .dword 0x0000F67D
  .dword 0x0000F68A
  .dword 0x0000F698
  .dword 0x0000F6A5
  .dword 0x0000F6B3
  .dword 0x0000F6C0
  .dword 0x0000F6CE
  .dword 0x0000F6DB
  .dword 0x0000F6E8
  .dword 0x0000F6F5
  .dword 0x0000F703
  .dword 0x0000F710
  .dword 0x0000F71D
  .dword 0x0000F72A
  .dword 0x0000F737
  .dword 0x0000F744
  .dword 0x0000F751
  .dword 0x0000F75E
  .dword 0x0000F76B
  .dword 0x0000F778
  .dword 0x0000F785
  .dword 0x0000F792
  .dword 0x0000F79E
  .dword 0x0000F7AB
  .dword 0x0000F7B8
  .dword 0x0000F7C5
  .dword 0x0000F7D1
  .dword 0x0000F7DE
  .dword 0x0000F7EA
  .dword 0x0000F7F7
  .dword 0x0000F803
  .dword 0x0000F810
  .dword 0x0000F81C
  .dword 0x0000F828
  .dword 0x0000F835
  .dword 0x0000F841
  .dword 0x0000F84D
  .dword 0x0000F85A
  .dword 0x0000F866
  .dword 0x0000F872
  .dword 0x0000F87E
  .dword 0x0000F88A
  .dword 0x0000F896
  .dword 0x0000F8A2
  .dword 0x0000F8AE
  .dword 0x0000F8BA
  .dword 0x0000F8C6
  .dword 0x0000F8D2
  .dword 0x0000F8DD
  .dword 0x0000F8E9
  .dword 0x0000F8F5
  .dword 0x0000F901
  .dword 0x0000F90C
  .dword 0x0000F918
  .dword 0x0000F923
  .dword 0x0000F92F
  .dword 0x0000F93B
  .dword 0x0000F946
  .dword 0x0000F951
  .dword 0x0000F95D
  .dword 0x0000F968
  .dword 0x0000F973
  .dword 0x0000F97F
  .dword 0x0000F98A
  .dword 0x0000F995
  .dword 0x0000F9A0
  .dword 0x0000F9AB
  .dword 0x0000F9B7
  .dword 0x0000F9C2
  .dword 0x0000F9CD
  .dword 0x0000F9D8
  .dword 0x0000F9E3
  .dword 0x0000F9ED
  .dword 0x0000F9F8
  .dword 0x0000FA03
  .dword 0x0000FA0E
  .dword 0x0000FA19
  .dword 0x0000FA23
  .dword 0x0000FA2E
  .dword 0x0000FA39
  .dword 0x0000FA43
  .dword 0x0000FA4E
  .dword 0x0000FA58
  .dword 0x0000FA63
  .dword 0x0000FA6D
  .dword 0x0000FA78
  .dword 0x0000FA82
  .dword 0x0000FA8C
  .dword 0x0000FA97
  .dword 0x0000FAA1
  .dword 0x0000FAAB
  .dword 0x0000FAB5
  .dword 0x0000FAC0
  .dword 0x0000FACA
  .dword 0x0000FAD4
  .dword 0x0000FADE
  .dword 0x0000FAE8
  .dword 0x0000FAF2
  .dword 0x0000FAFC
  .dword 0x0000FB05
  .dword 0x0000FB0F
  .dword 0x0000FB19
  .dword 0x0000FB23
  .dword 0x0000FB2D
  .dword 0x0000FB36
  .dword 0x0000FB40
  .dword 0x0000FB4A
  .dword 0x0000FB53
  .dword 0x0000FB5D
  .dword 0x0000FB66
  .dword 0x0000FB70
  .dword 0x0000FB79
  .dword 0x0000FB83
  .dword 0x0000FB8C
  .dword 0x0000FB95
  .dword 0x0000FB9E
  .dword 0x0000FBA8
  .dword 0x0000FBB1
  .dword 0x0000FBBA
  .dword 0x0000FBC3
  .dword 0x0000FBCC
  .dword 0x0000FBD5
  .dword 0x0000FBDE
  .dword 0x0000FBE7
  .dword 0x0000FBF0
  .dword 0x0000FBF9
  .dword 0x0000FC02
  .dword 0x0000FC0B
  .dword 0x0000FC14
  .dword 0x0000FC1C
  .dword 0x0000FC25
  .dword 0x0000FC2E
  .dword 0x0000FC36
  .dword 0x0000FC3F
  .dword 0x0000FC48
  .dword 0x0000FC50
  .dword 0x0000FC58
  .dword 0x0000FC61
  .dword 0x0000FC69
  .dword 0x0000FC72
  .dword 0x0000FC7A
  .dword 0x0000FC82
  .dword 0x0000FC8B
  .dword 0x0000FC93
  .dword 0x0000FC9B
  .dword 0x0000FCA3
  .dword 0x0000FCAB
  .dword 0x0000FCB3
  .dword 0x0000FCBB
  .dword 0x0000FCC3
  .dword 0x0000FCCB
  .dword 0x0000FCD3
  .dword 0x0000FCDB
  .dword 0x0000FCE3
  .dword 0x0000FCEB
  .dword 0x0000FCF2
  .dword 0x0000FCFA
  .dword 0x0000FD02
  .dword 0x0000FD09
  .dword 0x0000FD11
  .dword 0x0000FD19
  .dword 0x0000FD20
  .dword 0x0000FD28
  .dword 0x0000FD2F
  .dword 0x0000FD36
  .dword 0x0000FD3E
  .dword 0x0000FD45
  .dword 0x0000FD4C
  .dword 0x0000FD54
  .dword 0x0000FD5B
  .dword 0x0000FD62
  .dword 0x0000FD69
  .dword 0x0000FD70
  .dword 0x0000FD77
  .dword 0x0000FD7F
  .dword 0x0000FD86
  .dword 0x0000FD8C
  .dword 0x0000FD93
  .dword 0x0000FD9A
  .dword 0x0000FDA1
  .dword 0x0000FDA8
  .dword 0x0000FDAF
  .dword 0x0000FDB5
  .dword 0x0000FDBC
  .dword 0x0000FDC3
  .dword 0x0000FDC9
  .dword 0x0000FDD0
  .dword 0x0000FDD6
  .dword 0x0000FDDD
  .dword 0x0000FDE3
  .dword 0x0000FDEA
  .dword 0x0000FDF0
  .dword 0x0000FDF7
  .dword 0x0000FDFD
  .dword 0x0000FE03
  .dword 0x0000FE09
  .dword 0x0000FE10
  .dword 0x0000FE16
  .dword 0x0000FE1C
  .dword 0x0000FE22
  .dword 0x0000FE28
  .dword 0x0000FE2E
  .dword 0x0000FE34
  .dword 0x0000FE3A
  .dword 0x0000FE40
  .dword 0x0000FE46
  .dword 0x0000FE4B
  .dword 0x0000FE51
  .dword 0x0000FE57
  .dword 0x0000FE5D
  .dword 0x0000FE62
  .dword 0x0000FE68
  .dword 0x0000FE6D
  .dword 0x0000FE73
  .dword 0x0000FE78
  .dword 0x0000FE7E
  .dword 0x0000FE83
  .dword 0x0000FE89
  .dword 0x0000FE8E
  .dword 0x0000FE93
  .dword 0x0000FE99
  .dword 0x0000FE9E
  .dword 0x0000FEA3
  .dword 0x0000FEA8
  .dword 0x0000FEAD
  .dword 0x0000FEB2
  .dword 0x0000FEB7
  .dword 0x0000FEBC
  .dword 0x0000FEC1
  .dword 0x0000FEC6
  .dword 0x0000FECB
  .dword 0x0000FED0
  .dword 0x0000FED5
  .dword 0x0000FEDA
  .dword 0x0000FEDE
  .dword 0x0000FEE3
  .dword 0x0000FEE8
  .dword 0x0000FEEC
  .dword 0x0000FEF1
  .dword 0x0000FEF6
  .dword 0x0000FEFA
  .dword 0x0000FEFF
  .dword 0x0000FF03
  .dword 0x0000FF07
  .dword 0x0000FF0C
  .dword 0x0000FF10
  .dword 0x0000FF14
  .dword 0x0000FF19
  .dword 0x0000FF1D
  .dword 0x0000FF21
  .dword 0x0000FF25
  .dword 0x0000FF29
  .dword 0x0000FF2D
  .dword 0x0000FF31
  .dword 0x0000FF35
  .dword 0x0000FF39
  .dword 0x0000FF3D
  .dword 0x0000FF41
  .dword 0x0000FF45
  .dword 0x0000FF48
  .dword 0x0000FF4C
  .dword 0x0000FF50
  .dword 0x0000FF53
  .dword 0x0000FF57
  .dword 0x0000FF5B
  .dword 0x0000FF5E
  .dword 0x0000FF62
  .dword 0x0000FF65
  .dword 0x0000FF69
  .dword 0x0000FF6C
  .dword 0x0000FF6F
  .dword 0x0000FF73
  .dword 0x0000FF76
  .dword 0x0000FF79
  .dword 0x0000FF7C
  .dword 0x0000FF80
  .dword 0x0000FF83
  .dword 0x0000FF86
  .dword 0x0000FF89
  .dword 0x0000FF8C
  .dword 0x0000FF8F
  .dword 0x0000FF92
  .dword 0x0000FF95
  .dword 0x0000FF97
  .dword 0x0000FF9A
  .dword 0x0000FF9D
  .dword 0x0000FFA0
  .dword 0x0000FFA2
  .dword 0x0000FFA5
  .dword 0x0000FFA8
  .dword 0x0000FFAA
  .dword 0x0000FFAD
  .dword 0x0000FFAF
  .dword 0x0000FFB2
  .dword 0x0000FFB4
  .dword 0x0000FFB7
  .dword 0x0000FFB9
  .dword 0x0000FFBB
  .dword 0x0000FFBE
  .dword 0x0000FFC0
  .dword 0x0000FFC2
  .dword 0x0000FFC4
  .dword 0x0000FFC6
  .dword 0x0000FFC8
  .dword 0x0000FFCA
  .dword 0x0000FFCC
  .dword 0x0000FFCE
  .dword 0x0000FFD0
  .dword 0x0000FFD2
  .dword 0x0000FFD4
  .dword 0x0000FFD6
  .dword 0x0000FFD8
  .dword 0x0000FFD9
  .dword 0x0000FFDB
  .dword 0x0000FFDD
  .dword 0x0000FFDE
  .dword 0x0000FFE0
  .dword 0x0000FFE1
  .dword 0x0000FFE3
  .dword 0x0000FFE4
  .dword 0x0000FFE6
  .dword 0x0000FFE7
  .dword 0x0000FFE9
  .dword 0x0000FFEA
  .dword 0x0000FFEB
  .dword 0x0000FFEC
  .dword 0x0000FFEE
  .dword 0x0000FFEF
  .dword 0x0000FFF0
  .dword 0x0000FFF1
  .dword 0x0000FFF2
  .dword 0x0000FFF3
  .dword 0x0000FFF4
  .dword 0x0000FFF5
  .dword 0x0000FFF6
  .dword 0x0000FFF7
  .dword 0x0000FFF7
  .dword 0x0000FFF8
  .dword 0x0000FFF9
  .dword 0x0000FFFA
  .dword 0x0000FFFA
  .dword 0x0000FFFB
  .dword 0x0000FFFB
  .dword 0x0000FFFC
  .dword 0x0000FFFC
  .dword 0x0000FFFD
  .dword 0x0000FFFD
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFE
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF
  .dword 0x0000FFFF

handlers:
  .qword __sigdfl
  .qword __sigdfl
  .qword __sigdfl
  .qword __sigdfl
  .qword __sigdfl
  .qword __sigdfl
  .qword __sigdfl

OptionsMenu:
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x45
  .byte 0x4E
  .byte 0x44
  .byte 0x47
  .byte 0x41
  .byte 0x4D
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_EndGame
  .byte 0x65
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4D
  .byte 0x45
  .byte 0x53
  .byte 0x53
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChangeMessages
  .byte 0x6D
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x44
  .byte 0x45
  .byte 0x54
  .byte 0x41
  .byte 0x49
  .byte 0x4C
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChangeDetail
  .byte 0x67
  .balign 8
  .word 0x0002
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x43
  .byte 0x52
  .byte 0x4E
  .byte 0x53
  .byte 0x5A
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SizeDisplay
  .byte 0x73
  .balign 8
  .word 0xFFFF
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword 0x0000000000000000
  .byte 0x00
  .balign 8
  .word 0x0002
  .byte 0x4D
  .byte 0x5F
  .byte 0x4D
  .byte 0x53
  .byte 0x45
  .byte 0x4E
  .byte 0x53
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChangeSensitivity
  .byte 0x6D
  .balign 8
  .word 0xFFFF
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword 0x0000000000000000
  .byte 0x00
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x56
  .byte 0x4F
  .byte 0x4C
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Sound
  .byte 0x73
  .balign 8

cheat_ammonokey_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0x66
  .byte 0xA2
  .byte 0xFF
  .balign 8

alphSwitchList:
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x47
  .byte 0x4E
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x4E
  .byte 0x47
  .byte 0x4E
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x4F
  .byte 0x57
  .byte 0x4E
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x4F
  .byte 0x57
  .byte 0x4E
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x4D
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x4D
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x50
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x43
  .byte 0x4F
  .byte 0x4D
  .byte 0x50
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x44
  .byte 0x49
  .byte 0x52
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x44
  .byte 0x49
  .byte 0x52
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x45
  .byte 0x58
  .byte 0x49
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x45
  .byte 0x58
  .byte 0x49
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x47
  .byte 0x52
  .byte 0x41
  .byte 0x59
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x47
  .byte 0x52
  .byte 0x41
  .byte 0x59
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x47
  .byte 0x52
  .byte 0x41
  .byte 0x59
  .byte 0x31
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x47
  .byte 0x52
  .byte 0x41
  .byte 0x59
  .byte 0x31
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x41
  .byte 0x4C
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x41
  .byte 0x4C
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x50
  .byte 0x49
  .byte 0x50
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x50
  .byte 0x49
  .byte 0x50
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x4C
  .byte 0x41
  .byte 0x44
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x4C
  .byte 0x41
  .byte 0x44
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x41
  .byte 0x52
  .byte 0x47
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x41
  .byte 0x52
  .byte 0x47
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x31
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x31
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x32
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x32
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x45
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x45
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x52
  .byte 0x54
  .byte 0x4E
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x52
  .byte 0x54
  .byte 0x4E
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x30
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x30
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x33
  .byte 0x53
  .byte 0x30
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x33
  .byte 0x53
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x34
  .byte 0x53
  .byte 0x30
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x34
  .byte 0x53
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0001
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x4C
  .byte 0x55
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x4C
  .byte 0x55
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x43
  .byte 0x4D
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x43
  .byte 0x4D
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x47
  .byte 0x41
  .byte 0x52
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x47
  .byte 0x41
  .byte 0x52
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x47
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x47
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x48
  .byte 0x4F
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x48
  .byte 0x4F
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x4C
  .byte 0x49
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x4C
  .byte 0x49
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x41
  .byte 0x54
  .byte 0x59
  .byte 0x52
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x41
  .byte 0x54
  .byte 0x59
  .byte 0x52
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x4B
  .byte 0x49
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x4B
  .byte 0x49
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x56
  .byte 0x49
  .byte 0x4E
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x56
  .byte 0x49
  .byte 0x4E
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x57
  .byte 0x4F
  .byte 0x4F
  .byte 0x44
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x57
  .byte 0x4F
  .byte 0x4F
  .byte 0x44
  .byte 0x00
  .byte 0x00
  .word 0x0002
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x50
  .byte 0x41
  .byte 0x4E
  .byte 0x45
  .byte 0x4C
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x50
  .byte 0x41
  .byte 0x4E
  .byte 0x45
  .byte 0x4C
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x57
  .byte 0x44
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x57
  .byte 0x44
  .byte 0x4D
  .byte 0x45
  .byte 0x54
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x42
  .byte 0x52
  .byte 0x49
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x42
  .byte 0x52
  .byte 0x49
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x4D
  .byte 0x4F
  .byte 0x44
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x4D
  .byte 0x4F
  .byte 0x44
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x5A
  .byte 0x49
  .byte 0x4D
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x5A
  .byte 0x49
  .byte 0x4D
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x36
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x54
  .byte 0x4F
  .byte 0x4E
  .byte 0x36
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x54
  .byte 0x45
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x54
  .byte 0x45
  .byte 0x4B
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x4D
  .byte 0x41
  .byte 0x52
  .byte 0x42
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x4D
  .byte 0x41
  .byte 0x52
  .byte 0x42
  .byte 0x00
  .byte 0x00
  .word 0x0003
  .byte 0x53
  .byte 0x57
  .byte 0x31
  .byte 0x53
  .byte 0x4B
  .byte 0x55
  .byte 0x4C
  .byte 0x4C
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x32
  .byte 0x53
  .byte 0x4B
  .byte 0x55
  .byte 0x4C
  .byte 0x4C
  .byte 0x00
  .word 0x0003
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .word 0x0000
  .balign 8

cheat_mus_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xB6
  .byte 0xAE
  .byte 0xEA
  .byte 0x01
  .byte 0x00
  .byte 0x00
  .byte 0xFF
  .balign 16

TU61F874B9/_ctype_toupR:
  .word 0xFFFF
  .word 0x0000
  .word 0x0001
  .word 0x0002
  .word 0x0003
  .word 0x0004
  .word 0x0005
  .word 0x0006
  .word 0x0007
  .word 0x0008
  .word 0x0009
  .word 0x000A
  .word 0x000B
  .word 0x000C
  .word 0x000D
  .word 0x000E
  .word 0x000F
  .word 0x0010
  .word 0x0011
  .word 0x0012
  .word 0x0013
  .word 0x0014
  .word 0x0015
  .word 0x0016
  .word 0x0017
  .word 0x0018
  .word 0x0019
  .word 0x001A
  .word 0x001B
  .word 0x001C
  .word 0x001D
  .word 0x001E
  .word 0x001F
  .word 0x0020
  .word 0x0021
  .word 0x0022
  .word 0x0023
  .word 0x0024
  .word 0x0025
  .word 0x0026
  .word 0x0027
  .word 0x0028
  .word 0x0029
  .word 0x002A
  .word 0x002B
  .word 0x002C
  .word 0x002D
  .word 0x002E
  .word 0x002F
  .word 0x0030
  .word 0x0031
  .word 0x0032
  .word 0x0033
  .word 0x0034
  .word 0x0035
  .word 0x0036
  .word 0x0037
  .word 0x0038
  .word 0x0039
  .word 0x003A
  .word 0x003B
  .word 0x003C
  .word 0x003D
  .word 0x003E
  .word 0x003F
  .word 0x0040
  .word 0x0041
  .word 0x0042
  .word 0x0043
  .word 0x0044
  .word 0x0045
  .word 0x0046
  .word 0x0047
  .word 0x0048
  .word 0x0049
  .word 0x004A
  .word 0x004B
  .word 0x004C
  .word 0x004D
  .word 0x004E
  .word 0x004F
  .word 0x0050
  .word 0x0051
  .word 0x0052
  .word 0x0053
  .word 0x0054
  .word 0x0055
  .word 0x0056
  .word 0x0057
  .word 0x0058
  .word 0x0059
  .word 0x005A
  .word 0x005B
  .word 0x005C
  .word 0x005D
  .word 0x005E
  .word 0x005F
  .word 0x0060
  .word 0x0041
  .word 0x0042
  .word 0x0043
  .word 0x0044
  .word 0x0045
  .word 0x0046
  .word 0x0047
  .word 0x0048
  .word 0x0049
  .word 0x004A
  .word 0x004B
  .word 0x004C
  .word 0x004D
  .word 0x004E
  .word 0x004F
  .word 0x0050
  .word 0x0051
  .word 0x0052
  .word 0x0053
  .word 0x0054
  .word 0x0055
  .word 0x0056
  .word 0x0057
  .word 0x0058
  .word 0x0059
  .word 0x005A
  .word 0x007B
  .word 0x007C
  .word 0x007D
  .word 0x007E
  .word 0x007F
  .word 0x0080
  .word 0x0081
  .word 0x0082
  .word 0x0083
  .word 0x0084
  .word 0x0085
  .word 0x0086
  .word 0x0087
  .word 0x0088
  .word 0x0089
  .word 0x008A
  .word 0x008B
  .word 0x008C
  .word 0x008D
  .word 0x008E
  .word 0x008F
  .word 0x0090
  .word 0x0091
  .word 0x0092
  .word 0x0093
  .word 0x0094
  .word 0x0095
  .word 0x0096
  .word 0x0097
  .word 0x0098
  .word 0x0099
  .word 0x009A
  .word 0x009B
  .word 0x009C
  .word 0x009D
  .word 0x009E
  .word 0x009F
  .word 0x00A0
  .word 0x00A1
  .word 0x00A2
  .word 0x00A3
  .word 0x00A4
  .word 0x00A5
  .word 0x00A6
  .word 0x00A7
  .word 0x00A8
  .word 0x00A9
  .word 0x00AA
  .word 0x00AB
  .word 0x00AC
  .word 0x00AD
  .word 0x00AE
  .word 0x00AF
  .word 0x00B0
  .word 0x00B1
  .word 0x00B2
  .word 0x00B3
  .word 0x00B4
  .word 0x00B5
  .word 0x00B6
  .word 0x00B7
  .word 0x00B8
  .word 0x00B9
  .word 0x00BA
  .word 0x00BB
  .word 0x00BC
  .word 0x00BD
  .word 0x00BE
  .word 0x00BF
  .word 0x00C0
  .word 0x00C1
  .word 0x00C2
  .word 0x00C3
  .word 0x00C4
  .word 0x00C5
  .word 0x00C6
  .word 0x00C7
  .word 0x00C8
  .word 0x00C9
  .word 0x00CA
  .word 0x00CB
  .word 0x00CC
  .word 0x00CD
  .word 0x00CE
  .word 0x00CF
  .word 0x00D0
  .word 0x00D1
  .word 0x00D2
  .word 0x00D3
  .word 0x00D4
  .word 0x00D5
  .word 0x00D6
  .word 0x00D7
  .word 0x00D8
  .word 0x00D9
  .word 0x00DA
  .word 0x00DB
  .word 0x00DC
  .word 0x00DD
  .word 0x00DE
  .word 0x00DF
  .word 0x00E0
  .word 0x00E1
  .word 0x00E2
  .word 0x00E3
  .word 0x00E4
  .word 0x00E5
  .word 0x00E6
  .word 0x00E7
  .word 0x00E8
  .word 0x00E9
  .word 0x00EA
  .word 0x00EB
  .word 0x00EC
  .word 0x00ED
  .word 0x00EE
  .word 0x00EF
  .word 0x00F0
  .word 0x00F1
  .word 0x00F2
  .word 0x00F3
  .word 0x00F4
  .word 0x00F5
  .word 0x00F6
  .word 0x00F7
  .word 0x00F8
  .word 0x00F9
  .word 0x00FA
  .word 0x00FB
  .word 0x00FC
  .word 0x00FD
  .word 0x00FE
  .word 0x00FF
  .balign 8

castorder:
  .qword .L00C010AE
  .dword 0x00000001
  .balign 8
  .qword .L00C010AF
  .dword 0x00000002
  .balign 8
  .qword .L00C010B0
  .dword 0x0000000A
  .balign 8
  .qword .L00C010B1
  .dword 0x0000000B
  .balign 8
  .qword .L00C010B2
  .dword 0x0000000C
  .balign 8
  .qword .L00C010B3
  .dword 0x00000012
  .balign 8
  .qword .L00C010B4
  .dword 0x0000000E
  .balign 8
  .qword .L00C010B5
  .dword 0x00000011
  .balign 8
  .qword .L00C010B6
  .dword 0x0000000F
  .balign 8
  .qword .L00C010B7
  .dword 0x00000014
  .balign 8
  .qword .L00C010B8
  .dword 0x00000016
  .balign 8
  .qword .L00C010B9
  .dword 0x00000005
  .balign 8
  .qword .L00C010BA
  .dword 0x00000008
  .balign 8
  .qword .L00C010BB
  .dword 0x00000003
  .balign 8
  .qword .L00C010BC
  .dword 0x00000013
  .balign 8
  .qword .L00C010BD
  .dword 0x00000015
  .balign 8
  .qword .L00C010BE
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 8

cheat_player_arrow:
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00092492
  .dword 0x00030C30
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00092492
  .dword 0xFFFCF3D0
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0xFFEB6DB8
  .dword 0x00030C30
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0xFFEB6DB8
  .dword 0xFFFCF3D0
  .dword 0xFFF49249
  .dword 0x00000000
  .dword 0xFFF00000
  .dword 0x00030C30
  .dword 0xFFF49249
  .dword 0x00000000
  .dword 0xFFF00000
  .dword 0xFFFCF3D0
  .dword 0xFFF6DB6E
  .dword 0x00000000
  .dword 0xFFF6DB6E
  .dword 0xFFFCF3D0
  .dword 0xFFF6DB6E
  .dword 0xFFFCF3D0
  .dword 0xFFF9E79E
  .dword 0xFFFCF3D0
  .dword 0xFFF9E79E
  .dword 0xFFFCF3D0
  .dword 0xFFF9E79E
  .dword 0x00049249
  .dword 0xFFFCF3D0
  .dword 0x00000000
  .dword 0xFFFCF3D0
  .dword 0xFFFCF3D0
  .dword 0xFFFCF3D0
  .dword 0xFFFCF3D0
  .dword 0x00000000
  .dword 0xFFFCF3D0
  .dword 0x00000000
  .dword 0xFFFCF3D0
  .dword 0x00000000
  .dword 0x00049249
  .dword 0x00030C30
  .dword 0x00049249
  .dword 0x00030C30
  .dword 0xFFFD6344
  .dword 0x00030C30
  .dword 0xFFFD6344
  .dword 0x00039E79
  .dword 0xFFFCD0FB
  .dword 0x00039E79
  .dword 0xFFFCD0FB
  .dword 0x0004E04D
  .dword 0xFFFD6344

TU7A00CB85/epsd1animinfo:
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000001
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000002
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000003
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000004
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000005
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000006
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000007
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x000000C0
  .dword 0x00000090
  .dword 0x00000008
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000002
  .dword 0x0000000B
  .dword 0x00000001
  .dword 0x00000080
  .dword 0x00000088
  .dword 0x00000008
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000

EpisodeMenu:
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x45
  .byte 0x50
  .byte 0x49
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Episode
  .byte 0x6B
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x45
  .byte 0x50
  .byte 0x49
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Episode
  .byte 0x74
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x45
  .byte 0x50
  .byte 0x49
  .byte 0x33
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Episode
  .byte 0x69
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x45
  .byte 0x50
  .byte 0x49
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Episode
  .byte 0x74
  .balign 8

MainMenu:
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4E
  .byte 0x47
  .byte 0x41
  .byte 0x4D
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_NewGame
  .byte 0x6E
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4F
  .byte 0x50
  .byte 0x54
  .byte 0x49
  .byte 0x4F
  .byte 0x4E
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_Options
  .byte 0x6F
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4C
  .byte 0x4F
  .byte 0x41
  .byte 0x44
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_LoadGame
  .byte 0x6C
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x41
  .byte 0x56
  .byte 0x45
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveGame
  .byte 0x73
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x52
  .byte 0x44
  .byte 0x54
  .byte 0x48
  .byte 0x49
  .byte 0x53
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ReadThis
  .byte 0x72
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x51
  .byte 0x55
  .byte 0x49
  .byte 0x54
  .byte 0x47
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_QuitDOOM
  .byte 0x71
  .balign 8

mapnames:
  .qword .L00C010BF
  .qword .L00C010C0
  .qword .L00C010C1
  .qword .L00C010C2
  .qword .L00C010C3
  .qword .L00C010C4
  .qword .L00C010C5
  .qword .L00C010C6
  .qword .L00C010C7
  .qword .L00C010C8
  .qword .L00C010C9
  .qword .L00C010CA
  .qword .L00C010CB
  .qword .L00C010CC
  .qword .L00C010CD
  .qword .L00C010CE
  .qword .L00C010CF
  .qword .L00C010D0
  .qword .L00C010D1
  .qword .L00C010D2
  .qword .L00C010D3
  .qword .L00C010D4
  .qword .L00C010D5
  .qword .L00C010D6
  .qword .L00C010D7
  .qword .L00C010D8
  .qword .L00C010D9
  .qword .L00C010DA
  .qword .L00C010DB
  .qword .L00C010DC
  .qword .L00C010DD
  .qword .L00C010DE
  .qword .L00C010DF
  .qword .L00C010E0
  .qword .L00C010E1
  .qword .L00C010E2
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3
  .qword .L00C010E3

TU7A00C41B/cheat_amap_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0x26
  .byte 0x2E
  .byte 0xFF
  .balign 8

ReadMenu2:
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_FinishReadThis
  .byte 0x00
  .balign 8

gammamsg:
  .byte 0x47
  .byte 0x61
  .byte 0x6D
  .byte 0x6D
  .byte 0x61
  .byte 0x20
  .byte 0x63
  .byte 0x6F
  .byte 0x72
  .byte 0x72
  .byte 0x65
  .byte 0x63
  .byte 0x74
  .byte 0x69
  .byte 0x6F
  .byte 0x6E
  .byte 0x20
  .byte 0x4F
  .byte 0x46
  .byte 0x46
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x47
  .byte 0x61
  .byte 0x6D
  .byte 0x6D
  .byte 0x61
  .byte 0x20
  .byte 0x63
  .byte 0x6F
  .byte 0x72
  .byte 0x72
  .byte 0x65
  .byte 0x63
  .byte 0x74
  .byte 0x69
  .byte 0x6F
  .byte 0x6E
  .byte 0x20
  .byte 0x6C
  .byte 0x65
  .byte 0x76
  .byte 0x65
  .byte 0x6C
  .byte 0x20
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x47
  .byte 0x61
  .byte 0x6D
  .byte 0x6D
  .byte 0x61
  .byte 0x20
  .byte 0x63
  .byte 0x6F
  .byte 0x72
  .byte 0x72
  .byte 0x65
  .byte 0x63
  .byte 0x74
  .byte 0x69
  .byte 0x6F
  .byte 0x6E
  .byte 0x20
  .byte 0x6C
  .byte 0x65
  .byte 0x76
  .byte 0x65
  .byte 0x6C
  .byte 0x20
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .byte 0x47
  .byte 0x61
  .byte 0x6D
  .byte 0x6D
  .byte 0x61
  .byte 0x20
  .byte 0x63
  .byte 0x6F
  .byte 0x72
  .byte 0x72
  .byte 0x65
  .byte 0x63
  .byte 0x74
  .byte 0x69
  .byte 0x6F
  .byte 0x6E
  .byte 0x20
  .byte 0x6C
  .byte 0x65
  .byte 0x76
  .byte 0x65
  .byte 0x6C
  .byte 0x20
  .byte 0x33
  .byte 0x00
  .byte 0x00
  .byte 0x47
  .byte 0x61
  .byte 0x6D
  .byte 0x6D
  .byte 0x61
  .byte 0x20
  .byte 0x63
  .byte 0x6F
  .byte 0x72
  .byte 0x72
  .byte 0x65
  .byte 0x63
  .byte 0x74
  .byte 0x69
  .byte 0x6F
  .byte 0x6E
  .byte 0x20
  .byte 0x6C
  .byte 0x65
  .byte 0x76
  .byte 0x65
  .byte 0x6C
  .byte 0x20
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .balign 16
  .resb 16

tantoangle:
  .dword 0x00000000
  .dword 0x000517CC
  .dword 0x000A2F98
  .dword 0x000F4763
  .dword 0x00145F2E
  .dword 0x001976F9
  .dword 0x001E8EC2
  .dword 0x0023A68B
  .dword 0x0028BE53
  .dword 0x002DD619
  .dword 0x0032EDDE
  .dword 0x003805A1
  .dword 0x003D1D63
  .dword 0x00423523
  .dword 0x00474CE0
  .dword 0x004C649C
  .dword 0x00517C55
  .dword 0x0056940B
  .dword 0x005BABBF
  .dword 0x0060C370
  .dword 0x0065DB1E
  .dword 0x006AF2C8
  .dword 0x00700A70
  .dword 0x00752213
  .dword 0x007A39B4
  .dword 0x007F5150
  .dword 0x008468E9
  .dword 0x0089807D
  .dword 0x008E980D
  .dword 0x0093AF98
  .dword 0x0098C71F
  .dword 0x009DDEA1
  .dword 0x00A2F61E
  .dword 0x00A80D96
  .dword 0x00AD2509
  .dword 0x00B23C77
  .dword 0x00B753DE
  .dword 0x00BC6B41
  .dword 0x00C1829D
  .dword 0x00C699F3
  .dword 0x00CBB143
  .dword 0x00D0C88D
  .dword 0x00D5DFD0
  .dword 0x00DAF70C
  .dword 0x00E00E42
  .dword 0x00E52570
  .dword 0x00EA3C98
  .dword 0x00EF53B8
  .dword 0x00F46AD1
  .dword 0x00F981E2
  .dword 0x00FE98EB
  .dword 0x0103AFEC
  .dword 0x0108C6E6
  .dword 0x010DDDD6
  .dword 0x0112F4BE
  .dword 0x01180B9E
  .dword 0x011D2276
  .dword 0x01223944
  .dword 0x0127500A
  .dword 0x012C66C6
  .dword 0x01317D78
  .dword 0x01369420
  .dword 0x013BAAC0
  .dword 0x0140C156
  .dword 0x0145D7E2
  .dword 0x014AEE62
  .dword 0x015004DA
  .dword 0x01551B46
  .dword 0x015A31A8
  .dword 0x015F4800
  .dword 0x01645E4C
  .dword 0x0169748C
  .dword 0x016E8AC2
  .dword 0x0173A0EC
  .dword 0x0178B70C
  .dword 0x017DCD1E
  .dword 0x0182E326
  .dword 0x0187F920
  .dword 0x018D0F10
  .dword 0x019224F2
  .dword 0x01973AC8
  .dword 0x019C5090
  .dword 0x01A1664E
  .dword 0x01A67BFC
  .dword 0x01AB919E
  .dword 0x01B0A734
  .dword 0x01B5BCBC
  .dword 0x01BAD234
  .dword 0x01BFE7A0
  .dword 0x01C4FCFE
  .dword 0x01CA124E
  .dword 0x01CF2790
  .dword 0x01D43CC4
  .dword 0x01D951E8
  .dword 0x01DE66FE
  .dword 0x01E37C04
  .dword 0x01E890FC
  .dword 0x01EDA5E6
  .dword 0x01F2BABE
  .dword 0x01F7CF88
  .dword 0x01FCE442
  .dword 0x0201F8EC
  .dword 0x02070D88
  .dword 0x020C2210
  .dword 0x0211368C
  .dword 0x02164AF4
  .dword 0x021B5F4C
  .dword 0x02207394
  .dword 0x022587CC
  .dword 0x022A9BF4
  .dword 0x022FB008
  .dword 0x0234C40C
  .dword 0x0239D7FC
  .dword 0x023EEBDC
  .dword 0x0243FFA8
  .dword 0x02491364
  .dword 0x024E2710
  .dword 0x02533AA8
  .dword 0x02584E2C
  .dword 0x025D61A0
  .dword 0x02627500
  .dword 0x0267884C
  .dword 0x026C9B84
  .dword 0x0271AEAC
  .dword 0x0276C1BC
  .dword 0x027BD4BC
  .dword 0x0280E7A8
  .dword 0x0285FA80
  .dword 0x028B0D44
  .dword 0x02901FF4
  .dword 0x0295328C
  .dword 0x029A4514
  .dword 0x029F5784
  .dword 0x02A469E4
  .dword 0x02A97C28
  .dword 0x02AE8E5C
  .dword 0x02B3A078
  .dword 0x02B8B280
  .dword 0x02BDC474
  .dword 0x02C2D650
  .dword 0x02C7E818
  .dword 0x02CCF9C8
  .dword 0x02D20B64
  .dword 0x02D71CE8
  .dword 0x02DC2E54
  .dword 0x02E13FAC
  .dword 0x02E650EC
  .dword 0x02EB6214
  .dword 0x02F07324
  .dword 0x02F58420
  .dword 0x02FA9504
  .dword 0x02FFA5CC
  .dword 0x0304B680
  .dword 0x0309C71C
  .dword 0x030ED7A0
  .dword 0x0313E80C
  .dword 0x0318F860
  .dword 0x031E0898
  .dword 0x032318BC
  .dword 0x032828C4
  .dword 0x032D38B4
  .dword 0x0332488C
  .dword 0x03375848
  .dword 0x033C67EC
  .dword 0x03417774
  .dword 0x034686E8
  .dword 0x034B963C
  .dword 0x0350A578
  .dword 0x0355B49C
  .dword 0x035AC3A4
  .dword 0x035FD290
  .dword 0x0364E164
  .dword 0x0369F01C
  .dword 0x036EFEB8
  .dword 0x03740D3C
  .dword 0x03791BA0
  .dword 0x037E29EC
  .dword 0x0383381C
  .dword 0x03884630
  .dword 0x038D5428
  .dword 0x03926200
  .dword 0x03976FC0
  .dword 0x039C7D64
  .dword 0x03A18AEC
  .dword 0x03A69854
  .dword 0x03ABA5A0
  .dword 0x03B0B2D0
  .dword 0x03B5BFE4
  .dword 0x03BACCDC
  .dword 0x03BFD9B4
  .dword 0x03C4E66C
  .dword 0x03C9F30C
  .dword 0x03CEFF88
  .dword 0x03D40BEC
  .dword 0x03D9182C
  .dword 0x03DE2454
  .dword 0x03E33058
  .dword 0x03E83C40
  .dword 0x03ED4808
  .dword 0x03F253B4
  .dword 0x03F75F3C
  .dword 0x03FC6AA8
  .dword 0x040175F8
  .dword 0x04068120
  .dword 0x040B8C30
  .dword 0x04109718
  .dword 0x0415A1E8
  .dword 0x041AAC98
  .dword 0x041FB720
  .dword 0x0424C190
  .dword 0x0429CBD8
  .dword 0x042ED600
  .dword 0x0433E010
  .dword 0x0438E9F8
  .dword 0x043DF3C0
  .dword 0x0442FD68
  .dword 0x044806E8
  .dword 0x044D1050
  .dword 0x04521990
  .dword 0x045722B0
  .dword 0x045C2BB0
  .dword 0x04613488
  .dword 0x04663D40
  .dword 0x046B45D8
  .dword 0x04704E48
  .dword 0x04755698
  .dword 0x047A5EC8
  .dword 0x047F66D8
  .dword 0x04846EC0
  .dword 0x04897680
  .dword 0x048E7E20
  .dword 0x049385A0
  .dword 0x04988CF8
  .dword 0x049D9430
  .dword 0x04A29B40
  .dword 0x04A7A228
  .dword 0x04ACA8F0
  .dword 0x04B1AF98
  .dword 0x04B6B618
  .dword 0x04BBBC70
  .dword 0x04C0C2A8
  .dword 0x04C5C8B8
  .dword 0x04CACEA0
  .dword 0x04CFD468
  .dword 0x04D4DA08
  .dword 0x04D9DF80
  .dword 0x04DEE4D0
  .dword 0x04E3EA00
  .dword 0x04E8EF08
  .dword 0x04EDF3E8
  .dword 0x04F2F8A0
  .dword 0x04F7FD38
  .dword 0x04FD01A8
  .dword 0x050205E8
  .dword 0x05070A08
  .dword 0x050C0E00
  .dword 0x051111D8
  .dword 0x05161580
  .dword 0x051B1900
  .dword 0x05201C58
  .dword 0x05251F88
  .dword 0x052A2298
  .dword 0x052F2578
  .dword 0x05342830
  .dword 0x05392AC0
  .dword 0x053E2D28
  .dword 0x05432F68
  .dword 0x05483180
  .dword 0x054D3370
  .dword 0x05523530
  .dword 0x055736C8
  .dword 0x055C3840
  .dword 0x05613980
  .dword 0x05663AA0
  .dword 0x056B3B98
  .dword 0x05703C60
  .dword 0x05753D00
  .dword 0x057A3D70
  .dword 0x057F3DC0
  .dword 0x05843DE0
  .dword 0x05893DD0
  .dword 0x058E3DA0
  .dword 0x05933D40
  .dword 0x05983CB0
  .dword 0x059D3BF8
  .dword 0x05A23B18
  .dword 0x05A73A08
  .dword 0x05AC38D0
  .dword 0x05B13768
  .dword 0x05B635D8
  .dword 0x05BB3418
  .dword 0x05C03228
  .dword 0x05C53010
  .dword 0x05CA2DD0
  .dword 0x05CF2B60
  .dword 0x05D428C0
  .dword 0x05D925F8
  .dword 0x05DE2300
  .dword 0x05E31FD8
  .dword 0x05E81C88
  .dword 0x05ED1908
  .dword 0x05F21558
  .dword 0x05F71178
  .dword 0x05FC0D70
  .dword 0x06010938
  .dword 0x060604D0
  .dword 0x060B0038
  .dword 0x060FFB78
  .dword 0x0614F688
  .dword 0x0619F160
  .dword 0x061EEC10
  .dword 0x0623E690
  .dword 0x0628E0E8
  .dword 0x062DDB08
  .dword 0x0632D4F8
  .dword 0x0637CEB8
  .dword 0x063CC850
  .dword 0x0641C1B0
  .dword 0x0646BAE0
  .dword 0x064BB3E8
  .dword 0x0650ACB8
  .dword 0x0655A558
  .dword 0x065A9DC8
  .dword 0x065F9608
  .dword 0x06648E18
  .dword 0x066985F8
  .dword 0x066E7DA0
  .dword 0x06737520
  .dword 0x06786C68
  .dword 0x067D6380
  .dword 0x06825A68
  .dword 0x06875118
  .dword 0x068C4798
  .dword 0x06913DF0
  .dword 0x06963408
  .dword 0x069B29F8
  .dword 0x06A01FB0
  .dword 0x06A51538
  .dword 0x06AA0A88
  .dword 0x06AEFFA8
  .dword 0x06B3F498
  .dword 0x06B8E950
  .dword 0x06BDDDD8
  .dword 0x06C2D228
  .dword 0x06C7C648
  .dword 0x06CCBA38
  .dword 0x06D1ADF0
  .dword 0x06D6A170
  .dword 0x06DB94C0
  .dword 0x06E087D8
  .dword 0x06E57AC0
  .dword 0x06EA6D78
  .dword 0x06EF5FF0
  .dword 0x06F45238
  .dword 0x06F94450
  .dword 0x06FE3630
  .dword 0x070327D8
  .dword 0x07081948
  .dword 0x070D0A88
  .dword 0x0711FB90
  .dword 0x0716EC60
  .dword 0x071BDD00
  .dword 0x0720CD68
  .dword 0x0725BD98
  .dword 0x072AAD90
  .dword 0x072F9D58
  .dword 0x07348CE8
  .dword 0x07397C38
  .dword 0x073E6B58
  .dword 0x07435A40
  .dword 0x074848F8
  .dword 0x074D3770
  .dword 0x075225B0
  .dword 0x075713C0
  .dword 0x075C0190
  .dword 0x0760EF30
  .dword 0x0765DC98
  .dword 0x076AC9C0
  .dword 0x076FB6B8
  .dword 0x0774A370
  .dword 0x07798FF8
  .dword 0x077E7C40
  .dword 0x07836850
  .dword 0x07885430
  .dword 0x078D3FD0
  .dword 0x07922B38
  .dword 0x07971668
  .dword 0x079C0158
  .dword 0x07A0EC18
  .dword 0x07A5D698
  .dword 0x07AAC0E0
  .dword 0x07AFAAF0
  .dword 0x07B494C8
  .dword 0x07B97E60
  .dword 0x07BE67C0
  .dword 0x07C350E8
  .dword 0x07C839D8
  .dword 0x07CD2288
  .dword 0x07D20B00
  .dword 0x07D6F338
  .dword 0x07DBDB38
  .dword 0x07E0C300
  .dword 0x07E5AA88
  .dword 0x07EA91D8
  .dword 0x07EF78F0
  .dword 0x07F45FC8
  .dword 0x07F94660
  .dword 0x07FE2CC8
  .dword 0x080312F0
  .dword 0x0807F8D0
  .dword 0x080CDE80
  .dword 0x0811C3F0
  .dword 0x0816A920
  .dword 0x081B8E20
  .dword 0x082072D0
  .dword 0x08255750
  .dword 0x082A3B90
  .dword 0x082F1FA0
  .dword 0x08340360
  .dword 0x0838E6F0
  .dword 0x083DCA30
  .dword 0x0842AD40
  .dword 0x08479010
  .dword 0x084C72A0
  .dword 0x08515500
  .dword 0x08563710
  .dword 0x085B18F0
  .dword 0x085FFA80
  .dword 0x0864DBE0
  .dword 0x0869BD00
  .dword 0x086E9DE0
  .dword 0x08737E80
  .dword 0x08785EE0
  .dword 0x087D3F00
  .dword 0x08821EE0
  .dword 0x0886FE90
  .dword 0x088BDDF0
  .dword 0x0890BD10
  .dword 0x08959BF0
  .dword 0x089A7AA0
  .dword 0x089F5900
  .dword 0x08A43720
  .dword 0x08A91510
  .dword 0x08ADF2B0
  .dword 0x08B2D010
  .dword 0x08B7AD40
  .dword 0x08BC8A20
  .dword 0x08C166C0
  .dword 0x08C64320
  .dword 0x08CB1F40
  .dword 0x08CFFB20
  .dword 0x08D4D6C0
  .dword 0x08D9B220
  .dword 0x08DE8D40
  .dword 0x08E36820
  .dword 0x08E842B0
  .dword 0x08ED1D10
  .dword 0x08F1F720
  .dword 0x08F6D0F0
  .dword 0x08FBAA80
  .dword 0x090083D0
  .dword 0x09055CE0
  .dword 0x090A35B0
  .dword 0x090F0E30
  .dword 0x0913E680
  .dword 0x0918BE80
  .dword 0x091D9640
  .dword 0x09226DC0
  .dword 0x092744F0
  .dword 0x092C1BF0
  .dword 0x0930F2A0
  .dword 0x0935C910
  .dword 0x093A9F30
  .dword 0x093F7520
  .dword 0x09444AC0
  .dword 0x09492020
  .dword 0x094DF540
  .dword 0x0952CA10
  .dword 0x09579EB0
  .dword 0x095C7300
  .dword 0x09614700
  .dword 0x09661AD0
  .dword 0x096AEE50
  .dword 0x096FC180
  .dword 0x09749480
  .dword 0x09796730
  .dword 0x097E39A0
  .dword 0x09830BC0
  .dword 0x0987DDA0
  .dword 0x098CAF40
  .dword 0x099180A0
  .dword 0x099651B0
  .dword 0x099B2270
  .dword 0x099FF300
  .dword 0x09A4C340
  .dword 0x09A99330
  .dword 0x09AE62E0
  .dword 0x09B33250
  .dword 0x09B80180
  .dword 0x09BCD050
  .dword 0x09C19EF0
  .dword 0x09C66D40
  .dword 0x09CB3B50
  .dword 0x09D00910
  .dword 0x09D4D690
  .dword 0x09D9A3C0
  .dword 0x09DE70B0
  .dword 0x09E33D50
  .dword 0x09E809B0
  .dword 0x09ECD5C0
  .dword 0x09F1A190
  .dword 0x09F66D20
  .dword 0x09FB3860
  .dword 0x0A000350
  .dword 0x0A04CE00
  .dword 0x0A099860
  .dword 0x0A0E6280
  .dword 0x0A132C50
  .dword 0x0A17F5E0
  .dword 0x0A1CBF20
  .dword 0x0A218820
  .dword 0x0A2650D0
  .dword 0x0A2B1940
  .dword 0x0A2FE150
  .dword 0x0A34A930
  .dword 0x0A3970C0
  .dword 0x0A3E3800
  .dword 0x0A42FEF0
  .dword 0x0A47C5A0
  .dword 0x0A4C8C00
  .dword 0x0A515220
  .dword 0x0A5617F0
  .dword 0x0A5ADD80
  .dword 0x0A5FA2B0
  .dword 0x0A6467A0
  .dword 0x0A692C50
  .dword 0x0A6DF0B0
  .dword 0x0A72B4C0
  .dword 0x0A777880
  .dword 0x0A7C3C00
  .dword 0x0A80FF30
  .dword 0x0A85C220
  .dword 0x0A8A84B0
  .dword 0x0A8F4700
  .dword 0x0A940900
  .dword 0x0A98CAC0
  .dword 0x0A9D8C30
  .dword 0x0AA24D50
  .dword 0x0AA70E20
  .dword 0x0AABCEB0
  .dword 0x0AB08EF0
  .dword 0x0AB54EE0
  .dword 0x0ABA0E80
  .dword 0x0ABECDE0
  .dword 0x0AC38CE0
  .dword 0x0AC84BA0
  .dword 0x0ACD0A10
  .dword 0x0AD1C840
  .dword 0x0AD68610
  .dword 0x0ADB43A0
  .dword 0x0AE000E0
  .dword 0x0AE4BDD0
  .dword 0x0AE97A80
  .dword 0x0AEE36D0
  .dword 0x0AF2F2E0
  .dword 0x0AF7AE90
  .dword 0x0AFC6A00
  .dword 0x0B012520
  .dword 0x0B05E000
  .dword 0x0B0A9A80
  .dword 0x0B0F54B0
  .dword 0x0B140EA0
  .dword 0x0B18C840
  .dword 0x0B1D8180
  .dword 0x0B223A80
  .dword 0x0B26F330
  .dword 0x0B2BAB90
  .dword 0x0B3063A0
  .dword 0x0B351B70
  .dword 0x0B39D2E0
  .dword 0x0B3E8A00
  .dword 0x0B4340E0
  .dword 0x0B47F760
  .dword 0x0B4CADA0
  .dword 0x0B516380
  .dword 0x0B561920
  .dword 0x0B5ACE60
  .dword 0x0B5F8360
  .dword 0x0B643800
  .dword 0x0B68EC60
  .dword 0x0B6DA070
  .dword 0x0B725420
  .dword 0x0B770790
  .dword 0x0B7BBAB0
  .dword 0x0B806D70
  .dword 0x0B851FF0
  .dword 0x0B89D210
  .dword 0x0B8E83F0
  .dword 0x0B933570
  .dword 0x0B97E6A0
  .dword 0x0B9C9790
  .dword 0x0BA14820
  .dword 0x0BA5F860
  .dword 0x0BAAA850
  .dword 0x0BAF57F0
  .dword 0x0BB40740
  .dword 0x0BB8B640
  .dword 0x0BBD64F0
  .dword 0x0BC21350
  .dword 0x0BC6C150
  .dword 0x0BCB6F10
  .dword 0x0BD01C70
  .dword 0x0BD4C980
  .dword 0x0BD97640
  .dword 0x0BDE22B0
  .dword 0x0BE2CED0
  .dword 0x0BE77AA0
  .dword 0x0BEC2610
  .dword 0x0BF0D140
  .dword 0x0BF57C10
  .dword 0x0BFA2690
  .dword 0x0BFED0C0
  .dword 0x0C037A90
  .dword 0x0C082420
  .dword 0x0C0CCD50
  .dword 0x0C117630
  .dword 0x0C161EC0
  .dword 0x0C1AC6F0
  .dword 0x0C1F6EE0
  .dword 0x0C241670
  .dword 0x0C28BDB0
  .dword 0x0C2D64A0
  .dword 0x0C320B30
  .dword 0x0C36B180
  .dword 0x0C3B5770
  .dword 0x0C3FFD10
  .dword 0x0C44A250
  .dword 0x0C494740
  .dword 0x0C4DEBE0
  .dword 0x0C529030
  .dword 0x0C573430
  .dword 0x0C5BD7D0
  .dword 0x0C607B20
  .dword 0x0C651E10
  .dword 0x0C69C0C0
  .dword 0x0C6E6310
  .dword 0x0C730500
  .dword 0x0C77A6B0
  .dword 0x0C7C4800
  .dword 0x0C80E8F0
  .dword 0x0C8589A0
  .dword 0x0C8A29F0
  .dword 0x0C8EC9E0
  .dword 0x0C936990
  .dword 0x0C9808E0
  .dword 0x0C9CA7E0
  .dword 0x0CA14680
  .dword 0x0CA5E4D0
  .dword 0x0CAA82C0
  .dword 0x0CAF2060
  .dword 0x0CB3BDB0
  .dword 0x0CB85AB0
  .dword 0x0CBCF750
  .dword 0x0CC19390
  .dword 0x0CC62F80
  .dword 0x0CCACB20
  .dword 0x0CCF6670
  .dword 0x0CD40160
  .dword 0x0CD89BF0
  .dword 0x0CDD3630
  .dword 0x0CE1D020
  .dword 0x0CE669B0
  .dword 0x0CEB02F0
  .dword 0x0CEF9BD0
  .dword 0x0CF43460
  .dword 0x0CF8CCA0
  .dword 0x0CFD6480
  .dword 0x0D01FC00
  .dword 0x0D069330
  .dword 0x0D0B2A10
  .dword 0x0D0FC090
  .dword 0x0D1456B0
  .dword 0x0D18EC80
  .dword 0x0D1D8200
  .dword 0x0D221720
  .dword 0x0D26ABF0
  .dword 0x0D2B4060
  .dword 0x0D2FD470
  .dword 0x0D346830
  .dword 0x0D38FBA0
  .dword 0x0D3D8EB0
  .dword 0x0D422160
  .dword 0x0D46B3C0
  .dword 0x0D4B45D0
  .dword 0x0D4FD770
  .dword 0x0D5468D0
  .dword 0x0D58F9C0
  .dword 0x0D5D8A70
  .dword 0x0D621AB0
  .dword 0x0D66AAA0
  .dword 0x0D6B3A40
  .dword 0x0D6FC970
  .dword 0x0D745860
  .dword 0x0D78E6E0
  .dword 0x0D7D7510
  .dword 0x0D8202F0
  .dword 0x0D869070
  .dword 0x0D8B1D90
  .dword 0x0D8FAA50
  .dword 0x0D9436C0
  .dword 0x0D98C2E0
  .dword 0x0D9D4EA0
  .dword 0x0DA1DA00
  .dword 0x0DA66500
  .dword 0x0DAAEFB0
  .dword 0x0DAF7A00
  .dword 0x0DB40400
  .dword 0x0DB88DA0
  .dword 0x0DBD16E0
  .dword 0x0DC19FC0
  .dword 0x0DC62850
  .dword 0x0DCAB090
  .dword 0x0DCF3860
  .dword 0x0DD3BFE0
  .dword 0x0DD84700
  .dword 0x0DDCCDD0
  .dword 0x0DE15430
  .dword 0x0DE5DA50
  .dword 0x0DEA6000
  .dword 0x0DEEE560
  .dword 0x0DF36A60
  .dword 0x0DF7EF00
  .dword 0x0DFC7340
  .dword 0x0E00F730
  .dword 0x0E057AC0
  .dword 0x0E09FE00
  .dword 0x0E0E80D0
  .dword 0x0E130350
  .dword 0x0E178570
  .dword 0x0E1C0740
  .dword 0x0E2088A0
  .dword 0x0E2509B0
  .dword 0x0E298A60
  .dword 0x0E2E0AB0
  .dword 0x0E328AB0
  .dword 0x0E370A50
  .dword 0x0E3B8990
  .dword 0x0E400870
  .dword 0x0E4486F0
  .dword 0x0E490520
  .dword 0x0E4D82F0
  .dword 0x0E520060
  .dword 0x0E567D70
  .dword 0x0E5AFA30
  .dword 0x0E5F7680
  .dword 0x0E63F280
  .dword 0x0E686E20
  .dword 0x0E6CE960
  .dword 0x0E716440
  .dword 0x0E75DED0
  .dword 0x0E7A5900
  .dword 0x0E7ED2C0
  .dword 0x0E834C30
  .dword 0x0E87C550
  .dword 0x0E8C3E00
  .dword 0x0E90B650
  .dword 0x0E952E50
  .dword 0x0E99A5E0
  .dword 0x0E9E1D20
  .dword 0x0EA29400
  .dword 0x0EA70A80
  .dword 0x0EAB80A0
  .dword 0x0EAFF670
  .dword 0x0EB46BD0
  .dword 0x0EB8E0E0
  .dword 0x0EBD5580
  .dword 0x0EC1C9D0
  .dword 0x0EC63DC0
  .dword 0x0ECAB150
  .dword 0x0ECF2480
  .dword 0x0ED39750
  .dword 0x0ED809C0
  .dword 0x0EDC7BD0
  .dword 0x0EE0ED90
  .dword 0x0EE55EE0
  .dword 0x0EE9CFE0
  .dword 0x0EEE4070
  .dword 0x0EF2B0B0
  .dword 0x0EF72080
  .dword 0x0EFB9000
  .dword 0x0EFFFF20
  .dword 0x0F046DE0
  .dword 0x0F08DC40
  .dword 0x0F0D4A30
  .dword 0x0F11B7D0
  .dword 0x0F162510
  .dword 0x0F1A91F0
  .dword 0x0F1EFE70
  .dword 0x0F236A90
  .dword 0x0F27D650
  .dword 0x0F2C41B0
  .dword 0x0F30ACB0
  .dword 0x0F351760
  .dword 0x0F3981A0
  .dword 0x0F3DEB80
  .dword 0x0F425500
  .dword 0x0F46BE20
  .dword 0x0F4B26E0
  .dword 0x0F4F8F40
  .dword 0x0F53F740
  .dword 0x0F585EE0
  .dword 0x0F5CC620
  .dword 0x0F612D00
  .dword 0x0F659380
  .dword 0x0F69F9A0
  .dword 0x0F6E5F50
  .dword 0x0F72C4B0
  .dword 0x0F7729B0
  .dword 0x0F7B8E50
  .dword 0x0F7FF280
  .dword 0x0F845660
  .dword 0x0F88B9D0
  .dword 0x0F8D1CF0
  .dword 0x0F917FA0
  .dword 0x0F95E200
  .dword 0x0F9A43F0
  .dword 0x0F9EA580
  .dword 0x0FA306B0
  .dword 0x0FA76780
  .dword 0x0FABC7F0
  .dword 0x0FB02800
  .dword 0x0FB487B0
  .dword 0x0FB8E700
  .dword 0x0FBD45E0
  .dword 0x0FC1A470
  .dword 0x0FC60290
  .dword 0x0FCA6050
  .dword 0x0FCEBDB0
  .dword 0x0FD31AB0
  .dword 0x0FD77750
  .dword 0x0FDBD390
  .dword 0x0FE02F70
  .dword 0x0FE48AE0
  .dword 0x0FE8E600
  .dword 0x0FED40B0
  .dword 0x0FF19B00
  .dword 0x0FF5F4F0
  .dword 0x0FFA4E80
  .dword 0x0FFEA7B0
  .dword 0x10030080
  .dword 0x100758E0
  .dword 0x100BB0E0
  .dword 0x10100880
  .dword 0x10145FC0
  .dword 0x1018B6A0
  .dword 0x101D0D20
  .dword 0x10216340
  .dword 0x1025B8E0
  .dword 0x102A0E40
  .dword 0x102E6320
  .dword 0x1032B7C0
  .dword 0x10370BE0
  .dword 0x103B5FA0
  .dword 0x103FB300
  .dword 0x10440600
  .dword 0x104858A0
  .dword 0x104CAAE0
  .dword 0x1050FCC0
  .dword 0x10554E40
  .dword 0x10599F40
  .dword 0x105DF000
  .dword 0x10624040
  .dword 0x10669020
  .dword 0x106ADFA0
  .dword 0x106F2EC0
  .dword 0x10737D80
  .dword 0x1077CBE0
  .dword 0x107C19C0
  .dword 0x10806760
  .dword 0x1084B480
  .dword 0x10890160
  .dword 0x108D4DC0
  .dword 0x109199C0
  .dword 0x1095E560
  .dword 0x109A30A0
  .dword 0x109E7B60
  .dword 0x10A2C5E0
  .dword 0x10A70FE0
  .dword 0x10AB59A0
  .dword 0x10AFA2E0
  .dword 0x10B3EBC0
  .dword 0x10B83440
  .dword 0x10BC7C60
  .dword 0x10C0C400
  .dword 0x10C50B60
  .dword 0x10C95240
  .dword 0x10CD98E0
  .dword 0x10D1DF00
  .dword 0x10D624C0
  .dword 0x10DA6A00
  .dword 0x10DEAF00
  .dword 0x10E2F3A0
  .dword 0x10E737C0
  .dword 0x10EB7B80
  .dword 0x10EFBEE0
  .dword 0x10F401E0
  .dword 0x10F84480
  .dword 0x10FC86C0
  .dword 0x1100C880
  .dword 0x11050A00
  .dword 0x11094B00
  .dword 0x110D8BA0
  .dword 0x1111CBE0
  .dword 0x11160BA0
  .dword 0x111A4B20
  .dword 0x111E8A20
  .dword 0x1122C8E0
  .dword 0x11270720
  .dword 0x112B4500
  .dword 0x112F8260
  .dword 0x1133BF80
  .dword 0x1137FC20
  .dword 0x113C3860
  .dword 0x11407460
  .dword 0x1144AFC0
  .dword 0x1148EAE0
  .dword 0x114D25A0
  .dword 0x11515FE0
  .dword 0x115599C0
  .dword 0x1159D340
  .dword 0x115E0C60
  .dword 0x11624520
  .dword 0x11667D60
  .dword 0x116AB540
  .dword 0x116EECE0
  .dword 0x11732400
  .dword 0x11775AA0
  .dword 0x117B9100
  .dword 0x117FC6E0
  .dword 0x1183FC60
  .dword 0x11883180
  .dword 0x118C6640
  .dword 0x11909AA0
  .dword 0x1194CE80
  .dword 0x11990200
  .dword 0x119D3520
  .dword 0x11A167E0
  .dword 0x11A59A40
  .dword 0x11A9CC20
  .dword 0x11ADFDC0
  .dword 0x11B22EE0
  .dword 0x11B65FA0
  .dword 0x11BA8FE0
  .dword 0x11BEBFE0
  .dword 0x11C2EF60
  .dword 0x11C71E80
  .dword 0x11CB4D40
  .dword 0x11CF7B80
  .dword 0x11D3A980
  .dword 0x11D7D700
  .dword 0x11DC0420
  .dword 0x11E030E0
  .dword 0x11E45D20
  .dword 0x11E88920
  .dword 0x11ECB4A0
  .dword 0x11F0DFC0
  .dword 0x11F50A80
  .dword 0x11F934C0
  .dword 0x11FD5EC0
  .dword 0x12018840
  .dword 0x1205B160
  .dword 0x1209DA00
  .dword 0x120E0260
  .dword 0x12122A40
  .dword 0x121651C0
  .dword 0x121A78E0
  .dword 0x121E9F80
  .dword 0x1222C5E0
  .dword 0x1226EBC0
  .dword 0x122B1120
  .dword 0x122F3640
  .dword 0x12335B00
  .dword 0x12377F40
  .dword 0x123BA320
  .dword 0x123FC680
  .dword 0x1243E9A0
  .dword 0x12480C40
  .dword 0x124C2E80
  .dword 0x12505060
  .dword 0x125471E0
  .dword 0x125892E0
  .dword 0x125CB380
  .dword 0x1260D3C0
  .dword 0x1264F3A0
  .dword 0x12691300
  .dword 0x126D3200
  .dword 0x127150A0
  .dword 0x12756EE0
  .dword 0x12798CA0
  .dword 0x127DAA00
  .dword 0x1281C700
  .dword 0x1285E3A0
  .dword 0x1289FFE0
  .dword 0x128E1BA0
  .dword 0x12923700
  .dword 0x12965200
  .dword 0x129A6C80
  .dword 0x129E86A0
  .dword 0x12A2A060
  .dword 0x12A6B9C0
  .dword 0x12AAD2C0
  .dword 0x12AEEB40
  .dword 0x12B30360
  .dword 0x12B71B20
  .dword 0x12BB3260
  .dword 0x12BF4940
  .dword 0x12C35FC0
  .dword 0x12C775E0
  .dword 0x12CB8B80
  .dword 0x12CFA0E0
  .dword 0x12D3B5C0
  .dword 0x12D7CA20
  .dword 0x12DBDE40
  .dword 0x12DFF1E0
  .dword 0x12E40520
  .dword 0x12E81800
  .dword 0x12EC2A60
  .dword 0x12F03C60
  .dword 0x12F44E00
  .dword 0x12F85F40
  .dword 0x12FC7000
  .dword 0x13008060
  .dword 0x13049060
  .dword 0x1308A000
  .dword 0x130CAF20
  .dword 0x1310BDE0
  .dword 0x1314CC40
  .dword 0x1318DA20
  .dword 0x131CE7A0
  .dword 0x1320F4C0
  .dword 0x13250180
  .dword 0x13290DE0
  .dword 0x132D19C0
  .dword 0x13312540
  .dword 0x13353040
  .dword 0x13393B00
  .dword 0x133D4540
  .dword 0x13414F20
  .dword 0x13455880
  .dword 0x13496180
  .dword 0x134D6A20
  .dword 0x13517260
  .dword 0x13557A20
  .dword 0x135981A0
  .dword 0x135D88A0
  .dword 0x13618F20
  .dword 0x13659540
  .dword 0x13699B20
  .dword 0x136DA060
  .dword 0x1371A560
  .dword 0x1375A9E0
  .dword 0x1379AE00
  .dword 0x137DB1C0
  .dword 0x1381B500
  .dword 0x1385B7E0
  .dword 0x1389BA60
  .dword 0x138DBC60
  .dword 0x1391BE20
  .dword 0x1395BF60
  .dword 0x1399C020
  .dword 0x139DC0A0
  .dword 0x13A1C0A0
  .dword 0x13A5C040
  .dword 0x13A9BF60
  .dword 0x13ADBE40
  .dword 0x13B1BCA0
  .dword 0x13B5BA80
  .dword 0x13B9B820
  .dword 0x13BDB540
  .dword 0x13C1B200
  .dword 0x13C5AE40
  .dword 0x13C9AA20
  .dword 0x13CDA5A0
  .dword 0x13D1A0C0
  .dword 0x13D59B60
  .dword 0x13D995C0
  .dword 0x13DD8F80
  .dword 0x13E18900
  .dword 0x13E58200
  .dword 0x13E97AA0
  .dword 0x13ED72E0
  .dword 0x13F16AA0
  .dword 0x13F56200
  .dword 0x13F95900
  .dword 0x13FD4F80
  .dword 0x140145C0
  .dword 0x14053B60
  .dword 0x140930C0
  .dword 0x140D25A0
  .dword 0x14111A20
  .dword 0x14150E40
  .dword 0x141901E0
  .dword 0x141CF540
  .dword 0x1420E800
  .dword 0x1424DA80
  .dword 0x1428CC80
  .dword 0x142CBE20
  .dword 0x1430AF60
  .dword 0x1434A020
  .dword 0x14389080
  .dword 0x143C8080
  .dword 0x14407000
  .dword 0x14445F20
  .dword 0x14484DE0
  .dword 0x144C3C40
  .dword 0x14502A20
  .dword 0x145417A0
  .dword 0x145804C0
  .dword 0x145BF160
  .dword 0x145FDDA0
  .dword 0x1463C980
  .dword 0x1467B4E0
  .dword 0x146B9FE0
  .dword 0x146F8A80
  .dword 0x147374C0
  .dword 0x14775E80
  .dword 0x147B47E0
  .dword 0x147F30E0
  .dword 0x14831960
  .dword 0x14870180
  .dword 0x148AE940
  .dword 0x148ED080
  .dword 0x1492B760
  .dword 0x14969DE0
  .dword 0x149A8400
  .dword 0x149E69A0
  .dword 0x14A24EE0
  .dword 0x14A633A0
  .dword 0x14AA1820
  .dword 0x14ADFC20
  .dword 0x14B1DFA0
  .dword 0x14B5C2E0
  .dword 0x14B9A5A0
  .dword 0x14BD8800
  .dword 0x14C169E0
  .dword 0x14C54B60
  .dword 0x14C92C80
  .dword 0x14CD0D40
  .dword 0x14D0ED80
  .dword 0x14D4CD60
  .dword 0x14D8ACC0
  .dword 0x14DC8BE0
  .dword 0x14E06A80
  .dword 0x14E448C0
  .dword 0x14E82680
  .dword 0x14EC03E0
  .dword 0x14EFE0E0
  .dword 0x14F3BD60
  .dword 0x14F799A0
  .dword 0x14FB7540
  .dword 0x14FF50A0
  .dword 0x15032B80
  .dword 0x15070600
  .dword 0x150AE020
  .dword 0x150EB9C0
  .dword 0x15129300
  .dword 0x15166BE0
  .dword 0x151A4440
  .dword 0x151E1C60
  .dword 0x1521F3E0
  .dword 0x1525CB20
  .dword 0x1529A1E0
  .dword 0x152D7840
  .dword 0x15314E20
  .dword 0x153523C0
  .dword 0x1538F8E0
  .dword 0x153CCD80
  .dword 0x1540A1E0
  .dword 0x154475C0
  .dword 0x15484920
  .dword 0x154C1C40
  .dword 0x154FEEE0
  .dword 0x1553C120
  .dword 0x155792E0
  .dword 0x155B6460
  .dword 0x155F3540
  .dword 0x156305E0
  .dword 0x1566D600
  .dword 0x156AA5C0
  .dword 0x156E7520
  .dword 0x15724400
  .dword 0x15761280
  .dword 0x1579E0A0
  .dword 0x157DAE40
  .dword 0x15817B80
  .dword 0x15854860
  .dword 0x158914E0
  .dword 0x158CE0E0
  .dword 0x1590AC80
  .dword 0x159477A0
  .dword 0x15984280
  .dword 0x159C0CE0
  .dword 0x159FD6C0
  .dword 0x15A3A060
  .dword 0x15A76980
  .dword 0x15AB3220
  .dword 0x15AEFA80
  .dword 0x15B2C260
  .dword 0x15B689E0
  .dword 0x15BA50E0
  .dword 0x15BE1780
  .dword 0x15C1DDC0
  .dword 0x15C5A3A0
  .dword 0x15C96900
  .dword 0x15CD2E00
  .dword 0x15D0F2A0
  .dword 0x15D4B6C0
  .dword 0x15D87A80
  .dword 0x15DC3DE0
  .dword 0x15E000C0
  .dword 0x15E3C340
  .dword 0x15E78560
  .dword 0x15EB4720
  .dword 0x15EF0860
  .dword 0x15F2C940
  .dword 0x15F689C0
  .dword 0x15FA49C0
  .dword 0x15FE0960
  .dword 0x1601C8A0
  .dword 0x16058760
  .dword 0x160945C0
  .dword 0x160D03C0
  .dword 0x1610C140
  .dword 0x16147E60
  .dword 0x16183B20
  .dword 0x161BF780
  .dword 0x161FB360
  .dword 0x16236EE0
  .dword 0x16272A00
  .dword 0x162AE4A0
  .dword 0x162E9EE0
  .dword 0x163258C0
  .dword 0x16361220
  .dword 0x1639CB20
  .dword 0x163D83C0
  .dword 0x16413C00
  .dword 0x1644F3C0
  .dword 0x1648AB20
  .dword 0x164C6220
  .dword 0x165018A0
  .dword 0x1653CEC0
  .dword 0x16578480
  .dword 0x165B39C0
  .dword 0x165EEEA0
  .dword 0x1662A320
  .dword 0x16665740
  .dword 0x166A0AE0
  .dword 0x166DBE20
  .dword 0x16717100
  .dword 0x16752360
  .dword 0x1678D560
  .dword 0x167C8700
  .dword 0x16803820
  .dword 0x1683E8E0
  .dword 0x16879940
  .dword 0x168B4940
  .dword 0x168EF8C0
  .dword 0x1692A7E0
  .dword 0x169656A0
  .dword 0x169A04E0
  .dword 0x169DB2C0
  .dword 0x16A16040
  .dword 0x16A50D40
  .dword 0x16A8BA00
  .dword 0x16AC6620
  .dword 0x16B01200
  .dword 0x16B3BD60
  .dword 0x16B76860
  .dword 0x16BB1300
  .dword 0x16BEBD40
  .dword 0x16C26700
  .dword 0x16C61060
  .dword 0x16C9B940
  .dword 0x16CD61C0
  .dword 0x16D109E0
  .dword 0x16D4B1A0
  .dword 0x16D858E0
  .dword 0x16DBFFE0
  .dword 0x16DFA640
  .dword 0x16E34C60
  .dword 0x16E6F200
  .dword 0x16EA9740
  .dword 0x16EE3C20
  .dword 0x16F1E080
  .dword 0x16F58480
  .dword 0x16F92820
  .dword 0x16FCCB60
  .dword 0x17006E20
  .dword 0x17041080
  .dword 0x1707B260
  .dword 0x170B5400
  .dword 0x170EF520
  .dword 0x171295E0
  .dword 0x17163620
  .dword 0x1719D600
  .dword 0x171D7580
  .dword 0x172114A0
  .dword 0x1724B340
  .dword 0x17285180
  .dword 0x172BEF60
  .dword 0x172F8CE0
  .dword 0x173329E0
  .dword 0x1736C680
  .dword 0x173A62C0
  .dword 0x173DFE80
  .dword 0x174199E0
  .dword 0x174534E0
  .dword 0x1748CF80
  .dword 0x174C69A0
  .dword 0x17500360
  .dword 0x17539CC0
  .dword 0x175735A0
  .dword 0x175ACE20
  .dword 0x175E6640
  .dword 0x1761FE00
  .dword 0x17659540
  .dword 0x17692C20
  .dword 0x176CC2A0
  .dword 0x177058C0
  .dword 0x1773EE60
  .dword 0x177783A0
  .dword 0x177B1880
  .dword 0x177EACE0
  .dword 0x178240E0
  .dword 0x1785D480
  .dword 0x178967C0
  .dword 0x178CFA80
  .dword 0x17908CE0
  .dword 0x17941EE0
  .dword 0x1797B080
  .dword 0x179B41A0
  .dword 0x179ED260
  .dword 0x17A262C0
  .dword 0x17A5F2A0
  .dword 0x17A98220
  .dword 0x17AD1140
  .dword 0x17B0A000
  .dword 0x17B42E40
  .dword 0x17B7BC40
  .dword 0x17BB49C0
  .dword 0x17BED6C0
  .dword 0x17C26380
  .dword 0x17C5EFC0
  .dword 0x17C97B80
  .dword 0x17CD0700
  .dword 0x17D09200
  .dword 0x17D41CA0
  .dword 0x17D7A6E0
  .dword 0x17DB30C0
  .dword 0x17DEBA20
  .dword 0x17E24320
  .dword 0x17E5CBC0
  .dword 0x17E953E0
  .dword 0x17ECDBC0
  .dword 0x17F06320
  .dword 0x17F3EA00
  .dword 0x17F770A0
  .dword 0x17FAF6C0
  .dword 0x17FE7C80
  .dword 0x180201E0
  .dword 0x180586C0
  .dword 0x18090B40
  .dword 0x180C8F60
  .dword 0x18101320
  .dword 0x18139680
  .dword 0x18171960
  .dword 0x181A9BE0
  .dword 0x181E1E00
  .dword 0x18219FA0
  .dword 0x182520E0
  .dword 0x1828A1C0
  .dword 0x182C2240
  .dword 0x182FA240
  .dword 0x18332200
  .dword 0x1836A140
  .dword 0x183A2000
  .dword 0x183D9E80
  .dword 0x18411C80
  .dword 0x18449A20
  .dword 0x18481760
  .dword 0x184B9440
  .dword 0x184F10A0
  .dword 0x18528CA0
  .dword 0x18560840
  .dword 0x18598360
  .dword 0x185CFE40
  .dword 0x186078A0
  .dword 0x1863F2A0
  .dword 0x18676C20
  .dword 0x186AE560
  .dword 0x186E5E20
  .dword 0x1871D680
  .dword 0x18754E80
  .dword 0x1878C600
  .dword 0x187C3D20
  .dword 0x187FB3E0
  .dword 0x18832A40
  .dword 0x1886A040
  .dword 0x188A15C0
  .dword 0x188D8AE0
  .dword 0x1890FFA0
  .dword 0x189473E0
  .dword 0x1897E7E0
  .dword 0x189B5B60
  .dword 0x189ECE80
  .dword 0x18A24140
  .dword 0x18A5B380
  .dword 0x18A92560
  .dword 0x18AC96E0
  .dword 0x18B00800
  .dword 0x18B378C0
  .dword 0x18B6E900
  .dword 0x18BA58E0
  .dword 0x18BDC860
  .dword 0x18C13780
  .dword 0x18C4A640
  .dword 0x18C81480
  .dword 0x18CB8260
  .dword 0x18CEEFE0
  .dword 0x18D25D00
  .dword 0x18D5C9A0
  .dword 0x18D935E0
  .dword 0x18DCA1C0
  .dword 0x18E00D40
  .dword 0x18E37860
  .dword 0x18E6E300
  .dword 0x18EA4D40
  .dword 0x18EDB720
  .dword 0x18F120A0
  .dword 0x18F489A0
  .dword 0x18F7F260
  .dword 0x18FB5AA0
  .dword 0x18FEC280
  .dword 0x190229E0
  .dword 0x19059100
  .dword 0x1908F7A0
  .dword 0x190C5DE0
  .dword 0x190FC3C0
  .dword 0x19132940
  .dword 0x19168E40
  .dword 0x1919F2E0
  .dword 0x191D5740
  .dword 0x1920BB00
  .dword 0x19241E80
  .dword 0x192781A0
  .dword 0x192AE440
  .dword 0x192E4680
  .dword 0x1931A860
  .dword 0x193509E0
  .dword 0x19386AE0
  .dword 0x193BCB80
  .dword 0x193F2BE0
  .dword 0x19428BA0
  .dword 0x1945EB20
  .dword 0x19494A40
  .dword 0x194CA8E0
  .dword 0x19500720
  .dword 0x19536500
  .dword 0x1956C280
  .dword 0x195A1FA0
  .dword 0x195D7C40
  .dword 0x1960D880
  .dword 0x19643460
  .dword 0x19678FE0
  .dword 0x196AEB00
  .dword 0x196E45A0
  .dword 0x1971A000
  .dword 0x1974F9E0
  .dword 0x19785360
  .dword 0x197BAC80
  .dword 0x197F0520
  .dword 0x19825D80
  .dword 0x1985B560
  .dword 0x19890CE0
  .dword 0x198C6400
  .dword 0x198FBAC0
  .dword 0x19931100
  .dword 0x19966700
  .dword 0x1999BC80
  .dword 0x199D11A0
  .dword 0x19A06660
  .dword 0x19A3BAC0
  .dword 0x19A70EA0
  .dword 0x19AA6240
  .dword 0x19ADB560
  .dword 0x19B10820
  .dword 0x19B45A80
  .dword 0x19B7AC60
  .dword 0x19BAFE00
  .dword 0x19BE4F20
  .dword 0x19C1A000
  .dword 0x19C4F060
  .dword 0x19C84060
  .dword 0x19CB8FE0
  .dword 0x19CEDF20
  .dword 0x19D22E00
  .dword 0x19D57C60
  .dword 0x19D8CA60
  .dword 0x19DC1800
  .dword 0x19DF6540
  .dword 0x19E2B200
  .dword 0x19E5FE80
  .dword 0x19E94A80
  .dword 0x19EC9640
  .dword 0x19EFE180
  .dword 0x19F32C60
  .dword 0x19F676C0
  .dword 0x19F9C0E0
  .dword 0x19FD0A80
  .dword 0x1A0053E0
  .dword 0x1A039CC0
  .dword 0x1A06E540
  .dword 0x1A0A2D60
  .dword 0x1A0D7520
  .dword 0x1A10BC60
  .dword 0x1A140360
  .dword 0x1A1749E0
  .dword 0x1A1A9000
  .dword 0x1A1DD5C0
  .dword 0x1A211B20
  .dword 0x1A246020
  .dword 0x1A27A4C0
  .dword 0x1A2AE8E0
  .dword 0x1A2E2CC0
  .dword 0x1A317020
  .dword 0x1A34B320
  .dword 0x1A37F5C0
  .dword 0x1A3B3800
  .dword 0x1A3E79E0
  .dword 0x1A41BB40
  .dword 0x1A44FC60
  .dword 0x1A483D00
  .dword 0x1A4B7D40
  .dword 0x1A4EBD40
  .dword 0x1A51FCC0
  .dword 0x1A553BC0
  .dword 0x1A587A80
  .dword 0x1A5BB8E0
  .dword 0x1A5EF6C0
  .dword 0x1A623460
  .dword 0x1A657180
  .dword 0x1A68AE40
  .dword 0x1A6BEAA0
  .dword 0x1A6F26A0
  .dword 0x1A726240
  .dword 0x1A759D80
  .dword 0x1A78D840
  .dword 0x1A7C12C0
  .dword 0x1A7F4CC0
  .dword 0x1A828660
  .dword 0x1A85BFC0
  .dword 0x1A88F8A0
  .dword 0x1A8C3120
  .dword 0x1A8F6920
  .dword 0x1A92A0E0
  .dword 0x1A95D840
  .dword 0x1A990F20
  .dword 0x1A9C45C0
  .dword 0x1A9F7BE0
  .dword 0x1AA2B1A0
  .dword 0x1AA5E700
  .dword 0x1AA91C20
  .dword 0x1AAC50A0
  .dword 0x1AAF84E0
  .dword 0x1AB2B8C0
  .dword 0x1AB5EC40
  .dword 0x1AB91F40
  .dword 0x1ABC5200
  .dword 0x1ABF8440
  .dword 0x1AC2B620
  .dword 0x1AC5E7C0
  .dword 0x1AC918E0
  .dword 0x1ACC49A0
  .dword 0x1ACF7A00
  .dword 0x1AD2A9E0
  .dword 0x1AD5D980
  .dword 0x1AD908C0
  .dword 0x1ADC37A0
  .dword 0x1ADF6600
  .dword 0x1AE29400
  .dword 0x1AE5C1C0
  .dword 0x1AE8EF00
  .dword 0x1AEC1BE0
  .dword 0x1AEF4860
  .dword 0x1AF27480
  .dword 0x1AF5A040
  .dword 0x1AF8CBA0
  .dword 0x1AFBF6A0
  .dword 0x1AFF2140
  .dword 0x1B024B80
  .dword 0x1B057540
  .dword 0x1B089EC0
  .dword 0x1B0BC7C0
  .dword 0x1B0EF080
  .dword 0x1B1218C0
  .dword 0x1B1540A0
  .dword 0x1B186840
  .dword 0x1B1B8F60
  .dword 0x1B1EB620
  .dword 0x1B21DC80
  .dword 0x1B250280
  .dword 0x1B282820
  .dword 0x1B2B4D60
  .dword 0x1B2E7220
  .dword 0x1B3196A0
  .dword 0x1B34BAC0
  .dword 0x1B37DE60
  .dword 0x1B3B01C0
  .dword 0x1B3E24C0
  .dword 0x1B414740
  .dword 0x1B446960
  .dword 0x1B478B40
  .dword 0x1B4AACA0
  .dword 0x1B4DCDA0
  .dword 0x1B50EE60
  .dword 0x1B540EA0
  .dword 0x1B572E80
  .dword 0x1B5A4E00
  .dword 0x1B5D6D20
  .dword 0x1B608BE0
  .dword 0x1B63AA40
  .dword 0x1B66C840
  .dword 0x1B69E5E0
  .dword 0x1B6D0320
  .dword 0x1B702000
  .dword 0x1B733C80
  .dword 0x1B765880
  .dword 0x1B797440
  .dword 0x1B7C8FA0
  .dword 0x1B7FAAA0
  .dword 0x1B82C520
  .dword 0x1B85DF60
  .dword 0x1B88F940
  .dword 0x1B8C12A0
  .dword 0x1B8F2BC0
  .dword 0x1B924460
  .dword 0x1B955CC0
  .dword 0x1B9874A0
  .dword 0x1B9B8C40
  .dword 0x1B9EA360
  .dword 0x1BA1BA20
  .dword 0x1BA4D0A0
  .dword 0x1BA7E6A0
  .dword 0x1BAAFC60
  .dword 0x1BAE11A0
  .dword 0x1BB12680
  .dword 0x1BB43B20
  .dword 0x1BB74F40
  .dword 0x1BBA6300
  .dword 0x1BBD7680
  .dword 0x1BC08980
  .dword 0x1BC39C20
  .dword 0x1BC6AE60
  .dword 0x1BC9C060
  .dword 0x1BCCD1E0
  .dword 0x1BCFE300
  .dword 0x1BD2F3E0
  .dword 0x1BD60440
  .dword 0x1BD91440
  .dword 0x1BDC23E0
  .dword 0x1BDF3340
  .dword 0x1BE24220
  .dword 0x1BE550A0
  .dword 0x1BE85EC0
  .dword 0x1BEB6CA0
  .dword 0x1BEE7A00
  .dword 0x1BF18700
  .dword 0x1BF493C0
  .dword 0x1BF7A000
  .dword 0x1BFAABE0
  .dword 0x1BFDB780
  .dword 0x1C00C2A0
  .dword 0x1C03CD60
  .dword 0x1C06D7E0
  .dword 0x1C09E1E0
  .dword 0x1C0CEBA0
  .dword 0x1C0FF4E0
  .dword 0x1C12FDE0
  .dword 0x1C160660
  .dword 0x1C190EA0
  .dword 0x1C1C1660
  .dword 0x1C1F1DE0
  .dword 0x1C2224E0
  .dword 0x1C252BA0
  .dword 0x1C283200
  .dword 0x1C2B37E0
  .dword 0x1C2E3D80
  .dword 0x1C3142C0
  .dword 0x1C3447A0
  .dword 0x1C374C00
  .dword 0x1C3A5020
  .dword 0x1C3D53E0
  .dword 0x1C405740
  .dword 0x1C435A40
  .dword 0x1C465CE0
  .dword 0x1C495F20
  .dword 0x1C4C6100
  .dword 0x1C4F6280
  .dword 0x1C5263A0
  .dword 0x1C556480
  .dword 0x1C5864E0
  .dword 0x1C5B64E0
  .dword 0x1C5E64A0
  .dword 0x1C6163E0
  .dword 0x1C6462C0
  .dword 0x1C676160
  .dword 0x1C6A5F80
  .dword 0x1C6D5D60
  .dword 0x1C705AE0
  .dword 0x1C7357E0
  .dword 0x1C7654A0
  .dword 0x1C795100
  .dword 0x1C7C4D00
  .dword 0x1C7F48A0
  .dword 0x1C8243E0
  .dword 0x1C853EC0
  .dword 0x1C883940
  .dword 0x1C8B3360
  .dword 0x1C8E2D40
  .dword 0x1C9126A0
  .dword 0x1C941FC0
  .dword 0x1C971860
  .dword 0x1C9A10C0
  .dword 0x1C9D08A0
  .dword 0x1CA00040
  .dword 0x1CA2F780
  .dword 0x1CA5EE60
  .dword 0x1CA8E4C0
  .dword 0x1CABDAE0
  .dword 0x1CAED0C0
  .dword 0x1CB1C620
  .dword 0x1CB4BB20
  .dword 0x1CB7AFC0
  .dword 0x1CBAA420
  .dword 0x1CBD9800
  .dword 0x1CC08BA0
  .dword 0x1CC37EC0
  .dword 0x1CC671A0
  .dword 0x1CC96420
  .dword 0x1CCC5640
  .dword 0x1CCF4800
  .dword 0x1CD23960
  .dword 0x1CD52A60
  .dword 0x1CD81B20
  .dword 0x1CDB0B60
  .dword 0x1CDDFB60
  .dword 0x1CE0EAE0
  .dword 0x1CE3DA20
  .dword 0x1CE6C900
  .dword 0x1CE9B780
  .dword 0x1CECA5A0
  .dword 0x1CEF9360
  .dword 0x1CF280C0
  .dword 0x1CF56DC0
  .dword 0x1CF85A80
  .dword 0x1CFB46C0
  .dword 0x1CFE32C0
  .dword 0x1D011E60
  .dword 0x1D040980
  .dword 0x1D06F460
  .dword 0x1D09DF00
  .dword 0x1D0CC920
  .dword 0x1D0FB2E0
  .dword 0x1D129C40
  .dword 0x1D158560
  .dword 0x1D186E20
  .dword 0x1D1B5680
  .dword 0x1D1E3E60
  .dword 0x1D212620
  .dword 0x1D240D60
  .dword 0x1D26F440
  .dword 0x1D29DAC0
  .dword 0x1D2CC100
  .dword 0x1D2FA6E0
  .dword 0x1D328C40
  .dword 0x1D357160
  .dword 0x1D385620
  .dword 0x1D3B3AA0
  .dword 0x1D3E1EA0
  .dword 0x1D410260
  .dword 0x1D43E5A0
  .dword 0x1D46C8A0
  .dword 0x1D49AB40
  .dword 0x1D4C8D80
  .dword 0x1D4F6F60
  .dword 0x1D5250E0
  .dword 0x1D553220
  .dword 0x1D5812E0
  .dword 0x1D5AF360
  .dword 0x1D5DD380
  .dword 0x1D60B340
  .dword 0x1D6392A0
  .dword 0x1D6671C0
  .dword 0x1D695060
  .dword 0x1D6C2EC0
  .dword 0x1D6F0CC0
  .dword 0x1D71EA60
  .dword 0x1D74C7A0
  .dword 0x1D77A480
  .dword 0x1D7A8120
  .dword 0x1D7D5D40
  .dword 0x1D803920
  .dword 0x1D8314A0
  .dword 0x1D85EFC0
  .dword 0x1D88CA80
  .dword 0x1D8BA500
  .dword 0x1D8E7F00
  .dword 0x1D9158C0
  .dword 0x1D943220
  .dword 0x1D970B20
  .dword 0x1D99E3E0
  .dword 0x1D9CBC20
  .dword 0x1D9F9420
  .dword 0x1DA26BC0
  .dword 0x1DA54300
  .dword 0x1DA819E0
  .dword 0x1DAAF060
  .dword 0x1DADC6A0
  .dword 0x1DB09C60
  .dword 0x1DB371E0
  .dword 0x1DB64700
  .dword 0x1DB91BE0
  .dword 0x1DBBF040
  .dword 0x1DBEC460
  .dword 0x1DC19820
  .dword 0x1DC46B80
  .dword 0x1DC73E80
  .dword 0x1DCA1120
  .dword 0x1DCCE380
  .dword 0x1DCFB580
  .dword 0x1DD28720
  .dword 0x1DD55860
  .dword 0x1DD82940
  .dword 0x1DDAF9E0
  .dword 0x1DDDCA20
  .dword 0x1DE09A00
  .dword 0x1DE36980
  .dword 0x1DE638A0
  .dword 0x1DE90780
  .dword 0x1DEBD600
  .dword 0x1DEEA420
  .dword 0x1DF171E0
  .dword 0x1DF43F40
  .dword 0x1DF70C60
  .dword 0x1DF9D920
  .dword 0x1DFCA580
  .dword 0x1DFF7180
  .dword 0x1E023D40
  .dword 0x1E0508A0
  .dword 0x1E07D3A0
  .dword 0x1E0A9E40
  .dword 0x1E0D6880
  .dword 0x1E103280
  .dword 0x1E12FC20
  .dword 0x1E15C560
  .dword 0x1E188E40
  .dword 0x1E1B56E0
  .dword 0x1E1E1F00
  .dword 0x1E20E6E0
  .dword 0x1E23AE80
  .dword 0x1E2675A0
  .dword 0x1E293C80
  .dword 0x1E2C0300
  .dword 0x1E2EC920
  .dword 0x1E318EE0
  .dword 0x1E345460
  .dword 0x1E371980
  .dword 0x1E39DE40
  .dword 0x1E3CA2A0
  .dword 0x1E3F66C0
  .dword 0x1E422A80
  .dword 0x1E44EDE0
  .dword 0x1E47B0E0
  .dword 0x1E4A73A0
  .dword 0x1E4D3600
  .dword 0x1E4FF800
  .dword 0x1E52B9A0
  .dword 0x1E557B00
  .dword 0x1E583C00
  .dword 0x1E5AFCA0
  .dword 0x1E5DBCE0
  .dword 0x1E607CE0
  .dword 0x1E633C80
  .dword 0x1E65FBC0
  .dword 0x1E68BAA0
  .dword 0x1E6B7940
  .dword 0x1E6E3780
  .dword 0x1E70F560
  .dword 0x1E73B300
  .dword 0x1E767020
  .dword 0x1E792D00
  .dword 0x1E7BE9A0
  .dword 0x1E7EA5C0
  .dword 0x1E8161A0
  .dword 0x1E841D20
  .dword 0x1E86D840
  .dword 0x1E899320
  .dword 0x1E8C4DA0
  .dword 0x1E8F07C0
  .dword 0x1E91C1A0
  .dword 0x1E947B00
  .dword 0x1E973440
  .dword 0x1E99ED00
  .dword 0x1E9CA560
  .dword 0x1E9F5D80
  .dword 0x1EA21560
  .dword 0x1EA4CCC0
  .dword 0x1EA783E0
  .dword 0x1EAA3AA0
  .dword 0x1EACF100
  .dword 0x1EAFA720
  .dword 0x1EB25CE0
  .dword 0x1EB51240
  .dword 0x1EB7C760
  .dword 0x1EBA7C20
  .dword 0x1EBD3080
  .dword 0x1EBFE480
  .dword 0x1EC29840
  .dword 0x1EC54BA0
  .dword 0x1EC7FEA0
  .dword 0x1ECAB160
  .dword 0x1ECD63C0
  .dword 0x1ED015C0
  .dword 0x1ED2C780
  .dword 0x1ED578E0
  .dword 0x1ED829E0
  .dword 0x1EDADA80
  .dword 0x1EDD8AE0
  .dword 0x1EE03AE0
  .dword 0x1EE2EAA0
  .dword 0x1EE59A00
  .dword 0x1EE84900
  .dword 0x1EEAF7A0
  .dword 0x1EEDA600
  .dword 0x1EF05400
  .dword 0x1EF301A0
  .dword 0x1EF5AF00
  .dword 0x1EF85C00
  .dword 0x1EFB08C0
  .dword 0x1EFDB500
  .dword 0x1F006100
  .dword 0x1F030CC0
  .dword 0x1F05B800
  .dword 0x1F086300
  .dword 0x1F0B0DC0
  .dword 0x1F0DB820
  .dword 0x1F106220
  .dword 0x1F130BC0
  .dword 0x1F15B520
  .dword 0x1F185E20
  .dword 0x1F1B06C0
  .dword 0x1F1DAF20
  .dword 0x1F205720
  .dword 0x1F22FEE0
  .dword 0x1F25A620
  .dword 0x1F284D40
  .dword 0x1F2AF3E0
  .dword 0x1F2D9A40
  .dword 0x1F304040
  .dword 0x1F32E600
  .dword 0x1F358B60
  .dword 0x1F383060
  .dword 0x1F3AD500
  .dword 0x1F3D7960
  .dword 0x1F401D80
  .dword 0x1F42C120
  .dword 0x1F4564A0
  .dword 0x1F4807A0
  .dword 0x1F4AAA60
  .dword 0x1F4D4CC0
  .dword 0x1F4FEEE0
  .dword 0x1F529080
  .dword 0x1F553200
  .dword 0x1F57D300
  .dword 0x1F5A73C0
  .dword 0x1F5D1440
  .dword 0x1F5FB460
  .dword 0x1F625420
  .dword 0x1F64F380
  .dword 0x1F6792A0
  .dword 0x1F6A3160
  .dword 0x1F6CCFE0
  .dword 0x1F6F6E00
  .dword 0x1F720BE0
  .dword 0x1F74A940
  .dword 0x1F774680
  .dword 0x1F79E340
  .dword 0x1F7C7FC0
  .dword 0x1F7F1C00
  .dword 0x1F81B7C0
  .dword 0x1F845340
  .dword 0x1F86EE80
  .dword 0x1F898960
  .dword 0x1F8C23E0
  .dword 0x1F8EBE20
  .dword 0x1F915800
  .dword 0x1F93F1A0
  .dword 0x1F968AE0
  .dword 0x1F9923C0
  .dword 0x1F9BBC60
  .dword 0x1F9E54A0
  .dword 0x1FA0EC80
  .dword 0x1FA38420
  .dword 0x1FA61B80
  .dword 0x1FA8B280
  .dword 0x1FAB4920
  .dword 0x1FADDF60
  .dword 0x1FB07560
  .dword 0x1FB30B20
  .dword 0x1FB5A080
  .dword 0x1FB83580
  .dword 0x1FBACA40
  .dword 0x1FBD5EA0
  .dword 0x1FBFF2A0
  .dword 0x1FC28660
  .dword 0x1FC519E0
  .dword 0x1FC7ACE0
  .dword 0x1FCA3FC0
  .dword 0x1FCCD220
  .dword 0x1FCF6440
  .dword 0x1FD1F620
  .dword 0x1FD487A0
  .dword 0x1FD718C0
  .dword 0x1FD9A9A0
  .dword 0x1FDC3A20
  .dword 0x1FDECA60
  .dword 0x1FE15A40
  .dword 0x1FE3E9E0
  .dword 0x1FE67920
  .dword 0x1FE90800
  .dword 0x1FEB96A0
  .dword 0x1FEE24E0
  .dword 0x1FF0B2E0
  .dword 0x1FF34080
  .dword 0x1FF5CDE0
  .dword 0x1FF85AE0
  .dword 0x1FFAE7A0
  .dword 0x1FFD7400
  .dword 0x20000000
  .balign 8

locale_list:
  .qword .L00C010E4
  .dword 0x00000002
  .balign 8
  .qword .L00C010E5
  .dword 0x00000002
  .balign 8
  .qword .L00C010E6
  .dword 0x00000002
  .balign 8
  .qword .L00C010E7
  .dword 0x00000001
  .balign 8
  .qword .L00C010E8
  .dword 0x00000001
  .balign 8
  .qword 0x0000000000000000
  .dword 0x00000000
  .balign 16

tk_stdio_vti:
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword fopen
  .qword fclose
  .qword fread
  .qword fwrite
  .qword fgetc
  .qword fputc
  .qword fgets
  .qword fputs
  .qword ungetc
  .qword fseek
  .qword ftell
  .qword fflush
  .qword feof
  .qword freopen
  .qword remove
  .qword __rename2
  .qword vfprintf
  .qword vsnprintf
  .qword vfscanf
  .qword vsscanf
  .qword clearerr
  .qword perror
  .qword setvbuf
  .qword tmpnam
  .qword ferror
  .qword 0x0000000000314159
  .qword _mgetbase
  .qword _mfreezone
  .qword _malloc_cat
  .qword free
  .qword realloc
  .qword _msize
  .qword _mgettag
  .qword _msettag
  .qword _mgetzone
  .qword _msetzone
  .qword opendir
  .qword closedir
  .qword readdir
  .qword __get_errno
  .qword mmap
  .qword munmap
  .qword msync
  .qword mprotect
  .qword setlocale
  .qword localeconv
  .qword signal
  .qword raise
  .qword dlopen
  .qword dlclose
  .qword dlsym
  .qword dlerror
  .qword __open
  .qword __close
  .qword __read
  .qword __write
  .qword __seek
  .qword __ioctl
  .qword __sendto
  .qword __recvfrom
  .qword __bind
  .qword __accept
  .qword __connect
  .qword __multicall
  .qword __exita
  .qword TK_GetTimeUs
  .qword TkClGetInterface
  .qword TkClSetInterface
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000

tk_vfile_multidir_vt:
  .qword .L00C010E9
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword tk_multidir_fioctl
  .qword tk_multidir_readdir
  .qword tk_multidir_closedir
  .qword 0x0000000000000000
  .qword 0x0000000000000000

player_arrow:
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00092492
  .dword 0x00049249
  .dword 0x00124924
  .dword 0x00000000
  .dword 0x00092492
  .dword 0xFFFB6DB7
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0xFFEB6DB8
  .dword 0x00049249
  .dword 0xFFF00000
  .dword 0x00000000
  .dword 0xFFEB6DB8
  .dword 0xFFFB6DB7
  .dword 0xFFF49249
  .dword 0x00000000
  .dword 0xFFF00000
  .dword 0x00049249
  .dword 0xFFF49249
  .dword 0x00000000
  .dword 0xFFF00000
  .dword 0xFFFB6DB7

ReadMenu1:
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ReadThis2
  .byte 0x00
  .balign 8

mapnames2:
  .qword .L00C010EA
  .qword .L00C010EB
  .qword .L00C010EC
  .qword .L00C010ED
  .qword .L00C010EE
  .qword .L00C010EF
  .qword .L00C010F0
  .qword .L00C010F1
  .qword .L00C010F2
  .qword .L00C010F3
  .qword .L00C010F4
  .qword .L00C010F5
  .qword .L00C010F6
  .qword .L00C010F7
  .qword .L00C010F8
  .qword .L00C010F9
  .qword .L00C010FA
  .qword .L00C010FB
  .qword .L00C010FC
  .qword .L00C010FD
  .qword .L00C010FE
  .qword .L00C010FF
  .qword .L00C01100
  .qword .L00C01101
  .qword .L00C01102
  .qword .L00C01103
  .qword .L00C01104
  .qword .L00C01105
  .qword .L00C01106
  .qword .L00C01107
  .qword .L00C01108
  .qword .L00C01109

tkclgpa_symbols:
  .qword .L00C0110A
  .qword tk_stdio_vti
  .qword 0x0000000000000000
  .qword 0x0000000000000000

cpars:
  .dword 0x0000001E
  .dword 0x0000005A
  .dword 0x00000078
  .dword 0x00000078
  .dword 0x0000005A
  .dword 0x00000096
  .dword 0x00000078
  .dword 0x00000078
  .dword 0x0000010E
  .dword 0x0000005A
  .dword 0x000000D2
  .dword 0x00000096
  .dword 0x00000096
  .dword 0x00000096
  .dword 0x000000D2
  .dword 0x00000096
  .dword 0x000001A4
  .dword 0x00000096
  .dword 0x000000D2
  .dword 0x00000096
  .dword 0x000000F0
  .dword 0x00000096
  .dword 0x000000B4
  .dword 0x00000096
  .dword 0x00000096
  .dword 0x0000012C
  .dword 0x0000014A
  .dword 0x000001A4
  .dword 0x0000012C
  .dword 0x000000B4
  .dword 0x00000078
  .dword 0x0000001E

NewGameMenu:
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4A
  .byte 0x4B
  .byte 0x49
  .byte 0x4C
  .byte 0x4C
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChooseSkill
  .byte 0x69
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x52
  .byte 0x4F
  .byte 0x55
  .byte 0x47
  .byte 0x48
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChooseSkill
  .byte 0x68
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x48
  .byte 0x55
  .byte 0x52
  .byte 0x54
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChooseSkill
  .byte 0x68
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x55
  .byte 0x4C
  .byte 0x54
  .byte 0x52
  .byte 0x41
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChooseSkill
  .byte 0x75
  .balign 8
  .word 0x0001
  .byte 0x4D
  .byte 0x5F
  .byte 0x4E
  .byte 0x4D
  .byte 0x41
  .byte 0x52
  .byte 0x45
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_ChooseSkill
  .byte 0x6E
  .balign 8

TU7A00CB85/epsd2animinfo:
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000068
  .dword 0x000000A8
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000028
  .dword 0x00000088
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x000000A0
  .dword 0x00000060
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000068
  .dword 0x00000050
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000000B
  .dword 0x00000003
  .dword 0x00000078
  .dword 0x00000020
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000008
  .dword 0x00000003
  .dword 0x00000028
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .balign 8
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000

player_names:
  .qword .L00C0110B
  .qword .L00C0110C
  .qword .L00C0110D
  .qword .L00C0110E
  .balign 16

TU61F874B9/_ctype_isbufR:
  .word 0x0000
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0104
  .word 0x0104
  .word 0x0104
  .word 0x0104
  .word 0x0104
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0004
  .word 0x0140
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x0459
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x0653
  .word 0x0653
  .word 0x0653
  .word 0x0653
  .word 0x0653
  .word 0x0653
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x0253
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x0473
  .word 0x0473
  .word 0x0473
  .word 0x0473
  .word 0x0473
  .word 0x0473
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x0073
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x00D0
  .word 0x0004
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .word 0x0000
  .balign 8

spmus:
  .dword 0x00000016
  .dword 0x00000014
  .dword 0x00000015
  .dword 0x00000005
  .dword 0x00000010
  .dword 0x0000000D
  .dword 0x0000000F
  .dword 0x0000000E
  .dword 0x00000009
  .balign 8

cheat_mypos_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xB6
  .byte 0xBA
  .byte 0x2A
  .byte 0xF6
  .byte 0xEA
  .byte 0xFF

animdefs:
  .byte 0x00
  .byte 0x4E
  .byte 0x55
  .byte 0x4B
  .byte 0x41
  .byte 0x47
  .byte 0x45
  .byte 0x33
  .byte 0x00
  .byte 0x00
  .byte 0x4E
  .byte 0x55
  .byte 0x4B
  .byte 0x41
  .byte 0x47
  .byte 0x45
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x46
  .byte 0x57
  .byte 0x41
  .byte 0x54
  .byte 0x45
  .byte 0x52
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x46
  .byte 0x57
  .byte 0x41
  .byte 0x54
  .byte 0x45
  .byte 0x52
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x41
  .byte 0x54
  .byte 0x45
  .byte 0x52
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x57
  .byte 0x41
  .byte 0x54
  .byte 0x45
  .byte 0x52
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x4C
  .byte 0x41
  .byte 0x56
  .byte 0x41
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x4C
  .byte 0x41
  .byte 0x56
  .byte 0x41
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x4F
  .byte 0x44
  .byte 0x33
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x4F
  .byte 0x44
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x52
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x30
  .byte 0x38
  .byte 0x00
  .byte 0x00
  .byte 0x52
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x30
  .byte 0x35
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x30
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x30
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x30
  .byte 0x38
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x30
  .byte 0x35
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x31
  .byte 0x32
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x49
  .byte 0x4D
  .byte 0x45
  .byte 0x30
  .byte 0x39
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x44
  .byte 0x47
  .byte 0x52
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x44
  .byte 0x47
  .byte 0x52
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x53
  .byte 0x4C
  .byte 0x41
  .byte 0x44
  .byte 0x52
  .byte 0x49
  .byte 0x50
  .byte 0x33
  .byte 0x00
  .byte 0x53
  .byte 0x4C
  .byte 0x41
  .byte 0x44
  .byte 0x52
  .byte 0x49
  .byte 0x50
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x44
  .byte 0x52
  .byte 0x49
  .byte 0x50
  .byte 0x34
  .byte 0x00
  .byte 0x42
  .byte 0x4C
  .byte 0x4F
  .byte 0x44
  .byte 0x52
  .byte 0x49
  .byte 0x50
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x57
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x00
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x57
  .byte 0x41
  .byte 0x4C
  .byte 0x41
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x47
  .byte 0x53
  .byte 0x54
  .byte 0x46
  .byte 0x4F
  .byte 0x4E
  .byte 0x54
  .byte 0x33
  .byte 0x00
  .byte 0x47
  .byte 0x53
  .byte 0x54
  .byte 0x46
  .byte 0x4F
  .byte 0x4E
  .byte 0x54
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x4C
  .byte 0x41
  .byte 0x56
  .byte 0x41
  .byte 0x00
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x4C
  .byte 0x41
  .byte 0x56
  .byte 0x33
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x4D
  .byte 0x41
  .byte 0x47
  .byte 0x33
  .byte 0x00
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x4D
  .byte 0x41
  .byte 0x47
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x42
  .byte 0x4C
  .byte 0x55
  .byte 0x32
  .byte 0x00
  .byte 0x46
  .byte 0x49
  .byte 0x52
  .byte 0x45
  .byte 0x42
  .byte 0x4C
  .byte 0x55
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x52
  .byte 0x45
  .byte 0x44
  .byte 0x33
  .byte 0x00
  .byte 0x52
  .byte 0x4F
  .byte 0x43
  .byte 0x4B
  .byte 0x52
  .byte 0x45
  .byte 0x44
  .byte 0x31
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x42
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x42
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x53
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x53
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x57
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x57
  .byte 0x46
  .byte 0x41
  .byte 0x4C
  .byte 0x4C
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0x01
  .byte 0x44
  .byte 0x42
  .byte 0x52
  .byte 0x41
  .byte 0x49
  .byte 0x4E
  .byte 0x34
  .byte 0x00
  .byte 0x00
  .byte 0x44
  .byte 0x42
  .byte 0x52
  .byte 0x41
  .byte 0x49
  .byte 0x4E
  .byte 0x31
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000008
  .byte 0xFF
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 4
  .dword 0x00000000

thintriangle_guy:
  .dword 0xFFFF8000
  .dword 0xFFFF4CCD
  .dword 0x00010000
  .dword 0x00000000
  .dword 0x00010000
  .dword 0x00000000
  .dword 0xFFFF8000
  .dword 0x0000B333
  .dword 0xFFFF8000
  .dword 0x0000B333
  .dword 0xFFFF8000
  .dword 0xFFFF4CCD

SoundMenu:
  .word 0x0002
  .byte 0x4D
  .byte 0x5F
  .byte 0x53
  .byte 0x46
  .byte 0x58
  .byte 0x56
  .byte 0x4F
  .byte 0x4C
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SfxVol
  .byte 0x73
  .balign 8
  .word 0xFFFF
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword 0x0000000000000000
  .byte 0x00
  .balign 8
  .word 0x0002
  .byte 0x4D
  .byte 0x5F
  .byte 0x4D
  .byte 0x55
  .byte 0x53
  .byte 0x56
  .byte 0x4F
  .byte 0x4C
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_MusicVol
  .byte 0x6D
  .balign 8
  .word 0xFFFF
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword 0x0000000000000000
  .byte 0x00
  .balign 8

cheat_clev_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0xE2
  .byte 0x36
  .byte 0xA6
  .byte 0x6E
  .byte 0x01
  .byte 0x00
  .byte 0x00
  .byte 0xFF
  .balign 8

chat_macros:
  .qword .L00C01199
  .qword .L00C0119A
  .qword .L00C0119B
  .qword .L00C0119C
  .qword .L00C0119D
  .qword .L00C0119E
  .qword .L00C0119F
  .qword .L00C011A0
  .qword .L00C011A1
  .qword .L00C011A2

cheat_god_seq:
  .byte 0xB2
  .byte 0x26
  .byte 0x26
  .byte 0xAA
  .byte 0x26
  .byte 0xFF
  .balign 8

defaults:
  .qword .L00C011A3
  .qword mouseSensitivity
  .qword 0x0000000000000005
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A4
  .qword snd_SfxVolume
  .qword 0x0000000000000008
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A5
  .qword snd_MusicVolume
  .qword 0x0000000000000008
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A6
  .qword showMessages
  .qword 0x0000000000000001
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A7
  .qword key_right
  .qword 0x00000000000000AE
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A8
  .qword key_left
  .qword 0x00000000000000AC
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011A9
  .qword key_up
  .qword 0x00000000000000AD
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AA
  .qword key_down
  .qword 0x00000000000000AF
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AB
  .qword key_strafeleft
  .qword 0x000000000000002C
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AC
  .qword key_straferight
  .qword 0x000000000000002E
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AD
  .qword key_fire
  .qword 0x000000000000009D
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AE
  .qword key_use
  .qword 0x0000000000000020
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011AF
  .qword key_strafe
  .qword 0x00000000000000B8
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B0
  .qword key_speed
  .qword 0x00000000000000B6
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B1
  .qword usemouse
  .qword 0x0000000000000001
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B2
  .qword mousebfire
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B3
  .qword mousebstrafe
  .qword 0x0000000000000001
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B4
  .qword mousebforward
  .qword 0x0000000000000002
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B5
  .qword usejoystick
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B6
  .qword joybfire
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B7
  .qword joybstrafe
  .qword 0x0000000000000001
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B8
  .qword joybuse
  .qword 0x0000000000000003
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011B9
  .qword joybspeed
  .qword 0x0000000000000002
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011BA
  .qword screenblocks
  .qword 0x000000000000000A
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011BB
  .qword detailLevel
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011BC
  .qword numChannels
  .qword 0x0000000000000003
  .dword 0x00000000
  .dword 0x00000000
  .qword .L00C011BD
  .qword usegamma
  .qword 0x0000000000000000
  .dword 0x00000000
  .dword 0x00000000

pars:
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x00000000
  .dword 0x0000001E
  .dword 0x0000004B
  .dword 0x00000078
  .dword 0x0000005A
  .dword 0x000000A5
  .dword 0x000000B4
  .dword 0x000000B4
  .dword 0x0000001E
  .dword 0x000000A5
  .dword 0x00000000
  .dword 0x0000005A
  .dword 0x0000005A
  .dword 0x0000005A
  .dword 0x00000078
  .dword 0x0000005A
  .dword 0x00000168
  .dword 0x000000F0
  .dword 0x0000001E
  .dword 0x000000AA
  .dword 0x00000000
  .dword 0x0000005A
  .dword 0x0000002D
  .dword 0x0000005A
  .dword 0x00000096
  .dword 0x0000005A
  .dword 0x0000005A
  .dword 0x000000A5
  .dword 0x0000001E
  .dword 0x00000087

SaveMenu:
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x31
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x32
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x33
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x34
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x35
  .balign 8
  .word 0x0001
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .byte 0x00
  .balign 8
  .qword M_SaveSelect
  .byte 0x36
  .balign 16

TU61F874B9/_ctype_tolowR:
  .word 0xFFFF
  .word 0x0000
  .word 0x0001
  .word 0x0002
  .word 0x0003
  .word 0x0004
  .word 0x0005
  .word 0x0006
  .word 0x0007
  .word 0x0008
  .word 0x0009
  .word 0x000A
  .word 0x000B
  .word 0x000C
  .word 0x000D
  .word 0x000E
  .word 0x000F
  .word 0x0010
  .word 0x0011
  .word 0x0012
  .word 0x0013
  .word 0x0014
  .word 0x0015
  .word 0x0016
  .word 0x0017
  .word 0x0018
  .word 0x0019
  .word 0x001A
  .word 0x001B
  .word 0x001C
  .word 0x001D
  .word 0x001E
  .word 0x001F
  .word 0x0020
  .word 0x0021
  .word 0x0022
  .word 0x0023
  .word 0x0024
  .word 0x0025
  .word 0x0026
  .word 0x0027
  .word 0x0028
  .word 0x0029
  .word 0x002A
  .word 0x002B
  .word 0x002C
  .word 0x002D
  .word 0x002E
  .word 0x002F
  .word 0x0030
  .word 0x0031
  .word 0x0032
  .word 0x0033
  .word 0x0034
  .word 0x0035
  .word 0x0036
  .word 0x0037
  .word 0x0038
  .word 0x0039
  .word 0x003A
  .word 0x003B
  .word 0x003C
  .word 0x003D
  .word 0x003E
  .word 0x003F
  .word 0x0040
  .word 0x0061
  .word 0x0062
  .word 0x0063
  .word 0x0064
  .word 0x0065
  .word 0x0066
  .word 0x0067
  .word 0x0068
  .word 0x0069
  .word 0x006A
  .word 0x006B
  .word 0x006C
  .word 0x006D
  .word 0x006E
  .word 0x006F
  .word 0x0070
  .word 0x0071
  .word 0x0072
  .word 0x0073
  .word 0x0074
  .word 0x0075
  .word 0x0076
  .word 0x0077
  .word 0x0078
  .word 0x0079
  .word 0x007A
  .word 0x005B
  .word 0x005C
  .word 0x005D
  .word 0x005E
  .word 0x005F
  .word 0x0060
  .word 0x0061
  .word 0x0062
  .word 0x0063
  .word 0x0064
  .word 0x0065
  .word 0x0066
  .word 0x0067
  .word 0x0068
  .word 0x0069
  .word 0x006A
  .word 0x006B
  .word 0x006C
  .word 0x006D
  .word 0x006E
  .word 0x006F
  .word 0x0070
  .word 0x0071
  .word 0x0072
  .word 0x0073
  .word 0x0074
  .word 0x0075
  .word 0x0076
  .word 0x0077
  .word 0x0078
  .word 0x0079
  .word 0x007A
  .word 0x007B
  .word 0x007C
  .word 0x007D
  .word 0x007E
  .word 0x007F
  .word 0x0080
  .word 0x0081
  .word 0x0082
  .word 0x0083
  .word 0x0084
  .word 0x0085
  .word 0x0086
  .word 0x0087
  .word 0x0088
  .word 0x0089
  .word 0x008A
  .word 0x008B
  .word 0x008C
  .word 0x008D
  .word 0x008E
  .word 0x008F
  .word 0x0090
  .word 0x0091
  .word 0x0092
  .word 0x0093
  .word 0x0094
  .word 0x0095
  .word 0x0096
  .word 0x0097
  .word 0x0098
  .word 0x0099
  .word 0x009A
  .word 0x009B
  .word 0x009C
  .word 0x009D
  .word 0x009E
  .word 0x009F
  .word 0x00A0
  .word 0x00A1
  .word 0x00A2
  .word 0x00A3
  .word 0x00A4
  .word 0x00A5
  .word 0x00A6
  .word 0x00A7
  .word 0x00A8
  .word 0x00A9
  .word 0x00AA
  .word 0x00AB
  .word 0x00AC
  .word 0x00AD
  .word 0x00AE
  .word 0x00AF
  .word 0x00B0
  .word 0x00B1
  .word 0x00B2
  .word 0x00B3
  .word 0x00B4
  .word 0x00B5
  .word 0x00B6
  .word 0x00B7
  .word 0x00B8
  .word 0x00B9
  .word 0x00BA
  .word 0x00BB
  .word 0x00BC
  .word 0x00BD
  .word 0x00BE
  .word 0x00BF
  .word 0x00C0
  .word 0x00C1
  .word 0x00C2
  .word 0x00C3
  .word 0x00C4
  .word 0x00C5
  .word 0x00C6
  .word 0x00C7
  .word 0x00C8
  .word 0x00C9
  .word 0x00CA
  .word 0x00CB
  .word 0x00CC
  .word 0x00CD
  .word 0x00CE
  .word 0x00CF
  .word 0x00D0
  .word 0x00D1
  .word 0x00D2
  .word 0x00D3
  .word 0x00D4
  .word 0x00D5
  .word 0x00D6
  .word 0x00D7
  .word 0x00D8
  .word 0x00D9
  .word 0x00DA
  .word 0x00DB
  .word 0x00DC
  .word 0x00DD
  .word 0x00DE
  .word 0x00DF
  .word 0x00E0
  .word 0x00E1
  .word 0x00E2
  .word 0x00E3
  .word 0x00E4
  .word 0x00E5
  .word 0x00E6
  .word 0x00E7
  .word 0x00E8
  .word 0x00E9
  .word 0x00EA
  .word 0x00EB
  .word 0x00EC
  .word 0x00ED
  .word 0x00EE
  .word 0x00EF
  .word 0x00F0
  .word 0x00F1
  .word 0x00F2
  .word 0x00F3
  .word 0x00F4
  .word 0x00F5
  .word 0x00F6
  .word 0x00F7
  .word 0x00F8
  .word 0x00F9
  .word 0x00FA
  .word 0x00FB
  .word 0x00FC
  .word 0x00FD
  .word 0x00FE
  .word 0x00FF

__data_end:
.section .bss

__bss_start:

nettics:
  .resb 32
  .comm 32

TU7A00CB85/dm_frags:
  .resb 64
  .comm 64

channelstep:
  .resb 32
  .comm 32

nodeingame:
  .resb 32
  .comm 32

resendto:
  .resb 32
  .comm 32

resendcount:
  .resb 32
  .comm 32

remoteresend:
  .resb 32
  .comm 32

TU7A00CB73/oldweaponsowned:
  .resb 40
  .comm 40

savedescription:
  .resb 32
  .comm 32

HU_Responder/lastmessage!42:
  .resb 112
  .comm 112

AM_Responder/buffer!33:
  .resb 24
  .comm 24

ST_Responder/buf!19:
  .resb 56
  .comm 56
  .balign 16

sprtemp:
  .resb 816
  .comm 816

colormaps_aidx:
  .resb 32
  .comm 32

cmap_luma:
  .resb 72
  .comm 72

channelstart:
  .resb 32
  .comm 32

playerstarts:
  .resb 80
  .comm 80

joyarray:
  .resb 24
  .comm 24

saveOldString:
  .resb 24
  .comm 24

consistancy:
  .resb 96
  .comm 96

localcmds:
  .resb 96
  .comm 96

i_snd_t_info:
  .resb 20
  .comm 20
  .balign 8

TU7A00C41B/markpoints:
  .resb 80
  .comm 80

thinkercap:
  .resb 24
  .comm 24

R_SortVisSprites/unsorted!78:
  .resb 80
  .comm 80

screens:
  .resb 40
  .comm 40

TU7A00CB85/p:
  .resb 32
  .comm 32

__start/argv!864:
  .resb 408
  .comm 408

channelsend:
  .resb 64
  .comm 64

activeceilings:
  .resb 240
  .comm 240

activeplats:
  .resb 240
  .comm 240

TU7A00CB73/shortnum:
  .resb 80
  .comm 80

vsprsortedhead:
  .resb 80
  .comm 80

TU7A00CB85/bp:
  .resb 32
  .comm 32

TU7A00CB85/num:
  .resb 80
  .comm 80

TU7A00C41B/marknums:
  .resb 80
  .comm 80

channels:
  .resb 64
  .comm 64

TU7A00CB73/keys:
  .resb 48
  .comm 48

hu_shortnum:
  .resb 80
  .comm 80

TU7A00CB73/w_ready:
  .resb 48
  .comm 48

TU7A00CB73/arms:
  .resb 96
  .comm 96

channelids:
  .resb 32
  .comm 32

tkmm_lvatyi_arrmt:
  .resb 64
  .comm 64

wminfo:
  .resb 200
  .comm 200

tkmm_lvatyi_arrmsc:
  .resb 64
  .comm 64

tkmm_mmlist_brkpos_c:
  .resb 64
  .comm 64

tkmm_mmlist_brkend_c:
  .resb 64
  .comm 64

TU7A00CB73/tallnum:
  .resb 80
  .comm 80

savegamestrings:
  .resb 240
  .comm 240

hu_font:
  .resb 504
  .comm 504

demoname:
  .resb 32
  .comm 32
  .balign 16

players:
  .resb 1280
  .comm 1280

netcmds:
  .resb 384
  .comm 384

buttonlist:
  .resb 512
  .comm 512

tkmm_mmlist_brkbuf_c:
  .resb 64
  .comm 64

spechit:
  .resb 64
  .comm 64

switchlist:
  .resb 400
  .comm 400

TU7A00CB73/w_armor:
  .resb 56
  .comm 56

channelrightvol:
  .resb 32
  .comm 32

TU7A00C577/turbomessage:
  .resb 80
  .comm 80

colormaps_alt:
  .resb 64
  .comm 64

TU7A00CB73/faces:
  .resb 336
  .comm 336

TU7A00CA82/w_title:
  .resb 112
  .comm 112

TU7A00CB73/w_faces:
  .resb 48
  .comm 48

channelstepremainder:
  .resb 32
  .comm 32

exitmsg:
  .resb 128
  .comm 128

channelleftvol:
  .resb 32
  .comm 32

TU7A00CB73/w_armsbg:
  .resb 48
  .comm 48

TU7A00CB73/w_frags:
  .resb 48
  .comm 48

TU7A00CB73/w_health:
  .resb 56
  .comm 56

channelhandles:
  .resb 32
  .comm 32

tempstring:
  .resb 80
  .comm 80

deathmatchstarts:
  .resb 200
  .comm 200

TU7A00CA82/w_chat:
  .resb 136
  .comm 136

ceilingclip:
  .resb 640
  .comm 640

texturehash:
  .resb 128
  .comm 128

floorclip:
  .resb 640
  .comm 640

lumphash:
  .resb 256
  .comm 256

reboundstore:
  .resb 104
  .comm 104

wadfiles:
  .resb 160
  .comm 160

TU7A00CB73/w_ammo:
  .resb 192
  .comm 192

endstring:
  .resb 160
  .comm 160

TU7A00CB73/w_maxammo:
  .resb 192
  .comm 192

channelleftvol_lookup:
  .resb 64
  .comm 64
  .balign 16

d_8to16table:
  .resb 512
  .comm 512

tkmm_lva_taghash:
  .resb 128
  .comm 128

TU7A00CB73/w_keyboxes:
  .resb 144
  .comm 144

lengths:
  .resb 440
  .comm 440

overflowsprite:
  .resb 80
  .comm 80

title:
  .resb 128
  .comm 128

channelrightvol_lookup:
  .resb 64
  .comm 64
  .balign 16

cachedxstep:
  .resb 800
  .comm 800

tkdfs_utf_splithash:
  .resb 512
  .comm 512
  .resb 16

columnofs:
  .resb 4480
  .resb 16
  .comm 4480

i_mus_song_len:
  .resb 128
  .comm 128
  .resb 16

tk_handle_arr:
  .resb 2048
  .resb 16
  .comm 2048

ylookup:
  .resb 6656
  .resb 16
  .comm 6656

scalelight:
  .resb 6144
  .resb 16
  .comm 6144

dc_czbuf_yh:
  .resb 2048
  .resb 16
  .comm 2048

r_polyobj_lut:
  .resb 2048
  .resb 16
  .comm 2048

anims:
  .resb 640
  .comm 640

r_colmask:
  .resb 256
  .comm 256
  .resb 16

vol_lookup:
  .resb 131072
  .resb 16
  .comm 131072

TU7A00CA82/w_inputbuffer:
  .resb 544
  .comm 544

__userFiles:
  .resb 2024
  .comm 2024
  .balign 16
  .resb 16

tk_lva_strbuf_hash:
  .resb 2048
  .resb 16
  .comm 2048

TU61F874B9/buffer2:
  .resb 6152
  .balign 16
  .resb 16
  .comm 6152

openings:
  .resb 40960
  .resb 16
  .comm 40960

braintargets:
  .resb 256
  .comm 256

savename:
  .resb 256
  .comm 256

TU61F874B9/permFiles:
  .resb 336
  .comm 336

steptable:
  .resb 1024
  .comm 1024

screenheightarray:
  .resb 768
  .comm 768
  .resb 16

TU61F874B9/buffer3:
  .resb 6152
  .balign 16
  .resb 16
  .comm 6152

solidsegs:
  .resb 256
  .comm 256
  .resb 16

visplanes:
  .resb 339968
  .resb 16
  .comm 339968

itemrespawnque:
  .resb 2560
  .resb 16
  .comm 2560

distscale:
  .resb 1280
  .comm 1280

linespeciallist:
  .resb 512
  .comm 512

tkdfs_utf_combhash:
  .resb 512
  .comm 512
  .resb 16

tkmm_mmlist_vrm_brkflg:
  .resb 4096
  .resb 16
  .comm 4096

tkmm_mmlist_vrm_brkbuf:
  .resb 8192
  .resb 16
  .comm 8192

d_8to16table_alt:
  .resb 4096
  .resb 16
  .comm 4096

scalelightfixed:
  .resb 384
  .comm 384
  .resb 16

dc_czbuf_yl:
  .resb 2048
  .resb 16
  .comm 2048

btshx_tk_handles:
  .resb 2048
  .resb 16
  .comm 2048

TU7A00CA82/w_message:
  .resb 472
  .comm 472
  .balign 16

gamekeydown:
  .resb 1024
  .comm 1024

i_mus_song_ofs:
  .resb 128
  .comm 128

cachedheight:
  .resb 800
  .comm 800

yslope:
  .resb 800
  .comm 800

basedefault:
  .resb 1024
  .comm 1024

spanstart:
  .resb 800
  .comm 800
  .resb 16

drawsegs:
  .resb 163840
  .resb 16
  .comm 163840

p_acsvm_strs_ptr:
  .resb 32768
  .resb 16
  .comm 32768

TU7A00CB73/w_arms:
  .resb 288
  .comm 288

w_openfiles:
  .resb 256
  .comm 256
  .resb 16

TU61F874B9/buffer1:
  .resb 6152
  .balign 16
  .resb 16
  .comm 6152

vissprites:
  .resb 10240
  .resb 16
  .comm 10240

cachedystep:
  .resb 800
  .comm 800
  .resb 16

dc_czbuf_sc:
  .resb 2048
  .resb 16
  .comm 2048

p_acsvm_scr_idn:
  .resb 4096
  .resb 16
  .comm 4096

TU7A00C419/cheat_xlate_table:
  .resb 256
  .comm 256
  .resb 16

ylookup_zb:
  .resb 6656
  .resb 16
  .comm 6656

p_acsvm_scr_term:
  .resb 1024
  .comm 1024

p_acsvm_wrlvar:
  .resb 1024
  .comm 1024

events:
  .resb 1024
  .comm 1024

negonearray:
  .resb 768
  .comm 768
  .resb 16

tkmm_mmlist_vrm_brkend:
  .resb 8192
  .resb 16
  .comm 8192

intercepts:
  .resb 2048
  .resb 16
  .comm 2048

p_acsvm_scr_ofs:
  .resb 4096
  .resb 16
  .comm 4096

p_acsvm_scr_arn:
  .resb 4096
  .resb 16
  .comm 4096

p_acsvm_mapvar:
  .resb 1024
  .comm 1024

itemrespawntime:
  .resb 512
  .comm 512

cacheddistance:
  .resb 800
  .comm 800
  .resb 16

mixbuffer:
  .resb 2048
  .resb 16
  .comm 2048

tkmm_mmlist_freelist_cat:
  .resb 16384
  .resb 16
  .comm 16384

bodyque:
  .resb 256
  .comm 256
  .resb 16

TU7A00C408/m_softdiv_rcptab:
  .resb 4096
  .resb 16
  .comm 4096

p_acsvm_strs_ofs:
  .resb 16384
  .resb 16
  .comm 16384

TU7A00CA82/chatchars:
  .resb 128
  .comm 128

tkmm_lva_tagbinop_hash:
  .resb 512
  .comm 512
  .resb 16

viewangletox:
  .resb 8192
  .resb 16
  .comm 8192

xtoviewangle:
  .resb 1288
  .comm 1288
  .balign 16
  .resb 16

zlight:
  .resb 16384
  .resb 16
  .comm 16384

tkmm_lva_tagarr:
  .resb 8192
  .resb 16
  .comm 8192

p_acsvm_run:
  .resb 342016
  .resb 16
  .comm 342016

i_mus_songs:
  .resb 256
  .comm 256

_end:

__bss_end:
