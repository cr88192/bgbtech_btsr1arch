<module lang="unknown" arch="BJX2" index=1020716896>
  <types/>
  <structs/>
  <body>
    <asm_blob>
<![CDATA[/*"e_bsr_start.S"9*/ .section .text
.align 2
.global _start
/*13*/ .global _vector_table
.extern __start
.extern timer_ticks
/*17*/ .extern __bss_start
.extern _end
/*21*/ _start:
/*23*/ mov 0x010FFFF0,sp
/*27*/ bsr zero_bss
/*29*/ mov 0x0000DFF0,r0
mov r0,ssp
mov isr_table,r0
mov r0,vbr
/*34*/ bsr __start
bra _exit
/*37*/ _exit:
mov# -1,r0
jmp r0
nop
/*42*/ zero_bss:
mov __bss_start,r2
mov _end,r3
mov#0,r4
.L0:
mov.l r4,@-r3
cmp/hi r2,r3
bt .L0
rts
bra _exit
/*68*/ isr_except:
break
/*72*/ isr_inter:
mov exsr,r4
/*75*/ bsr __isr_interrupt
rte
/*78*/ isr_table:
bra8b _start
bra8b isr_except
bra8b isr_inter
bra8b isr_inter
/*90*/ .global __umullq
__umullq:
dmulu r4,r5
mov dhr,r3
mov dlr,r2
shll32 r3
add r3,r2
rts
/*99*/ .global __smullq
__smullq:
dmuls r4,r5
mov dhr,r3
mov dlr,r2
shll32 r3
add r3,r2
rts
/*113*/ .global __umulsq
.global __smulsq
__umulsq:
__smulsq:
mov r4,r6
mov r5,r7
shlr32 r6
shlr32 r7
/*122*/ dmulu r4,r5
mov dhr,r3
mov dlr,r2
/*126*/ dmulu r4,r7
add dlr,r3
dmulu r6,r5
add dlr,r3
/*133*/ shll32 r3
add r3,r2
/*138*/ rts
/*143*/ .global __umuldq
mov r4,r6
mov r5,r7
shlr32 r6
shlr32 r7
/*149*/ dmulu r4,r5
mov dhr,r3
mov dlr,r2
/*153*/ dmulu r4,r7
add dlr,r3
dmulu r6,r5
add dlr,r3
/*159*/ mov r3,r4
shll32 r4
add r4,r2
/*163*/ shlr32 r3
dmulu r6,r7
add dlr,r3
/*169*/ rts
/*174*/ .global __smuldq
mov r4,r6
mov r5,r7
shlr32 r6
shlr32 r7
/*180*/ dmulu r4,r5
mov dhr,r3
mov dlr,r2
/*184*/ dmulu r4,r7
add dlr,r3
dmulu r6,r5
add dlr,r3
/*190*/ mov r3,r4
shll32 r4
add r4,r2
/*194*/ shlr32 r3
dmuls r6,r7
add dlr,r3
/*200*/ rts
/*288*/ .ifarch seen_ishr_var
.global __lshrsi3
__lshrsi3:
mov r5,r2
not r2
and#31,r2
mov lshr_list,r1
lea.w(r1,r2),r1
mov r4,r0
jmp r1
/*299*/ lshr_list:
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
shlr1 r0
rts
.endif
/*334*/ .ifarch seen_isar_var
.global __ashrsi3
__ashrsi3:
mov r5,r2
not r2
and#31,r2
mov ashr_list,r1
lea.w(r1,r2),r1
mov r4,r0
jmp r1
/*345*/ ashr_list:
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
shar1 r0
rts
.endif
/*380*/ .ifarch seen_ishl_var
.global __ashlsi3
__ashlsi3:
mov r5,r2
not r2
and#31,r2
mov ashl_list,r1
lea.w(r1,r2),r1
mov r4,r0
/*390*/ jmp r1
/*392*/ ashl_list:
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
shll1 r0
rts
.endif
/*428*/ .global __longj
__longj:
mov r4,r1
mov r5,r2
/*433*/ mov.q @(16,r4),r0
lds r0,pr
/*436*/ mov.q @(0,r4),r0
mov.q @(8,r4),r1
/*439*/ mov.q @(24,r4),r3
/*441*/ mov.q @(40,r4),r5
mov.q @(48,r4),r6
mov.q @(56,r4),r7
mov.q @(64,r4),r8
mov.q @(72,r4),r9
mov.q @(80,r4),r10
mov.q @(88,r4),r11
mov.q @(96,r4),r12
mov.q @(104,r4),r13
mov.q @(112,r4),r14
mov.q @(120,r4),r15
/*453*/ mov.q @(128,r4),r16
mov.q @(136,r4),r17
mov.q @(144,r4),r18
mov.q @(152,r4),r19
mov.q @(160,r4),r20
mov.q @(168,r4),r21
mov.q @(176,r4),r22
mov.q @(184,r4),r23
mov.q @(192,r4),r24
mov.q @(200,r4),r25
mov.q @(208,r4),r26
mov.q @(216,r4),r27
mov.q @(224,r4),r28
mov.q @(232,r4),r29
mov.q @(240,r4),r30
mov.q @(248,r4),r31
/*471*/ rts
nop
/*474*/ .global __setj
__setj:
/*477*/ mov.q r0,@(0,r4)
mov.q r1,@(8,r4)
mov.q r2,@(16,r4)
mov.q r3,@(24,r4)
mov.q r4,@(32,r4)
mov.q r5,@(40,r4)
mov.q r6,@(48,r4)
mov.q r7,@(56,r4)
mov.q r8,@(64,r4)
mov.q r9,@(72,r4)
mov.q r10,@(80,r4)
mov.q r11,@(88,r4)
mov.q r12,@(96,r4)
mov.q r13,@(104,r4)
mov.q r14,@(112,r4)
mov.q r15,@(120,r4)
/*494*/ mov.q r16,@(128,r4)
mov.q r17,@(136,r4)
mov.q r18,@(144,r4)
mov.q r19,@(152,r4)
mov.q r20,@(160,r4)
mov.q r21,@(168,r4)
mov.q r22,@(176,r4)
mov.q r23,@(184,r4)
mov.q r24,@(192,r4)
mov.q r25,@(200,r4)
mov.q r26,@(208,r4)
mov.q r27,@(216,r4)
mov.q r28,@(224,r4)
mov.q r29,@(232,r4)
mov.q r30,@(240,r4)
mov.q r31,@(248,r4)
/*511*/ sts pr,r1
/*514*/ mov.q r1,@(16,r4)
/*517*/ mov#0,r2
rts
nop
/*522*/ .global __va64_arg_i
__va64_arg_i:
mov.l @(r4,96),r2
mov#64,r1
cmp/gt r2,r1
bf __va64_arg_i.L0
/*529*/ mov r2,r3
add r4,r3
mov.q @r3,r6
add#8,r2
mov.l r2,@(r4,96)
mov r6,r2
rts
nop
__va64_arg_i.L0:
mov.q @(r4,112),r1
mov.l @r1+,r6
mov.q r1,@(r4,112)
mov r6,r2
rts
nop
/*545*/ .global __va64_arg_l
__va64_arg_l:
mov.l @(r4,96),r2
mov#64,r1
cmp/gt r2,r1
bf __va64_arg_l.L0
/*552*/ mov r2,r3
add r4,r3
mov.q @r3,r6
add#8,r2
mov.l r2,@(r4,96)
mov r6,r2
rts
nop
__va64_arg_l.L0:
mov.q @(r4,112),r1
add#7,r1
and# -8,r1
mov.q @r1+,r6
mov.q r1,@(r4,112)
mov r6,r2
rts
nop
/*570*/ .global __va64_arg_x
__va64_arg_x:
mov.l @(r4,96),r0
mov#56,r1
cmp/gt r0,r1
bf __va64_arg_x.L0
mov r0,r1
add r4,r1
mov.q @r1,r6
add#8,r1
mov.q @r1,r7
add#8,r1
mov.l r1,@(r4,96)
mov r6,r2
mov r7,r3
rts
nop
__va64_arg_x.L0:
mov.q @(r4,112),r1
add#7,r1
and# -8,r1
mov.q @r1+,r6
mov.q @r1+,r7
mov.q r1,@(r4,112)
mov r6,r2
mov r7,r3
rts
nop
/*599*/ .global __va64_arg_f
__va64_arg_f:
mov.l @(r4,104),r0
mov#96,r1
cmp/gt r0,r1
bf __va64_arg_f.L0
/*606*/ mov r4,r3
add r0,r3
fmov.d @r3,fr2
add#8,r0
mov r0,r1
mov.l r1,@(r4,104)
rts
nop
__va64_arg_f.L0:
mov.q @(r4,112),r1
fmov.s @r1,fr2
add#4,r1
mov.q r1,@(r4,112)
rts
nop
/*622*/ .global __va64_arg_d
__va64_arg_d:
mov.l @(r4,104),r0
add#7,r0
mov# -8,r1
and r1,r0
/*629*/ mov#96,r1
cmp/gt r0,r1
bf __va64_arg_d.L0
/*633*/ mov r4,r3
add r0,r3
fmov.d @r3,fr2
/*637*/ add#8,r0
mov r0,r1
mov.l r1,@(r4,104)
rts
nop
__va64_arg_d.L0:
mov.q @(r4,112),r1
fmov.d @r1,fr2
add#8,r1
mov.q r1,@(r4,112)
rts
nop
/*650*/ .global __ldhf16
__ldhf16:
mov r4,dlr
/*654*/ fldch fr2
rts
/*657*/ .global __sthf16
__sthf16:
fstch fr4
mov dlr,r2
rts
/*663*/ .global __memcpy32
__memcpy32:
/*667*/ mov r5,r3
add r6,r3
__memcpy32.L0:
mov.l @r5,r1
mov.l r1,@r4
add#4,r5
add#4,r4
cmp/hi r5,r3
bt __memcpy32.L0
/*677*/ rts
/*692*/ .global __memcpy64
__memcpy64:
/*696*/ mov r5,r3
add r6,r3
__memcpy64.L0:
mov.q @r5,r1
mov.q r1,@r4
add#8,r5
add#8,r4
cmp/hi r5,r3
bt __memcpy64.L0
/*706*/ rts
/*709*/ .global __memcpy128
__memcpy128:
/*713*/ mov r5,r3
add r6,r3
__memcpy128.L0:
mov.q @(r5,0),r0
mov.q @(r5,8),r1
mov.q r0,@(r4,0)
mov.q r1,@(r4,8)
add#16,r5
add#16,r4
cmp/hi r5,r3
bt __memcpy128.L0
/*725*/ rts
/*728*/ .global __memcpy8_16
__memcpy8_16:
mov.q @(r5,0),r0
mov.q @(r5,8),r1
mov.q r0,@(r4,0)
mov.q r1,@(r4,8)
rts
/*736*/ .global sleep_0
sleep_0:
sleep
rts
]]>    </asm_blob>
  </body>
</module>
