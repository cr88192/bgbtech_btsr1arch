BSRLZ0: Rice+STF LZ77
* Aim: Rice+STF LZ77 Codec
* Optimize for low-cost implementation.
** Decoder should be relatively simple with low memory requirements.
* Aim for higher compression (at lower speeds) than LZ4 or RP2.


=== AdRice ===

Will use an LSB-first bitstream.

Will use a prefix with zero or more zero bits terminated by a 1 bit.

The Q prefix will range from 0-7, a prefix with 8 zero bits will encode an escape:
* 8 bits: 0x00
* 8 bits: Value/Index

In other cases, the Q prefix will be followed by a K bit suffix (R). The value will be decoded as (Q<<K)|R.

K will be updated based on Q:
* 0: K-- if K>0
* 1: Leave as-is
* 2..7: K++ (Implicitly clammped to 8).
* 8: K+=2

The AdRice contexts will have a starting K of 4.


=== STF ===

This will be a positional entropy transform.
It aims to order symbols (roughly) in the order of their probability.

An index (I) is used to fetch a value from the circular array (mod-256), and then the array is updated based on this index value.

The native implementation is a 256 byte array, with an 8-bit position rover. The index effectively maps into the array as "arr[(I+rov)&255]".

The initial state for the array will encode values from 00 to FF in order, with an initial rover value of 00.


Will use slightly different behaviors based on the index (I):
* 0: Do Nothing
* 1..31: Swap symbols at I with I-1
* Else:
** Swap symbols at I with 255;
** Rotate window by 1 position (so 255 is now at 0).
** In effect, the rotation works by decrementing the rover.
** This serves to move the symbol to the front of the array.


Nominally, STF indices will be encoded using Rice, in a form known as STFRice. 
This may be denoted with a context given as an argument, so "STFRice(Lit)" may mean a STF+Rice symbol encoded in the "Literals" context. Each STFRice context will have its own array, rover, and K value.


=== VLN ===

VLN Values may also be encoded using AdRice:
* Prefix,  Value Range, Extra Bits
* 00..1F:      0..    31, 0
* 20..2F:     32..    63, 1
* 30..3F:     64..   127, 2
* 40..4F:    128..   255, 3
* 50..5F:    256..   511, 4
* 60..6F:    512..  1023, 5
* 70..7F:   1024..  2047, 6
* 80..8F:   2048..  4095, 7
* 90..9F:   4096..  8191, 8
* A0..AF:   8192.. 16383, 9
* B0..BF:  16384.. 32767, 10
* C0..CF:  32768.. 65535, 11
* D0..DF:  65536..131071, 12
* E0..EF: 131072..262143, 13
* F0..FF: 262144..524287, 14


=== LZ Stream ===

Will consist of a series of Tag bytes giving a literal byte count and match length.

STFRice(Tag):
* High 4 bits: Literal Bytes (0-14)
* Low 4 bits: Match Length (3-17)

If there are 15 or more literal bytes, then the tag will encode 15, and will be followed by a VLN encoding the actual length, VLN(RLen).

A similar encoding will be used for matches longer than 17 bytes, which will also be encoded as VLN(MLen). Otherwise, a separate VLN is not used.

The match length will be followed by the distance, encoded as VLN(Dist).
After the distance, a series of literal bytes may be encoded as STFRice(Lit).

If the match distance is 0, this will encode either a escape command or an end marker.
* If the encoded match length is 3, it is an End-Marker.
* If the encoded match length is 4, only a run of literal bytes is encoded.
* Other match-length values will encode other escape sequences.

Note that the literal bytes will be decoded before the match copy is performed.


Matches will be copied from a sliding window, with the distance encoding how far back the match will be copied from. If the match length is longer than the distance, then a repeating pattern will be generated as-if the copy had taken place one byte at a time.
