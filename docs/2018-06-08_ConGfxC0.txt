Memory Map:
* FFFF_F00A0000..FFFF_F00BFEFF: Video Memory
* FFFF_F00BFF00..FFFF_F00BFFFF: Control Registers

Control Registers:
* FFFF_F00BFF00: Control Register 0
* FFFF_F00BFF08: Control Register 1
* FFFF_F00BFF10: Control Register 2
* FFFF_F00BFF18: Control Register 3
* FFFF_F00BFF20: Control Register 4
* FFFF_F00BFF28: Control Register 5
* FFFF_F00BFF30: Font RAM (Low)
* FFFF_F00BFF38: Font RAM (High)


Cell size may vary with screen type.
* 40 x 25 x  64 bit:  8kB
* 40 x 25 x 128 bit: 16kB
* 40 x 25 x 256 bit: 32kB
* 80 x 25 x 128 bit: 32kB
* 80 x 25 x 256 bit: 64kB
* 80 x 50 x 128 bit: 64kB
* 80 x 50 x 256 bit: 128kB

The cell will be organized as 8 consecutive DWORD values.
* The first DWORD will identify the Cell Mode (In bits 31:30).
* If interpreted as a larger value, it will be seen as Little Endian.
** However, Raster Order will be MSB first.

It may depend on the hardware which modes are supported.

If the hardware cell is narrower than an 8 DWORD stride, then some of the DWORD values may simply be absent. Writing to these addresses will be no-op and reads will return an undefined value.


Control Register 0 Bits:
* ( 0): Horizontal Resolution Adjust
** 0=40/50/64 Column (XRes/16), 1=80/100/128 Column (XRes/8)
* 1: / Half-Width Cell (0=256b, 1=128b)
* ( 1): Cell Width 1
* ( 2): Vertical Resolution Adjust
** 0=25 Rows (YRes/16), 1=50 Rows (YRes/8)
* ( 3): Display Resolution 1
** / 0=640x480, 1=800x600
** Implicitly selects between 80 and 100 columns.
* (7:4): Screen Buffer Mode
** 0=Color Cell, CLR15=YVU654.
** 1=4x4x16bpp (256b) or 4x4x8bpp (128b)
** 2=8x8x4bpp (256b) or 8x8x2bpp (128b) or 8x8x1bpp (64b)
** 8=ColorCell, CLR15=RGB555.
** 9=4x4x16bpp RGB555 (256b) or 4x4x8b (128b)
*** Vertical Adjust 3: 4x1x16bpp (64b)
** A=8x8x4bpp (256b) or 8x8x2bpp (128b) or 8x8x1bpp (64b)
*** Vertical Adjust 3: 8x1x8bpp (64b)
* ( 8): Display Resolution 2
* ( 9): Display Resolution 3
* (10): Cell Width 2
* (11): Cell Width 3
* (15:12): Colorspace Modifier
* (17:16): Addressing Mode
* (18): Horizontal Resolution Adjust 2
** Double the horizontal density (80->160 column, etc)
* (19): Vertical Resolution Adjust 2
** Double the vertical density (50->100 row, etc)
* (23:20): Pixel Clock Control
** 0:  25.0 MHz
** 1:  37.5 MHz
** 2:  50.0 MHz
** 3: 100.0 MHz
* (24): Display Resolution 4
* (25): Display Resolution 5

* (26): Horizontal Resolution Adjust 3
* (27): Vertical Resolution Adjust 3
** Combines with Adjust 2, eg:
*** 00 = 50 row, 01 = 100 row, 10=200 row, 11 = 400 row.
*** Row count will depend on resolution.
** May be used to configure raster-oriented modes.
*** The 200 and 400 row modes will only emit the 1 row of pixels per cell.
*** Modes 1 and 9 will always assume 16 bpp.

* (31:28): Reserved


* (39:32): Cursor X
* (47:40): Cursor Y
* (55:48): Scroll Adjust X
* (63:56): Scroll Adjust Y

Basic Display Resolution
* (DR5, DR4, DR3, DR2, DR1)
** 00000: 640x400
** 00001: 800x600
** 00010: 1024x768
** 00011: 1024x512
** 00100: 640x480
** 00101: -
** 00110: 640x480 (64x32 or 128x64)
** 00111: 640x400 (64x32 or 128x64)
** 01000: 1280x800
** 01001: 1440x900
** 01100: 1280x1024

Cell Width
* (CW3, CW2, CW1)
** 000: 256-bit
** 001: 128-bit
** 010: 64-bit


Control Register 1:
* (31: 0): VRAM Base Address


Font RAM:
A glyph will be uploaded to Font RAM by first storing to the low word, and then to the high word.

The stores to Font RAM will take the form:
* (31: 0): Pixel Bits
* (41:32): Glyph Index
* (63:42): Reserved / MBZ

Address Mode:
* 00: VRAM MMIO region is 128K, Linearly Addressed
* 01: Striped Addressing (QWORD)
** The space will be split into 4 parallel stripes.
** Low 2 bits of address encode an address stripe.


== Bitmapped Modes ==

These will use the cells as a bitmapped pixel block.
The mode bits will select which of the formats is used.

256 bit:
* 4x4x16b, 4x4 cell of YVU655 endpoints.
** An alternate mode may use RGB555.
* 8x8x4b, 8x8 cell of RGBI endpoints.
** Basic layout is the same as the 16bpp mode.
** Each 16-bit element is further split into 2x2 RGBI values.

128-bit:
* 4x4x8b, 4x4 cell of 256-color endpoints.

* 8x8x2b, 8x8 cell of 2-bit endpoints.
** Basic layout is the same as the 8bpp mode.
** Each 8-bit element is further split into 2x2 2I values.

Pixels will be organized in the cells in raster order starting from the top-left, with the first pixel in the LSB. This will match a typical in-memory order in the 16-bit case.

Hardware Palette, 8-bit:
* 00..7F: RGB232
* 80..FF: Gradient of each of the 8 primarry colors.

Hardware Palette, 4-bit:
* 0-7=Low Intensity, 8-F=High Intensity
** Low Intensity maps each RGB bit to (00,AA).
** High Intensity maps each RGB bit to (55,FF).
* 0=HiBlack, 1=LoBlue   , 2=LoGreen , 3=LoCyan
* 4=LoRed  , 5=LoMagenta, 6=LoYellow, 7=LoWhite
* 8=HiBlack, 9=HiBlue   , A=HiGreen , B=HiCyan
* C=HiRed  , D=HiMagenta, E=HiYellow, F=HiWhite

In 4-color modes, the Colorspace Modifier will select a palette:
* 0: Black,  33% Gray,  67% Gray, White
* 1: Black,     Green,       Red, Yellow
* 2: Black,     Green,       Red, Blue
* 3: Black,      Cyan,   Magenta, Yellow
* 4: Black,      Cyan,    Yellow, White
* 5: Black,   Magenta,    Yellow, White
* 6: Black,     Green,       Red, White
* 7: Black,      Cyan,   Magenta, White
* 8: Black, 33% Olive, 67% Olive, 100% Olive (AAFF00)
* 9: Black, 33% Sepia, 67% Sepia, 100% Sepia (FFAA00)
* A: Black, 33% Azure, 67% Azure, 100% Azure (00AAFF)
* B: Black,     Green,      Blue, White
* C: X^Y Bayer, Alternates 11 or 6 (Even/Odd)
* D: X^Y Bayer, Alternates  7 or 6
* E: X^Y Bayer, Alternates  5 or 4
* F: X^Y Bayer, Alternates  3 or 2 

In 1-bit mode, Colorspace Modifier palettes:
* 0..7: Selects a single RGB Color (Traditional Monochrome).
* 8..B: Extra Colors (Olive, Amber, Azure, Magenta)
* C: (Green, Blue),(    Red, Green), Bayer Pattern
* D: ( Cyan, Blue),(    Red,Yellow), Bayer Pattern
* E: (Green, Cyan),(Magenta,Yellow), Bayer Pattern
* F: (White, Cyan),(Magenta,Yellow), Bayer Pattern

If the pixel bit is clear in 1-bit mode, it will be black. If set, it will be one of the colors given by the colorspace modifier. Modes C..F will give Bayer-Patterned modes.


== Color Cell Mode ==

For 1-bit pixel formats:
* If pixel bit is set, it will select ColorA, otherwise ColorB will be used.

For 2-bit pixel formats:
* 00: ColorB
* 01: 2/3 ColorB + 1/3 ColorA
* 10: 1/3 ColorB + 2/3 ColorA
* 11: ColorA


Colors may be one of several colorspaces:
* RGB222 (6-bit)
* RGB333 (9-bit)
* CLR15 (15-bit)
** Mode specific endpoint
** RGB555 (15-bit)
*** (14:10)=R
*** ( 9: 5)=G
*** ( 4: 0)=B
** YVU654 (15-bit)
*** (14:9)=Y
*** ( 8:4)=V
*** ( 3:0)=U


=== Cell Modes 0.0 and 1.0 (Basic Cells) ===

Base glyphs are organized as 32-bit cells.
* (255:64): Ignored
* (63:62): Cell Mode B (CellModeB, 0)
* (61:32): Reserved, Zeroes
** (63:62): May be used for further Cell Modes.
* (31:30): Cell Mode (CellMode)
** 00: Text Cell, 8x8, uses Font Memory
** 01: Graphics Cell, 4x4x1
* (29:28): Color Mode (ClrMode)
* (27:16): Color or Effect Bits
* (15: 0): Char or Pixel Bits

Cell Mode 0.0:
* Cells are a text-cell, with a 10-bit font space.
** (15:10): Attribute Effect Flags (if ClrTag==0)
*** (15:14)=Blink
*** (13)=Reserved
*** (12)=Overline
*** (11)=Underline
*** (10)=Strike
** ( 9: 8): Font
** ( 7: 0): Glyph

Blink:
* 00: Non-Blink
* 01: Blink, Fast
* 10: Blink, Slow/Basic
* 11: Blink, Alternating Cell
** (61:32)=Alternate Cell Contents
** Switches alternatively between two different cell glyphs.

Cell Mode 1.0:
* Encodes a 4x4x1 Color Cell
** (15:0): 4x4x1 Bitmap bits.
* ClrMode is 00.

Mode 0/1:
* 27,22: ColorB
* 21,16: ColorA
** Colors: rrggbb
** 0, 85, 170, 255

(29:28)=Color Mode (ClrMode)
* 00: 2x 6-bit RGB endpoints (64 colors).
*** (27:22)=ColorB
*** (21:16)=ColorA
* 10: 2x 9-bit RGB endpoints (512 colors).
*** (27:19)=ColorB
*** (18:10)=ColorA

For 6-bit color endpoints:
* Colors are encoded as rrggbb
* Each 2-bit value maps to one of: 0, 85, 170, 255

For 9-bit color endpoints:
* Colors are encoded as rrrgggbbb
* Each 3-bit value maps to one of: 0, 36, 73, 110, 146, 182, 219, 255

=== Cell Mode 0.2 (Sprite Cell) ===

* (255:128): Ignored
* (127:96): Reserved
* (95:88): Sprite ID
* (87:76): Sprite Y
* (75:64): Sprite X
* (63:62): Cell Mode B (CellModeB, 2)
* (61:47): Color B (RGB555)
* (46:32): Color A (RGB555)
* (31:30): Cell Mode (CellMode, 0)
* (29:24): Sprite Attrib
* (23:12): Sprite Glyph (B) / Mask
* (11: 0): Sprite Glyph (A) / Color Select


=== Cell Mode 0.3 (Sprite Cell 2) ===

Similar to 0.2, except that (255:128) is interpreted as pixel bits more like those in mode 3.3.



=== Cell Mode 2 (Graphical Cells, Change) ===

Encodes an 8x8 Color Cell (128):
* (63:62): Cell Mode B (CellModeB)
* CellModeB=00: Y=8x8x1, 128-bit
* CellModeB=01: Reserved
* CellModeB=10: Y=8x8x2, 256-bit
* CellModeB=11: Reserved


==== Format (2.0): 8x8x1 (128 bit) ====

Format (2.0): YUV 4:2:0 (128 bit):
* (127:64): 8x8x1 Luma (Y)
* (63:62): Cell Mode B (CellModeB)
* ( 61:32): Reserved
**  Low 30 bits: 2x CLR15
** (29:15)=ColorB
** (14: 0)=ColorA


==== Format (2.1): 8x8x1 / (4x4x1 Sub-Cell) (128 bit) ====

Format (2.1): YUV 4:2:0 (128 bit):
* (127:64): 8x8x1 Luma (Y)
* (63:62): Cell Mode B (CellModeB)
* (61:60): 00
** (59:48)=Color3
*** (59:54)=Color3B
*** (53:48)=Color3A
* (47:44): 0000
** (43:32)=Color2
*** (43:38)=Color2B
*** (37:32)=Color2A
* (31:30): Cell Mode
* (29:28): 00
** (27:16)=Color1
*** (27:22)=Color1B
*** (21:16)=Color1A
* (15:12): 0000
** (11: 0)=Color0
*** (11: 6)=Color0B
*** ( 5: 0)=Color0A


==== Format (2.2): YUV 4:2:0 (256 bit) ====

Format (2.2): Color Tag 2: YUV 4:2:0 (256 bit):
* (255:128) = Y Pixel Bits (As 4x4x2 Sub-Blocks)
* (127: 96) = U Pixel Bits (As 2x2x2 Sub-Blocks)
* ( 95: 64) = V Pixel Bits (As 2x2x2 Sub-Blocks)
* ( 55: 32) = Color B (YUV888)
* ( 23:  0) = Color A (YUV888)


=== Cell Mode 3 (Graphical Cells) ===

These will rely on a secondary Cell Mode in bits 62 and 63.

Extended Graphics Cell
* (63:62): Cell Mode B (CellModeB)
** 00: / 4x4, 6-bpp Bitmap (Drop)
** 00: 4x4, 4x4 15-bit CLR15
** 01: 8x16, 4x8 Sub-Cell (15-bit CLR15)
** 10: 4x8, 2x2 Sub-Cell (15-bit CLR15)
** 11: 8x8, 4x4 Sub-Cell (15-bit CLR15)


==== Format (3.0): 4x4 Cell, 6-bpp Bitmap Cells (Drop) ====

Format (3.0): 6-bpp Bitmap Cells (128 bit):
* CellMode=11, ClrTag=00/01
** CellModeB = 00
* ClrTag will select between Row/Col Ordering
* Store 4x4x6 bpp
* Each 32-bit word holds 4 pixels, each 6 bits.
** Pixel data is held in the low 24 bits.
** (127:120), (95:88) = Currently Ignored


==== Format (3.0): 4x4 Cell, 15-bpp Bitmap Cells ====

Format (3.0): 15-bpp Bitmap Cells (256 bit):
* CellMode=11, ClrTag=00/01
** CellModeB = 00

The low 30 bits of each DWORD will be interpreted as a pair of CLR15 pixels.
* Pixels will be held in Raster Order starting LSB first.
** P0,P1,P2,P3
** P4,P5,P6,P7
** (14:0)=P0, (29:15)=P1, ..., (78:64)=P4, ...


==== Format (3.1): 8x16 Cell, 4x8 Sub-Cell (256 bit) ====

Format (3.1): YUV 4:2:0 (256 bit):
* (255:128) = Pixel Bits (As 2x4 4x4x1 Sub-Blocks)
* The first 4 DWORD values consist of pairs of CLR15 endpoints.
** (29:15)=ColorB, CLR15
** (14: 0)=ColorA, CLR15
* The last 4 DWORD values consist of pixel bits.
** Each contains a 4x4x2 sub-block.
*** These blocks are organized in raster order.
*** Pixels within the block start with the upper-left in the MSB.

Within each 4x8 sub-block, the pixel bit selects which of the two endpoints to use.


==== Format (3.2): 4x8 Cell, 2x2 Sub-Cell (256 bit) ====

Format (3.2): 2x2 Sub-Cell (256 bit):
* CellMode = 11
** CellModeB = 10
* The first four DWORD values consist of pairs of CLR15 endpoints.
** (29:15)=ColorB, CLR15
** (14: 0)=ColorA, CLR15
* The last two DWORD values consist of pixel bits.
* The middle two DWORDs will contain 7-bit Y deltas.
** (27:21)=Yd0
** (20:14)=Yd1
** (13: 7)=Yd2
** ( 6: 0)=Yd3



==== Format (3.3): 8x8 Cell, 4x4 Sub-Cell (256 bit) ====

Format (3.3): 4x4 Sub-Cell (256 bit):
* CellMode = 11
** CellModeB = 11
* The first four DWORD values consist of pairs of CLR15 endpoints.
** (29:15)=ColorB, CLR15
** (14: 0)=ColorA, CLR15
* The last 4 DWORD values consist of pixel bits.
** Each contains a 4x4x2 sub-block.
*** These blocks are organized in raster order.
*** Pixels within the block start with the upper-left in the MSB.
