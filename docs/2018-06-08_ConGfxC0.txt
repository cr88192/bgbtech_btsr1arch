Cell size may vary with screen type.
* 40 x 25 x  64 bit:  8kB
* 40 x 25 x 128 bit: 16kB
* 40 x 25 x 256 bit: 32kB

The cell will be organized as 8 consecutive DWORD values.
* The first DWORD will identify the Cell Mode (In bits 31:30).
* If interpreted as a larger value, it will be seen as Little Endian.
** However, Raster Order will be MSB first.

It may depend on the hardware which modes are supported.

If the hardware cell is narrower than an 8 DWORD stride, then some of the DWORD values may simply be absent. Writing to these addresses will be no-op and reads will return an undefined value.


For 1-bit pixel formats:
* If pixel bit is set, it will select ColorA, otherwise ColorB will be used.

For 2-bit pixel formats:
* 00: ColorB
* 01: 2/3 ColorB + 1/3 ColorA
* 10: 1/3 ColorB + 2/3 ColorA
* 11: ColorA


=== Cell Modes 0 and 1 (Basic Cells) ===

Base glyphs are organized as 32-bit cells.
* (255:64): Ignored
* (63:32): Reserved, Zeroes
** (63:62): May be used for further Cell Modes.
* (31:30): Cell Mode (CellMode)
** 00: Text Cell, 8x8, uses Font Memory
** 01: Graphics Cell, 4x4x1
* (29:28): Color Mode (ClrMode)
* (27:16): Color or Effect Bits
* (15: 0): Char or Pixel Bits

Cell Mode 0:
* Cells are a text-cell, with a 10-bit font space.
** (15:10): Attribute Effect Flags (if ClrTag==0)
*** (10)=Strike, (11)=Underline, (15)=Blink
** ( 9: 8): Font
** ( 7: 0): Glyph


Cell Mode 1:
* Encodes a 4x4x1 Color Cell
** (15:0): 4x4x1 Bitmap bits.
* ClrMode is 00.

Mode 0/1:
* 21,16: ColorA
* 27,22: ColorB
** Colors: rrggbb
** 0, 85, 170, 255

(29:28)=Color Mode (ClrMode)
* 00: 2x 6-bit RGB endpoints (64 colors).
*** (27:22)=ColorB
*** (21:16)=ColorA
* 10: 2x 9-bit RGB endpoints (512 colors).
*** (27:19)=ColorB
*** (18:10)=ColorA

For 6-bit color endpoints:
* Colors are encoded as rrggbb
* Each 2-bit value maps to one of: 0, 85, 170, 255

For 9-bit color endpoints:
* Colors are encoded as rrrgggbbb
* Each 3-bit value maps to one of: 0, 36, 73, 110, 146, 182, 219, 255


=== Cell Mode 2 (Graphical Cells) ===

Encodes an 8x8 4:2:0 Color Cell (128 or 256 bit):
* ClrTag=00: Y=8x8x1 UV=4x4x1, 128-bit
* ClrTag=01: Reserved
* ClrTag=10: Y=8x8x2 UV=4x4x2, 256-bit
* ClrTag=11: Reserved


==== Format (2.0): YUV 4:2:0 (128 bit) ====

Format (2.0): YUV 4:2:0 (128 bit):
* (127:64): 8x8x1 Luma (Y)
* ( 63:48): 4x4x1 Chroma (U)
* ( 47:32): 4x4x1 Chroma (V)
**  Low 28 bits: 2x YUV644
**  CyB(27:22)
**  CyA(21:16)
**  CuB(15:12)
**  CuA(11: 8)
**  CvB( 7: 4)
**  CvA( 3: 0)


==== Format (2.2): YUV 4:2:0 (256 bit) ====

Format (2.2): Color Tag 2: YUV 4:2:0 (256 bit):
* (255:128) = Y Pixel Bits (As 4x4x2 Sub-Blocks)
* (127: 96) = U Pixel Bits (As 2x2x2 Sub-Blocks)
* ( 95: 64) = V Pixel Bits (As 2x2x2 Sub-Blocks)
* ( 55: 32) = Color B (YUV888)
* ( 23:  0) = Color A (YUV888)


=== Cell Mode 3 (Graphical Cells) ===

These will rely on a secondary Cell Mode in bits 62 and 63.

Extended Graphics Cell
* (63:62): Cell Mode B (CellModeB)
** 00: 4x4, 6-bpp Bitmap
** 01: 8x8, 2x2 Color Cells (6-bit RGB)
** 10: -
** 11: 8x8, 4x4 Sub-Cell (15-bit YUV)


==== Format (3.0): 6-bpp Bitmap Cells ====

Format (3.0): 6-bpp Bitmap Cells (128 bit):
* CellMode=11, ClrTag=00/01
** CellModeB = 00
* ClrTag will select between Row/Col Ordering
* Store 4x4x6 bpp
* Each 32-bit word holds 4 pixels, each 6 bits.
** Pixel data is held in the low 24 bits.
** (127:120), (95:88) = Currently Ignored


==== Format (3.1): 6-bpp Bitmap 2x2 Cells ====

Format (3.1): 6-bpp Bitmap 2x2 Cells (256 bit):
* CellModeB = 01 (Possible?)
* Divided into 2x2-pixel sub-blocks.
** Each contains a pair of 6-bit colors and a 3 bit pattern.
* Bits 23:0 of each DWORD contains the color endpoints (4x 6-bits).
* Bits 29:24 contain the pattern (2x 3-bits).


==== Format (3.3): 4x4 Sub-Cell (256 bit) ====

Format (3.3): 4x4 Sub-Cell (256 bit):
* CellMode = 11
** CellModeB = 11
* The first 4 DWORD values consist of pairs of YVU654 endpoints.
** (29:15)=ColorB
** (14: 0)=ColorA
*** (14:9)=Y
*** ( 8:4)=V
*** ( 3:0)=U
* The last 4 DWORD values consist of pixel bits.
** Each contains a 4x4x2 sub-block.
*** These blocks are organized in raster order.
*** Pixels within the block start with the upper-left in the MSB.

Possible:
* If ColorB.Y<=ColorA.Y
** Endpoint YUV is interpolated.
* If ColorB.Y> ColorA.Y
** Only Y is interpolated.
** Bits 4 and 19 are used as UV selection hints.
*** 0: Left/Right Split (AB/AB)
*** 1: Up/Down Split (AA/BB)
*** Bit 19 controls U split, bit 4 controls V split.
