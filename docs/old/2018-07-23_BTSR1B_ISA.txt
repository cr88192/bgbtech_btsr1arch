Simple Register ISA
* ( Preliminary Spec Only )

Goals:
* Simple Register ISA
* Concievably useful for microcontroller tasks.

Changes from BSR1A:
* DLR/DHR merged into R0/R1 (like in BJX2)
* ABI changed to use R2 as return value (also like BJX2)
* Drop instruction forms specific to DLR wrangling.
* Drop DLR_i4 addressing mode (cost).


=== Overview ===

Basic Design:
* Fixed width 16-bit instructions.
* Will be little-endian with unaligned memory access.
* FPU will be optional (Absent for low-cost implementations).
* MMU will be optional (Absent for low-cost implementations).

Registers:
* 16 General Purpose Registers.
** R0..R15, 32 bit
* 16 Special Registers.
** C0..C15, But given other names.
* 16 Shadow Registers (Drop)
* 16 FPU Registers (Optional)
** FR0..FR15, 64-bit

Special Purpose Registers:
* R0: DLR (Displacement/Low Register)
* R1: DHR (Displacement/High Register)
* R15: SP
** R15 will exist in GPR space but will be essentially an SPR in the arch.

Control Registers:
* C0 / PC: Program Counter
* C1 / LR: Link Register
** BSR will save PC to LR.
** RET will copy LR to PC.
*** For non-leaf functions, LR is saved manually.
* C2 / SR: Status Register
** Uses a T bit, which is a True/False Status.
** The T bit also serves as a Carry Bit.
* C3 / VBR: Interrupt Vector Base Register
* C4 / SPC: Saved PC
* C5 / SSP: Saved SP
* C6 / GBR: Global Base Register
* C7 / TBR: Thread Base Register
* C8: -
* C9: -
* C10: -
* C11 / EXSR: Exception Status Register
* C12 / SSR: Saved SR
* C13: -
* C14: -
* C15: -


Barrel Shift
* Shifts register by a certain amount.
* Immed is interpreted as a signed 8 bit number:
** Positive: Shift Left, Modulo
** Negative: Shift Right, Modulo

Arch Notes:
* No Delay-Slot
** Not really worth the hassle.
* Does not use PC relative constant loads.
** Generally painful and problematic for code generation.
** Overall, don't save much space over LDSH or similar.
* Neither SR.T nor DLR will be preserved across branches.
** Following any branch, their contents are undefined.
* DLR will depend on the context in which it is used.
** Used for constructing immediates and displacements.
** Branches: Will be scaled by 2.
** MOV.x: Will be scaled by the size of the base type.
** Will be used for constructing psuedo-ops.
** May be thrashed or otherwise become undefined in certain cases:
*** A MOV.x operation.
*** Any operation which uses the value from DLR.
*** Branches (conditional or otherwise).
* DHR will be an operation-specific register.
** Will have similar restrictions as DLR.
** May be used as the high part of multiply results.

* When Read, PC will point to the following instruction.
** PC will always be 16-bit aligned (setting the LSB is undefined).
* GBR may be used to hold a DATA/BSS pointer by the program.
** Will be Preserve
* TBR may be used for Thread/Process State
** Intended to facilitate thread-local storage and similar.

SR Bits:
* 0: T, Used as a True/False status, or Carry for ADC/SBB.
* 1: S, Special Status Flag.
* 3/2: Interrupt Priority Level
** 00: Interrupts Disabled.
** 01: High Priority Only (System/Fault).
** 10: Medium Priority Only (Timers, ...).
** 11: All Interrupts Enabled.
* 4..7: P/Q/R/O Bits, Context Dependent
* 28: BL, Block Interrupts
* 29: RB, Encodes the ISR register bank.
** Set when interrupt occurs.
** Cleared when interrupt returns.
* 30: MD, User/Supervisor.
* 31: Drop

Most operations will not change the contents of SR unless noted otherwise.

Mnonics:
* MOV.B, Load/Store Byte, Sign Extend
* MOV.W, Load/Store Word, Sign Extend
* MOV.L, Load/Store DWord, Sign Extend
* MOVU.B, Load Byte, Zero Extend
* MOVU.W, Load Word, Zero Extend

Operand Types:
* Rn, Destination GPR
* Rm, Source GPR
* Cn, Control Register
* Sn, Shadow Register
* In, Immediate Table (Drop?)


=== Interrupts ===


On an interrupt:
* PC and SP will be saved to SPC and SSP.
* SR.RB, SR.BL, and SR.MD will be set.
* The status code for the interrupt will be loaded into EXSR.
* An displacement will be added to VBR and the result will be loaded into PC.

VBR Displacements:
* VBR+0x00: Reset Vector
* VBR+0x08: General Fault
* VBR+0x10: IRQ, Hardware Interrupt, or TRAP instruction
* VBR+0x18: Reserved for MMU (Page Fault).

EXSR Codes:
* Holds a numeric status code for the exception.
* Bits 15..12:
** 0x8: General Fault
** 0xC: IRQ or Software Interrupt
* General Faults:
** 0x8000: Invalid Address (Address does not exist)
** 0x8001: Invalid Read (Address lacks read access)
** 0x8002: Invalid Write (Address lacks write access)
** 0x8003: Invalid Execute (Address lacks execute access)
** 0x8004: BREAK instruction used.
** 0x8005: Invalid use of a SLEEP instruction.
** 0x8006: -
** 0x8007: -
** 0x8008: -
** 0x8009: Misaligned Read
** 0x800A: Misaligned Write
** 0x800B: Misaligned Execute ((PC&1)!=0)
* Interrupts:
** 0xC000: General Interrupt
** 0xC001: Interval Timer
** 0xC002: Debug UART
** 0xC003: SPI Interrupt
** 0xC08x: TRAP #x


Shadow Registers:
* S0..S15: R0B..R7B, C0B..C7B
* The main and shadow registers will be swapped during an interrupt.
** R0..R7 swapped with R0B..R7B
** C0..C7 swapped with C0B..C7B, where Cn!=C3
*** C0B: SPC
*** C1B: SLR
*** C2B: SSR
*** C3B: SSP (Shadow R15/SP)
*** C4B: -
*** C5B: -
*** C6B: SGB
*** C7B: STB
** R15 will be swapped with C3B.
** Registers will not be swapped if SR.RB is set upon entering an interrupt.
*** Registers will swap and SR.RB will be clear upon returning from an interrupt.


=== Addressing Modes ===

Addressing Modes (Real):
* (Rn), Register used as an address.
* (Rn, DLR), Register used with scaled Displacement Register.
** MOV.x, Scale is size of base type.
* (PC, DLR), PC used with Displacement Register.
** The displacement is byte scaled in these cases.
* (PC, Disp8s), PC with scaled 8-bit displacement.
* (SP, Disp4u), SP with scaled 4-bit displacement.

Displacement Scale:
* MOV.x will depend on the base register:
** If using a GPR, will be scaled based on the size of the type.
** If using PC, a scale of 1 is used for MOV.x forms.
** GBR and TBR, will be scaled using the size of the base type.
* Branches will use a scale of 2.
* LEA.x will always be scaled by the size of the base type.

Addressing Modes (Synthetic):
* (Rn, Ri)
* (Rn, Disp9s)
** 24xx_OOnm
* (Rn, Disp13s)
** Axxx_OOnm
* (Abs16)
** 24xx_26xx_OOnO
** Axxx_OOnx
* (Abs32)
** 24xx_26xx_26xx_26xx_OOnO
** Axxx_26xx_26xx_OOnx

For PC relative addresses, the address will be calculated relative to the start of the following instruction.

Architectural memory access will require accesses to aligned to the native size. The support for misaligned access will be an optional extension. Misaligned access to memory (in the absence of hardware support) will generate an exception.

Integer values will be little endian two's complement.

If R0 is used as the base of a Scaled Index, it will be interpreted as if it were PC.
If R1 is used as a base, it will be interpreted as GBR.


=== Opcode Map ===

Notation:
* 0..9, A..F: Literal hex bits
* n: Destination Register, Typically bits 7..4
* m: Source Register, Typically bits 3..0
* i: Signed immediate bits
* j: Unsigned immediate bits
* d: Displacement bits
** 4 bit displacements will generally be unsigned.
** 8 bit displacements will generally be signed.
* x: First Value Placeholder bits.
* y: Second Value Placeholder bits.
* z: Undefined/Pattern/Third Value, Placeholder bits.
** Will typically be defined later or in a sub-pattern.

Prefixes:
* / Indicates forms which have been dropped.
* ? Indicates forms which may or may not be supported (Optional).
** If unsupported, the encoding space is a placeholder.
** Compiler will be expected to only emit I-Forms appropriate for the target.
** An instruction need not be marked optional if the parent block is optional.
*** Instead, this will denote that the instruction is optional within the block.
* ??, Don't know if it will be implemented.
** Instruction space may likely be reserved but unimplemented.
* ?/, May drop.


Instruction Space
* 0zzz (Basic MOV.x Block)
** 00nm  MOV.B		Rm, (Rn)
** 01nm  MOV.W		Rm, (Rn)
** 02nm  MOV.L		Rm, (Rn)
** 03nm  MOVU.B		(Rm), Rn
** 04nm  MOV.B		Rm, (Rn, DLR)		//Use DLR as Scaled Index
** 05nm  MOV.W		Rm, (Rn, DLR)
** 06nm  MOV.L		Rm, (Rn, DLR)
** 07nm  MOVU.B		(Rm, DLR), Rn
** 08nm  MOV.B		(Rm), Rn
** 09nm  MOV.W		(Rm), Rn
** 0Anm  MOV.L		(Rm), Rn
** 0Bnm  MOVU.W		(Rm), Rn
** 0Cnm  MOV.B		(Rm, DLR), Rn		//Use DLR as Scaled Index
** 0Dnm  MOV.W		(Rm, DLR), Rn
** 0Enm  MOV.L		(Rm, DLR), Rn
** 0Fnm  MOVU.W		(Rm, DLR), Rn

* 1zzz (Basic Arith Block)
** 10nm  ADD		Rm, Rn			//Rn=Rn+Rm
** 11nm  SUB		Rm, Rn			//Rn=Rn-Rm
** 12nm  ADC		Rm, Rn			//Add with Carry, Rn=Rn+Rm+SR.T
** 13nm  SBB		Rm, Rn			//Subtract with Borrow, Rn=Rn+(~Rm)+(!SR.T)
** 14nm  TST		Rm, Rn			//SR.T=!(Rm&Rn)
** 15nm  AND		Rm, Rn
** 16nm  OR			Rm, Rn
** 17nm  XOR		Rm, Rn
** 18nm  MOV		Rm, Rn			//Rn=Rm
** 19nm  -
** 1Anm  -
** 1Bnm  -
** 1Cnm  CMPEQ		Rm, Rn			//Rn==Rm
** 1Dnm  CMPHI		Rm, Rn			//Unsigned Rn GT Rm
** 1Enm  CMPGT		Rm, Rn			//Signed Rn GT Rm
** 1Fnm  -

* 2zzz
** 20dd  BRA		(PC, disp8s)		//Branch, PC=PC+(disp8s*2)
** 21dd  BSR		(PC, disp8s)		//Branch Subroutine
** 22dd  BT			(PC, disp8s)		//Branch True
** 23dd  BF			(PC, disp8s)		//Branch False
** 24jj  LDIZ		#imm8u, DLR			//DLR=Imm8 (Zero Extend)
** 25jj  LDIN		#imm8u, DLR			//DLR=Imm8 (One Extend)
** 26jj  LDISH		#imm8u, DLR			//DLR=(DLR SHL 8)|Imm8u
** 27dd  MOVU.W		(SP, disp4u), Rn
** 28nd  MOV.L		Rn, (SP, disp4u)	//Stack-Relative Store
** 29nd  MOV.W		Rn, (SP, disp4u)
** 2And  MOV.L		(SP, disp4u), Rn	//Stack-Relative Load
** 2Bnd  MOV.W		(SP, disp4u), Rn
** 2Cnj  CMPEQ		#imm4u, Rn			//Rn==Imm4, Zero Extend
** 2Dnj  CMPEQ		#imm4n, Rn			//Rn==Imm4, One Extend
** 2Enj  CMPGT		#imm4u, Rn			//Rn==Imm4, Zero Extend
** 2Fnj  CMPGE		#imm4u, Rn			//Rn==Imm4, Zero Extend

* 3zzz
** 3000  NOP							//Do Nothing
** 3010  RTS							//PC=LR
** 3020  SLEEP							//Sleep
** 3030  BREAK							//Breakpoint
** 3040  CLRT							//Clear SR.T
** 3050  SETT							//Set SR.T
** 3060  CLRS							//Clear SR.S
** 3070  SETS							//Set SR.S
** 3080  NOTT							//SR.T=!SR.T
** 3090  NOTS							//SR.S=!SR.S
** 30A0  LDISH16	#0x0000, DLR		//DLR=(DLR SHL 16)|0x0000
** 30B0  LDISH16	#0xFFFF, DLR		//DLR=(DLR SHL 16)|0xFFFF
** 30C0  RTE							//Return from exception
** 30D0  -
** 30E0  -

** 30z1  -

** 3082  -
** 3092  -
** 30A2  -
** 30B2  -

** 30z3  -

** 30z4  -
** 30z5  -
** 30z6  -
** 30z7  -
** 30z8  -
** 30z9  -
** 30zA  -
** 30zB  -
** 30zC  -
** 30zD  -
** 30zE  -
** 30zF  -

** 31n0  -
** 31n1  -
** 31n2  -
** 31n3  -
** 31n4  -
** 31n5  -
** 31n6  -
** 31n7  -
** 31n8  PUSH		Rn
** 31n9  PUSH		Cn
** 31nA  POP		Rn
** 31nB  POP		Cn
** 31nC  CMPPL		Rn					//SR.T=(Rn GT 0)
** 31nD  CMPPZ		Rn					//SR.T=(Rn GE 0)
** 31nE  -
** 31nF  -

** 32n0  BRA		Rn					//Branch to address given in Rn
** 32n1  BSR		Rn					//Branch Subroutine given by Rn
** 32n2  BT			Rn
** 32n3  BF			Rn
** 32n4  EXTU.B		Rn
** 32n5  EXTU.W		Rn
** 32n6  EXTS.B		Rn
** 32n7  EXTS.W		Rn
** 32n8  -
** 32n9  -
** 32nA  -
** 32nB  -
** 32nC  -
** 32nD  -
** 32nE  -
** 32nF  -

** 33n0  NOT		Rn					//Rn=~Rn
** 33n1  NEG		Rn					//Rn=(~Rn)+1
** 33n2  NEGC		Rn					//Rn=(~Rn)+(~SR.T)
** 33n3  MOVNT		Rn					//Rn=!SR.T
** 33n4  ROTL		Rn					//Rn=(Rn SHL 1)|(Rn SHR 31)
** 33n5  ROTR		Rn					//Rn=(Rn SHR 1)|(Rn SHL 31)
** 33n6  ROTCL		Rn					//Rn'=(Rn SHL 1)|SR.T; SR.T=Rn.31
** 33n7  ROTCR		Rn
** 33n8  SHLL		Rn					//Rn'=(Rn SHL 1); SR.T=Rn.31
** 33n9  SHLR		Rn					//Rn'=(Rn SHR 1); SR.T=Rn.0
** 33nA  SHAR		Rn					//Rn'=(Rn SAR 1); SR.T=Rn.0
** 33nB  -
** 33nC  -
** 33nD  -
** 33nE  -
** 33nF  -

** 34n0  SHLL1		Rn					//Rn=Rn SHL 1
** 34n1  SHLL2		Rn					//Rn=Rn SHL 2
** 34n2  SHLL4		Rn
** 34n3  SHLL8		Rn
** 34n4  SHLR1		Rn					//Rn=Rn SHR 1, Logical
** 34n5  SHLR2		Rn					//Rn=Rn SHR 2, Logical
** 34n6  SHLR4		Rn
** 34n7  SHLR8		Rn
** 34n8  SHAR1		Rn					//Rn=Rn SAR 1, Arithmetic
** 34n9  SHAR2		Rn					//Rn=Rn SAR 2, Arithmetic
** 34nA  SHAR4		Rn
** 34nB  SHAR8		Rn
** 34nC  SHLL16		Rn					//Rn=Rn SHL 16
** 34nD  SHLR16		Rn					//Rn=Rn SHR 16, Logical
** 34nE  SHAR16		Rn					//Rn=Rn SAR 16, Arithmetic
** 34nF  SHARSX		Rn					//Copy sign bit to all other bits.

** 35zz  -

** 36n0  -
** 36n1  -
** 36n2  -
** 36j3  TRAP		#imm4u				//Generate an Interrupt
** 36n4  -
** 36n5  -
** 36n6  SHLD		DLR, Rn				//Barrel Shift, Logical
** 36n7  SHAD		DLR, Rn				//Barrel Shift, Arithmetic
** 36n8  -
** 36n9  -
** 36nA  -
** 36nB  -
** 36nC  -
** 36nD  CMPHS		DLR, Rn				//Unsigned (Rn GE DLR)
** 36nE  CMPGE		DLR, Rn				//Signed (Rn GE DLR)
** 36nF  MOVT		Rn					//Rn=SR.T

** 37n0  SWAP.B		Rn				//(1032) Swap E/O Bytes (Four Bytes)
** 37n1  SWAP.W		Rn				//(1032) Swap E/O Words (All words)
** 37n2  -
** 37n3  -
** 37n4  SWAP.LB	Rn				//(1023) Swap Low Two Bytes (GSV)

** 38n2 ? PUSH		FRn
** 38n3 ? POP		FRn

** 39zz  -
** 3Azz  -
** 3Bzz  -
** 3Czz  -
** 3Dzz  -
** 3Ezz  -
** 3Fzz  -

* 4zzz
** 40nj  -
** 41nj  -
** 42nj  -
** 43nj  -
** 44nj  -
** 45nj  -
** 46nj  -
** 47nj  -
** 48nm  MOV		Rm, Cn				//Cn=Rm
** 49nm  MOV		Cm, Rn				//Rn=Cm
** 4Anm  MOV		Rm, Sn				//Store to Shadow Register
** 4Bnm  MOV		Sm, Rn				//Load from Shadow Register
** 4Cnm  LEA.B		(Rm, DLR), Rn
** 4Dnm  LEA.W		(Rm, DLR), Rn
** 4Enm  LEA.L		(Rm, DLR), Rn
** 4Fnm  LEA.Q		(Rm, DLR), Rn

* 5zzz (Binary Ops)
** 50zz  -
** 51zz  -
** 52zz  -
** 53zz  -
** 54zz  -
** 55zz  -
** 56nm  MULS		Rm, Rn				//(DHR,DLR)=Rm*Rn (Signed Result)
** 57nm  MULU		Rm, Rn				//(DHR,DLR)=Rm*Rn (Unsigned Result)
** 58nm  ADD		Rm, DLR, Rn			//Rn=Rm+DLR
** 59nm  SUB		Rm, DLR, Rn
** 5Azz  -
** 5Bzz  -
** 5Czz  -
** 5Dnm  AND		Rm, DLR, Rn
** 5Enm  OR			Rm, DLR, Rn
** 5Fnm  XOR		Rm, DLR, Rn

* 6zzz  (Reserved)
* 7zzz  (Reserved)

* 8zzz  ( MOV.L 1000-rddd-nnnn-mmmm, r=Store/Load )
** 80nm  -
** 81nm	 MOV.L		Rm, (Rn,  4)
** 82nm	 MOV.L		Rm, (Rn,  8)
** 83nm	 MOV.L		Rm, (Rn, 12)
** 84nm	 MOV.L		Rm, (Rn, 16)
** 85nm	 MOV.L		Rm, (Rn, 20)
** 86nm	 MOV.L		Rm, (Rn, 24)
** 87nm	 MOV.L		Rm, (Rn, 28)
** 88nm  -
** 89nm	 MOV.L		(Rm,  4), Rn
** 8Anm	 MOV.L		(Rm,  8), Rn
** 8Bnm	 MOV.L		(Rm, 12), Rn
** 8Cnm	 MOV.L		(Rm, 16), Rn
** 8Dnm	 MOV.L		(Rm, 20), Rn
** 8Enm	 MOV.L		(Rm, 24), Rn
** 8Fnm	 MOV.L		(Rm, 28), Rn

* 9zzz  (FPU Block, Optional)
** 90nm  FMOV.S		FRm, (Rm)
** 91nm  FMOV.D		FRm, (Rm)
** 92nm  FMOV.S		FRm, (Rm, DLR)
** 93nm  FMOV.D		FRm, (Rm, DLR)
** 94nm  FMOV.S		(Rm), FRn
** 95nm  FMOV.D		(Rm), FRn
** 96nm  FMOV.S		(Rm, DLR), FRn
** 97nm  FMOV.D		(Rm, DLR), FRn
** 98nm  FADD		FRm, FRn			//FRn=FRn+FRm
** 99nm  FSUB		FRm, FRn			//FRn=FRn-FRm
** 9Anm  FMUL		FRm, FRn			//FRn=FRn*FRm
** 9Bnm  !
** 9Cnm  FCMPEQ		FRm, FRn			//SR.T=(FRn EQ FRm)
** 9Dnm  FCMPGT		FRm, FRn			//SR.T=(FRn GT FRm)
** 9Enm  FMOV		FRm, FRn			//FRn=FRm
** 9Fnz  
*** 9Fn0 FLDCF		DLR, FRn			//Float Load Convert Float32
*** 9Fn1 FLDCD		DLR, FRn			//Float Load Convert Double (DLR)
*** 9Fn2 FLDCI		DLR, FRn			//Float Load Convert Int
*** 9Fn3 FLDCH		DLR, FRn			//Float Load Convert Half (DLR, Low16)
*** 9Fn4 FSTCF		FRn, DLR			//Float Store Convert Float32
*** 9Fn5 FSTCD		FRn, DLR			//Float Store Convert Double (DLR)
*** 9Fn6 FSTCI		FRn, DLR			//Float Store Convert Int
*** 9Fn7 FSTCH		FRn, DLR			//Float Store Convert Half (DLR, Low16)
*** 9Fn8 FNEG		FRn					//Negate
*** 9Fn9 FABS		FRn					//Absolute
*** 9FnA !
*** 9FnB !
*** 9FnC !
*** 9FnD !
*** 9FnE -
*** 9FnF -

* Ajjj  LDIZ		#imm12u, DLR	//Load 12 bit value into DLR (Zero Extend)
* Bjjj  LDIN		#imm12u, DLR	//Load 12 bit value into DLR (One Extend)
* Cnii  ADD			#imm8s, Rn		//Rn=Rn+Imm8
* Dnii  MOV			#imm8s, Rn		//Rn=Imm8
* Enjj (Reserved, Larger Instruction Forms)
* Fxxx (Larger Instruction Forms, Unused in BSR1B)



Major Bit-Pattern
* 0000-rtbb-nnnn-mmmm: MOV.x
* 0001-zzzz-nnnn-mmmm: OP Rm, Rn
* 0010-0zzz-dddd-dddd: OP #imm8
* 0010-1zzz-nnnn-dddd: OP #imm4, Rn
* 0011-0000-zzzz-zzzz: OP
* 0011-zzzz-nnnn-zzzz: OP Rn
* 0100-zzzz-nnnn-mmmm
* 0101-zzzz-nnnn-mmmm
* 1000-rddd-nnnn-mmmm: MOV.L
* 1001-zzzz-zzzz-zzzz: (FPU)
* 1010-jjjj-jjjj-jjjj: LDIZ
* 1011-jjjj-jjjj-jjjj: LDIN
* 1100-nnnn-iiii-iiii: ADD #imm8, Rn
* 1101-zzzz-zzzz-zzzz: (Reserved)
* 1110-nnnn-iiii-iiii: MOV #imm8, Rn
* 1111-XXXX-XXXX-XXXX: (Invalid, 32/48-bit)

* 0000-rtbb-nnnn-mmmm
** r: 0=Store, 1=Load
** t: 0=(Reg), 1=(Reg, DLR)
** bb: 00=B, 01=W, 10=L, 11=UB(r=0) / UW(r=1)
* 0001-oooo-nnnn-mmmm
** oooo:
*** 0000=ADD  , 0001=SUB  , 0010=ADC  , 0011=SBB,
*** 0100=TST  , 0101=AND  , 0110=OR   , 0111=XOR,
*** 1000=MOV  , 1001= -   , 1010= -   , 1011= - ,
*** 1100=CMPEQ, 1101=CMPHI, 1110=CMPGT, 1111= - 
* 0010-00bb-dddd-dddd
** bb: 00=BRA, 01=BSR, 10=BT, 11=BF
* 0010-01bb-dddd-dddd
** bb: 00=LDIZ, 01=LDIZ, 10=LDISZ, 11= -
* 0010-10r0-nnnn-dddd: MOV.L (SP, disp4)
* 0010-11bb-nnnn-jjjj
** bb: 0z=CMPEQ, 10=CMPGT, 11=CMPGE

* 0011-0000-oooo-oooo: 0R forms
* 0011-oooo-nnnn-oooo: 1R forms
* 0011-1000-nnnn-bbdd
** bb: 00=LL, 01=LR, 10=AR, 11=X
** dd(!X): 00=1, 01=2, 10=4, 11=8

* 0100-10sr-nnnn-mmmm: MOV
** s: 0=Control, 1=Shadow
** r: 0=Move-To, 1=Move-From
* 0100-11bb-nnnn-mmmm: LEA
** bb: 00=B, 01=W, 10=L, 11=Q

* 0101-011s-nnnn-mmmm: MUL
** s: 0=Signed, 1=Unsigned
* 0101-1bbb-nnnn-mmmm: OP Rm, DLR, Rn
** bb:
*** 000=ADD, 001=SUB, 010= -, 011= - ,
*** 100= - , 101=AND, 110=OR, 111=XOR

* 1000-rddd-nnnn-mmmm: MOV.L
* 101s-jjjj-jjjj-jjjj: LDIX
* 1100-nnnn-iiii-iiii: ADD #imm8, Rn
* 1110-nnnn-iiii-iiii: MOV #imm8, Rn
