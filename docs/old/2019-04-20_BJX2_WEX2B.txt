WEX2 Would be based around 32-bit instructions, where:
* F0zz..F3zz, represent the last instruction in a series.
* F4zz..F7zz, represent an instruction which may execute in parallel.
* F8zz..FFzz, are not allowed in a WEX2 construct (Scalar Only).
* E0zz..EFzz, Conditional ops are Scalar Only.

Within a scalar implementation, F4zz..F7zz will be functionally equivalent to instructions in the F0zz..F3zz range. 


Thoughts:
* WEX2 may have "profiles".
* If the profiles are not compatible between the program and core:
** The core may be told to disable WEX2 via an SR flag.
** The code in question is to be executed as scalar code.
* Narrower layouts are still allowed in wider profiles.
** However, going wider than the specified profile is not allowed.
* Currently, only 32-bit instruction forms are allowed in WEX constructs.


The "WEXMD #imm4" instruction will indicate the WEX2 Profile. It will update the SR bits as appropriate for the given profile.
* This instruction will either enable or disable WEX based on the result.
* If WEX is not supported on the core, it will be treated as a NOP.
* No WEX forms will be allowed within the following 3 instructions.



Profile 0: No WEX.
* Only scalar instructions are to be used.
* Use of F4zz..F7zz is invalid in this mode.

Profile 1: Dual Lane ALU, Single IO Lane.
* YYYY_YYYY XXXX_XXXX
* Second lane precedes first lane.
* Second lane only has ALU ops.

Profile 2: Triple Lane ALU, Single IO Lane.
* ZZZZ_ZZZZ YYYY_YYYY XXXX_XXXX
* Lanes are in a 3/2/1 ordering.
* Second and third lanes only have ALU ops.

Many instructions will only exist in the first lane:
* Memory operations
* Branch operations
* Compare operations
* Integer multiply
* ...

The result is that the second and third lanes will only have a subset of ALU ops:
* ADD, SUB, AND, OR, XOR, MOV, ...
* SHAD, SHLD
