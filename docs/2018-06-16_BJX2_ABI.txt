BJX2 General C ABI.


== C Definitions ==

Canonically, C types will map to this ISA as:
* Integer
** char, 8-bit
** short, 16-bit
** int, 32-bit
** long, 64-bit (64-bit ABI)
** long long, 64-bit
** __int128, 128-bit
* Floating Point
** short float / __float16, IEEE Binary16
** float, IEEE Binary32
** double, IEEE Binary64
** long double, IEEE Binary64
** __float128, IEEE Binary128
** __bfloat16, BFloat16 / Truncated Float

The integer types will wrap at their nominal sizes, though types narrower than int will implicitly promote to int. Signed integer types will be two's complement, and defined here as being wrap on overflow.

Float16 will exist as a special type in the ABI, in that in most cases it will quietly promote to float. Within structures, arrays, and pointers, the type will remain as a 16-bit half-float. Within local variables or function arguments, it will normally promote to float unless its address is taken.

When passed to or returned from a function in registers, scalar floating point arguments will be implicitly promoted to double.


BFloat16 will be another floating point type, which is effectively a 32-bit float with the low 16 bits cut off. It has a higher dynamic range but less precision than half-float.

Pointer types will normally be 64-bit, but a sub-ABI will exist with 32-bit pointers.


== Basic ABI ==

Basic C ABI:
* R2..R7, R16..R23: Scratch
* R8..R14: Callee Preserved
* R15: Stack Pointer
* R2/R3: Return Value
* R2: Struct Return Address
* R3: Owning 'this' Object (C++ and BS2)
* R4..R7, R20..R23: Register Arguments
** Structures are passed in 1 or 2 registers if they fit.
** Otherwise, structures are passed by reference.
* (Hard FPU) FR0..FR7: Scratch
* (Hard FPU) FR8..FR15: Callee Preserve
* (Hard FPU) FR4..FR7: Float Arguments
** For Soft-FPU, Float and Double arguments will be passed in GPRs.
* R0/DLR: Volatile/Scratch
* R1/DHR: Volatile/Scratch
* GBR: Callee Preserve
** GBR may be used to access memory, and is treated as a callee preserve register.
** PBO Sub-ABI: GBR will be the base address for ".data" and ".bss".
* TBR: System
** TBR will be a System register, and should not be modified by normal code.
** The use of TBR is outside the scope of the basic C ABI.

If insufficient free registers exist to pass an argument, it and any following arguments of the same class will be passed on the stack. The stack will not have any spill space.

Items on the stack will have a 8-byte alignment, with the size of stack frames kept to a 16-byte alignment. The creation of a stack frame is optional for leaf functions.


Primitive Types:
* Small integer types will be sign or zero extended to 64 bits.
* Small floating point types will be passed and returned as double.
** Implicitly, float and half-float will be promoted to double.


Structure Passing by value:
* General structures between 1 and 8 bytes will be passed in a GPR.
** Or in 8 bytes on-stack if no GPRs remain.
* General structures between 9 and 16 bytes will be passed as a GPR pair.
** Or in 16 bytes on-stack if no GPRs remain.
* Structures larger than 16 bytes will be passed by reference.
** This reference may be either in a register or on the stack.

When passing and returning structures by value, the structure will be padded up to a multiple of 8 bytes. Structures on-stack will have a nominal 8-byte alignment.


Non-POD classes will always be passed by reference or by pointer, including in cases where the class could otherwise be passed in registers.

C Style Vararg:
* Will pass variable arguments the same as fixed arguments.
* Float will be semantically promoted to Double.

BS2 Style Vararg:
* The remaining arguments will be folded off into an array.
* All of the variable arguments will be converted to Variant.
* This array will be passed to the called function as a Tag Array.


=== SoftFP and HardFP ===

The HardFP ABI will pass floating arguments as double-precision values in FPRs.

The SoftFP ABI (also used for GFP) will pass floating point arguments via GPRs. Nominally floating point values will be passed and returned as double-precision values.

Packed floating point types will be passed in GPRs, with each element represented as an element within the GPR. Elements will be packed with lower numbered elements located in the low-order bits.


=== 32-bit Sub ABI ===

Is basically the same as the 64-bit ABI, except that 'long' and pointer values are reduced to 32 bits. The address space is nominally zero-extended, and maps to the low 4GB of the Userland space.

Tagged Pointer types will remain as 64 bit.

PE/COFF binaries using this mode are to be encoded as PE32, whereas those using the 64-bit ABI will be PE32+.


=== PBO Sub ABI ===

General:
* GBR will be used to access any mutable sections (such as ".data" and ".bss").
* These sections will be accessed relative to GBR.
* PBO reloads GBR by loading a pointer from an offset relative to GBR.
** There will be a table shared between all data regions in the process.
** Each binary will have its offset fixed up to the appropriate index.
* GBR reload will be required for functions which may be called externally.
** This includes exported functions and function pointers.

Example of a GBR reload (64 bit address space):
 LDI #offs_pbo_base, R0		//special reloc
 MOV.Q (GBR, DLR), R1
 MOV R1, GBR

Example of a GBR reload (32 bit address space):
 LDI #offs_pbo_base, R0		//special reloc
 MOV.L (GBR, DLR), R1
 MOV R1, GBR

As emitted by the compiler, the PBO base offset will point to the start of the PBO data region, which will hold a pointer back to itself.

During fixup, this base offset will be replaced with a negative offset relative to GBR. The space prior to the start of the data region will be used for an table of pointers to the other data regions for a given process.

This table will be mirrored between all data regions within a given process (with the index assignments shared between processes). Sufficient space is to be provided to manage both statically and dynamically loaded libraries.

If a 12-bit displacement is used as the base address, this allows up to 512 binary images to be assigned an index.

The specifics of intra and inter-process index assignment will depend on the implementation.


=== Thread Local Storage ===

General:
* Will be nominally accessed as an offset relative to TBR.
* Special fixups may be used during program loading.
* Will reside within ".tlsvar"


=== Fat Pointers ===

In several cases, Fat Pointers will be used.
* They will be 16 bytes, and passed as a register pair.
* May be used for Array References, and for Virtual Method Pointers.

Method pointers will have the first register point to the method, and the second register to its associated 'this'.

Array Refs will have the first register as a base pointer for the array.
The second register will be split between a base offset and limit. With the limit in the low 32 bits, and the base offset in the high 32 bits.

The base-offset and limit will be expressed in terms of the element size of the array. The base offset will be added to the index prior to performing the bounds check and accessing the array.

The bounds of multidimensional arrays may not be expressed directly in this scheme, and as such the bounds given for a multidimensional array will cover the entire space used by the array.

Array Refs may also use Tagged Pointers (Tag Array).


=== System Calls ===

Will be handled by generating a SysCall exception, with the EXSR vector normally providing the function number.

Otherwise, the behavior of a SysCall will (unlike a normal interrupt) follow behaviors typical of the C ABI, such as treating scratch registers as scratch registers.

The interpretation of function numbers will be partly putside the scope of this spec (though, the assumption is that it would likely be accomplished on the back end via a mask and a jump table or similar).


== Extended ABI ==

This will be things specific to C++, C#, and BGBScript2 (BS2) as implemented by BGBCC. Other compilers or implementations may differ here.



=== Name Mangling ===

Will use a 2-stage scheme.

The first stage will encode a name:
* Namespaces or other scopes will be separated with '/';
* The signature is appended directly (if it starts with '(');
* The signature will be appended after a colon (otherwise).
** For normal variables or fields, the signature will be absent.
* Sequence numbers for identifiers may be appended following a '!'
** These will be zero-based and expressed in decimal.
** If relevant, they will precede the signature.


Second stage may (optionally) transform it to a more limited character set.
* A prefix is prepended.
** '_X_' for normal definitions.
* Letters/Numbers are passed through as-is.
* Some characters will be escaped via special sequences:
** "_" with "_1"
** ";" with "_2"
** ":" with "_3"
** "(" with "_4"
** ")" with "_5"
** "/" with "_6"
* Other characters (Latin-1 range):
** _9xx
* Other characters (BMP Range):
** _0xxxx
* Characters outside the BMP will use surrogate pairs and the _0 encoding.

Some special cases with second-stage encoding:
* "_" followed by a letter will be interpreted as an unescaped '_'.
* "__" will be reserved as a separator sequence.
** If an escape occurs directly following the prefix, its "_" will be omitted.


This second-stage scheme may be used for ASM symbols as well as for imports/exports. It is trivial to reverse into the first-stage form. The first stage form will be canonical within BGBCC.

Names which are unqualified and do not have a signature appended (such as normal C symbols) will not use name mangling.


=== Type Signatures ===

Typed signatures are encoded as strings, with characters indicating value types.

Basic Types:
* 'a': signed char
* 'b': bool
* 'c': char
* 'd': double
* 'e': long double
* 'f': float
* 'g': float128
* 'h': unsigned char
* 'i': int
* 'j': unsigned int
* 'k': float16/half
* 'l': long
* 'm': unsigned long
* 'n': int128
* 'o': unsigned int128
* 'p': intptr
* 'q': (reserved)
* 'r': variant (64-bit tagged value)
* 's': short
* 't': unsigned short
* 'u': (reserved)
* 'v': void
* 'w': wchar
* 'x': long long
* 'y': unsigned long long
* 'z': vararg (C style)

Expanded Cx Types
* 'Ca': vec2f (sizeof=8)
* 'Cb': vec3f (sizeof=16)
* 'Cc': vec4f (sizeof=16)
* 'Cd': Complex Double (sizeof=16)
* 'Ce': vec2d (sizeof=16)
* 'Cf': Complex Float (vec2f)
* 'Cg': Complex Float128 (N/A)
* 'Ch': vec3xf (sizeof=16)
* 'Ci': (IsType) SmallInt
* 'Cj': (IsType) SmallFloat
* 'Ck': Complex Float16 (vec2hf) (sizeof=4)
* 'Cl': (IsType) SmallLong
* 'Cm': (IsType) SmallDouble
* 'Cn': keyword (BS2)
* 'Co': Object (Class/Instance, BS2 / C#)
* 'Cp': MapObj (Dynamic Object)
* 'Cq': Quaternion (vec4f) (sizeof=16)
* 'Cr': Fat Variant (sizeof=16)
* 'Cs': string (BS2 / C#)
* 'Ct': symbol (BS2)
* 'Cv': (IsType) null
* 'Cy': Class Reference
* 'Cz': Named Vararg Array (BS2 Style)

Expanded Dx Types
* 'Da': auto
* 'Db': vec3d (sizeof=32)
* 'Dc': vec4d (sizeof=32)
* 'Dd': decimal64 (resv)
* 'De': decimal128 (resv)
* 'Df': decimal32 (resv)

* 'Dz': va_list

Other Types
* "A{size}{sig}": Array
* "B{size}{sig}": Sized Array-Ref
* "C{sig}"  : Extended Type (Cx)
* "D{sig}"  : Extended Type (Dx)
* "E..."    : (Reserved)
* ...
* "K..."    : (Reserved)
* "L{name};": Class or Interface (Tagged Ref)
* "M..."    : (Reserved)
* "N..."    : (Reserved)
* "O..."    : (Reserved)
* "P{sig}"  : Pointer (Narrow)
* "Q{sig}"  : Array-Ref (Tagged Ref)
* "R{sig}"  : Reference to type.
* "S..."    : (Reserved)
* "T..."    : (Reserved)
* "U{name};": Named Extended Type (Special)
* "V{sig}"  : Virtual Pointer (Fat Pointer)
* "W{sig}"  : Wide Pointer (Fat Pointer)
* "X{name};": Struct/Union
* "Y..."    : (Reserved)
* "Z..."    : (Reserved)

Compound Signatures:
* '({args}){ret}': Function Signature
* 'V({args}){ret}': Virtual Method Pointer (Fat Pointer)


For 'A', the "size" for arrays will be encoded as a list of integer values expressed in decimal, separated by commas, and optionally terminated by a semicolon. The semicolon will be optional in cases where parsing is unambigous. This will be used to represent the 'physical' storage of an array.


The choice of 'X' vs 'L' will depend on context:
* If a class is POD, it will use 'X'.
* If a class is being passed as a pointer, it will use 'X'.
* If a Non-POD class via a Tagged Reference, it will use 'L'.
** A Non-POD class will always be passed by reference at the ABI level.
** The compiler may itself implement Value-Type semantics if appropriate.

The 'L', 'U', and 'X' types may also be followed by a numeric index without a semicolon terminator. This will be an index into the literal table. An index may be used but it is not required for this table to exist in a binary unless needed for some other reason. The specifics of this table are outside the scope of this specification.


=== Flag String ===

* a: abstract ("__abstract")
* b: bigendian ("__bigendian")
* c: cdecl ("__cdecl")
* d: delegate ("__delegate")
* e: extern ("extern")
* f: fastcall ("__fastcall")
* g: getter ("__get")
* h: setter ("__set")
* i: inline ("inline" / "__inline")
* j: final/const2 ("type * const")
* k: const ("const type")
* l: ltlendian ("__ltlendian")
* m: packed ("__packed" / "__unaligned", struct=packed, pointer=unaligned)
* n: native ("__native")
* o: restrict ("__restrict", "restrict")
* p: public ("public")
* q: private ("private")
* r: protected ("protected")
* s: static ("static")
* t: thiscall/virtual (virtual method function)
* u: (special case)
* v: volatile ("volatile")
* w: stdcall ("__stdcall")
* x: xcall ("__xcall")
* y: transient ("__transient")
* z: reserved

* Cb: reference ("&type")
* Ci: interface ("__interface")
* Cs: synchronized ("__synchronized")
* Ct: thread ("__thread")

* Cw: wide ("__wide")

* De: dllexport
* Di: dllimport

* U{name};	//named flag


=== Class Layout ===

Classes will be divided into several sub-categories.
* POD ("struct")
** Do not contain any virtual methods.
** May not be derived from a parent class nor implement interfaces.
** Will be laid out equivalently to a C struct.
* Non-POD, Single Inheritance
** May have virtual methods.
** Will have only a single (non-interface) parent class.

The POD case will be informally referred to as a "struct" case, and will apply to both the C and BS2 struct types. It will also apply to C++ classes which qualify as POD. POD will be N/A for BS2 or C# classes.

The Non-POD case will be the "class" case, and will apply to all classes in BS2, as well as to C++ classes which don't qualify as POD types.

The form of C++ variant defined here will not define support for multiple inheritence.

In C++ mode, class pointers will be represented as native pointers.
In BS2 and C#, the classes will be represented as Tagged References.


Non-POD classes will have a certain layout:
* VTable Pointer for the Current Class
* A pointer for the Dynamic Object, else Reserved (and set to NULL)
* Data Fields for the current class.
* Interface VTable Pointers.
** Interfaces will follow data fields for a given class.

The contents defined in a child class will be appended following those of the parent class. As such, the physical layout for the parent class is also valid in relation to the child class.

Similarly, the methods for a child class will be appended after those of the parent class, preserving layout.

Interface VTable pointers may end up between the data members of a parent and child class. Each interface will be handled as a bare VTable pointer, with the VTable being used to find the address of the base object.

An interface may not be used as a base class or as a direct superclass, but may only be implemented on behalf of another class. An object may have a null superclass, yet still implement one or more interfaces.


A class may be considered as an interface if:
* It is declared as such (BS2 or C#).
* It is an abstract class with no data members (C++).
** It may only contain virtual method prototypes.
** Method bodies and static members are not allowed.


In the case of a SI class, only a single VTable pointer will be used, which will cover both the current class and any superclasses. In effect, each subclass will append onto the VTable and data members of the superclass.


VTable Layout:
* Pointer 0: ClassInfo Pointer
* Pointer 1: Displacement from start of the base object (Interface)
* Pointer 2: Reserved
* Pointer 3: Reserved
* Pointer 4: Index of first virtual method for class.

The structure for an Interface VTable will match that of a class VTable, but will give a list of methods matching the layout for the Interface. These will generally be duplicates for those given in the main class.

The 'this' passed to a called interface method will be adjusted by the caller to point to the base-class.

Dynamic Classes will have a pointer to the dynamic storage of the object. This will be located at the start of the data area for the first class in the heirarchy to be marked as dynamic.


=== Class Info ===

The ClassInfo structure will be partially defined here.
ClassInfo will be required for objects which are either exported, or may otherwise be subject to dynamic handling (such as by being accessed as a variant).

This structure may be placed into read only memory, and these structures may be extended later.

ClassInfo:
 ClassInfo {
   ClassInfo_RVA  self_ptr;
   String_RVA     qname;
   ClassInfo_RVA  super;
   FieldInfo_RVA  fields;
   FieldInfo_RVA  methods;
   FieldInfo_RVA  interfaces;
 }

The self_ptr field will be a pointer for the structure back to itself.

The fields, methods, and interfaces tables will be NULL terminated.
If absent, these fields will be set to NULL. A list which is empty (but present) will point to a lone NULL pointer.

Fields and methods will be optional, and may be omitted on internal classes if the class is never accessed dynamically. Interfaces will be needed if an object may be dynamically cast to an interface.


FieldInfo:
 FieldInfo {
   String_RVA name;
   String_RVA sig;
   DWORD flags;
   DWORD offset;
 }

For interfaces, the FieldInfo is similar, but differs mostly in that name gives the interface QName, and sig gives an interface pointer.

For methods, the basic scheme is similar to fields, except that it will define methods.

The offset is the number of bytes from the start of the object for fields and interfaces. For methods, the offset corresponds to an index relative to the start of the main vtable.


== Tagged References ==

Object and Variant will use the same representation, but will differ in their semantics. Class and Interface objects will also use this same representation.


Will be a 64-bit tagged type.
Specifics will depend to some extent on the runtime.

Current Scheme (4 bit MSB Tag):
* 0000: Object Pointer / Tagged Object
* 0001: Sub-Spaces
** This is subdivied into various spaces between 32 and 56 bits.
** 10..17: 56-bit (8 spaces)
** 18..1B: 48-bit (1024 spaces)
** 1C..1D: 32-bit (16M spaces)
** 1E..1F: Reserved
* 001z: Reserved
* 01zz: FixLong (62 bit)
* 10zz: Flonum (62 bit)
** Double shifted right 2 bits.
* 1100: TagArray
** Low 48: Array Base Object
** High 12: Base Offset.
* 1101: Vec2F (2x Float, 30 bits each)
* 1110: TypeTag Pointer
** High 12: Element Type
* 1111: Raw Pointer
** Low 48: Address
** High 12: Reserved

The pointer value from the low 48 bits will be logically sign-extended to 64 bits if expressed as a machine pointer.


Fat Variant:
* Will be 128 bit, with the low 64 bits as in a normal variant.
* The high 64 bits will depend on the type tag.

Narrower integer values will typically be converted to FixLong.

If a Fat Pointer or Fat Variant type is coerced into a narrow variant (and can't be represented in the narrower type), effectively it will be passed as a pointer to the Fat Pointer. Similar boxing will be used for any other values which can't fit into the available bits.


=== Object Pointer / Tagged Object ===

Tagged Object
* Low 48=Address
* High 12=ObjectTag


The Object Type Tag (ObjectTag) will be an index into a table which exists at runtime, and as such most of its index values will not be fixed. Instead, object types will be identified via a name.

The tag value of 0 will be special, and reserved for a NULL tag. Object with a null tag will have an unknown type, and this type will be regarded as functionally analogous to a "void *" pointer.


Object type names which begin with a symbol will be reserved for special or implementation defined types. Names beginning with a lower or upper case letter will be used for application types, and will generally be in the form of QNames.

Names beginning with an underscore and an upper case letter are reserved for built-in types. Names beginning with two underscores will be used for implementation specific tags.

Other names beginning with an underscore may be used for application types.


ABI Defined Types:
* "_ClassPtr": Class Pointer (Non-POD, C++ Style)
* "_ClassObj": Class Object Instance (BS2 or C# style)
* "_ClassInfo": Class Info
* "_TagArray": Tag Array (Base)
** By default, TagArray is to use the TagArray tag (positive case).
** If referenced by an Object Pointer tag, the offset will be 0.

Object types will use the ClassInfo header to manage class types.


Some Primitive types may also be expressed:
* "_Byte": Unsigned Byte
* "_SByte": Signed Byte
* "_Short": Int16
* "_UShort": UInt16
* "_Int": Int32
* "_UInt": UInt32
* "_Long": Int64
* "_ULong": UInt64
* "_Float": Float32
* "_Double": Double
* "_Variant": Variant (64 bit)
* etc.

Primitive types will not normally be used for Object Pointer tags, but are intended mostly for use by TagArray. If they are used for an Object Pointer, they will be interpreted as a memory object holding a single element of a given type (or a "boxed type"). These may be used for values or types which can't be represented directly in a tagged reference being coerced to object variant.


=== Tag Array ===

Tag Array will be used for arrays referenced via Tagged References.

The normal layout for a TagArray will have a 48 bit base pointer and a 12 bit index base offset. This base offset will be added to the index given on access to produce the index used to access the array.

Accesses via a TagArray will normally be bounds checked.

An implementation may be allowed to skip bounds checks, or to assume that the base offset is zero, as appropriate for the source language. These may be useful for performance reasons.


TagArray:
<pre>
 TagArray_Pos {
   s32 size;		//number of array elements (Positive).
   u16 type;		//element type tag
   u16 resv;		//reserved, Must Be Zero
   //raw data elements follow
 }
 
 TagArray_Neg {
   s32 size;		//number of array elements (Negative).
   s32 base;		//base offset (Positive)
   u64 data_ty;		//Pointer to data area (and type)
 }
</pre>

In the positive case, the tagged-reference provides the complete offset, which is limited to 12 bits (or 4095 elements). If referenced by an Object Pointer reference, the positive case will assume a base offset of zero.

The negative case will use a 32-bit base offset provided in the header.
The type tag will be located in the high 16 bits of the pointer.

The maximum size of a tagged array may depend on the implementation, bigger arrays will likely require the use of raw pointers or some other way of expressing the array.


The type tag will contain a Object Type Tag located in the low 12 bits. The high bits will contain an indirection level.

Indirection Level:
* 0: Basic Type
* 1..7: Between 1 and 7 pointer levels.
* 8: Array of Pointers or Overflow
* 9..F: Between 1 and 7 array levels.


Tag Array, Fat Variant:
* Bits  47..  0: Data Pointer
* Bits  59.. 48: Object Type Tag
* Bits  63.. 60: Tag Array Tag
* Bits  95.. 64: Array Size (Positive)
* Bits 123.. 96: Base Offset (28 bit unsigned)
* Bits 127..124: Indirection Level


=== Type Tag Pointer ===

Will consist of a pointer with a 4 bit indirection level, and 8 bits for the base type.

The base type will be limited to primitive types and a limited selection of registered 'struct' types (POD Only). This is mostly intended for being able to express C-style pointers coerced over to variant, but should not be used much otherwise.

The types will use a separate table from that used by the object tag space.
Typed Tag Pointers are not to be used for normal object types.

Note that C++ style classes coerced over to "object" or "variant" will instead be expressed via a Tagged Object.

