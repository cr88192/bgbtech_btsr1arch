XG3 / XG3RV:
* Repack of XG2RV Encoding Space to be compatible with RISC-V OP32 Encodings.
** Some mostly minor differences will exist.
* Would exist in a separate operating mode from RV64GC.
** XG3RV uses the same encoding space as the RISC-V 'C' extension.
* XG3RV will require a 32-bit instruction alignment.
* For XG3, will consider support for predicated instructions as optional.
* Formally, XG3 will only define the User-Mode ISA.
** System level specifics are out of scope.


Original XG2/XG2RV Encoding:
* NMOP-YwYY-nnnn-mmmm ZZZZ-Qnmo-oooo-XXXX (F0/F3/F9)
* NMJP-YwYY-nnnn-mmmm ZZZZ-Qnmo-oooo-oooo (F1/F2)
* NABP-YwYY-ZZZn-nnnn iiii-iiii-iiii-iiii (F8)
* ABC1-111Y-jjjj-jjjj iiii-iiii-iiii-iiii (FE/FF)

Repack:
* XXXX-oooooo-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)
* jiii-iiiiii-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F1/F2)
* iiii-iiiiii-iiiiii-aZZZ-nnnnnn-bY-YYPw (F8)
* iiii-iiiiii-iiiiii-aZZZ-jjjjjj-bY-YYPw (BRA)
* iiii-iiiiii-iiiiii-jjjj-jjjjaa-a1-1Y10 (FE/FF)


Pw:
* 00: OP?T (Conditional True, Optional)
* 01: OP?F (Conditional False, Optional)
* 10: OP (Unconditional)
* 11: RV OP32 (XG3RV)

Where, YYY:
* 000: F0 (3R ops)
* 001: F1 (LD/ST Disp10)
* 010: F2 (3RI Imm10 Ops)
* 011: F3 (Reserved / User, 3R Ops)
* 100: F8 (Imm16 ops)
* 101: F9 (Reserved, 3R Ops)
* 110: FE (Jumbo Prefix)
* 111: FF (Jumbo Prefix)

Exact repacking rules will depend on the encoding block.
* F1/F2/F8: Will modify repacking such that immed bits are contiguous.
* F3 and F9 will use same repacking as F0.

Changes (from BJX2 / XG2):
* FA/FB, EA/EB/EE/EF: Will be N/E.
* WEX is N/E.
* PrWEX is N/E.
* Will modify BRA/BSR encodings.
** Will be relative to BasePC vs NextPC.
** This will be to match RISC-V behavior.


Registers:
* R0: ZR (Zero Register)
* R1: LR (Link Register)
* R2: SP (Stack Pointer)
* R3: GP (Global Pointer)
* R4: TP (Task Pointer)
* R5..R31: GRPs
* R32..R63: GRPs (Aliased to F0..F31)

Versus RV64, will treat the GPRs and FPRs as a single unified register space.


Can note that Rn notation will specify a single register being used, wheres Xn will specify a 128-bit register pair.

R0 and R1 will be special if used as the base register of a Load/Store:
* R0: PC (Unscaled)
* R1: GP (Unscaled)

Where GP (GBR) may be encoded as either R1 or R3, but with the difference that R1 will use a byte-scale, and R3 will be scaled based on the element size (as with most other GPRs).


=== Jumbo Prefixes ===


Prefixes
* iiii-iiiiii-iiiiii-jjjj-jjjjaa-a1-1010 (Jumbo_FE)
* ZZZZ-jjjjii-iiiiii-ZZZZ-ZZZZaa-a1-1110 (Jumbo_FF)

The Jumbo_FE prefix will serve the primary role of expanding the immediate field.

The Jumbo_FF prefix will have a lesser role in immediate, but is more intended to expand the instruction encodings.



==== Jumbo, F0 Block ====

F0/F3/F9
* iiii-iiiiii-iiiiii-jjjj-jjjjbb-b1-1010 (FE)
* XXXX-Sakkkk-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)

For the F0/F3/F9 block, a 33-bit immediate will be formed:
* S-bbba-jjjj-jjjj-iiii-iiii-iiii-iiii-kkkk

Where:
* Imm6u/Disp6s will be extended to Imm33s/Disp33s.
* Some 3R instructions may synthesize an immediate field.


The behavior of an FF prefix with an F0 instruction will depend on the F0 instruction.


F0, 4R:
* UUUU-1ttttt-ssssss-VVVV-WWWWWW-R1-1110 (FF)
* XXXX-oooooo-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)

F0, 3RI Imm17s:
* UUUU-0jjjjj-jjjjjj-VVVV-WWWWWW-R1-1110 (FF)
* XXXX-Skiiii-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)

For the F0 block, a Imm17s may be formed if used with an Imm6 or Disp6 op:
* S-kjjj-jjjj-jjjj-iiii

With the R/U/V/W bits as additional opcode or context dependent fields.


==== Jumbo-FF with F0 Load/Store (Optional) ====

If used with a register-indexed Load/Store:
* UUUU-0iiiii-iiiiii-0000-ssssss-01-1110 (FF)
* XXXX-oooooo-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)
** {LDOP_U}.x (Rm, Ro, Disp11u), Rn
* UUUU-1ssiii-iiiiii-0000-ssssss-01-1110 (FF)
* XXXX-oooooo-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)
** {LDOP_U}.x (Rm, Ro*Sc, Disp9u), Rn

Where:
* Load will encode a LoadOp instruction on a given type.
** The destination is unchanged, value is loaded into Rn.
* Store will encode an OpStore instruction on a given type.
** The result of the operation will be written to memory.

U Field:
* 0: MOV
* 1: XCHG
* 2: ADD
* 3: SUB_MR (Mem-Reg)
* 4: SUB_RM (Reg-Mem)
* 5: AND
* 6: OR
* 7: XOR
* 8..F: Repeat 0..7, but perform a Volatile operation.

The Rs field will be reserved for now.
* May modify the behavior of OpStore if not ZZR:
** Source value is pulled from Rs rather than Rn.
** Rn is given the prior memory contents.


==== Jumbo, F1/F2 Block ====

F1/F2
* iiii-iiiiii-iiiiii-jjjj-jjjjXX-X1-1010 (FE)
* XSkk-kkkkkk-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F1/F2)

For the F1/F2 block, a 33-bit immediate will be formed:
* S-jjjj-jjjj-iiii-iiii-iiii-iiii-kkkk-kkkk


For F1 Load/Store and the Jumbo-FE prefix, the MSB of the instruction word will indicate displacement scale:
* 0: Scaled Displacement
* 1: Unscaled Displacement
** This will be N/A for Byte operations.
* For LEA.x (Possible):
** 0: LEA.x
** 1: LEAT.x


For some F2 Block Instructions:

Two Jumbo FE prefixes will give a 64-bit immediate:
* uuuu-uuuuuu-uuuuuu-vvvv-vvvvaa-a1-1010 (FE)
* iiii-iiiiii-iiiiii-jjjj-jjjjbb-b1-1010 (FE)
* cckk-kkkkkk-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F1/F2)

Will give:
* ccaa-abbb-vvvv-vvvv-uuuu-uuuu-uuuu-uuuu (High)
* jjjj-jjjj-iiii-iiii-iiii-iiii-kkkk-kkkk (Low)


If a Jumbo-FF prefix is used with the F1 and F2 blocks, the immediate will be expanded to 18-bits sign-extended.

* UUUU-TTTTii-iiiiii-VVVV-WWWWWW-R1-1110 (FF)
* Sjkk-kkkkkk-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F1/F2)

For the F1/F2 block, a 18-bit immediate will be formed:
* S-j-iiii-iiii-kkkk-kkkk

With the R/U/V/T/W bits as additional opcode or context dependent fields.


==== Jumbo, F8 Block ====

F8
* iiii-iiiiii-iiiiii-XXXX-XXXXXX-X1-1110 (FF)
* kkkk-kkkkkk-kkkkkk-ZZZZ-nnnnnn-SY-YYPw (F8)

For the F8 Block:
* S-iiii-iiii-iiii-iiii-kkkk-kkkk-kkkk-kkkk

Though, for some operations the S bit may instead function as an opcode bit.
The additional X bits will be reserved for additional opcode.


F8
* iiii-iiiiii-iiiiii-aaaa-aaaaXX-X1-1010 (FE)
* jjjj-jjjjjj-jjjjjj-bbbb-bbbbXX-X1-1010 (FE)
* kkkk-kkkkkk-kkkkkk-ZZZZ-nnnnnn-SY-YYPw (F8)

Will encode a 64-bit immediate:
* aaaa-aaaa-iiii-iiii-iiii-iiii-bbbb-bbbb
* jjjj-jjjj-jjjj-jjjj-kkkk-kkkk-kkkk-kkkk

Note that the decoding of the register field for the 96-bit F8 Block in XG3 will differ from that in XG2, if interpreted in terms of the repacking rules.

The additional X bits will be reserved for additional opcode.


=== F0 Block Listing ===

0000-oooooo-mmmmmm-0000-nnnnnn-Q0-0010

* F0zz_0zzZ
** 0000-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 0000-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 0001-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 0001-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 0010-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 0010-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 0011-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 0011-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 0100-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.B		Rn, (Rm, Ro)	//SB
** 0100-oooooo-mmmmmm-0000-nnnnnn-10-0010  LEA.B		(Rm, Ro), Rn
** 0101-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.W		Rn, (Rm, Ro)	//SH
** 0101-oooooo-mmmmmm-0000-nnnnnn-10-0010  LEA.W		(Rm, Ro), Rn
** 0110-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.L		Rn, (Rm, Ro)	//SW
** 0110-oooooo-mmmmmm-0000-nnnnnn-10-0010  LEA.L		(Rm, Ro), Rn
** 0111-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.Q		Rn, (Rm, Ro)	//SD
** 0111-oooooo-mmmmmm-0000-nnnnnn-10-0010  LEA.Q		(Rm, Ro), Rn
** 1000-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 1000-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 1001-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 1001-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 1010-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 1010-oooooo-mmmmmm-0000-nnnnnn-10-0010  (N/A)
** 1011-oooooo-mmmmmm-0000-nnnnnn-00-0010  (N/A)
** 1011-oooooo-mmmmmm-0000-nnnnnn-10-0010 ? LDTEX		(Rm, Ro), Rn
** 1100-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.B		(Rm, Ro), Rn	//LB
** 1100-oooooo-mmmmmm-0000-nnnnnn-10-0010  MOVU.B		(Rm, Ro), Rn	//LBU
** 1101-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.W		(Rm, Ro), Rn	//LH
** 1101-oooooo-mmmmmm-0000-nnnnnn-10-0010  MOVU.W		(Rm, Ro), Rn	//LHU
** 1110-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.L		(Rm, Ro), Rn	//LW
** 1110-oooooo-mmmmmm-0000-nnnnnn-10-0010  MOVU.L		(Rm, Ro), Rn	//LWU
** 1111-oooooo-mmmmmm-0000-nnnnnn-00-0010  MOV.Q		(Rm, Ro), Rn	//LD
** 1111-oooooo-mmmmmm-0000-nnnnnn-10-0010 ? LDTEX2

* F0zz_1zzZ
** 0000-oooooo-mmmmmm-0001-nnnnnn-00-0010  ADD			Rm, Ro, Rn
** 0000-oooooo-mmmmmm-0001-nnnnnn-10-0010  ADDX			Xm, Xo, Xn	//(ALUX)
** 0001-oooooo-mmmmmm-0001-nnnnnn-00-0010  SUB			Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0001-nnnnnn-10-0010  SUBX			Xm, Xo, Xn	//(ALUX)
** 0010-oooooo-mmmmmm-0001-nnnnnn-00-0010  MULS.L		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0001-nnnnnn-10-0010  MULS.Q		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0001-nnnnnn-00-0010  MULU.L		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0001-nnnnnn-10-0010  MULU.Q		Rm, Ro, Rn
** 0100-oooooo-mmmmmm-0001-nnnnnn-00-0010  MIN			Rm, Ro, Rn
** 0100-oooooo-mmmmmm-0001-nnnnnn-10-0010  MAX			Rm, Ro, Rn
** 0101-oooooo-mmmmmm-0001-nnnnnn-00-0010  AND			Rm, Ro, Rn
** 0101-oooooo-mmmmmm-0001-nnnnnn-10-0010  ANDX			Xm, Xo, Xn	//(ALUX)
** 0110-oooooo-mmmmmm-0001-nnnnnn-00-0010  OR			Rm, Ro, Rn
** 0110-oooooo-mmmmmm-0001-nnnnnn-10-0010  ORX			Xm, Xo, Xn	//(ALUX)
** 0111-oooooo-mmmmmm-0001-nnnnnn-00-0010  XOR			Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0001-nnnnnn-10-0010  XORX			Xm, Xo, Xn	//(ALUX)

** 1zzz-zzzzzz-mmmmmm-0001-nnnnnn-z0-0010  (2R Space)

* F0zz_2zzz (More 3R Ops)
** 0000-oooooo-mmmmmm-0010-nnnnnn-00-0010  PADD.W		Rm, Ro, Rn
** 0000-oooooo-mmmmmm-0010-nnnnnn-10-0010  PADD.L		Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0010-nnnnnn-00-0010  PSUB.W		Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0010-nnnnnn-10-0010  PSUB.L		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0010-nnnnnn-00-0010  SHAR.L		Rm, Ro, Rn	//SRAW
** 0010-oooooo-mmmmmm-0010-nnnnnn-10-0010  SHAR.Q		Rm, Ro, Rn	//SRA
** 0011-oooooo-mmmmmm-0010-nnnnnn-00-0010  SHLR.L		Rm, Ro, Rn	//SRLW
** 0011-oooooo-mmmmmm-0010-nnnnnn-10-0010  SHLR.Q		Rm, Ro, Rn	//SRL
** 0100-oooooo-mmmmmm-0010-nnnnnn-00-0010  PCSELT.W		Rm, Ro, Rn
** 0100-oooooo-mmmmmm-0010-nnnnnn-10-0010  PCSELT.L		Rm, Ro, Rn
** 0101-oooooo-mmmmmm-0010-nnnnnn-00-0010  PADD.F		Rm, Ro, Rn	//FADD.S
** 0101-oooooo-mmmmmm-0010-nnnnnn-10-0010  PADDX.F		Xm, Xo, Xn
** 0110-oooooo-mmmmmm-0010-nnnnnn-00-0010  PSUB.F		Rm, Ro, Rn	//FSUB.S
** 0110-oooooo-mmmmmm-0010-nnnnnn-10-0010  PSUBX.F		Xm, Xo, Xn
** 0111-oooooo-mmmmmm-0010-nnnnnn-00-0010  PMUL.F		Rm, Ro, Rn	//FMUL.S
** 0111-oooooo-mmmmmm-0010-nnnnnn-10-0010  PMULX.F		Xm, Xo, Xn
** 1000-oooooo-mmmmmm-0010-nnnnnn-00-0010  MOVHD		Rm, Ro, Rn	//PACKU
** 1000-oooooo-mmmmmm-0010-nnnnnn-10-0010  MOVLD		Rm, Ro, Rn	//PACK
** 1001-oooooo-mmmmmm-0010-nnnnnn-00-0010  MOVHLD		Rm, Ro, Rn
** 1001-oooooo-mmmmmm-0010-nnnnnn-10-0010  MOVLHD		Rm, Ro, Rn
** 1010-oooooo-mmmmmm-0010-nnnnnn-00-0010  PSCHEQ.W		Rm, Ro, Rn
** 1010-oooooo-mmmmmm-0010-nnnnnn-10-0010  PSCHEQ.B		Rm, Ro, Rn
** 1011-oooooo-mmmmmm-0010-nnnnnn-00-0010  PSCHNE.W		Rm, Ro, Rn
** 1011-oooooo-mmmmmm-0010-nnnnnn-10-0010  PSCHNE.B		Rm, Ro, Rn
** 1100-oooooo-mmmmmm-0010-nnnnnn-00-0010  BLKUTX1		Rm, Ro, Rn
** 1100-oooooo-mmmmmm-0010-nnnnnn-10-0010  BLKUTX2		Rm, Ro, Rn
** 1101-oooooo-mmmmmm-0010-nnnnnn-00-0010  PADD.H		Rm, Ro, Rn	//FADD.H
** 1101-oooooo-mmmmmm-0010-nnnnnn-10-0010  PADDX.D		Xm, Xo, Xn
** 1110-oooooo-mmmmmm-0010-nnnnnn-00-0010  PSUB.H		Rm, Ro, Rn	//FSUB.H
** 1110-oooooo-mmmmmm-0010-nnnnnn-10-0010  PSUBX.D		Xm, Xo, Xn
** 1111-oooooo-mmmmmm-0010-nnnnnn-00-0010  PMUL.H		Rm, Ro, Rn	//FMUL.H
** 1111-oooooo-mmmmmm-0010-nnnnnn-10-0010  PMULX.D		Xm, Xo, Xn

** 0000-oooooo-mmmmmm-0011-nnnnnn-z0-0010  (1R Space)

** 0001-oooooo-mmmmmm-0011-nnnnnn-00-0010  MOVTT		Rm, Ri, Rn	//(TTAG)
** 0001-oooooo-mmmmmm-0011-nnnnnn-10-0010  MOVTT		Rm, Imm6u, Rn
** 0010-oooooo-mmmmmm-0011-nnnnnn-00-0010  ROTLQ		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0011-nnnnnn-10-0010  SHARX		Xm, Ro, Xn	//(ALUX)
** 0011-oooooo-mmmmmm-0011-nnnnnn-00-0010  ROTRQ		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0011-nnnnnn-10-0010  SHLRX		Xm, Ro, Xn	//(ALUX)
** 0100-oooooo-mmmmmm-0011-nnnnnn-00-0010  MULHS.Q		Rm, Ro, Rn
** 0100-oooooo-mmmmmm-0011-nnnnnn-10-0010  SHADX		Xm, Ro, Xn	//(ALUX)
** 0101-oooooo-mmmmmm-0011-nnnnnn-00-0010  MULHU.Q		Rm, Ro, Rn
** 0101-oooooo-mmmmmm-0011-nnnnnn-10-0010  SHLDX		Xm, Ro, Xn	//(ALUX)
** 0110-oooooo-mmmmmm-0011-nnnnnn-00-0010  ROTL.L		Rm, Ro, Rn
** 0110-oooooo-mmmmmm-0011-nnnnnn-10-0010  ROTLX		Xm, Ro, Xn	//(ALUX)
** 0111-oooooo-mmmmmm-0011-nnnnnn-00-0010  (N/A)
** 0111-oooooo-mmmmmm-0011-nnnnnn-10-0010  (N/A)

** 1zzz-zzzzzz-mmmmmm-0011-nnnnnn-z0-0010  (2R Space)

* F0nm_4eoz
** 0000-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? MOV.X		Xn, (Rm, Disp6s)
** 0000-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.B		(Rm, Disp6s), Rn
** 0001-oooooo-mmmmmm-0100-nnnnnn-00-0010  (N/A)
** 0001-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.W		(Rm, Disp6s), Rn
** 0010-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? FMOV.S		Rn, (Rm, Disp6s)
** 0010-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.L		(Rm, Disp6s), Rn
** 0011-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? FMOV.H		Rn, (Rm, Disp6s)
** 0011-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.Q		(Rm, Disp6s), Rn
** 0100-oooooo-mmmmmm-0100-nnnnnn-00-0010  MOV.X		Xn, (Rm, Ro)
** 0100-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.B		(Rm, Ro), Rn
** 0101-oooooo-mmmmmm-0100-nnnnnn-00-0010  (N/A)
** 0101-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.W		(Rm, Ro), Rn
** 0110-oooooo-mmmmmm-0100-nnnnnn-00-0010  FMOV.S		Rn, (Rm, Ro)
** 0110-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.L		(Rm, Ro), Rn
** 0111-oooooo-mmmmmm-0100-nnnnnn-00-0010  FMOV.H		Rn, (Rm, Ro)
** 0111-oooooo-mmmmmm-0100-nnnnnn-10-0010  LEAT.Q		(Rm, Ro), Rn
** 1000-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? MOV.X		(Rm, Disp6s), Xn
** 1000-oooooo-mmmmmm-0100-nnnnnn-10-0010 ? MOVN.L		(Rm, Disp6s), Rn //FLW
** 1001-oooooo-mmmmmm-0100-nnnnnn-00-0010  (N/A)
** 1001-oooooo-mmmmmm-0100-nnnnnn-10-0010  -
** 1010-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? FMOV.S		(Rm, Disp6s), Rn
** 1010-oooooo-mmmmmm-0100-nnnnnn-10-0010  PMOV.F8		(Rm, Disp6s), Rn
** 1011-oooooo-mmmmmm-0100-nnnnnn-00-0010 ? FMOV.H		(Rm, Disp6s), Rn
** 1011-oooooo-mmmmmm-0100-nnnnnn-10-0010  PMOV.2H		(Rm, Disp6s), Rn
** 1100-oooooo-mmmmmm-0100-nnnnnn-00-0010  MOV.X		(Rm, Ro), Xn
** 1100-oooooo-mmmmmm-0100-nnnnnn-10-0010  ? MOVN.L		(Rm, Ro), Rn //FLW
** 1101-oooooo-mmmmmm-0100-nnnnnn-00-0010  (N/A)
** 1101-oooooo-mmmmmm-0100-nnnnnn-10-0010  -
** 1110-oooooo-mmmmmm-0100-nnnnnn-00-0010  FMOV.S		(Rm, Ro), Rn
** 1110-oooooo-mmmmmm-0100-nnnnnn-10-0010  PMOV.F8		(Rm, Ro), Rn
** 1111-oooooo-mmmmmm-0100-nnnnnn-00-0010  FMOV.H		(Rm, Ro), Rn
** 1111-oooooo-mmmmmm-0100-nnnnnn-10-0010  PMOV.2H		(Rm, Ro), Rn

* F0zz_5zzz
** 0000-oooooo-mmmmmm-0101-nnnnnn-00-0010 ? CSELT		Rm, Ro, Rn
** 0000-oooooo-mmmmmm-0101-nnnnnn-10-0010  (N/A)
** 0001-oooooo-mmmmmm-0101-nnnnnn-00-0010  PMULS.W		Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0101-nnnnnn-10-0010  PMULU.W		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0101-nnnnnn-00-0010  DMULS.L		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0101-nnnnnn-10-0010  DMULS.Q		Rm, Ro, Xn
** 0011-oooooo-mmmmmm-0101-nnnnnn-00-0010  DMULU.L		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0101-nnnnnn-10-0010  DMULU.Q		Rm, Ro, Xn
** 0100-oooooo-mmmmmm-0101-nnnnnn-00-0010  SHAD.L		Rm, Ro, Rn	//SLAW
** 0100-oooooo-mmmmmm-0101-nnnnnn-10-0010  SHAD.Q		Rm, Ro, Rn	//SLA
** 0101-oooooo-mmmmmm-0101-nnnnnn-00-0010  SHLD.L		Rm, Ro, Rn	//SLL
** 0101-oooooo-mmmmmm-0101-nnnnnn-10-0010  SHLD.Q		Rm, Ro, Rn	//SLLW
** 0110-oooooo-mmmmmm-0101-nnnnnn-00-0010  PMULS.LW		Rm, Ro, Rn
** 0110-oooooo-mmmmmm-0101-nnnnnn-10-0010  PMULU.LW		Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0101-nnnnnn-00-0010  PMULS.HW		Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0101-nnnnnn-10-0010  PMULU.HW		Rm, Ro, Rn
** 1000-oooooo-mmmmmm-0101-nnnnnn-00-0010  FADD			Rm, Ro, Rn	//FADD.D
** 1000-oooooo-mmmmmm-0101-nnnnnn-10-0010  FADDX		Xm, Xo, Xn
** 1001-oooooo-mmmmmm-0101-nnnnnn-00-0010  FSUB			Rm, Ro, Rn	//FSUB.D
** 1001-oooooo-mmmmmm-0101-nnnnnn-10-0010  FSUBX		Xm, Xo, Xn
** 1010-oooooo-mmmmmm-0101-nnnnnn-00-0010  FMUL			Rm, Ro, Rn	//FMUL.D
** 1010-oooooo-mmmmmm-0101-nnnnnn-10-0010  FMULX		Xm, Xo, Xn
** 1011-oooooo-mmmmmm-0101-nnnnnn-00-0010  FMAC			Rm, Ro, Rn	//~FMADD.D
** 1011-oooooo-mmmmmm-0101-nnnnnn-10-0010  FMAC.X		Xm, Xo, Xn
** 1100-oooooo-mmmmmm-0101-nnnnnn-00-0010  ADDS.L		Rm, Ro, Rn	//ADDW
** 1100-oooooo-mmmmmm-0101-nnnnnn-10-0010  ADDU.L		Rm, Ro, Rn	//ADDWU
** 1101-oooooo-mmmmmm-0101-nnnnnn-00-0010  SUBS.L		Rm, Ro, Rn	//SUBW
** 1101-oooooo-mmmmmm-0101-nnnnnn-10-0010  SUBU.L		Rm, Ro, Rn	//SUBWU
** 1110-oooooo-mmmmmm-0101-nnnnnn-00-0010  MULS.W		Rm, Ro, Rn
** 1110-oooooo-mmmmmm-0101-nnnnnn-10-0010  MULS.W		Rm, Imm6u, Rn
** 1111-oooooo-mmmmmm-0101-nnnnnn-00-0010  MULU.W		Rm, Ro, Rn
** 1111-oooooo-mmmmmm-0101-nnnnnn-10-0010  MULU.W		Rm, Imm6u, Rn

* F0zz_6zzz
** 0000-oooooo-mmmmmm-0110-nnnnnn-00-0010  MACS.L		Rm, Ro, Rn
** 0000-oooooo-mmmmmm-0110-nnnnnn-10-0010  MACS.L		Rm, Imm6u, Rn
** 0001-oooooo-mmmmmm-0110-nnnnnn-00-0010  MACU.L		Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0110-nnnnnn-10-0010  MACU.L		Rm, Imm6u, Rn
** 0010-oooooo-mmmmmm-0110-nnnnnn-00-0010  DMACS.L		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0110-nnnnnn-10-0010  DMACS.L		Rm, Imm6u, Rn
** 0011-oooooo-mmmmmm-0110-nnnnnn-00-0010  DMACU.L		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0110-nnnnnn-10-0010  DMACU.L		Rm, Imm6u, Rn
** 0100-oooooo-mmmmmm-0110-nnnnnn-00-0010  DIVS.Q		Rm, Ro, Rn	//DIV
** 0100-oooooo-mmmmmm-0110-nnnnnn-10-0010  DIVU.Q		Rm, Ro, Rn	//DIVU
** 0101-oooooo-mmmmmm-0110-nnnnnn-00-0010  MODS.Q		Rm, Ro, Rn	//REM
** 0101-oooooo-mmmmmm-0110-nnnnnn-10-0010  MODU.Q		Rm, Ro, Rn	//REMU
** 0110-oooooo-mmmmmm-0110-nnnnnn-00-0010  FDIV			Rm, Ro, Rn	//FDIV.D
** 0110-oooooo-mmmmmm-0110-nnnnnn-10-0010  FDIVX		Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0110-nnnnnn-00-0010  FDIVA		Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0110-nnnnnn-10-0010  FDIVXA		Rm, Ro, Rn
** 1000-oooooo-mmmmmm-0110-nnnnnn-00-0010  -
** 1000-oooooo-mmmmmm-0110-nnnnnn-10-0010  BLKUTX3H		Xm, Ro, Rn
** 1001-oooooo-mmmmmm-0110-nnnnnn-00-0010  BLERP		Rm, Ro, Rn
** 1001-oooooo-mmmmmm-0110-nnnnnn-10-0010  BLKUTX3L		Xm, Ro, Rn
** 1010-oooooo-mmmmmm-0110-nnnnnn-00-0010  BLINTA		Rm, Ro, Rn
** 1010-oooooo-mmmmmm-0110-nnnnnn-10-0010 /? BLINT		Xm, Xo, Xn
** 1011-oooooo-mmmmmm-0110-nnnnnn-00-0010  BITSEL		Rm, Ro, Rn
** 1011-oooooo-mmmmmm-0110-nnnnnn-10-0010  BITSELX		Xm, Xo, Xn
** 1100-oooooo-mmmmmm-0110-nnnnnn-00-0010  BLKUAB1		Rm, Ro, Rn
** 1100-oooooo-mmmmmm-0110-nnnnnn-10-0010  BLKUAB2		Rm, Ro, Rn
** 1101-oooooo-mmmmmm-0110-nnnnnn-00-0010  FADDG		Rm, Ro, Rn	//FADD.D, Dyn
** 1101-oooooo-mmmmmm-0110-nnnnnn-10-0010  FADD			Rm, Imm6fp, Rn
** 1110-oooooo-mmmmmm-0110-nnnnnn-00-0010  FSUBG		Rm, Ro, Rn	//FSUB.D, Dyn
** 1110-oooooo-mmmmmm-0110-nnnnnn-10-0010  FSUB			Rm, Imm6fp, Rn
** 1111-oooooo-mmmmmm-0110-nnnnnn-00-0010  FMULG		Rm, Ro, Rn	//FMUL.D, Dyn
** 1111-oooooo-mmmmmm-0110-nnnnnn-10-0010  FMUL			Rm, Imm6fp, Rn

* F0zz_7zzz
** 0000-oooooo-mmmmmm-0111-nnnnnn-00-0010  FADDA		Rm, Ro, Rn
** 0000-oooooo-mmmmmm-0111-nnnnnn-10-0010  FMIN			Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0111-nnnnnn-00-0010  FSUBA		Rm, Ro, Rn
** 0001-oooooo-mmmmmm-0111-nnnnnn-10-0010  FMAX			Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0111-nnnnnn-00-0010  FMULA		Rm, Ro, Rn
** 0010-oooooo-mmmmmm-0111-nnnnnn-10-0010  BITNN		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0111-nnnnnn-00-0010  MOVHW		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-0111-nnnnnn-10-0010  MOVLW		Rm, Ro, Rn
** 0100-oooooo-mmmmmm-0111-nnnnnn-00-0010  DIVS.L		Rm, Ro, Rn	//DIVW
** 0100-oooooo-mmmmmm-0111-nnnnnn-10-0010  DIVU.L		Rm, Ro, Rn	//DIVUW
** 0101-oooooo-mmmmmm-0111-nnnnnn-00-0010  MODS.L		Rm, Ro, Rn	//REMW
** 0101-oooooo-mmmmmm-0111-nnnnnn-10-0010  MODU.L		Rm, Ro, Rn	//REMUW
** 0110-oooooo-mmmmmm-0111-nnnnnn-00-0010 ? RGB5CCENC	Rm, Ro, Rn
** 0110-oooooo-mmmmmm-0111-nnnnnn-10-0010 ? PMUL.F8H	Rm, Ro, Rn
** 0111-oooooo-mmmmmm-0111-nnnnnn-00-0010  (N/A)
** 0111-oooooo-mmmmmm-0111-nnnnnn-10-0010  (N/A)
** 1zzz-zzzzzz-mmmmmm-0111-nnnnnn-z0-0010  (2R Space)

* F0zz_8zzz (XMOV Block; Only valid if XMOV is allowed)
** 0000-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.B	Rn, (Xm, Disp6s)
** 0000-oooooo-mmmmmm-1000-nnnnnn-10-0010  XLEA.B	(Xm, Disp6s), Xn
** 0001-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.W	Rn, (Xm, Disp6s)
** 0001-oooooo-mmmmmm-1000-nnnnnn-10-0010  TSTNQ	Rm, Ro, Rn
** 0010-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.L	Rn, (Xm, Disp6s)
** 0010-oooooo-mmmmmm-1000-nnnnnn-10-0010  TSTQ		Rm, Ro, Rn
** 0011-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.Q	Rn, (Xm, Disp6s)
** 0011-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOV.X	Xn, (Xm, Disp6s)
** 0100-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.B	Rn, (Xm, Ro)
** 0100-oooooo-mmmmmm-1000-nnnnnn-10-0010  XLEA.B	(Xm, Ro), Xn
** 0101-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.W	Rn, (Xm, Ro)
** 0101-oooooo-mmmmmm-1000-nnnnnn-10-0010  CAS.Q	Rn, Ro, (Rm)
** 0110-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.L	Rn, (Xm, Ro)
** 0110-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVTT	Xm, Ro, Xn
** 0111-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.Q	Rn, (Xm, Ro)
** 0111-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOV.X	Xn, (Xm, Ro)
** 1000-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.B	(Xm, Disp6s), Rn
** 1000-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.B	(Xm, Disp6s), Rn
** 1001-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.W	(Xm, Disp6s), Rn
** 1001-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.W	(Xm, Disp6s), Rn
** 1010-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.L	(Xm, Disp6s), Rn
** 1010-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.L	(Xm, Disp6s), Rn
** 1011-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.Q	(Xm, Disp6s), Rn
** 1011-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOV.X	(Xm, Disp6s), Xn
** 1100-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.B	(Xm, Ro), Rn		//
** 1100-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.B	(Xm, Ro), Rn		//
** 1101-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.W	(Xm, Ro), Rn		//
** 1101-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.W	(Xm, Ro), Rn		//
** 1110-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.L	(Xm, Ro), Rn		//
** 1110-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOVU.L	(Xm, Ro), Rn		//
** 1111-oooooo-mmmmmm-1000-nnnnnn-00-0010  XMOV.Q	(Xm, Ro), Rn		//
** 1111-oooooo-mmmmmm-1000-nnnnnn-10-0010  XMOV.X	(Xm, Ro), Xn		//

The XMOV instructions operate on 128-bit pointers, and are only valid if 128-bit pointers are supported.


* F0nm_9eoZ
** 0000-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0000-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPEQ.Q	Rm, Imm6s, Rn
** 0001-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0001-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPGT.Q	Rm, Imm6s, Rn
** 0010-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0010-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPNE.Q	Rm, Imm6s, Rn
** 0011-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0011-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPLT.Q	Rm, Imm6s, Rn	//SLTI
** 0100-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0100-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPEQ.Q	Rm, Ro, Rn		//SEQ
** 0101-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0101-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPGT.Q	Rm, Ro, Rn		//SLT
** 0110-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0110-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPNE.Q	Rm, Ro, Rn		//SNE
** 0111-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 0111-oooooo-mmmmmm-1001-nnnnnn-10-0010  CMPGE.Q	Rm, Ro, Rn		//SGE
** 1000-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1000-oooooo-mmmmmm-1001-nnnnnn-10-0010  -
** 1001-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1001-oooooo-mmmmmm-1001-nnnnnn-10-0010  -
** 1010-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1010-oooooo-mmmmmm-1001-nnnnnn-10-0010  -
** 1011-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1011-oooooo-mmmmmm-1001-nnnnnn-10-0010  -
** 1100-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1100-oooooo-mmmmmm-1001-nnnnnn-10-0010  -
** 1101-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1101-oooooo-mmmmmm-1001-nnnnnn-10-0010  FCMPEQ	Rm, Ro, Rn		//FEQ
** 1110-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1110-oooooo-mmmmmm-1001-nnnnnn-10-0010  FCMPLT	Rm, Ro, Rn		//~FGT
** 1111-oooooo-mmmmmm-1001-nnnnnn-00-0010 (N/A)
** 1111-oooooo-mmmmmm-1001-nnnnnn-10-0010  FCMPGE	Rm, Ro, Rn		//FGE


If a CMPxx instruction is encoded with Rn=ZR, this will update SR.T based on the result, else it will put the result into Rn.


* zzzz-oooooo-mmmmmm-1010-nnnnnn-z0-0010  (Reserved)
* zzzz-oooooo-mmmmmm-1011-nnnnnn-z0-0010  (Reserved)

* jjjj-oooooo-mmmmmm-1100-nnnnnn-s0-0010  BRA Disp23
* jjjj-oooooo-mmmmmm-1101-nnnnnn-s0-0010  BSR Disp23
** Disp = { s, nnnnnn, jjjj, oooooo, mmmmmm }
** Multiple of 4 bytes, relative to BasePC.

BRA/BSR encoding:
* In RISC-V terms, BRA will be a "JAL X0, Disp" and BSR "JAL X1, Disp".
** RV JAL may still be used in XG3RV Mode.
** However, branching to a non 32-bit aligned address is undefined.
** Unlike RV JAL, these may not encode additional link registers.
* Branch reach will be +/- 16MB
** This will only be able to branch to a 32-bit aligned address.


* zzzz-oooooo-mmmmmm-1110-nnnnnn-z0-0010  (Reserved)
* zzzz-oooooo-mmmmmm-1111-nnnnnn-z0-0010  (Reserved)


=== F1 Block Listing ===

* F1nm_Zeii  (MOV Disp10s Block)
** iiiiiiiiii-mmmmmm-0000-nnnnnn-00-0110  MOV.B		Rn, (Rm, Disp10s)	//SB
** iiiiiiiiii-mmmmmm-0000-nnnnnn-10-0110  LEA.B		(Rm, Disp10s), Rn
** iiiiiiiiii-mmmmmm-0001-nnnnnn-00-0110  MOV.W		Rn, (Rm, Disp10s)	//SH
** iiiiiiiiii-mmmmmm-0001-nnnnnn-10-0110  LEA.W		(Rm, Disp10s), Rn
** iiiiiiiiii-mmmmmm-0010-nnnnnn-00-0110  MOV.L		Rn, (Rm, Disp10s)	//SW
** iiiiiiiiii-mmmmmm-0010-nnnnnn-10-0110  LEA.L		(Rm, Disp10s), Rn
** iiiiiiiiii-mmmmmm-0011-nnnnnn-00-0110  MOV.Q		Rn, (Rm, Disp10s)	//SD
** iiiiiiiiii-mmmmmm-0011-nnnnnn-10-0110  LEA.Q		(Rm, Disp10s), Rn

** iiiiiiiiii-mmmmmm-0100-nnnnnn-00-0110  FMOV.S	Rn, (Rm, Disp10s)	//FLS2D
** iiiiiiiiii-mmmmmm-0100-nnnnnn-10-0110  FMOV.H	Rn, (Rm, Disp10s)	//FLH2D
** iiiiiiiiii-mmmmmm-0101-nnnnnn-00-0110  (N/A)
** iiiiiiiiii-mmmmmm-0101-nnnnnn-10-0110  MOV.X		Rn, (Rm, Disp10s)	//SX/SDP
** iiiiiiiiii-mmmmmm-0110-nnnnnn-00-0110  FMOV.S	(Rm, Disp10s), Rn	//FSD2S
** iiiiiiiiii-mmmmmm-0110-nnnnnn-10-0110  FMOV.H	(Rm, Disp10s), Rn	//FSD2H
** iiiiiiiiii-mmmmmm-0111-nnnnnn-00-0110  (N/A)
** iiiiiiiiii-mmmmmm-0111-nnnnnn-10-0110  MOV.X		(Rm, Disp10s), Rn	//LX/LDP

** iiiiiiiiii-mmmmmm-1000-nnnnnn-00-0110  MOV.B		(Rm, Disp10s), Rn	//LB
** iiiiiiiiii-mmmmmm-1000-nnnnnn-10-0110  MOVU.B	(Rm, Disp10s), Rn	//LBU
** iiiiiiiiii-mmmmmm-1001-nnnnnn-00-0110  MOV.W		(Rm, Disp10s), Rn	//LH
** iiiiiiiiii-mmmmmm-1001-nnnnnn-10-0110  MOVU.W	(Rm, Disp10s), Rn	//LHU
** iiiiiiiiii-mmmmmm-1010-nnnnnn-00-0110  MOV.L		(Rm, Disp10s), Rn	//LW
** iiiiiiiiii-mmmmmm-1010-nnnnnn-10-0110  MOVU.L	(Rm, Disp10s), Rn	//LWU
** iiiiiiiiii-mmmmmm-1011-nnnnnn-00-0110  MOV.Q		(Rm, Disp10s), Rn	//LD
** iiiiiiiiii-mmmmmm-1011-nnnnnn-10-0110  -

Load/Store displacement will be scaled by the element size:
* B will have a scale of 1.
* W will have a scale of 2.
* L will have a scale of 4.
* Q will have a scale of 8.
* X will also have a scale of 8.

** F1zz_Czzz
*** iiiiiiiiii-mmmmmm-1100-nnnnnn-00-0110 ? BTSTT	Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1100-nnnnnn-10-0110 ? BTSTF	Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1101-nnnnnn-00-0110 ? BGT		Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1101-nnnnnn-10-0110 ? BLE		Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1110-nnnnnn-00-0110 ? BGTU	Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1110-nnnnnn-10-0110 ? BLEU	Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1111-nnnnnn-00-0110 ? BEQ		Rm, Rn, Disp10s
*** iiiiiiiiii-mmmmmm-1111-nnnnnn-10-0110 ? BNE		Rm, Rn, Disp10s

For the relative branch cases, these will be modified to be relative to BasePC and use a 4 byte scale (+/- 2K).
* BTSTT, Branch if !(Rm AND Rn)
* BTSTF, Branch if (Rm AND Rn)

Possible:
* XG3L may require Rm to be X0 for BGT/BLE and BEQ/BNE.
** BGTU and BLEU will be disallowed.


=== F2 Block Listing ===

* F2nm_Zgjj

* iiiiiiiiii-mmmmmm-0000-nnnnnn-00-1010  ADD		Rm, Imm10u, Rn
* iiiiiiiiii-mmmmmm-0000-nnnnnn-10-1010  -
* iiiiiiiiii-mmmmmm-0001-nnnnnn-00-1010  ADD		Rm, Imm10n, Rn
* iiiiiiiiii-mmmmmm-0001-nnnnnn-10-1010  -
* iiiiiiiiii-mmmmmm-0010-nnnnnn-00-1010  MULS.L		Rm, Imm10u, Rn
* iiiiiiiiii-mmmmmm-0010-nnnnnn-10-1010  MULU.L		Rm, Imm10u, Rn
* iiiiiiiiii-mmmmmm-0011-nnnnnn-00-1010  ADDS.L		Rm, Imm10u, Rn
* iiiiiiiiii-mmmmmm-0011-nnnnnn-10-1010  ADDU.L		Rm, Imm10u, Rn
* iiiiiiiiii-mmmmmm-0100-nnnnnn-00-1010  ADDS.L		Rm, Imm10n, Rn
* iiiiiiiiii-mmmmmm-0100-nnnnnn-10-1010  ADDU.L		Rm, Imm10n, Rn
* iiiiiiiiii-mmmmmm-0101-nnnnnn-00-1010  AND		Rm, Imm10s, Rn
* iiiiiiiiii-mmmmmm-0101-nnnnnn-10-1010  RSUB		Rm, Imm10s, Rn
* iiiiiiiiii-mmmmmm-0110-nnnnnn-00-1010  OR			Rm, Imm10u, Rn

* 00iiiiiiii-mmmmmm-0110-nnnnnn-10-1010  SHAD.X		Xm, Imm8s, Xn	//Xn>=2
* 01iiiiiiii-mmmmmm-0110-nnnnnn-10-1010  -
* 10iiiiiiii-mmmmmm-0110-nnnnnn-10-1010  -
* 11iiiiiiii-mmmmmm-0110-nnnnnn-10-1010  -

* iiiiiiiiii-mmmmmm-0110-000000-10-1010  JALR		Rm, Imm10s, ZR
* iiiiiiiiii-mmmmmm-0110-000001-10-1010  JALR		Rm, Imm10s, LR

* iiiiiiiiii-mmmmmm-0111-nnnnnn-00-1010  XOR		Rm, Imm10u, Rn
* 00iiiiiiii-mmmmmm-0111-nnnnnn-10-1010  SHLD.X		Xm, Imm8s, Xn
* 01iiiiiiii-mmmmmm-0111-nnnnnn-10-1010 ? PSHUFX.L	Rm, Imm8u, Rn
* 10iiiiiiii-mmmmmm-0111-nnnnnn-10-1010  -
* 11iiiiiiii-mmmmmm-0111-nnnnnn-10-1010 ? PMULTX.L	Rm, Imm8u, Rn

* 00iiiiiiii-mmmmmm-1000-nnnnnn-00-1010  SHAD.L		Rm, Imm8s, Rn
* 01iiiiiiii-mmmmmm-1000-nnnnnn-00-1010  PSHUF.B	Rm, Imm8u, Rn
* 10iiiiiiii-mmmmmm-1000-nnnnnn-00-1010  -
* 11iiiiiiii-mmmmmm-1000-nnnnnn-00-1010  -

* 00iiiiiiii-mmmmmm-1000-nnnnnn-10-1010  SHAD.Q		Rm, Imm8s, Rn
* 01iiiiiiii-mmmmmm-1000-nnnnnn-10-1010  PSHUF.W	Rm, Imm8u, Rn
* 10iiiiiiii-mmmmmm-1000-nnnnnn-10-1010  -
* 11iiiiiiii-mmmmmm-1000-nnnnnn-10-1010 ? PMULT.W	Rm, Imm8u, Rn

* 00iiiiiiii-mmmmmm-1001-nnnnnn-00-1010  SHLD.L		Rm, Imm8s, Rn
* 01iiiiiiii-mmmmmm-1001-nnnnnn-00-1010 / PCONV		Rm, Imm8u, Rn
* 10iiiiiiii-mmmmmm-1001-nnnnnn-00-1010  -
* 11iiiiiiii-mmmmmm-1001-nnnnnn-00-1010  -

* 00iiiiiiii-mmmmmm-1001-nnnnnn-10-1010  SHLD.Q		Rm, Imm8s, Rn
* 01iiiiiiii-mmmmmm-1001-nnnnnn-10-1010 / PCONVX	Rm, Imm8u, Rn
* 10iiiiiiii-mmmmmm-1001-nnnnnn-10-1010  -
* 11iiiiiiii-mmmmmm-1001-nnnnnn-10-1010  -

* F2nz_Aejj  (2RI Space)
* F2nz_Bejj  (2RI Space)
* F2nz_Cfjj
* F2nz_Dfjj
* F2nz_Efjj
* F2nz_Ffjj

For now, the 2RI encodings are not being carried over.
Many were functionally redundant in this case, or were optimization cases.

Note that the 2RI instructions in this case would use the same Imm10 format at the 3RI encodings (the Em and Wm bits will be available for opcode).


=== F8 Block Listing ===

* F8Zn_iiii
** iiii-iiiiii-iiiiii-0000-nnnnnn-01-0010  LDIZ		Imm16u, Rn
** iiii-iiiiii-iiiiii-0000-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0001-nnnnnn-01-0010  LDIN		Imm16n, Rn
** iiii-iiiiii-iiiiii-0001-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0010-nnnnnn-01-0010  ADD		Imm16s, Rn
** iiii-iiiiii-iiiiii-0010-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0011-nnnnnn-01-0010  SHORI	Imm16u, Rn
** iiii-iiiiii-iiiiii-0011-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0100-nnnnnn-01-0010  FLDCH	Imm16u, Rn
** iiii-iiiiii-iiiiii-0100-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0101-nnnnnn-01-0010  LEA.Q	(GP, Disp16u), Rn
** iiii-iiiiii-iiiiii-0101-nnnnnn-11-0010  MOVU.L	(GP, Disp16u*4), Rn	//LWU
** iiii-iiiiii-iiiiii-0110-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-0110-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0111-jjjjjj-k1-00Pw / BRA		(PC, Disp23s)	//J lbl
** iiii-iiiiii-iiiiii-1000-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1001-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1010-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1011-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1100-nnnnnn-01-0010  MOV.Q	Rn, (GP, Disp16u*8)	//SD
** iiii-iiiiii-iiiiii-1100-nnnnnn-11-0010  MOV.L	Rn, (GP, Disp16u*4)	//SW
** iiii-iiiiii-iiiiii-1101-nnnnnn-01-0010  MOV.Q	(GP, Disp16u*8), Rn	//LD
** iiii-iiiiii-iiiiii-1101-nnnnnn-11-0010  MOV.L	(GP, Disp16u*4), Rn	//LW
** iiii-iiiiii-iiiiii-1110-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1110-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-1111-jjjjjj-k1-00Pw / BSR		(PC, Disp23s)	//JAL lbl

BRA/BSR:
* bits (1:0) are understood as 0.
* i field gives (17: 2)
* j field gives (23:18)
* k field gives (33:24), as a sign-extension bit

The BRA/BSR encoding has been moved back to the F0 Block.

FLDCH:
* Nominally loads a Binary16 value.
* If Rn==R2, it is a BREAK with an Index.

* With Jumbo-FF Prefix:
** iiii-iiiiii-iiiiii-0000-nnnnnn-s1-0010  LDI		Imm33s, Rn
** iiii-iiiiii-iiiiii-0001-nnnnnn-s1-0010  -
** iiii-iiiiii-iiiiii-0010-nnnnnn-s1-0010  ADD		Imm33s, Rn
** iiii-iiiiii-iiiiii-0011-nnnnnn-01-0010  SHORI32	Imm32u, Rn
** iiii-iiiiii-iiiiii-0011-nnnnnn-11-0010  LDIHI32	Imm32u, Rn
** iiii-iiiiii-iiiiii-0100-nnnnnn-01-0010  FLDCF	Imm32u, Rn
** iiii-iiiiii-iiiiii-0100-nnnnnn-11-0010  PLDCH	Imm32u, Rn

** iiii-iiiiii-iiiiii-0101-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-0101-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0110-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-0110-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-0111-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-0111-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-1000-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1001-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1010-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1011-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1100-nnnnnn-01-0010  ? PLDCM8SH	Imm32u, Rn
** iiii-iiiiii-iiiiii-1100-nnnnnn-11-0010  ? PLDCM8UH	Imm32u, Rn
** iiii-iiiiii-iiiiii-1101-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1101-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-1110-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1110-nnnnnn-11-0010  -
** iiii-iiiiii-iiiiii-1111-nnnnnn-01-0010  -
** iiii-iiiiii-iiiiii-1111-nnnnnn-11-0010  -



=== F0 Block, 2R Space ===

Much of these can be considered optional.

** F0nm_1ez8
*** 1000-000000-mmmmmm-0001-nnnnnn-00-0010  BNDCHK.B	Rm, Rn
*** 1000-000000-mmmmmm-0001-nnnnnn-10-0010  -
*** 1000-000001-mmmmmm-0001-nnnnnn-00-0010  BNDCHK.W	Rm, Rn
*** 1000-000001-mmmmmm-0001-nnnnnn-10-0010  -
*** 1000-000010-mmmmmm-0001-nnnnnn-00-0010  BNDCHK.L	Rm, Rn
*** 1000-000010-mmmmmm-0001-nnnnnn-10-0010  -
*** 1000-000011-mmmmmm-0001-nnnnnn-00-0010  BNDCHK.Q	Rm, Rn
*** 1000-000011-mmmmmm-0001-nnnnnn-10-0010  -

*** 1000-000100-mmmmmm-0001-nnnnnn-00-0010  BNDCHK		RmImm6u, Rn
*** 1000-000100-mmmmmm-0001-nnnnnn-10-0010  MULU.X		Xm, Xn
*** 1000-000101-mmmmmm-0001-nnnnnn-00-0010  BNDCMP		RmImm6u, Rn
*** 1000-000101-mmmmmm-0001-nnnnnn-10-0010  MULHU.X	Xm, Xn
*** 1000-000110-mmmmmm-0001-nnnnnn-00-0010  VSKG		Rm, Rn
*** 1000-000110-mmmmmm-0001-nnnnnn-10-0010  DIVU.X		Xm, Xn
*** 1000-000111-mmmmmm-0001-nnnnnn-00-0010  VSKC		Rm, Rn
*** 1000-000111-mmmmmm-0001-nnnnnn-10-0010  REMU.X		Xm, Xn

*** 1000-001000-mmmmmm-0001-nnnnnn-00-0010  BCDADC		Rm, Rn
*** 1000-001000-mmmmmm-0001-nnnnnn-10-0010  BCDADCX		Xm, Xn
*** 1000-001001-mmmmmm-0001-nnnnnn-00-0010  BCDSBB		Rm, Rn
*** 1000-001001-mmmmmm-0001-nnnnnn-10-0010  BCDSBBX		Xm, Xn
*** 1000-001010-mmmmmm-0001-nnnnnn-00-0010  MOVZT		Rm, Rn
*** 1000-001010-mmmmmm-0001-nnnnnn-10-0010  XMOVZT		Xm, Xn
*** 1000-001011-mmmmmm-0001-nnnnnn-00-0010  SNIPEDC		Rm, Rn
*** 1000-001011-mmmmmm-0001-nnnnnn-10-0010  SNIPEIC		Rm, Rn
*** 1000-001100-mmmmmm-0001-nnnnnn-00-0010  CMPTAEQ		Rm, Rn
*** 1000-001100-mmmmmm-0001-nnnnnn-10-0010  CMPXEQ		Rm, Rn
*** 1000-001101-mmmmmm-0001-nnnnnn-00-0010  CMPTAHI		Rm, Rn
*** 1000-001101-mmmmmm-0001-nnnnnn-10-0010  CMPXHI		Rm, Rn
*** 1000-001110-mmmmmm-0001-nnnnnn-00-0010  CMPTAHS		Rm, Rn
*** 1000-001110-mmmmmm-0001-nnnnnn-10-0010  CMPXGT		Rm, Rn
*** 1000-001111-mmmmmm-0001-nnnnnn-00-0010  CONVFXI		Rm, Rn
*** 1000-001111-mmmmmm-0001-nnnnnn-10-0010  CONVFLI		Rm, Rn

** F0nm_1ez9
*** 1001-000010-mmmmmm-0001-nnnnnn-00-0010 ? ADC		Rm, Rn
*** 1001-000010-mmmmmm-0001-nnnnnn-10-0010 ? ADC.L		Rm, Rn
*** 1001-000011-mmmmmm-0001-nnnnnn-00-0010 ? SBB		Rm, Rn
*** 1001-000011-mmmmmm-0001-nnnnnn-10-0010 ? SBB.L		Rm, Rn
*** 1001-000100-mmmmmm-0001-nnnnnn-00-0010 ? TST.L		Rm, Rn
*** 1001-000100-mmmmmm-0001-nnnnnn-10-0010 ? TST.Q		Rm, Rn

*** 1001-001000-mmmmmm-0001-nnnnnn-00-0010  MOV			Rm, Rn
*** 1001-001000-mmmmmm-0001-nnnnnn-10-0010  MOVX		Rm, Rn
*** 1001-001001-mmmmmm-0001-nnnnnn-00-0010  -
*** 1001-001001-mmmmmm-0001-nnnnnn-10-0010 ? CMPNANTEQ	RmImm6u, Rn
*** 1001-001010-mmmmmm-0001-nnnnnn-00-0010  MOV			Rm, Cn
*** 1001-001010-mmmmmm-0001-nnnnnn-10-0010  SETTRAP		Rn, (Rm)
*** 1001-001011-mmmmmm-0001-nnnnnn-00-0010  MOV			Cm, Rn
*** 1001-001011-mmmmmm-0001-nnnnnn-10-0010 ? CMPTTEQ	RmImm6u, Rn

** F0nm_1ezA  (GSV Block)
*** 1010-000000-mmmmmm-0001-nnnnnn-00-0010  PSTCF8H		Rm, Rn
*** 1010-000000-mmmmmm-0001-nnnnnn-10-0010  -
*** 1010-000001-mmmmm
m-0001-nnnnnn-00-0010  PLDCF8H		Rm, Rn
*** 1010-000001-mmmmmm-0001-nnnnnn-10-0010  -

*** 1010-001001-mmmmmm-0001-nnnnnn-00-0010  ? PDOTT.H	Imm6u, Rn
*** 1010-001001-mmmmmm-0001-nnnnnn-10-0010  ? PDOTT.F	Imm6u, Rn
*** 1010-001010-mmmmmm-0001-nnnnnn-00-0010  ? PCMPEQ.H	Rm, Rn
*** 1010-001010-mmmmmm-0001-nnnnnn-10-0010  ? PCMPEQ.F	Rm, Rn
*** 1010-001011-mmmmmm-0001-nnnnnn-00-0010  ? PCMPGT.H	Rm, Rn
*** 1010-001011-mmmmmm-0001-nnnnnn-10-0010  ? PCMPGT.F	Rm, Rn

*** 1010-001100-mmmmmm-0001-nnnnnn-00-0010  ? PCMPEQ.W	Rm, Rn
*** 1010-001100-mmmmmm-0001-nnnnnn-10-0010  ? PCMPEQ.L	Rm, Rn
*** 1010-001101-mmmmmm-0001-nnnnnn-00-0010  ? PCMPHI.W	Rm, Rn
*** 1010-001101-mmmmmm-0001-nnnnnn-10-0010  ? PCMPHI.L	Rm, Rn
*** 1010-001110-mmmmmm-0001-nnnnnn-00-0010  ? PCMPGT.W	Rm, Rn
*** 1010-001110-mmmmmm-0001-nnnnnn-10-0010  ? PCMPGT.L	Rm, Rn
*** 1010-001111-mmmmmm-0001-nnnnnn-00-0010  ? BSWAPU.L	Rm, Rn
*** 1010-001111-mmmmmm-0001-nnnnnn-10-0010  ? BSWAP.Q	Rm, Rn

** F0nm_1ezC
*** 1100-000000-mmmmmm-0001-nnnnnn-00-0010  NOT			Rm, Rn
*** 1100-000000-mmmmmm-0001-nnnnnn-10-0010  NOTX		Xm, Xn
*** 1100-000001-mmmmmm-0001-nnnnnn-00-0010  ? NEG		Rm, Rn
*** 1100-000001-mmmmmm-0001-nnnnnn-10-0010  ? NEGX		Xm, Xn
*** 1100-000010-mmmmmm-0001-nnnnnn-00-0010  CLZ.L		Rm, Rn
*** 1100-000010-mmmmmm-0001-nnnnnn-10-0010  CLZ.Q		Rm, Rn
*** 1100-000011-mmmmmm-0001-nnnnnn-00-0010  CTZ.L		Rm, Rn
*** 1100-000011-mmmmmm-0001-nnnnnn-10-0010  CTZ.Q		Rm, Rn

*** 1100-000100-mmmmmm-0001-nnnnnn-00-0010  BTRNS.L		Rm, Rn
*** 1100-000100-mmmmmm-0001-nnnnnn-10-0010  BTRNS.Q		Rm, Rn
*** 1100-000101-mmmmmm-0001-nnnnnn-00-0010  EXTS.L		Rm, Rn
*** 1100-000101-mmmmmm-0001-nnnnnn-10-0010  EXTU.L		Rm, Rn

*** 1100-001000-mmmmmm-0001-nnnnnn-00-0010  EXTS.B		Rm, Rn
*** 1100-001000-mmmmmm-0001-nnnnnn-10-0010  EXTU.B		Rm, Rn
*** 1100-001001-mmmmmm-0001-nnnnnn-00-0010  EXTS.W		Rm, Rn
*** 1100-001001-mmmmmm-0001-nnnnnn-10-0010  EXTU.W		Rm, Rn

** F0nm_1ezD ? (GFP, GPR FPU, Opt)
*** 1101-000000-mmmmmm-0001-nnnnnn-00-0010  FLDCF		Rm, Rn
*** 1101-000000-mmmmmm-0001-nnnnnn-10-0010  FLDCDX		Rm, Xn
*** 1101-000001-mmmmmm-0001-nnnnnn-00-0010  FLDCHF		Rm, Rn
*** 1101-000001-mmmmmm-0001-nnnnnn-10-0010  -
*** 1101-000010-mmmmmm-0001-nnnnnn-00-0010  FLDCI		Rm, Rn
*** 1101-000010-mmmmmm-0001-nnnnnn-10-0010  FLDCXI		Rm, Xn
*** 1101-000011-mmmmmm-0001-nnnnnn-00-0010  FLDCH		Rm, Rn
*** 1101-000011-mmmmmm-0001-nnnnnn-10-0010  -
*** 1101-000100-mmmmmm-0001-nnnnnn-00-0010  FSTCF		Rm, Rn
*** 1101-000100-mmmmmm-0001-nnnnnn-10-0010  FSTCDX		Xm, Rn
*** 1101-000101-mmmmmm-0001-nnnnnn-00-0010  FSTCHF		Rm, Rn
*** 1101-000101-mmmmmm-0001-nnnnnn-10-0010  -
*** 1101-000110-mmmmmm-0001-nnnnnn-00-0010  FSTCI		Rm, Rn
*** 1101-000110-mmmmmm-0001-nnnnnn-10-0010  FSTCXI		Xm, Rn
*** 1101-000111-mmmmmm-0001-nnnnnn-00-0010  FSTCH		Rm, Rn
*** 1101-000111-mmmmmm-0001-nnnnnn-10-0010   -
*** 1101-001000-mmmmmm-0001-nnnnnn-00-0010  FNEG		Rm, Rn
*** 1101-001000-mmmmmm-0001-nnnnnn-10-0010  -
*** 1101-001001-mmmmmm-0001-nnnnnn-00-0010  FABS		Rm, Rn
*** 1101-001001-mmmmmm-0001-nnnnnn-10-0010  -
*** 1101-001010-mmmmmm-0001-nnnnnn-00-0010  ? FCMPEQ	Rm, Rn
*** 1101-001010-mmmmmm-0001-nnnnnn-10-0010  ? FCMPXEQ	Xm, Xn
*** 1101-001011-mmmmmm-0001-nnnnnn-00-0010  ? FCMPGT	Rm, Rn
*** 1101-001011-mmmmmm-0001-nnnnnn-10-0010  ? FCMPXGT	Xm, Xn
*** 1101-001100-mmmmmm-0001-nnnnnn-00-0010  ? FSQRT		Rm, Rn
*** 1101-001100-mmmmmm-0001-nnnnnn-10-0010  ? FSQRTX	Xm, Xn
*** 1101-001101-mmmmmm-0001-nnnnnn-00-0010  ? FSQRTA	Rm, Rn
*** 1101-001101-mmmmmm-0001-nnnnnn-10-0010  ? FSQRTXA	Xm, Xn
*** 1101-001110-mmmmmm-0001-nnnnnn-00-0010  ? FCMPGE	Rm, Rn
*** 1101-001110-mmmmmm-0001-nnnnnn-10-0010  ? FCMPXGE	Xm, Xn
*** 1101-001111-mmmmmm-0001-nnnnnn-00-0010  FLDCIU		Rm, Rn
*** 1101-001111-mmmmmm-0001-nnnnnn-10-0010  FLDCXIU		Rm, Rn

** F0nm_1ezE ? (RGB 2R Block)
*** 1110-000000-mmmmmm-0001-nnnnnn-00-0010  RGB5SHR1	Rm, Rn
*** 1110-000000-mmmmmm-0001-nnnnnn-10-0010 ? RGB5MINMAX	Rm, Rn
*** 1110-000001-mmmmmm-0001-nnnnnn-00-0010  PMORT.L		Rm, Rn
*** 1110-000001-mmmmmm-0001-nnnnnn-10-0010  PMORT.Q		Rm, Rn
*** 1110-000010-mmmmmm-0001-nnnnnn-00-0010  RGB5PCK32	Rm, Rn
*** 1110-000010-mmmmmm-0001-nnnnnn-10-0010  RGB5PCK64	Rm, Rn
*** 1110-000011-mmmmmm-0001-nnnnnn-00-0010  RGB5UPCK32	Rm, Rn
*** 1110-000011-mmmmmm-0001-nnnnnn-10-0010  RGB5UPCK64	Rm, Rn
*** 1110-000100-mmmmmm-0001-nnnnnn-00-0010  -
*** 1110-000100-mmmmmm-0001-nnnnnn-10-0010  RGB32PCK64	Rm, Rn
*** 1110-000101-mmmmmm-0001-nnnnnn-00-0010  -
*** 1110-000101-mmmmmm-0001-nnnnnn-10-0010  RGB32UPCK64	Rm, Rn
*** 1110-000110-mmmmmm-0001-nnnnnn-00-0010 ? PSHAL.W	Rm, Rn
*** 1110-000110-mmmmmm-0001-nnnnnn-10-0010 ? PSHLL.W	Rm, Rn
*** 1110-000111-mmmmmm-0001-nnnnnn-00-0010 ? PSHAR.W	Rm, Rn
*** 1110-000111-mmmmmm-0001-nnnnnn-10-0010 ? PSHLR.W	Rm, Rn
*** 1110-001000-mmmmmm-0001-nnnnnn-00-0010  PLDCM8SH	Rm, Rn
*** 1110-001000-mmmmmm-0001-nnnnnn-10-0010  PLDCM8UH	Rm, Rn
*** 1110-001001-mmmmmm-0001-nnnnnn-00-0010  PLDCM30AH	Rm, Rn
*** 1110-001001-mmmmmm-0001-nnnnnn-10-0010 ? PLDCXH		Rm, Xn
*** 1110-001010-mmmmmm-0001-nnnnnn-00-0010  PSTCM8SH	Rm, Rn
*** 1110-001010-mmmmmm-0001-nnnnnn-10-0010  PSTCM8UH	Rm, Rn
*** 1110-001011-mmmmmm-0001-nnnnnn-00-0010  PSTCM30AH	Rm, Rn
*** 1110-001011-mmmmmm-0001-nnnnnn-10-0010 ? PSTCXH		Xm, Rn
*** 1110-001100-mmmmmm-0001-nnnnnn-00-0010  PLDCH		Rm, Rn
*** 1110-001100-mmmmmm-0001-nnnnnn-10-0010  PLDCHH		Rm, Rn
*** 1110-001101-mmmmmm-0001-nnnnnn-00-0010  PLDCEHL		Rm, Rn
*** 1110-001101-mmmmmm-0001-nnnnnn-10-0010  PLDCEHH		Rm, Rn
*** 1110-001110-mmmmmm-0001-nnnnnn-00-0010  PSTCH		Rm, Rn
*** 1110-001110-mmmmmm-0001-nnnnnn-10-0010 ? XBLESS		Xm, Xn
*** 1110-001111-mmmmmm-0001-nnnnnn-00-0010 ? MOVST		Rm, Rn
*** 1110-001111-mmmmmm-0001-nnnnnn-10-0010 ? XMOVST		Xm, Xn

** F0nm_1ezF  -
*** 1111-000000-mmmmmm-0001-nnnnnn-00-0010  PCVTSB2HL	Rm, Rn
*** 1111-000000-mmmmmm-0001-nnnnnn-10-0010  PCVTUB2HL	Rm, Rn
*** 1111-000001-mmmmmm-0001-nnnnnn-00-0010  PCVTSB2HH	Rm, Rn
*** 1111-000001-mmmmmm-0001-nnnnnn-10-0010  PCVTUB2HH	Rm, Rn
*** 1111-000010-mmmmmm-0001-nnnnnn-00-0010  PCVTSW2FL	Rm, Rn
*** 1111-000010-mmmmmm-0001-nnnnnn-10-0010  PCVTUW2FL	Rm, Rn
*** 1111-000011-mmmmmm-0001-nnnnnn-00-0010  PCVTSW2FH	Rm, Rn
*** 1111-000011-mmmmmm-0001-nnnnnn-10-0010  PCVTUW2FH	Rm, Rn
*** 1111-000100-mmmmmm-0001-nnnnnn-00-0010  PCVTH2SB	Rm, Rn
*** 1111-000100-mmmmmm-0001-nnnnnn-10-0010  PCVTH2UB	Rm, Rn
*** 1111-000101-mmmmmm-0001-nnnnnn-00-0010  PCVTSW2H	Rm, Rn
*** 1111-000101-mmmmmm-0001-nnnnnn-10-0010  PCVTUW2H	Rm, Rn
*** 1111-000110-mmmmmm-0001-nnnnnn-00-0010  PCVTF2SW	Rm, Rn
*** 1111-000110-mmmmmm-0001-nnnnnn-10-0010  PCVTF2UW	Rm, Rn
*** 1111-000111-mmmmmm-0001-nnnnnn-00-0010  PCVTH2SW	Rm, Rn
*** 1111-000111-mmmmmm-0001-nnnnnn-10-0010  PCVTH2UW	Rm, Rn
*** 1111-001000-mmmmmm-0001-nnnnnn-00-0010  PSQRTA.H	Rm, Rn
*** 1111-001000-mmmmmm-0001-nnnnnn-10-0010  PSQRTUA.H	Rm, Rn
*** 1111-001001-mmmmmm-0001-nnnnnn-00-0010  PSQRTA.F	Rm, Rn
*** 1111-001001-mmmmmm-0001-nnnnnn-10-0010  PSQRTUA.F	Rm, Rn
*** 1111-001010-mmmmmm-0001-nnnnnn-00-0010  PRCPA.H		Rm, Rn
*** 1111-001010-mmmmmm-0001-nnnnnn-10-0010  PRELU.H		Rm, Rn
*** 1111-001011-mmmmmm-0001-nnnnnn-00-0010  PRCPA.F		Rm, Rn
*** 1111-001011-mmmmmm-0001-nnnnnn-10-0010  PRELU.F		Rm, Rn
*** 1111-001100-mmmmmm-0001-nnnnnn-00-0010  PCVTH2AL	Rm, Rn
*** 1111-001100-mmmmmm-0001-nnnnnn-10-0010  RGB5PCKI8	Rm, Rn
*** 1111-001101-mmmmmm-0001-nnnnnn-00-0010  PCVTAL2H	Rm, Rn
*** 1111-001101-mmmmmm-0001-nnnnnn-10-0010  RGB5UPCKI8	Rm, Rn
*** 1111-001110-mmmmmm-0001-nnnnnn-00-0010  FLDCIU.L	Rm, Rn
*** 1111-001110-mmmmmm-0001-nnnnnn-10-0010  FLDCXIU.L	Rm, Xn
*** 1111-001111-mmmmmm-0001-nnnnnn-00-0010  FLDCIS.L	Rm, Rn
*** 1111-001111-mmmmmm-0001-nnnnnn-10-0010  FLDCXIS.L	Rm, Xn


=== Possible 1R Mapping ===

* NMOP-YwYY-nnnn-mmmm ZZZZ-Qnmo-oooo-XXXX (F0/F3/F9)
Repack:
* XXXX-oooooo-mmmmmm-ZZZZ-nnnnnn-QY-YYPw (F0)

*** F020_3gn0  JMP		Rn
*** F021_3gn0  JSR		Rn
*** F02C_3en0  BRA.L	(PC, Rn)	//Branch, DWord Scale
*** F02D_3en0  BSR.L	(PC, Rn)	//Branch, DWord Scale

Decoder switch Rn and Ro fields relative to XG1/XG2 for the 1R and 0R blocks.

*** 0000-000010-000000-0011-nnnnnn-00-0010  JMP		Rn
*** 0000-000010-000001-0011-nnnnnn-00-0010  JSR		Rn

*** 0000-000010-001100-0011-nnnnnn-00-0010  BRA.L	Rn
*** 0000-000010-001101-0011-nnnnnn-00-0010  BSR.L	Rn



=== (Possible) Compacted Instructions ===

* xxxxxxxxxxxxx-yyyyyyyyyyyyy-z1-1100

Where, the Jumbo-FF prefix in predicated space will encode a pair of 13/14 bit instructions. If z is 0, both x and y are in the same encoding space, if z is 1, y will use a different encoding space.

The Rn5 register type will encode R0..R31, whereas Rn3 will encode R8..R15 or R8..R11,R24..R27.

Note that within the paired instructions, both may be assumed to be performed together, and neither may depend on the result of the other. If one instruction modifies a register used as an input by the other instruction, the results are undefined.


Encoding space z=0:
* mmmmmnnnnn000  MOV		Rm5, Rn5
* mmmmmnnnnn001  ADD		Rm5, Rn5
* iiiiinnnnn010  MOV		Imm5s, Rn5
* iiiiinnnnn011  ADD		Imm5s, Rn5
* iiiiinnnnn100  -

* 00mmm00nnn101  SUB		Rm3, Rn3
* 00mmm01nnn101  XOR		Rm3, Rn3
* 00mmm10nnn101  AND		Rm3, Rn3
* 00mmm11nnn101  OR 		Rm3, Rn3

* 01mmm00nnn101  SUBS.L		Rm3, Rn3  //SUBS.L  Rn3, Rm3, Rn3
* 01mmm01nnn101  ADDS.L		Rm3, Rn3  //ADDS.L  Rn3, Rm3, Rn3
* 01mmm10nnn101  SUBU.L		Rm3, Rn3  //SUBU.L  Rn3, Rm3, Rn3
* 01mmm11nnn101  ADDU.L		Rm3, Rn3  //ADDU.L  Rn3, Rm3, Rn3

* 10mmm00nnn101  SHLD.Q		Rm3, Rn3  //SHLD.Q  Rn3, Rm3, Rn3
* 10mmm01nnn101  SHAD.Q		Rm3, Rn3  //SHAD.Q  Rn3, Rm3, Rn3
* 10mmm10nnn101  SHLR.Q		Rm3, Rn3  //SHLR.Q  Rn3, Rm3, Rn3
* 10mmm11nnn101  SHAR.Q		Rm3, Rn3  //SHAR.Q  Rn3, Rm3, Rn3 
* 11mmm00nnn101  SHLD.L		Rm3, Rn3  //SHLD.Q  Rn3, Rm3, Rn3
* 11mmm01nnn101  SHAD.L		Rm3, Rn3  //SHAD.Q  Rn3, Rm3, Rn3
* 11mmm10nnn101  SHLR.L		Rm3, Rn3  //SHLR.Q  Rn3, Rm3, Rn3
* 11mmm11nnn101  SHAR.L		Rm3, Rn3  //SHAR.Q  Rn3, Rm3, Rn3 


* 00mmm00nnn110  ADDS.L		Imm3u, Rn3  //SUBS.L  Rn3, Imm3u, Rn3
* 00mmm01nnn110  ADDU.L		Imm3u, Rn3  //ADDU.L  Rn3, Imm3u, Rn3
* 00mmm10nnn110  -
* 00mmm11nnn110  -
* 01mmm00nnn110  ADDS.L		Imm3n, Rn3  //ADDS.L  Rn3, Imm3n, Rn3
* 01mmm01nnn110  ADDU.L		Imm3n, Rn3  //ADDU.L  Rn3, Imm3n, Rn3
* 01mmm10nnn110  -
* 01mmm11nnn110  -
* 10mmm00nnn110  SHLD.Q		Imm3u, Rn3  //SHLD.Q  Rn3, Imm3u, Rn3
* 10mmm01nnn110  SHAD.Q		Imm3u, Rn3  //SHAD.Q  Rn3, Imm3u, Rn3
* 10mmm10nnn110  SHLD.L		Imm3u, Rn3  //SHLD.Q  Rn3, Imm3u, Rn3
* 10mmm11nnn110  SHAD.L		Imm3u, Rn3  //SHAD.Q  Rn3, Imm3u, Rn3
* 11mmm00nnn110  SHLD.Q		Imm3n, Rn3  //SHLD.Q  Rn3, Imm3n, Rn3
* 11mmm01nnn110  SHAD.Q		Imm3n, Rn3  //SHAD.Q  Rn3, Imm3n, Rn3 
* 11mmm10nnn110  SHLD.L		Imm3n, Rn3  //SHLD.Q  Rn3, Imm3n, Rn3
* 11mmm11nnn110  SHAD.L		Imm3n, Rn3  //SHAD.Q  Rn3, Imm3n, Rn3 

Encoding space z=1:
* dddddnnnnn000  MOV.L		(SP, Disp5u), Rn5
* dddddnnnnn001  MOV.Q		(SP, Disp5u), Rn5
* dddddnnnnn010  MOV.L		Rn5, (SP, Disp5u)
* dddddnnnnn011  MOV.Q		Rn5, (SP, Disp5u)
* ddmmm00nnn100  MOV.L		(Rm3, Disp2u), Rn3
* ddmmm01nnn100  MOV.Q		(Rm3, Disp2u), Rn3
* ddmmm10nnn100  MOV.L		Rn3, (Rm3, Disp2u)
* ddmmm11nnn100  MOV.Q		Rn3, (Rm3, Disp2u) 

* 00mmm00nnn101  MOV.B		(Rm3), Rn3
* 00mmm01nnn101  MOV.W		(Rm3), Rn3
* 00mmm10nnn101  MOV.B		Rn3, (Rm3)
* 00mmm11nnn101  MOV.W		Rn3, (Rm3)
* 01mmm00nnn101  MOVU.B		(Rm3), Rn3
* 01mmm01nnn101  MOVU.W		(Rm3), Rn3
* 01mmm10nnn101  MOVU.L		(Rm3), Rn3
* 01mmm11nnn101  -
