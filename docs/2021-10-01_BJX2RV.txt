BJX2 RISC-V Extension (RVI)
* Adds RISC-V Decoding to BJX2
* For now, will focus on RV64G and RV64GC

SR(27:26):
* 00: BJX2, WEX Disabled
* 10: BJX2, WEX Enabled
* 01: RISC-V, WEX Disabled (RV64IC)
* 11: RISC-V, Reserved

Register Mapping:
* X0 -> ZZR
* X1 -> LR
* X2 -> SP (R15 in BJX2)
* X3 -> GBR
* X4 -> R4
* X5 -> R5
* X6 -> R6
* X7 -> R7
* X8..X13 -> R8..R13
* X14 -> R2
* X15 -> R3
* X16..X31 -> R16..R31

Register Mapping (FPR):
* F0..F31 -> R32..R63


=== Addressing ===

Addressing (Data):
* (47: 0): Linear Address
* (63:48): Pointer Tag Bits

Addressing (PC):
* (47: 0): Linear Address
* (63:48): Caches SR bits for LR
** JALR with X1 or X5 will restore these bits.
** Otherwise, the high 16 bits are ignored by JALR or LD/ST ops.

For BJX2 Cores with the RVI Extension, JMP or JSR with the LSB set will jump into RISC-V Mode. They may jump into either Scalar or WEX Mode.
* x1: Jump to Mode as given in bits (51:50).

With both low-order bits set, the mode bits will be restored similar to what happens with a jump via the link register.


=== FPU ===

The FPU will follow a variation of Zfinx/Zdinx rules:
* FPU Operations will take place in GPRs.
* The FDIV and FSQRT operations will be omitted.
* Floating point Load/Store will be Omitted.
* Denormal As Zero.
* Single Ops will leave high bits in an Undefined state.

FPU Rounding Modes:
* 000: RNE (Round Nearest Even)
* 001: RTZ (Round Towards Zero)
* 010: RDN (Round Down)
* 011: RUP (Round Up)


=== Instruction Listing ===

Immed Types:
* Disp12_I: 12-bit displacement, sign extended, linear bits
** For General ops, these are unscaled Byte displacements.
* Imm12_I: 12-bit immeditate, sign extended, linear bits
* Disp12_S: 12-bit displacement, sign extended, split bits
** High field is (11:5), Low Field is (4:0)
* Disp20_J: 20 bit displacement, sign extended, confetti bits
** Field is divided up (Hi to Low): (20), (10:1), (11), (19:12)
* Imm20_U: 20 bit high immediate, sign extended, linear bits
** This will encode (31:12) as linear bits.
** The low bits will be filled with zeroes.

Listing:
* iiiiiii-iiiii-mmmmm-000-nnnnn-00-00011  LB	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-001-nnnnn-00-00011  LH	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-010-nnnnn-00-00011  LW	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-011-nnnnn-00-00011  LD	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-100-nnnnn-00-00011  LBU	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-101-nnnnn-00-00011  LHU	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-110-nnnnn-00-00011  LWU	Rn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-111-nnnnn-00-00011  LX	Rn, Rm, Disp12_I (BGB)

* iiiiiii-ttttt-mmmmm-000-iiiii-01-00011  SB	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-001-iiiii-01-00011  SH	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-010-iiiii-01-00011  SW	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-011-iiiii-01-00011  SD	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-100-iiiii-01-00011  SBU	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-101-iiiii-01-00011  SHU	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-110-iiiii-01-00011  SWU	Rm, Disp12_S, Rt
* iiiiiii-ttttt-mmmmm-111-iiiii-01-00011  SX	Rm, Disp12_S, Rt (BGB)

* uuuuu00-ttttt-sssss-zzz-nnnnn-10-00011  FMADD.S	Rn, Rs, Rt, Ru
* uuuuu01-ttttt-sssss-zzz-nnnnn-10-00011  FMADD.D	Rn, Rs, Rt, Ru

* ddddddd-ttttt-sssss-000-ddddd-11-00011  BEQ	Rs, Rt, Disp12_B
* ddddddd-ttttt-sssss-001-ddddd-11-00011  BNE	Rs, Rt, Disp12_B
* ddddddd-ttttt-sssss-010-ddddd-11-00011  -
* ddddddd-ttttt-sssss-011-ddddd-11-00011  -
* ddddddd-ttttt-sssss-100-ddddd-11-00011  BLT	Rs, Rt, Disp12_B
* ddddddd-ttttt-sssss-101-ddddd-11-00011  BGE	Rs, Rt, Disp12_B
* ddddddd-ttttt-sssss-110-ddddd-11-00011  BLTU	Rs, Rt, Disp12_B
* ddddddd-ttttt-sssss-111-ddddd-11-00011  BGEU	Rs, Rt, Disp12_B

* iiiiiii-iiiii-mmmmm-zzz-nnnnn-00-00111 (FP LOAD)
* iiiiiii-iiiii-mmmmm-010-nnnnn-00-00111  FLW	Fn, Rm, Disp12_I
* iiiiiii-iiiii-mmmmm-011-nnnnn-00-00111  FLD	Fn, Rm, Disp12_I

* iiiiiii-iiiii-mmmmm-zzz-nnnnn-01-00111 (FP STORE)
* iiiiiii-ttttt-mmmmm-010-iiiii-01-00111  FSW	Rm, Disp12_S, Ft
* iiiiiii-ttttt-mmmmm-011-iiiii-01-00111  FSD	Rm, Disp12_S, Ft

* uuuuu00-ttttt-sssss-zzz-nnnnn-10-00111  FMSUB.S	Rn, Rs, Rt, Ru (F)
* uuuuu01-ttttt-sssss-zzz-nnnnn-10-00111  FMSUB.D	Rn, Rs, Rt, Ru (D)

* ddddddd-ddddd-mmmmm-000-nnnnn-11-00111  JALR		Rn, Rm, Disp12_I

* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-00-01011  (User / Custom 0)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-01-01011  (User / Custom 1)

* uuuuu00-ttttt-sssss-zzz-nnnnn-10-01011  FNMSUB.S	Rn, Rs, Rt, Ru (F)
* uuuuu01-ttttt-sssss-zzz-nnnnn-10-01011  FNMSUB.D	Rn, Rs, Rt, Ru (D)

* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-11-01011  (Reserved)

* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-00-01111  (Fence)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-01-01111  (Atomic)

* 00000al-ooooo-mmmmm-010-nnnnn-01-01111  AMOADD.W		(A)
* 00001al-ooooo-mmmmm-010-nnnnn-01-01111  AMOSWAP.W		(A)
* 00010al-ooooo-mmmmm-010-nnnnn-01-01111  LR.W			(A)
* 00011al-ooooo-mmmmm-010-nnnnn-01-01111  SC.W			(A)
* 00100al-ooooo-mmmmm-010-nnnnn-01-01111  AMOXOR.W		(A)
* 01000al-ooooo-mmmmm-010-nnnnn-01-01111  AMOOR.W		(A)
* 01100al-ooooo-mmmmm-010-nnnnn-01-01111  AMOAND.W		(A)
* 10000al-ooooo-mmmmm-010-nnnnn-01-01111  AMOMIN.W		(A)
* 10100al-ooooo-mmmmm-010-nnnnn-01-01111  AMOMAX.W		(A)
* 11000al-ooooo-mmmmm-010-nnnnn-01-01111  AMOMINU.W		(A)
* 11100al-ooooo-mmmmm-010-nnnnn-01-01111  AMOMAXU.W		(A)

* 00000al-ooooo-mmmmm-011-nnnnn-01-01111  AMOADD.D		(A)
* 00001al-ooooo-mmmmm-011-nnnnn-01-01111  AMOSWAP.D		(A)
* 00010al-ooooo-mmmmm-011-nnnnn-01-01111  LR.D			(A)
* 00011al-ooooo-mmmmm-011-nnnnn-01-01111  SC.D			(A)
* 00100al-ooooo-mmmmm-011-nnnnn-01-01111  AMOXOR.D		(A)
* 01000al-ooooo-mmmmm-011-nnnnn-01-01111  AMOOR.D		(A)
* 01100al-ooooo-mmmmm-011-nnnnn-01-01111  AMOAND.D		(A)
* 10000al-ooooo-mmmmm-011-nnnnn-01-01111  AMOMIN.D		(A)
* 10100al-ooooo-mmmmm-011-nnnnn-01-01111  AMOMAX.D		(A)
* 11000al-ooooo-mmmmm-011-nnnnn-01-01111  AMOMINU.D		(A)
* 11100al-ooooo-mmmmm-011-nnnnn-01-01111  AMOMAXU.D		(A)

* 00110ss-ooooo-mmmmm-ttt-nnnnn-01-01111  Lt Rn, (Rm, Ro)		(BGB: ScIx)
** 00110ss-ttttt-mmmmm-000-nnnnn-01-01111  LB	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-001-nnnnn-01-01111  LH	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-010-nnnnn-01-01111  LW	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-011-nnnnn-01-01111  LD	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-100-nnnnn-01-01111  LBU	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-101-nnnnn-01-01111  LHU	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-110-nnnnn-01-01111  LWU	Rn, (Rm, Rt*Sc)
** 00110ss-ttttt-mmmmm-111-nnnnn-01-01111  LX	Rn, (Rm, Rt*Sc)

* 00111ss-ooooo-mmmmm-ttt-nnnnn-01-01111  St (Rm, Ro), Rn		(BGB: ScIx)
** 00111ss-ttttt-mmmmm-000-nnnnn-01-01111  SB	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-001-nnnnn-01-01111  SH	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-010-nnnnn-01-01111  SW	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-011-nnnnn-01-01111  SD	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-100-nnnnn-01-01111 ? SBU	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-101-nnnnn-01-01111 ? SHU	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-110-nnnnn-01-01111 ? SWU	(Rm, Rt*Sc), Rn
** 00111ss-ttttt-mmmmm-111-nnnnn-01-01111  SX	(Rm, Rt*Sc), Rn

* uuuuu00-ttttt-sssss-zzz-nnnnn-10-01111  FNMADD.S	Rn, Rs, Rt, Ru (F)
* uuuuu01-ttttt-sssss-zzz-nnnnn-10-01111  FNMADD.D	Rn, Rs, Rt, Ru (D)

* ddddddd-ddddd-ddddd-ddd-nnnnn-11-01111  JAL		Rn, Disp20_J


* iiiiiii-iiiii-mmmmm-000-nnnnn-00-10011  ADDI		Rn, Rm, Imm12_I
* 000000i-iiiii-mmmmm-001-nnnnn-00-10011  SLLI		Rn, Rm, Imm12
* 000010i-iiiii-mmmmm-001-nnnnn-00-10011  SLLI.UW	Rn, Rm, Imm12 (ZBA)
* 010010i-iiiii-mmmmm-001-nnnnn-00-10011  BCLRI		Rn, Rm, Imm12 (ZBB)
* iiiiiii-iiiii-mmmmm-010-nnnnn-00-10011  SLTI		Rn, Rm, Imm12_I
* iiiiiii-iiiii-mmmmm-011-nnnnn-00-10011  SLTIU		Rn, Rm, Imm12_I
* iiiiiii-iiiii-mmmmm-100-nnnnn-00-10011  XORI		Rn, Rm, Imm12_I
* 000000i-iiiii-mmmmm-101-nnnnn-00-10011  SRLI		Rn, Rm, Imm12
* 010000i-iiiii-mmmmm-101-nnnnn-00-10011  SRAI		Rn, Rm, Imm12
* 010010i-iiiii-mmmmm-101-nnnnn-00-10011  BEXTI		Rn, Rm, Imm12 (ZBB)
* iiiiiii-iiiii-mmmmm-110-nnnnn-00-10011  ORI		Rn, Rm, Imm12_I
* iiiiiii-iiiii-mmmmm-111-nnnnn-00-10011  ANDI		Rn, Rm, Imm12_I

* 0000000-ttttt-mmmmm-000-nnnnn-01-10011  ADD		Rn, Rm, Rt
* 0100000-ttttt-mmmmm-000-nnnnn-01-10011  SUB		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-000-nnnnn-01-10011  MUL		Rn, Rm, Rt (M)
* 0000000-ttttt-mmmmm-001-nnnnn-01-10011  SLL		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-001-nnnnn-01-10011  MULH		Rn, Rm, Rt (M)
* 0110100-ttttt-mmmmm-001-nnnnn-01-10011  BINV		Rn, Rm, Rt (ZBB)
* 0100100-ttttt-mmmmm-111-nnnnn-01-10011  BCLR		Rn, Rm, Rt (ZBB)
* 0000000-ttttt-mmmmm-010-nnnnn-01-10011  SLT		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-010-nnnnn-01-10011  MULHSU	Rn, Rm, Rt (M)
* 0010000-ttttt-mmmmm-010-nnnnn-01-10011  SH1ADD	Rn, Rm, Rt (ZBA)
* 0000000-ttttt-mmmmm-011-nnnnn-01-10011  SLTU		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-011-nnnnn-01-10011  MULHU		Rn, Rm, Rt (M)
* 0000000-ttttt-mmmmm-100-nnnnn-01-10011  XOR		Rn, Rm, Rt
* 0010000-ttttt-mmmmm-100-nnnnn-01-10011  SH2ADD	Rn, Rm, Rt (ZBA)
* 0000001-ttttt-mmmmm-100-nnnnn-01-10011  DIV		Rn, Rm, Rt (M)
* 0000000-ttttt-mmmmm-101-nnnnn-01-10011  SRL		Rn, Rm, Rt
* 0100000-ttttt-mmmmm-101-nnnnn-01-10011  SRA		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-101-nnnnn-01-10011  DIVU		Rn, Rm, Rt (M)
* 0100100-ttttt-mmmmm-101-nnnnn-01-10011  BEXT		Rn, Rm, Rt (ZBB)
* 0000000-ttttt-mmmmm-110-nnnnn-01-10011  OR		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-110-nnnnn-01-10011  REM		Rn, Rm, Rt (M)
* 0010000-ttttt-mmmmm-110-nnnnn-01-10011  SH3ADD	Rn, Rm, Rt (ZBA)
* 0000000-ttttt-mmmmm-111-nnnnn-01-10011  AND		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-111-nnnnn-01-10011  REMU		Rn, Rm, Rt (M)
* 0100000-ttttt-mmmmm-111-nnnnn-01-10011  ANDN		Rn, Rm, Rt (ZBB)

* 0000000-ttttt-mmmmm-rrr-nnnnn-10-10011  FADD.S	Rn, Rm, Rt
* 0000001-ttttt-mmmmm-rrr-nnnnn-10-10011  FADD.D	Rn, Rm, Rt
* 0000100-ttttt-mmmmm-rrr-nnnnn-10-10011  FSUB.S	Rn, Rm, Rt
* 0000101-ttttt-mmmmm-rrr-nnnnn-10-10011  FSUB.D	Rn, Rm, Rt
* 0001000-ttttt-mmmmm-rrr-nnnnn-10-10011  FMUL.S	Rn, Rm, Rt
* 0001001-ttttt-mmmmm-rrr-nnnnn-10-10011  FMUL.D	Rn, Rm, Rt
* 0001100-ttttt-mmmmm-rrr-nnnnn-10-10011  FDIV.S	Rn, Rm, Rt	//FDIV
* 0001101-ttttt-mmmmm-rrr-nnnnn-10-10011  FDIV.D	Rn, Rm, Rt	//FDIV

* 0010000-ttttt-mmmmm-000-nnnnn-10-10011  FSGNJ.S	Rn, Rm
* 0010000-ttttt-mmmmm-001-nnnnn-10-10011  FSGNJN.S	Rn, Rm
* 0010000-ttttt-mmmmm-010-nnnnn-10-10011  FSGNJX.S	Rn, Rm

* 0010001-ttttt-mmmmm-000-nnnnn-10-10011  FSGNJ.D	Rn, Rm
* 0010001-ttttt-mmmmm-001-nnnnn-10-10011  FSGNJN.D	Rn, Rm
* 0010001-ttttt-mmmmm-010-nnnnn-10-10011  FSGNJX.D	Rn, Rm

* 0010100-ttttt-mmmmm-000-nnnnn-10-10011  FMIN.S	Rn, Rm
* 0010100-ttttt-mmmmm-001-nnnnn-10-10011  FMAX.S	Rn, Rm
* 0010101-ttttt-mmmmm-000-nnnnn-10-10011  FMIN.D	Rn, Rm
* 0010101-ttttt-mmmmm-001-nnnnn-10-10011  FMAX.D	Rn, Rm

* 0100000-00001-mmmmm-rrr-nnnnn-10-10011  FCVT.SD	Rn, Rm
* 0100001-00000-mmmmm-rrr-nnnnn-10-10011  FCVT.DS	Rn, Rm

* 0101100-00000-mmmmm-rrr-nnnnn-10-10011  FSQRT.S	Rn, Rm
* 0101101-00000-mmmmm-rrr-nnnnn-10-10011  FSQRT.D	Rn, Rm

* 1010000-ttttt-mmmmm-000-nnnnn-10-10011  FLE.S		Rn, Rm, Rt
* 1010000-ttttt-mmmmm-001-nnnnn-10-10011  FLT.S		Rn, Rm, Rt
* 1010000-ttttt-mmmmm-010-nnnnn-10-10011  FEQ.S		Rn, Rm, Rt

* 1010001-ttttt-mmmmm-000-nnnnn-10-10011  FLE.D		Rn, Rm, Rt
* 1010001-ttttt-mmmmm-001-nnnnn-10-10011  FLT.D		Rn, Rm, Rt
* 1010001-ttttt-mmmmm-010-nnnnn-10-10011  FEQ.D		Rn, Rm, Rt

* 1100000-00000-mmmmm-rrr-nnnnn-10-10011  FCVT.WS	Rn, Rm
* 1100000-00001-mmmmm-rrr-nnnnn-10-10011  FCVT.WSU	Rn, Rm
* 1100000-00010-mmmmm-rrr-nnnnn-10-10011  FCVT.L.S	Rn, Rm
* 1100000-00011-mmmmm-rrr-nnnnn-10-10011  FCVT.LU.S	Rn, Rm

* 1100001-00000-mmmmm-rrr-nnnnn-10-10011  FCVT.WD	Rn, Rm
* 1100001-00001-mmmmm-rrr-nnnnn-10-10011  FCVT.WDU	Rn, Rm
* 1100001-00010-mmmmm-rrr-nnnnn-10-10011  FCVT.L.D	Rn, Rm
* 1100001-00011-mmmmm-rrr-nnnnn-10-10011  FCVT.LU.D	Rn, Rm

* 1101000-00000-mmmmm-rrr-nnnnn-10-10011  FCVT.SW	Rn, Rm
* 1101000-00001-mmmmm-rrr-nnnnn-10-10011  FCVT.SWU	Rn, Rm
* 1101000-00010-mmmmm-rrr-nnnnn-10-10011  FCVT.S.L	Rn, Rm
* 1101000-00011-mmmmm-rrr-nnnnn-10-10011  FCVT.S.LU	Rn, Rm

* 1101001-00000-mmmmm-rrr-nnnnn-10-10011  FCVT.DW	Rn, Rm
* 1101001-00001-mmmmm-rrr-nnnnn-10-10011  FCVT.DWU	Rn, Rm
* 1101001-00010-mmmmm-rrr-nnnnn-10-10011  FCVT.D.L	Rn, Rm
* 1101001-00011-mmmmm-rrr-nnnnn-10-10011  FCVT.D.LU	Rn, Rm

* 1110000-00000-mmmmm-rrr-nnnnn-10-10011  FMV.X.W	Rn, Rm
* 1110001-00000-mmmmm-rrr-nnnnn-10-10011  FMV.X.D	Rn, Rm

* 1111000-00000-mmmmm-rrr-nnnnn-10-10011  FMV.W.X	Rn, Rm
* 1111001-00000-mmmmm-rrr-nnnnn-10-10011  FMV.D.X	Rn, Rm

* ddddddd-ddddd-ddddd-ddd-nnnnn-11-10011  (SYSTEM)

* 0000000-00000-00000-000-00000-11-10011  ECALL			(Priv)
* 0000000-00001-00000-000-00000-11-10011  EBREAK		(Priv)
* 0000000-00010-00000-000-00000-11-10011  URET			(Priv)
* 0001000-00010-00000-000-00000-11-10011  SRET			(Priv)
* 0011000-00010-00000-000-00000-11-10011  MRET			(Priv)
* 0000000-00101-00000-000-00000-11-10011  WFI			(Priv)

* iiiiiii-iiiii-mmmmm-001-nnnnn-11-10011  CSRRW			(Priv)
* iiiiiii-iiiii-mmmmm-010-nnnnn-11-10011  CSRRS			(Priv)
* iiiiiii-iiiii-mmmmm-011-nnnnn-11-10011  CSRRC			(Priv)
* iiiiiii-iiiii-mmmmm-100-nnnnn-11-10011  -
* iiiiiii-iiiii-mmmmm-101-nnnnn-11-10011  CSRRWI		(Priv)
* iiiiiii-iiiii-mmmmm-110-nnnnn-11-10011  CSRRSI		(Priv)
* iiiiiii-iiiii-mmmmm-111-nnnnn-11-10011  CSRRCI		(Priv)

* ddddddd-ddddd-ddddd-ddd-nnnnn-00-10111  AUIPC		Rn, Disp20_U

* iiiiiii-iiiii-iiiii-iii-nnnnn-01-10111  LUI		Rn, Imm20_U

* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-10-10111  (Reserved)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-11-10111  (Reserved)

* iiiiiii-iiiii-mmmmm-000-nnnnn-00-11011  ADDIW		Rn, Rm, Imm12_I
* 000000i-iiiii-mmmmm-001-nnnnn-00-11011  SLLIW		Rn, Rm, Imm12
* iiiiiii-iiiii-mmmmm-010-nnnnn-00-11011  -
* iiiiiii-iiiii-mmmmm-011-nnnnn-00-11011  -
* 0iiiiii-iiiii-jjjjj-100-kkkkk-00-11011  J21_IMM	(BGB)
* 1iiiiii-iiiii-zzzzz-100-omnpp-00-11011  J21_OP	(BGB)
* 000000i-iiiii-mmmmm-101-nnnnn-00-11011  SRLIW		Rn, Rm, Imm12_I
* 010000i-iiiii-mmmmm-101-nnnnn-00-11011  SRAIW		Rn, Rm, Imm12_I
* 0iiiiii-iiiii-iiiii-110-nnnnn-00-11011  ? SHORI	Rn, Imm16u (BGB)
* 1iiiiii-iiiii-iiiii-110-nnnnn-00-11011  ? FLDCH	Rn, Imm17s (BGB)
* iiiiiii-iiiii-iiiii-111-nnnnn-00-11011  ? LI		Rn, Imm17s (BGB)

* 0000000-ttttt-mmmmm-000-nnnnn-01-11011  ADDW		Rn, Rm, Rt
* 0000100-ttttt-mmmmm-000-nnnnn-01-11011  ADDUW		Rn, Rm, Rt
* 0100000-ttttt-mmmmm-000-nnnnn-01-11011  SUBW		Rn, Rm, Rt
* 0100100-ttttt-mmmmm-000-nnnnn-01-11011 ? SUBUW	Rn, Rm, Rt	(BGB)

* 0000001-ttttt-mmmmm-000-nnnnn-01-11011  MULW		Rn, Rm, Rt (M, M lite)
* 0000000-ttttt-mmmmm-001-nnnnn-01-11011  SLLW		Rn, Rm, Rt
* 0000000-ttttt-mmmmm-010-nnnnn-01-11011  -
* 0000001-ttttt-mmmmm-010-nnnnn-01-11011  DMULSW	Rn, Rm, Rt (BGB)
* 0010000-ttttt-mmmmm-010-nnnnn-01-11011  SH1ADD.UW	Rn, Rm, Rt (ZBA)
* 0000000-ttttt-mmmmm-011-nnnnn-01-11011  -
* 0000001-ttttt-mmmmm-011-nnnnn-01-11011  DMULUW	Rn, Rm, Rt (BGB)
* 0000000-ttttt-mmmmm-100-nnnnn-01-11011  -
* 0000001-ttttt-mmmmm-100-nnnnn-01-11011  DIVW		Rn, Rm, Rt (M)
* 0010000-ttttt-mmmmm-100-nnnnn-01-11011  SH2ADD.UW	Rn, Rm, Rt (ZBA)
* 0000000-ttttt-mmmmm-101-nnnnn-01-11011  SRLW		Rn, Rm, Rt
* 0100000-ttttt-mmmmm-101-nnnnn-01-11011  SRAW		Rn, Rm, Rt
* 0000001-ttttt-mmmmm-101-nnnnn-01-11011  DIVUW		Rn, Rm, Rt (M)
* 0000000-ttttt-mmmmm-110-nnnnn-01-11011  -
* 0000001-ttttt-mmmmm-110-nnnnn-01-11011  REMW		Rn, Rm, Rt (M)
* 0010000-ttttt-mmmmm-110-nnnnn-01-11011  SH3ADD.UW	Rn, Rm, Rt (ZBA)
* 0000000-ttttt-mmmmm-111-nnnnn-01-11011  -
* 0000001-ttttt-mmmmm-111-nnnnn-01-11011  REMUW		Rn, Rm, Rt (M)

* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-10-11011  (User / Custom 2)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-11-11011  (User / Custom 3)


* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-00-111xx  (48b, Unused)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-01-111xx  (64b, Unused)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-10-111xx  (48b, Unused)
* zzzzzzz-ooooo-mmmmm-zzz-nnnnn-11-111xx  (80b, Unused)

...


=== Jumbo Encodings ===

* tiiiiii-iiiii-jjjjj-100-kkkkk-00-11011  J22	(Prefix, BGB)
* 0iiiiii-iiiii-jjjjj-100-kkkkk-00-11011  J21I	(Prefix, BGB)
* 1iiiiii-iiiii-zzzzz-100-omnpp-00-11011  J21O	(Prefix, BGB)
* tiiiiii-iiiii-zzzzz-100-sZnpp-00-11011  J12O	(Prefix, BGB)

The J21I will be a prefix op, which will combine with the following instruction.
* An Imm12 field will be expanded to 33 bits.
** The second instruction will provide (32) and (10:0)
** The i field will provide (21:11)
** The j field will provide (26:22)
** The k field will provide (31:27)

The J21O prefix will also combine with Imm12 ops:
* The immediate field will be 22 bits;
* The register fields will expand to 6 bits.

If combined with LUI or AUIPC:
* Will be understood as a J12O.
* The t and i fields will be filled into the low 12 bits.
* The high 20 bits will be taken from the LUI or AUIPC.
* The s field will be taken as a sign extension bit.

If two prefixes are combined with a LUI:
* Interpreted as J22.
* Second prefix	(31:20) gives (11: 0)
* Instruction	(31:12) gives (31:12)
* Second Prefix	(19:15) gives (36:32)
* Second Prefix (11: 7) gives (41:37)
* First Prefix (   31) gives (   42)
* First Prefix (30:20) gives (53:43)
* First Prefix (19:15) gives (58:54)
* First Prefix (11: 7) gives (63:59)


