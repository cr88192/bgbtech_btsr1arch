BJX2 for now will use a 32-bit address space sign-extended to 64 bits.


Base Physical Memory Map (32-bit, Old):
* 00000000 .. 00007FFF: Boot ROM
* 00008000 .. 0000BFFF: (Reserved)
* 0000C000 .. 0000DFFF: Boot SRAM
* 0000E000 .. 0000FFFF: Reserved
* 00010000 .. 000FFFFF: Reserved
* 00100000 .. 00FFFFFF: Reserved
* 01000000 .. 7FFFFFFF: DRAM
* 80000000 .. 9FFFFFFF: System (MMU Range 00000000..1FFFFFFF)
* A0000000 .. BFFFFFFF: MMIO (No MMU, Bypass)
* C0000000 .. DFFFFFFF: System (No MMU, Repeats 00000000..1FFFFFFF)
* E0000000 .. FFFFFFFF: Reserved for Processor/Chipset

Logical Memory Map (32-bit, Old):
* 00000000 .. 7FFFFFFF: Userland (MMU)
* 80000000 .. 9FFFFFFF: System (MMU)
* A0000000 .. BFFFFFFF: MMIO (No MMU, Bypass)
* C0000000 .. DFFFFFFF: System (No MMU, Repeats 00000000..1FFFFFFF)
* E0000000 .. FFFFFFFF: Reserved for Processor/Chipset

Base Physical Memory Map (32-bit, New):
* 00000000 .. 00007FFF: Boot ROM
* 00008000 .. 0000BFFF: (Reserved)
* 0000C000 .. 0000DFFF: Boot SRAM
* 0000E000 .. 0000FFFF: Reserved
* 00010000 .. 000FFFFF: Reserved
* 00100000 .. 00FFFFFF: Reserved
* 01000000 .. 7FFFFFFF: DRAM
* 80000000 .. EFFFFFFF: Reserved
* F0000000 .. FFFFFFFF: MMIO (No MMU, Bypass)
** F0000000 .. FEFFFFFF: MMIO / Chipset
** FF000000 .. FFFFFFFF: Memory Mapped Registers

Logical Memory Map (32-bit, New):
* 00000000 .. 7FFFFFFF: Userland (MMU)
* 80000000 .. EFFFFFFF: System (MMU)
* F0000000 .. FFFFFFFF: MMIO (No MMU, Bypass)

The System MMU range will be functionally equivalent to the Userland MMU space in terms of how they are treated by the MMU. There may be a difference based on where the TTB/STTB split is located when both page tables are used.


Addresses in the MMIO ranges will "bypass" the normal memory access mechanisms and go directly to the MMIO Bus.

Addresses in the MMIO range will be masked to 28 bits, which will be used as the corresponding address on the MMIO Bus.


Extended 64-bit Memory Map (Old)
* 00000000_00000000 .. 00000000_7FFFFFFF: Userland (MMU, Low 2GB)
* 00000000_80000000 .. 00000000_FFFFFFFF: Maps 32-bit Base Map
* 00000001_00000000 .. 00007FFF_FFFFFFFF: Userland (MMU, Extended)
* 00008000_00000000 .. 7FFFFFFF_FFFFFFFF: Reserved (No Man's Land)
* 80000000_00000000 .. FFFF7FFF_FFFFFFFF: Reserved (No Man's Land)
* FFFF8000_00000000 .. FFFF9FFF_FFFFFFFF: System (MMU, Extended)
* FFFFA000_00000000 .. FFFFBFFF_FFFFFFFF: Extended MMIO (Bypass)
* FFFFC000_00000000 .. FFFFDFFF_FFFFFFFF: System (No MMU, Repeats Low 48)
* FFFFE000_00000000 .. FFFFFFFE_FFFFFFFF: Reserved (Processor/Chipset)
* FFFFFFFF_00000000 .. FFFFFFFF_7FFFFFFF: System (MMU, Low 2GB)
* FFFFFFFF_80000000 .. FFFFFFFF_FFFFFFFF: Maps 32-bit Base Map

Extended 64-bit Memory Map (New)
* 00000000_00000000 .. 00000000_7FFFFFFF: Userland (MMU, Low 2GB)
* 00000000_80000000 .. 00000000_FFFFFFFF: Maps 32-bit Base Map
* 00000001_00000000 .. 00007FFF_FFFFFFFF: Userland (MMU, Extended)
* 00008000_00000000 .. 7FFFFFFF_FFFFFFFF: Reserved (No Man's Land)
* 80000000_00000000 .. FFFF7FFF_FFFFFFFF: Reserved (No Man's Land)
* FFFF8000_00000000 .. FFFFEFFF_FFFFFFFF: System (MMU)
* FFFFF000_00000000 .. FFFFFFFE_FFFFFFFF: Extended MMIO
* FFFFFFFF_00000000 .. FFFFFFFF_7FFFFFFF: System (MMU, Low 2GB)
* FFFFFFFF_80000000 .. FFFFFFFF_FFFFFFFF: Maps 32-bit Base Map


On boot, VBR will be initialized to the start of ROM.
Entry point will also be at the start of ROM.

VBR will contain several Vectors:
  VBR+0x00: Boot/Reset
  VBR+0x08: Runtime Exception
  VBR+0x10: Hardware Interrupt
  VBR+0x18: MMU/TLB Miss/Fault
  VBR+0x20: Syscall

On an interrupt, control will be transferred to an address relative to VBR. This address may then encode a branch to wherever is the start of the ISR.


MMIO Space:

* 0000E000 (R): 1MHz Timer Low
* 0000E004 (R): 1MHz Timer High

* 0000E008(R): PIT Current Value (Clock Cycles)
** Counts down and then triggers an interrupt once it reaches zero.
* 0000E00C(R/W): PIT Reset Value (Clock Cycles)
** Value which is loaded into the counter when the interrupt fires.

* 0000E010(R): Debug Uart RX
* 0000E014(W): Debug Uart TX
* 0000E018(R): Debug Uart Status
** Bit 0: Input Ready
** Bit 1: Input Buffer Full
** Bit 2: Output Buffer Empty
** Bit 3: Output Buffer Full
** Bit 4: Interrupt Status
** Bit 5: Buffer Overrun
** Bit 6: Frame Error
** Bit 7: Parity Error
* E01C(W): Debug Uart Control
** Bit 0: Clear Transmit
** Bit 1: Clear Recieve
** Bit 4: Enable Interrupt

* 0000E020(W): SPI Slave Control
* 0000E024(R/W): SPI Slave Data

* 0000E030(W): SPI Slave Control
* 0000E034(R/W): SPI Slave Data

* 0000E040(R): PS2 KB RX
* 0000E044(R): PS2 KB TX
* 0000E048(R): PS2 KB Status

* 0000E050(R): PS2 Mouse RX
* 0000E054(R): PS2 Mouse TX
* 0000E058(R): PS2 Mouse Status

* 0000E100(R): GPIO In
* 0000E104(R/W): GPIO Out
* 0000E108(R/W): GPIO Direction
* 0000E110(W): GPIO Set (Out=Out|Val)
* 0000E114(W): GPIO Clear (Out=Out&(~Val))

* 00080000 .. 00080FFF: Audio Loop Buffer / Registers

* 000A0000 .. 000BFFFF: Reserved for Display Memory (Bypass)
** 000A0000 .. 000BEFFF: Framebuffer Memory
** 000BF000 .. 000BFEFF: Control SRAM
** 000BFF00 .. 000BFFFF: Display Control Registers

=== MMU ===

The MMU will consist of a semi-exposed TLB Mechanism.

During a TLB Miss Exception, the ISR is to fetch the relevant data from the Page Table and load it into the TLB.

The TLB will be loaded via the LDTLB instruction, which will load the 128 bit entry from the DHR:DLR pair.

TLB Entry:
* (127:112) = VUGID
* (111: 76) = Virtual Address Page
* ( 75: 64) = KR Access
* ( 63: 48) = Available
* ( 47: 12) = Physical Address Page
* ( 11:  0) = Page Control bits

VUGID:
* (15:10) = VGID
* ( 9: 0) = VUID

KR Access:
* (11): Other X
* (10): Other W
* ( 9): Other R
* ( 8): Group X
* ( 7): Group W
* ( 6): Group R
* ( 5): User X
* ( 4): User W
* ( 3): User R
* ( 2): VUGID Enable 2
* ( 1): VUGID Enable 1
* ( 0): VUGID Enable 0

If Keyring Check is Enabled, VUGID Enable will have several modes:
* 000: Access Check Always Fails (Access Fault)
* 001: Perform VUGID Check, Access Check is Pass or Fail (Access Fault).
* 010: Always Generate ACL Check Exception
* 011: Perform VUGID Check, Generate ACL Check on Fail.
* 100: Reserved
* 101: Reserved
* 110: Reserved
* 111: Reserved

If Keyring Check is Disabled, VUGID access checks are ignored (Always Pass).
* Only the normal page access checks are used.

Note that Keyring checks are placed after normal page access checks, so with Keyring access enabled, both the Normal and Keyring checks are required to allow access to the page.



Page Control:
* ( 9): PR.U1 (User 1)
* ( 8): PR.U0 (User 0)
* ( 9): PR.S1 (Size 1)
* ( 8): PR.S0 (Size 0)
* ( 7): PR.NU (Not User Accessible)
** Disallow access from User Mode.
* ( 6): PR.NX (Execute Disable)
** Page may not be executed.
* ( 5): PR.NW (Write Disable)
** Page may not be written to.
* ( 4): PR.NR (Read Disable)
** Page may not be read from.
* ( 3): Page Is Non-Cachable
** Set to indicate accesses to page will bypass cache.
* ( 2): PR.D, (Dirty)
** Set if page has been modified.
* ( 1): PR.SH, Page Is Shared
* ( 0): PR.V, Page Is Valid

Size 0/1:
* 00: 4kB Page (Single Page)
* 01: 2MB Page (512 Pages)
* 10: 64kB Page (16 Pages)
* 11: 1GB Page (256K Pages)


Keyring checks are enabled via the Keyring Register (KRR):
* This register is interpreted as four 16-bit word values.
** Each holds a VUGID pair.
* If the low 16 bits are zero, Keyring Check is disabled.
* If the other words are zero, they are ignored.

The keyring values are compared against the VUGID value in the TLB:
* Both Match: Check using User RWX bits.
* VGID Matches: Check using Group RWX bits.
* Otherwise: Check using Other RWX bits.

If any of the four keys will allow the requested access, access will pass.
* Otherwise, if ACL Check is set, generate an ACL Check Exception.
* Otherwise, generate an Access Fault Exception.


Page Table Entries:
* ( 63: 48) = VUGID Table Index
* ( 47: 12) = Physical Address Page
* ( 11:  0) = Page Control bits


There will be a User Page Table (TTB) and a System Page Table (STTB).
Whether STTB is used, and what page-table type is assumed, will depend on the low bits in TTB.

The low 2 bits (1:0) of TTB will give the main page-table type:
* 00: None / Invalid
* 01: Two-level, 32-bit PTE; Single Page Table.
* 10: Three-Level, 64-bit PTE, 39-bit address.
* 11: Four-Level, 64-bit PTE, 48-bit address.

The next two bits (3:2) will give the type of STTB table:
* 00: None, Reuse TTB.
* 01: Use Two-Level STTB.
* 10: Use Three-Level STTB.
* 11: Use Four-Level STTB.

The next 2 bits (5:4) will give the TTB/STTB split for the low 4GB:
* 00: 2GB/2GB split (default).
* 01: 3GB/1GB split.
* 10: 4GB Userland (STTB only used for 48b addresses)
* 11: Reserved

TTB bits 11:6 will be reserved.


MMCR Bits:
* 0001: Enable TLB
** Enables the use of page-level translation via the TLB.
** If clear, direct physical addressing is used.
* 0004: User-mode uses 32-bit addressing.
* 0008: System-mode uses 32-bit addressing.
