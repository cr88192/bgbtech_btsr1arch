* This is a spec for the Fixed-length 32-bit subset of BJX2.
* Some information here is will be redundant with the main spec.
** The main spec will take precedence in the case of conflict.


== Overview ==

Registers
* R0..R31, GPRs
** R0=DLR
** R1=DHR
** R15=SP
* C0..C31, Control Registers
** C0=PC (U): Program Counter
** C1=LR (U): Link Register
** C2=SR (U=R/O): Status Register.
** C3=VBR (S): Vector Base Register.
** C6=GBR (U): Global Base Register
** C7=TBR (U=R/O): Thread Base Register (System).
** C8=TTB (S): Translation Table Base.
** C9=TEA (S): Translation Effective Address.
** C10=MMCR (S): MMU Control Register
** C11=EXSR (S): Exception Status Register.
** C12=STTB (S): System TTB.
** C13=KRR (S): MMU Keyring Register.

* S0..S31, Shadow Registers
** S0..S15: R0B..R7B, C0B..C7B
** S3=SSP
** S16..S31: R16B..R23B, C16B..C23B


Instruction Layout in Memory
* Instructions are represented as a pair of 16 bit Words.
* Each Word is little-endian, but the first word precedes the second.
* 1234_5678 would correspond the byte sequence '34 12 78 56'.
* Instructions have a 32-bit alignment in this subset.
** However, branch-displacements are in terms of 16-bit words.
** A branch with an LSB set is reserved in this subset.

The use of R0 or R1 will be special as a base register for memory-access ops.
* R0 will encode a PC relative form.
** (R0, R0) will encode (PC, DLR)
** (R0, R1) will encode (DLR)
* R1 will encode GBR.
** (R1, R0) will encode (GBR, DLR)
** (R1, R1) will encode (TBR, DLR)


=== 32-bit Instruction Forms ===

Notation:
* e: qnmi
** q=Quadword/Alternate Operation
*** Selects between MOV.L and MOVU.L
*** Selects between CMPxx and CMPQxx
** n=Bit4 of Rn
** m=Bit4 of Rm
** i=Bit4 of Ro
* f: qnii (If n is in n position)
* f: qiin (If n is in o position)

* G/g: 1nmi / 0nmi (G means Q is Set)
* H/h: 1nii / 0nii (If n is in n position)
* H/h: 1iin / 0iin (If n is in o position)

* Encodings marked as '-' are unused.
* Encodings marked as '!' are excluded from this subset.
* Encodings marked as '/' are dropped.

Canonical F0 Block Instruction:
* F0eo_ZZnm
** n: Nominal position for Rn.
** m: Nominal position for Rm.
** o: Nominal position for Ro.
*** May also be Rn for some forms, an imm5/disp5, or opcode bits.


Major Ranges
* 0zzz zzzz, N/E, 16-Bit I-Forms
* ...
* Ezzz zzzz, N/E, 16-Bit I-Forms
* F0zz_zzzz, Basic Instructions
* F1zz_Ozzz, Disp9 MOV.x forms
* F2zz_zzzz, Reserved
* F3zz_zzzz, Reserved
* F4zz_zzzz, Reserved
* F5zz_zzzz, Reserved
* F6zz_zzzz, Reserved
* F7zz_zzzz, Reserved
* F8zz_zzzz, Some Imm16 Instructions
* F9zz_zzzz, Reserved
* FAjj_jjjj, LDIZ #imm24
* FBjj_jjjj, LDIN #imm24
* FCzz_zzzz, N/E, Larger I-Forms
* FDzz_zzzz, N/E, Larger I-Forms
* FEzz_zzzz, N/E, Larger I-Forms
* FFzz_zzzz, N/E, Larger I-Forms

Instruction Blocks:

* F0zz_0zzz
** F0gd_00nm  !
** F0Gd_00nm  !
** F0gd_01nm  !
** F0Gd_01nm  !
** F0gd_02nm  !
** F0Gd_02nm  !
** F0gd_03nm  !
** F0Gd_03nm  !
** F0go_04nm  MOV.B		Rm, (Rn, Ro)		//Q=0
** F0Go_04nm  LEA.B		Rm, (Rn, Ro)		//Q=1
** F0go_05nm  MOV.W		Rm, (Rn, Ro)		//Q=0
** F0Go_05nm  LEA.W		Rm, (Rn, Ro)		//Q=1
** F0go_06nm  MOV.L		Rm, (Rn, Ro)		//Q=0
** F0Go_06nm  LEA.L		Rm, (Rn, Ro)		//Q=1
** F0go_07nm  MOV.Q		Rm, (Rn, Ro)		//Q=0
** F0Go_07nm  LEA.Q		Rm, (Rn, Ro)		//Q=1
** F0gd_08nm  !
** F0Gd_08nm  !
** F0gd_09nm  !
** F0Gd_09nm  !
** F0gd_0Anm  !
** F0Gd_0Anm  !
** F0gd_0Bnm  !
** F0Gd_0Bnm  !
** F0go_0Cnm  MOV.B		(Rm, Ro), Rn		//Q=0
** F0Go_0Cnm  MOVU.B	(Rm, Ro), Rn		//Q=1
** F0go_0Dnm  MOV.W		(Rm, Ro), Rn		//Q=0
** F0Go_0Dnm  MOVU.W	(Rm, Ro), Rn		//Q=1
** F0go_0Enm  MOV.L		(Rm, Ro), Rn		//Q=0
** F0Go_0Enm  MOVU.L	(Rm, Ro), Rn		//Q=1
** F0go_0Fnm  MOV.Q		(Rm, Ro), Rn		//Q=0
** F0Go_0Fnm  MOVD.L	(Rm, Ro), Rn		//Q=1 (63..32=Undefined)

* F0zz_1zzz
** F0go_10nm  ADD		Rm, Ro, Rn				//Rn=Rm+Ro, Q=0
** F0Go_10nm  ADD		Rm, Imm5, Rn			//Rn=Rm+Imm5u, Q=1
** F0go_11nm  SUB		Rm, Ro, Rn				//Rn=Rm-Ro, Q=0
** F0Go_11nm  SUB		Rm, Imm5, Rn			//Rn=Rm-Imm5u, Q=1
** F0go_12nm  MUL		Rm, Ro, Rn				//Rn=Rm*Ro, Q=0
** F0Go_12nm  MUL		Rm, Imm5, Rn			//Rn=Rm*Imm5u, Q=1
** F0eo_13nm  -
** F0eo_14nm  -
** F0go_15nm  AND		Rm, Ro, Rn				//Rn=Rm AND Ro, Q=0
** F0Go_15nm  AND		Rm, Imm5, Rn			//Rn=Rm AND Imm5u, Q=1
** F0go_16nm  OR		Rm, Ro, Rn				//Rn=Rm OR  Ro, Q=0
** F0Go_16nm  OR		Rm, Imm5, Rn			//Rn=Rm OR Imm5u, Q=1
** F0go_17nm  XOR		Rm, Ro, Rn				//Rn=Rm XOR Ro, Q=0
** F0Go_17nm  XOR		Rm, Imm5, Rn			//Rn=Rm XOR Imm5u, Q=1

** F0ez_18nm

** F0ez_19nm
*** F0g0_19nm ADD		Rm, Rn				//Rn=Rn+Rm
*** F0g1_19nm SUB		Rm, Rn				//Rn=Rn-Rm
*** F0g2_19nm ADC		Rm, Rn
*** F0g3_19nm SBB		Rm, Rn
*** F0e4_19nm TST{Q}	Rm, Rn				//SR.T=!(Rm&Rn)
*** F0g5_19nm AND		Rm, Rn
*** F0g6_19nm OR		Rm, Rn
*** F0g7_19nm XOR		Rm, Rn
*** F0g8_19nm MOV		Rm, Rn				//Rn=Rm
**** F0G8_19nm MOVD		Rm, Rn				//Rn=Rm (High bits Undefined)
*** F0g9_19nm MULS		Rm, Rn				//(DHR,DLR)=Rm*Rn (Signed Result)
*** F0gA_19nm MOV		Rm, Cn				//Cn=Rm
*** F0gB_19nm MOV		Cm, Rn				//Rn=Cm
*** F0eC_19nm CMP{Q}EQ	Rm, Rn				//Rn==Rm
*** F0eD_19nm CMP{Q}HI	Rm, Rn				//Unsigned Rn GT Rm
*** F0eE_19nm CMP{Q}GT	Rm, Rn				//Signed Rn GT Rm
*** F0eF_19nm MULU		Rm, Rn				//(DHR,DLR)=Rm*Rn (Unsigned Result)

** F0ez_1Anm  -
** F0ez_1Bnz  -


** F0ez_1Cnm
*** F0e0_1Cnm  NOT		Rm, Rn				//Rn=~Rn
*** F0e1_1Cnm  NEG		Rm, Rn				//Rn=(~Rn)+1
*** F0e2_1Cnm  CLZ{Q}	Rm, Rn				//Count Leading Zeroes
*** F0e3_1Cnm  -
*** F0e4_1Cnm  -
*** F0e5_1Cnm  -
*** F0g5_1Cnm  EXTS.L	Rm, Rn				//
*** F0G5_1Cnm  EXTU.L	Rm, Rn				//
*** F0e6_1Cnm  SHAD{Q}	Rm, Rn				//Barrel Shift, Arithmetic
*** F0e7_1Cnm  SHLD{Q}	Rm, Rn				//Barrel Shift, Logical
*** F0g8_1Cnm  EXTS.B	Rm, Rn				//Q=0, I=0
*** F0G8_1Cnm  EXTU.B	Rm, Rn				//Q=1, I=0
*** F0g9_1Cnm  EXTS.W	Rm, Rn				//Q=0, I=0
*** F0G9_1Cnm  EXTU.W	Rm, Rn				//Q=1, I=0
*** F0eA_1Cnm  MOV		Rm, Sn				//Cn=Rm
*** F0eB_1Cnm  MOV		Sm, Rn				//Rn=Cm
*** F0gC_1Cnm !
*** F0GC_1Cnm !
*** F0gD_1Cnm !
*** F0GD_1Cnm !
*** F0gE_1Cnm !
*** F0GE_1Cnm !
*** F0gF_1Cnm !
*** F0GF_1Cnm !

** F0ez_1Dnm
*** F0e0_1Dnm  -
*** F0e1_1Dnm  -
*** F0e2_1Dnm  -
*** F0e3_1Dnm  -
*** F0e4_1Dnm  -
*** F0e5_1Dnm  -
*** F0e6_1Dnm  -
*** F0e7_1Dnm  -
*** F0e8_1Dnm  -
*** F0e9_1Dnm  -
*** F0eA_1Dnm  -
*** F0eB_1Dnm  -
*** F0eC_1Dnm  -
*** F0eD_1Dnm  CMP{Q}HS		Rm, Rn				//Unsigned Rn GE Rm
*** F0eE_1Dnm  CMP{Q}GE		Rm, Rn				//Signed Rn GE Rm
*** F0eF_1Dnm  -

** F0ez_1Enm  -
** F0ez_1Fnm  -

* F0zz_2zzz
** F0dd_20dd  !
** F0dd_21dd  !
** F0dd_22dd  BT		(PC, disp16s)
** F0dd_23dd  BF		(PC, disp16s)
** F0dd_24dd  -
** F0dd_25dd  -
** F0dd_26dd  -
** F0dd_27dd  -
** F0hn_28dd  -
** F0hn_29dd  -
** F0hn_2Add  -
** F0hn_2Bdd  -
** F0fn_2Cjj  CMP{Q}EQ	#imm10u, Rn			//Rn==Imm10, Zero Extend
** F0fn_2Djj  CMP{Q}EQ	#imm10n, Rn			//Rn==Imm10, One Extend
** F0fn_2Ejj  CMP{Q}GT	#imm10u, Rn			//Rn==Imm10, Zero Extend
** F0fn_2Fjj  CMP{Q}GE	#imm10u, Rn			//Rn==Imm10, Zero Extend

** F0en_30zz  (Single Register Ops, Mirror 3znz)
*** 1111_0000_qzzn_nnnn_0011_0000_zzzz_zzzz (1R)
*** 1111_0000_qzzz_zzzz_0011_0000_0000_zzzz (0R)

*** F000_3000  NOP
*** F001_3000  RTS
*** F002_3000  SLEEP
*** F003_3000  BREAK
*** F004_3000  CLRT
*** F005_3000  SETT
*** F006_3000  CLRS
*** F007_3000  SETS
*** F008_3000  NOTT
*** F009_3000  NOTS
*** F00A_3000  -
*** F00B_3000  -
*** F00C_3000  RTE
*** F00D_3000  -
*** F00E_3000  -
*** F00F_3000  LDTLB
*** F00z_3001  -
*** F000_3002 / BRA		(PC, DLR)
*** F001_3002 / BSR		(PC, DLR)
*** F002_3002 / BT		(PC, DLR)
*** F003_3002 / BF		(PC, DLR)
*** F00z_3003  -
*** ...
*** F00z_300F  _

*** F0en_3010  BRA		(PC, Rn)
*** F0en_3011  BSR		(PC, Rn)
*** F0en_3012  BT		(PC, Rn)
*** F0en_3013  BF		(PC, Rn)

*** F0en_3018  PUSH		Rn
*** F0en_3019  PUSH		Cn
*** F0en_301A  POP		Rn
*** F0en_301B  POP		Cn
*** F0en_301C  CMPPL	Rn
*** F0en_301D  CMPPZ	Rn

*** F0en_3020  BRA		Rn
*** F0en_3021  BSR		Rn
*** F0en_3022  BT		Rn
*** F0en_3023  BF		Rn

*** F0en_3033  MOVNT	Rn
*** F0en_3034  ROTL		Rn
*** F0en_3035  ROTR		Rn
*** F0en_3036  ROTCL	Rn
*** F0en_3037  ROTCR	Rn
*** F0en_3038  SHLL		Rn
*** F0en_3039  SHLR		Rn
*** F0en_303A  SHAR		Rn

*** F0en_3068 / BRA		(PC, Rn)
*** F0en_3069 / BSR		(PC, Rn)
*** F0en_306A  SWAPB	Rn
*** F0en_306B  SWAPW	Rn
*** F0en_306C  SWAPL	Rn

*** F0en_306F  MOVT		Rn

*** F0en_3082  FPUSH	FRn
*** F0en_3083  FPOP		FRn

** F0en_31zz  -
** F0en_3Fzz  -

** F0en_40dd  -
** F0en_41dd  -
** F0en_42dd  -
** F0en_43dd  -
** F0en_44dd  -
** F0en_45dd  -
** F0en_46dd  -
** F0en_47dd  -
** F0en_48dd  -
** F0en_49dd  -
** F0en_4Add  -
** F0en_4Bdd  -
** F0go_4Cnm  -
** F0Go_4Cnm  -
** F0go_4Dnm  -
** F0Go_4Dnm  -
** F0go_4Enm  -
** F0Go_4Enm  -
** F0go_4Fnm  -
** F0Go_4Fnm  -

* F0zz_5zzz
** F0eo_50nm  CSELT		Rm, Ro, Rn			//Rn=SR.T?Rm:Ro
** F0eo_51nm  -
** F0eo_52nm  -
** F0eo_53nm  -
** F0eo_54nm  SHAD{Q}	Rm, Ro, Rn
** F0eo_55nm  SHLD{Q}	Rm, Ro, Rn
** F0go_56nm  SHAD		Rm, imm5u, Rn		//Rn=Rm SHL imm5 (SX 32)
** F0Go_56nm  SHAD		Rm, imm5n, Rn		//Rn=Rm SAR imm5 (SX 32)
** F0go_57nm  SHLD		Rm, imm5u, Rn		//Rn=Rm SHL imm5 (ZX 32)
** F0Go_57nm  SHLD		Rm, imm5n, Rn		//Rn=Rm SHR imm5 (ZX 32)
** F0go_58nm  SHADQ		Rm, imm5u, Rn		//Rn=Rm SHL imm5 (  0.. 31)
** F0Go_58nm  SHADQ		Rm, imm5n, Rn		//Rn=Rm SAR imm5 (-32.. -1)
** F0go_59nm  SHLDQ		Rm, imm5u, Rn		//Rn=Rm SHL imm5 (  0.. 31)
** F0Go_59nm  SHLDQ		Rm, imm5n, Rn		//Rn=Rm SHR imm5 (-32.. -1)
** F0go_5Anm  SHADQ		Rm, imm5u, Rn		//Rn=Rm SHL imm5 ( 32.. 63)
** F0Go_5Anm  SHADQ		Rm, imm5n, Rn		//Rn=Rm SAR imm5 (-63..-33)
** F0go_5Bnm  SHLDQ		Rm, imm5u, Rn		//Rn=Rm SHL imm5 ( 32.. 63)
** F0Go_5Bnm  SHLDQ		Rm, imm5n, Rn		//Rn=Rm SHR imm5 (-63..-33)
** F0eo_5Cnm  -
** F0eo_5Dnm  -
** F0eo_5Enm  -
** F0eo_5Fnm  -

* F0zz_6zzz
* F0zz_7zzz
* F0zz_8zzz

* F0ez_9zzz (FPU Block)
** F0ed_90nm  FMOV.S		FRm, (Rm, disp5)
** F0ed_91nm  FMOV.D		FRm, (Rm, disp5)
** F0eo_92nm  FMOV.S		FRm, (Rm, Ro)
** F0eo_93nm  FMOV.D		FRm, (Rm, Ro)
** F0ed_94nm  FMOV.S		(Rm, disp5), FRn
** F0ed_95nm  FMOV.D		(Rm, disp5), FRn
** F0eo_96nm  FMOV.S		(Rm, Ro), FRn
** F0eo_97nm  FMOV.D		(Rm, Ro), FRn
** F0eo_98nm  FADD			FRm, FRo, FRn
** F0eo_99nm  FSUB			FRm, FRo, FRn
** F0eo_9Anm  FMUL			FRm, FRo, FRn
** F0eo_9Bnm  FDIV			FRm, FRo, FRn

** F0eo_9Cnm
*** F0eC_9Cnm  FCMPEQ		FRm, FRn			//SR.T=(FRn EQ FRm)
*** F0eD_9Cnm  FCMPGT		FRm, FRn			//SR.T=(FRn GT FRm)
*** F0eE_9Cnm  FMOV			FRm, FRn			//FRn=FRm
** F0eo_9Dnm
** F0eo_9Enm
** F0eo_9Fnm
*** F0e0_9Fnm  FLDCF		Rm, FRn		//Load Convert Float32
*** F0e1_9Fnm  FLDCD		Rm, FRn		//Load Convert Double
*** F0e2_9Fnm  FLDCI		Rm, FRn		//Load Convert Int
*** F0e3_9Fnm  FLDCH		Rm, FRn		//Load Convert Half (Low16)
*** F0e4_9Fnm  FSTCF		FRn, Rn		//Store Convert Float32
*** F0e5_9Fnm  FSTCD		FRn, Rn		//Store Convert Double
*** F0e6_9Fnm  FSTCI		FRn, Rn		//Store Convert Int
*** F0e7_9Fnm  FSTCH		FRn, Rn		//Store Convert Half (Low16)
*** F0e8_9Fnm  FNEG			FRm, FRn	//Negate
*** F0e9_9Fnm  FABS			FRm, FRn	//Absolute
*** F0eA_9Fnm  -
*** F0eB_9Fnm  -
*** F0eC_9Fnm  FRCP			FRm, FRn	//Reciprocal (Exact)
*** F0eD_9Fnm  FSQRT		FRm, FRn	//Square Root (Exact)
*** F0eE_9Fnm  -
*** F0eF_9Fnm  -

* F0dd_Addd  BRA	(PC, disp20)		//Branch, +/- 1MB
* F0dd_Bddd  BSR	(PC, disp20)		//Call, +/- 1MB
* F0zz_Czzz
* F0zz_Dzzz
* F0zz_Ezzz
* F0zz_Fzzz


* F1zz_zzzz  (MOV Disp9 Block)
** F1gd_0dnm  MOV.B		Rm, (Rn, disp9u)
** F1Gd_0dnm  LEA.B		(Rm, disp9u), Rn	//Canon, Context
** F1Gd_0dnm  ADD		Rm, disp9u, Rn		//Context
** F1gd_1dnm  MOV.W		Rm, (Rn, disp9u)
** F1Gd_1dnm  LEA.W		(Rm, disp9u), Rn	//Canon, Context
** F1Gd_1dnm  ADD		Rm, disp9u*2, Rn	//Context
** F1gd_2dnm  MOV.L		Rm, (Rn, disp9u)
** F1Gd_2dnm  LEA.L		(Rm, disp9u), Rn	//Canon, Context
** F1Gd_2dnm  ADD		Rm, disp9u*4, Rn	//Context
** F1gd_3dnm  MOV.Q		Rm, (Rn, disp9u)
** F1Gd_3dnm  LEA.Q		(Rm, disp9u), Rn	//Canon, Context
** F1Gd_3dnm  ADD		Rm, disp9u*8, Rn	//Context
** F1ez_4zzz -
** F1ez_5zzz -
** F1ez_6zzz -
** F1ez_7zzz -
** F1gd_8dnm  MOV.B		(Rm, disp9u), Rn
** F1Gd_8dnm  MOVU.B	(Rm, disp9u), Rn
** F1gd_9dnm  MOV.W		(Rm, disp9u), Rn
** F1Gd_9dnm  MOVU.W	(Rm, disp9u), Rn
** F1gd_Adnm  MOV.L		(Rm, disp9u), Rn
** F1Gd_Adnm  MOVU.L	(Rm, disp9u), Rn
** F1gd_Bdnm  MOV.Q		(Rm, disp9u), Rn
** F1Gd_Bdnm  MOVD.L	(Rm, disp9u), Rn
** F1ez_Czzz -
** F1ez_Dzzz -
** F1ez_Ezzz -
** F1ez_Fzzz -

* F2zz_zzzz -
* F3zz_zzzz -
* F4zz_zzzz -
* F5zz_zzzz -
* F6zz_zzzz  (User Extension Block)
* F7zz_zzzz  (User Extension Block)

* F8nz_iiii
** F80n_iiii  MOVZ		#imm16u, Rn		//R0..R15, Zero Extend
** F81n_iiii  MOVZ		#imm16u, Rk		//R16..R31, Zero Extend
** F82n_iiii  MOVN		#imm16n, Rn		//R0..R15, One Extend
** F83n_iiii  MOVN		#imm16n, Rk		//R16..R31, One Extend
** F84n_iiii  ADD		#imm16s, Rn		//R0..R15
** F85n_iiii  ADD		#imm16s, Rk		//R16..R31
** F86n_iiii  LDISH16	#imm16u, Rn		//R0..R15
** F87n_iiii  LDISH16	#imm16u, Rk		//R16..R31
** F88n_iiii  -
** F89n_iiii  -
** F8Ai_iiii  -
** F8Bi_iiii  -
** F8Cn_iiii  -
** F8Dn_iiii  -
** F8En_iiii  -
** F8Fn_iiii  -

* F9zz_zzzz  (Extended FPU Block)

* FAjj_jjjj	 LDIZ	#imm24u, DLR		//Zero Extend
* FBjj_jjjj	 LDIN	#imm24u, DLR		//One Extend
* FCzz_zzzz  (N/E)
* FDzz_zzzz  (N/E)
* FEzz_zzzz  (N/E)
* FFzz_zzzz  (N/E)
