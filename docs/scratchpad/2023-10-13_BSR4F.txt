BSR4F (Idea Spec):
* R0..R63: 64-bit
** X0,X2,X62: Paired, 128-bit
* Variable-Bundle VLIW
** Pointers: 64-bit (Narrow) / 128-bit (Tag/Bound)
* C0..C63:
** Control Registers

Width Profiles:
* A: 1-wide, 4R1W register file
* B: 2-wide, 4R2W register file
* C: 3-wide, 6R3W register file

Indexed Store will be allowed in all profiles, however in B it may not co-issue. In C, only 2 wide bundles may be used with Indexed Store. In A, co-issue will not be allowed and will be ignored (with the exception of Jumbo Prefixes).

Address Space:
* Will have a 48-bit virtual address space.
* Displacements will be 33 bits.


SR:
* (1): S (ALU Status Bit)
* (0): T (Primary Predicate)

Note, nominal pipeline:
* PF IF ID RF EX1 EX2 EX3 WB
* Where the predicate will be evaluated in the RF stage.
* CMPxx will produce a result in EX2, giving a 2 cycle latency.

GPRs:
* R0: ZR / PC  (Src/Dst: Zero         ; LD/ST Base: PC)
* R1: LR / TBR (Src/Dst: Link Register; LD/ST Base: TBR)
* R2: SP (Stack Pointer)
* R3: GP (Global Pointer)
* R4: Scratch / Ret1
* R5: Scratch / Ret2
* R6: Scratch
* R7: Scratch
* R8..R15: Scratch / ArgN
* R16..R31: Preserved / Callee Save
* R32..R47: Scratch
* R48..R63: Preserved / Callee Save


Instruction Formats:
* Wpp0-ZZZZ-ZZnn-nnnn ssss-sstt-tttt-ZZZZ  //A: 3R Space
* Wpp1-0ZZZ-ZZnn-nnnn ssss-ss0i-iiii-iiii  //B: 3RI Space (Imm9u)
* Wpp1-0ZZZ-ZZnn-nnnn ssss-ss1i-iiii-iiii  //C: LD/ST Block (Disp9u)

* Wpp1-10ZZ-ZZnn-nnnn iiii-iiii-iiii-iiii  //D: 2RI block (Imm16u)

* Wpp1-1100-ZZnn-nnnn ssss-ssZZ-ZZZZ-ZZZZ  //E: 2R Space

* Wpp1-1101-ZZnn-nnnn ZZZZ-ZZii-iiii-iiii  //F: 2RI Space

* Wpp1-111Z-iiii-iiii iiii-iiii-iiii-iiii  //J: Branch or Jumbo
**  W=0: Z=0: pp: BRA/BSR/BT/BF  Disp24s
**  W=0: Z=1: "MOV Imm24s, R0"
**  W=1, Z=0: Jumbo Prefix

W: Wide Execute Flag:
* 0: 32-bit or final instruction word.
* 1: More instruction words follow.

pp:
* 00: Always
* 01: Special / Unconditional-only (W=0)
* 10: Execute if True
* 11: Execute if False

Immediate bits will be contiguous with respect to each 32-bit instruction word.


3R Space:
* 3R, 0-0-Z: Load/Store (Index)
** 0=STB , 1=STW , 2=STL , 3=STQ
** 4=-   , 5=-   , 6=-   , 7=STX
** 8=LDSB, 9=LDSW, A=LDSL, B=LDQ
** C=LDUB, D=LSUW, E=LDUL, F=LDX

* 3R, 0-1-Z: ALU
** 0: ADD  , 1: SUB  , 2: SHADQ, 3: SHLDQ
** 4: ADDSL, 5: SUBSL, 6: ADDUL, 7: SUBUL
** 8: -    , 9: AND  , A: OR   , B: XOR
** C: MULSL, D: MULUL, E: SHADL, F: SHLDL


3RI, 0-Z:
* 0-Z: ADD  , SUB  , SHADQ, SHLDQ
* 1-Z: ADDSL, SUBSL, ADDUL, SUBUL
* 2-Z: -    , AND  , OR   , XOR
* 3-Z: MULSL, MULUL, SHADL, SHLDL

In the 3RI block, the Imm9u field will be zero extended.
The only partial exception will be the SHAD/SHLD instructions.
Here, the logical immediate will be sign-extended from 8 bits.
However, bit 8 of the immediate will be MBZ, or may be reserved to encode a 128 bit shift.


3RI, LD/ST:
* 0-Z: STB , STW , STL , STQ
* 1-Z: -   , -   , -   , STX
* 2-Z: LDSB, LDSW, LDSL, LDQ
* 3-Z: LDUB, LDUW, LDUL, LDX
* 4-Z: LEAB, LEAW, LEAL, LEAQ
* 5-Z: -   , -   , -   , -
* 6-Z: -   , -   , -   , -
* 7-Z: -   , -   , -   , -

For LD/ST, Scale will be 1/2/4/8, hard wired to the element size (with the partial exception that X will use an 8-byte scale).


2RI-IMM16
* 0-0: LDIZ		Imm16u, Rn	// Rn = Imm16u
* 0-1: ADD		Imm16u, Rn	// Rn = Rn + Imm16u
* 0-2: LDIN		Imm16n, Rn	// Rn = Imm16n
* 0-3: ADD		Imm16n, Rn	// Rn = Rn + Imm16n

Implicitly, Bit 23 will serve as an optional sign bit.


2RI-IMM10:

* 0-0-0: CMPEQ	Imm10u, Rn		//T = (Rn EQ Imm10u)
* 0-0-1: CMPGT	Imm10u, Rn		//T = (Rn GT Imm10u)
* 0-0-2: BEQ	Rn, Disp10u		//Branch if (Rn EQ 0)
* 0-0-2: BGT	Rn, Disp10u

* 0-1-0: BGE	Rn, Disp10u
* 0-1-1: BLT	Rn, Disp10u
* 0-1-2: BNE	Rn, Disp10u		//Branch if (Rn NE 0)
* 0-1-3: BLE	Rn, Disp10u

* 2-0-0: CMPEQ	Imm10n, Rn		//T = (Rn EQ Imm10n)
* 2-0-1: CMPGT	Imm10n, Rn		//T = (Rn GT Imm10n)
* 2-0-2: BEQ	Rn, Disp10n
* 2-0-2: BGT	Rn, Disp10n

* 2-1-0: BGE	Rn, Disp10n
* 2-1-1: BLT	Rn, Disp10n
* 2-1-2: BNE	Rn, Disp10n		//Branch if (Rn NE 0)
* 2-1-3: BLE	Rn, Disp10n

Where, 2RI Imm10 sub-blocks 0 and 2 will mirror, treating the Imm10 field as zero or one extended. Implicitly, Bit 23 will serve as an optional sign bit.
