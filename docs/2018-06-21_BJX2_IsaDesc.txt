== Instructions Organized by Name with Descriptions ==

Register Aliases:
* DLR will be an alias for R0.
* DHR will be an alias for R1.
* SP will be an alias for R15.


=== ADC ===

* 12nm ADC		Rm, Rn

Add with Carry, Rn=Rn+Rm+SR.T, with SR.T being updated to reflect the carry-out bit.


=== ADD ===

* 10nm            ADD		Rm, Rn
* 33nB            ADD		Cn, DLR
* 58nm            ADD		Rm, DLR, Rn			//Rn=Rm+DLR
* Cnii            ADD		#imm8s, Rn
* F0eo_10nm       ADD		Rm, Ro, Rn			//Rn=Rm+Ro, Q=0
* F0e0_19nm       ADD		Rm, Rn				//Rn=Rn+Rm
* F0e8_1Dnm       ADD		Rm, DLR, Rn
* F84n_iiii       ADD		#imm16s, Rn
* F85n_iiii       ADD		#imm16s, Rk
* FCCn_iiii_iiii  ADD		#imm32s, Rn
* FDCn_iiii_iiii  ADD		#imm32s, Rn

Add the source and destination values and store the result in the destination register.


=== AND ===

* 15nm       AND		Rm, Rn
* 5Anm       AND		Rm, DLR, Rn
* F0eo_15nm  AND		Rm, Ro, Rn				//Rn=Rm AND Ro, Q=0
* F0e5_19nm  AND		Rm, Rn
* F0eA_1Dnm  AND		Rm, DLR, Rn

Perform a bitwise AND of the source and destination values and store the result in the destination register.


=== BF ===

* 23dd            BF		(PC, disp8s)
* 3032            BF		(PC, DLR)
* 32n3            BF		Rn
* F0dd_23dd       BF		(PC, disp16s)
* FC23_dddd_dddd  BF		(PC, disp32s)

Branch if False (SR.T is 0).
The target address is computed and PC is updated to the new address if the condition is met.


=== BRA ===

* 20dd            BRA		(PC, disp8s)
* 3002            BRA		(PC, DLR)
* 32n0            BRA		Rn
* 36n8            BRA		(PC, Rn)
* F0dd_20dd       BRA		(PC, disp16s)
* FC20_dddd_dddd  BRA		(PC, disp32s)

Branch to Address.
The target address is computed and PC is updated to the new address.


=== BREAK ===

* 3030 BREAK

Trigger a Breakpoint exception.


=== BSR ===

* 21dd            BSR		(PC, disp8s)
* 3012            BSR		(PC, DLR)
* 32n1            BSR		Rn
* 36n9            BSR		(PC, Rn)
* F0dd_21dd       BSR		(PC, disp16s)
* FC21_dddd_dddd  BSR		(PC, disp32s)

Branch to subroutine.
The target address is computed and PC is updated to the new address, with the prior value for PC being stored in LR.


=== BT ===

* 22dd            BT		(PC, disp8s)		//Branch True
* 3022            BT		(PC, DLR)			//Branch True to PC+(DLR*2)
* 32n2            BT		Rn
* F0dd_22dd       BT		(PC, disp16s)
* FC22_dddd_dddd  BT		(PC, disp32s)

Branch if True (SR.T is 1).
The target address is computed and PC is updated to the new address if the condition is met.


=== CLRS ===

* 3060 CLRS

Clear the SR.S flag.


=== CLRT ===

* 3040 CLRT

Clear the SR.T flag.


=== CMPEQ ===

* 1Cnm CMPEQ	Rm, Rn
* 2Cnj CMPEQ	#imm4u, Rn
* 2Dnj CMPEQ	#imm4n, Rn

Compare if source and destination are Equal.

This provides both zero and one extended immediates, allowing a direct immediate to express values ranging between -16 and 15.


This updates SR.T based on the result of the comparison.


=== CMPGE ===

* 2Fnj CMPGE	#imm4u, Rn
* 36nE CMPGE	DLR, Rn

Compare if Rn is Greater or Equal to the immediate.

Only exists for immediates because this can be easily emulated for the two-register forms via swapping the registers and inverting the branch condition.

This updates SR.T based on the result of the comparison.


=== CMPGT ===

* 1Enm CMPGT	Rm, Rn
* 2Enj CMPGT	#imm4u, Rn

Signed Rn GT Rm.

Compare if destination is greater than the source using a signed comparison.

This updates SR.T based on the result of the comparison.


=== CMPHI ===

* 1Dnm CMPHI	Rm, Rn

Unsigned Rn GT Rm.

Compare if destination is greater than the source using an unsigned comparison.

This updates SR.T based on the result of the comparison.


=== CMPHS ===

* 36nD CMPHS	DLR, Rn

Unsigned (Rn GE DLR)

Compare if destination is greater than or equal to the source using an unsigned comparison.

This updates SR.T based on the result of the comparison.


=== CMPPL ===

* 31n8 CMPPL	Rn

SR.T=(Rn GT 0)

Compare if the value is greater than zero (Signed).

This operation is specific to the use of signed values.
For the unsigned case, this decates to comparing that the value is not equal to zero.

This updates SR.T based on the result of the comparison.


=== CMPPZ ===

* 31n9 CMPPZ	Rn

SR.T=(Rn GE 0)

Compare if the value is greater than equal to zero.

This operation is specific to the use of signed values.
For the unsigned case, the result would always be true.

This updates SR.T based on the result of the comparison.


=== CMPQEQ ===

* 5Fnm CMPQEQ	Rm, Rn

Compare if source and destination are Equal.

This provides both zero and one extended immediates, allowing a direct immediate to express values ranging between -16 and 15.


This updates SR.T based on the result of the comparison.


=== CMPQGE ===

* 38nE CMPQGE	DLR, Rn

Compare if Rn is Greater or Equal to the immediate.

Only exists for immediates because this can be easily emulated for the two-register forms via swapping the registers and inverting the branch condition.

This updates SR.T based on the result of the comparison.


=== CMPQGT ===

* 5Enm CMPQGT	Rm, Rn

Signed Rn GT Rm.

Compare if destination is greater than the source using a signed comparison.

This updates SR.T based on the result of the comparison.


=== CMPQHI ===

* 5Dnm CMPQHI	Rm, Rn

Unsigned Rn GT Rm.

Compare if destination is greater than the source using an unsigned comparison.

This updates SR.T based on the result of the comparison.


=== CMPQHS ===

* 38nD CMPQHS	DLR, Rn

Unsigned (Rn GE DLR)

Compare if destination is greater than or equal to the source using an unsigned comparison.

This updates SR.T based on the result of the comparison.


=== EXTS.B ===

* 32n6 EXTS.B	Rn

Sign extend the value in the low 8 bits of the register to the width of the register.


=== EXTS.L ===

* 36n5 EXTS.L	Rn

Sign extend the value in the low 32 bits of the register to the width of the register.


=== EXTS.W ===

* 32n7 EXTS.W	Rn

Sign extend the value in the low 16 bits of the register to the width of the register.


=== EXTU.B ===

* 32n4 EXTU.B	Rn

Zero extend the value in the low 8 bits of the register to the width of the register.


=== EXTU.L ===

* 36n4 EXTU.L	Rn

Zero extend the value in the low 32 bits of the register to the width of the register.


=== EXTU.W ===

* 32n5 EXTU.W	Rn

Zero extend the value in the low 16 bits of the register to the width of the register.


=== LEA.B ===

* 31nF LEA.B	(PC, DLR), Rn
* 4Cnm LEA.B	(Rm, DLR), Rn

Load the effective address of the Base register added to the displacement and store the result into the destination register.

This will use a scale factor of 1.


=== LEA.L ===

* 31nB LEA.L	(PC, DLR), Rn
* 4Enm LEA.L	(Rm, DLR), Rn

Load the effective address of the Base register added to the scaled displacement and store the result into the destination register.

This will use a scale factor of 4.


=== LEA.Q ===

* 4Fnm LEA.Q	(Rm, DLR), Rn

Load the effective address of the Base register added to the scaled displacement and store the result into the destination register.

This will use a scale factor of 8.


=== LEA.W ===

* 31nA LEA.W	(PC, DLR), Rn
* 4Dnm LEA.W	(Rm, DLR), Rn

Load the effective address of the Base register added to the scaled displacement and store the result into the destination register.

This will use a scale factor of 2.


=== LDIN / LDIZ ===

* 24jj LDIZ		#imm8u, DLR
* 25jj LDIN		#imm8u, DLR
* Ajjj LDIZ		#imm12u, DLR
* Bjjj LDIN		#imm12u, DLR

Load an 8 or 12 bit value into DLR.

LDIZ will zero extend the value up to the size of the register.

LDIN will extend the value with ones up to the size of the register.


=== LDISH ===

* 26jj LDISH	#imm8u, DLR

Load Immediate with Shift.

The value in DLR is shifted left 8 bits, and the immediate value is coppied into the low bits.


=== LDISH16 ===

* 30A0 LDISH16	#0x0000, DLR
* 30B0 LDISH16	#0xFFFF, DLR

Load Immediate with Shift.

The value in DLR is shifted left 16 bits, and the low bits are set according to the pattern value given.


=== MOV ===

MOV, GPR
* 18nm            MOV		Rm, Rn
* 19zz            MOV		Rj, Rn
* 1Azz            MOV		Rm, Rk
* 1Bzz            MOV		Rj, Rk
* F0e8_19nm       MOV		Rm, Rn				//Rn=Rm

MOV, Control Register
* 48nm            MOV		Rm, Cn
* 49nm            MOV		Cm, Rn
* 4Anm            MOV		Rm, Sn
* 4Bnm            MOV		Sm, Rn
* F0eA_19nm       MOV		Rm, Cn				//Cn=Rm
* F0eB_19nm       MOV		Cm, Rn				//Rn=Cm
* F0eA_1Cnm       MOV		Rm, Sn				//Cn=Rm
* F0eB_1Cnm       MOV		Sm, Rn				//Rn=Cm

MOV, Constant
* Enii            MOV		#imm8s, Rn	//Rn=Imm8
* F80n_iiii       MOV		#imm16u, Rn
* F81n_iiii       MOV		#imm16u, Rk
* F82n_iiii       MOV		#imm16n, Rn
* F83n_iiii       MOV		#imm16n, Rk
* FCEn_iiii_iiii  MOV		#imm32s, Rn
* FDEn_iiii_iiii  MOV		#imm32s, Rk

Move a value from the source to the destination register.


=== MOV.B ===

* 00nm       MOV.B	Rm, (Rn)
* 04nm       MOV.B	Rm, (Rn, DLR)
* 08nm       MOV.B	(Rm), Rn
* 0Cnm       MOV.B	(Rm, DLR), Rn
* 30n4       MOV.B	Rn, (PC, DLR)
* 30nC       MOV.B	(PC, DLR), Rn
* F0gd_00nm  MOV.B	Rm, (Rn, disp5)		//Q=0
* F0go_04nm  MOV.B	Rm, (Rn, Ro)		//Q=0
* F0gd_08nm  MOV.B	(Rm, disp5), Rn		//Q=0
* F0go_0Cnm  MOV.B	(Rm, Ro), Rn		//Q=0

Load or store a Byte to/from memory.
The byte is sign extended to the size of the register.


=== MOV.L ===

* 02nm       MOV.L	Rm, (Rn)
* 06nm       MOV.L	Rm, (Rn, DLR)
* 0Anm       MOV.L	(Rm), Rn
* 0Enm       MOV.L	(Rm, DLR), Rn
* 28nd       MOV.L	Rn, (SP, disp4u)	//Stack-Relative Store
* 2And       MOV.L	(SP, disp4u), Rn	//Stack-Relative Load
* 30n6       MOV.L	Rn, (PC, DLR)
* 30nE       MOV.L	(PC, DLR), Rn
* F0gd_02nm  MOV.L	Rm, (Rn, disp5)
* F0go_06nm  MOV.L	Rm, (Rn, Ro)
* F0gd_0Anm  MOV.L	(Rm, disp5), Rn
* F0go_0Enm  MOV.L	(Rm, Ro), Rn
* F0hn_28dd  MOV.L	Rn, (SP, disp10u)	//Stack-Relative Store
* F0hn_2Add  MOV.L	(SP, disp10u), Rn	//Stack-Relative Load

Load or store a DWord to/from memory.


=== MOV.Q ===

* 03nm       MOV.Q	Rm, (Rn)
* 07nm       MOV.Q	Rm, (Rn, DLR)
* 0Bnm       MOV.Q	(Rm), Rn
* 0Fnm       MOV.Q	(Rm, DLR), Rn
* 29nd       MOV.Q	Rn, (SP, disp4u)	//Stack-Relative Store
* 2Bnd       MOV.Q	(SP, disp4u), Rn	//Stack-Relative Load
* 30n7       MOV.Q	Rn, (PC, DLR)
* 30nF       MOV.Q	(PC, DLR), Rn
* F0gd_03nm  MOV.Q	Rm, (Rn, disp5)		//Q=0
* F0go_07nm  MOV.Q	Rm, (Rn, Ro)		//Q=0
* F0gd_0Bnm  MOV.Q	(Rm, disp5), Rn		//Q=0
* F0go_0Fnm  MOV.Q	(Rm, Ro), Rn		//Q=0
* F0hn_29dd  MOV.Q	Rn, (SP, disp10u)	//Stack-Relative Store
* F0hn_2Bdd  MOV.Q	(SP, disp10u), Rn	//Stack-Relative Load

Load or store a QWord to/from memory.


=== MOV.W ===

* 01nm       MOV.W	Rm, (Rn)
* 05nm       MOV.W	Rm, (Rn, DLR)
* 09nm       MOV.W	(Rm), Rn
* 0Dnm       MOV.W	(Rm, DLR), Rn
* 30n5       MOV.W	Rn, (PC, DLR)
* 30nD       MOV.W	(PC, DLR), Rn
* F0gd_01nm  MOV.W	Rm, (Rn, disp5)		//Q=0
* F0go_05nm  MOV.W	Rm, (Rn, Ro)		//Q=0
* F0gd_09nm  MOV.W	(Rm, disp5), Rn		//Q=0
* F0go_0Dnm  MOV.W	(Rm, Ro), Rn		//Q=0

Load or store a Word to/from memory.
The Word value is sign extended to the size of the register.


=== MOVU.B ===

* 50nm       MOVU.B		(Rm), Rn
* 52nm       MOVU.B		(Rm, DLR), Rn
* 35n4       MOVU.B		(PC, DLR), Rn
* F0Gd_08nm  MOVU.B		(Rm, disp5), Rn
* F0Go_0Cnm  MOVU.B		(Rm, Ro), Rn

Load or store a Byte to/from memory.
The byte is zero extended to the size of the register.

Note that these instruction forms will be specific to the 32-bit ISA.


=== MOVU.L ===

* 80nm       MOVU.L		(Rm), Rn
* 88nm       MOVU.L		(Rm, DLR), Rn
* 35n6       MOVU.L		(PC, DLR), Rn
* F0Gd_0Anm  MOVU.L		(Rm, disp5), Rn
* F0Go_0Enm  MOVU.L		(Rm, Ro), Rn

Load or store a Byte to/from memory.
The byte is zero extended to the size of the register.

Note that these instruction forms will be specific to the 32-bit ISA.


=== MOVU.W ===

* 51nm       MOVU.W		(Rm), Rn
* 53nm       MOVU.W		(Rm, DLR), Rn
* 35n5       MOVU.W		(PC, DLR), Rn
* F0Gd_09nm  MOVU.W		(Rm, disp5), Rn
* F0Go_0Dnm  MOVU.W		(Rm, Ro), Rn

Load or store a Word to/from memory.
The word is zero extended to the size of the register.

Note that these instruction forms will be specific to the 32-bit ISA.


=== MULS ===

* 56nm MULS	Rm, Rn

(DHR,DLR)=Rm*Rn (Signed Result).

Perform a signed multiply storing the result of the multiplication in the DHR,DLR pair.


=== MULU ===

* 57nm MULU	Rm, Rn

(DHR,DLR)=Rm*Rn (Unsigned Result).

Perform an unsigned multiply storing the result of the multiplication in the DHR,DLR pair.


=== NEG ===

* 33n1	NEG		Rn
* 33nC	NEG		Rn, DLR
* 33nD	NEG		Rk, DLR

Rn=(~Rn)+1

Negate the value in Rn.


=== NEGC ===

* 33n2	NEGC	Rn

Rn=(~Rn)+(!SR.T).

Negate value in Rn and subtract the SR.T flag.
The value of SR.T is updated to reflect the borrow status of the bit.


=== NOP ===

* 3000 NOP

Does Nothing.


=== NOT ===

* 33n0	NOT		Rn

Rn=~Rn

Perform a bitwise NOT of the value in Rn.


=== NOTS ===

* 3090 NOTS

SR.S=!SR.S

Invert the SR.S flag.


=== NOTT ===

* 3080 NOTT

SR.T=!SR.T

Invert the SR.T flag.

=== OR ===

* 16nm       OR		Rm, Rn
* 5Bnm       OR		Rm, DLR, Rn
* F0eo_16nm  OR		Rm, Ro, Rn				//Rn=Rm OR  Ro, Q=0
* F0e6_19nm  OR		Rm, Rn
* F0eB_1Dnm  OR		Rm, DLR, Rn

Perform a bitwise OR of the source and destination, storing the result in the destination.


=== POP ===

* 30nA POP		Rn
* 30nB POP		Cn
* 32nA POP		Rk					//R16..R31
* 32nB POP		Ck					//C16..C31

Load the value from the top of the stack into the destination register and increment the stack position.

For a 32-bit architecture, this will add 4 to the value of SP.

Note that POP into PC will be treated as a special case "RET" instruction.


=== PUSH ===

* 30n8 PUSH		Rn
* 30n9 PUSH		Cn
* 32n8 PUSH		Rk					//R16..R31
* 32n9 PUSH		Ck					//C16..C31

Decrement the stack position and store the value from the register to this location.


=== RET ===

* 300B RET

Load the value from the top of the stack into PC and increment the stack position.

Note that this is an alias for "POP PC".


=== ROTCL ===

* 33n6	ROTCL	Rn

Rn'=(Rn SHL 1)|SR.T; SR.T=Rn.31

Rotate the value in Rn left by 1 bit, pulling SR.T into the LSB, and putting the shifted out bit into SR.T.


=== ROTCR ===

* 33n7	ROTCR	Rn

Rotate the value in Rn right by 1 bit, pulling SR.T into the MSB, and putting the shifted out bit into SR.T.


=== ROTL ===

* 33n4	ROTL	Rn

Rn=(Rn SHL 1)|(Rn SHR 31)

Rotate the value in Rn left by 1 bit.


=== ROTR ===

* 33n5	ROTR	Rn

Rn=(Rn SHR 1)|(Rn SHL 31)

Rotate the value in Rn right by 1 bit.


=== RTE ===

* 30C0 RTE

Return from exception.

Initiates the behavior for returning from an exception handler (described elsewhere).


=== RTS ===

* 3010 RTS

Return from Subroutine.
This effectively restores the value from LR into PC, transferring control back to LR.


=== SBB ===

* 13nm SBB		Rm, Rn

Rn=Rn+(~Rm)+(!SR.T)

Subtract with Borrow.
SR.T is updated with the borrow result of this operation.


=== SETS ===

* 3070 SETS

Set the SR.S flag.

=== SETT ===

* 3050 SETT

Set the SR.T flag.


=== SHAR ===

* 33nA SHAR	Rn

Rn'=(Rn SAR 1); SR.T=Rn.0

Shift Arithmetic Right by 1 bit.
This updates SR.T with the bit shifted out of the LSB.


=== SHARx ===

* 34n8 SHAR1	Rn
* 34n9 SHAR2	Rn
* 34nA SHAR4	Rn
* 34nB SHAR8	Rn
* 34nE SHAR16	Rn

Rn=Rn SAR x;

Perform an arithmetic shift right by the given number of bits.
These may be combined to form a shift by a different number of bits.


=== SHLL ===

* 33n8 SHLL	Rn

Rn'=(Rn SHL 1); SR.T=Rn.31

Shift Logical Left by 1 bit.
This updates SR.T with the bit shifted out of the MSB.


=== SHLLx ===

* 34n0 SHLL1	Rn
* 34n1 SHLL2	Rn
* 34n2 SHLL4	Rn
* 34n3 SHLL8	Rn
* 34nC SHLL16	Rn

Rn=Rn SHL x;

Perform an logical shift left by the given number of bits.
These may be combined to form a shift by a different number of bits.


=== SHLR ===

* 33n9 SHLR	Rn

Rn'=(Rn SHR 1); SR.T=Rn.0

Shift Logical Right by 1 bit.
This updates SR.T with the bit shifted out of the LSB.


=== SHLRx ===

* 34n4 SHLR1	Rn
* 34n5 SHLR2	Rn
* 34n6 SHLR4	Rn
* 34n7 SHLR8	Rn
* 34nD SHLR16	Rn

Rn=Rn SHR x;

Perform an logical shift right by the given number of bits.
These may be combined to form a shift by a different number of bits.


=== SLEEP ===

* 3020 SLEEP

Causes the processor to sleep until the next interrupt.

May generate an fault if used in a context where this would halt the processor indefinitely.


=== SUB ===

* 11nm SUB		Rm, Rn

Rn=Rn-Rm

Subtract the source from the destination, storing the result in the destination register.


=== SWAP.B ===

* 36nA SWAPB	Rn

Rn'=((Rn AND 0xFF00FF00FF00FF00) SHR 8) OR ((Rn AND 0x00FF00FF00FF00FF) SHL 8);

Swap the Bytes within Rn.



=== SWAP.B ===

* 36nB SWAPW	Rn

Rn'=((Rn AND 0xFFFF0000FFFF0000) SHR 16) OR ((Rn AND 0x0000FFFF0000FFFF) SHL 8);

Swap the Words within Rn.


=== TRAP ===

* 36j3 TRAP	#imm4u

Generate an Interrupt, using the bits from the immediate as part of the bit-pattern for EXSR (0xC08j).


=== TST ===

* 14nm TST		Rm, Rn

SR.T=!(Rm AND Rn)

Perform a bitwise AND of the source and destination registers, updating SR.T based on whether the result of this operation is equal to zero.

A zero result will cause SR.T to be set, and a nonzero result will cause SR.T to be cleared.

This operation will only test the low 32 bits.


=== TSTQ ===

* 54nm TSTQ		Rm, Rn

SR.T=!(Rm AND Rn)

Perform a bitwise AND of the source and destination registers, updating SR.T based on whether the result of this operation is equal to zero.

A zero result will cause SR.T to be set, and a nonzero result will cause SR.T to be cleared.

This operation will test all 64 bits.


=== XOR ===

* 17nm       XOR		Rm, Rn
* 5Cnm       XOR		Rm, DLR, Rn
* F0eo_17nm  XOR		Rm, Ro, Rn				//Rn=Rm XOR Ro, Q=0
* F0e7_19nm  XOR		Rm, Rn
* F0eC_1Dnm  XOR		Rm, DLR, Rn

Perform a bitwise XOR of the source and destination registers, storing the result in the destination.


== FPU Instructions ==

=== FABS ===

* 9Fn9  FABS		FRn					//Absolute

=== FADD ===

* 98nm  FADD		FRm, FRn			//FRn=FRn+FRm


=== FCMPEQ ===

* 9Cnm  FCMPEQ		FRm, FRn			//SR.T=(FRn EQ FRm)


=== FCMPGT ===

* 9Dnm  FCMPGT		FRm, FRn			//SR.T=(FRn GT FRm)

=== FDIV ===

* 9Bnm FDIV		FRm, FRn			//FRn=FRn/FRm


=== FLDCx ===

* 9Fn0 FLDCF		DLR, FRn			//Float Load Convert Float32
* 9Fn1 FLDCD		DLR, FRn			//Float Load Convert Double (DLR)
* 9Fn2 FLDCI		DLR, FRn			//Float Load Convert Int
* 9Fn3 FLDCH		DLR, FRn			//Float Load Convert Half (DLR, Low16)

Load a value from DLR into an FRU Register.
The value will be converted from the given source format into the internal format of the FPU Register.


=== FMOV ===

* 9Enm  FMOV		FRm, FRn			//FRn=FRm

Move a floating point value from FRm to FRn.


=== FMOV.D ===

* 91nm  FMOV.D		FRm, (Rm)
* 95nm  FMOV.D		(Rm), FRn
* 93nm  FMOV.D		FRm, (Rm, DLR)
* 97nm  FMOV.D		(Rm, DLR), FRn

Load or store a double precision value.
The value is converted to or from the internal format of the FPU register.


=== FMOV.S ===

* 90nm  FMOV.S		FRm, (Rm)
* 92nm  FMOV.S		FRm, (Rm, DLR)
* 94nm  FMOV.S		(Rm), FRn
* 96nm  FMOV.S		(Rm, DLR), FRn

Load or store a single precision value.
The value is converted to or from the internal format of the FPU register.


=== FMUL ===

* 9Anm  FMUL		FRm, FRn			//FRn=FRn*FRm

Multiply FRm by FRn and store the result in FRn.


=== FNEG ===

* 9Fn8 FNEG		FRn					//Negate

Negate the value held in FRn.


=== FRCP ===

* 9FnC FRCP		FRn					//Reciprocal

Calculate the reciprocal of FRn and store the result in FRn.


=== FRCPA ===

* 9FnA FRCPA		FRn					//Reciprocal (Approximate)

Calculate a fast approximation of the reciprocal of FRn and store the result in FRn.


=== FSTCF ===

* 9Fn4 FSTCF		FRn, DLR			//Float Store Convert Float32
* 9Fn5 FSTCD		FRn, DLR			//Float Store Convert Double (DLR)
* 9Fn6 FSTCI		FRn, DLR			//Float Store Convert Int
* 9Fn7 FSTCH		FRn, DLR			//Float Store Convert Half (DLR, Low16)

=== FSUB ===

* 99nm  FSUB		FRm, FRn			//FRn=FRn-FRm

Floating point subtract. Subtract FRm from FRn and store result in FRn.


=== FSQRT ===

* 9FnD FSQRT		FRn					//Square Root

Calculate the Square Root of FRn and store the result in FRn.


=== FSQRTA ===

* 9FnB FSQRTA		FRn					//Square Root (Approximate)

Calculate a fast approximation of the Square Root of FRn and store the result in FRn.
