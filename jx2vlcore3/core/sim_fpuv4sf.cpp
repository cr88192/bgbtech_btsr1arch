#include "VFpuVec4SF.h"
#include "verilated.h"

VFpuVec4SF *top = new VFpuVec4SF;

vluint64_t main_time = 0;

#define JX2_UCMD_FPUV4SF		0x0D

#define JX2_UCIX_FPU_FADD		0x00		//FPU ADD (F64)
#define JX2_UCIX_FPU_FSUB		0x01		//FPU SUB (F64)
#define JX2_UCIX_FPU_FMUL		0x02		//FPU MUL (F64)

#define JX2_UCIX_FPU_PADD		0x05		//FPU ADD (2x F32)
#define JX2_UCIX_FPU_PSUB		0x06		//FPU SUB (2x F32)
#define JX2_UCIX_FPU_PMUL		0x07		//FPU MUL (2x F32)

#define JX2_UCIX_FPU_PADDH		0x15		//FPU ADD (4x F16)
#define JX2_UCIX_FPU_PSUBH		0x16		//FPU SUB (4x F16)
#define JX2_UCIX_FPU_PMULH		0x17		//FPU MUL (4x F16)

#define JX2_UCIX_FPU_PADDX		0x25		//FPU ADD (4x F32)
#define JX2_UCIX_FPU_PSUBX		0x26		//FPU SUB (4x F32)
#define JX2_UCIX_FPU_PMULX		0x27		//FPU MUL (4x F32)

#define JX2_UCIX_FPU_PADDXD		0x35		//FPU ADD (2x F64)
#define JX2_UCIX_FPU_PSUBXD		0x36		//FPU SUB (2x F64)
#define JX2_UCIX_FPU_PMULXD		0x37		//FPU MUL (2x F64)


struct JX2_FpuTestCase_s {
int cmd;
int ixt;

vluint64_t x1;
vluint64_t y1;
vluint64_t z1;

vluint64_t x2;
vluint64_t y2;
vluint64_t z2;
}fputest[]={
{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADDH,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x4300430043004300ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x4300430043004300ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUBH,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x0000000000000000ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMULH,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x4220422042204220ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x4220422042204220ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x40490FD040490FD0ULL,  0x3FB4FDF43FB4FDF4ULL, 0x4091C7004091C700ULL,
	0x40490FD040490FD0ULL,  0xBFB4FDF4BFB4FDF4ULL, 0x3FDD21003FDD2100ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x40490FD040490FD0ULL,  0x3FB4FDF43FB4FDF4ULL, 0x3FDD21003FDD2100ULL,
	0x40490FD040490FD0ULL,  0xBFB4FDF4BFB4FDF4ULL, 0x4091C7004091C700ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x40490FD040490FD0ULL,  0x3FB4FDF43FB4FDF4ULL, 0x408E2580408E2580ULL,
	0x40490FD040490FD0ULL,  0x3FB4FDF43FB4FDF4ULL, 0x408E2580408E2580ULL },



{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0x3FDD2100BFDD2100ULL,
	0x40490FD0C0490FD0ULL,  0x3FB4FDF4BFB4FDF4ULL, 0x4091C700C091C700ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0x4091C700C091C700ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0xC08E2580C08E2580ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x3E807E003E807E00ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x40490FD040490FD0ULL,  0x40490FD040490FD0ULL, 0x0000000000000000ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x40490FD03FB4FDF4ULL,  0x8034FDF40034FDF4ULL, 0x0000000000000000ULL,
	0x3F003F003F003F00ULL,  0x8034FDF40034FDF4ULL, 0x0000000000000000ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADDX,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0x3FDD2100BFDD2100ULL,
	0x3F803F003F803F00ULL,  0x3F803F003F803F00ULL, 0x40003F0040003F00ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUBX,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0x4091C700C091C700ULL,
	0x3F003F003F003F00ULL,  0x3F003F003F003F00ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMULX,
	0x40490FD0C0490FD0ULL,  0xBFB4FDF43FB4FDF4ULL, 0xC08E2580C08E2580ULL,
	0x3F803F003F803F00ULL,  0x3F803F003F803F00ULL, 0x3F807E003F807E00ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_FADD,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x40153D6000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x40153D6000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_FSUB,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x3FEF0A0000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x3FEF0A0000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_FMUL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x401B413000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x401B413000000000ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADDXD,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x40153D6000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x40153D6000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUBXD,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x3FEF0A0000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x3FEF0A0000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMULXD,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x401B413000000000ULL,
	0x40091EB851EB851FULL,  0x40015C28F5C28F5CULL, 0x401B413000000000ULL },



{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x4049990040499900ULL,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x4049990040499900ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x4048518040485180ULL,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x4048518040485180ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x3D009D003D009D00ULL,
	0x4048F5C34048F5C3ULL,  0x3C23D70A3C23D70AULL, 0x3D009D003D009D00ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0x447AC880447AC880ULL,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0x447AC880447AC880ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0xC4793700C4793700ULL,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0xC4793700C4793700ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0x45443F8045443F80ULL,
	0x4048F5C34048F5C3ULL,  0x447A0000447A0000ULL, 0x45443F8045443F80ULL },




{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x4048F5804048F580ULL,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x4048F5804048F580ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x4048F5004048F500ULL,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x4048F5004048F500ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x3652B8003652B800ULL,
	0x4048F5C34048F5C3ULL,  0x358637BD358637BDULL, 0x3652B8003652B800ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0x4974240049742400ULL,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0x4974240049742400ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0xC9742380C9742380ULL,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0xC9742380C9742380ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0x4A3FA6004A3FA600ULL,
	0x4048F5C34048F5C3ULL,  0x4974240049742400ULL, 0x4A3FA6004A3FA600ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x4048F5804048F580ULL,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x4048F5804048F580ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x4048F5804048F580ULL,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x4048F5804048F580ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x0000000000000000ULL,
	0x4048F5C34048F5C3ULL,  0x0000000000000000ULL, 0x0000000000000000ULL },


{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADD,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PSUB,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL },

{JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PMUL,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL,
	0x0000000000000000ULL,  0x0000000000000000ULL, 0x0000000000000000ULL },


// {JX2_UCMD_FPUV4SF, JX2_UCIX_FPU_PADDH,  12345678,    8191,	1507},

{0x00, 0,  0,  0},
};

int main(int argc, char **argv, char **env)
{
	double fx, fy, fz, fw;
	float sfxa, sfxb, sfxc, sfxd;
	float sfya, sfyb, sfyc, sfyd;
	float sfza, sfzb, sfzc, sfzd;
	float sfwa, sfwb, sfwc, sfwd;

	vluint64_t tx, ty, tz, tw, txb, tyb, tzb, twb;
	vluint64_t grn, egrn, tta, ttb;
	int64_t dst;
	int srng;
	
	int tst, op, ixt, held;
	int n, isz_x, isz_y, isnan_x, isnan_y;
	
	printf("FPU Test\n");
	
	Verilated::commandArgs(argc, argv);

	fx=3.14; fy=2.73;
	tx=*(vluint64_t *)(&fx);
	ty=*(vluint64_t *)(&fy);
	tst=0;
	held=0;
//	srng=0;

	srng=13;
	srng=srng*65521+1;
	srng=srng*65521+1;

	top->exHold=0;

	while (!Verilated::gotFinish())
	{
		top->clock = (main_time>>0)&1;
//		top->mode = 3;

//		top->exHold=0;

		if(srng)
		{
			srng=srng*65521+1;
			if(!srng)srng++;
		}

//		if(top->exOutHold)
//		{
//			top->exInHold=1;
//			top->eval();
//			main_time++;
//			continue;
//		}

		if(top->clock)
		{
			top->eval();
			main_time++;
			continue;
		}
		
		if((srng>>16)&1)
		{
			top->exHold=1;
			top->eval();
			main_time++;
			continue;
		}else
		{
			top->exHold=0;
		}
		
		if(held)
		{
			held--;
			top->eval();
			main_time++;
			continue;
		}

		if(top->opCmdA)
		{
			tz=top->regValRnA;
			tzb=top->regValRnB;

			tta=tx &0xFFFFFF80FFFFFF80ULL;
			ttb=txb&0xFFFFFF80FFFFFF80ULL;
			*(vluint32_t *)(&sfxa)=tta;
			*(vluint32_t *)(&sfxb)=tta>>32;
			*(vluint32_t *)(&sfxc)=ttb;
			*(vluint32_t *)(&sfxd)=ttb>>32;

			tta=ty &0xFFFFFF80FFFFFF80ULL;
			ttb=tyb&0xFFFFFF80FFFFFF80ULL;
			*(vluint32_t *)(&sfya)=tta;
			*(vluint32_t *)(&sfyb)=tta>>32;
			*(vluint32_t *)(&sfyc)=ttb;
			*(vluint32_t *)(&sfyd)=ttb>>32;

			tta=tz &0xFFFFFF80FFFFFF80ULL;
			ttb=tzb&0xFFFFFF80FFFFFF80ULL;
			*(vluint32_t *)(&sfza)=tta;
			*(vluint32_t *)(&sfzb)=tta>>32;
			*(vluint32_t *)(&sfzc)=ttb;
			*(vluint32_t *)(&sfzd)=ttb>>32;

			*(vluint64_t *)(&fx)=tx;
			*(vluint64_t *)(&fy)=ty;
			*(vluint64_t *)(&fz)=tz;
			*(vluint64_t *)(&fw)=tw;

			printf(
				"%02X-%02X\n"
				"Rs    =%016llX-%016llX\n"
				"Rt    =%016llX-%016llX\n"
				"Ro    =%016llX-%016llX\n"
				"Expect=%016llX-%016llX %s/%s\n",
				top->opCmdA, top->regIdIxtA,
				tx, txb,
				ty, tyb,
				tz, tzb,
				tw, twb,
				(tz==tw)?"Pass":"Fail",
				(tzb==twb)?"Pass":"Fail");

			if((ixt&0x30)==0x10)
			{
			}else
				if(((ixt&0x30)==0x30) || ((ixt&0x3C)==0x00))
			{
				printf("S=%f T=%f O=%f E=%f\n",
					fx, fy, fz, fw);
			}else
			{
				printf(	"S=(%f %f %f %f)\n"
						"T=(%f %f %f %f)\n"
						"O=(%f %f %f %f)\n",
					sfxa, sfxb, sfxc, sfxd,
					sfya, sfyb, sfyc, sfyd,
					sfza, sfzb, sfzc, sfzd);
				
				if((ixt&0x0F)==0x05)
				{
					sfwa=sfxa+sfya;
					sfwb=sfxb+sfyb;
					sfwc=sfxc+sfyc;
					sfwd=sfxd+sfyd;
				}

				if((ixt&0x0F)==0x06)
				{
					sfwa=sfxa-sfya;
					sfwb=sfxb-sfyb;
					sfwc=sfxc-sfyc;
					sfwd=sfxd-sfyd;
				}

				if((ixt&0x0F)==0x07)
				{
					sfwa=sfxa*sfya;
					sfwb=sfxb*sfyb;
					sfwc=sfxc*sfyc;
					sfwd=sfxd*sfyd;
				}

				*(vluint32_t *)(&sfwa)=*(vluint32_t *)(&sfwa)&0xFFFFFF80U;
				*(vluint32_t *)(&sfwb)=*(vluint32_t *)(&sfwb)&0xFFFFFF80U;
				*(vluint32_t *)(&sfwc)=*(vluint32_t *)(&sfwc)&0xFFFFFF80U;
				*(vluint32_t *)(&sfwd)=*(vluint32_t *)(&sfwd)&0xFFFFFF80U;
				printf("p=(%f %f %f %f)\n", sfwa, sfwb, sfwc, sfwd);
			}

			printf("\n");

			top->opCmdA=0x00;
			top->regIdIxtA=0;
			tst++;

			op=fputest[tst].cmd;
			if(!op)
			{
				if(srng)
					break;
				
				printf("\nStart RNG\n\n");
				srng=13;
				srng=srng*65521+1;
				srng=srng*65521+1;
				tst=0;
			}
		}else
		{
			op=fputest[tst].cmd;
			ixt=fputest[tst].ixt;

			tx=fputest[tst].x1;
			ty=fputest[tst].y1;
			tw=fputest[tst].z1;

			txb=fputest[tst].x2;
			tyb=fputest[tst].y2;
			twb=fputest[tst].z2;

//			twb=tw;
//			egrn=fputest[tst].grn;
			
			if(!op)
				break;
		
			top->opCmdA=op;
			top->regIdIxtA=ixt;

			top->regValRsA=tx;
			top->regValRtA=ty;

			top->regValRsB=txb;
			top->regValRtB=tyb;

			held=1;
		}

		top->eval();

		main_time++;
		
//		if(main_time>256)
		if(main_time>8192)
		{
			break;
		}
	}

	delete top;
	exit(0);
}

// verilator -Wall --cc our.v --exe sim_main.cpp
