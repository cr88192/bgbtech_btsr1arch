General:
* This is a spec for the Testkern PE/COFF and PEL4 variants.


== PELZ ==

PELZ: LZ compressed PE/COFF

Overview:
* Omits the MZ header or stub.
** An MZ header may be present, but is not allowed if PEL is used.
** An MZ stub will be present for conventional PE/COFF.
* PELZ uses the magic "PELn" rather than "PE\0\0"
** If the normal "PE" magic is used, it is interpreted as uncompressed PE/COFF.
** The first 1kB is stored in an uncompressed form.
** The remainder of the image is compressed using an LZ variant.
*** This is done in terms of 1kB blocks.
** PEL0 will use the PEL0 magic, and will be uncompressed.
** PEL3 will use the PEL3 magic, and use RP2 encoding.
** PEL4 will use the PEL4 magic, and use LZ4 encoding.
** The last character of the FOURCC will effectively be a method number.
*** '0'..'9': 0..9
*** 'A'..'Z': 10..35
*** 'a'..'z': 36..61
* Assumes that RVA and uncompressed offsets are equivalent for resident sections.
** The ".bss" is an partial exception to this rule.
*** The ".bss" section may overlap other non-resident sections.

The LZ encoding is applied at the image level, and as such the image is unpacked prior to subsequent initialization. The PE headers are kept in an uncompressed form so that a loader can know where things need to go in memory without needing to unpack into a secondary intermediate buffer.

Once unpacked, a PEL image is otherwise an ordinaty PE image.

=== Uncompressed (PEL0) ===

This will not use any LZ encoding.
It will be otherwise functionally equivalent to using the "PE\0\0" magic.


=== RP2 LZ Encoding (PEL3) ===

PEL3 will use a very similar structure to PEL4, but will use a different LZ scheme (RP2).

BtRP2 (Transposed, LE):
*                   dddddddd-dlllrrr0	(l=3..10, d=0..511, r=0..7)
*          dddddddd-dddddlll-lllrrr01	(l=4..67, d=0..8191)
* dddddddd-dddddddd-dlllllll-llrrr011	(l=4..515, d=0..131071)
*                            rrrr0111	(Raw Bytes, r=(r+1)*8, 8..128)
*                          * rrr01111	(Long Match)
*                            rr011111	(r=1..3 bytes, 0=EOB)
*                   rrrrrrrr-r0111111 	(Long Raw, r=(r+1)*8, 8..4096)
** d: Distance
** l: Match Length
** r: Literal Length

Values are encoded in little-endian order, with tag bits located in the LSB. Bits will be contiguous within the value, with shift-and-mask being used to extract individual elements.

Long Match will encode length and distance using variable-length encodings directly following the initial tag byte.

Length VLN:
*          lllllll0,   4..  131
* llllllll-llllll01, 132..16383

Distance VLN:
*          dddddddd-ddddddd0, 32K (0..32767)
* dddddddd-dddddddd-dddddd01,  4M


=== LZ4 Encoding (PEL4) ===

PEL4 will used a variant of LZ4, organized in terms of 1K blocks.
Each block will be decoded separately, with the decoded contents being concatenated into the final image. The sliding window will be shared between blocks.

Consists of a series of LZ runs, each potentially encoding a series of literal bytes.

Each run begins with a tag byte:
* High 4 bits: Length of literal bytes (0-14 bytes)
* Low 4 bits: Length of LZ Match (4-18 bytes)

If the 4 bits for a length are 15, then a variable length coding is used. This consists of zero or more values of 255, and is terminated by a value which is not 255. Each adds 255 to the prior value (in addition to the 15 or 19 due to the tag byte).

The tag byte and literal length is then followed by a run of zero or more literal bytes. These bytes are copied to the output as-is.

After the literal bytes, a distance is encoded as a 16-bit little endian integer.
This value has a range of 1 to 65535.

The distance is then, if applicable, followed by the variable-length part of a match length.

The match is copied relative to the current output byte, with the distance encoding how far back the match is (up to 64kB), and the length the number of bytes to copy to the output. This match copy may overlap with the output (if the distance is less than the length), in which case it will form a repeating pattern (RLE). In this sense, the prior 64kB are seen as a "sliding window".

Note that at the start of decoding, reading from bytes prior to the start of the output is undefined.


A distance value of 0 is special, and if encoded may signal the end of the input or a special escape sequence.

In a special, the low 4 bits of the tag byte may be interpreted as a command:
* 0: End of Data.
* 1: Raw Literal Data (No match copy).
* 2-14: Reserved.
* 15: Will escape a longer command, also reserved.
** The command tag encoding will be equivalent to that of a length.

Ending the encoded data prior to the end of a block will imply that the compressed data for the binary image has ended.


Blocks prior to the final block will terminate on the block edge. If a match distance would fall at or past the end of a block, then the encoded data for the block will terminate at this point.

Note that each block is to be handled separately, and as such a run of literal bytes may not cross a block boundary. As such, a run of literal bytes ending at 0x3FF or 0x400 will encode the end of a block.

A 1 byte tolerance is allowed because it may not be possible in all cases to end the run exactly on a block edge.


=== LZ4LLB Encoding (PEL6) ===

LZ4LLB will be a length-limited variant of LZ4.
This case will be otherwise equivalent to the normal LZ4 case.


=== Image Checksum ===

Traditional PE/COFF images will use the traditional PE/COFF checksum algorithm.

PELZ images will use a modified checksum.

 u32 TKPE_CalculateImagePel4BChecksum(byte *buf, int size)
 {
 	byte *cs, *cse;
 	u32 csum, v0, v1, v2, v3;
 	u64 acc_lo, acc_hi;
 	cs=buf;		cse=cs+size;
 	acc_lo=1;	acc_hi=0;
 	while(cs<cse)
 	{
 		v0=get_u32le(cs+0);	v1=get_u32le(cs+ 4);
 		v2=get_u32le(cs+8);	v3=get_u32le(cs+12);
 		acc_lo=acc_lo+v0;	acc_hi=acc_hi+acc_lo;
 		acc_lo=acc_lo+v1;	acc_hi=acc_hi+acc_lo;
 		acc_lo=acc_lo+v2;	acc_hi=acc_hi+acc_lo;
 		acc_lo=acc_lo+v3;	acc_hi=acc_hi+acc_lo;
 		cs+=16;
 	}
 	acc_lo=((u32)acc_lo)+(acc_lo>>32);
 	acc_lo=((u32)acc_lo)+(acc_lo>>32);
 	acc_hi=((u32)acc_hi)+(acc_hi>>32);
 	acc_hi=((u32)acc_hi)+(acc_hi>>32);
 	csum=(u32)(acc_lo^acc_hi);
 	return(csum);
 }

The output will be padded to a multiple of 16 bytes.
If used with data that is not a multiple of 16 bytes, then the data is to be padded with zeroes.

The checksum will be computed with the magic set to 'PE\0\0'.


== PE Main Headers ==

<pre>
struct PeMzHeader
{
//0000: MZ Header
    WORD  mMagicMz;                     //0000: 'MZ'
    WORD  mResv0;                       //0002: Reserved (0)
    DWORD mResv1;                       //0004: Reserved (0)
    DWORD mResv2;                       //0008: Reserved (0)
    DWORD mResv3;                       //000C: Reserved (0)
    DWORD mResv4;                       //0010: Reserved (0)
    DWORD mResv5;                       //0014: Reserved (0)
    DWORD mResv6;                       //0018: Reserved (0)
    DWORD mResv7;                       //001C: Reserved (0)
    DWORD mResv8;                       //0020: Reserved (0)
    DWORD mResv9;                       //0024: Reserved (0)
    DWORD mResv10;                      //0028: Reserved (0)
    DWORD mResv11;                      //002C: Reserved (0)
    DWORD mResv12;                      //0030: Reserved (0)
    DWORD mResv13;                      //0034: Reserved (0)
    DWORD mResv14;                      //0038: Reserved (0)
    DWORD lfaNew;                       //003C: Address of PE header
};

struct PeMainHeader
{
//0000: PE/COFF Header
    DWORD mMagicPe;                     //0000: PE\0\0 or 0x00004550
    WORD  mMachine;                     //0004:
    WORD  mNumberOfSections;            //0006:
    DWORD mTimeDateStamp;               //0008: (Creation Time, Unix Time)
    DWORD mPointerToSymbolTable;        //000C: (Unused, 0)
    DWORD mNumberOfSymbols;             //0010: (Unused, 0)
    WORD  mSizeOfOptionalHeader;        //0014: Size of rest of header.
    WORD  mCharacteristics;             //0016:

//0018: Optional Header
    WORD  mMagic;                       //0018: 0x010b=PE32
    BYTE  mMajorLinkerVersion;          //001A: (Ignore)
    BYTE  mMinorLinkerVersion;          //001B: (Ignore)
    DWORD mSizeOfCode;                  //001C:
    DWORD mSizeOfInitializedData;       //0020:
    DWORD mSizeOfUninitializedData;     //0024:
    DWORD rvaAddressOfEntryPoint;       //0028:
    DWORD mBaseOfCode;                  //002C:
    DWORD mBaseOfData;                  //0030:
    DWORD mImageBase;                   //0034:
    DWORD mSectionAlignment;            //0038:
    DWORD mFileAlignment;               //003C:
    WORD  mMajorOperatingSystemVersion; //0040: (Ignore?)
    WORD  mMinorOperatingSystemVersion; //0042: (Ignore?)
    WORD  mMajorImageVersion;           //0044: (Ignore?)
    WORD  mMinorImageVersion;           //0046: (Ignore?)
    WORD  mMajorSubsystemVersion;       //0048: (Ignore?)
    WORD  mMinorSubsystemVersion;       //004A: (Ignore?)
    DWORD mWin32VersionValue;           //004C: (Ignore?)
    DWORD mSizeOfImage;                 //0050:
    DWORD mSizeOfHeaders;               //0054:
    DWORD mCheckSum;                    //0058: Image Checksum
    WORD  mSubsystem;                   //005C: (Ignore?)
    WORD  mDllCharacteristics;          //005E: (Ignore?)
    DWORD mSizeOfStackReserve;          //0060:
    DWORD mSizeOfStackCommit;           //0064:
    DWORD mSizeOfHeapReserve;           //0068: (NOMMU?)
    DWORD mSizeOfHeapCommit;            //006C: (NOMMU?)
    DWORD mLoaderFlags;                 //0070: (Reserved, 0)
    DWORD mNumberOfRvaAndSizes;         //0074: Number of Data Directory Entries

//0078: Data Directories
    DWORD rvaExportTable;               //0078: Export Table
    DWORD szExportTable;                //007C:
    DWORD rvaImportTable;               //0080: Import Table
    DWORD szImportTable;                //0084:
    DWORD rvaResourceTable;             //0088: Resource Table
    DWORD szResourceTable;              //008C:
    DWORD rvaExceptionTable;            //0090: Exception Table
    DWORD szExceptionTable;             //0094:
    DWORD rvaCertTable;                 //0098: Certificate Table
    DWORD szCertTable;                  //009C:
    DWORD rvaBaseRelocTable;            //00A0: Base Relocations
    DWORD szBaseRelocTable;             //00A4:
    DWORD rvaDebugData;                 //00A8: Debug Data
    DWORD szDebugData;                  //00AC:
    DWORD rvaArchData;                  //00B0: Arch Data
    DWORD szArchData;                   //00B4:
    DWORD rvaGlobalPtr;                 //00B8: Global Pointer Base (BJX2: PBO)
    DWORD szGlobalPtr;                  //00BC: Size of PBO Data Sections
    DWORD rvaTlsTable;                  //00C0: TLS Table
    DWORD szTlsTable;                   //00C4:
    DWORD rvaLoadConfigTable;           //00C8: ?
    DWORD szLoadConfigTable;            //00CC:
    DWORD rvaBoundImportTable;          //00D0: ?
    DWORD szBoundImportTable;           //00D4:
    DWORD rvaImportAddressTable;        //00D8: Import Address Table
    DWORD szImportAddressTable;         //00DC:
    DWORD rvaDelayImportTable;          //00E0: Delay Import Table
    DWORD szDelayImportTable;           //00E4:
    DWORD rvaClrHeader;                 //00E8: CLR/VM Header
    DWORD szClrHeader;                  //00EC:
    DWORD rvaResvTable;                 //00F0: Reserved
    DWORD szResvTable;                  //00F4:
//00F8:End of Header
};


struct PeMainHeader64
{
//0000: PE/COFF Header
    DWORD mMagicPe;                     //0000: PE\0\0 or 0x00004550
    WORD  mMachine;                     //0004:
    WORD  mNumberOfSections;            //0006:
    DWORD mTimeDateStamp;               //0008: (Creation Time, Unix Time)
    DWORD mPointerToSymbolTable;        //000C: (Unused, 0, Loaded Image Index)
    DWORD mNumberOfSymbols;             //0010: (Unused, 0)
    WORD  mSizeOfOptionalHeader;        //0014: Size of rest of header.
    WORD  mCharacteristics;             //0016:

//0018: Optional Header
    WORD  mMagic;                       //0018: 0x020b=PE32+
    BYTE  mMajorLinkerVersion;          //001A: (Ignore)
    BYTE  mMinorLinkerVersion;          //001B: (Ignore)
    DWORD mSizeOfCode;                  //001C:
    DWORD mSizeOfInitializedData;       //0020:
    DWORD mSizeOfUninitializedData;     //0024:
    DWORD rvaAddressOfEntryPoint;       //0028:
    DWORD mBaseOfCode;                  //002C:
    QWORD mImageBase;                   //0030:
    DWORD mSectionAlignment;            //0038:
    DWORD mFileAlignment;               //003C:
    WORD  mMajorOperatingSystemVersion; //0040: (Ignore?)
    WORD  mMinorOperatingSystemVersion; //0042: (Ignore?)
    WORD  mMajorImageVersion;           //0044: (Ignore?)
    WORD  mMinorImageVersion;           //0046: (Ignore?)
    WORD  mMajorSubsystemVersion;       //0048: (Ignore?)
    WORD  mMinorSubsystemVersion;       //004A: (Ignore?)
    DWORD mWin32VersionValue;           //004C: (Ignore?)
    DWORD mSizeOfImage;                 //0050:
    DWORD mSizeOfHeaders;               //0054:
    DWORD mCheckSum;                    //0058: Image Checksum
    WORD  mSubsystem;                   //005C: (Ignore?)
    WORD  mDllCharacteristics;          //005E: (Ignore?)
    QWORD mSizeOfStackReserve;          //0060:
    QWORD mSizeOfStackCommit;           //0068:
    QWORD mSizeOfHeapReserve;           //0070: (NOMMU?)
    QWORD mSizeOfHeapCommit;            //0078: (NOMMU?)
    DWORD mLoaderFlags;                 //0080: (Reserved, 0)
    DWORD mNumberOfRvaAndSizes;         //0084:

//0088: Data Directories
    DWORD rvaExportTable;               //0088:
    DWORD szExportTable;                //008C:
    DWORD rvaImportTable;               //0090:
    DWORD szImportTable;                //0094:
    DWORD rvaResourceTable;             //0098:
    DWORD szResourceTable;              //009C:
    DWORD rvaExceptionTable;            //00A0:
    DWORD szExceptionTable;             //00A4:
    DWORD rvaCertTable;                 //00A8:
    DWORD szCertTable;                  //00AC:
    DWORD rvaBaseRelocTable;            //00B0:
    DWORD szBaseRelocTable;             //00B4:
    DWORD rvaDebugData;                 //00B8:
    DWORD szDebugData;                  //00BC:
    DWORD rvaArchData;                  //00C0:
    DWORD szArchData;                   //00C4:
    DWORD rvaGlobalPtr;                 //00C8:
    DWORD szGlobalPtr;                  //00CC:
    DWORD rvaTlsTable;                  //00D0:
    DWORD szTlsTable;                   //00D4:
    DWORD rvaLoadConfigTable;           //00D8:
    DWORD szLoadConfigTable;            //00DC:
    DWORD rvaBoundImportTable;          //00E0:
    DWORD szBoundImportTable;           //00E4:
    DWORD rvaImportAddressTable;        //00E8:
    DWORD szImportAddressTable;         //00EC:
    DWORD rvaDelayImportTable;          //00F0:
    DWORD szDelayImportTable;           //00F4:
    DWORD rvaClrHeader;                 //00F8:
    DWORD szClrHeader;                  //00FC:
    DWORD rvaResvTable;                 //0100:
    DWORD szResvTable;                  //0104:
//0108:End of Header
};
</pre>

Machine:
* x86-32:   0x014C
* x86-64:   0x8664
* ARM:      0x01C0
* SH-3:     0x01A2
* SH-DSP:   0x01A3
* SH-4:     0x01A6
* SH-5:     0x01A8
* BJX1-32:  0xB132 (Old)
* BJX1-64:  0xB164 (Old)
* BJX1-64C: 0xB64C (Old)
* BJX2-32:  0xB232 (Resv)
* BJX2-64:  0xB264

The Image starts with an 'MZ' header for traditional PE/COFF.

This header is unused and the image will begin directly at the 'PE' header in Testkern PE and PEL4 images.

Following initial loading, TestKern may use mPointerToSymbolTable as a handle index for the loaded program binary.


=== Section Headers ===

The main PE header are followed by section headers.

<pre>
struct PeSectionHeader
{
    BYTE  mName[8];                     //0000, Section Name
    DWORD mVirtualSize;                 //0008, Size of section in memory
    DWORD mVirtualAddress;              //000C, RVA Address of section in memory
    DWORD mSizeOfRawData;               //0010, Size of section in image
    DWORD mPointerToRawData;            //0014, Offset to section data in image
    DWORD mPointerToRealocations;       //0018, Unused, Zero
    DWORD mPointerToLinenumbers;        //001C, Unused, Zero
    WORD  mNumberOfRealocations;        //0020, Unused, Zero
    WORD  mNumberOfLinenumbers;         //0022, Unused, Zero
    DWORD mCharacteristics;             //0024, Section Flags
    //28
};
</pre>

In Testkern PE and PEL4 images, (mPointerToRawData==mVirtualAddress) for sections where (mSizeOfRawData!=0). Sections are aligned to a multiple of their base alignment.

Section names are limited to 8 characters in PE image files.

Section Flags:
* 0x00000001, Reserved
* 0x00000002, Reserved
* 0x00000004, Reserved
* 0x00000008, NO_PAD
* 0x00000010, Reserved
* 0x00000020, CNT_CODE, Contains code
* 0x00000040, CNT_INITIALIZED_DATA, Contains initialized data
* 0x00000080, CNT_UNINITIALIZED_DATA, Contains uninitialized data
* 0x00000100, Reserved
* 0x00000200, Reserved
* 0x00000400, Reserved
* 0x00000800, Reserved
* 0x00001000, Reserved
* 0x00002000, Reserved
* 0x00004000, Reserved
* 0x00008000, GPREL (BJX2 PBO: Relative to GBR / PBO Base)
* 0x00010000, Reserved
* 0x00020000, Reserved
* 0x00040000, Reserved
* 0x00080000, Reserved
* 0x00100000, Align Bit1
* 0x00200000, Align Bit2
* 0x00400000, Align Bit3
* 0x00800000, Align Bit4
* 0x01000000, NRELOC, Reloc
* 0x02000000, DISCARDABLE, Discardable
* 0x04000000, NOT_CACHED, Not Cached
* 0x08000000, NOT_PAGED, Not Paged
* 0x10000000, MEM_SHARED, Can be Shared
* 0x20000000, MEM_EXECUTE, Can be Executed
* 0x40000000, MEM_READ, Can be Read from
* 0x80000000, MEM_WRITE, Can be Written to


=== Base Relocations ===

Relocations:
<pre>
struct PeRelocBlock
{
    DWORD rvaPage;        //RVA of Page to be relocated
    DWORD szBlock;        //Size of relocs in this block
};
</pre>

The szBlock field is expressed in bytes. It includes the size of the RelocBlock header in addition to the associated reloc entries.

The relocations are given as 16 bit numbers:
* Low 12 bits: Offset within page.
* High 4 bits: Relocation Type
** 0: None
** 1(HI16): Fixup the high 16 bits of an address
** 2(LO16): Fixup the low 16 bits of an address
** 3(DIR32): Fixup a 32-bit address (Abs32)
** 4(HIADJ): Fixup a 32 bit address split into a high and low part.
*** The following entry gives the address of the low part.
** 5: MIPS-specific fixup.
*** 5: BJX2(DIR24/DIR48): Fixup 24 or 48 address via instruction.
*** FAxx/FBxx: DIR24
*** FExx/FFxx: DIR48
** 6: BJX2: TLS/TBR DISP12 (Azzz)
** 7: BJX2: PBO/GBR DISP32 (FAzz_zzzz-26zz)
** 8: BJX2: PBO/GBR DISP24 (FAzz_zzzz)
*** Initial Contents: Variable address relative to the PBO base address.
** 9: MIPS-specific fixup.
** 9: BJX2: TLS/TBR DISP24 (FAzz_zzzz)
*** Initial: TLS Index, Resolved to TBR-relative address of TLS Variable
** 10: Fixup a 64-bit address (Abs64).
** 11: Set Tripwire
** 12: Reserved
** 13: Reserved
** 14: Reserved
** 15: Reserved

TLS Index:
* This is a pointer-sized scaled index indicating a given TLS Variable.
* The index 0 will be special and correspond to the PBO Base Offset Index.
** This case will be interpreted as being relative to GBR, not TBR.
* This will be replaced by the relative offset of the corresponding variable.

Set Tripwire (PBO Only):
* This address should be set as a tripwire following initialization.
* Attempts to address across this location may trigger a fault.
** A tripwire will normally have a 16-byte alignment and 16-byte size.


=== Exports Table ===

This is located within the '.edata' section, and referenced via the optional header.

<pre>
struct PeExportDirectory
{
    DWORD mExportFlags;                 //0x00, export flags
    DWORD mTimeDate;                    //0x04, time/date
    WORD mMajorVersion;                 //0x08, major version
    WORD mMinorVersion;                 //0x0A, minor version
    DWORD rvaDllName;                   //0x0C, name RVA
    DWORD mOrdinalBase;                 //0x10, ordinal base
    DWORD mNumberAddressEntries;        //0x14, address table entries
    DWORD nNumberNameEntries;           //0x18, number of name pointers
    DWORD rvaExportAddressTable;        //0x1C, export address table RVA
    DWORD rvaNamePointerTable;          //0x20, name pointer table RVA
    DWORD rvaOrdinalTable;              //0x24, ordinal table RVA
};
</pre>

rvaDllName:
* RVA of a string holding the name of the current DLL.

mOrdinalBase:
* Starting index for the ordinal table, normally 1.

Export Address Table:
* Array of exported addresses (RVA32).
* If the address is within '.edata', it is a forwarder string.
* This table is indexed by ordinal (relative to OrdinalBase).

ExportNamePointerTable and ExportOrdinalTable
* These are used together to find exported symbols.
* ExportNamePointerTable holds addresses to the exported names as strings (RVA).
** Each entry in the Export Name Table is a 32-bit RVA.
* ExportOrdinalTable maps these names to ordinal indices.
** Each entry in the ordinal table is a 16-bit Word.


=== Imports Table ===

This is located within the '.idata' section, and referenced via the optional header.


<pre>
struct PeImportDirectory
{
    DWORD rvaImportLookupTable;         //0x00
    DWORD mTimeDate;                    //0x04
    DWORD mForwarderIndex;              //0x08
    DWORD rvaDllName;                   //0x0C
    DWORD rvaImportAddressTable;        //0x10
};
</pre>

rvaDllName:
* ASCII string identifying the base-name of the DLL.
* This omits both path and file extension.

rvaImportLookupTable:
* Table of pointer-sized values.
* Each Encodes an Name/Hint RVA or Ordinal.

rvaImportAddressTable:
* Initially same contents as Import Lookup Table.
* Each entry is replaced by the address of the imported symbol.

Imports are given by a Name/Hint string:
* Consists of a properly aligned WORD giving a lookup-index hint.
* The hint is followed by an ASCII string giving the name of the imported symbol.
* Located within the '.idata' section.


=== TLS Directory ===

Located in ".tls" section if TLS is used.
The format of the TLS Directory will differ slightly from mainline PE/COFF.

<pre>
struct PeTlsDirectory
{
    DWORD rvaRawDataStart;              //0x00, RVA of Raw Data Start
    DWORD rvaRawDataEnd;                //0x04, RVA of Raw Data End
    DWORD rvaAddressOfIndex;            //0x08, RVA of TLS Index
    DWORD rvaAddressCallbacks;          //0x0C, RVA of callbacks
    DWORD szSizeOfZeroFill;             //0x10, Size of TLS Region
    DWORD mCharacteristics;             //0x14, Flags
};
</pre>

rvaAddressOfIndex:
* Address of a slot used to hold the TLS Index.
* The pointed-to address may be initialized with the RVA of a string identifying the TLS section.

rvaAddressCallbacks:
* Optional array of callback functions for thread creation and destruction.
* Testkern: Ignored.

Upon thread creation, a TLS section is allocated and its address is assigned to its associated TLS variable index.

The allocated region has a size given by the szSizeOfZeroFill variable.

If rvaRawDataStart is non-zero, it will define the start of a region used to
initialize the allocated TLS region.


=== Exception Handling ===

Exception handler data will be present in the ".pdata" section.

<pre>
struct PePData
{
    DWORD rvaFuncAddress;               //RVA of Function Entry
    DWORD szFuncLength;                 //Length of Function
};
</pre>

szFuncLength:
* ( 7: 0): Prolog Length
* (29: 8): Length of function in WORD or DWORD units.
* (   30): Set to indicate a DWORD instruction unit, otherwise WORD.
** BJX2: Will be Set for the Fixed32 subset.
** BJX2: Will be Clear otherwise.
* (   31): Set to indicate an exception handler exists.

Directly following the end of the function, there will be the entry point for either an exception handler or an unwind sequence. The unwind sequence may in turn reuse the function's epilog sequence.

If no exception handler is present, the function will be unwound following the pattern given in the prolog or epilog sequence. Otherwise, control will be transferred to the exception handler. The exception handler then will be responsible subsequent dispatching or unwinding.

For the exception handler or unwind entry point:
* R4: Target address to return to unwind logic.
* (TBR, 0x30): Exception Object
* (TBR, 0x38): Exception Unwind Vars (Array Pointer)
* (TBR, 0x40): Saved LR goes Here.


=== Global Pointer ===

In BJX2 PBO Mode, this will encode the base address (generally to the start of the ".data" section or similar), used as the base address for GBR. The size will encode the combined length of these sections in this case.

Using this entry in this way will indicate that the image is intended to operate in PBO Mode, otherwise these entries will be set to zero.


=== CLR / VM Header ===

Traditionally used for the CLR.

May be used for other VMs which also use PE/COFF.
This section will begin with a FOURCC or similar indicating the VM image type.

Note that the VM will be itself responsible for launching itself as an interpreter for appropriate images. The use of this header is, as such, VM specific.


=== Resources and RWAD ===

May be either a traditional Windows Resource Format or RWAD.

<pre>
struct PeResourceHeader
{
    DWORD mFlags;                       //00 Flags
    DWORD mDateTime;                    //04, Data/Time Compiled
    WORD  mMajorVersion;                //08, Major Version (User Defined)
    WORD  mMinorVersion;                //0A, Minor Version (User Defined)
    WORD  mNumNamedEntries;             //0C, Number of Named Entries
    WORD  mNumIdEntries;                //0E, Number of ID Numbered Entries
};

struct PeResourceDirEntry
{
    DWORD mNameOrID;                    //Name or ID Number
    DWORD ofsData;                      //Offset of Data or Subdirectory
};

struct PeResourceDataEntry
{
    DWORD rvaData;                      //RVA of Data
    DWORD szData;                       //Size of Data
    DWORD mCodepage;                    //Codepage or Encoding for Data
    DWORD mResv;                        //Reserved
};
</pre>

Data Offsets are relative to the start of the resource section.
The high order bits are special and used for tags.
* If ofsData has bit 31 set, it is a directory.
** Otherwise, it is a data entry.

Named entries use offsets to length-prefixed UCS-2 strings.

The directory entries will directly follow the header, and will be stored sorted by ID or by Name.


ID numbers between 0x20000000 and 0x7F000000 will be interpreted as FOURCC values, in which case all characters will be required to be in printable ASCII range.


==== RWAD ====

RWAD will use the above resource headers to daisy-chain a WAD variant.

<pre>
struct PeRsrcRWadInlineHeader
{
    DWORD mFlags;                       //00, Flags
    DWORD mDateTime;                    //04, Data/Time Compiled
    DWORD fccMagic;                     //08, 'RWAD'
    DWORD mMagicZero;                   //0C, Magic (Set to 0)
    DWORD rvaDir;                       //10, RVA of Directory
    DWORD szDir;                        //14, Size of Directory (Bytes)
    DWORD rvaTypes;                     //18, RVA of Types
    DWORD szTypes;                      //1C, Size of Types
    DWORD rvaHead;                      //20, RVA of Header (Self-Reference)
    DWORD szHead;                       //24, Size of Header (Self-Refernece)
};

struct PeRsrcRWadEntry
{
    DWORD rvaData;                      //RVA of Lump Data
    DWORD cszData;                      //Compressed Size of Lump Data
    DWORD dszData;                      //Uncompressed Size of Lump Data
    BYTE  mType;                        //Lump Type
    BYTE  mMethod;                      //Lump Compression Method
    WORD  mChain;                       //Lump Lookup Chain.
    BYTE  mName[16];                    //Name of Lump
};
</pre>

There will be one of several ways to encode an RWAD Image:
* As a hybrid RWAD/Resource Image
* As a direct RWAD image via the Inline Header

An Hybrid RWAD will consist of a resource entry with an RWAD ID, and the Data Entry will define the RWAD directory. These will be present in the top-level Resource directory. The RWAD structure will be superficially similar to that of a heirarchical filesystem.

The RWAD ID's will be FOURCC's with defined names:
* 'RWAD' (0x44415752): RWAD Directory.
* 'RWAZ' (0x5A415752): RWAD Lump Types

The 'RWAZ' Entry will be shared, consisting of a table of up to 256 entry types.
* Each entry type is given as a FOURCC.
** These nominally correspond to a file extension.
** Extensions with fewer than 4 characters are padded with spaces.
** Extensions encoded via this mechanism will be limited to 4 characters.
* Unused entries are filled with zeroes.

The 'RWAD' Entry will give the directoy was a series of RWAD directoy entries.

mType:
* 0: Generic File (Inline Name)
** Will use an explicit file extension if needed.
* 1: Directory
** Points to an array of RWAD directory entries.
* 2: Generic File (RVA Name)
* 3: Directory (RVA Name)
* 4-31: Special, Reserved
* 32-255: Will refer to a table of known file types/extensions.
** The lump name will not include a file extension.

mMethod:
* 0: Store
* 3: RP2
* 4: LZ4
* 8: Deflate
* 9: Deflate64
* 10: BTLZH

For many lumps, it may make sense to store them in an uncompressed form, which may allow getting a pointer to them without needing to allocate a buffer.

mChain:
* May be used as a lookup chain.
* This will point to the next lump in the sequence.
* The hash will be 64 word values stored following the directory.
** They will point to the first entry in each chain.
** 0xFFFF will denote the end of a chain, or an empty chain.
* Hash function:
** Add up each DWORD (4 characters, little endian) of the name.
** Multiply the value by 15813251 (F14A83).
** / Multiply the value by 16113158 (F5DE06).
** Shift the value right by 24 bits.
** Mask the value by 63.


mName:
* Conventionally stored as ASCII or UTF-8 and padded with zeroes.
* Nominally stored as lower-case, case sensitive.
* Names longer than the 16 char limit may be escaped.
** The name will hold an RVA in the first 4 bytes.
* File-like lumps will typically omit the use of file extensions.
** If the type is 0, the extension may be encoded explicitly.
** A lump of type 0 with no extension will be "Unknown".
* This field may also be used to hold a GUID.
** The use of a name or GUID is context dependent.
** An inline (UTF-8) name may not be used if it matches a valid GUID.


The types table will be an array of FOURCC values with the first entry corresponding to mType 32.

Known resource types represented as FOURCC values will be use capitalized names, whereas FOURCC's corresponding to generic file extensions will use lower case.

A few type FOURCC's will be defined:
* 'BMP ': Bitmap Image, Using the DIB BMP format.
* 'WAV ': WAV audio format.
* 'AVI ': AVI video format.

