WAD2(A) is a container format holding a series of 'lumps'.
* Each lump has a 16 character name.
* It is closely related to the Quake WAD2 format.

 Header {
 	FOURCC	magic;		//00: 'WAD2'
 	U32		numlumps;	//04: Number of lumps in the directory.
 	U32		diroffs;	//08: Offset of directory, in bytes
 	U32		typeoffs;	//0C: Offset of types table
  	U32		resv1;		//10: Reserved
 	U32		resv2;		//14: Reserved
 	FOURCC	intent1;	//18: Intention 1
 	FOURCC	intent2;	//1C: Intention 2
}

The header appears at the start of a file, and encodes the location of the directory.

The types table will be an array of FOURCC values encoding types 0x20..0x7F, or enough space for 96 unique lump types. The FOURCC's will correspond either to known types (all caps), or generic file extensions (lower case). Unused entries are to be set to zero.

If the typeoffs field is set to 0, then no types table is present.


 DirEnt {
 	U32		offs;		//offset of lump data (in bytes)
 	U32		csize;		//compressed size of lump
 	U32		dsize;		//uncompressed size of lump
 	BYTE	ety;		//entry type
 	BYTE	cmp;		//compression method
 	U16		chain;		//lump chain
 	BYTE	name[16];	//name
 }

Entry types:
* 00: Generic
* 01..1F: Special / Reserved types
* 20..7F: Various types, a table may be used to map these to file extensions.
* 80..FF: Reserved

Compression:
* 00: Store
* 01: IDIR (Inline Directory)
* 02: Packed Lump
* 03: RP2
* 04: LZ4
* 05: Reserved
* 06: Reserved
* 07: Reserved
* 08: Deflate
* 09: Deflate64
* 0A: ? BTLZH


Following the directory, there may be a lookup hash.
This hash will consist of 64 entries each of which is 16 bits. These entries will point to the first entry of a search chain, or 0xFFFF if the chain is empty (0xFFFF will also indicated the last entry in a chain).

If the chain field for the first entry in the WAD is 0, then the hash is to be ignored.

Name will be a 16-character name, nominally stored in lower case.


==== Inline Directories ====

A few special cases for names will be defined:
* "x|yyyyyyyyyyyyyy"
* "xx|yyyyyyyyyyyyy"
* "xxx|yyyyyyyyyyyy"
** Where 'x' is a "path prefix" and 'y' is the name.
* The primary name will be limited to 12 to 14 characters.
* The path prefix will be interpreted as a 5 to 15 bit number.
** Each digit is Base32, '0'..'9', 'a'..'v'

A name following this format will be implicitly within a directory identified by the prefix. Names without a prefix will be located in the root directory.

Entry Types with the IDIR method will be interpreted as Inline Directories.
* The offset field will hold the prefix number.
* The size fields will be set to 0.

The IDIR entries defining a directory will be required to exist preceding any lumps which may exist within that directory.


==== Packed Lump ====

This lump has its data packed inside of another lump.
This may be done to get better data compression for small lumps.

The 'offset' field will be split into two sub-fields:
* (31:16): Packed Lump Index
* (15: 0): Offset of the data within the lump.

The lump index will give the index of the lump holding the combined data. Its compression will be applied over the data.

The offset will give the location of the data within this combined lump. Normally, it will be scaled by 64, giving the "data" lump a maximum size of 4MB.


The csize and dsize fields will give the size of the data. These will normally be the same value.
