/*"dhry.h"379*/ typedef enum{Ident_1,Ident_2,Ident_3,Ident_4,Ident_5}
Enumeration;
/*"stdio.h"5*/ int printf(char*str,...);
/*7*/ int strcpy(char*dst,char*src);
int strcmp(char*dst,char*src);
/*"dhry.h"394*/ typedef int One_Thirty;
typedef int One_Fifty;
typedef char Capital_Letter;
typedef int Boolean;
typedef char Str_30[31];
typedef int Arr_1_Dim[50];
typedef int Arr_2_Dim[50][50];
/*402*/ typedef struct record
{
struct record*Ptr_Comp;
Enumeration Discr;
union{
struct{
Enumeration Enum_Comp;
int Int_Comp;
char Str_Comp[31];
}var_1;
struct{
Enumeration E_Comp_2;
char Str_2_Comp[31];
}var_2;
struct{
char Ch_1_Comp;
char Ch_2_Comp;
}var_3;
}variant;
}Rec_Type,*Rec_Pointer;
/*"tests/dhry/dhry_1.c"22*/ Rec_Pointer Ptr_Glob,
Next_Ptr_Glob;
int Int_Glob;
Boolean Bool_Glob;
char Ch_1_Glob,
Ch_2_Glob;
int Arr_1_Glob[50];
int Arr_2_Glob[50][50];
/*31*/ extern char*malloc();
Enumeration Func_1();
/*36*/ Boolean Reg=0;
/*54*/ extern long time();
/*60*/ long Begin_Time,
End_Time,
User_Time;
float Microseconds,
Dhrystones_Per_Second;
/*68*/ void print_float(double val);
void print_float_ss(float val);
/*72*/ main()
/*77*/ {
One_Fifty Int_1_Loc;
One_Fifty Int_2_Loc;
One_Fifty Int_3_Loc;
char Ch_Index;
Enumeration Enum_Loc;
Str_30 Str_1_Loc;
Str_30 Str_2_Loc;
int Run_Index;
int Number_Of_Runs;
/*92*/ Next_Ptr_Glob=(Rec_Pointer)malloc(sizeof(Rec_Type));
/*96*/ Ptr_Glob=(Rec_Pointer)malloc(sizeof(Rec_Type));
/*98*/ printf("%X\n",Next_Ptr_Glob);
printf("%X\n",Ptr_Glob);
/*101*/ Ptr_Glob->Ptr_Comp=Next_Ptr_Glob;
/*103*/ printf("%X\n",Ptr_Glob->Ptr_Comp);
/*106*/ Ptr_Glob->Discr=Ident_1;
Ptr_Glob->variant.var_1.Enum_Comp=Ident_3;
Ptr_Glob->variant.var_1.Int_Comp=40;
strcpy(Ptr_Glob->variant.var_1.Str_Comp,"DHRYSTONE PROGRAM, SOME STRING");
/*111*/ strcpy(Str_1_Loc,"DHRYSTONE PROGRAM, 1\'ST STRING");
/*113*/ printf("%X\n",Ptr_Glob->Ptr_Comp);
/*115*/ Arr_2_Glob[8][7]=10;
/*121*/ printf("\n");
printf("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
printf("\n");
if(Reg)
{
printf("Program compiled with \'register\' attribute\n");
printf("\n");
}
else
{
printf("Program compiled without \'register\' attribute\n");
printf("\n");
}
printf("Please give the number of runs through the benchmark: ");
{
int n;
/*139*/ n=4000000;
/*144*/ Number_Of_Runs=n;
}
printf("\n");
/*148*/ printf("Execution starts, %d runs through Dhrystone\n",Number_Of_Runs);
/*159*/ Begin_Time=time((long*)0);
/*162*/ for(Run_Index=1;Run_Index<=Number_Of_Runs;++Run_Index)
{
/*165*/ Proc_5();
Proc_4();
/*168*/ Int_1_Loc=2;
Int_2_Loc=3;
strcpy(Str_2_Loc,"DHRYSTONE PROGRAM, 2\'ND STRING");
Enum_Loc=Ident_2;
Bool_Glob= !Func_2(Str_1_Loc,Str_2_Loc);
/*174*/ while(Int_1_Loc<Int_2_Loc)
{
Int_3_Loc=5*Int_1_Loc-Int_2_Loc;
/*178*/ Proc_7(Int_1_Loc,Int_2_Loc,&Int_3_Loc);
/*180*/ Int_1_Loc+=1;
}
/*183*/ Proc_8(Arr_1_Glob,Arr_2_Glob,Int_1_Loc,Int_3_Loc);
/*185*/ Proc_1(Ptr_Glob);
for(Ch_Index='A';Ch_Index<=Ch_2_Glob;++Ch_Index)
/*188*/ {
if(Enum_Loc==Func_1(Ch_Index,'C'))
/*191*/ {
Proc_6(Ident_1,&Enum_Loc);
strcpy(Str_2_Loc,"DHRYSTONE PROGRAM, 3\'RD STRING");
Int_2_Loc=Run_Index;
Int_Glob=Run_Index;
}
}
/*199*/ Int_2_Loc=Int_2_Loc*Int_1_Loc;
Int_1_Loc=Int_2_Loc/Int_3_Loc;
Int_2_Loc=7*(Int_2_Loc-Int_3_Loc)-Int_1_Loc;
/*203*/ Proc_2(&Int_1_Loc);
/*206*/ }
/*217*/ End_Time=time((long*)0);
/*220*/ printf("Execution ends\n");
printf("\n");
printf("Final values of the variables used in the benchmark:\n");
printf("\n");
printf("Int_Glob:            %d\n",Int_Glob);
printf("        should be:   %d\n",5);
printf("Bool_Glob:           %d\n",Bool_Glob);
printf("        should be:   %d\n",1);
printf("Ch_1_Glob:           %c\n",Ch_1_Glob);
printf("        should be:   %c\n",'A');
printf("Ch_2_Glob:           %c\n",Ch_2_Glob);
printf("        should be:   %c\n",'B');
printf("Arr_1_Glob[8]:       %d\n",Arr_1_Glob[8]);
printf("        should be:   %d\n",7);
printf("Arr_2_Glob[8][7]:    %d\n",Arr_2_Glob[8][7]);
printf("        should be:   Number_Of_Runs + 10\n");
printf("Ptr_Glob->\n");
printf("  Ptr_Comp:          %d\n",(int)Ptr_Glob->Ptr_Comp);
printf("        should be:   (implementation-dependent)\n");
printf("  Discr:             %d\n",Ptr_Glob->Discr);
printf("        should be:   %d\n",0);
printf("  Enum_Comp:         %d\n",Ptr_Glob->variant.var_1.Enum_Comp);
printf("        should be:   %d\n",2);
printf("  Int_Comp:          %d\n",Ptr_Glob->variant.var_1.Int_Comp);
printf("        should be:   %d\n",17);
printf("  Str_Comp:          %s\n",Ptr_Glob->variant.var_1.Str_Comp);
printf("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
printf("Next_Ptr_Glob->\n");
printf("  Ptr_Comp:          %d\n",(int)Next_Ptr_Glob->Ptr_Comp);
printf("        should be:   (implementation-dependent), same as above\n");
printf("  Discr:             %d\n",Next_Ptr_Glob->Discr);
printf("        should be:   %d\n",0);
printf("  Enum_Comp:         %d\n",Next_Ptr_Glob->variant.var_1.Enum_Comp);
printf("        should be:   %d\n",1);
printf("  Int_Comp:          %d\n",Next_Ptr_Glob->variant.var_1.Int_Comp);
printf("        should be:   %d\n",18);
printf("  Str_Comp:          %s\n",Next_Ptr_Glob->variant.var_1.Str_Comp);
/*258*/ printf("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
printf("Int_1_Loc:           %d\n",Int_1_Loc);
printf("        should be:   %d\n",5);
printf("Int_2_Loc:           %d\n",Int_2_Loc);
printf("        should be:   %d\n",13);
printf("Int_3_Loc:           %d\n",Int_3_Loc);
printf("        should be:   %d\n",7);
printf("Enum_Loc:            %d\n",Enum_Loc);
printf("        should be:   %d\n",1);
printf("Str_1_Loc:           %s\n",Str_1_Loc);
printf("        should be:   DHRYSTONE PROGRAM, 1\'ST STRING\n");
printf("Str_2_Loc:           %s\n",Str_2_Loc);
printf("        should be:   DHRYSTONE PROGRAM, 2\'ND STRING\n");
printf("\n");
/*273*/ User_Time=End_Time-Begin_Time;
printf("User_Time=%d\n",User_Time);
/*276*/ if(User_Time<2)
{
printf("Measured time too small to obtain meaningful results\n");
printf("Please increase number of runs\n");
printf("\n");
}
else
{
/*285*/ Microseconds=(float)User_Time*1000000.0
/(float)Number_Of_Runs;
Dhrystones_Per_Second=(float)Number_Of_Runs/(float)User_Time;
/*294*/ printf("Microseconds for one run through Dhrystone: ");
/*296*/ printf("%6.1f \n",(double)Microseconds);
/*302*/ printf("Dhrystones per Second:                      ");
/*304*/ printf("%6.1f \n",(double)Dhrystones_Per_Second);
/*309*/ printf("\n");
}
/*312*/ }
/*315*/ Proc_1(Ptr_Val_Par)
/*318*/ Rec_Pointer Ptr_Val_Par;
/*320*/ {
Rec_Pointer Next_Record=Ptr_Val_Par->Ptr_Comp;
/*326*/ *Ptr_Val_Par->Ptr_Comp= *Ptr_Glob;
Ptr_Val_Par->variant.var_1.Int_Comp=5;
Next_Record->variant.var_1.Int_Comp
=Ptr_Val_Par->variant.var_1.Int_Comp;
Next_Record->Ptr_Comp=Ptr_Val_Par->Ptr_Comp;
Proc_3(&Next_Record->Ptr_Comp);
/*334*/ if(Next_Record->Discr==Ident_1)
/*336*/ {
Next_Record->variant.var_1.Int_Comp=6;
Proc_6(Ptr_Val_Par->variant.var_1.Enum_Comp,&Next_Record->variant.var_1.Enum_Comp);
/*340*/ Next_Record->Ptr_Comp=Ptr_Glob->Ptr_Comp;
Proc_7(Next_Record->variant.var_1.Int_Comp,10,&Next_Record->variant.var_1.Int_Comp);
/*343*/ }
else
*Ptr_Val_Par= *Ptr_Val_Par->Ptr_Comp;
}
/*349*/ Proc_2(Int_Par_Ref)
/*354*/ One_Fifty*Int_Par_Ref;
{
One_Fifty Int_Loc;
Enumeration Enum_Loc;
/*359*/ Int_Loc= *Int_Par_Ref+10;
do
if(Ch_1_Glob=='A')
/*363*/ {
Int_Loc-=1;
*Int_Par_Ref=Int_Loc-Int_Glob;
Enum_Loc=Ident_1;
}
while(Enum_Loc!=Ident_1);
}
/*372*/ Proc_3(Ptr_Ref_Par)
/*377*/ Rec_Pointer*Ptr_Ref_Par;
/*379*/ {
if(Ptr_Glob!=0)
/*382*/ *Ptr_Ref_Par=Ptr_Glob->Ptr_Comp;
Proc_7(10,Int_Glob,&Ptr_Glob->variant.var_1.Int_Comp);
}
/*387*/ Proc_4()
/*390*/ {
Boolean Bool_Loc;
/*393*/ Bool_Loc=Ch_1_Glob=='A';
Bool_Glob=Bool_Loc|Bool_Glob;
Ch_2_Glob='B';
}
/*399*/ Proc_5()
/*402*/ {
Ch_1_Glob='A';
Bool_Glob=0;
}
