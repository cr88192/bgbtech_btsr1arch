//AHSRC:cparse/cparse_token.c
int BGBCP_GetLinenum();
char *BGBCP_GetFilename();
int BGBCP_CalcLinenum(char *se);
int BGBCP_SetLinenum(char *fname, char *base, int num);
int BGBCP_PushLinenum();
int BGBCP_PopLinenum();
int BGBCP_SkimLinenum(char *s, char **rfn, int *rln);
char *BGBCP_GetLastFileName();
int BGBCP_GetLastLineNumber();
int BGBCP_GetPredictLineNumber(char *tgt);
int BGBCP_CheckUtfWhite(int cp);
char *BGBCP_EatWhiteOnly(char *s);
char *BGBCP_EatWhiteOnly2(char *s);
char *BGBCP_EatWhite(char *s);
char *BGBCP_EatWhiteNLb(char *s);
int BGBCP_IsWhiteOnly(char *s);
int BGBCP_IsLineBreak(char *se);
void BGBCP_CopyStringQQQB(char **dst, char **src);
int BGBCP_OpChar(int c);
int BGBCP_PeekChar(char **str);
int bgbcp_strcmp_chk4(char *s1, char *s2);
int bgbcp_strcmp(char *s1, char *s2);
int bgbcp_strcmp1(char *s1, char *s2);
int bgbcp_strcmp2(char *s1, char *s2);
int bgbcp_strcmp3(char *s1, char *s2);
int bgbcp_strcmp4(char *s1, char *s2);
int bgbcp_strcmp5(char *s1, char *s2);
int bgbcp_strcmp6(char *s1, char *s2);
int bgbcp_strcmp7(char *s1, char *s2);
int bgbcp_strcmp8(char *s1, char *s2);
int bgbcp_strcmp9(char *s1, char *s2);
int bgbcp_strcmp10(char *s1, char *s2);
int bgbcp_strcmp11(char *s1, char *s2);
int bgbcp_strncmp2(char *s1, char *s2);
int bgbcp_strncmp3(char *s1, char *s2);
int bgbcp_strncmp4(char *s1, char *s2);
int bgbcp_strncmp5(char *s1, char *s2);
int bgbcp_strncmp6(char *s1, char *s2);
int bgbcp_strncmp7(char *s1, char *s2);
int bgbcp_strncmp8(char *s1, char *s2);
int bgbcp_strncmp9(char *s1, char *s2);
int bgbcp_strncmp10(char *s1, char *s2);
int bgbcp_strncmp11(char *s1, char *s2);
int bgbcp_strncmp12(char *s1, char *s2);
int bgbcp_strcmp1(char *s1, char *s2);
int bgbcp_strcmp2(char *s1, char *s2);
int bgbcp_strcmp3(char *s1, char *s2);
int bgbcp_strcmp4(char *s1, char *s2);
int bgbcp_strcmp5(char *s1, char *s2);
int bgbcp_strcmp6(char *s1, char *s2);
int bgbcp_strcmp7(char *s1, char *s2);
int bgbcp_strcmp8(char *s1, char *s2);
int bgbcp_strcmp9(char *s1, char *s2);
int bgbcp_strcmp10(char *s1, char *s2);
int bgbcp_strcmp11(char *s1, char *s2);
int bgbcp_strncmp2(char *s1, char *s2);
int bgbcp_strncmp3(char *s1, char *s2);
int bgbcp_strncmp4(char *s1, char *s2);
int bgbcp_strncmp5(char *s1, char *s2);
int bgbcp_strncmp6(char *s1, char *s2);
int bgbcp_strncmp7(char *s1, char *s2);
int bgbcp_strncmp8(char *s1, char *s2);
int bgbcp_strncmp9(char *s1, char *s2);
int bgbcp_strncmp10(char *s1, char *s2);
int bgbcp_strncmp11(char *s1, char *s2);
int bgbcp_strncmp12(char *s1, char *s2);
int BGBCP_StrlenUTF8(char *str);
int BGBCP_StrlenUCS2(u16 *str);
int BGBCP_StrlenUCS4(u32 *str);
int BGBCP_StrcmpUCS2(u16 *stra, u16 *strb);
int BGBCP_StrcmpUCS4(u32 *stra, u32 *strb);
int BGBCP_MemcmpUCS2(u16 *stra, u16 *strb, int len);
int BGBCP_MemcmpUCS4(u32 *stra, u32 *strb, int len);
int BGBCP_ParseChar(char **str);
int BGBCP_EmitChar(char **str, int j);
int bgbcp_cpto437(int val);
int BGBCP_EmitCharSpfx(char **str, int ch, int spfx);
int BGBCP_NameInitChar(int c, int lang);
int BGBCP_NameChar(int c, int lang);
char *BGBCP_TokenI2(char *s, char *b, int *ty, int lang, int sz);
char *BGBCP_TokenI(char *s, char *b, int *ty, int lang, int sz);
int bgbcp_strcpy(char *dst, char *src);
char *BGBCP_Token2(char *s, char *b, int *ty, int lang);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
int BGBCP_GetTokenCount(void);
char *BGBCP_Token(char *s, char *b, int *ty);
void BGBCP_FlushToken(char *s);
char *BGBCP_TokenGen(char *s, char *b, int *ty);
char *BGBCP_TokenLang(char *s, char *b, int *ty, int lang);
char *BGBCP_TokenCtx(BGBCP_ParseState *ctx, char *s, char *b, int *ty);
char *BGBCP_ReadToken(BGBCP_ParseState *ctx, char **str, int *ty);
//AHSRC:cparse/cparse_misc.c
BCCX_Node *BGBCP_FunArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_FunArgsFlag(BGBCP_ParseState *ctx, char **str, int flag);
BCCX_Node *BGBCP_TemplateArgs(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_GenArgs(BGBCP_ParseState *ctx, char **str);
int BGBCP_GenMangledTemplateName(BGBCP_ParseState *ctx, char *oname, char *basename, BCCX_Node *args);
BCCX_Node *BGBCP_CheckTemplateParam(BGBCP_ParseState *ctx, char *name);
int BGBCP_InstanceTemplate(BGBCP_ParseState *ctx, char *basename, BCCX_Node *tpldef, BCCX_Node *args);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
fourcc BGBCP_LangForName(char *name);
char *BGBCP_NameForLang(int lang);
fourcc BGBCP_ArchForName(char *name);
fourcc BGBCP_SubArchForName(int arch, char *name);
char *BGBCP_NameForArch(fourcc arch);
char *BGBCP_NameForSubArch(fourcc arch, fourcc subarch);
char *BGBCP_NameSuffixForArch(fourcc arch);
char *BGBCP_DescForSubArch(fourcc arch, fourcc subarch);
int BGBCP_QueryArchList(fourcc *rarch, int narch);
int BGBCP_DumpTargets(void);
fourcc BGBCP_ImageFormatForName(char *name);
char *BGBCP_BaseNameForName(char *name);
char *BGBCP_BaseNameForNameLC(char *name);
BCCX_Node *BGBCP_ModuleBuffer(char *name, char *modname, char *buf);
int BGBCP_SetDefaultLocale(char *locale);
int BGBCP_SetLocale(BGBCP_ParseState *ctx, char *locale);
//AHSRC:cparse/cparse_type.c
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupStructI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTemplateI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupToplevelI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTemplate(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupToplevel(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTemplateType(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTemplateFunc(BGBCP_ParseState *ctx, char *name);
int BGBCP_HashTypeNameI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
char *BGBCP_GetNamespacePath(BGBCP_ParseState *ctx);
BCCX_Node *BGBCP_LookupStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupTypeI(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_LookupType(BGBCP_ParseState *ctx, char *name);
int BGBCP_HandleTypedef(BGBCP_ParseState *ctx, BCCX_Node *n);
int BGBCP_AddDefToplevel(BGBCP_ParseState *ctx, BCCX_Node *n);
int BGBCP_HandleTemplate(BGBCP_ParseState *ctx,BCCX_Node *def, BCCX_Node *args);
int BGBCP_PushTemplateArgs(BGBCP_ParseState *ctx,BCCX_Node *args);
int BGBCP_PopTemplateArgs(BGBCP_ParseState *ctx);
BCCX_Node *BGBCP_GetStruct(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetUnion(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetEnum(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_GetStructJ(BGBCP_ParseState *ctx, char *name, int ty);
int BGBCP_CheckTypeName(BGBCP_ParseState *ctx, char *name);
int BGBCP_CheckTokenKeyword(BGBCP_ParseState *ctx, char *tag);
s64 BGBCP_DefTypeFlag(BGBCP_ParseState *ctx, char *tag);
BCCX_Node *BGBCP_DefClassC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DeclAttributeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DeclAttributeJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeC(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefClassJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefTypeJ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefType(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefExpectType(BGBCP_ParseState *ctx, char **str);
s64 BGBCP_CheckNameEnum(BGBCP_ParseState *ctx, char *name);
BCCX_Node *BGBCP_EnumVarsList(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_def.c
BCCX_Node *BGBCP_DummyVar(BGBCP_ParseState *ctx, BCCX_Node *tn);
BCCX_Node *BGBCP_VarsList(BGBCP_ParseState *ctx, char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_FunVarsList(BGBCP_ParseState *ctx, char **str);
char *BGBCP_OperatorNameForOp(BGBCP_ParseState *ctx, char *op);
BCCX_Node *BGBCP_DefName(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefName2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_VarDefinition(BGBCP_ParseState *ctx,char **str, BCCX_Node *tn);
BCCX_Node *BGBCP_ArgDefinition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ArgDefinition2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Definition(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_DefinitionOldStyle(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ForceDefinition(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_expr2.c
int BGBCP_AddExpression(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseExpressionName(BGBCP_ParseState *ctx, char *name, char **s);
BCCX_Node *BGBCP_Number(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBCP_NumberSuf(BGBCP_ParseState *ctx, char *str, char *suf);
BCCX_Node *BGBCP_NumberXF(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBCP_ExpressionLitString(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLitStringQQQ(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLit(BGBCP_ParseState *ctx, char **str);
int BGBCP_FunctionNameIsIntrinsicP(BGBCP_ParseState *ctx, char *str);
BCCX_Node *BGBCP_ExpressionPostfix(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionUnary(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionCast(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BinaryExpr(char *op, BCCX_Node *l, BCCX_Node *r);
BCCX_Node *BGBCP_UnaryExpr(char *op, BCCX_Node *v);
BCCX_Node *BGBCP_IfExpr(BCCX_Node *cond, BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCP_ExpressionExp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionMD(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionAS(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionSHLR(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionRCmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionECmp(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitAnd(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitXor(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionBitOr(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionLop2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionTCond(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionEquals(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ExpressionComma(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Expression2(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cparse_reduce.c
int BGBCP_IsUnaryP(BGBCP_ParseState *ctx, BCCX_Node *l, char *op);
int BGBCP_IsBinaryP(BGBCP_ParseState *ctx, BCCX_Node *l, char *op);
int BGBCP_BoolExpr(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_WrapIntSuf(s64 i, char *suf);
BCCX_Node *BGBCP_WrapRealSuf(double f, char *suf);
BCCX_Node *BGBCP_WrapInt(s64 i);
BCCX_Node *BGBCP_WrapReal(double f);
BCCX_Node *BGBCP_WrapString(char *str);
BCCX_Node *BGBCP_WrapRef(char *str);
int BGBCP_IsIntP(BGBCP_ParseState *ctx, BCCX_Node *l);
int BGBCP_IsRealP(BGBCP_ParseState *ctx, BCCX_Node *l);
int BGBCP_IsReal2P(BGBCP_ParseState *ctx, BCCX_Node *l);
int BGBCP_IsCharP(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_Boolify(BGBCP_ParseState *ctx, BCCX_Node *l);
char *BGBCP_BinaryTySuf(BGBCP_ParseState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCP_ReduceForm(BGBCP_ParseState *ctx,BCCX_Node *l, int flag);
int BGBCP_SetLine(BGBCP_ParseState *ctx, BCCX_Node *l,char *fn, int ln);
BCCX_Node *BGBCP_ReduceStatementForm(BGBCP_ParseState *ctx,BCCX_Node *l, int flag);
BCCX_Node *BGBCP_ReduceType(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceExpr(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceStatement(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceStatementList(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBCP_ReduceExprConst(BGBCP_ParseState *ctx, BCCX_Node *l);
//AHSRC:cparse/cparse_stmt.c
void BGBCP_Warn(char *se, char *str, ...);
void BGBCP_Error(char *se, char *str, ...);
void BGBCP_WarnCtx(BGBCP_ParseState *ctx, char *se, char *str, ...);
void BGBCP_ErrorCtx(BGBCP_ParseState *ctx, char *se, char *str, ...);
int BGBCP_AddStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseStatementName(BGBCP_ParseState *ctx, char *name, char **s);
int BGBCP_AddBlockStatement(char *name,BCCX_Node *(*func)(BGBCP_ParseState *ctx, char **s));
BCCX_Node *BGBCP_ParseBlockStatementName(BGBCP_ParseState *ctx, char *name, char **s);
char *BGBCP_EatSemicolon(char *s);
char *BGBCP_EatSemicolonRequired(BGBCP_ParseState *ctx, char *s);
char *BGBCP_EatExpectToken(BGBCP_ParseState *ctx, char *s, char *tok);
BCCX_Node *BGBCP_Statement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_ParseDocComment(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatementInner(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatementI(BGBCP_ParseState *ctx, char **str, int flag);
BCCX_Node *BGBCP_BlockStatement(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockI(BGBCP_ParseState *ctx, char **str, int flag);
BCCX_Node *BGBCP_Block(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_Toplevel(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement2(BGBCP_ParseState *ctx, char **str);
BCCX_Node *BGBCP_BlockStatement3(BGBCP_ParseState *ctx, char **str);
//AHSRC:cparse/cppi_interp.c
BGBPP_PpiDef *BGBPP_PpiAllocDef(BGBCP_ParseState *ctx);
void BGBPP_PpiFreeDef(BGBCP_ParseState *ctx, BGBPP_PpiDef *tmp);
BGBPP_PpiDef *BGBPP_PpiLookupTopDef(BGBCP_ParseState *ctx, char *name);
BGBPP_PpiDef *BGBPP_PpiGetTopDef(BGBCP_ParseState *ctx, char *name);
BGBPP_PpiFrame *BGBPP_PpiEnterFrame(BGBCP_ParseState *ctx);
void BGBPP_PpiLeaveFrame(BGBCP_ParseState *ctx);
BCCX_Node *BGBPP_PpiFetchNameReduce(BGBCP_ParseState *ctx, char *name);
BGBPP_PpiDef *BGBPP_PpiLookupNameDef(BGBCP_ParseState *ctx, char *name);
void BGBPP_PpiInterpBodyStatement(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBPP_PpiInterpDoFuncall2(BGBCP_ParseState *ctx,char *name, BCCX_Node **args, int nargs);
BCCX_Node *BGBPP_PpiInterpDoFuncall(BGBCP_ParseState *ctx,BGBPP_PpiDef *func, BCCX_Node *args);
void BGBPP_PpiInterpTopStatement(BGBCP_ParseState *ctx, BCCX_Node *l);
BCCX_Node *BGBPP_PpiInterpTryReduce(BGBCP_ParseState *ppctx, BCCX_Node *l);
void BGBPP_InterpMacroed(BGBCP_ParseState *ctx, char *str);
//AHSRC:cparse/preproc.c
int bgbpp_strcmp(char *s1, char *s2);
int BGBPP_CheckIncludeHashName(char *str);
int BGBPP_CheckIncludeHashNext(int hash);
int BGBPP_CheckIncludeCache(char *str, byte **rbuf, int *rsz);
int BGBPP_AddIncludeCache(char *str, byte *buf, int sz);
int BGBPP_AddIncludePathFront(char *str);
int BGBPP_AddIncludePathBack(char *str);
char *BGBPP_EmitString(char *t, char *s);
char *BGBPP_EmitCharString(char *t, char *s);
void BGBPP_Trigraphs(BGBCP_ParseState *ctx, char *str);
void BGBPP_UniEscape(BGBCP_ParseState *ctx, char *str);
int BGBPP_Error(BGBCP_ParseState *ctx, char *str, ...);
BGBPP_Def *BGBPP_AllocDefine(BGBCP_ParseState *ctx);
void BGBPP_FreeDefine(BGBCP_ParseState *ctx, BGBPP_Def *def);
BGBPP_Def *BGBPP_LookupDefine(BGBCP_ParseState *ctx, char *name);
BGBPP_Def *BGBPP_LookupDefine2(BGBCP_ParseState *ctx, char *name);
void BGBPP_DeleteDefine(BGBCP_ParseState *ctx, char *name);
void BGBPP_CleanupDefines(BGBCP_ParseState *ctx);
void BGBPP_AddDefine(BGBCP_ParseState *ctx, char *name, char *str);
void BGBPP_AddDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_AppendDefineLine(BGBCP_ParseState *ctx,char *name, char *str);
void BGBPP_AddStaticDefine(BGBCP_ParseState *ctx,char *name, char *str);
void BGBPP_AddStaticDefineArgs(BGBCP_ParseState *ctx,char *name, char **args, char *str);
void BGBPP_SendDefines(BGBCP_ParseState *ctx);
char *BGBPP_LoadInclude(BGBCP_ParseState *ctx, char *name, int *rsz);
void BGBPP_Include(BGBCP_ParseState *ctx, char *str, int angle);
void BGBPP_Directive2(BGBCP_ParseState *ctx, char *str);
int BGBPP_ExpandBinary(char *larg, char *op, char *rarg, char *dst);
int BGBPP_LineArith(BGBCP_ParseState *ctx, char *str);
void BGBPP_Directive(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseArg(BGBCP_ParseState *ctx,BGBPP_Def *pudef, char *s, char *b);
char *BGBPP_PrintName(char *t, char *s);
char *BGBPP_PrintToken(char *t, char *s, int ty);
int BGBPP_Expand(BGBCP_ParseState *ctx,char **src, char **dst, char *op, char *dste);
int BGBPP_CheckExpandLBuf(int sz, char **rt);
int BGBPP_ScriptPuts(BGBCP_ParseState *ctx, char *str);
int BGBPP_Line(BGBCP_ParseState *ctx, char *str);
int BGBPP_LineDigraph(BGBCP_ParseState *ctx, char *str);
int BGBPP_LinePostFilter(BGBCP_ParseState *ctx, char *str);
char *BGBPP_ParseLine(BGBCP_ParseState *ctx, char *s, char *b);
int BGBPP_BufferLine(BGBCP_ParseState *ctx, char *b);
int BGBPP_Buffer(BGBCP_ParseState *ctx, char *ibuf);
int BGBPP_Filter(BGBCP_ParseState *ctx, char *ibuf, char *obuf, int osz);
//AHSRC:mm/cc_tokord.c
//AHSRC:mm/cca_node.c
int bccx_strcmp(char *s1, char *s2);
int BCCX_StringToStridx(char *str);
char *BCCX_StridxToString(int idx);
int BCCX_Init();
BCCX_Node *BCCX_AllocNode(void);
BCCX_NodeList *BCCX_AllocNodeList(void);
void BCCX_FreeNode(BCCX_Node *n);
void BCCX_FreeNodeList(BCCX_NodeList *n);
int BCCX_LookupAttrArrIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrArrIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_LookupAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_LookupAttrValCst(BCCX_Node *node,bccx_cxstate *rcst, char *var, u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_LookupAttrValIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrValCst(BCCX_Node *node,bccx_cxstate *rcst, char *var, u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrValIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
char *BCCX_Get(BCCX_Node *n, char *var);
char *BCCX_GetCst(BCCX_Node *n,bccx_cxstate *rcst, char *var);
s64 BCCX_GetIntCst(BCCX_Node *n, bccx_cxstate *rcst, char *var);
double BCCX_GetFloatCst(BCCX_Node *n, bccx_cxstate *rcst, char *var);
void BCCX_SetCst(BCCX_Node *n, bccx_cxstate *rcst, char *var, char *val);
void BCCX_SetIntCst(BCCX_Node *n,bccx_cxstate *rcst, char *var, s64 val);
void BCCX_SetFloatCst(BCCX_Node *n,bccx_cxstate *rcst, char *var, double val);
BCCX_Node *BCCX_GetNodeCst(BCCX_Node *n, bccx_cxstate *rcst, char *var);
void BCCX_SetNodeCst(BCCX_Node *n,bccx_cxstate *rcst, char *var, BCCX_Node *val);
BCCX_Node *BCCX_GetNodeIndex(BCCX_Node *n, int idx0);
void BCCX_SetNodeIndex(BCCX_Node *n,int idx0, BCCX_Node *val);
BCCX_Node *BCCX_New(char *tag);
BCCX_Node *BCCX_NewCst(bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_NewText(char *text);
BCCX_Node *BCCX_NewCData(char *text);
BCCX_Node *BCCX_NewList(void);
int BCCX_GetNodeChildCount(BCCX_Node *node);
BCCX_Node *BCCX_AddEnd(BCCX_Node *node, BCCX_Node *child);
BCCX_Node *BCCX_AddEnd2(BCCX_Node *node, BCCX_Node **rne, BCCX_Node *child);
int BCCX_Add(BCCX_Node *node, BCCX_Node *child);
void BCCX_AddV(BCCX_Node *parent, BCCX_Node *child);
BCCX_Node *BCCX_New1V(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_NewCst1V(bccx_cxstate *rcst, char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
BCCX_Node *BCCX_NewCst1(bccx_cxstate *rcst, char *tag, BCCX_Node *a);
BCCX_Node *BCCX_NewCst2(bccx_cxstate *rcst, char *tag,BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_NewCst3(bccx_cxstate *rcst, char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_NewCst4(bccx_cxstate *rcst, char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
char *BCCX_Tag(BCCX_Node *n);
char *BCCX_Text(BCCX_Node *n);
void BCCX_SetTagCst(BCCX_Node *n, bccx_cxstate *rcst, char *str);
void BCCX_SetTag(BCCX_Node *n, char *str);
int BCCX_TagIsCstP(BCCX_Node *n, bccx_cxstate *rcst, char *str);
int BCCX_TagIsP(BCCX_Node *n, char *str);
int BCCX_AttrIsCstP(BCCX_Node *n,bccx_cxstate *rcst, char *var, char *val);
int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
BCCX_Node *BCCX_Child(BCCX_Node *parent);
BCCX_Node *BCCX_FindTagIx(BCCX_Node *parent, int iv);
int BCCX_FindTagIndexCst(BCCX_Node *parent,bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_FindTagCst(BCCX_Node *parent, bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_FetchCst(BCCX_Node *parent, bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_Clone(BCCX_Node *n);
int BCCX_MarkNodeListZone(BCCX_NodeList *nl, int zone);
int BCCX_MarkAttrListZone(BCCX_Node *n, int zone);
int BCCX_MarkTreeZone(BCCX_Node *n, int zone);
BCCX_NodeList *BCCX_CloneNodeListZone(BCCX_NodeList *nl, int zone);
BCCX_Node *BCCX_CloneAttrListZone(BCCX_Node *n, int zone);
BCCX_Node *BCCX_CloneNodeZone(BCCX_Node *n, int zone);
BCCX_Node *BCCX_Clone(BCCX_Node *n);
BCCX_Node *BCCX_CloneS(BCCX_Node *n);
int BCCX_Unlink2(BCCX_Node *node, BCCX_Node *child);
void BCCX_CheckDeleteUnlinked(BCCX_Node *n);
void BCCX_ClearZoneLevel(int zone);
//AHSRC:mm/cca_print.c
char *BCCX_PrintText(char *s, char *t, int flag);
int BCCX_SizeNodeAttr(BCCX_Node *node, int flag);
char *BCCX_PrintBufNodeAttr(BCCX_Node *node, char *buf, int flag);
void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
void BCCX_PrintBufNodeAttrNode(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
int BCCX_CheckNodeAttrNode(BCCX_Node *node);
void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
char *BCCX_DumpStr(char *buf, BCCX_Node *node);
char *BCCX_PrintStr(char *buf, BCCX_Node *node);
void BCCX_Print(BCCX_Node *node);
//AHSRC:mm/ccx_node.c
int bccx_strcmp(char *s1, char *s2);
int bccx_memset(void *buf, int val, int sz);
int BCCX_StringToStridx(char *str);
char *BCCX_StridxToString(int idx);
int BCCX_Init();
BCCX_Node *BCCX_AllocNode(void);
void BCCX_FreeNode(BCCX_Node *n);
int BCCX_LookupAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_LookupAttrValCst(BCCX_Node *node,bccx_cxstate *rcst, char *var, u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_LookupAttrValIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrVal(BCCX_Node *node, char *var,u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrValCst(BCCX_Node *node,bccx_cxstate *rcst, char *var, u16 **rrn, BCCX_AttrVal **rrv);
int BCCX_FetchAttrValIx(BCCX_Node *node, int iv,u16 **rrn, BCCX_AttrVal **rrv);
char *BCCX_Get(BCCX_Node *n, char *var);
char *BCCX_GetCst(BCCX_Node *n,bccx_cxstate *rcst, char *var);
char *BCCX_Get_SI(BCCX_Node *n, char *var);
char *BCCX_Get_SI(BCCX_Node *n, char *var);
s64 BCCX_GetInt(BCCX_Node *n, char *var);
double BCCX_GetFloat(BCCX_Node *n, char *var);
s64 BCCX_GetIntCst(BCCX_Node *n, bccx_cxstate *rcst, char *var);
double BCCX_GetFloatCst(BCCX_Node *n, bccx_cxstate *rcst, char *var);
void BCCX_Set(BCCX_Node *n, char *var, char *val);
void BCCX_SetInt(BCCX_Node *n, char *var, s64 val);
void BCCX_SetFloat(BCCX_Node *n, char *var, double val);
void BCCX_SetCst(BCCX_Node *n, bccx_cxstate *rcst, char *var, char *val);
void BCCX_SetIntCst(BCCX_Node *n, bccx_cxstate *rcst, char *var, s64 val);
void BCCX_SetFloatCst(BCCX_Node *n, bccx_cxstate *rcst, char *var, double val);
BCCX_Node *BCCX_New(char *tag);
BCCX_Node *BCCX_NewCst(bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_NewText(char *text);
BCCX_Node *BCCX_NewText(char *text);
BCCX_Node *BCCX_NewCData(char *text);
void BCCX_AddV(BCCX_Node *parent, BCCX_Node *child);
int BCCX_Add(BCCX_Node *parent, BCCX_Node *child);
BCCX_Node *BCCX_AddEnd(BCCX_Node *lst, BCCX_Node *n);
BCCX_Node *BCCX_AddEnd2(BCCX_Node *fst, BCCX_Node **rlst, BCCX_Node *n);
BCCX_Node *BCCX_New1V(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_NewCst1V(bccx_cxstate *rcst, char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New1(char *tag, BCCX_Node *a);
BCCX_Node *BCCX_New2(char *tag, BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_New3(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_New4(char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
BCCX_Node *BCCX_NewCst1(bccx_cxstate *rcst, char *tag, BCCX_Node *a);
BCCX_Node *BCCX_NewCst2(bccx_cxstate *rcst, char *tag,BCCX_Node *a, BCCX_Node *b);
BCCX_Node *BCCX_NewCst3(bccx_cxstate *rcst, char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c);
BCCX_Node *BCCX_NewCst4(bccx_cxstate *rcst, char *tag, BCCX_Node *a,BCCX_Node *b, BCCX_Node *c, BCCX_Node *d);
int BCCX_NodeP(BCCX_Node *n);
int BCCX_TextP(BCCX_Node *n);
int BCCX_LeafP(BCCX_Node *n);
int BCCX_ChildP(BCCX_Node *n);
BCCX_Node *BCCX_Next(BCCX_Node *n);
BCCX_Node *BCCX_Prev(BCCX_Node *n);
BCCX_Node *BCCX_Parent(BCCX_Node *n);
BCCX_Node *BCCX_Child(BCCX_Node *n);
char *BCCX_Tag(BCCX_Node *n);
char *BCCX_Text(BCCX_Node *n);
void BCCX_SetTag(BCCX_Node *n, char *s);
void BCCX_SetTagCst(BCCX_Node *n, bccx_cxstate *rcst, char *str);
int BCCX_TagIsP(BCCX_Node *n, char *str);
int BCCX_TagIsCstP(BCCX_Node *n, bccx_cxstate *rcst, char *str);
int BCCX_AttrIsP(BCCX_Node *n, char *var, char *val);
int BCCX_AttrIsCstP(BCCX_Node *n,bccx_cxstate *rcst, char *var, char *val);
int BCCX_TagAttrIsP(BCCX_Node *n, char *tag, char *var, char *val);
BCCX_Node *BCCX_FindNextTag(BCCX_Node *last, char *tag);
BCCX_Node *BCCX_FindNextTagIx(BCCX_Node *last, int iv);
BCCX_Node *BCCX_FindNextAttr(BCCX_Node *last, char *var, char *val);
BCCX_Node *BCCX_FindNextTagAttr(BCCX_Node *last,char *tag, char *var, char *val);
BCCX_Node *BCCX_FindTag(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_FindAttr(BCCX_Node *parent, char *var, char *val);
BCCX_Node *BCCX_FindTagAttr(BCCX_Node *parent,char *tag, char *var, char *val);
BCCX_Node *BCCX_FindTagIx(BCCX_Node *parent, int iv);
BCCX_Node *BCCX_FindTagCst(BCCX_Node *parent, bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_Fetch(BCCX_Node *parent, char *tag);
BCCX_Node *BCCX_FetchCst(BCCX_Node *parent, bccx_cxstate *rcst, char *tag);
BCCX_Node *BCCX_CloneS(BCCX_Node *n);
BCCX_Node *BCCX_Clone(BCCX_Node *n);
BCCX_Node *BCCX_CloneList(BCCX_Node *n);
void BCCX_Unlink(BCCX_Node *n);
void BCCX_DeleteTree(BCCX_Node *n);
void BCCX_CheckDeleteUnlinked(BCCX_Node *n);
int BCCX_GetNodeChildCount(BCCX_Node *node);
BCCX_Node *BCCX_GetNodeIndex(BCCX_Node *n, int idx);
//AHSRC:mm/ccx_print.c
char *BCCX_PrintText(char *s, char *t, int flag);
int BCCX_SizeNodeAttr(BCCX_Node *node, int flag);
char *BCCX_PrintBufNodeAttr(BCCX_Node *node, char *buf, int flag);
void BCCX_PrintBufSpecial(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
void BCCX_PrintBufNodeAttrNode(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
int BCCX_CheckNodeAttrNode(BCCX_Node *node);
void BCCX_PrintBuf(BCCX_Node *node, int ind,void (*pb)(void *p, char *b), void *ob, int flag);
void BCCX_DumpFD(FILE *fd, BCCX_Node *node);
void BCCX_PrintFD(FILE *fd, BCCX_Node *node);
char *BCCX_DumpStr(char *buf, BCCX_Node *node);
char *BCCX_PrintStr(char *buf, BCCX_Node *node);
void BCCX_Print(BCCX_Node *node);
//AHSRC:mm/ccx_parse.c
BCCX_ReadStream BCCX_NewReadStreamBuf(char *buf);
BCCX_ReadPos BCCX_GetPos(BCCX_ReadStream strm);
void BCCX_SetPos(BCCX_ReadStream strm, BCCX_ReadPos pos);
int BCCX_PeekChar(BCCX_ReadStream strm);
int BCCX_ReadChar(BCCX_ReadStream strm);
int BCCX_PeekCharIdx(BCCX_ReadStream strm, int idx);
int BCCX_ParseEatWhite(BCCX_ReadStream strm);
int BCCX_ParseSpecialP(BCCX_ReadStream strm);
int BCCX_ParseContSpecialP(BCCX_ReadStream strm);
char *BCCX_ParseToken(BCCX_ReadStream strm, int *ty);
char *BCCX_PeekToken(BCCX_ReadStream strm, int *ty);
char *BCCX_ParseText(BCCX_ReadStream strm);
int BCCX_ParseAttr(BCCX_ReadStream strm, BCCX_Node *node);
BCCX_Node *BCCX_ParseTag(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExprR(BCCX_ReadStream strm, int *rgrp);
BCCX_Node *BCCX_ParseExpr(BCCX_ReadStream strm);
BCCX_Node *BCCX_ParseExprStr(char *str);
//AHSRC:mm/cc_float128.c
bgbcc_vfloat128 BGBCC_Float128_FromDouble(double val);
double BGBCC_Float128_ToDouble(bgbcc_vfloat128 val);
double BGBCC_Float128_ToDoubleB(bgbcc_vfloat128 val);
bgbcc_vfloat128 BGBCC_Float128_FromDoubleBits(u64 v);
u64 BGBCC_Float128_ToDoubleBits(bgbcc_vfloat128 val);
bgbcc_vfloat128 BGBCC_Float128_FromInt128(bgbcc_vint128 val);
bgbcc_vint128 BGBCC_Float128_GetMantissa(bgbcc_vfloat128 a);
int BGBCC_Float128_GetExponent(bgbcc_vfloat128 a);
int BGBCC_Float128_GetSign(bgbcc_vfloat128 a);
bgbcc_vfloat128 BGBCC_Float128_ComposeSgExFr(int sg, int ex, bgbcc_vint128 fr);
bgbcc_vfloat128 BGBCC_Float128_AddPI(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_AddSI(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_Add(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_Sub(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_Mul(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_Neg(bgbcc_vfloat128 a);
bgbcc_vfloat128 BGBCC_Float128_RcpA(bgbcc_vfloat128 a);
bgbcc_vfloat128 BGBCC_Float128_Rcp(bgbcc_vfloat128 a);
bgbcc_vfloat128 BGBCC_Float128_Div(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpEqD(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpEq(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpNe(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpGt(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpLe(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpLt(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
int BGBCC_Float128_CmpGe(bgbcc_vfloat128 a, bgbcc_vfloat128 b);
bgbcc_vfloat128 BGBCC_Float128_FromString(char *str);
int BGBCC_Float128_Init_QI();
int BGBCC_Float128_Init_QF();
int BGBCC_Float128_Init();
//AHSRC:mm/cc_float16.c
u32 BGBCC_Float16_ConvertMantissa(u32 i);
int BGBCC_Float16_Init();
double BGBCC_DecodeFloat16(u16 val);
u16 BGBCC_EncodeFloat16(double val);
double BGBCC_DecodeFloat16F(u16 val);
double BGBCC_DecodeFloat12(u16 val);
u16 BGBCC_EncodeFloat12(double val);
u16 BGBCC_NegFloat16(u16 x);
u16 BGBCC_RcpFloat16(u16 x);
u16 BGBCC_SqrtFloat16(u16 x);
u16 BGBCC_AddFloat16(u16 x, u16 y);
u16 BGBCC_AddFloat16F(u16 x, u16 y);
u16 BGBCC_AddFloat16F(u16 x, u16 y);
u16 BGBCC_SubFloat16(u16 x, u16 y);
u16 BGBCC_MulFloat16(u16 x, u16 y);
u16 BGBCC_MulFloat16F(u16 x, u16 y);
u32 BGBCC_MulFloat16F2P(u32 x, u32 y);
u64 BGBCC_MulFloat16F4P(u64 x, u64 y);
u16 BGBCC_DivFloat16(u16 x, u16 y);
//AHSRC:mm/cc_int128.c
bgbcc_vint128 BGBCC_Int128_Add(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_Neg(bgbcc_vint128 a);
bgbcc_vint128 BGBCC_Int128_Not(bgbcc_vint128 a);
int BGBCC_Int128_LNot(bgbcc_vint128 a);
bgbcc_vint128 BGBCC_Int128_Sub(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int64_AdcW(u64 a, u64 b, u64 *rc, byte ci);
int BGBCC_Int64_MuluW(u64 a, u64 b, u64 *rc, u64 *rd);
int BGBCC_Int128_MulW(bgbcc_vint128 a, bgbcc_vint128 b,bgbcc_vint128 *rc, bgbcc_vint128 *rd);
bgbcc_vint128 BGBCC_Int128_Mul(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_MulHA(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_And(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_Or(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_Xor(bgbcc_vint128 a, bgbcc_vint128 b);
bgbcc_vint128 BGBCC_Int128_Shl(bgbcc_vint128 a, int shl);
bgbcc_vint128 BGBCC_Int128_Shr(bgbcc_vint128 a, int shl);
bgbcc_vint128 BGBCC_Int128_Sar(bgbcc_vint128 a, int shl);
int BGBCC_Int128_CmpEq(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpGt(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpHi(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpNe(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpLe(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpLt(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpGe(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpA(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpBe(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpB(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CmpAe(bgbcc_vint128 a, bgbcc_vint128 b);
int BGBCC_Int128_CheckSx64P(bgbcc_vint128 a);
//AHSRC:mm/cc_malloc.c
void BGBCC_DieError();
void BGBCC_DieFatal();
void BGBCC_CleanupAll();
int bgbcc_malloc_memset(void *buf, int val, int sz);
void *bgbcc_tmalloc(char *ty, int sz);
void *bgbcc_stralloc(int sz);
void *bgbcc_malloc(int sz);
void *bgbcc_tmalloc2(char *ty, int sz);
void *bgbcc_malloc2(int sz);
void bgbcc_free(void *p);
void *bgbcc_realloc(void *ptr, int sz);
int bgbcc_malloc_lookupblock(void *obj);
int bgbcc_stralloc_lookupblock(void *obj);
void *bgbcc_malloc_getbase(void *obj);
char *bgbcc_malloc_gettype(void *obj);
int bgbcc_malloc_getsize(void *obj);
char *bgbcc_strdup(char *str);
int bgbcc_strdup_strlen(char *str);
int bgbcc_strdup_strcmp(char *s1, char *s2);
int bgbcc_strdup_strcpy(char *dst, char *src);
int bgbcc_strdup_i(char *str, char suf);
char *bgbcc_strtab_i(int i);
char *bgbcc_strdup(char *str);
char *bgbcc_strdup2(char *str, char suf);
int bgbcc_strdup_lookup(char *str, char suf);
bool bgbcc_strdup_checkp(char *str, char suf);
bool bgbcc_strdup_strp(char *str);
bool bgbcc_strdup_symp(char *str);
bool bgbcc_strdup_keyp(char *str);
char *bgbcc_strdup_symbol(char *str);
char *bgbcc_strdup_keyword(char *str);
void *bgbcc_ralloc(int sz);
char *bgbcc_rstrdup(char *s);
char **bgbcc_split(char *s);
char *bgbcc_rstradd(char *s0, char *s1);
char *bgbcc_rstradd2(char *s0, char *s1, char *s2);
char *bgbcc_rstradd3(char *s0, char *s1, char *s2, char *s3);
void *bgbcc_neword(char **tab);
int bgbcc_strord(char *str, void *tab);
int BGBCC_GetOrdinal(char *str);
int BGBCC_CheckOrdinalFlag(int i, int ty);
int BGBCC_GetOrdinalLang(char *str, int lang);
int BGBCC_GetOrdinalLangType(char *str, int lang, int ty);
double BGBCC_ParseNumber(char *str);
void BGBCC_SeedGenSym(u32 seed);
char *BGBCC_GenSym();
char *BGBCC_GenSym2();
int BGBCC_GenSymInt();
int bgbcc_strcmp(char *s1, char *s2);
int bgbcc_stricmp(char *s1, char *s2);
s64 bgbcc_strtol(char *str, int rdx);
s64 bgbcc_atoi(char *str);
int bgbcc_strtoxl(char *str, int rdx, u64 *rxlo, u64 *rxhi);
int bgbcc_strtoxl2(char *str, int rdx, u64 *rxlo, u64 *rxhi, short *rdpct);
int bgbcc_atoxl(char *str, u64 *rxlo, u64 *rxhi);
f64 bgbcc_atof(char *str);
int bgbcc_atoxf(char *str, u64 *rxlo, u64 *rxhi);
char *BGBCC_StrPrintUInt(char *t, u32 val);
char *BGBCC_StrPrintInt(char *t, s32 val);
char *BGBCC_StrPrintInt8X(char *t, u32 val);
char *BGBCC_StrPrintRawStr(char *t, char *s);
int bgbcc_strtoxx2(char *str, int rdx, u64 *rxa, int *rdpct);
int bgbcc_strtoxx(char *str, u64 *rxa, int *rdpct);
int bgbcc_strtoxs(char *str, char *rxb);
//AHSRC:mm/cc_thread.c
thContext *thGetContext();
void *BIPRO_LookupLabelOS(char *name);
void bipro_thread_markctx(thContext *inf);
void bipro_thread_mark();
void bipro_thread_init();
int thAllocTls();
int thAllocTlsName(char *name, int sz);
void thFreeTls(int idx);
void *thGetTlsValue(int idx);
void thSetTlsValue(int idx, void *val);
void *thGetTlsPtr(int idx);
void *thThread(int (*fcn)(void *ptr), void *ptr);
void BIPRO_SuspendThreads();
void BIPRO_ResumeThreads();
void BIPRO_HandleThreadStates(void (*fcn)(thContext *inf));
void BIPRO_GetThreadRegisterState(thContext *inf, BIPRO_RegisterState *regs);
void *thMutex();
void thLockMutex(void *p);
int thTryLockMutex(void *p);
void thUnlockMutex(void *p);
void thFreeMutex(void *p);
void *thFastMutex();
void thLockFastMutex(void *p);
int thTryLockFastMutex(void *p);
void thLockFastMutexLLn(void *p, char *fn, int ln);
int thTryLockFastMutexLLn(void *p, char *fn, int ln);
void thUnlockFastMutex(void *p);
void thFreeFastMutex(void *p);
void thSleep(int ms);
thContext *thGetContext();
int thGetTlsTlsW32();
void thWaitPtr(void *ptr);
void thSignalPtr(void *ptr);
void BIPRO_SuspendThreads();
void BIPRO_ResumeThreads();
void BIPRO_GetThreadRegisterState(thContext *inf, BIPRO_RegisterState *regs);
void BIPRO_HandleThreadStates(void (*fcn)(thContext *inf));
int BIPRO_InitDllsOS();
void *BIPRO_ThreadProcLnx(void *parm);
void *thThread(int (*fcn)(void *ptr), void *ptr);
void *thMutexLL();
void *thMutex();
void thLockMutex(void *p);
int thTryLockMutex(void *p);
void thUnlockMutex(void *p);
void thFreeMutex(void *p);
void *thFastMutex();
void thLockFastMutex(void *p);
int thTryLockFastMutex(void *p);
void thUnlockFastMutex(void *p);
void thFreeFastMutex(void *p);
void thSleep(int ms);
thContext *thGetContext();
void thWaitPtr(void *ptr);
void thSignalPtr(void *ptr);
char *bipro_strdup(char *str);
void BIPRO_AddExeSection(char *name, s64 va, s64 sz, int fl);
char *BIPRO_LookupExeSectionPtrName(void *ptr);
void BIPRO_AddSym(char *name, void *ptr);
void *BIPRO_LookupLabel(char *name);
int BIPRO_GetModuleListOS(char **buf, int max);
char **BIPRO_GetEnvironOS();
void BIPRO_ProbeTst(byte *buf, int sz);
void BIPRO_UpdateDllsOS(void *hmod);
int BIPRO_InitDllsOS();
int BIPRO_LoadDynamicOS(char *name);
void *BIPRO_LoadModuleFileDataOS(char *name, int *rsz);
void BIPRO_FreeModuleDataOS(void *buf);
void BIPRO_UpdateProxyOS(char *name, void *ptr);
void *BIPRO_LookupLabelOS_1(char *name);
void *BIPRO_LookupLabelOS_2(char *name, int *rfl);
void *BIPRO_LookupLabelOS(char *name);
int BIPRO_InitDbgHelpOS();
char *BIPRO_NameOS(void *addr, void **addr2);
char *BIPRO_LookupAddrNameOS(void *ptr, void **rbase);
int BIPRO_ProcessMAP(char *name);
int BIPRO_ProcessEXE(char *name);
void *BIPRO_LookupLabelOS(char *name);
char *BIPRO_LookupAddrNameOS(void *ptr, void **rbase);
char *BIPRO_GetNamePtr(void *ptr);
char *BIPRO_GetLastNamePtr(void *ptr, void **rbp);
char *BIPRO_GetAddrName(void *ptr);
char *BIPRO_GetAddrLastName(void *ptr, void **rbp);
char *BIPRO_LookupSectionAddrName(void *ptr);
void BIPRO_ProfileLoop_HandleThread(thContext *inf);
void BIPRO_ProfileDumpStats_SortSwap(int a, int b);
void BIPRO_ProfileDumpStats_Sort(int base, int lim);
void BIPRO_ProfileDumpStats_AggAddName(char *lib, char *sym, int cnt);
void BIPRO_ProfileDumpStats_SortSwapAgg(int a, int b);
void BIPRO_ProfileDumpStats_SortAgg(int base, int lim);
int BIPRO_ProfileDumpStats();
int BIPRO_ProfileLoop(void *p);
int BIPRO_ProfilerSetActive(int fl);
//AHSRC:ccxl/ccxl_cgif.c
void BGBCC_CCXL_SetBasePath(char *path);
char *BGBCC_CCXL_GetBasePath(void);
ccxl_status BGBCC_CCXL_RegisterBackend(BGBCC_CCXL_BackendFuncs_vt *ivt);
ccxl_status BGBCC_CCXL_StackFn(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackLn(BGBCC_TransState *ctx, int line);
ccxl_status BGBCC_CCXL_StackDisable3AC(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackEnable3AC(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackSetPred(BGBCC_TransState *ctx, int prd);
ccxl_status BGBCC_CCXL_EmitLabel(BGBCC_TransState *ctx,ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitLabelLvl(BGBCC_TransState *ctx,ccxl_label lbl, int llvl);
ccxl_status BGBCC_CCXL_EmitJump(BGBCC_TransState *ctx, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJumpRegZero(BGBCC_TransState *ctx,ccxl_type type, int cmpop, ccxl_register reg, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJumpRegCmpI(BGBCC_TransState *ctx,ccxl_type type, int cmpop, ccxl_register sreg, ccxl_register treg, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitJumpRegCmp(BGBCC_TransState *ctx,ccxl_type type, int cmpop, ccxl_register sreg, ccxl_register treg, ccxl_label lbl);
ccxl_status BGBCC_CCXL_EmitMov(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dreg, ccxl_register sreg);
ccxl_status BGBCC_CCXL_EmitCallOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int na);
ccxl_status BGBCC_CCXL_EmitCallIntrinOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int na);
ccxl_status BGBCC_CCXL_EmitObjCallOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, ccxl_register obj, int na);
ccxl_status BGBCC_CCXL_EmitCallCsrvOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitCallArg(BGBCC_TransState *ctx,ccxl_register reg);
ccxl_status BGBCC_CCXL_EmitJmpTab(BGBCC_TransState *ctx,ccxl_type type, ccxl_register src, int clm, int cln, ccxl_label *clbl, s64 *clv, ccxl_label dfl, ccxl_label dfl2);
ccxl_status BGBCC_CCXL_EmitCallRetDefault(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_EmitCallRetV(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_EmitCallRetOp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitTempPhi(BGBCC_TransState *ctx,ccxl_register src);
ccxl_status BGBCC_CCXL_EmitConv(BGBCC_TransState *ctx,ccxl_type dtype, ccxl_type stype, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitUnaryOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitBinaryOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitTrinaryOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register srca, ccxl_register srcb, ccxl_register srcc);
ccxl_status BGBCC_CCXL_EmitCompareOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitPredCmpOp(BGBCC_TransState *ctx,ccxl_type type, int opr, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLoadIndexImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitStoreIndexImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitLoadIndex(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitStoreIndex(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLeaImm(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, int idx);
ccxl_status BGBCC_CCXL_EmitLea(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitLdaVar(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src);
ccxl_status BGBCC_CCXL_EmitSizeofVar(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst);
ccxl_status BGBCC_CCXL_EmitDiffPtr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb);
ccxl_status BGBCC_CCXL_EmitOffsetOf(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlot(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name, char *sig);
ccxl_status BGBCC_CCXL_EmitStoreSlot(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlotAddr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_EmitLoadSlotID(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, int fn);
ccxl_status BGBCC_CCXL_EmitLoadSlotAddrID(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register src, BGBCC_CCXL_LiteralInfo *st, int fn);
ccxl_status BGBCC_CCXL_EmitInitObj(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st);
ccxl_status BGBCC_CCXL_EmitDropObj(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st);
ccxl_status BGBCC_CCXL_EmitInitArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, int sz);
ccxl_status BGBCC_CCXL_EmitInitObjArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, int sz);
ccxl_status BGBCC_CCXL_EmitLoadInitArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register val, int sz);
ccxl_status BGBCC_CCXL_EmitLoadInitObjArr(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, BGBCC_CCXL_LiteralInfo *st, ccxl_register val, int sz);
ccxl_status BGBCC_CCXL_EmitVaStart(BGBCC_TransState *ctx,ccxl_register dreg, ccxl_register sreg);
ccxl_status BGBCC_CCXL_EmitVaEnd(BGBCC_TransState *ctx,ccxl_register sreg);
ccxl_status BGBCC_CCXL_EmitVaArg(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dreg, ccxl_register sreg);
ccxl_status BGBCC_CCXL_EmitCSelCmp(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb, ccxl_type ptype, int cmpop, ccxl_register srcc, ccxl_register srcd);
ccxl_status BGBCC_CCXL_EmitCSelCmpZero(BGBCC_TransState *ctx,ccxl_type type, ccxl_register dst, ccxl_register srca, ccxl_register srcb, ccxl_type ptype, int cmpop, ccxl_register srcc);
ccxl_status BGBCC_CCXL_InlineAsmBlob(BGBCC_TransState *ctx, char *text);
ccxl_status BGBCC_CCXL_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
ccxl_status BGBCC_CCXL_AddResourceData(BGBCC_TransState *ctx,char *name, byte *buf, int sz, fourcc imgfmt);
ccxl_status BGBCC_CCXL_SetupContextForArch(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_SetupParserForArch(BGBCP_ParseState *ctx);
ccxl_status BGBCC_CCXL_LoadBufferDLL(BGBCC_TransState *ctx,byte *buf, int sz);
ccxl_status BGBCC_CCXL_InitTargets(void);
//AHSRC:ccxl/ccxl_compile.c
void BGBCC_CCXL_Warn(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_Error(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_Note(BGBCC_TransState *ctx, char *str, ...);
void BGBCC_CCXL_StubWarnLLn(BGBCC_TransState *ctx,char *file, int line);
void BGBCC_CCXL_StubErrorLLn(BGBCC_TransState *ctx,char *file, int line);
void BGBCC_CCXL_SanityErrorLLn(BGBCC_TransState *ctx,char *file, int line);
void BGBCC_CCXL_Warn2(BGBCC_TransState *ctx,int lfni, int lln, char *str, ...);
void BGBCC_CCXL_Error2(BGBCC_TransState *ctx,int lfni, int lln, char *str, ...);
char *BGBCC_CCXL_TagGetMessage(int tag);
void BGBCC_CCXL_TagErrorLLn(BGBCC_TransState *ctx, int tag,char *file, int line);
void BGBCC_CCXL_TagWarnLLn(BGBCC_TransState *ctx, int tag,char *file, int line);
void BGBCC_CCXL_TagWarnAddParmStr(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXL_PrintTagWarn(BGBCC_TransState *ctx);
int BGBCC_CCXL_IndexFName(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexForCurLfn(BGBCC_TransState *ctx);
ccxl_label BGBCC_CCXL_GenSym(BGBCC_TransState *ctx);
ccxl_label BGBCC_CCXL_GenSym2(BGBCC_TransState *ctx);
int BGBCC_CCXL_CompileSwitchJmpR(BGBCC_TransState *ctx, ccxl_label *cl, s64 *clv, int clm, int cln, ccxl_label dfl, ccxl_label dfl2);
int BGBCC_CCXL_CompileSwitch_SortR(BGBCC_TransState *ctx, ccxl_label *cl, s64 *clv, int clm, int cln);
int BGBCC_CCXL_CompileSwitch(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileInitArrayMultiR(BGBCC_TransState *ctx,char *name, ccxl_type ty, BCCX_Node *l, int *cidx, int nidx);
int BGBCC_CCXL_CompileInitArrayMulti(BGBCC_TransState *ctx,char *name, char *sig, BCCX_Node *l);
int BGBCC_CCXL_CompileInitArray(BGBCC_TransState *ctx,char *name, char *sig, BCCX_Node *l);
void BGBCC_CCXL_CompileInitVar(BGBCC_TransState *ctx,char *name, BCCX_Node *type, BCCX_Node *value);
char *BGBCC_CCXL_FlattenDottedName(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileStatement(BGBCC_TransState *ctx, BCCX_Node *l);
char *BGBCC_CCXL_VarTypeString_FlattenExpr(BGBCC_TransState *ctx,char *dst, BCCX_Node *l, int fl);
BCCX_Node *BGBCC_CCXL_LookupStructureNodeForNameI(BGBCC_TransState *ctx,char *name);
BCCX_Node *BGBCC_CCXL_LookupStructureNodeForName(BGBCC_TransState *ctx,char *name);
char *BGBCC_CCXL_StrPrintInt(char *t, s32 val);
char *BGBCC_CCXL_VarTypeString_FlattenName(BGBCC_TransState *ctx,char *t, char *s, int fl, int vsz);
int BGBCC_CCXL_VarTypeString_ModifierChar(BGBCC_TransState *ctx, s64 i);
char *BGBCC_CCXL_VarTypeString_FlattenModifiers(BGBCC_TransState *ctx,char *t, s64 fl);
char *BGBCC_CCXL_VarTypeString_FlattenModifiers2(BGBCC_TransState *ctx,char *t, s64 fl);
char *BGBCC_CCXL_VarTypeString(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarImageTypeString(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarTypeStringNoA0(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarImageTypeStringNoA0(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarTypeFlagsString(BGBCC_TransState *ctx, BCCX_Node *ty);
char *BGBCC_CCXL_VarMangleName(BGBCC_TransState *ctx,char *name, char *sig, BCCX_Node *ty);
void BGBCC_CCXL_EmitVarFunc(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *args);
void BGBCC_CCXL_EmitVar(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_EmitVarArg(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_EmitVar2(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_EmitVar3(BGBCC_TransState *ctx, char *name, char *ty);
void BGBCC_CCXL_EmitVarProperty(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarProperty(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileVarDummyP(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatementBlock(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileVarStatementCompound(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatement(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileVarStatement2(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ArgDeclsTypeForName(BGBCC_TransState *ctx,BCCX_Node *adecl, char *name);
BCCX_Node *BGBCC_CCXL_CompileBlock(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body);
BCCX_Node *BGBCC_CCXL_CompileBlock2(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args, BCCX_Node *body, BCCX_Node *adecl);
char *BGBCC_CCXL_GenProtoSig(BGBCC_TransState *ctx,BCCX_Node *type, BCCX_Node *args);
void BGBCC_CCXL_EmitSigProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
char *BGBCC_CCXL_VarSigProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_CCXL_CompileProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
BCCX_Node *BGBCC_CCXL_CompileMethodProto(BGBCC_TransState *ctx,BCCX_Node *type, char *name, BCCX_Node *args);
void BGBCC_CCXL_CompileStruct(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileUnion(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileClass(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileEnum(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_CompileSProto(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_GetNodeAttribute(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
char *BGBCC_CCXL_GetNodeAttributeString(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
char *BGBCC_CCXL_GetNodeAttributeStringOrRef(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
s64 BGBCC_CCXL_GetNodeAttributeInt(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
void BGBCC_CCXL_CompileTypedef(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileSetupNsPath(BGBCC_TransState *ctx, char *nsp);
void BGBCC_CCXL_CompileStructs(BGBCC_TransState *ctx);
void BGBCC_CCXL_EmitVarValue(BGBCC_TransState *ctx, BCCX_Node *v);
void BGBCC_CCXL_EmitVarValueR(BGBCC_TransState *ctx, BCCX_Node *v);
void BGBCC_CCXL_EmitVarValueR2(BGBCC_TransState *ctx, BCCX_Node *v);
char *BGBCC_CCXL_QualifyNameNS(BGBCC_TransState *ctx, char *name);
char *BGBCC_CCXL_QualifyNameNSFl(BGBCC_TransState *ctx, char *name, s64 fl);
void BGBCC_CCXL_EmitTopVar(BGBCC_TransState *ctx,char *name, BCCX_Node *ty, BCCX_Node *v);
void BGBCC_CCXL_CompileTopStatement(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileModuleCTX(BGBCC_TransState *ctx, char *name, BCCX_Node *l);
char *BGBCC_CCXL_CompileModule(char *name, BCCX_Node *l);
int BGBCC_CCXL_CompileModuleTopOnlyCTX(BGBCC_TransState *ctx, char *name, BCCX_Node *l);
//AHSRC:ccxl/ccxl_const.c
int BGBCC_CCXL_CheckExpandLvt4(BGBCC_TransState *ctx);
int BGBCC_CCXL_CheckExpandLvt8(BGBCC_TransState *ctx);
int BGBCC_CCXL_IndexLitU32(BGBCC_TransState *ctx, u32 val);
int BGBCC_CCXL_IndexLitU64(BGBCC_TransState *ctx, u64 val);
int BGBCC_CCXL_IndexLitS32(BGBCC_TransState *ctx, s32 val);
int BGBCC_CCXL_IndexLitF32(BGBCC_TransState *ctx, float val);
int BGBCC_CCXL_IndexLitS64(BGBCC_TransState *ctx, s64 val);
int BGBCC_CCXL_IndexLitF64(BGBCC_TransState *ctx, double val);
int BGBCC_CCXL_LookupString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_LookupWString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexWString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_IndexCountString(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_FlattenCountStrings(BGBCC_TransState *ctx);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStruct(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupUnion(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupExportList(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructure(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureRns(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupStructureID(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXL_CheckExpandLiterals(BGBCC_TransState *ctx);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetStruct(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetUnion(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetExportList(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupExportListForName(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetTypedef2(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_GetStructID(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_GetUnionID(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupTypedef(BGBCC_TransState *ctx, char *name, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetTypedef(BGBCC_TransState *ctx, char *name, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupNamespace(BGBCC_TransState *ctx, char *str);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetNamespace(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXL_GetNamespaceBuildPath(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_CheckForOptStr(BGBCC_TransState *ctx, char *str);
char *BGBCC_CCXL_CheckForOptParmStr(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_CheckForOptParmInt(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_ConstFloatAsHalf(float f, u16 *rv, u16 *rve);
//AHSRC:ccxl/ccxl_expr.c
char *BGBCC_CCXL_CIfy(char *s);
void BGBCC_CCXL_CompileAssign(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprList(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileExprListReverse(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileArgsList(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileExprListB(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileExprListReverseB(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileArgsListB(BGBCC_TransState *ctx, BCCX_Node *lst);
void BGBCC_CCXL_CompileFuncall(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileFuncallStmt(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileFuncallStore(BGBCC_TransState *ctx,BCCX_Node *l, char *dname);
int BGBCC_CCXL_NameIsQName(BGBCC_TransState *ctx,char *name);
char *BGBCC_CCXL_CompileRemapName(BGBCC_TransState *ctx,char *name);
void BGBCC_CCXL_CompileFuncallI(BGBCC_TransState *ctx,BCCX_Node *l, char *dname, int flag);
void BGBCC_CCXL_CompileStkAsVarList(BGBCC_TransState *ctx,BCCX_Node **stk, int na);
void BGBCC_CCXL_CompileArgsAsVarListB(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileArgsAsVarArrayB(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileArgsAsVarArraySig_A1(BGBCC_TransState *ctx, BCCX_Node **stk, int na, char *sig);
void BGBCC_CCXL_CompileArgsAsVarArraySig_A2(BGBCC_TransState *ctx, BCCX_Node **stk, int na, char *sig);
void BGBCC_CCXL_CompileArgsAsVarArraySig_A3(BGBCC_TransState *ctx, BCCX_Node **stk, int na, char *sig);
void BGBCC_CCXL_CompileArgsAsVarArraySig_A4(BGBCC_TransState *ctx, BCCX_Node **stk, int na, char *sig);
void BGBCC_CCXL_CompileArgsAsVarArraySig(BGBCC_TransState *ctx, BCCX_Node *l, char *sig);
void BGBCC_CCXL_CompileMethodcall(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileArgsFuncallNameB(BGBCC_TransState *ctx,char *fname, BCCX_Node *l);
int BGBCC_CCXL_CheckCompileObjGet(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
int BGBCC_CCXL_CheckCompileObjSet(BGBCC_TransState *ctx,BCCX_Node *l, char *name);
int BGBCC_CCXL_CheckCompileLoadIndex(BGBCC_TransState *ctx,BCCX_Node *arr, BCCX_Node *idx);
int BGBCC_CCXL_CheckCompileStoreIndex(BGBCC_TransState *ctx,BCCX_Node *arr, BCCX_Node *idx);
void BGBCC_CCXL_CompileNewArray(BGBCC_TransState *ctx,BCCX_Node *type, BCCX_Node *args, int isj);
void BGBCC_CCXL_CompileNewBasic(BGBCC_TransState *ctx,BCCX_Node *type, BCCX_Node *args);
void BGBCC_CCXL_CompileFormJmpTF(BGBCC_TransState *ctx, BCCX_Node *l,ccxl_label brt, ccxl_label brf);
void BGBCC_CCXL_CompileExprRef(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprDeref(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileForm(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprT(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExpr(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_CompileExprTail(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_CompileExprValueObject(BGBCC_TransState *ctx,char *sig, ccxl_type ty, BCCX_Node *l);
void BGBCC_CCXL_CompileExprAsTypeSig(BGBCC_TransState *ctx,char *sig, BCCX_Node *l);
void BGBCC_CCXL_CompileExprAsType(BGBCC_TransState *ctx,BCCX_Node *ty, BCCX_Node *l);
//AHSRC:ccxl/ccxl_fold.c
int BGBCC_CCXL_DoFoldLookupLocalIndex(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_DoExpressionLambdaFold(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_DoStatementLambdaFold(BGBCC_TransState *ctx, BCCX_Node *l);
void BGBCC_CCXL_LambdaFoldAddArgs(BGBCC_TransState *ctx, BCCX_Node *args);
void BGBCC_CCXL_SetupLambdaFold(BGBCC_TransState *ctx, BCCX_Node *args);
//AHSRC:ccxl/ccxl_global.c
void BGBCC_CCXL_CheckExpandGlobals(BGBCC_TransState *ctx);
int BGBCC_CCXL_HashName(char *name);
int BGBCC_CCXL_HashNameCase(char *name);
int BGBCC_CCXL_HashNameNoSig(char *name);
int BGBCC_CCXL_CheckNameNamesList(char *name, char *nameslst);
int BGBCC_CCXL_CheckFlagstrFlag(char *sig, char *flag);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_TryManifestLoadGlobal(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_HandleUsortGlobals(BGBCC_TransState *ctx);
void BGBCC_CCXL_CheckSanityLiterals(BGBCC_TransState *ctx);
void BGBCC_CCXL_CheckSanityGlobals(BGBCC_TransState *ctx);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalRns(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobal(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalFull(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalList(BGBCC_TransState *ctx, char *name);
int bgbcc_strcpy_nosig(char *dst, char *src);
int bgbcc_strcmp_nosig(char *s1, char *s2);
char *BGBCC_CCXL_SigNext(char *sig);
int BGBCC_CCXL_MatchSig(BGBCC_TransState *ctx, char *dsig, char *ssig);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalMatchSig(BGBCC_TransState *ctx, char *name, char *sig);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_GetGlobal2I(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_GetGlobal(BGBCC_TransState *ctx, char *name);
void BGBCC_CCXL_NormalizeGlobalDeclQn(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddGlobalDecl(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameArg(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameLocal(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameField(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameReg(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
void BGBCC_CCXL_AddFrameStatic(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *frame, BGBCC_CCXL_RegisterInfo *decl);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_AllocLiteral(BGBCC_TransState *ctx);
void BGBCC_CCXL_CheckFreeLiteral(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_AddLiteral(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetParentLiteralSig(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetParentLiteralSigDeref(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
char *BGBCC_CCXL_GetObjQNameR_I(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj, char *vt);
char *BGBCC_CCXL_GetObjQName(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_AddAsmBlob(BGBCC_TransState *ctx, char *text);
void BGBCC_CCXL_Begin(BGBCC_TransState *ctx, int tag);
int BGBCC_CCXL_CheckDefinedContextName(BGBCC_TransState *ctx, int tag, char *name);
void BGBCC_CCXL_BeginName(BGBCC_TransState *ctx, int tag, char *name);
void BGBCC_CCXL_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
void BGBCC_CCXL_SanityObjSize(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj, int flag);
void BGBCC_CCXL_FixupObjSize(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj, int flag);
void BGBCC_CCXL_End(BGBCC_TransState *ctx);
void BGBCC_CCXL_AttribStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_AttribInt(BGBCC_TransState *ctx, int attr, int val);
void BGBCC_CCXL_AttribLong(BGBCC_TransState *ctx, int attr, s64 val);
void BGBCC_CCXL_Marker(BGBCC_TransState *ctx, int tag);
void BGBCC_CCXL_ListAddLiteral(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *list, ccxl_register val);
void BGBCC_CCXL_LiteralSetField(BGBCC_TransState *ctx,int attr, char *name);
void BGBCC_CCXL_LiteralInt(BGBCC_TransState *ctx, int attr, s32 val);
void BGBCC_CCXL_LiteralLong(BGBCC_TransState *ctx, int attr, s64 val);
void BGBCC_CCXL_LiteralFloat(BGBCC_TransState *ctx, int attr, double val);
void BGBCC_CCXL_LiteralDouble(BGBCC_TransState *ctx, int attr, double val);
void BGBCC_CCXL_LiteralStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_LiteralWStr(BGBCC_TransState *ctx, int attr, char *str);
void BGBCC_CCXL_LiteralGlobalAddr(BGBCC_TransState *ctx,int attr, s32 gblid);
void BGBCC_CCXL_LiteralGlobalAddrIdx(BGBCC_TransState *ctx,int attr, s32 gblid, int idx);
void BGBCC_CCXL_LiteralData(BGBCC_TransState *ctx, int attr,byte *buf, int sz);
int BGBCC_CCXL_HandleMissingProto(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_HandleMissingVSig(BGBCC_TransState *ctx,char *name, char *sig);
//AHSRC:ccxl/ccxl_index.c
ccxl_label BGBCC_CCXL_LabelFromName(BGBCC_TransState *ctx, char *name);
ccxl_label BGBCC_CCXL_LabelFromName(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetLiteralRawSig(BGBCC_TransState *ctx, char *sig);
void BGBCC_CCXL_CompileBreak(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileBreakFalse(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileBreakTrue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinueFalse(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileContinueTrue(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompileJmp(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_CompileJmpFalse(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_CompileJmpTrue(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXL_ConvImm(BGBCC_TransState *ctx,ccxl_type dty, ccxl_type sty, ccxl_register sreg, ccxl_register *rdreg);
void BGBCC_CCXL_CompileJmpCond(BGBCC_TransState *ctx,char *op, ccxl_label lbl);
void BGBCC_CCXL_CompileJCO(BGBCC_TransState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn, ccxl_label lbl);
void BGBCC_CCXL_CompileJCT(BGBCC_TransState *ctx,BCCX_Node *l, ccxl_label lbl);
void BGBCC_CCXL_CompileJCF(BGBCC_TransState *ctx, BCCX_Node *l, ccxl_label lbl);
int BGBCC_CCXL_TryGetSizeofType(BGBCC_TransState *ctx, BCCX_Node *ty);
int BGBCC_CCXL_GetMinMaxSizeofType(BGBCC_TransState *ctx, BCCX_Node *ty,int *rmsz, int *rnsz, int *rmal, int *rnal);
int BGBCC_CCXL_TryGetOffsetofSig(BGBCC_TransState *ctx, char *sig, char *name);
int BGBCC_CCXL_TryGetOffsetofType(BGBCC_TransState *ctx,BCCX_Node *ty, char *name);
int BGBCC_CCXL_TryGetSizeofName(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_GetMinMaxSizeofName(BGBCC_TransState *ctx, char *name,int *rmsz, int *rnsz, int *rmal, int *rnal);
int BGBCC_CCXL_GetMinMaxSizeofDerefName(BGBCC_TransState *ctx, char *name,int *rmsz, int *rnsz, int *rmal, int *rnal);
int BGBCC_CCXL_StackCSelCmp(BGBCC_TransState *ctx, char *op);
int BGBCC_CCXL_StackCSelCmpZero(BGBCC_TransState *ctx, char *op);
void BGBCC_CCXL_CompileCSelCmp(BGBCC_TransState *ctx,char *op, BCCX_Node *ln, BCCX_Node *rn);
void BGBCC_CCXL_CompileCSel(BGBCC_TransState *ctx, BCCX_Node *l);
ccxl_status BGBCC_CCXL_StackCompileJmpTab(BGBCC_TransState *ctx,int clm, int cln, ccxl_label *clbl, s64 *clv, ccxl_label dfl, ccxl_label dfl2);
void BGBCC_CCXL_CompilePredCmp(BGBCC_TransState *ctx, char *op);
void BGBCC_CCXL_CompilePredCmpZero(BGBCC_TransState *ctx);
void BGBCC_CCXL_CompilePredCmpNonZero(BGBCC_TransState *ctx);
int BGBCC_CCXL_CompilePredExpr(BGBCC_TransState *ctx, BCCX_Node *l);
//AHSRC:ccxl/ccxl_infer.c
void BGBCC_CCXL_InferExpr_CapRef(BGBCC_TransState *ctx,int lvl, char *name);
int BGBCC_CCXL_InferExpr(BGBCC_TransState *ctx,BCCX_Node *l, ccxl_type *rdty);
int BGBCC_CCXL_InferExprCleanP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_InferBlockPredSafeP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_InferExprSimpleCmpP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_InferBlockCapRef(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_InferLambdaCapRef(BGBCC_TransState *ctx, BCCX_Node *l);
//AHSRC:ccxl/ccxl_pred.c
bool BGBCC_CCXL_IsRegBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalBasicP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegBaseP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegBaseExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegRegExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalExtP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLocalP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegTempP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegArgP(BGBCC_TransState *ctx, ccxl_register sreg);
bool BGBCC_CCXL_IsRegGlobalP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegThisIdxP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegThisP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegZzP(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegID(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_MakeTypeVTy(BGBCC_TransState *ctx, int id);
ccxl_type BGBCC_CCXL_MakeTypeID(BGBCC_TransState *ctx, int id);
ccxl_type BGBCC_CCXL_MakeTypeID_Arr(BGBCC_TransState *ctx, int id, int asz);
ccxl_type BGBCC_CCXL_GetRegType(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetRegStorageType(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegAsType(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type tty, ccxl_register *rtreg);
ccxl_type BGBCC_CCXL_GetRegDerefType(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetTypeReturnType(BGBCC_TransState *ctx, ccxl_type bty);
ccxl_type BGBCC_CCXL_GetRegReturnType(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_IsRegGlobalFunctionP(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_type BGBCC_CCXL_GetRegPointerToType(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegSgLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegFloatP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegDoubleP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegPointerP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegSmallIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegFloat16P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegBFloat16P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegVariantP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegVec128P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegHugePointerP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegQuadPointerP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegVolatileP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmULongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmUIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmUnsignedP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmSmallLongP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmFloatP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmDoubleP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmX64P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmX128P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt128P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmFloat128P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmFieldNameP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmStringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmU8StringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmWStringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmW4StringP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmBigIntP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmLiteralP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmGlobalAddrP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt12P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImm12P(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
bool BGBCC_CCXL_IsRegImm32P(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
bool BGBCC_CCXL_IsRegImmIntLit12P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt16P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt24P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmInt32P(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegNonReachTraceP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmZeroP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmILP(BGBCC_TransState *ctx, ccxl_register reg);
bool BGBCC_CCXL_IsRegImmILFDP(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegImmLit12(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit12(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit16(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLit24(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmLitIndex(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImmIntValue(BGBCC_TransState *ctx, ccxl_register reg);
s64 BGBCC_CCXL_GetRegImmLongValue(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegImmX128Value(BGBCC_TransState *ctx, ccxl_register reg, s64 *rval_lo, s64 *rval_hi);
int BGBCC_CCXL_GetRegImmInt128Value(BGBCC_TransState *ctx, ccxl_register reg, s64 *rval_lo, s64 *rval_hi);
int BGBCC_CCXL_GetRegImmFloat128Value(BGBCC_TransState *ctx, ccxl_register reg, s64 *rval_lo, s64 *rval_hi);
int BGBCC_CCXL_GetRegImmBigIntValue(BGBCC_TransState *ctx, ccxl_register reg, u64 *rvala, int cnt);
double BGBCC_CCXL_GetRegImmFloatValue(BGBCC_TransState *ctx, ccxl_register reg);
double BGBCC_CCXL_GetRegImmDoubleValue(BGBCC_TransState *ctx, ccxl_register reg);
char *BGBCC_CCXL_GetRegImmStringValue(BGBCC_TransState *ctx, ccxl_register reg);
int BGBCC_CCXL_GetRegImm12Value(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
int BGBCC_CCXL_GetRegImm32Value(BGBCC_TransState *ctx, ccxl_register reg, ccxl_type type);
ccxl_status BGBCC_CCXL_GetRegForSmallIntValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val, int stv);
ccxl_status BGBCC_CCXL_GetRegForIntValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
ccxl_status BGBCC_CCXL_GetRegForLongValue(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val);
ccxl_status BGBCC_CCXL_GetRegForUIntValue(BGBCC_TransState *ctx, ccxl_register *rreg, u32 val);
ccxl_status BGBCC_CCXL_GetRegForULongValue(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val);
ccxl_status BGBCC_CCXL_GetRegForFloatValue(BGBCC_TransState *ctx, ccxl_register *rreg, f32 val);
ccxl_status BGBCC_CCXL_GetRegForDoubleValue(BGBCC_TransState *ctx, ccxl_register *rreg, f64 val);
ccxl_status BGBCC_CCXL_GetRegForInt128Value(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val_lo, s64 val_hi);
ccxl_status BGBCC_CCXL_GetRegForFloat128Value(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val_lo, s64 val_hi);
ccxl_status BGBCC_CCXL_GetRegForX128Value(BGBCC_TransState *ctx, ccxl_register *rreg, s64 val_lo, s64 val_hi, int vty);
ccxl_status BGBCC_CCXL_GetRegForStringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForWStringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForU8StringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForW4StringValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForBigIntValueStr(BGBCC_TransState *ctx, ccxl_register *rreg, char *str, int vty);
ccxl_status BGBCC_CCXL_GetRegForBigIntValueN(BGBCC_TransState *ctx, ccxl_register *rreg, u64 *rval, int n, int vty);
ccxl_status BGBCC_CCXL_GetRegForFieldIdValue(BGBCC_TransState *ctx, ccxl_register *rreg, char *str);
ccxl_status BGBCC_CCXL_GetRegForLiteralValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
ccxl_status BGBCC_CCXL_GetRegForGlobalAddrValue(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val);
ccxl_status BGBCC_CCXL_GetRegForGlobalAddrValueDisp(BGBCC_TransState *ctx, ccxl_register *rreg, s32 val, int disp);
int BGBCC_CCXL_GetTypeOperationZ(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeOperationExtZ(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeOperationBaseZ(BGBCC_TransState *ctx, ccxl_type ty);
//AHSRC:ccxl/ccxl_reduce.c
int BGBCC_CCXL_IsUnaryP(BGBCC_TransState *ctx, BCCX_Node *l, char *op);
int BGBCC_CCXL_IsBinaryP(BGBCC_TransState *ctx, BCCX_Node *l, char *op);
int BGBCC_CCXL_IsBinaryCompareP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_BoolExpr(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsFixIntAssignRVP(BGBCC_TransState *ctx, BCCX_Node *l, char **rname, int *rval);
int BGBCC_CCXL_IsFixIntCompareRVP(BGBCC_TransState *ctx, BCCX_Node *l, char **rname, char **rcmp, int *rval);
int BGBCC_CCXL_IsTagVarRVP(BGBCC_TransState *ctx, BCCX_Node *l, char *tag, char *name);
BCCX_Node *BGBCC_CCXL_WrapIntSuf(s64 i, char *suf);
BCCX_Node *BGBCC_CCXL_WrapRealSuf(double f, char *suf);
BCCX_Node *BGBCC_CCXL_WrapInt(s64 i);
BCCX_Node *BGBCC_CCXL_WrapReal(double f);
BCCX_Node *BGBCC_CCXL_WrapComplex(double fr, double fi);
BCCX_Node *BGBCC_CCXL_WrapVec2(double x0, double x1, char *suf);
BCCX_Node *BGBCC_CCXL_WrapVec4(double x0, double x1, double x2, double x3, char *suf);
BCCX_Node *BGBCC_CCXL_WrapInt128(bgbcc_vint128 i);
BCCX_Node *BGBCC_CCXL_WrapInt128Suf(bgbcc_vint128 i, char *suf);
BCCX_Node *BGBCC_CCXL_WrapFloat128(bgbcc_vfloat128 f);
BCCX_Node *BGBCC_CCXL_WrapFloat128Suf(bgbcc_vfloat128 f, char *suf);
bgbcc_vint128 BGBCC_CCXL_UnwrapInt128(BGBCC_TransState *ctx, BCCX_Node *l);
bgbcc_vfloat128 BGBCC_CCXL_UnwrapFloat128(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsIntP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsRealP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsReal2P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsComplexP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsSmallComplexP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsCharP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsInt128P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsSmallInt128P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsFloat128P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsReal128P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsVec2P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsVec4P(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsQuatP(BGBCC_TransState *ctx, BCCX_Node *l);
int BGBCC_CCXL_IsSmallQuatP(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_Boolify(BGBCC_TransState *ctx, BCCX_Node *l);
char *BGBCC_CCXL_BinaryTySuf(BGBCC_TransState *ctx, char *op,BCCX_Node *ln, BCCX_Node *rn);
BCCX_Node *BGBCC_CCXL_ReduceForm(BGBCC_TransState *ctx,BCCX_Node *l, int flag);
int BGBCC_CCXL_SetLine(BGBCC_TransState *ctx, BCCX_Node *l,char *fn, int ln);
BCCX_Node *BGBCC_CCXL_ReduceStatementForm(BGBCC_TransState *ctx,BCCX_Node *l, int flag);
BCCX_Node *BGBCC_CCXL_ReduceExpr(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ReduceStatement(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ReduceExprConst(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_ReduceExprConst2(BGBCC_TransState *ctx, BCCX_Node *l);
BCCX_Node *BGBCC_CCXL_TryReduceExprAsTypeSig(BGBCC_TransState *ctx,char *sig, BCCX_Node *l);
//AHSRC:ccxl/ccxl_register.c
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_AllocRegisterInfo(BGBCC_TransState *ctx);
bool BGBCC_CCXL_FreeRegisterInfo(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *rinf);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_CloneRegisterInfo(BGBCC_TransState *ctx, BGBCC_CCXL_RegisterInfo *rinf);
ccxl_status BGBCC_CCXL_RegisterAllocTemporary(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryLLn(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg, char *fn, int ln);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryInit(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryInit2(BGBCC_TransState *ctx, ccxl_type bty, ccxl_register *rtreg, int fl);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryInt(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryLong(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryFloat(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryDouble(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryPointer(BGBCC_TransState *ctx, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryMatch(BGBCC_TransState *ctx, ccxl_register reg, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterAllocTemporaryMatchInit(BGBCC_TransState *ctx, ccxl_register reg, ccxl_register *rtreg);
ccxl_status BGBCC_CCXL_RegisterCheckRelease(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_RegisterCheckAcquire(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_RegisterIsTempFree(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_RegisterIdentEqualP(BGBCC_TransState *ctx, ccxl_register sreg, ccxl_register treg);
ccxl_status BGBCC_CCXL_RegisterSequenceEqualP(BGBCC_TransState *ctx, ccxl_register sreg, ccxl_register treg);
ccxl_status BGBCC_CCXL_LoadslotCacheFlush(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_LoadslotCacheFlushStorePtr(BGBCC_TransState *ctx, ccxl_register dreg);
ccxl_status BGBCC_CCXL_LoadslotCacheFlushStoreSlot(BGBCC_TransState *ctx, ccxl_register dreg, BGBCC_CCXL_LiteralInfo *st, char *name, ccxl_register sreg);
ccxl_status BGBCC_CCXL_LoadslotCacheFlushReg(BGBCC_TransState *ctx, ccxl_register sreg);
ccxl_status BGBCC_CCXL_LoadslotCacheFlushRegIndex(BGBCC_TransState *ctx, ccxl_register sreg, ccxl_register ireg);
ccxl_status BGBCC_CCXL_LoadslotCacheAdd(BGBCC_TransState *ctx, ccxl_register dreg, ccxl_register sreg, BGBCC_CCXL_LiteralInfo *st, char *name);
ccxl_status BGBCC_CCXL_LoadslotCacheCheck(BGBCC_TransState *ctx, ccxl_register sreg, BGBCC_CCXL_LiteralInfo *st, char *name, ccxl_register *rdreg2);
ccxl_status BGBCC_CCXL_LoadIndexCacheAdd(BGBCC_TransState *ctx, ccxl_register dreg, ccxl_register sreg, ccxl_register ireg);
ccxl_status BGBCC_CCXL_LoadIndexCacheCheck(BGBCC_TransState *ctx, ccxl_register sreg, ccxl_register ireg, ccxl_register *rdreg2);
ccxl_status BGBCC_CCXL_LoadIndexConstCacheAdd(BGBCC_TransState *ctx, ccxl_register dreg, ccxl_register sreg, int idx);
ccxl_status BGBCC_CCXL_LoadIndexConstCacheCheck(BGBCC_TransState *ctx, ccxl_register sreg, int idx, ccxl_register *rdreg2);
ccxl_status BGBCC_CCXL_LoadslotCacheFlushRegIndexConst(BGBCC_TransState *ctx, ccxl_register sreg, int idx);
//AHSRC:ccxl/ccxl_ril3.c
int BGBCC_CCXLR3_ClearLabels(BGBCC_TransState *ctx);
int BGBCC_CCXLR3_LabelToIndex(BGBCC_TransState *ctx, ccxl_label lbl);
ccxl_label BGBCC_CCXLR3_IndexToLabel(BGBCC_TransState *ctx, int ix);
void BGBCC_CCXLR3_CheckLzWindow(BGBCC_TransState *ctx);
void BGBCC_CCXLR3_CheckExpandOutput(BGBCC_TransState *ctx, int sz);
void BGBCC_CCXLR3_EmitByte(BGBCC_TransState *ctx, int val);
void BGBCC_CCXLR3_EmitUVLI(BGBCC_TransState *ctx, u64 val);
void BGBCC_CCXLR3_EmitSVLI(BGBCC_TransState *ctx, s64 val);
void BGBCC_CCXLR3_EmitOpVLI(BGBCC_TransState *ctx, u32 val);
void BGBCC_CCXLR3_UpdateTextByte(BGBCC_TransState *ctx, int val);
void BGBCC_CCXLR3_UpdateTextString(BGBCC_TransState *ctx, byte *str, int sz);
int BGBCC_CCXLR3_TextLookupMatch(BGBCC_TransState *ctx, byte *str, byte *stre, int *rl, int *rd);
void BGBCC_CCXLR3_EmitTextByte(BGBCC_TransState *ctx, int val);
void BGBCC_CCXLR3_EmitRawString(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXLR3_EmitOp(BGBCC_TransState *ctx, int op);
int BGBCC_IsEmitRil(BGBCC_TransState *ctx);
void BGBCC_CCXLR3_EmitArgInt(BGBCC_TransState *ctx, s64 val);
void BGBCC_CCXLR3_EmitArgTag(BGBCC_TransState *ctx, s64 val);
void BGBCC_CCXLR3_EmitArgFloat(BGBCC_TransState *ctx, f64 val);
int BGBCC_CCXLR3_CheckEmitRIL(BGBCC_TransState *ctx);
int BGBCC_CCXL_CheckIsStaticLib(BGBCC_TransState *ctx);
void BGBCC_CCXLR3_EmitBufUVLI(byte **rct, u64 val);
void BGBCC_CCXLR3_EmitArgBlob(BGBCC_TransState *ctx, byte *str, int len);
void BGBCC_CCXLR3_EmitArgString(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXLR3_EmitArgDataBlob(BGBCC_TransState *ctx, byte *buf, int len);
void BGBCC_CCXLR3_EmitArgLabel(BGBCC_TransState *ctx, ccxl_label lbl);
void BGBCC_CCXLR3_EmitArgTextBlob(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXLR3_EmitArgSymbol(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXLR3_EmitArgSigstr(BGBCC_TransState *ctx, char *str);
void BGBCC_CCXLR3_BeginRecRIL(BGBCC_TransState *ctx);
u64 BGBCC_CCXLR3_ReadUVLI(BGBCC_TransState *ctx, byte **rcs);
s64 BGBCC_CCXLR3_ReadSVLI(BGBCC_TransState *ctx, byte **rcs);
f64 BGBCC_CCXLR3_ReadFVLI(BGBCC_TransState *ctx, byte **rcs);
int BGBCC_CCXLR3_ReadXFVLI(BGBCC_TransState *ctx, byte **rcs,s64 *rlo, s64 *rhi);
u32 BGBCC_CCXLR3_ReadOpVLI(BGBCC_TransState *ctx, byte **rcs);
int BGBCC_CCXLR3_ReadTag(BGBCC_TransState *ctx, byte **rcs);
int BGBCC_CCXLR3_ReadTextBlob(BGBCC_TransState *ctx, byte **rcs,byte **rbuf, int *rsz);
char *BGBCC_CCXLR3_ReadString(BGBCC_TransState *ctx, byte **rcs);
ccxl_label BGBCC_CCXLR3_ReadLabel(BGBCC_TransState *ctx, byte **rcs);
char *BGBCC_CCXLR3_ReadSymbol(BGBCC_TransState *ctx, byte **rcs);
char *BGBCC_CCXLR3_ReadSigstr(BGBCC_TransState *ctx, byte **rcs);
void BGBCC_CCXLR3_DecodeBufCmd(BGBCC_TransState *ctx, byte **rcs);
int BGBCC_CCXLR3_CheckCanLoadNow(BGBCC_TransState *ctx, byte *buf, int bufsz);
void BGBCC_CCXLR3_LoadBufferRIL(BGBCC_TransState *ctx, byte *buf, int bufsz);
//AHSRC:ccxl/ccxl_stack.c
void BGBCC_CCXL_DebugPrintStackLLn(BGBCC_TransState *ctx, char *op, char *file, int line);
ccxl_status BGBCC_CCXL_CheckExpandStack(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_PushRegister(BGBCC_TransState *ctx, ccxl_register reg);
ccxl_status BGBCC_CCXL_PopRegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PeekRegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PeekRegisterIdx(BGBCC_TransState *ctx,ccxl_register *rreg, int idx);
ccxl_status BGBCC_CCXL_PeekRegisterMarkIdx(BGBCC_TransState *ctx,ccxl_register *rreg, int idx);
ccxl_status BGBCC_CCXL_PushURegister(BGBCC_TransState *ctx,ccxl_register reg);
ccxl_status BGBCC_CCXL_PopURegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PeekURegister(BGBCC_TransState *ctx,ccxl_register *rreg);
ccxl_status BGBCC_CCXL_PushMark(BGBCC_TransState *ctx);
int BGBCC_CCXL_LookupArgIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupLocalIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupStaticIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupGlobalIndex(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_LookupGlobalIndexSig(BGBCC_TransState *ctx, char *name, char *sig);
int BGBCC_CCXL_LookupAsRegister(BGBCC_TransState *ctx,char *name, ccxl_register *rreg);
int BGBCC_CCXL_LookupAsRegisterSig(BGBCC_TransState *ctx,char *name, char *sig, ccxl_register *rreg);
int BGBCC_CCXL_LookupAsRegisterStore(BGBCC_TransState *ctx,char *name, ccxl_register *rreg);
int BGBCC_CCXL_TryLookupAsRegister(BGBCC_TransState *ctx,char *name, ccxl_register *rreg, bool store);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_TryGetThisObj(BGBCC_TransState *ctx);
int BGBCC_CCXL_TryGetThisType(BGBCC_TransState *ctx,ccxl_type *rty);
int BGBCC_CCXL_TryGetSuperType(BGBCC_TransState *ctx,ccxl_type *rty);
int BGBCC_CCXL_TryLookupAsRegisterSig(BGBCC_TransState *ctx,char *name, char *sig, ccxl_register *rreg, bool store);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupLocalInfo(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupArgInfo(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupGlobalInfo(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_PushLoad(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_PopStore(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_ConstIntStore(BGBCC_TransState *ctx,s64 val, char *name);
ccxl_status BGBCC_CCXL_ConstUIntStore(BGBCC_TransState *ctx,s64 val, char *name);
ccxl_status BGBCC_CCXL_RefRefStore(BGBCC_TransState *ctx,char *sname, char *dname);
ccxl_status BGBCC_CCXL_PushThis(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_PushSuper(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_MovLoadStore(BGBCC_TransState *ctx,char *dname, char *sname);
ccxl_status BGBCC_CCXL_StackTransforCallArgsDbg(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackTransforCallArgs(BGBCC_TransState *ctx);
int BGBCC_CCXL_StackGetCntCallArgs(BGBCC_TransState *ctx);
int BGBCC_CCXL_StackGetConvCallArgs(BGBCC_TransState *ctx,ccxl_register fnreg);
char *BGBCC_CCXL_StackGetSigCallArgs(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCallName(BGBCC_TransState *ctx,char *name, int flag);
int BGBCC_CCXL_QueryTargetFeature(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_CheckFuncNameInstrinsicP(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackTransforCallArgsInline(BGBCC_TransState *ctx, BGBCC_CCXL_RegisterInfo *rfn);
ccxl_status BGBCC_CCXL_StackPhiTemporaries(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackPhiTemporariesCall(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCallName2(BGBCC_TransState *ctx,char *name, char *dname, int flag);
ccxl_status BGBCC_CCXL_StackPopCall(BGBCC_TransState *ctx, int flag);
ccxl_status BGBCC_CCXL_StackPopCall2(BGBCC_TransState *ctx,char *dname, int flag);
ccxl_status BGBCC_CCXL_StackLoadIndexConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackStoreIndexConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackLoadIndexAddrConst(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackLoadIndex(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackStoreIndex(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackLoadIndexAddr(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDup(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDup(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDupB(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDupClean(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackExch(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackDupIdx(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackDupMarkIdx(BGBCC_TransState *ctx, int idx);
ccxl_status BGBCC_CCXL_StackRetV(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackRet(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCastBool(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackCastSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackLoadSlotStore(BGBCC_TransState *ctx, char *name, char *dname);
ccxl_status BGBCC_CCXL_StackLoadSlotStoreI(BGBCC_TransState *ctx, char *name, char *dname);
ccxl_status BGBCC_CCXL_StackLoadSlotAddrStore(BGBCC_TransState *ctx, char *name, char *dname);
ccxl_status BGBCC_CCXL_StackLoadIndexConstStore(BGBCC_TransState *ctx, int idx, char *dname);
ccxl_status BGBCC_CCXL_StackLoadIndexConstStoreI(BGBCC_TransState *ctx, int idx, char *dname);
ccxl_status BGBCC_CCXL_StackLoadIndexStore(BGBCC_TransState *ctx, char *dname);
ccxl_status BGBCC_CCXL_StackCastSigStore(BGBCC_TransState *ctx, char *sig, char *dname);
ccxl_status BGBCC_CCXL_StackPushConstSmallInt(BGBCC_TransState *ctx, s32 val, int st);
ccxl_status BGBCC_CCXL_StackPushConstSmallLong(BGBCC_TransState *ctx, s64 val, int st);
ccxl_status BGBCC_CCXL_StackPushConstInt(BGBCC_TransState *ctx, s32 val);
ccxl_status BGBCC_CCXL_StackPushConstUInt(BGBCC_TransState *ctx, u32 val);
ccxl_status BGBCC_CCXL_StackPushConstLong(BGBCC_TransState *ctx, s64 val);
ccxl_status BGBCC_CCXL_StackPushConstULong(BGBCC_TransState *ctx, u64 val);
ccxl_status BGBCC_CCXL_StackPushConstInt128(BGBCC_TransState *ctx, s64 val_lo, s64 val_hi);
ccxl_status BGBCC_CCXL_StackPushConstFloat128(BGBCC_TransState *ctx, s64 val_lo, s64 val_hi);
ccxl_status BGBCC_CCXL_StackPushConstFloat(BGBCC_TransState *ctx, double val);
ccxl_status BGBCC_CCXL_StackPushConstDouble(BGBCC_TransState *ctx, double val);
ccxl_status BGBCC_CCXL_StackPushConstComplex(BGBCC_TransState *ctx, double rval, double ival);
ccxl_status BGBCC_CCXL_StackPushConstVec2F(BGBCC_TransState *ctx, double x0, double x1, int vty);
ccxl_status BGBCC_CCXL_StackPushConstVec4F(BGBCC_TransState *ctx, double x0, double x1, double x2, double x3, int vty);
ccxl_status BGBCC_CCXL_StackPushConstVecXi(BGBCC_TransState *ctx, s64 val_lo, s64 val_hi, int vty);
ccxl_status BGBCC_CCXL_StackPushConstVecLi(BGBCC_TransState *ctx, s64 val, int vty);
ccxl_status BGBCC_CCXL_StackPushConstString(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPushConstU8String(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPushConstWString(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPushConstW4String(BGBCC_TransState *ctx, char *val);
ccxl_status BGBCC_CCXL_StackPushConstBigInt(BGBCC_TransState *ctx, char *val, int vty);
ccxl_status BGBCC_CCXL_StackPushVoid(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackPushTempObj(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackPop(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackLoadAddr(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackLoadAddrVSig(BGBCC_TransState *ctx,char *name, char *sig);
ccxl_status BGBCC_CCXL_StackSizeofSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackSizeofVal(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackOffsetof(BGBCC_TransState *ctx,char *sig, char *name);
int BGBCC_CCXL_CheckForGetter(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_CheckForTypeGetter(BGBCC_TransState *ctx,ccxl_type sty, char *name);
int BGBCC_CCXL_CheckForTypeSetter(BGBCC_TransState *ctx,ccxl_type sty, char *name);
int BGBCC_CCXL_CheckForCNameGetter(BGBCC_TransState *ctx,char *cname, char *name);
int BGBCC_CCXL_CheckForCNameSetter(BGBCC_TransState *ctx,char *cname, char *name);
ccxl_status BGBCC_CCXL_StackLoadSlot(BGBCC_TransState *ctx, char *name);
int BGBCC_CCXL_VectorTypeIndexForName(BGBCC_TransState *ctx,ccxl_type sty, char *name);
ccxl_status BGBCC_CCXL_StackLoadSlotSig(BGBCC_TransState *ctx,char *name, char *sig);
ccxl_status BGBCC_CCXL_StackStoreSlot(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackLoadSlotAddr(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackBeginU(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackEndU(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackSetU(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackInitVar(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackInitVarValue(BGBCC_TransState *ctx, char *name);
ccxl_status BGBCC_CCXL_StackPushInitObj(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackLitTypeSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_StackVaStart(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackVaEnd(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_StackVaArg(BGBCC_TransState *ctx);
//AHSRC:ccxl/ccxl_stack_bin.c
char *BGBCC_CCXL_StackGetSigBinary(BGBCC_TransState *ctx,ccxl_type lty, ccxl_type rty);
char *BGBCC_CCXL_StackGetNameBinaryOverload(BGBCC_TransState *ctx, char *op);
char *BGBCC_CCXL_StackGetMangleNameBinaryOverload(BGBCC_TransState *ctx, char *op, ccxl_type lty, ccxl_type rty);
int BGBCC_CCXL_BinaryOpIdForName(BGBCC_TransState *ctx, char *op);
int BGBCC_CCXL_CompareOpIdForName(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackBinaryOp(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackBinaryOpStore(BGBCC_TransState *ctx,char *op, char *name);
//AHSRC:ccxl/ccxl_stack_un.c
char *BGBCC_CCXL_StackGetSigUnary(BGBCC_TransState *ctx,ccxl_type lty);
ccxl_status BGBCC_CCXL_StackUnaryOp(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackUnaryOpName(BGBCC_TransState *ctx,char *op, char *name);
ccxl_status BGBCC_CCXL_StackUnaryOpNameB(BGBCC_TransState *ctx,char *op, char *name, int mod);
ccxl_status BGBCC_CCXL_StackUnaryOpStore(BGBCC_TransState *ctx,char *op, char *dname);
ccxl_status BGBCC_CCXL_StackTrinaryOp(BGBCC_TransState *ctx, char *op);
ccxl_status BGBCC_CCXL_StackTrinaryOpStore(BGBCC_TransState *ctx,char *op, char *name);
//AHSRC:ccxl/ccxl_struct.c
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForType(BGBCC_TransState *ctx, ccxl_type ty);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForSig2(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetStructureForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetStructureForSig2(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_LookupStructureIDForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupTypedefForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupTypedefForSig2(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetTypedefForSig(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetTypedefForSig2(BGBCC_TransState *ctx, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_LookupStructureForType(BGBCC_TransState *ctx, ccxl_type type);
int BGBCC_CCXL_LookupStructureIDForType(BGBCC_TransState *ctx, ccxl_type type);
int BGBCC_CCXL_LookupStructContainsFieldID(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name);
int BGBCC_CCXL_LookupStructFieldID(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name);
int BGBCC_CCXL_LookupStructFieldIDSig(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name, char *sig);
BGBCC_CCXL_LiteralInfo *BGBCC_CCXL_GetStructSuperclass(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st);
ccxl_status BGBCC_CCXL_LookupStructFieldType(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name, ccxl_type *rty);
ccxl_status BGBCC_CCXL_LookupStructFieldTypeSig(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name, char *sig, ccxl_type *rty);
ccxl_status BGBCC_CCXL_LookupStructSuperFieldType(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, char *name, int *rsi, int *rfi, ccxl_type *rty);
ccxl_status BGBCC_CCXL_LookupStructFieldIdType(BGBCC_TransState *ctx, BGBCC_CCXL_LiteralInfo *st, int idx, ccxl_type *rty);
int BGBCC_CCXL_GetArraySizeForSig(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_GetArraySizeForSig2(BGBCC_TransState *ctx, char *sig);
int BGBCC_CCXL_GetArraySizeForSig2R(BGBCC_TransState *ctx, char **rsig);
int BGBCC_CCXL_GetArraySizeForSig3R(BGBCC_TransState *ctx, char **rsig);
ccxl_status BGBCC_CCXL_GetStructSigFixedSize(BGBCC_TransState *ctx, char *sig, int *rsz);
ccxl_status BGBCC_CCXL_GetSigFixedSize(BGBCC_TransState *ctx, char *sig, int *rsz);
char *BGBCC_CCXL_SigGetReturnSig(BGBCC_TransState *ctx, char *sig);
ccxl_status BGBCC_CCXL_GetStructSigMinMaxSize(BGBCC_TransState *ctx, char *sig, int *rsz, int *ral);
ccxl_status BGBCC_CCXL_GetSigMinMaxSize(BGBCC_TransState *ctx, char *sig, int *rsz, int *ral);
ccxl_status BGBCC_CCXL_MarkTypeAccessed(BGBCC_TransState *ctx, ccxl_type type);
ccxl_status BGBCC_CCXL_MarkTypeVarConv(BGBCC_TransState *ctx, ccxl_type type);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureStaticMember(BGBCC_TransState *ctx, char *cname, char *fname);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureStaticMemberRns(BGBCC_TransState *ctx, char *cname, char *fname);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureMember(BGBCC_TransState *ctx, char *cname, char *fname);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureMethod(BGBCC_TransState *ctx, char *cname, char *fname, char *sig);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureMethodRns(BGBCC_TransState *ctx, char *cname, char *fname, char *sig);
BGBCC_CCXL_RegisterInfo *BGBCC_CCXL_LookupStructureVirtualMethod(BGBCC_TransState *ctx, char *cname, char *fname, char *sig);
//AHSRC:ccxl/ccxl_trace.c
BGBCC_CCXL_VirtOp *BGBCC_CCXL_AllocVirtOp(BGBCC_TransState *ctx);
BGBCC_CCXL_VirtTr *BGBCC_CCXL_AllocVirtTr(BGBCC_TransState *ctx);
BGBCC_CCXL_VirtOp *BGBCC_CCXL_CloneVirtOp(BGBCC_TransState *ctx,BGBCC_CCXL_VirtOp *vop);
int BGBCC_CCXL_AddVirtOp(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_AddVirtTr(BGBCC_TransState *ctx, BGBCC_CCXL_VirtTr *tr);
int BGBCC_CCXL_EmitMarkEndTrace(BGBCC_TransState *ctx);
ccxl_status BGBCC_CCXL_GlobalMarkReachable_VReg(BGBCC_TransState *ctx,ccxl_register reg, int afl);
ccxl_status BGBCC_CCXL_GlobalMarkReachable_Func(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_CCXL_GlobalMarkReachable(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_CCXL_GlobalMarkReachableB(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj, int afl);
int BGBCC_CCXL_CheckVirtOpNoSwaps(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_CheckVirtOpIsLoadStore(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_CheckVirtOpIsStore(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_CheckVirtOpIsLoad(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op);
int BGBCC_CCXL_CheckVirtOpOrderDep(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op1, BGBCC_CCXL_VirtOp *op2);
int BGBCC_CCXL_CheckVirtOpOrderOnly(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op1, BGBCC_CCXL_VirtOp *op2);
int BGBCC_CCXL_CheckVirtOpCanSwap(BGBCC_TransState *ctx, BGBCC_CCXL_VirtOp *op1, BGBCC_CCXL_VirtOp *op2);
s64 BGBCC_CCXL_DecodeFlagStr(BGBCC_TransState *ctx, char *str);
int BGBCC_CCXL_NormalizeImmVReg(BGBCC_TransState *ctx, ccxl_type type, ccxl_register treg, ccxl_register *rtreg);
//AHSRC:ccxl/ccxl_type.c
bool BGBCC_CCXL_TypeSmallTypeP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeSmallIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallSIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallUIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgInt128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallInt128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBitIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallBitIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSignedP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgIntP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgNLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgLongP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgInt128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFloatP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeDoubleP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFloat128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFloat16P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeHFloat16P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBFloat16P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFloat8P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeRealP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseRealP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBcd64P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBcd128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBcdP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVariantP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeQuadVariantP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVarObjP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVarRefP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeQuadVarObjP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeQuadVarRefP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeCStringP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeCWStringP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallFloatP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallDoubleP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallFloat128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallVariantP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseILFD_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallILFD_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallILFDP_P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeBaseSmallIL_P(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_GetTypeBaseType(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypePointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeArrayP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeArrayOrPointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeRefArrayP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFatArrayP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSquareArrayP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSquareArrayPtrP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeMethodPointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFatPointerP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSignedByteP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedByteP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgByteP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSignedShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeUnsignedShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSgShortP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVoidP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVarArgsP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVaListP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeBaseEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeBaseSmallEqualP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
bool BGBCC_CCXL_TypeOprBasicP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeObjectLiteralIndex(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeObjectP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeFunctionP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeValueObjectP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIsRefObjectP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeRefStringP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIsObjectP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVecAs64P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVec64P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVec128P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVec256P(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeVecP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeComplexP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallFComplexP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallDComplexP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallGComplexP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeQuatP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeSmallQuatP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeIsTypedefP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_CCXL_TypeGetTypedefType(BGBCC_TransState *ctx, ccxl_type ty, ccxl_type *rty);
int BGBCC_CCXL_TypeAsOprBasic(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeAsOprExtBasic(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalBaseSize(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalBaseAlign(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalBaseShift(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalSize(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalAlign(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_CCXL_TypeGetLogicalPadSize(BGBCC_TransState *ctx, ccxl_type ty);
ccxl_status BGBCC_CCXL_TypeDerefType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_TypePointerType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_TypeAutoPromoteType(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty);
int BGBCC_CCXL_TypeGetArraySize(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeArrayAdjustSize(BGBCC_TransState *ctx, ccxl_type sty, ccxl_type *rdty, int newsz);
int BGBCC_CCXL_TypeGetArrayDimSize(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeGetBitIntSize(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeGetArrayFinalSize(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeGetPointerClass(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeNearPointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeFarPointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeHugePointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeQuadPointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeVolatilePointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeRestrictPointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeMayaliasPointerP(BGBCC_TransState *ctx, ccxl_type sty);
int BGBCC_CCXL_TypeUnpackOverflow(BGBCC_TransState *ctx, ccxl_type ty, BGBCC_CCXL_TypeOverflow *rovf);
int BGBCC_CCXL_TypeIndexOverflow(BGBCC_TransState *ctx, BGBCC_CCXL_TypeOverflow ovf);
ccxl_status BGBCC_CCXL_TypeFromOverflow(BGBCC_TransState *ctx, ccxl_type *rty, BGBCC_CCXL_TypeOverflow ovf);
ccxl_status BGBCC_CCXL_TypeFromSig(BGBCC_TransState *ctx, ccxl_type *rty, char *sig);
char *BGBCC_CCXL_TypeGetSig(BGBCC_TransState *ctx, ccxl_type ty);
ccxl_type BGBCC_CCXL_TypeWrapBasicType(int ty);
int BGBCC_CCXL_TypeCompatibleP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
int BGBCC_CCXL_TypeCompatibleArchP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
int BGBCC_CCXL_TypeCompatibleValueExtP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
int BGBCC_CCXL_TypeCompatibleFormatP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
int BGBCC_CCXL_TypeCompatibleStorageP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
int BGBCC_CCXL_TypeCompatibleFlP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty, int fl);
bool BGBCC_CCXL_TypeSupportsOperatorP(BGBCC_TransState *ctx, ccxl_type ty, int opr);
ccxl_status BGBCC_CCXL_GetTypeBinaryDest(BGBCC_TransState *ctx, int opr, ccxl_type lty, ccxl_type rty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_GetTypeBinaryDestB(BGBCC_TransState *ctx, int opr, ccxl_type lty, ccxl_type rty, ccxl_type *rdty, int flag);
ccxl_status BGBCC_CCXL_GetTypeCompareBinaryDest(BGBCC_TransState *ctx, int opr, ccxl_type lty, ccxl_type rty, ccxl_type *rdty);
ccxl_status BGBCC_CCXL_TypeCheckConvImplicit(BGBCC_TransState *ctx, int opr, ccxl_type dty, ccxl_type sty);
ccxl_status BGBCC_CCXL_TypeCheckConvTransparentP(BGBCC_TransState *ctx, ccxl_type dty, ccxl_type sty);
//AHSRC:ccxl/ccxl_fr2e.c
byte *BGBCC_FR2E_BufEmitUVli(byte *dct, u64 val);
byte *BGBCC_FR2E_BufEmitSVli(byte *dct, s64 val);
void BGBCC_FR2E_BufEmitTwocc(byte **rct, u16 tag, byte *dat, int sz);
void BGBCC_FR2E_BufEmitOnecc(byte **rct, byte tag, byte *dat, int sz);
void BGBCC_FR2E_BufEmitFourcc(byte **rct, u32 tag, byte *dat, int sz);
int BGBCC_FR2E_StrHash(char *str);
int BGBCC_FR2E_LookupString(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, char *str);
int BGBCC_FR2E_GetString(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, char *str);
int BGBCC_FR2E_BufEmitOneccString(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte **rct, byte tag, char *str);
void BGBCC_FR2E_EmitLiteralTableTwoccBuf(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, u16 tag, byte *dat, int sz);
void BGBCC_FR2E_EmitGlobalTableTwoccBuf(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, u16 tag, byte *dat, int sz);
void BGBCC_FR2E_CheckExpandTableData(byte **rdat, int *rdsz, int *rdmsz, int sz);
void BGBCC_FR2E_CheckExpandStridxData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, int sz);
void BGBCC_FR2E_CheckExpandVopData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, int sz);
void BGBCC_FR2E_CheckExpandVtrData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, int sz);
void BGBCC_FR2E_CheckExpandVosiData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, int sz);
void BGBCC_FR2E_CheckExpandVtsiData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, int sz);
byte *BGBCC_FR2E_BufEmitType(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte *dct, ccxl_type type, int fl);
int BGBCC_FR2E_BitSpread(int a);
int BGBCC_FR2E_BitMerge(int a, int b);
byte *BGBCC_FR2E_BufEmitRegister(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte *dct, ccxl_register reg, int fl);
int BGBCC_FR2E_EmitVirtOp(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_VirtOp *op);
int BGBCC_FR2E_EmitVirtTrace(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *inf, BGBCC_CCXL_VirtTr *tr);
u64 BGBCC_FR2E_FlattenFunctionTraces(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *inf, int fl);
void BGBCC_FR2E_FlattenFunctionTracesBuf(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *inf, byte **rct, int fl);
void BGBCC_FR2E_FlattenVarListBuf(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo **inf, int ninf, byte **rct, int fl);
void BGBCC_FR2E_FlattenRegisterInfoBuf(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *inf, byte **rct, int fl);
void BGBCC_FR2E_FlattenLiteral(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_LiteralInfo *inf);
void BGBCC_FR2E_FlattenGlobal(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *inf);
void BGBCC_FR2E_FlattenLiterals(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_FlattenGlobals(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_FlattenStridxData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
byte *BGBCC_FR2E_FlattenImage(BGBCC_TransState *ctx, int *rsz);
void BGBCC_FR2E_ReadTag(byte **rcs, u32 *rtag, byte **rdat, int *rsz);
u64 BGBCC_FR2E_BufReadUVli(byte **rcs);
s64 BGBCC_FR2E_BufReadSVli(byte **rcs);
void BGBCC_FR2E_UnpackStridxData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_UnpackVirtTraceData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_UnpackVosiData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
int BGBCC_FR2E_UnMortonValueX(u64 v);
void BGBCC_FR2E_UnMortonValue(u64 v, int *rvx, int *rvy);
void BGBCC_FR2E_UnpackType(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte **rcs, ccxl_type *rty);
void BGBCC_FR2E_UnpackVopRegister(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte **rcs, BGBCC_CCXL_VirtOp *vop, ccxl_register *rty);
void BGBCC_FR2E_UnpackVopImmed(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte **rcs, BGBCC_CCXL_VirtOp *vop);
void BGBCC_FR2E_UnpackVirtOpSingle(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte **rcs, BGBCC_CCXL_VirtOp *vop);
void BGBCC_FR2E_UnpackVirtOpData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
char *BGBCC_FR2E_UnpackStringDataObj(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, byte *idat, int isz);
void BGBCC_FR2E_UnpackRegFieldsArray(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo ***rregs, int *rn_regs, byte *idat, int isz);
void BGBCC_FR2E_UnpackGlobalObj(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img, BGBCC_CCXL_RegisterInfo *gbl, byte *idat, int isz, int tag);
void BGBCC_FR2E_UnpackGlobalData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_UnpackLiteralData(BGBCC_TransState *ctx, BGBCC_FR2E_ImgState *img);
void BGBCC_FR2E_LoadBufferFRB(BGBCC_TransState *ctx, byte *buf, int bufsz);
//AHSRC:ccxl/ccxl_lvatag.c
void CCXL_LVA_TagInit(BGBCC_TransState *ctx);
int CCXL_LVA_HashName(char *str);
BGBCC_CCXL_LvaTagInfo *CCXL_LVA_LookupTagInfoForName(BGBCC_TransState *ctx, char *name);
BGBCC_CCXL_LvaTagInfo *CCXL_LVA_GetTagInfoForName(BGBCC_TransState *ctx, char *name);
int CCXL_LVA_LookupTagIndexForName(BGBCC_TransState *ctx, char *name);
int CCXL_LVA_GetTagIndexForName(BGBCC_TransState *ctx, char *name);
char *CCXL_LVA_GetTagNameForIndex(BGBCC_TransState *ctx, int idx);
void CCXL_LVA_Init(BGBCC_TransState *ctx);
//AHSRC:shcc/shx_binop.c
int BGBCC_SHXC_NormalizeImmVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_SHXC_EmitBinaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitDstRegOp(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int dreg);
int BGBCC_SHXC_EmitUnaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitUnaryVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitCompareVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitCompareVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitReturnVoid(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitReturnVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg);
int BGBCC_SHXC_EmitCsrvVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg);
int BGBCC_SHXC_EmitCallBuiltin(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_EmitCallBuiltinArgs(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dst, char *name, int narg, ccxl_register *args);
int BGBCC_SHXC_EmitCallFcnVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register fcn);
int BGBCC_SHXC_EmitCallName(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_EmitCallVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dst, ccxl_register fcn, int narg, ccxl_register *args);
int BGBCC_SHXC_EmitCSeltSelectVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitCSeltCompareVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitCSeltVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, ccxl_type ptype, int cmp, ccxl_register ureg, ccxl_register vreg);
//AHSRC:shcc/shx_bufasm.c
char *BGBCC_SHXA_EatWhite(char *cs);
char *BGBCC_SHXA_EatWhiteNoLinebreak(char *cs);
char *BGBCC_SHXA_EatWhiteOnlyNoLinebreak(char *cs);
char *BGBCC_SHXA_ParseTokenBasic(char *cs, char *tb);
char *BGBCC_SHXA_ParseTokenBasicAltn(char *s, char *tb);
char *BGBCC_SHXA_ParseToken(char *cs, char **rstr);
char *BGBCC_SHXA_ParseTokenAlt(char *cs, char **rstr);
char *BGBCC_SHXA_ParseToken(char *cs, char **rtok);
char *BGBCC_SHXA_ParseTokenAlt(char *cs, char **rtok);
int BGBCC_SHXA_GetRegId(char *str);
int BGBCC_SHXA_ParseOperand(char **rcs, BGBCC_SHX_OpcodeArg *opv);
int BGBCC_SHXA_Init();
int BGBCC_SHXA_LookupOpcodeNmid(char *name);
int BGBCC_SHXA_LookupOpcodeFmid(BGBCC_SHX_OpcodeArg *arg0, BGBCC_SHX_OpcodeArg *arg1, BGBCC_SHX_OpcodeArg *arg2);
int BGBCC_SHXA_TryAssembleOpcode(BGBCC_SHX_Context *ctx, char *name, BGBCC_SHX_OpcodeArg *arg0, BGBCC_SHX_OpcodeArg *arg1, BGBCC_SHX_OpcodeArg *arg2);
int BGBCC_SHXA_ParseCheckFeature(BGBCC_SHX_Context *ctx, char *sym);
int BGBCC_SHXA_ParseOpcode(BGBCC_SHX_Context *ctx, char **rcs);
int BGBCC_SHXA_ParseBuffer(BGBCC_SHX_Context *ctx, char **rcs);
int BGBCC_SHXC_AssembleBuffer(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *text);
//AHSRC:shcc/shx_cgif.c
int BGBCC_SHXC_InitIface();
ccxl_status BGBCC_SHXC_LoadBufferDLL(BGBCC_TransState *ctx,byte *buf, int sz);
ccxl_status BGBCC_SHXC_SetupContextForArch(BGBCC_TransState *ctx);
bool BGBCC_SHXC_TypeIntRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeInt2RegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeFloatRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_SHXC_TypeFloat2RegP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_SHXC_TypeGetRegClassP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_SHXC_EmitVaArg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitVaEnd(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg);
int BGBCC_SHXC_EmitVaStart(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, ccxl_register treg);
char *BGBCC_SHXC_DebugRegToStr(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register reg);
ccxl_status BGBCC_SHXC_PrintVirtOp(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_SHXC_CompileVirtOp(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_SHXC_PrintVirtTr(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_SHXC_CompileVirtTr(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_SHXC_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
ccxl_status BGBCC_SHXC_BuildFunctionBody(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
ccxl_status BGBCC_SHXC_BuildFunction(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_SHXC_BuildGlobal_EmitLitAsType(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register value);
ccxl_status BGBCC_SHXC_BuildGlobal(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_SHXC_BuildAsmBlob(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_SHXC_LookupLabelIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int lblid);
int BGBCC_SHXC_LookupLabelImgOffs(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int lblid);
int BGBCC_SHXC_LookupLabelImgVA(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int lblid);
ccxl_status BGBCC_SHXC_ApplyImageRelocs(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, byte *imgbase);
ccxl_status BGBCC_SHXC_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:shcc/shx_conv.c
int BGBCC_SHXC_EmitConvVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
//AHSRC:shcc/shx_elf.c
ccxl_status BGBCC_SHXC_FlattenImageELF(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:shcc/shx_emit.c
int BGBCC_SHX_EmitIndexAddImm16(BGBCC_SHX_Context *ctx, int imm);
int BGBCC_SHX_EmitIndexAddImm32(BGBCC_SHX_Context *ctx, int imm);
int BGBCC_SHX_EmitIndexAddImmPair32(BGBCC_SHX_Context *ctx,s32 imma, s32 immb);
int BGBCC_SHX_EmitIndexAddImm32LblOfs(BGBCC_SHX_Context *ctx, int lbl, int ofs);
int BGBCC_SHX_EmitIndexAddImm32LblAbs(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitIndexAddImm16LblOfs(BGBCC_SHX_Context *ctx, int lbl, int ofs);
int bgbcc_shx_hf16tof32i(u16 hf);
int BGBCC_SHX_EmitLoadRegImm(BGBCC_SHX_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_SHX_EmitLoadRegImmI(BGBCC_SHX_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_SHX_EmitLoadRegImm64P(BGBCC_SHX_Context *ctx, int reg, s64 imm);
int BGBCC_SHX_EmitLoadRegImmPair32(BGBCC_SHX_Context *ctx, int reg, s32 imma, s32 immb);
int BGBCC_SHX_EmitLoadRegLabelRel(BGBCC_SHX_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_SHX_EmitLoadRegLabelAbs(BGBCC_SHX_Context *ctx, int reg, int lbl);
int BGBCC_SHX_EmitLoadRegLabelRel32(BGBCC_SHX_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_SHX_EmitLoadRegLabelRel16(BGBCC_SHX_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_SHX_EmitLoadRegLabelRel24(BGBCC_SHX_Context *ctx, int reg, int lbl);
int BGBCC_SHX_EmitLoadRegLabelVarRel24(BGBCC_SHX_Context *ctx, int op, int reg, int lbl);
int BGBCC_SHX_EmitStoreRegLabelVarRel24(BGBCC_SHX_Context *ctx, int op, int reg, int lbl);
int BGBCC_SHX_EmitFlushIndexImm16(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitFlushIndexImm32(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckFlushIndexImmP(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckFlushIndexImm(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitForceFlushIndexImm(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitFlushIndexImmBasic(BGBCC_SHX_Context *ctx);
//AHSRC:shcc/shx_emit_sec.c
BGBCC_SHX_Context *BGBCC_SHX_AllocContext();
int BGBCC_SHX_SetBeginSimPass(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_SetEndSimPass(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_LookupSectionID(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_SetSectionName(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_SetSection(BGBCC_SHX_Context *ctx, int sec);
int BGBCC_SHX_IsSectionReadOnly(BGBCC_SHX_Context *ctx, int sec);
int BGBCC_SHX_EmitByte(BGBCC_SHX_Context *ctx, int val);
int BGBCC_SHX_EmitStatWord(BGBCC_SHX_Context *ctx, int val);
int BGBCC_SHX_EmitWord(BGBCC_SHX_Context *ctx, int val);
int BGBCC_SHX_EmitDWord(BGBCC_SHX_Context *ctx, u32 val);
int BGBCC_SHX_EmitQWord(BGBCC_SHX_Context *ctx, s64 val);
int BGBCC_SHX_EmitString(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitAscii(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitStringUCS2(BGBCC_SHX_Context *ctx, u16 *str);
int BGBCC_SHX_EmitGetStrtabLabel(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitGetStrtabLabelUTF2ASCII(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitGetStrtabLabelUCS2(BGBCC_SHX_Context *ctx, u16 *str);
int BGBCC_SHX_EmitGetStrtabLabelUTF2UCS2(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitGetStrtabSecOfs(BGBCC_SHX_Context *ctx, char *str);
int BGBCC_SHX_EmitRawBytes(BGBCC_SHX_Context *ctx, byte *buf, int sz);
byte *BGBCC_SHX_EmitGetPos(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitGetOffs(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitBAlign(BGBCC_SHX_Context *ctx, int al);
byte *BGBCC_SHX_EmitGetPosForOffs(BGBCC_SHX_Context *ctx, int ofs);
int BGBCC_SHX_EmitGetOffsWord(BGBCC_SHX_Context *ctx, int ofs);
int BGBCC_SHX_EmitGetOffsDWord(BGBCC_SHX_Context *ctx, int ofs);
int BGBCC_SHX_EmitSetOffsWord(BGBCC_SHX_Context *ctx, int ofs, int val);
int BGBCC_SHX_EmitSetOffsDWord(BGBCC_SHX_Context *ctx, int ofs, int val);
//AHSRC:shcc/shx_emit_lbl.c
int bgbcc_shx_indexSrcIdx(char *name);
int BGBCC_SHX_GenLabelTempLLn(BGBCC_SHX_Context *ctx, char *file, int line);
int BGBCC_SHX_GenLabelLLn(BGBCC_SHX_Context *ctx, char *file, int line);
int BGBCC_SHX_CheckExpandLabel(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitLabel(BGBCC_SHX_Context *ctx, int lblid);
int BGBCC_SHX_EmitLabelAbs(BGBCC_SHX_Context *ctx, int lblid, s64 addr);
char *BGBCC_SHX_LookupNameForLabel(BGBCC_SHX_Context *ctx, int lblid);
int BGBCC_SHX_LookupNamedLabel(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_GetNamedLabel(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_EmitNamedLabel(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_EmitNamedGlobal(BGBCC_SHX_Context *ctx, char *name);
int BGBCC_SHX_EmitCommSym(BGBCC_SHX_Context *ctx, int lblid, int sz);
int BGBCC_SHX_EmitNamedCommSym(BGBCC_SHX_Context *ctx, char *name, int sz);
int BGBCC_SHX_EmitRelocTy(BGBCC_SHX_Context *ctx, int lblid, int ty);
int BGBCC_SHX_EmitNamedReloc(BGBCC_SHX_Context *ctx, char *name, int ty);
int BGBCC_SHX_EmitRelocRel8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRel16(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRel32(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs16(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs32(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocAbs64(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRelW12(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitRelocRelW8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_LookupLabelIndex(BGBCC_SHX_Context *sctx, int lblid);
int BGBCC_SHX_LookupSimLabelIndex(BGBCC_SHX_Context *sctx, int lblid);
//AHSRC:shcc/shx_emit_opc.c
int BGBCC_SHX_EmitCheckRegSafe(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_EmitCheckModeDQ(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckModeJQ(BGBCC_SHX_Context *ctx);
int BGBCC_SHX_EmitCheckModeSetDQ(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_EmitCheckModeClrDQ_DbgReject(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_EmitCheckModeClrDQ(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_EmitCheckModalReg(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegQuad(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegDouble(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegExt4(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitGetRegAsReg3(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitOpNone(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_ProbeEmitOpNone(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_TryEmitOpNone(BGBCC_SHX_Context *ctx, int nmid);
int BGBCC_SHX_EmitCheckRegGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegAddrGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegExtAddrGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegBaseGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegNonBaseGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegExtGPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegFPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitCheckRegExtFPR(BGBCC_SHX_Context *ctx, int reg);
int BGBCC_SHX_EmitOpReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_ProbeEmitOpReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_TryEmitOpReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_EmitOpImm(BGBCC_SHX_Context *ctx, int nmid, int imm);
int BGBCC_SHX_ProbeEmitOpImm(BGBCC_SHX_Context *ctx, int nmid, int imm);
int BGBCC_SHX_TryEmitOpImm(BGBCC_SHX_Context *ctx, int nmid, int imm);
int BGBCC_SHX_EmitOpMReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_ProbeEmitOpMReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_TryEmitOpMReg(BGBCC_SHX_Context *ctx, int nmid, int reg);
int BGBCC_SHX_EmitOpRegReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn);
int BGBCC_SHX_ProbeEmitOpRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_TryEmitOpRegReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegRegReg(BGBCC_SHX_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_SHX_ProbeEmitOpRegRegReg(BGBCC_SHX_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_SHX_TryEmitOpRegRegReg(BGBCC_SHX_Context *ctx, int nmid, int rs, int rt, int rn);
int BGBCC_SHX_EmitOpRegImm(BGBCC_SHX_Context *ctx,int nmid, int reg, int imm);
int BGBCC_SHX_ProbeEmitOpRegImm(BGBCC_SHX_Context *ctx,int nmid, int reg, int imm);
int BGBCC_SHX_TryEmitOpRegImm(BGBCC_SHX_Context *ctx,int nmid, int reg, int imm);
int BGBCC_SHX_EmitOpRegImmReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int imm, int rn);
int BGBCC_SHX_ProbeEmitOpRegImmReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int imm, int rn);
int BGBCC_SHX_TryEmitOpRegImmReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int imm, int rn);
//AHSRC:shcc/shx_emit_mov.c
int BGBCC_SHX_EmitOpRegStReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_ProbeEmitOpRegStReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_TryEmitOpRegStReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpLdRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_ProbeEmitOpLdRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_TryEmitOpLdRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegStDecReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_ProbeEmitOpRegStDecReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_TryEmitOpRegStDecReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpLdIncRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_ProbeEmitOpLdIncRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_TryEmitOpLdIncRegReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn);
int BGBCC_SHX_EmitOpRegStRegDisp(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_SHX_ProbeEmitOpRegStRegDisp(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_SHX_TryEmitOpRegStRegDisp(BGBCC_SHX_Context *ctx, int nmid, int rm, int rn, int disp);
int BGBCC_SHX_EmitOpLdRegDispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_SHX_ProbeEmitOpLdRegDispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_SHX_TryEmitOpLdRegDispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_SHX_EmitOpRegStReg2(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_SHX_ProbeEmitOpRegStReg2(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_SHX_TryEmitOpRegStReg2(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHX_EmitOpLdReg2Reg(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_SHX_ProbeEmitOpLdReg2Reg(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_SHX_TryEmitOpLdReg2Reg(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHX_EmitOpRegStReg2Disp(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_SHX_ProbeEmitOpRegStReg2Disp(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_SHX_EmitOpLdReg2DispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_SHX_ProbeEmitOpLdReg2DispReg(BGBCC_SHX_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_SHX_TryEmitOpRegStReg2Disp(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_SHX_TryEmitOpLdReg2DispReg(BGBCC_SHX_Context *ctx, int nmid, int rm, int ro, int disp, int rn);
//AHSRC:shcc/shx_emit_bra.c
int BGBCC_SHX_EmitOpLblReg(BGBCC_SHX_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_SHX_TryEmitOpLblReg(BGBCC_SHX_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_SHX_EmitOpLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_TryEmitOpLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpNear12Label(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_TryEmitOpNear12Label(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpFarLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_TryEmitOpFarLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitOpFar16Label(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_TryEmitOpFar16Label(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_EmitCheckAutoLabelNear8(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitCheckAutoLabelNear16B(BGBCC_SHX_Context *ctx, int lbl);
int BGBCC_SHX_EmitOpAutoLabel(BGBCC_SHX_Context *ctx, int nmid, int lbl);
int BGBCC_SHX_TryEmitOpCmpRegLabel(BGBCC_SHX_Context *ctx,int nmid, int reg, int lbl);
int BGBCC_SHX_TryEmitOpCmpRegRegLabel(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn, int lbl);
int BGBCC_SHX_EmitOpCmpRegLabel(BGBCC_SHX_Context *ctx,int nmid, int rm, int lbl);
int BGBCC_SHX_EmitOpCmpRegRegLabel(BGBCC_SHX_Context *ctx,int nmid, int rm, int rn, int lbl);
//AHSRC:shcc/shx_fltrom.c
ccxl_status BGBCC_SHXC_FlattenImageROM(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:shcc/shx_fpreg.c
int BGBCC_SHXC_EmitRegIsGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_EmitRegIsExtGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_EmitRegIsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_EmitRegIsDpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_EmitRegIsLpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_RegNormalizeReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_SHXC_CheckVRegIsZRegP(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_GetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_GetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_UpdateStatusFpscr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, u32 state);
int BGBCC_SHXC_ClearStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ClearStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetStatusFpscrFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetStatusFpscrDouble(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ResetModeDqLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ResetModeDqUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_SetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_CheckSetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_CheckSetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ResetFpscrLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ResetFpscrDefaults(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_ResetFpscrUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitLoadFrameOfsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreStackOfsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreFrameOfsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadBRegOfsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreBRegOfsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadBRegIRegScFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitStoreBRegIRegScFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitTryGetDpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetDpRegisterI(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitTryGetFpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetFpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitReleaseFpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_StompFpRegisterIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int rgidx);
int BGBCC_SHXC_EmitSyncFpRegisterIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int rgidx);
int BGBCC_SHXC_EmitSyncFpRegisters(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitLabelFlushFpRegisters(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitBinaryVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitCompareVRegVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitJCmpVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:shcc/shx_frame.c
int BGBCC_SHXC_EmitLoadFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitLdaFrameOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreStackOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitLoadOp2BRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int nmid2, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitStoreBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_EmitLeaBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_SHXC_CheckNmidScaleMatch(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int sc);
int BGBCC_SHXC_EmitLoadBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitStoreBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_SHXC_EmitLoadBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_SHXC_EmitStoreBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_SHXC_GetGblIndexGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int gblidx);
int BGBCC_SHXC_GetGblIndexLabel(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int gblidx);
int BGBCC_SHXC_GetVRegGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg);
int BGBCC_SHXC_GetGblNameGotIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_GetGblNameLabel(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int BGBCC_SHXC_EmitLoadGblNameReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name, int dreg);
int BGBCC_SHXC_EmitLoadFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitStoreFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitLoadFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitStoreFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_SHXC_EmitLdaValSyncFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitLdaFrameVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_GetFrameVRegFlags(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg);
int BGBCC_SHXC_SetupFrameVRegSpan(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg);
int BGBCC_SHXC_SetupFrameLayout(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_SHXC_CalcFrameEpiKey(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int rqt, int *repik, int *repix);
int BGBCC_SHXC_EmitFrameProlog(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
int BGBCC_SHXC_EmitFrameEpilog(BGBCC_TransState *ctx,BGBCC_SHX_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
//AHSRC:shcc/shx_ldix.c
int BGBCC_SHXC_EmitLdix_FillSzNmTy(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int *rsz, int *rnm1, int *rnm2, int *rnm3, int *rnm4);
int BGBCC_SHXC_EmitLdixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitLdixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitLdixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_SHXC_EmitStixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitStixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitStixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_SHXC_EmitLeaVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_SHXC_EmitLeaVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitLdaVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitDiffPtrVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitLeaShrRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg, int shl);
int BGBCC_SHXC_EmitLeaShlRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg, int shl);
int BGBCC_SHXC_EmitLeaBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
//AHSRC:shcc/shx_lparith.c
int BGBCC_SHXC_EmitBinaryLong_ShlImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int cdreg, int shl);
int BGBCC_SHXC_EmitBinaryLong_ShrImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int cdreg, int shl);
int BGBCC_SHXC_EmitBinaryLong_SarImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int cdreg, int shl);
int BGBCC_SHXC_EmitBinaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitJCmpVRegVRegLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:shcc/shx_lpreg.c
int BGBCC_SHXC_EmitTryGetLpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetLpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitReleaseLpRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_StompLpRegisterIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int rgidx);
//AHSRC:shcc/shx_lqarith.c
int BGBCC_SHXC_EmitBinaryVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitCompareVRegVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitJCmpVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_SHXC_EmitJCmpVRegZeroQLong(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
//AHSRC:shcc/shx_lvarith.c
int BGBCC_SHXC_EmitBinaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitConvToVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitConvFromVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
//AHSRC:shcc/shx_lxarith.c
int BGBCC_SHXC_IndexLitInt128(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, s64 val_lo, s64 val_hi);
int BGBCC_SHXC_EmitBinaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
//AHSRC:shcc/shx_pecoff.c
int BGBCC_SHXC_CoffLoadBufferDLL(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, byte *buf, int sz);
int BGBCC_SHXC_CoffBuildExports(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_CoffBuildImports(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_CoffSectionFlags(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, char *name);
int bgbcc_shxc_qrsort(u32 *arr, int cnt, int rd);
ccxl_status BGBCC_SHXC_FlattenImagePECOFF(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:shcc/shx_register.c
int BGBCC_SHXC_ScratchCheckRegFree(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_ScratchSafeStompReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_ScratchStompReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_ScratchHoldReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_ScratchReleaseReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_ScratchAllocReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int cls);
int BGBCC_SHXC_SaveFrameOfsForReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_SaveFrameOfsForFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_EmitSaveFrameReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_EmitReloadSavedFrameReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int reg);
int BGBCC_SHXC_EmitTryGetRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int fl);
int BGBCC_SHXC_EmitGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitGetRegisterRead(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitTryGetRegisterRead(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_GetVRegPriority(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_GetVRegLiveRange(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg, int *rbeg, int *rend);
int BGBCC_SHXC_CheckVRegLiveRange(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitReleaseRegister(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_SHXC_EmitSyncRegisterIndex(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int rgix);
int BGBCC_SHXC_EmitSyncRegisterIndex2(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int rgix, int sfl);
int BGBCC_SHXC_EmitSyncRegisters(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitLabelFlushRegisters(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitScratchSyncRegisters(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_SHXC_EmitScratchSyncRegistersSafeMask(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int mask);
//AHSRC:shcc/shx_softfpu.c
int BGBCC_SHXC_NormalizeImmVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_SHXC_EmitBinaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_SHXC_EmitBinaryVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitUnaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_SHXC_EmitCompareVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_SHXC_EmitJCmpVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:shcc/shx_struct.c
int BGBCC_SHXC_EmitDebugCheckReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int sreg);
int BGBCC_SHXC_EmitConvOpRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int sreg, int dreg);
int BGBCC_SHXC_EmitLoadSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_SHXC_EmitStoreSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_SHXC_EmitLoadSlotAddrVRegVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_SHXC_EmitValueCopyRegRegSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg, int sreg, int sz, int al);
int BGBCC_SHXC_EmitLoadTypeBRegOfsReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int sreg, int ofs, int dreg);
//AHSRC:shcc/shx_vreg.c
int BGBCC_SHXC_EmitOpNone(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid);
int BGBCC_SHXC_EmitOpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int reg);
int BGBCC_SHXC_EmitOpImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int imm);
int BGBCC_SHXC_EmitOpMReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int reg);
int BGBCC_SHXC_EmitOpRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn);
int BGBCC_SHXC_EmitOpRegStReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn);
int BGBCC_SHXC_EmitOpLdRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn);
int BGBCC_SHXC_EmitOpRegStDecReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn);
int BGBCC_SHXC_EmitOpLdIncRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn);
int BGBCC_SHXC_EmitOpRegStRegDisp(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int rn, int disp);
int BGBCC_SHXC_EmitOpLdRegDispReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int disp, int rn);
int BGBCC_SHXC_EmitOpRegStReg2(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHXC_EmitOpLdReg2Reg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_SHXC_EmitOpRegStReg2Disp(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_SHXC_EmitOpLdReg2DispReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int ro, int disp, int rn);
int BGBCC_SHXC_EmitOpRegRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rs, int rt, int rn);
int BGBCC_SHXC_EmitOpRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int reg, int imm);
int BGBCC_SHXC_EmitOpRegImmReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nmid, int rm, int imm, int rn);
int BGBCC_SHXC_EmitMovRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int sreg, int dreg);
int BGBCC_SHXC_EmitLoadVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_SHXC_EmitStoreVRegReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_SHXC_EmitMovVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitFpConvVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int nm1, int nm2, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitMovVRegImm(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register dreg, s64 imm);
int BGBCC_SHXC_EmitOpNmidVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, int nmid, ccxl_register dreg, ccxl_register sreg);
int BGBCC_SHXC_EmitJCmpVRegVRegInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_SHXC_EmitJCmpVRegVReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_SHXC_EmitJCmpVRegZeroInt(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_SHXC_EmitJCmpVRegZero(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
//AHSRC:bsrcc/bsr_binop.c
int BGBCC_BSRC_NormalizeImmVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_BSRC_EmitBinaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitDstRegOp(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int dreg);
int BGBCC_BSRC_EmitUnaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_BSRC_EmitUnaryVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_BSRC_EmitCompareVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitCompareVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitReturnVoid(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_EmitReturnVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg);
int BGBCC_BSRC_EmitCsrvVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg);
int BGBCC_BSRC_EmitCallBuiltin(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name);
int BGBCC_BSRC_EmitCallBuiltinArgs(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dst, char *name, int narg, ccxl_register *args);
int BGBCC_BSRC_EmitCallFcnVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register fcn);
int BGBCC_BSRC_EmitCallName(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name);
int BGBCC_BSRC_EmitCallVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dst, ccxl_register fcn, int narg, ccxl_register *args);
int BGBCC_BSRC_EmitCSeltSelectVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitCSeltCompareVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitCSeltVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, ccxl_type ptype, int cmp, ccxl_register ureg, ccxl_register vreg);
//AHSRC:bsrcc/bsr_bufasm.c
char *BGBCC_BSRA_EatWhite(char *cs);
char *BGBCC_BSRA_EatWhiteNoLinebreak(char *cs);
char *BGBCC_BSRA_EatWhiteOnlyNoLinebreak(char *cs);
char *BGBCC_BSRA_ParseTokenBasic(char *cs, char *tb);
char *BGBCC_BSRA_ParseTokenBasicAltn(char *s, char *tb);
char *BGBCC_BSRA_ParseToken(char *cs, char **rstr);
char *BGBCC_BSRA_ParseTokenAlt(char *cs, char **rstr);
char *BGBCC_BSRA_ParseToken(char *cs, char **rtok);
char *BGBCC_BSRA_ParseTokenAlt(char *cs, char **rtok);
int BGBCC_BSRA_GetRegId(char *str);
int BGBCC_BSRA_ParseOperand(char **rcs, BGBCC_BSR_OpcodeArg *opv);
int BGBCC_BSRA_Init();
int BGBCC_BSRA_LookupOpcodeNmid(char *name);
int BGBCC_BSRA_LookupOpcodeFmid(BGBCC_BSR_OpcodeArg *arg0, BGBCC_BSR_OpcodeArg *arg1, BGBCC_BSR_OpcodeArg *arg2);
int BGBCC_BSRA_TryAssembleOpcode(BGBCC_BSR_Context *ctx, char *name, BGBCC_BSR_OpcodeArg *arg0, BGBCC_BSR_OpcodeArg *arg1, BGBCC_BSR_OpcodeArg *arg2);
int BGBCC_BSRA_ParseCheckFeature(BGBCC_BSR_Context *ctx, char *sym);
int BGBCC_BSRA_ParseOpcode(BGBCC_BSR_Context *ctx, char **rcs);
int BGBCC_BSRA_ParseBuffer(BGBCC_BSR_Context *ctx, char **rcs);
int BGBCC_BSRC_AssembleBuffer(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *text);
//AHSRC:bsrcc/bsr_cgif.c
int BGBCC_BSRC_InitIface();
ccxl_status BGBCC_BSRC_LoadBufferDLL(BGBCC_TransState *ctx,byte *buf, int sz);
ccxl_status BGBCC_BSRC_SetupContextForArch(BGBCC_TransState *ctx);
bool BGBCC_BSRC_TypeShortRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_BSRC_TypeIntRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_BSRC_TypeInt2RegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_BSRC_TypeFloatRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_BSRC_TypeFloat2RegP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_BSRC_TypeGetRegClassP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_BSRC_EmitVaArg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitVaEnd(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg);
int BGBCC_BSRC_EmitVaStart(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, ccxl_register treg);
char *BGBCC_BSRC_DebugRegToStr(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register reg);
ccxl_status BGBCC_BSRC_PrintVirtOp(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_BSRC_CompileVirtOp(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_BSRC_PrintVirtTr(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_BSRC_CompileVirtTr(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_BSRC_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
ccxl_status BGBCC_BSRC_BuildFunctionBody(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
ccxl_status BGBCC_BSRC_BuildFunction(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_BSRC_BuildGlobal_EmitLitAsType(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register value);
ccxl_status BGBCC_BSRC_BuildGlobal(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_BSRC_BuildAsmBlob(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_BSRC_LookupLabelIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int lblid);
int BGBCC_BSRC_LookupLabelImgOffs(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int lblid);
int BGBCC_BSRC_LookupLabelImgVA(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int lblid);
void bgbcc_bsrcc_setu16en(byte *ct, int en, u16 v);
ccxl_status BGBCC_BSRC_ApplyImageRelocs(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, byte *imgbase);
ccxl_status BGBCC_BSRC_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:bsrcc/bsr_conv.c
int BGBCC_BSRC_EmitConvVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
//AHSRC:bsrcc/bsr_emit.c
int BGBCC_BSR_EmitCheckRegQuad(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegExt4(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegExtGPR(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegExtAddrGPR(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegBaseGPR(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegAddrGPR(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitCheckRegNonBaseGPR(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_EmitLoadDrImm(BGBCC_BSR_Context *ctx, s32 imm);
int BGBCC_BSR_EmitLoadRegImm(BGBCC_BSR_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_BSR_EmitLoadRegImm64P(BGBCC_BSR_Context *ctx, int reg, s64 imm);
int BGBCC_BSR_EmitLoadRegImmPair32(BGBCC_BSR_Context *ctx, int reg, s32 imma, s32 immb);
int BGBCC_BSR_EmitCheckFlushIndexImmP(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitCheckFlushIndexImm(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitForceFlushIndexImm(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitFlushIndexImmBasic(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitLoadRegLabelRel(BGBCC_BSR_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_BSR_EmitLoadRegLabelAbs(BGBCC_BSR_Context *ctx, int reg, int lbl);
int BGBCC_BSR_EmitLoadRegLabelRel32(BGBCC_BSR_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_BSR_EmitLoadRegLabelRel16(BGBCC_BSR_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_BSR_EmitLoadRegLabelRel24(BGBCC_BSR_Context *ctx, int reg, int lbl);
int BGBCC_BSR_EmitLoadRegLabelVarRel24(BGBCC_BSR_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_BSR_EmitStoreRegLabelVarRel24(BGBCC_BSR_Context *ctx, int nmid, int reg, int lbl);
//AHSRC:bsrcc/bsr_emit_bra.c
int BGBCC_BSR_ModelIsLabel16P(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_ModelIsLabel24P(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_ModelIsAbs16P(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitOpLblReg(BGBCC_BSR_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_BSR_TryEmitOpLblReg(BGBCC_BSR_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_BSR_EmitOpLabel(BGBCC_BSR_Context *ctx, int nmid, int lbl);
int BGBCC_BSR_TryEmitOpLabel(BGBCC_BSR_Context *ctx, int nmid, int lbl);
int BGBCC_BSR_EmitOpFar16Label(BGBCC_BSR_Context *ctx, int nmid, int lbl);
int BGBCC_BSR_TryEmitOpFar16Label(BGBCC_BSR_Context *ctx, int nmid, int lbl);
int BGBCC_BSR_EmitCheckAutoLabelNear8(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitCheckAutoLabelNear16B(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitOpAutoLabel(BGBCC_BSR_Context *ctx, int nmid, int lbl);
int BGBCC_BSR_TryEmitOpAutoLabel(BGBCC_BSR_Context *ctx, int nmid, int lbl);
//AHSRC:bsrcc/bsr_emit_lbl.c
int bgbcc_bsr_indexSrcIdx(char *name);
int BGBCC_BSR_GenLabelTempLLn(BGBCC_BSR_Context *ctx, char *file, int line);
int BGBCC_BSR_GenLabelLLn(BGBCC_BSR_Context *ctx, char *file, int line);
int BGBCC_BSR_CheckExpandLabel(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitLabel(BGBCC_BSR_Context *ctx, int lblid);
int BGBCC_BSR_EmitLabelAbs(BGBCC_BSR_Context *ctx, int lblid, s64 addr);
char *BGBCC_BSR_LookupNameForLabel(BGBCC_BSR_Context *ctx, int lblid);
int BGBCC_BSR_LookupNamedLabel(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_GetNamedLabel(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_EmitNamedLabel(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_EmitNamedGlobal(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_EmitCommSym(BGBCC_BSR_Context *ctx, int lblid, int sz);
int BGBCC_BSR_EmitNamedCommSym(BGBCC_BSR_Context *ctx, char *name, int sz);
int BGBCC_BSR_EmitRelocTy(BGBCC_BSR_Context *ctx, int lblid, int ty);
int BGBCC_BSR_EmitNamedReloc(BGBCC_BSR_Context *ctx, char *name, int ty);
int BGBCC_BSR_EmitRelocRel8(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocRel16(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocRel32(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocAbs8(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocAbs16(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocAbs32(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocAbs64(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocRelW12(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_EmitRelocRelW8(BGBCC_BSR_Context *ctx, int lbl);
int BGBCC_BSR_LookupLabelIndex(BGBCC_BSR_Context *sctx, int lblid);
int BGBCC_BSR_LookupSimLabelIndex(BGBCC_BSR_Context *sctx, int lblid);
//AHSRC:bsrcc/bsr_emit_mov.c
int BGBCC_BSR_EmitOpRegStReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_ProbeEmitOpRegStReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_TryEmitOpRegStReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_EmitOpLdRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_ProbeEmitOpLdRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_TryEmitOpLdRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_EmitOpRegStDecReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_ProbeEmitOpRegStDecReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_TryEmitOpRegStDecReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_EmitOpLdIncRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_ProbeEmitOpLdIncRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_TryEmitOpLdIncRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_EmitOpRegStRegDisp(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_BSR_ProbeEmitOpRegStRegDisp(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_BSR_TryEmitOpRegStRegDisp(BGBCC_BSR_Context *ctx, int nmid, int rm, int rn, int disp);
int BGBCC_BSR_EmitOpLdRegDispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_BSR_ProbeEmitOpLdRegDispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_BSR_TryEmitOpLdRegDispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_BSR_EmitOpRegStReg2(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_ProbeEmitOpRegStReg2(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_TryEmitOpRegStReg2(BGBCC_BSR_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_BSR_EmitOpLdReg2Reg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_ProbeEmitOpLdReg2Reg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_TryEmitOpLdReg2Reg(BGBCC_BSR_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_BSR_EmitOpRegStReg2Disp(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_BSR_ProbeEmitOpRegStReg2Disp(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_BSR_EmitOpLdReg2DispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_BSR_ProbeEmitOpLdReg2DispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_BSR_TryEmitOpRegStReg2Disp(BGBCC_BSR_Context *ctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_BSR_TryEmitOpLdReg2DispReg(BGBCC_BSR_Context *ctx, int nmid, int rm, int ro, int disp, int rn);
//AHSRC:bsrcc/bsr_emit_opc.c
int BGBCC_BSR_EmitOpNone(BGBCC_BSR_Context *ctx, int nmid);
int BGBCC_BSR_ProbeEmitOpNone(BGBCC_BSR_Context *ctx, int nmid);
int BGBCC_BSR_TryEmitOpNone(BGBCC_BSR_Context *ctx, int nmid);
int BGBCC_BSR_EmitOpReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_ProbeEmitOpReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_TryEmitOpReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_EmitOpImm(BGBCC_BSR_Context *ctx, int nmid, int imm);
int BGBCC_BSR_ProbeEmitOpImm(BGBCC_BSR_Context *ctx, int nmid, int imm);
int BGBCC_BSR_TryEmitOpImm(BGBCC_BSR_Context *ctx, int nmid, int imm);
int BGBCC_BSR_EmitOpMReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_ProbeEmitOpMReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_TryEmitOpMReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_EmitOpRegReg(BGBCC_BSR_Context *ctx, int nmid, int rm, int rn);
int BGBCC_BSR_ProbeEmitOpRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_TryMapRegCn(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_TryMapRegSn(BGBCC_BSR_Context *ctx, int reg);
int BGBCC_BSR_TryEmitOpRegReg(BGBCC_BSR_Context *ctx, int nmid, int rm, int rn);
int BGBCC_BSR_EmitOpRegRegReg(BGBCC_BSR_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_BSR_ProbeEmitOpRegRegReg(BGBCC_BSR_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_BSR_TryEmitOpRegRegReg(BGBCC_BSR_Context *ctx, int nmid, int rs, int rt, int rn);
int BGBCC_BSR_EmitOpImmReg(BGBCC_BSR_Context *ctx,int nmid, int imm, int reg);
int BGBCC_BSR_ProbeEmitOpImmReg(BGBCC_BSR_Context *ctx,int nmid, int imm, int reg);
int BGBCC_BSR_TryEmitOpImmReg(BGBCC_BSR_Context *ctx,int nmid, int imm, int reg);
int BGBCC_BSR_EmitOpRegImmReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int imm, int rn);
int BGBCC_BSR_ProbeEmitOpRegImmReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int imm, int rn);
int BGBCC_BSR_TryEmitOpRegImmReg(BGBCC_BSR_Context *ctx, int nmid, int rm, int imm, int rn);
//AHSRC:bsrcc/bsr_emit_sec.c
BGBCC_BSR_Context *BGBCC_BSR_AllocContext();
int BGBCC_BSR_SetBeginSimPass(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_SetEndSimPass(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_LookupSectionID(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_SetSectionName(BGBCC_BSR_Context *ctx, char *name);
int BGBCC_BSR_SetSection(BGBCC_BSR_Context *ctx, int sec);
int BGBCC_BSR_IsSectionReadOnly(BGBCC_BSR_Context *ctx, int sec);
int BGBCC_BSR_EmitByte(BGBCC_BSR_Context *ctx, int val);
int BGBCC_BSR_EmitStatWord(BGBCC_BSR_Context *ctx, int val);
int BGBCC_BSR_EmitWord(BGBCC_BSR_Context *ctx, int val);
int BGBCC_BSR_EmitDWord(BGBCC_BSR_Context *ctx, u32 val);
int BGBCC_BSR_EmitQWord(BGBCC_BSR_Context *ctx, s64 val);
int BGBCC_BSR_EmitString(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitAscii(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitStringUCS2(BGBCC_BSR_Context *ctx, u16 *str);
int BGBCC_BSR_EmitGetStrtabLabel(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitGetStrtabLabelUTF2ASCII(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitGetStrtabLabelUCS2(BGBCC_BSR_Context *ctx, u16 *str);
int BGBCC_BSR_EmitGetStrtabLabelUTF2UCS2(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitGetStrtabSecOfs(BGBCC_BSR_Context *ctx, char *str);
int BGBCC_BSR_EmitRawBytes(BGBCC_BSR_Context *ctx, byte *buf, int sz);
byte *BGBCC_BSR_EmitGetPos(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitGetOffs(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_EmitBAlign(BGBCC_BSR_Context *ctx, int al);
byte *BGBCC_BSR_EmitGetPosForOffs(BGBCC_BSR_Context *ctx, int ofs);
int BGBCC_BSR_EmitGetOffsWord(BGBCC_BSR_Context *ctx, int ofs);
int BGBCC_BSR_EmitGetOffsDWord(BGBCC_BSR_Context *ctx, int ofs);
int BGBCC_BSR_EmitSetOffsWord(BGBCC_BSR_Context *ctx, int ofs, int val);
int BGBCC_BSR_EmitSetOffsDWord(BGBCC_BSR_Context *ctx, int ofs, int val);
//AHSRC:bsrcc/bsr_emit_queue.c
BGBCC_BSR_EmitQueueOp *BGBCC_BSR_AllocQueueOp(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_FreeQueueOp(BGBCC_BSR_Context *ctx, BGBCC_BSR_EmitQueueOp *tmp);
int BGBCC_BSR_AddQueueOp(BGBCC_BSR_Context *ctx, BGBCC_BSR_EmitQueueOp *tmp);
int BGBCC_BSR_EmitQueueOpBasic(BGBCC_BSR_Context *ctx, BGBCC_BSR_EmitQueueOp *op);
int BGBCC_BSR_EmitQueueOps(BGBCC_BSR_Context *ctx);
int BGBCC_BSR_QueueOpNone(BGBCC_BSR_Context *ctx, int nmid);
int BGBCC_BSR_QueueOpReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_QueueOpImm(BGBCC_BSR_Context *ctx, int nmid, int imm);
int BGBCC_BSR_QueueOpMReg(BGBCC_BSR_Context *ctx, int nmid, int reg);
int BGBCC_BSR_QueueOpRegReg(BGBCC_BSR_Context *ctx, int nmid, int rm, int rn);
int BGBCC_BSR_QueueOpRegStReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_QueueOpLdRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_QueueOpRegStDecReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_QueueOpLdIncRegReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn);
int BGBCC_BSR_QueueOpRegStRegDisp(BGBCC_BSR_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_BSR_QueueOpLdRegDispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_BSR_QueueOpRegStReg2(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_QueueOpLdReg2Reg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_BSR_QueueOpRegStReg2Disp(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_BSR_QueueOpLdReg2DispReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_BSR_QueueOpRegRegReg(BGBCC_BSR_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_BSR_QueueOpImmReg(BGBCC_BSR_Context *ctx,int nmid, int imm, int reg);
int BGBCC_BSR_QueueOpRegImmReg(BGBCC_BSR_Context *ctx,int nmid, int rm, int imm, int rn);
//AHSRC:bsrcc/bsr_fltrom.c
ccxl_status BGBCC_BSRC_FlattenImageROM(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:bsrcc/bsr_fpstub.c
int BGBCC_BSRC_EmitRegIsGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_EmitRegIsExtGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_EmitRegIsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_EmitRegIsDpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_EmitRegIsLpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_RegNormalizeReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_BSRC_CheckVRegIsZRegP(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_GetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_GetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_UpdateStatusFpscr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, u32 state);
int BGBCC_BSRC_ClearStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ClearStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetStatusFpscrFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetStatusFpscrDouble(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ResetModeDqLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ResetModeDqUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_SetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_CheckSetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_CheckSetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ResetFpscrLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ResetFpscrDefaults(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_BSRC_ResetFpscrUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
//AHSRC:bsrcc/bsr_frame.c
int BGBCC_BSRC_EmitLoadFrameOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int ofs, int dreg);
int BGBCC_BSRC_EmitStoreFrameOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int ofs, int dreg);
int BGBCC_BSRC_EmitLdaFrameOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int ofs, int dreg);
int BGBCC_BSRC_EmitStoreStackOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int ofs, int dreg);
int BGBCC_BSRC_EmitLoadBRegOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_BSRC_EmitLoadOp2BRegOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int nmid2, int breg, int ofs, int dreg);
int BGBCC_BSRC_EmitStoreBRegOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_BSRC_EmitLeaBRegOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_BSRC_CheckNmidScaleMatch(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int sc);
int BGBCC_BSRC_EmitLoadBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_BSRC_EmitStoreBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_BSRC_EmitLoadBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_BSRC_EmitStoreBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_BSRC_GetGblIndexGotIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int gblidx);
int BGBCC_BSRC_GetGblIndexLabel(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int gblidx);
int BGBCC_BSRC_GetVRegGotIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg);
int BGBCC_BSRC_GetGblNameGotIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name);
int BGBCC_BSRC_GetGblNameLabel(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name);
int BGBCC_BSRC_EmitLoadGblNameReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name, int dreg);
int BGBCC_BSRC_EmitLoadFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_EmitStoreFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_EmitLoadFrameVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_EmitStoreFrameVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_BSRC_EmitLdaValSyncFrameVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_EmitLdaFrameVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_GetFrameVRegFlags(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg);
int BGBCC_BSRC_SetupFrameVRegSpan(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg);
int BGBCC_BSRC_SetupFrameLayout(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_BSRC_CalcFrameEpiKey(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int rqt, int *repik, int *repix);
int BGBCC_BSRC_EmitFrameProlog(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
int BGBCC_BSRC_EmitFrameEpilog(BGBCC_TransState *ctx,BGBCC_BSR_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
//AHSRC:bsrcc/bsr_ldix.c
int BGBCC_BSRC_EmitLdix_FillSzNmTy(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, int *rsz, int *rnm1, int *rnm2, int *rnm3, int *rnm4);
int BGBCC_BSRC_EmitLdixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_BSRC_EmitLdixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitLdixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_BSRC_EmitStixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_BSRC_EmitStixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitStixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_BSRC_EmitLeaVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_BSRC_EmitLeaVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitLdaVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitDiffPtrVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitLeaSarRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int dreg, int shl);
int BGBCC_BSRC_EmitLeaShrRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int dreg, int shl);
int BGBCC_BSRC_EmitLeaShlRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int dreg, int shl);
int BGBCC_BSRC_EmitLeaBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
//AHSRC:bsrcc/bsr_lparith.c
int BGBCC_BSRC_EmitBinaryLong_ShlImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int cdreg, int shl);
int BGBCC_BSRC_EmitBinaryLong_ShrImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int cdreg, int shl);
int BGBCC_BSRC_EmitBinaryLong_SarImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int cdreg, int shl);
int BGBCC_BSRC_EmitBinaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVRegLong(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitUnaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_BSRC_EmitJCmpVRegVRegLong(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:bsrcc/bsr_lpreg.c
int BGBCC_BSRC_EmitTryGetLpRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg, int fl);
int BGBCC_BSRC_EmitGetLpRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg, int fl);
int BGBCC_BSRC_EmitReleaseLpRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_StompLpRegisterIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int rgidx);
int BGBCC_BSRC_ConvLpRegisterNarrowing(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, ccxl_register sreg, ccxl_register dreg);
int BGBCC_BSRC_ConvLpRegisterWiden(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type stype, ccxl_register sreg, ccxl_register dreg);
//AHSRC:bsrcc/bsr_lvarith.c
int BGBCC_BSRC_EmitBinaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitUnaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_BSRC_EmitConvToVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitConvFromVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
//AHSRC:bsrcc/bsr_lxarith.c
int BGBCC_BSRC_IndexLitInt128(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, s64 val_lo, s64 val_hi);
int BGBCC_BSRC_EmitBinaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitUnaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
//AHSRC:bsrcc/bsr_pecoff.c
int BGBCC_BSRC_CoffLoadBufferDLL(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, byte *buf, int sz);
int BGBCC_BSRC_CoffBuildExports(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_CoffBuildImports(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_CoffSectionFlags(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, char *name);
int bgbcc_bsrc_qrsort(u32 *arr, int cnt, int rd);
ccxl_status BGBCC_BSRC_FlattenImagePECOFF(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:bsrcc/bsr_register.c
int BGBCC_BSRC_ScratchCheckRegFree(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_ScratchSafeStompReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_ScratchStompReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_ScratchHoldReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_ScratchReleaseReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_ScratchAllocReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int cls);
int BGBCC_BSRC_SaveFrameOfsForReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_SaveFrameOfsForFpReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_EmitSaveFrameReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_EmitReloadSavedFrameReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int reg);
int BGBCC_BSRC_EmitTryGetRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg, int fl);
int BGBCC_BSRC_EmitGetRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg, int fl);
int BGBCC_BSRC_EmitGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitGetRegisterRead(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitTryGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitTryGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitTryGetRegisterRead(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_GetVRegPriority(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_GetVRegLiveRange(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg, int *rbeg, int *rend);
int BGBCC_BSRC_CheckVRegLiveRange(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitReleaseRegister(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register reg);
int BGBCC_BSRC_EmitSyncRegisterIndex(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int rgix);
int BGBCC_BSRC_EmitSyncRegisterIndex2(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int rgix, int sfl);
int BGBCC_BSRC_EmitSyncRegisters(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_EmitLabelFlushRegisters(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_EmitScratchSyncRegisters(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx);
int BGBCC_BSRC_EmitScratchSyncRegistersSafeMask(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int mask);
//AHSRC:bsrcc/bsr_softfpu.c
int BGBCC_BSRC_NormalizeImmVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_BSRC_EmitBinaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_BSRC_EmitBinaryVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitUnaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_BSRC_EmitCompareVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_BSRC_EmitJCmpVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:bsrcc/bsr_struct.c
int BGBCC_BSRC_EmitDebugCheckReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, int sreg);
int BGBCC_BSRC_EmitConvOpRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int sreg, int dreg);
int BGBCC_BSRC_EmitLoadSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_BSRC_EmitStoreSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_BSRC_EmitLoadSlotAddrVRegVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_BSRC_EmitValueCopyRegRegSz(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int dreg, int sreg, int sz, int al);
int BGBCC_BSRC_EmitLoadTypeBRegOfsReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, int sreg, int ofs, int dreg);
//AHSRC:bsrcc/bsr_vreg.c
int BGBCC_BSRC_EmitOpNone(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid);
int BGBCC_BSRC_EmitOpReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int reg);
int BGBCC_BSRC_EmitOpImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int imm);
int BGBCC_BSRC_EmitOpMReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int reg);
int BGBCC_BSRC_EmitOpRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn);
int BGBCC_BSRC_EmitOpRegStReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn);
int BGBCC_BSRC_EmitOpLdRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn);
int BGBCC_BSRC_EmitOpRegStDecReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn);
int BGBCC_BSRC_EmitOpLdIncRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn);
int BGBCC_BSRC_EmitOpRegStRegDisp(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int rn, int disp);
int BGBCC_BSRC_EmitOpLdRegDispReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int disp, int rn);
int BGBCC_BSRC_EmitOpRegStReg2(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_BSRC_EmitOpLdReg2Reg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_BSRC_EmitOpRegStReg2Disp(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_BSRC_EmitOpLdReg2DispReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int ro, int disp, int rn);
int BGBCC_BSRC_EmitOpRegRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rs, int rt, int rn);
int BGBCC_BSRC_EmitOpImmReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int imm, int reg);
int BGBCC_BSRC_EmitOpRegImmReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nmid, int rm, int imm, int rn);
int BGBCC_BSRC_EmitMovRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int sreg, int dreg);
int BGBCC_BSRC_EmitLoadVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_BSRC_EmitStoreVRegReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_BSRC_EmitMovVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitFpConvVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, int nm1, int nm2, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitMovVRegImm(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register dreg, s64 imm);
int BGBCC_BSRC_EmitOpNmidVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, int nmid, ccxl_register dreg, ccxl_register sreg);
int BGBCC_BSRC_EmitJCmpVRegVRegInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_BSRC_EmitJCmpVRegVReg(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_BSRC_EmitJCmpVRegZeroInt(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_BSRC_EmitJCmpVRegZero(BGBCC_TransState *ctx, BGBCC_BSR_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
//AHSRC:jx2cc/jx2_asmdump.c
int BGBCC_JX2DA_EmitPuts(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2DA_EmitPrintf(BGBCC_JX2_Context *ctx, char *str, ...);
char *BGBCC_JX2DA_RelocToName(BGBCC_JX2_Context *ctx, int rlc);
char *BGBCC_JX2DA_NmidToName(BGBCC_JX2_Context *ctx, int nmid, int wex2);
char *BGBCC_JX2DA_RegToName(BGBCC_JX2_Context *ctx, int nmid);
char *BGBCC_JX2DA_GetIstrSuffix(BGBCC_JX2_Context *ctx, int wex2);
int BGBCC_JX2DA_EmitOpNone(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2DA_EmitOpReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2DA_EmitOpImm(BGBCC_JX2_Context *ctx, int nmid, s64 imm);
int BGBCC_JX2DA_EmitOpMReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2DA_EmitOpRegReg(BGBCC_JX2_Context *ctx, int nmid, int rm, int rn);
int BGBCC_JX2DA_EmitOpRegRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_JX2DA_EmitOpImmReg(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg);
int BGBCC_JX2DA_EmitOpRegImmReg(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2DA_EmitOpRegStReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2DA_EmitOpLdRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2DA_EmitOpRegStDecReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2DA_EmitOpLdIncRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2DA_EmitOpRegStRegDisp(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_JX2DA_EmitOpLdRegDispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_JX2DA_EmitOpRegStReg2(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2DA_EmitOpLdReg2Reg(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2DA_EmitOpRegStReg2Disp(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_JX2DA_EmitOpLdReg2DispReg(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int disp, int rn);
char *BGBCC_JX2DA_NameForLabel(BGBCC_JX2_Context *ctx, int lblid);
int BGBCC_JX2DA_EmitLabel(BGBCC_JX2_Context *ctx, int lblid);
int BGBCC_JX2DA_EmitOpLblReg(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2DA_EmitOpLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2DA_EmitLoadRegImm(BGBCC_JX2_Context *ctx, int nmid, int reg, s64 imm);
int BGBCC_JX2DA_EmitLoadRegImm64(BGBCC_JX2_Context *ctx, int nmid, int reg, s64 imm);
int BGBCC_JX2DA_EmitLoadRegLabelVarRel24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2DA_EmitStoreRegLabelVarRel24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
void bgbcc_jx2da_tocstring(char *dst, char *src);
void bgbcc_jx2da_tocstring_ucs(char *dst, u16 *src);
int bgbcc_strlen_ucs(u16 *src);
int BGBCC_JX2DA_EmitString(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2DA_EmitStringUCS2(BGBCC_JX2_Context *ctx,u16 *str, int noz);
int BGBCC_JX2DA_EmitAscii(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2DA_EmitBAlign(BGBCC_JX2_Context *ctx, int al);
int BGBCC_JX2DA_EmitByte(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2DA_EmitWord(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2DA_EmitDWord(BGBCC_JX2_Context *ctx, u32 val);
int BGBCC_JX2DA_EmitQWord(BGBCC_JX2_Context *ctx, s64 val);
int BGBCC_JX2DA_EmitDWordAbs(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2DA_EmitQWordAbs(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2DA_EmitDWordAbsDisp(BGBCC_JX2_Context *ctx, int lbl, int disp);
int BGBCC_JX2DA_EmitQWordAbsDisp(BGBCC_JX2_Context *ctx, int lbl, int disp);
int BGBCC_JX2DA_EmitComm(BGBCC_JX2_Context *ctx, int sz);
int BGBCC_JX2DA_EmitRawBytes(BGBCC_JX2_Context *ctx, byte *buf, int sz);
//AHSRC:jx2cc/jx2_binop.c
int BGBCC_JX2C_NormalizeImmVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_JX2C_EmitBinaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitTrinaryVRegVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg, ccxl_register ureg);
int BGBCC_JX2C_EmitBinaryVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitTrinaryVRegVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg, ccxl_register ureg);
int BGBCC_JX2C_EmitDstRegOp(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int dreg);
int BGBCC_JX2C_EmitUnaryVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitUnaryVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitCompareVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitReturnVoid(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitNormalizeRegForType(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int creg);
int BGBCC_JX2C_EmitReturnVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg);
int BGBCC_JX2C_EmitCsrvVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg);
int BGBCC_JX2C_EmitCallBuiltin(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name);
int BGBCC_JX2C_EmitCallBuiltinArgs(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dst, char *name, int narg, ccxl_register *args);
int BGBCC_JX2C_EmitCallFcnVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register fcn);
int BGBCC_JX2C_EmitCallName(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name);
int BGBCC_JX2C_EmitCallIntrinVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dst, ccxl_register fcn, ccxl_register thisobj, int narg, ccxl_register *args);
int BGBCC_JX2C_EmitCallVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dst, ccxl_register fcn, ccxl_register thisobj, int narg, ccxl_register *args);
int BGBCC_JX2C_EmitCSeltSelectVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitCSeltCompareVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitCSeltVRegVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, ccxl_type ptype, int cmp, ccxl_register ureg, ccxl_register vreg);
//AHSRC:jx2cc/jx2_bufasm.c
char *BGBCC_JX2A_EatWhite(char *cs);
char *BGBCC_JX2A_EatWhiteNoLinebreak(char *cs);
char *BGBCC_JX2A_EatWhiteOnlyNoLinebreak(char *cs);
char *BGBCC_JX2A_ParseTokenBasic(char *cs, char *tb);
char *BGBCC_JX2A_ParseTokenBasicAltn(char *s, char *tb);
char *BGBCC_JX2A_ParseToken(char *cs, char **rstr);
char *BGBCC_JX2A_ParseTokenAlt(char *cs, char **rstr);
char *BGBCC_JX2A_ParseToken(char *cs, char **rtok);
char *BGBCC_JX2A_ParseTokenAlt(char *cs, char **rtok);
int BGBCC_JX2A_GetRegId(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2A_ParseOperand_OffsetOf(BGBCC_JX2_Context *ctx,char *objn, char *fldn);
int BGBCC_JX2A_ParseOperand(BGBCC_JX2_Context *ctx, char **rcs, BGBCC_JX2_OpcodeArg *opv);
int BGBCC_JX2A_Init();
int BGBCC_JX2A_LookupOpcodeNmid(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2A_LookupOpcodeFmid(BGBCC_JX2_OpcodeArg *arg0, BGBCC_JX2_OpcodeArg *arg1, BGBCC_JX2_OpcodeArg *arg2, BGBCC_JX2_OpcodeArg *arg3);
int BGBCC_JX2A_TryAssembleOpcode(BGBCC_JX2_Context *ctx, char *name, BGBCC_JX2_OpcodeArg *arg0, BGBCC_JX2_OpcodeArg *arg1, BGBCC_JX2_OpcodeArg *arg2, BGBCC_JX2_OpcodeArg *arg3);
int BGBCC_JX2A_ParseCheckFeatureList(BGBCC_JX2_Context *ctx, char *sym);
int BGBCC_JX2A_ParseCheckFeature(BGBCC_JX2_Context *ctx, char *sym);
int BGBCC_JX2A_ParseOpcode_ScanForBar(BGBCC_JX2_Context *ctx, char *cs0);
int BGBCC_JX2A_ParseOpcode(BGBCC_JX2_Context *ctx, char **rcs);
int BGBCC_JX2A_ParseBuffer(BGBCC_JX2_Context *ctx, char **rcs);
int BGBCC_JX2C_AssembleBuffer(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *text);
//AHSRC:jx2cc/jx2_disasm.c
int BGBCC_JX2_DisassembleBuildOpIdx();
int BGBCC_JX2_TryDisassembleOpcodeI1(BGBCC_JX2_Context *ctx, u32 opw, int *rnmid, int *rfmid, int *rwex2, BGBCC_JX2_OpcodeArg *arg0, BGBCC_JX2_OpcodeArg *arg1, BGBCC_JX2_OpcodeArg *arg2);
int BGBCC_JX2_TryDisassembleOpcode_FixupArg(BGBCC_JX2_Context *ctx, BGBCC_JX2_OpcodeArg *arg, int nmid);
int BGBCC_JX2_TryDisassembleOpcode_PrintArgStr(BGBCC_JX2_Context *ctx, char **rct, BGBCC_JX2_OpcodeArg *arg, int nmid);
int BGBCC_JX2_TryDisassembleOpcodeI0(BGBCC_JX2_Context *ctx, int pc, int opw1, int opw2);
int BGBCC_JX2_TryDisassembleOpcodeBuf(BGBCC_JX2_Context *ctx, char **rct, int pc, int opw1, int opw2);
//AHSRC:jx2cc/jx2_cgif.c
int BGBCC_JX2C_InitIface();
ccxl_status BGBCC_JX2C_LoadBufferDLL(BGBCC_TransState *ctx,byte *buf, int sz);
ccxl_status BGBCC_JX2C_SetupContextForArch(BGBCC_TransState *ctx);
bool BGBCC_JX2C_TypeShortRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_JX2C_TypeIntRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_JX2C_TypeInt2RegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_JX2C_TypeFloatRegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_JX2C_TypeFloat2RegP(BGBCC_TransState *ctx, ccxl_type ty);
bool BGBCC_JX2C_TypeDoubleRegP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_JX2C_TypeGetRegClassP(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_JX2C_TypeGetRegClassPI(BGBCC_TransState *ctx, ccxl_type ty);
int BGBCC_JX2C_EmitVaArg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitVaEnd(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_EmitVaStart(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, ccxl_register treg);
char *BGBCC_JX2C_DebugRegToStr(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register reg);
ccxl_status BGBCC_JX2C_PrintVirtOp(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_JX2C_CompileVirtOp(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
ccxl_status BGBCC_JX2C_PrintVirtTr(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_JX2C_CompileVirtTr(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtTr *tr, int idx);
ccxl_status BGBCC_JX2C_EndFunction(BGBCC_TransState *ctx,BGBCC_CCXL_LiteralInfo *obj);
int BGBCC_JX2C_BuildFunctionLastTraceP(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
ccxl_status BGBCC_JX2C_BuildFunctionBody(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
ccxl_status BGBCC_JX2C_BuildFunction(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_JX2C_BuildGlobal_EmitLitAsType(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register value);
ccxl_status BGBCC_JX2C_BuildGlobalTls(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_JX2C_BuildGlobal(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_JX2C_BuildAsmBlob(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
ccxl_status BGBCC_JX2C_BuildPrestartInit(BGBCC_TransState *ctx);
ccxl_status BGBCC_JX2C_BuildStruct(BGBCC_TransState *ctx,BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_JX2C_LookupLabelIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int lblid);
int BGBCC_JX2C_LookupLabelImgOffs(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int lblid);
int BGBCC_JX2C_LookupLabelImgVA(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int lblid);
int BGBCC_JX2C_LookupLabelImgMapTag(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int lblid);
void bgbcc_jx2cc_setu16en(byte *ct, int en, u16 v);
ccxl_status BGBCC_JX2C_RelocRangeError(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rlcix, int lblix, int rlcty, int disp);
ccxl_status BGBCC_JX2C_ApplyImageRelocs(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, byte *imgbase);
ccxl_status BGBCC_JX2C_CheckTlsInit(BGBCC_TransState *ctx);
ccxl_status BGBCC_JX2C_CheckRWadInit(BGBCC_TransState *ctx);
ccxl_status BGBCC_JX2C_AddRWadLump(BGBCC_TransState *ctx,char *name, byte *buf, int csz, int dsz, int cmp, int ety);
int BGBCC_JX2C_ResourceTypeForFourcc(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, fourcc fmt);
ccxl_status BGBCC_JX2C_AddResourceData(BGBCC_TransState *ctx,char *name, byte *buf, int sz, fourcc imgfmt);
ccxl_status BGBCC_JX2C_FlattenImage(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:jx2cc/jx2_conv.c
int BGBCC_JX2C_EmitConvVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
//AHSRC:jx2cc/jx2_emit.c
int BGBCC_JX2_EmitCheckRegQuad(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExt4(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExt5(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegNeedSx(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegNeedZx(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegNeedSzx(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExtPlainGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExtGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExt32GPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegBase32GPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExtAddrGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegBaseGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegAddrGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegNonBaseGPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegBaseFPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegExtFPR(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitOpCheckRepackOp24(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int isjumbo);
int BGBCC_JX2_EmitOpCheckExpandOp24(BGBCC_JX2_Context *ctx, int op0, int op1, int *ropw1, int *ropw2);
int BGBCC_JX2_EmitOpCheckRepack(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int isjumbo);
int BGBCC_JX2_EmitOpCheckRepack3(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int *ropw3);
int BGBCC_JX2_EmitOpGetLength(BGBCC_JX2_Context *ctx, int opw);
int BGBCC_JX2_EmitOpCheckRepack4(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int *ropw3, int *ropw4);
int BGBCC_JX2_EmitOpCheckRepack5(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int *ropw3, int *ropw4, int *ropw5);
int BGBCC_JX2_EmitOpCheckRepack6(BGBCC_JX2_Context *ctx, int *ropw1, int *ropw2, int *ropw3, int *ropw4, int *ropw5, int *ropw6);
int BGBCC_JX2_EmitOpCheckRepack2Exw(BGBCC_JX2_Context *ctx, int exw, int *ropw1, int *ropw2);
int BGBCC_JX2_EmitOpCheckRepack4Exw(BGBCC_JX2_Context *ctx, int exw, int *ropw1, int *ropw2, int *ropw3, int *ropw4);
int BGBCC_JX2_EmitOpCheckRepack6Exw(BGBCC_JX2_Context *ctx, int exw, int *ropw1, int *ropw2, int *ropw3, int *ropw4, int *ropw5, int *ropw6);
int BGBCC_JX2_EmitLoadDrImm(BGBCC_JX2_Context *ctx, s64 imm);
int BGBCC_JX2_EmitLoadRegImm(BGBCC_JX2_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_JX2_EmitLoadRegImm(BGBCC_JX2_Context *ctx, int nmid, int reg, s32 imm);
int BGBCC_JX2_ConstConvDoubleToFloat(u64 v, u32 *rv);
int BGBCC_JX2_ConstConvFloatToHalf(u32 v, u16 *rv);
int BGBCC_JX2_ConstConvPackedFloatToHalf2x(u64 v, u32 *rv);
int BGBCC_JX2_ConstConvPackedFloatToHalf4x(u64 va, u64 vb, u64 *rv);
int BGBCC_JX2_ConstConvHalfToFP8S(u16 v, byte *rv);
int BGBCC_JX2_ConstConvHalfToFP8U(u16 v, byte *rv);
int BGBCC_JX2_ConstConvHalfToFP5A(u16 imm_f16);
int BGBCC_JX2_ConstConvHalfToFP5B(u16 imm_f16);
int BGBCC_JX2_ConstConvHalfToFP5C(u16 imm_f16);
int BGBCC_JX2_ConstConvHalfToFP5D(u16 imm_f16);
int BGBCC_JX2_ConstConvV4HToV4FP8S(u64 v, u32 *rv);
int BGBCC_JX2_ConstConvV4HToV4FP8U(u64 v, u32 *rv);
u32 BGBCC_ConstConvHalfToFloat(u16 v);
int BGBCC_JX2_ConstIsFull64(BGBCC_JX2_Context *ctx, s64 v);
int BGBCC_JX2_EmitLoadRegImm128P(BGBCC_JX2_Context *ctx, int dreg, s64 imma, s64 immb);
int BGBCC_JX2_EmitLoadRegImm64P(BGBCC_JX2_Context *ctx, int reg, s64 imm);
int BGBCC_JX2_EmitLoadRegImmPair32(BGBCC_JX2_Context *ctx, int reg, s32 imma, s32 immb);
int BGBCC_JX2_EmitCheckFlushIndexImmP(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitCheckFlushIndexImm(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitForceFlushIndexImm(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitFlushIndexImmBasic(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitLoadRegLabelRel(BGBCC_JX2_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_JX2_EmitLoadRegLabelAbs(BGBCC_JX2_Context *ctx, int reg, int lbl);
int BGBCC_JX2_EmitLoadRegLabelRel32(BGBCC_JX2_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_JX2_EmitLoadRegLabelRel16(BGBCC_JX2_Context *ctx, int reg, int lbl, int ofs);
int BGBCC_JX2_EmitLoadRegLabelRel24(BGBCC_JX2_Context *ctx, int reg, int lbl);
int BGBCC_JX2_TryEmitLoadRegLabelVarPbo24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_TryEmitStoreRegLabelVarPbo24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_EmitLoadRegLabelVarRel24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_TryEmitLoadRegLabelVarTls(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_EmitStoreRegLabelVarTls(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_TryEmitLoadRegLabelVarRel24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_EmitStoreRegLabelVarRel24(BGBCC_JX2_Context *ctx, int nmid, int reg, int lbl);
int BGBCC_JX2_EmitShufDWord(BGBCC_JX2_Context *ctx, int reg, int shuf);
int BGBCC_JX2_EmitShufDWordRegReg(BGBCC_JX2_Context *ctx,int sreg, int shuf, int dreg);
int BGBCC_JX2_EmitShufWord_IdToOp(BGBCC_JX2_Context *ctx, int id);
int BGBCC_JX2_EmitShufByte_IdToOp(BGBCC_JX2_Context *ctx, int id);
int BGBCC_JX2_EmitShufWord(BGBCC_JX2_Context *ctx, int reg, int shuf);
int BGBCC_JX2_EmitShufByte(BGBCC_JX2_Context *ctx, int reg, int shuf);
int BGBCC_JX2_EmitShufWordRegReg(BGBCC_JX2_Context *ctx,int sreg, int shuf, int dreg);
int BGBCC_JX2_EmitShufByteRegReg(BGBCC_JX2_Context *ctx,int sreg, int shuf, int dreg);
int BGBCC_JX2_InitShufByte8(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitShufByte8_IdToOp(BGBCC_JX2_Context *ctx, int id);
int BGBCC_JX2_EmitShufByte8B(BGBCC_JX2_Context *ctx, int reg, int shuf);
int BGBCC_JX2_EmitBSwapWordRegRegZx(BGBCC_JX2_Context *ctx,int sreg, int dreg);
int BGBCC_JX2_EmitBSwapDWordRegRegZx(BGBCC_JX2_Context *ctx,int sreg, int dreg);
int BGBCC_JX2_EmitBSwapWordRegRegSx(BGBCC_JX2_Context *ctx,int sreg, int dreg);
int BGBCC_JX2_EmitBSwapDWordRegRegSx(BGBCC_JX2_Context *ctx,int sreg, int dreg);
int BGBCC_JX2_EmitBSwapQWordRegReg(BGBCC_JX2_Context *ctx,int sreg, int dreg);
int BGBCC_JX2_ComposeJumboImmRegF2(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, s64 imm, int reg);
int BGBCC_JX2_ComposeJumboImmRegF2B(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, s64 imm, int reg);
int BGBCC_JX2_ComposeJumboRegImmRegF2(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboRegImmRegF2U(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboRegImmRegF2B(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboRegImmRegF2A(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboCheckOpwIsStore(BGBCC_JX2_Context *ctx,int opw1, int opw2);
int BGBCC_JX2_ComposeJumboRegImmRegF0(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboRegImmRegRegF0(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, s64 imm, int preg, int dreg);
int BGBCC_JX2_ComposeJumboRegRegImmRegF0(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, int treg, s64 imm, int dreg);
int BGBCC_JX2_ComposeJumboRegRegRegRegF0(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2, int sreg, int treg, int preg, int dreg);
int BGBCC_JX2_ComposeOp64RegImm17sRegF0(BGBCC_JX2_Context *ctx,int *ropw1, int *ropw2, int *ropw3, int *ropw4, int topw1, int topw2,	int topw3, int topw4, int sreg, s64 imm, int dreg);
//AHSRC:jx2cc/jx2_emit_bra.c
int BGBCC_JX2_ModelIsLabel16P(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_ModelIsLabel24P(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_ModelIsLabel20P(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_ModelIsData24P(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_ModelIsAbs16P(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitOpRegLbl(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2_TryEmitOpRegLbl(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2_EmitOpLblReg(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2_TryEmitOpLblReg(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2_TryEmitOpRegRegLbl(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int lbl);
int BGBCC_JX2_EmitOpLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpNear12Label(BGBCC_JX2_Context *ctx,int nmid, int lbl);
int BGBCC_JX2_EmitOpFar16Label(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpFar16Label(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_EmitOpFar20Label(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpFar20Label(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpFar24Label(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_EmitCheckAutoLabelNear8(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear16B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear24B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear12B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear16B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear20B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear24B(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear16(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear20(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNear24(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitCheckAutoLabelNearClass(BGBCC_JX2_Context *ctx, int lbl, int nmid);
int BGBCC_JX2_EmitOpAutoLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2_TryEmitOpAutoLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
//AHSRC:jx2cc/jx2_emit_lbl.c
int bgbcc_jx2_indexSrcIdx(char *name);
char *bgbcc_jx2_NameForSrcIdx(int idx);
int BGBCC_JX2_GenLabelTempLLn(BGBCC_JX2_Context *ctx, char *file, int line);
int BGBCC_JX2_GenLabelLLn(BGBCC_JX2_Context *ctx, char *file, int line);
int BGBCC_JX2_CheckExpandLabel(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitDebugLine(BGBCC_JX2_Context *ctx,char *lfn, int lln);
int BGBCC_JX2_EmitLabel(BGBCC_JX2_Context *ctx, int lblid);
int BGBCC_JX2_EmitLabelAbs(BGBCC_JX2_Context *ctx, int lblid, s64 addr);
char *BGBCC_JX2_LookupNameForLabel(BGBCC_JX2_Context *ctx, int lblid);
int BGBCC_JX2_LookupNamedLabel(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_GetNamedLabel(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_EmitNamedLabel(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_EmitNamedGlobal(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_EmitCommSym(BGBCC_JX2_Context *ctx, int lblid, int sz, int al);
int BGBCC_JX2_EmitNamedCommSym(BGBCC_JX2_Context *ctx, char *name,int sz, int al);
int BGBCC_JX2_LookupLabelAtOffs(BGBCC_JX2_Context *ctx, int sec, int ofs);
int BGBCC_JX2_LookupLabelAtOffsNoLLn(BGBCC_JX2_Context *ctx, int sec, int ofs);
int BGBCC_JX2_LookupRelocAtOffs(BGBCC_JX2_Context *ctx, int sec, int ofs);
int BGBCC_JX2_EmitRelocTy(BGBCC_JX2_Context *ctx, int lblid, int ty);
int BGBCC_JX2_EmitNamedReloc(BGBCC_JX2_Context *ctx, char *name, int ty);
int BGBCC_JX2_EmitRelocRel8(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocRel16(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocRel32(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocAbs8(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocAbs16(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocAbs32(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocAbs64(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocRelW12(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitRelocRelW8(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_LookupLabelIndex(BGBCC_JX2_Context *sctx, int lblid);
int BGBCC_JX2_LookupSimLabelIndex(BGBCC_JX2_Context *sctx, int lblid);
int BGBCC_JX2_CheckLabelIsGpRel(BGBCC_JX2_Context *sctx, int lblid);
//AHSRC:jx2cc/jx2_emit_mov.c
int BGBCC_JX2_EmitOpRegStReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_ProbeEmitOpRegStReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitRemapPseudoOp(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2_TryEmitOpRegStReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitOpLdRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_ProbeEmitOpLdRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_TryEmitOpLdRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitOpRegStDecReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_ProbeEmitOpRegStDecReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_TryEmitOpRegStDecReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitOpLdIncRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_ProbeEmitOpLdIncRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_TryEmitOpLdIncRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitOpStatDisp(BGBCC_JX2_Context *ctx, int nmid, int disp);
int BGBCC_JX2_EmitOpStatImmed3RI(BGBCC_JX2_Context *ctx, int nmid, int disp);
int BGBCC_JX2_EmitOpStatImmed2RI(BGBCC_JX2_Context *ctx, int nmid, int disp);
int BGBCC_JX2_EmitOpRegStRegDisp(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_JX2_ProbeEmitOpRegStRegDisp(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int disp);
int BGBCC_JX2_TryEmitOpRegStRegDisp(BGBCC_JX2_Context *ctx, int nmid, int rm, int rn, int disp);
int BGBCC_JX2_EmitOpLdRegDispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_JX2_ProbeEmitOpLdRegDispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_JX2_TryEmitOpLdRegDispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_JX2_EmitOpRegStReg2(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2_ProbeEmitOpRegStReg2(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2_TryEmitOpRegStReg2(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_JX2_EmitOpLdReg2Reg(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2_ProbeEmitOpLdReg2Reg(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn);
int BGBCC_JX2_TryEmitOpLdReg2Reg(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_JX2_EmitOpRegStReg2Disp(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_JX2_ProbeEmitOpRegStReg2Disp(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int rn, int disp);
int BGBCC_JX2_EmitOpLdReg2DispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_JX2_ProbeEmitOpLdReg2DispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int ro, int disp, int rn);
int BGBCC_JX2_TryEmitOpRegStReg2Disp(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_JX2_TryEmitOpLdReg2DispReg(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int disp, int rn);
//AHSRC:jx2cc/jx2_emit_opc.c
int BGBCC_JX2_EmitOpNone(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2_ProbeEmitOpNone(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2_TryEmitOpNone(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2_EmitOpReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_ProbeEmitOpReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_TryEmitOpReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_EmitOpImm(BGBCC_JX2_Context *ctx, int nmid, s64 imm);
int BGBCC_JX2_ProbeEmitOpImm(BGBCC_JX2_Context *ctx, int nmid, s64 imm);
int BGBCC_JX2_TryEmitOpImm(BGBCC_JX2_Context *ctx, int nmid, s64 imm);
int BGBCC_JX2_EmitOpMReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_ProbeEmitOpMReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_TryEmitOpMReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2_EmitOpRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_ProbeEmitOpRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_TryMapRegCn(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_TryMapRegSn(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegBsrCn(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_EmitCheckRegBsrSn(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2_TryEmitOpRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2_EmitOpRegRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_JX2_ProbeEmitOpRegRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, int rn);
int BGBCC_JX2_TryNormalizeXReg(BGBCC_JX2_Context *ctx, int nmid, int rs);
int BGBCC_JX2_TryEmitOpRegRegReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, int rn);
int BGBCC_JX2_EmitOpImmReg(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg);
int BGBCC_JX2_EmitOpImmRegPred(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg, int pfc);
int BGBCC_JX2_EmitOpImmRegPredT(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg, int pfc);
int BGBCC_JX2_EmitOpImmRegPredF(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg, int pfc);
int BGBCC_JX2_EmitOpRegImmRegPred(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn, int pfc);
int BGBCC_JX2_EmitOpRegImmRegPredT(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn, int pfc);
int BGBCC_JX2_EmitOpRegImmRegPredF(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn, int pfc);
int BGBCC_JX2_EmitOpRegRegPred(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int pfc);
int BGBCC_JX2_ProbeEmitOpImmReg(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg);
int BGBCC_JX2_TryEmitOpImmReg(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg);
int BGBCC_JX2_EmitOpRegImmReg(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2_ProbeEmitOpRegImmReg(BGBCC_JX2_Context *ctx,int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2_TryEmitOpRegImmReg(BGBCC_JX2_Context *ctx, int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2_EmitOpRegRegRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, int rp, int rn);
int BGBCC_JX2_ProbeEmitOpRegRegRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, int rp, int rn);
int BGBCC_JX2_TryEmitOpRegRegRegReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, int rp, int rn);
int BGBCC_JX2_EmitOpRegRegImmReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, s64 imm, int rn);
int BGBCC_JX2_ProbeEmitOpRegRegImmReg(BGBCC_JX2_Context *ctx,int nmid, int rs, int rt, s64 imm, int rn);
int BGBCC_JX2_TryEmitOpRegRegImmReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, s64 imm, int rn);
int BGBCC_JX2_EmitOpRegImmRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, s64 imm, int rp, int rn);
int BGBCC_JX2_ProbeEmitOpRegImmRegReg(BGBCC_JX2_Context *ctx,int nmid, int rs, s64 imm, int rp, int rn);
int BGBCC_JX2_TryEmitOpRegImmRegReg(BGBCC_JX2_Context *ctx, int nmid, int rs, s64 imm, int rp, int rn);
//AHSRC:jx2cc/jx2_emit_sec.c
BGBCC_JX2_Context *BGBCC_JX2_AllocContext();
int BGBCC_JX2_SetBeginSimPass(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_SetEndSimPass(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_LookupSectionID(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_SetSectionName(BGBCC_JX2_Context *ctx, char *name);
int BGBCC_JX2_SetSection(BGBCC_JX2_Context *ctx, int sec);
int BGBCC_JX2_IsSectionReadOnly(BGBCC_JX2_Context *ctx, int sec);
int BGBCC_JX2_IsSectionGpRel(BGBCC_JX2_Context *ctx, int sec);
int BGBCC_JX2_EmitCheckExpand(BGBCC_JX2_Context *ctx, int pad);
int BGBCC_JX2_EmitByteI(BGBCC_JX2_Context *ctx, int val);
void BGBCC_JX2_UpdatePszxWord(BGBCC_JX2_Context *ctx, int val);
void BGBCC_JX2_UpdatePszxWordF0(BGBCC_JX2_Context *ctx,int opw1, int opw2);
void BGBCC_JX2_UpdatePszxWordF1(BGBCC_JX2_Context *ctx,int opw1, int opw2);
void BGBCC_JX2_UpdatePszxWordF2(BGBCC_JX2_Context *ctx,int opw1, int opw2);
void BGBCC_JX2_UpdatePszxWordF8(BGBCC_JX2_Context *ctx,int opw1, int opw2);
void BGBCC_JX2_UpdatePszxWordFx(BGBCC_JX2_Context *ctx,int opw1, int opw2);
int BGBCC_JX2_EmitStatWord(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2_CheckPadCross32(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_CheckPadCross48(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_CheckPadAlign32(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitRemap16To32(BGBCC_JX2_Context *ctx, int opv, int *ropw1, int *ropw2);
int BGBCC_JX2_EmitPadCheckExpandLastOp(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPad32AlignLastOp(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPadCheckExpandLastOp24(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_CheckPipelineMin(BGBCC_JX2_Context *ctx, int cnt);
int BGBCC_JX2_EmitPadTryAlignWord(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPadAlignWord(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPadForLabel(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPadCheckAligned(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitCheckInhibitOp96(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitPadForOpWord6(BGBCC_JX2_Context *ctx,int opw1, int opw2, int opw3, int opw4, int opw5, int opw6);
int BGBCC_JX2_EmitPadForOpWord(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2_EmitPadForOpWord2(BGBCC_JX2_Context *ctx, int val, int val2);
int BGBCC_JX2_EmitCheckRepackOp(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitCheckRepackBundle(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitWordI(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2_EmitDWordI(BGBCC_JX2_Context *ctx, u32 val);
int BGBCC_JX2_EmitQWordI(BGBCC_JX2_Context *ctx, s64 val);
int BGBCC_JX2_EmitString(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitStringLen(BGBCC_JX2_Context *ctx, char *str, int len);
int BGBCC_JX2_EmitAscii(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitStringUCS2(BGBCC_JX2_Context *ctx, u16 *str);
int BGBCC_JX2_EmitStringUCS2L(BGBCC_JX2_Context *ctx, u16 *str, int len);
int BGBCC_JX2_EmitStringUCS4(BGBCC_JX2_Context *ctx, u32 *str);
int BGBCC_JX2_EmitStringUCS4L(BGBCC_JX2_Context *ctx, u32 *str, int len);
int BGBCC_JX2_EmitStringUCS2B(BGBCC_JX2_Context *ctx,u16 *str, int noz, int len);
int BGBCC_JX2_EmitStringUCS4B(BGBCC_JX2_Context *ctx,u32 *str, int noz, int len);
int BGBCC_JX2_EmitGetStrtabLabel(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitGetStrtabLabelTag(BGBCC_JX2_Context *ctx,char *str, int tg, int len);
int bgbcc_jx2da_cpto437(int val);
int bgbcc_jx2da_cpto1252(int val);
int BGBCC_JX2_EmitGetStrtabLabelUTF2ASCII(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitGetStrtabLabelUTF2ASCIIB(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitGetStrtabLabelUTF8(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitGetStrtabLabelUCS2(BGBCC_JX2_Context *ctx, u16 *str, int len);
int BGBCC_JX2_EmitGetStrtabLabelUTF2UCS2(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitStringUTF2UCS2(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitAsciiUTF2UCS2(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitStringUTF2UCS2I(BGBCC_JX2_Context *ctx, char *str, int noz);
int BGBCC_JX2_EmitGetStrtabLabelUCS4(BGBCC_JX2_Context *ctx, u32 *str, int len);
int BGBCC_JX2_EmitGetStrtabLabelUTF2UCS4(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitGetStrtabSecOfs(BGBCC_JX2_Context *ctx, char *str);
int BGBCC_JX2_EmitRawBytes(BGBCC_JX2_Context *ctx, byte *buf, int sz);
byte *BGBCC_JX2_EmitGetPos(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitGetOffs(BGBCC_JX2_Context *ctx);
int BGBCC_JX2_EmitGetSecOffs(BGBCC_JX2_Context *ctx, int sec);
int BGBCC_JX2_EmitBAlign(BGBCC_JX2_Context *ctx, int al);
byte *BGBCC_JX2_EmitGetPosForOffs(BGBCC_JX2_Context *ctx, int ofs);
int BGBCC_JX2_EmitGetOffsByte(BGBCC_JX2_Context *ctx, int ofs);
int BGBCC_JX2_EmitGetOffsWord(BGBCC_JX2_Context *ctx, int ofs);
int BGBCC_JX2_EmitGetOffsDWord(BGBCC_JX2_Context *ctx, int ofs);
int BGBCC_JX2_EmitSetOffsByte(BGBCC_JX2_Context *ctx, int ofs, int val);
int BGBCC_JX2_EmitSetOffsWord(BGBCC_JX2_Context *ctx, int ofs, int val);
int BGBCC_JX2_EmitSetOffsDWord(BGBCC_JX2_Context *ctx, int ofs, int val);
int BGBCC_JX2_EmitByte(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2_EmitWord(BGBCC_JX2_Context *ctx, int val);
int BGBCC_JX2_EmitDWord(BGBCC_JX2_Context *ctx, u32 val);
int BGBCC_JX2_EmitOpDWord(BGBCC_JX2_Context *ctx, u32 val);
int BGBCC_JX2_EmitQWord(BGBCC_JX2_Context *ctx, s64 val);
int BGBCC_JX2_EmitDWordAbs32(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitQWordAbs64(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitQWordAbs64Tag16(BGBCC_JX2_Context *ctx, int lbl, int tag);
int BGBCC_JX2_EmitPtrWordAbs(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitDWordAbs32Disp(BGBCC_JX2_Context *ctx, int lbl, int disp);
int BGBCC_JX2_EmitQWordAbs64Disp(BGBCC_JX2_Context *ctx, int lbl, int disp);
int BGBCC_JX2_EmitQWordAbs96(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitQWordAbs96Tag16(BGBCC_JX2_Context *ctx, int lbl, int tag);
int BGBCC_JX2_EmitQWordAbs96Disp(BGBCC_JX2_Context *ctx, int lbl, int disp);
int BGBCC_JX2_EmitDWordRva32(BGBCC_JX2_Context *ctx, int lbl);
int BGBCC_JX2_EmitDWordRva32Disp(BGBCC_JX2_Context *ctx, int lbl, int disp);
//AHSRC:jx2cc/jx2_emrv_opc.c
int BGBCC_JX2RV_NormalizeReg(BGBCC_JX2_Context *ctx, int reg);
int BGBCC_JX2RV_TryEmitOpRegRegReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, int rn);
int BGBCC_JX2RV_TryEmitOpRegImmReg(BGBCC_JX2_Context *ctx, int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2RV_TryEmitOpRegStRegDisp(BGBCC_JX2_Context *ctx, int nmid, int rm, int rn, int disp);
int BGBCC_JX2RV_TryEmitOpLdRegDispReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int disp, int rn);
int BGBCC_JX2RV_TryEmitOpRegStReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2RV_TryEmitOpLdRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2RV_TryEmitOpLblReg(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2RV_TryEmitOpRegLbl(BGBCC_JX2_Context *ctx,int nmid, int lbl, int reg);
int BGBCC_JX2RV_TryEmitOpRegRegLbl(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn, int lbl);
int BGBCC_JX2RV_TryEmitOpLabel(BGBCC_JX2_Context *ctx, int nmid, int lbl);
int BGBCC_JX2RV_TryEmitOpNone(BGBCC_JX2_Context *ctx, int nmid);
int BGBCC_JX2RV_TryEmitOpReg(BGBCC_JX2_Context *ctx, int nmid, int reg);
int BGBCC_JX2RV_TryEmitOpImm(BGBCC_JX2_Context *ctx, int nmid, int imm);
int BGBCC_JX2RV_TryEmitOpRegReg(BGBCC_JX2_Context *ctx,int nmid, int rm, int rn);
int BGBCC_JX2RV_TryEmitOpImmReg(BGBCC_JX2_Context *ctx,int nmid, s64 imm, int reg);
int BGBCC_JX2RV_TryEmitOpRegRegRegReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, int rp, int rn);
int BGBCC_JX2RV_TryEmitOpRegRegImmReg(BGBCC_JX2_Context *ctx, int nmid, int rs, int rt, int imm, int rn);
int BGBCC_JX2RV_TryEmitOpRegStReg2(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int rn);
int BGBCC_JX2RV_TryEmitOpLdReg2Reg(BGBCC_JX2_Context *ctx, int nmid, int rm, int ro, int rn);
//AHSRC:jx2cc/jx2_fltrom.c
ccxl_status BGBCC_JX2C_FlattenImageROM(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
ccxl_status BGBCC_JX2C_FlattenImageASM(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
ccxl_status BGBCC_JX2C_DumpImageASM(BGBCC_TransState *ctx,char *name);
ccxl_status BGBCC_JX2C_DumpImageDisAsm(BGBCC_TransState *ctx,char *name);
//AHSRC:jx2cc/jx2_fparith.c
int BGBCC_JX2C_EmitBinaryVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:jx2cc/jx2_fpreg2x.c
int BGBCC_JX2C_ScratchCheckFpRegFree(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchSafeStompFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchStompFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchHoldFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchReleaseFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchAllocFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cls);
int BGBCC_JX2C_EmitSaveFrameFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_EmitReloadSavedFrameFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_EmitRotateFpRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_EmitTryGetFpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_EmitGetFpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_EmitGetFpRegisterDirty(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitGetFpRegisterWrite(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitGetFpRegisterRead(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetFpRegisterDirty(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetFpRegisterWrite(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetFpRegisterRead(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitReleaseFpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitSyncFpRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rgix);
int BGBCC_JX2C_EmitSyncFpRegisterIndex2(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rgix, int sfl);
int BGBCC_JX2C_EmitSyncFpRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitLabelFlushFpRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitScratchSyncFpRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitScratchSyncFpRegistersSafeMask(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int mask);
int BGBCC_JX2C_EmitLoadStackOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreStackOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitLoadFrameOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreFrameOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitLoadBRegOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid1, int breg, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreBRegOfsFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid1, int breg, int ofs, int dreg);
//AHSRC:jx2cc/jx2_fpstub.c
int BGBCC_JX2C_EmitRegIsGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_EmitRegIsExtGpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_EmitRegIsFpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_EmitRegIsDpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_EmitRegIsLpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_EmitRegIsExtLpReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_MapLpRegToQgr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_MapLpRegToDgr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_MapLpRegToGr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_RegNormalizeReg(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int dreg);
int BGBCC_JX2C_CheckVRegIsZRegP(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_GetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_GetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_UpdateStatusFpscr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, u32 state);
int BGBCC_JX2C_ClearStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ClearStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetStatusFpscrSz(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetStatusFpscrPr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetStatusFpscrFloat(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetStatusFpscrDouble(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ResetModeDqLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ResetModeDqUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_SetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_CheckSetModeDqSet(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_CheckSetModeDqClear(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ResetFpscrLocal(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ResetFpscrDefaults(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_ResetFpscrUnknown(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx);
int BGBCC_JX2C_CalcDivideRecipShr(BGBCC_TransState *ctx, BGBCC_SHX_Context *sctx, int divisor, u32 *rrcp, int *rshl);
//AHSRC:jx2cc/jx2_frame.c
int BGBCC_JX2C_EmitLoadFrameOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreFrameOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitLdaFrameOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreStackOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int dreg);
int BGBCC_JX2C_EmitLoadBRegOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_JX2C_EmitLoadOp2BRegOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int nmid2, int breg, int ofs, int dreg);
int BGBCC_JX2C_EmitStoreBRegOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_JX2C_EmitLeaBRegOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ofs, int dreg);
int BGBCC_JX2C_CheckNmidScaleMatch(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int sc);
int BGBCC_JX2C_EmitLoadBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_JX2C_EmitStoreBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
int BGBCC_JX2C_EmitLoadBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_JX2C_EmitStoreBRegIRegScDispReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ireg, int sc, int disp, int dreg);
int BGBCC_JX2C_GetGblIndexGotIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int gblidx);
int BGBCC_JX2C_GetGblIndexLabel(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int gblidx);
int BGBCC_JX2C_GetVRegGotIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_GetGblNameGotIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name);
int BGBCC_JX2C_GetGblNameLabel(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name);
int BGBCC_JX2C_EmitLoadGblNameReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name, int dreg);
int BGBCC_JX2C_EmitLoadFrameNmidForVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_EmitMarkFrameVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_EmitLoadFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_EmitStoreFrameVRegByValReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_SizeToFp8(int sz);
int BGBCC_JX2C_Fp8ToSize(int v);
int BGBCC_JX2C_SizeToBndTag16(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int sz, ccxl_type tty);
int BGBCC_JX2C_CheckPadToBndTag16(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int sz);
int BGBCC_JX2C_CheckPadOffsetToBndTag16(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int ofs, int sz);
int BGBCC_JX2C_EmitLoadFrameVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_EmitStoreFrameVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_JX2C_CheckEmitLookupVRegForName(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name, ccxl_register *rreg);
int BGBCC_JX2C_CheckEmitLoadFrameNameReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name, int dreg);
int BGBCC_JX2C_CheckEmitStoreFrameNameReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name, int dreg);
int BGBCC_JX2C_EmitLdaValSyncFrameVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_EmitLdaFrameVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_GetFrameVRegFlags(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_GetFrameVRegVspanFlags(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_BeginSetupFrameVRegSpan(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EndSetupFrameVRegSpan(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_SetupFrameVRegSpan(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dstfl, int mult0);
int BGBCC_JX2C_CheckVRegLastUseInBlock(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
//AHSRC:jx2cc/jx2_frm_layout.c
int BGBCC_JX2C_SetupFrameLayout(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
//AHSRC:jx2cc/jx2_frm_prolog.c
int BGBCC_JX2C_CalcBitCount(u64 val);
int BGBCC_JX2C_CalcFrameEpiKey(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int rqt, u64 *repik, int *repix);
int BGBCC_JX2C_EmitFrameProlog_PushRegs(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, int fl, int *rfl2);
ccxl_status BGBCC_JX2C_TinyLeafProlog_ReserveReg(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, ccxl_register reg);
ccxl_status BGBCC_JX2C_TinyLeafProlog_ReserveVopRegs(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, BGBCC_CCXL_VirtOp *op);
int BGBCC_JX2C_EmitFrameProlog_TinyLeaf(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
int BGBCC_JX2C_EmitFrameProlog(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj, int fcnlbl);
//AHSRC:jx2cc/jx2_frm_epilog.c
int BGBCC_JX2C_EmitFrameEpilog_TinyLeaf(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_JX2C_EmitFrameEpilogUnwind(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
int BGBCC_JX2C_EmitFrameEpilog(BGBCC_TransState *ctx,BGBCC_JX2_Context *sctx, BGBCC_CCXL_RegisterInfo *obj);
//AHSRC:jx2cc/jx2_ldix.c
int BGBCC_JX2C_EmitLdix_FillSzNmTy(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int *rsz, int *rnm1, int *rnm2, int *rnm3, int *rnm4);
int BGBCC_JX2C_EmitLdixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_type stype, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_JX2C_EmitLdixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type,		ccxl_type stype, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitLdixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type,		ccxl_type stype, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_JX2C_EmitStixVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_type stype, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_JX2C_EmitStixVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_type stype, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitStixVRegVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type,		ccxl_type stype, ccxl_register dreg, ccxl_register sreg, ccxl_register treg, int imm);
int BGBCC_JX2C_EmitLeaVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type,		ccxl_type stype, ccxl_register dreg, ccxl_register sreg, s32 imm);
int BGBCC_JX2C_EmitLeaVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type,		ccxl_type stype, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitLdaVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitDiffPtrVRegVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitLeaSarRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int dreg, int shl);
int BGBCC_JX2C_EmitLeaShrRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int dreg, int shl);
int BGBCC_JX2C_EmitLeaShlRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int dreg, int shl);
int BGBCC_JX2C_EmitLeaBRegIRegScReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int breg, int ireg, int sc, int dreg);
//AHSRC:jx2cc/jx2_lparith.c
int BGBCC_JX2C_EmitBinaryLong_ShlImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cdreg, int shl);
int BGBCC_JX2C_EmitBinaryLong_ShrImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cdreg, int shl);
int BGBCC_JX2C_EmitBinaryLong_SarImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cdreg, int shl);
int BGBCC_JX2C_EmitBinaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitJCmpVRegVRegLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:jx2cc/jx2_lpreg.c
int BGBCC_JX2C_CheckLpRegisterNeedAlign(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitCheckValidLpRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx, int algn);
int BGBCC_JX2C_EmitCheckSavedLpRegIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_EmitCheckRegIndexIsLp(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_EmitTryGetLpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_SmashRegisterNonLive(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitGetLpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_ChecRegisterLive(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitReleaseLpRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_StompLpRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rgidx);
int BGBCC_JX2C_ConvLpRegisterNarrowing(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, ccxl_register sreg, ccxl_register dreg);
int BGBCC_JX2C_ConvLpRegisterWiden(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type stype, ccxl_register sreg, ccxl_register dreg);
//AHSRC:jx2cc/jx2_lqarith.c
int BGBCC_JX2C_GetMulSh2xForImm(int val);
int BGBCC_JX2C_GetMulSh3xForImm(int val);
int BGBCC_JX2C_EmitBinaryVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitJCmpVRegZeroQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_JX2C_EmitPredCmpVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp);
int BGBCC_JX2C_EmitPredCmpVRegZeroQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp);
int BGBCC_JX2C_EmitCSeltSelectVRegVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitCSeltCompareVRegVRegQLong(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int cmp, ccxl_register sreg, ccxl_register treg);
//AHSRC:jx2cc/jx2_lvarith.c
int BGBCC_JX2C_EmitBinaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitConvToVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitConvFromVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitConvFromVRegVRegVarString(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitConvFromVRegVRegVariant2(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitJCmpVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitCompareVRegVRegVRegVariant(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
//AHSRC:jx2cc/jx2_lxarith.c
int BGBCC_JX2C_IndexLitInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, s64 val_lo, s64 val_hi);
int BGBCC_JX2C_EmitBinaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegInt128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitBinaryVRegVRegFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitConvVRegVRegToFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitConvVRegVRegFromFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type dtype, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegFloat128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:jx2cc/jx2_lzarith.c
int BGBCC_JX2C_EmitBinaryVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitConvFromVRegVRegBitInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
//AHSRC:jx2cc/jx2_v4arith.c
int BGBCC_JX2C_LoadVectorField64(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int ofs, int csreg, int cdreg);
int BGBCC_JX2C_LoadVectorField128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int ofs, int csreg, int cdreg);
int BGBCC_JX2C_EmitBinaryVRegVRegVReg_Vec64F(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVReg_Vec128F(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVReg_Vec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitConvVRegVRegVec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type dtype, ccxl_type stype, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitJCmpVRegVRegVec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitJCmpVRegZeroVec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_JX2C_EmitCompareVRegVRegVRegVec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegVec(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
//AHSRC:jx2cc/jx2_pecoff.c
int BGBCC_JX2C_CoffLoadBufferDLL(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, byte *buf, int sz);
int BGBCC_JX2C_CoffBuildExports(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_CoffBuildImports(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_CoffSectionFlags(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, char *name);
int bgbcc_jx2c_qrsort(u32 *arr, int cnt, int rd, u32 mask);
int BGBCC_JX2C_PackBlockLZ_Reset(BGBCC_TransState *ctx);
int BGBCC_JX2C_PackBlockLZ_LookupMatch(BGBCC_TransState *ctx, byte *cs, byte *cse, int *rbl, int *rbd);
int BGBCC_JX2C_PackBlockLZ_HashByte(BGBCC_TransState *ctx, byte *cs);
int BGBCC_JX2C_PackBlockLZ_HashString(BGBCC_TransState *ctx, byte *cs, int sz);
int BGBCC_JX2C_PackBlockLZ_EstRawCost(BGBCC_TransState *ctx, int rl);
int BGBCC_JX2C_PackBlockLZ_EstMatchCost(BGBCC_TransState *ctx,int rl, int bl, int bd);
int BGBCC_JX2C_PackBlockLZ_LookupMatchB(BGBCC_TransState *ctx,byte *cs, byte *cse, byte *lcs, int *rl, int *rd);
int BGBCC_JX2C_PackBlockLZ4(BGBCC_TransState *ctx,byte *obuf, byte *ibuf, int obsz, int ibsz);
int BGBCC_JX2C_PackBlockRP2(BGBCC_TransState *ctx,byte *ibuf, byte *obuf, int ibsz, int obsz);
int BGBCC_JX2C_PackBlockLZ(BGBCC_TransState *ctx,byte *obuf, byte *ibuf, int obsz, int ibsz);
int BGBCC_JX2C_PackImagePEL(BGBCC_TransState *ctx,byte *obuf, byte *ibuf, int obsz, int ibsz);
byte *BGBCC_TKPE_UnpackL4(byte *obuf, byte *ibuf, int isz, byte *imgbase);
void W_MatchCopy2(byte *dst, int sz, int d);
void W_RawCopyB(byte *dst, byte *src, int sz);
int W_DecodeBufferRP2(byte *ibuf, byte *obuf, int ibsz, int obsz);
byte *BGBCC_TKPE_UnpackBuffer(byte *obuf, byte *ibuf, int isz, byte *imgbase, int cmp);
int BGBCC_JX2C_VerifyImagePEL(BGBCC_TransState *ctx,byte *obuf, byte *ibuf, int obsz, int ibsz);
u32 BGBCC_JX2C_CalculateImagePeChecksum(byte *buf, int size, int en);
u32 BGBCC_JX2C_CalculateImagePel4Checksum(byte *buf, int size, int en);
u32 BGBCC_JX2C_CalculateImagePel4BChecksum(byte *buf, int size, int en);
int BGBCC_JX2C_MapSortAddrArrays(s32 *map_lvatab, char **map_lvntab, byte *map_lvmtab, int map_nlbln, int rdepth);
ccxl_status BGBCC_JX2C_FlattenImagePECOFF(BGBCC_TransState *ctx,byte *obuf, int *rosz, fourcc imgfmt);
//AHSRC:jx2cc/jx2_register.c
int BGBCC_JX2C_InitRemaps(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_RemapRegJx2Rv(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchCheckRegFree(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchSafeStompReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchStompReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchHoldReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchReleaseReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_ScratchAllocTsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cls);
int BGBCC_JX2C_ScratchAllocReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cls);
int BGBCC_JX2C_ScratchQueryReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int cls);
int BGBCC_JX2C_SaveFrameOfsForReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_SaveFrameOfsForFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
u64 BGBCC_JX2C_GetFrameVrsaveMask(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
u64 BGBCC_JX2C_GetFrameArgRegsMask(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
u64 BGBCC_JX2C_GetFrameArgRegsMaskB(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
u64 BGBCC_JX2C_GetFrameArgFpRegsMask(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetBaseRegForArgumentIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetBaseRegForArgTempIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetRdRegForArgumentIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetRqRegForArgumentIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetLrRegForArgumentIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetRdRegForArgTempIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetRqRegForArgTempIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_GetRbRegReturn(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetRdRegReturn(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetRqRegReturn(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetLrRegReturn(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetRqRegThis(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_GetLrRegThis(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_CheckFrameNeedSaveReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_CheckFrameNeedSaveFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_CheckFrameSavedReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_CheckFrameSavedLpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_CheckFrameSavedFpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_EmitSaveFrameReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_EmitReloadSavedFrameReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int reg);
int BGBCC_JX2C_EmitRotateRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx, int flag);
int BGBCC_JX2C_EmitRotateLpRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx, int flag);
int BGBCC_JX2C_CheckRegisterIndexScratchP(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_CheckRegisterIndexExcludeP(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int idx);
int BGBCC_JX2C_EmitTryGetRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_EmitGetRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int fl);
int BGBCC_JX2C_EmitGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitGetRegisterRead(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetRegisterDirty(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetRegisterWrite(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitTryGetRegisterRead(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitBindVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int dreg);
int BGBCC_JX2C_GetVRegPriority(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_GetVRegLiveRange(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int *rbeg, int *rend);
int BGBCC_JX2C_CheckVRegLiveRange(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_CheckVRegMoreUsesInTraceP(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitReleaseRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_EmitSyncRegisterIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rgix);
int BGBCC_JX2C_EmitSyncRegisterIndex2(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int rgix, int sfl);
int BGBCC_JX2C_EmitSyncRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitSyncLeafRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitLabelFlushRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitScratchSyncRegisters(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitScratchSyncRegistersSafeMask(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int mask);
int BGBCC_JX2C_EmitTempPhiRegister(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_EmitTempLoadReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg);
int BGBCC_JX2C_GetVRegRegClass(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg);
int BGBCC_JX2C_GetVRegRegForIndex(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register reg, int idx);
int BGBCC_JX2C_EmitSyncProlog(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
int BGBCC_JX2C_EmitSyncEpilog(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx);
//AHSRC:jx2cc/jx2_softfpu.c
int BGBCC_JX2C_NormalizeImmVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register *rtreg);
int BGBCC_JX2C_EmitBinaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register treg);
int BGBCC_JX2C_EmitBinaryVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitUnaryVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int opr, ccxl_register sreg);
int BGBCC_JX2C_EmitCompareVRegVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int cmp, ccxl_register sreg, ccxl_register treg);
int BGBCC_JX2C_EmitJCmpVRegVRegSoftFloat(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
//AHSRC:jx2cc/jx2_struct.c
int BGBCC_JX2C_EmitDebugCheckReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int sreg);
int BGBCC_JX2C_EmitConvOpRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int sreg, int dreg);
int BGBCC_JX2C_EmitLoadSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_JX2C_EmitStoreSlotVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_JX2C_EmitLoadSlotAddrVRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_JX2C_EmitLoadSlotRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_JX2C_EmitStoreSlotVRegRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, int sreg, int gblid, int fid);
int BGBCC_JX2C_EmitLoadSlotAddrRegVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int dreg, ccxl_register sreg, int gblid, int fid);
int BGBCC_JX2C_EmitLoadThisIdxVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int dreg);
int BGBCC_JX2C_EmitStoreThisIdxVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int vreg);
int BGBCC_JX2C_EmitValueCopyRegRegSz(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int dreg, int sreg, int sz, int al);
int BGBCC_JX2C_EmitLoadTypeBRegOfsReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int sreg, int ofs, int dreg);
int BGBCC_JX2C_EmitValueZeroRegSz(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int dreg, int sz, int al);
//AHSRC:jx2cc/jx2_vreg.c
int BGBCC_JX2C_EmitOpNone(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid);
int BGBCC_JX2C_EmitOpReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int reg);
int BGBCC_JX2C_EmitOpImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, s64 imm);
int BGBCC_JX2C_EmitOpMReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int reg);
int BGBCC_JX2C_EmitOpRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpRegRegPredT(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpRegRegPredF(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpRegStReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpLdRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpRegStDecReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpLdIncRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn);
int BGBCC_JX2C_EmitOpRegStRegDisp(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int rn, int disp);
int BGBCC_JX2C_EmitOpLdRegDispReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int disp, int rn);
int BGBCC_JX2C_EmitOpRegStReg2(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_JX2C_EmitOpLdReg2Reg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int ro, int rn);
int BGBCC_JX2C_EmitOpRegStReg2Disp(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int ro, int rn, int disp);
int BGBCC_JX2C_EmitOpLdReg2DispReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, int ro, int disp, int rn);
int BGBCC_JX2C_EmitOpRegRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rs, int rt, int rn);
int BGBCC_JX2C_EmitOpImmReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, s64 imm, int reg);
int BGBCC_JX2C_EmitOpImmRegPredT(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, s64 imm, int reg);
int BGBCC_JX2C_EmitOpImmRegPredF(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, s64 imm, int reg);
int BGBCC_JX2C_EmitOpRegImmReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2C_EmitOpRegImmRegPredT(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2C_EmitOpRegImmRegPredF(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nmid, int rm, s64 imm, int rn);
int BGBCC_JX2C_EmitMovRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int sreg, int dreg);
int BGBCC_JX2C_EmitLoadVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register sreg, int dreg);
int BGBCC_JX2C_EmitStoreVRegReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_JX2C_EmitStoreVRegByValReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_register dreg, int sreg);
int BGBCC_JX2C_EmitMovVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitFpConvVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, int nm1, int nm2, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitMovVRegImm128(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, u64 immlo, u64 immhi);
int BGBCC_JX2C_EmitMovVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, s64 imm);
int BGBCC_JX2C_EmitOpNmidVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, int nmid, ccxl_register dreg, ccxl_register sreg);
int BGBCC_JX2C_EmitJCmpVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitJCmpVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp, int lbl);
int BGBCC_JX2C_EmitJCmpVRegZeroInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_JX2C_EmitJCmpVRegZero(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, int cmp, int lbl);
int BGBCC_JX2C_EmitJmpTab(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, s64 vmin, int nlbl, ccxl_label *lbls);
int BGBCC_JX2C_EmitInitObj(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg);
int BGBCC_JX2C_EmitMovVRegImm(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg, s64 imm);
int BGBCC_JX2C_SizeofVar(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register dreg);
int BGBCC_JX2C_EmitPredCmpVRegVRegInt(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp);
int BGBCC_JX2C_EmitPredCmpVRegVReg(BGBCC_TransState *ctx, BGBCC_JX2_Context *sctx, ccxl_type type, ccxl_register sreg, ccxl_register treg, int cmp);
//AHSRC:jx2cc/jx2_wexify.c
int BGBCC_JX2_CheckOps32GetRegs(BGBCC_JX2_Context *sctx, int opw1, int opw2, u16 *rrs, u16 *rrt, u16 *rrn, u16 *rrp, u16 *rspr, u16 *rspw, int *rspfl);
int BGBCC_JX2_CheckOps32ReadsRn(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32IsMem(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32IsLoad(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32Is2Stage(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32Is3Stage(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32MemNoAlias(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4, int fl);
int BGBCC_JX2_RemapReg5Xn(BGBCC_JX2_Context *sctx, u16 xn, u16 *rrl, u16 *rrh, int spfl, int rix);
int BGBCC_JX2_CheckOps32SequenceOnlyB(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4, int fl);
int BGBCC_JX2_InferOps32Interlock(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4, int opw5, int opw6, int fl);
int BGBCC_JX2_InferOps32InterlockEx2(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4, int opw5, int opw6, int opw7, int opw8, int opw9, int opw10, int fl);
int BGBCC_JX2_InferOps32InterlockI(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4, int opw5, int opw6, int fl);
int BGBCC_JX2_CheckOps32Immovable(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32ImmovableFl(BGBCC_JX2_Context *sctx, int opw1, int opw2, int flag);
int BGBCC_JX2_CheckOps32SequenceOnly(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4);
int BGBCC_JX2_CheckCanSwapOps32(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4);
int BGBCC_JX2_CheckOps32ValidWexSuffix(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32ValidWexSuffix3W(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32ValidWexSuffixFl(BGBCC_JX2_Context *sctx, int opw1, int opw2, int fl);
int BGBCC_JX2_CheckOps32ValidWexPrefix3W(BGBCC_JX2_Context *sctx, int opw1, int opw2);
int BGBCC_JX2_CheckOps32ValidWexPrefix2B(BGBCC_JX2_Context *sctx, int opw1, int opw2, int opw3, int opw4);
int BGBCC_JX2_CheckOps32ValidWexPrefix(BGBCC_JX2_Context *sctx, int opw1, int opw2);
ccxl_status BGBCC_JX2_AdjustWexifyOp(BGBCC_JX2_Context *sctx, int *ropw1, int *ropw2);
int BGBCC_JX2_InferInterlockCost(BGBCC_JX2_Context *sctx, int opwn1, int opwn2, int opw1, int opw2, int opw3, int opw4, int opw5, int opw6, int opw7, int opw8, int opw9, int opw10, int opw11, int opw12);
ccxl_status BGBCC_JX2_OptInterlock_DoSwaps(BGBCC_JX2_Context *sctx, int spos, int epos);
ccxl_status BGBCC_JX2_CheckWexify_DoSwaps(BGBCC_JX2_Context *sctx, int spos, int epos);
ccxl_status BGBCC_JX2_CheckWexify_DoBundle(BGBCC_JX2_Context *sctx, int spos, int epos);
ccxl_status BGBCC_JX2_CheckWexify(BGBCC_JX2_Context *sctx, int spos, int epos);
ccxl_status BGBCC_JX2_CheckWexify(BGBCC_JX2_Context *sctx, int spos, int epos);
ccxl_status BGBCC_JX2_BeginWex(BGBCC_JX2_Context *sctx);
ccxl_status BGBCC_JX2_EndWex(BGBCC_JX2_Context *sctx);
//AHSRC:mm/inflate.c
int PDUNZ_ReadBit();
int PDUNZ_Read2Bits();
int PDUNZ_Read3Bits();
int PDUNZ_Read4Bits();
int PDUNZ_Read5Bits();
int PDUNZ_ReadNBits(int n);
void PDUNZ_SkipNBits(int n);
int PDUNZ_PeekWord();
void PDUNZ_AlignByte();
int PDUNZ_ReadAlignedByte();
int PDUNZ_ReadAlignedWord();
int PDUNZ_TransposeByte(int v);
int PDUNZ_TransposeWord(int v);
int PDUNZ_SetupTable(byte *cl, int ncl,u16 *tc, u16 *tm, byte *tl, u16 *ti, u16 *tn);
int PDUNZ_SetupStatic();
int PDUNZ_DecodeSymbol();
int PDUNZ_DecodeDistance();
int PDUNZ_DecodeCodeLengths(byte *cl, int ncl);
int PDUNZ_DecodeHeader();
int PDUNZ_DecodeRun(int sym);
int PDUNZ_DecodeBlockData();
int PDUNZ_DecodeBlock();
int PDUNZ_DecodeStream(byte *ibuf, byte *obuf, int isz, int osz);
//AHSRC:mm/deflate.c
void PDZ2_WriteBit(int i);
void PDZ2_Write2Bits(int i);
void PDZ2_Write3Bits(int i);
void PDZ2_Write4Bits(int i);
void PDZ2_Write5Bits(int i);
void PDZ2_WriteNBits(int i, int n);
void PDZ2_FlushBits();
int PDZ2_BalanceTree_r(short *nodes, short *nlen, int root, int h, int ml);
void PDZ2_CalcLengths_r(short *nodes, byte *cl, int root, int h);
void PDZ2_BuildLengths(int *stat, int nc, byte *cl, int ml);
void PDZ2_UpdateWindowByte(byte *s);
void PDZ2_UpdateWindowString(byte *s, int l);
void PDZ2_FlushWindow();
int PDZ2_LookupString(byte *cs, byte *ce, int *rl, int *rd);
int PDZ2_LZCompressBuffer(byte *ibuf, byte *obuf, byte *mbuf, int sz);
void PDZ2_StatLZRun(byte *cs, int *lstat, int *dstat);
void PDZ2_StatLZBuffer(byte *tbuf, byte *mbuf, int n,int *lstat, int *dstat);
void PDZ2_StatLengths(byte *cl, int nc, int *stat);
void PDZ2_EncodeSymbol(int v);
void PDZ2_EncodeLengths(byte *cl, int nc);
void PDZ2_EncodeLZRun(byte *cs);
void PDZ2_EncodeLZBuffer(byte *tbuf, byte *mbuf, int n);
int PDZ2_EncodeBlockStatic(byte *ibuf, int isz, int last);
int PDZ2_EncodeBlock(byte *ibuf, int isz, int last);
int PDZ2_EncodeStream_I(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStream64(byte *ibuf, byte *obuf, int isz, int osz);
int PDZ2_EncodeStreamLvl(byte *ibuf, byte *obuf, int isz, int osz, int l);
//AHSRC:mm/cc_exwad.c
u16 exwad_getu16(byte *b);
u32 exwad_getu32(byte *b);
void exwad_setu16(byte *b, u16 a);
void exwad_setu32(byte *b, u32 a);
u32 ExWAD_CRC32(void *buf, int sz, u32 lcrc);
void ExWAD_StoreImage(char *name, ExWAD_Context *ctx);
int ExWAD_SaveImage(ExWAD_Context *ctx);
ExWAD_Context *ExWAD_LoadImage(char *name);
ExWAD_Context *ExWAD_LoadImageBuffer(char *name, byte *buf, int sz);
void ExWAD_MarkRangeResv(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeUsed(ExWAD_Context *ctx, int base, int sz);
void ExWAD_MarkRangeFree(ExWAD_Context *ctx, int base, int sz);
void ExWAD_CheckExpandImage(ExWAD_Context *img, int sz);
int ExWAD_FindFreeRange(ExWAD_Context *ctx, int sz);
int ExWAD_AllocRange(ExWAD_Context *ctx, int sz);
int ExWAD_FindLastCell(ExWAD_Context *ctx);
void ExWAD_FixupEXE(ExWAD_Context *ctx);
void ExWAD_FixupImage(ExWAD_Context *ctx);
int ExWAD_Hash16(void *buf, int szbuf);
ExWAD_Context *ExWAD_LoadImage2(char *name);
ExWAD_Context *ExWAD_LoadImageBufferRead(char *name, byte *buf, int sz);
int ExWAD_GetDirEntIndexName(ExWAD_Context *ctx,int idx, char *nbuf);
int ExWAD_LookupDirEnt(ExWAD_Context *ctx, char *name);
void ExWAD_CheckExpandDir(ExWAD_Context *ctx, int num);
int ExWAD_GetStringRVA(ExWAD_Context *ctx, char *str);
int ExWAD_GetDirEnt(ExWAD_Context *ctx, char *name);
byte *ExWAD_LoadFile(ExWAD_Context *ctx, char *name, int *rsz);
void ExWAD_StoreFile(ExWAD_Context *ctx, char *name, byte *buf, int sz);
void ExWAD_AddFile(ExWAD_Context *ctx, char *name);
//AHSRC:mm/ccl_context.c
BGBCC_Object *BGBCC_NewContext();
int BGBCC_DestroyContext(BGBCC_Object *ctx);
void BGBCC_EmitLabelPos(BGBCC_Object *ctx, char *name, int pos);
void BGBCC_EmitGotoPos(BGBCC_Object *ctx, char *name, int ty, int pos);
//AHSRC:mm/ccl_coff.c
int BGBCC_COFF_ResolveRelocs(BGBCC_Object *ctx, BGBCC_COFF_Info *inf, int sec,int offs, int cnt);
BGBCC_Object *BGBCC_COFF_LoadObjectBuf(char *name, byte *buf, int sz);
BGBCC_Object *BGBCC_COFF_LoadObject(char *name);
int BGBCC_COFF_LoadLibraryBuf(char *name, byte *buf, int sz);
int BGBCC_COFF_LoadLibrary(char *name);
int BGBCC_COFF_LoadLibrary(char *name);
void bgbcc_coff_set16(byte *ptr, int i);
void bgbcc_coff_set32(byte *ptr, int i);
int bgbcc_coff_get16(byte *ptr);
int bgbcc_coff_get32(byte *ptr);
int bgbcc_coff_idxstr(char *strs, char *str);
int bgbcc_coff_idxstr2(char *strs, char *str, int fl);
int BGBCC_COFF_StoreObjectBuf(BGBCC_Object *ctx, byte *buf, int msz);
int BGBCC_COFF_StoreObject(char *name, BGBCC_Object *ctx);
byte *BGBCC_COFF_EncodeObject(BGBCC_Object *ctx, int *rsz);
//AHSRC:mm/ccl_elf.c
BGBCC_Object *BGBCC_ELF_LoadObjectBuf(char *name, byte *buf, int sz);
//AHSRC:mm/dyll_metapath.c
BGBDYC_MetaNode *DYLL_MetaPath_LookupNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
int DYLL_MetaPath_AdjustBiDepth(BGBDYC_MetaBiNode *node);
int DYLL_MetaPath_BalanceBiNode(BGBDYC_MetaBiNode *node);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR2(BGBDYC_MetaBiNode *node, char *name);
BGBDYC_MetaNode *DYLL_MetaPath_GetNodeR(BGBDYC_MetaNode *node, char *path);
BGBDYC_MetaNode *DYLL_MetaPath_LookupNode(char *path);
BGBDYC_MetaNode *DYLL_MetaPath_GetNode(char *path);
BGBDYC_MetaLeaf *DYLL_MetaPath_LookupNodeLeaf(BGBDYC_MetaNode *node, char *key);
BGBDYC_MetaLeaf *DYLL_MetaPath_GetNodeLeaf(BGBDYC_MetaNode *node, char *key);
void DYLL_MetaPath_SplitKey(char *path, char *nb, char *kb);
char *DYLL_MetaPath_LookupKey(char *path);
void DYLL_MetaPath_BindKey(char *path, char *val);
void DYLL_MetaPath_LoadDB(char *name);
void DYLL_MetaPath_SaveNode(FILE *fd,BGBDYC_MetaNode *node, char *path, int ind);
void DYLL_MetaPath_SaveDB(char *name);
char *DYLL_MetaPath_SaveNodeBuffer(char *obuf,BGBDYC_MetaNode *node, char *path, int ind);
int DYLL_MetaPath_SaveDBBuffer(char *obuf, int szbuf);
void dyllMetaInit();
void dyllMetaCommit();
void dyllMetaBindKey(char *key, char *val);
char *dyllMetaLookupKey(char *key);
//AHSRC:mm/dyll_metabin.c
void DYLL_MetaBin_EmitByte(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EmitVLI(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EmitSVLI(BGBDYC_MetaBinary *ctx, int val);
void DYLL_MetaBin_EncodeString(BGBDYC_MetaBinary *ctx, char *str);
void DYLL_MetaBin_SaveBinaryNode(BGBDYC_MetaBinary *ctx, BGBDYC_MetaNode *node);
byte *DYLL_MetaBin_SaveBinaryBuf(char *name, int *rsz);
//AHSRC:bgbmeta.c
char *BGBCP_LookupSig(BGBCP_ParseState *ctx, char *name);
char *BGBCP_LookupTypeSig(BGBCP_ParseState *ctx, char *name);
char *BGBCP_LookupPPKey(BGBCP_ParseState *ctx, char *name);
int BGBCC_BindPPKey(BGBCP_ParseState *ctx, char *name, char *sig);
int BGBCC_BindIsMetaP(BGBCP_ParseState *ctx);
int BGBCC_StoreTextFile(char *name, char *buf);
int BGBCC_StoreFile(char *name, void *buf, int sz);
int bgbcc_storefile(char *name, void *buf, int sz);
void *bgbcc_loadfile(char *name, int *rsz);
int bgbcc_loadfile_checkbinary(byte *buf);
int bgbcc_loadfile_CheckCategory(byte *buf, int sz);
int bgbcc_asc2ucs(int v);
void *bgbcc_loadfile_txt(char *name, int *rsz);
void *bgbcc_loadfile2(char *name, int *rsz);
int BGBCC_LoadCMeta(char *name);
BCCX_Node *BGBCC_LoadCSourceAST(char *name);
int BGBCC_LoadCSourcesCCXL(char **names, int nnames, byte *obuf, int *rsz, fourcc imgfmt);
u32 BGBCC_GetArch();
u32 BGBCC_GetSubArch();
int BGBCC_LoadConfig(char *name);
int BGBCC_CheckArgIsAbsPath(char *str);
int BGBCC_InitEnv(int argc, char **argv, char **env);
int BGBCC_Init();
void ccAddInclude(char *path);
void ccAddLibrary(char *path);
void ccAddSource(char *path);
void ccAddDefineString(char *str);
int help(char *arg0);
int main(int argc, char *argv[], char **env);
